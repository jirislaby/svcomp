/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 26 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 27 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 28 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 29 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 34 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 37 "include/linux/types.h"
typedef _Bool bool;
#line 39 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 40 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 53 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 62 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 67 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 77 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 110 "include/linux/types.h"
typedef __s32 int32_t;
#line 116 "include/linux/types.h"
typedef __u32 uint32_t;
#line 141 "include/linux/types.h"
typedef unsigned long sector_t;
#line 142 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 171 "include/linux/types.h"
typedef __u16 __le16;
#line 172 "include/linux/types.h"
typedef __u16 __be16;
#line 174 "include/linux/types.h"
typedef __u32 __be32;
#line 179 "include/linux/types.h"
typedef __u32 __wsum;
#line 182 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 183 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 195 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 195 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 200 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 200 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 201 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 206
struct hlist_node;
#line 206 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 210 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 121 "include/linux/kernel.h"
struct completion;
#line 122
struct pt_regs;
#line 228
struct pid;
#line 752
struct task_struct;
#line 753
struct mm_struct;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1864_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1864_8 ldv_1864 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 277
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2083_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2098_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2099_14 {
   struct __anonstruct_ldv_2083_15 ldv_2083 ;
   struct __anonstruct_ldv_2098_16 ldv_2098 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2099_14 ldv_2099 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_KDB = 19,
    KM_TYPE_NR = 20
} ;
#line 122
struct thread_struct;
#line 124
struct cpumask;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 607 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 271 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/msr.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 148 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4686_20 {
   u64 rip ;
   u64 rdp ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4692_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4693_19 {
   struct __anonstruct_ldv_4686_20 ldv_4686 ;
   struct __anonstruct_ldv_4692_21 ldv_4692 ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4702_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4693_19 ldv_4693 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4702_22 ldv_4702 ;
};
#line 332 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 353 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 358 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 364 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 370 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 378 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   union thread_xstate *state ;
};
#line 424
struct kmem_cache;
#line 425
struct perf_event;
#line 426 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 652 "include/linux/list.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_25 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_25 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 42 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 48 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 133 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 176 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 551 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5627_27 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5628_26 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5627_27 ldv_5627 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5628_26 ldv_5628 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_28 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_28 rwlock_t;
#line 23
struct thread_info;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct timespec;
#line 73
struct compat_timespec;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_ldv_5844_30 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_futex_31 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_nanosleep_32 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 74
struct pollfd;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_poll_33 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
union __anonunion_ldv_5867_29 {
   struct __anonstruct_ldv_5844_30 ldv_5844 ;
   struct __anonstruct_futex_31 futex ;
   struct __anonstruct_nanosleep_32 nanosleep ;
   struct __anonstruct_poll_33 poll ;
};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5867_29 ldv_5867 ;
};
#line 54 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 396 "include/linux/spinlock.h"
struct vm_area_struct;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_34 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_34 seqlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 311 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 96 "include/linux/debugobjects.h"
struct tvec_base;
#line 97 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 263 "include/linux/timer.h"
struct hrtimer;
#line 264
enum hrtimer_restart;
#line 276
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 410
struct hlist_nulls_node;
#line 410 "include/linux/workqueue.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 639 "include/linux/mmzone.h"
struct rw_semaphore;
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
typedef long rwsem_count_t;
#line 78 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
struct rw_semaphore {
   rwsem_count_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 753 "include/linux/mmzone.h"
struct ctl_table;
#line 174 "include/linux/ioport.h"
struct device;
#line 54 "include/linux/delay.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 37 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 46 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 47 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 266
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 276
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 283
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 290 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct completion completion ;
   unsigned long wakeup_count ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_100 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_100 mm_context_t;
#line 15 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 35 "include/linux/kmod.h"
struct key;
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 443
struct sock;
#line 444
struct kobject;
#line 445
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 451 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void const   *(*current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
};
#line 55 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 98 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 116
struct sysfs_dirent;
#line 181 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 215
struct kernel_param;
#line 216 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 42 "include/linux/moduleparam.h"
struct kparam_string;
#line 42
struct kparam_array;
#line 42 "include/linux/moduleparam.h"
union __anonunion_ldv_11261_110 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 42 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   u16 flags ;
   union __anonunion_ldv_11261_110 ldv_11261 ;
};
#line 57 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 63 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   unsigned int elemsize ;
   void *elem ;
};
#line 396 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 567 "include/linux/rcupdate.h"
struct tracepoint;
#line 568 "include/linux/rcupdate.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 28 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 87 "include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 117 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 60
struct module_param_attrs;
#line 60 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 190
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 196 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 383
struct module_sect_attrs;
#line 383
struct module_notes_attrs;
#line 383
struct ftrace_event_call;
#line 383 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct cred;
#line 40 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 41 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 55 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_111 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_111 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_112 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_112 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_113 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_113 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_114 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_114 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_115 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_115 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_116 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_116 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_117 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_117 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 141 "include/linux/if.h"
union __anonunion_ifs_ifsu_118 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 141 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_118 ifs_ifsu ;
};
#line 159 "include/linux/if.h"
union __anonunion_ifr_ifrn_119 {
   char ifrn_name[16U] ;
};
#line 159 "include/linux/if.h"
union __anonunion_ifr_ifru_120 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 159 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_119 ifr_ifrn ;
   union __anonunion_ifr_ifru_120 ifr_ifru ;
};
#line 123 "include/linux/if_ether.h"
struct prio_tree_node;
#line 123 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 172
struct address_space;
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_12425_123 {
   u16 inuse ;
   u16 objects ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12426_122 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_12425_123 ldv_12425 ;
};
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_12431_125 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12434_124 {
   struct __anonstruct_ldv_12431_125 ldv_12431 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12438_126 {
   unsigned long index ;
   void *freelist ;
};
#line 173 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_12426_122 ldv_12426 ;
   union __anonunion_ldv_12434_124 ldv_12434 ;
   union __anonunion_ldv_12438_126 ldv_12438 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_128 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_127 {
   struct __anonstruct_vm_set_128 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_127 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_12866 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 52 "include/linux/net.h"
typedef enum ldv_12866 socket_state;
#line 175 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 176
struct pipe_inode_info;
#line 177
struct inode;
#line 178
struct net;
#line 195
struct fasync_struct;
#line 195 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 125 "include/linux/net.h"
struct proto_ops;
#line 125 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 151
struct kiocb;
#line 152 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 946
struct ctl_table_header;
#line 964 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 984 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1026 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1034 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 1068 "include/linux/sysctl.h"
struct ratelimit_state {
   spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 328 "include/trace/events/kmem.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int stat[18U] ;
};
#line 45 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 56 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct class_private;
#line 22
struct bus_type;
#line 23
struct bus_type_private;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 158 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 188
struct class_attribute;
#line 188 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 218
struct device_type;
#line 257 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 308 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 335 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 396 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 405
struct dma_coherent_mem;
#line 405 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 17 "include/asm-generic/scatterlist.h"
struct file_ra_state;
#line 18
struct user_struct;
#line 19
struct writeback_control;
#line 165 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 182 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 817
struct hrtimer_clock_base;
#line 818
struct hrtimer_cpu_base;
#line 827
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 832 "include/linux/dmaengine.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 444
struct net_device;
#line 445 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 255 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 256
struct sec_path;
#line 256 "include/linux/skbuff.h"
struct __anonstruct_ldv_19135_132 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 256 "include/linux/skbuff.h"
union __anonunion_ldv_19136_131 {
   __wsum csum ;
   struct __anonstruct_ldv_19135_132 ldv_19135 ;
};
#line 256 "include/linux/skbuff.h"
union __anonunion_ldv_19166_133 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 256 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_19136_131 ldv_19136 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u32 rxhash ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char deliver_no_wcard : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_19166_133 ldv_19166 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 441
struct dst_entry;
#line 488
struct rtable;
#line 114 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 561
struct dentry;
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 272 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
};
#line 352 "include/linux/if_link.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 87 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 302
struct file_operations;
#line 60 "include/linux/miscdevice.h"
struct pm_qos_request_list {
   struct plist_node list ;
   int pm_qos_class ;
};
#line 408 "include/linux/rculist.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 51 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 77 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 92 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 100 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 109 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 205 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 227 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 275 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 287 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 306 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 328 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 335 "include/linux/ethtool.h"
struct ethtool_rawip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __u8 hdata[64U] ;
};
#line 341 "include/linux/ethtool.h"
struct ethtool_ether_spec {
   __be16 ether_type ;
   __u8 frame_size ;
   __u8 eframe[16U] ;
};
#line 347 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 359 "include/linux/ethtool.h"
union __anonunion_h_u_135 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 359 "include/linux/ethtool.h"
union __anonunion_m_u_136 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 359 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_135 h_u ;
   union __anonunion_m_u_136 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 376 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 388 "include/linux/ethtool.h"
struct ethtool_rxfh_indir {
   __u32 cmd ;
   __u32 size ;
   __u32 ring_index[0U] ;
};
#line 397 "include/linux/ethtool.h"
union __anonunion_h_u_137 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 397 "include/linux/ethtool.h"
union __anonunion_m_u_138 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 397 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_137 h_u ;
   union __anonunion_m_u_138 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 420 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 430 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 447 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_list {
   struct list_head list ;
   unsigned int count ;
};
#line 473 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rx_ntuple)(struct net_device * , u32  , void * ) ;
   int (*get_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir * ) ;
   int (*set_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir  const  * ) ;
};
#line 607
struct prot_inuse;
#line 608 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 69 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 74 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 80 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 85 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 92 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 98 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[79U] ;
};
#line 104 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 110
struct proc_dir_entry;
#line 110 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 73 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 74
struct fib_rules_ops;
#line 75
struct xt_table;
#line 75 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   atomic_t rt_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 68 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
};
#line 28 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 68 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 315 "include/linux/in.h"
union __anonunion_in6_u_139 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 315 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_139 in6_u ;
};
#line 247 "include/linux/netfilter.h"
struct flowi;
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip4_u_141 {
   __be32 daddr ;
   __be32 saddr ;
   __u8 tos ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip6_u_142 {
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dn_u_143 {
   __le16 daddr ;
   __le16 saddr ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_nl_u_140 {
   struct __anonstruct_ip4_u_141 ip4_u ;
   struct __anonstruct_ip6_u_142 ip6_u ;
   struct __anonstruct_dn_u_143 dn_u ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ports_145 {
   __be16 sport ;
   __be16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_icmpt_146 {
   __u8 type ;
   __u8 code ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dnports_147 {
   __le16 sport ;
   __le16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_mht_148 {
   __u8 type ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_uli_u_144 {
   struct __anonstruct_ports_145 ports ;
   struct __anonstruct_icmpt_146 icmpt ;
   struct __anonstruct_dnports_147 dnports ;
   __be32 spi ;
   struct __anonstruct_mht_148 mht ;
};
#line 308 "include/linux/netfilter.h"
struct flowi {
   int oif ;
   int iif ;
   __u32 mark ;
   union __anonunion_nl_u_140 nl_u ;
   __u8 proto ;
   __u8 flags ;
   union __anonunion_uli_u_144 uli_u ;
   __u32 secid ;
};
#line 327
struct bio;
#line 328
struct bio_integrity_payload;
#line 329
struct block_device;
#line 17 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 18 "include/linux/blk_types.h"
typedef void bio_destructor_t(struct bio * );
#line 19 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 28 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 89 "include/linux/kdev_t.h"
struct nameidata;
#line 90
struct path;
#line 91
struct vfsmount;
#line 92 "include/linux/kdev_t.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_149 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_149 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 398 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 204
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 211
struct pid_namespace;
#line 211 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 164 "include/linux/pid.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 51 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 416 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 162 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 271 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 299 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 310 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 324 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 337 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 383 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 566 "include/linux/fs.h"
union __anonunion_arg_151 {
   char *buf ;
   void *data ;
};
#line 566 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_150 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_151 arg ;
   int error ;
};
#line 566 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_150 read_descriptor_t;
#line 569 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 618
struct backing_dev_info;
#line 619 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 640
struct hd_struct;
#line 640
struct gendisk;
#line 640 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 710
struct posix_acl;
#line 711
struct inode_operations;
#line 711
struct file_lock;
#line 711
struct cdev;
#line 711 "include/linux/fs.h"
union __anonunion_ldv_23135_152 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 711 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_23135_152 ldv_23135 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 874 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 882 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 905 "include/linux/fs.h"
union __anonunion_f_u_153 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 905 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_153 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1029
struct files_struct;
#line 1029 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1030 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1035 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_155 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_154 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_155 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_154 fl_u ;
};
#line 1134 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1313
struct file_system_type;
#line 1313
struct super_operations;
#line 1313
struct xattr_handler;
#line 1313
struct mtd_info;
#line 1313 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
};
#line 1433 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1471
struct block_device_operations;
#line 1472 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1511 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1554 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1731 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 361 "include/linux/netfilter.h"
struct ebt_table;
#line 362 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
   char *slabname ;
};
#line 470 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
#line 61
struct net_generic;
#line 62 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct netns_xfrm xfrm ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
};
#line 95 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
};
#line 54 "include/net/dcbnl.h"
struct vlan_group;
#line 55
struct netpoll_info;
#line 56
struct phy_device;
#line 57
struct wireless_dev;
#line 58
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 117 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 136 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 208
struct neighbour;
#line 209
struct neigh_parms;
#line 236 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 241 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 283 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 384 "include/linux/netdevice.h"
typedef struct sk_buff *rx_handler_func_t(struct sk_buff * );
#line 491
struct Qdisc;
#line 491 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   u64 tx_bytes ;
   u64 tx_packets ;
   u64 tx_dropped ;
};
#line 513 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 524 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 fill ;
   unsigned int last_qtail ;
};
#line 535 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 583 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct netdev_rx_queue *first ;
   atomic_t count ;
};
#line 592 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
};
#line 789
struct iw_handler_def;
#line 789
struct iw_public_data;
#line 789
struct garp_port;
#line 789
struct rtnl_link_ops;
#line 789 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request_list pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   int uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   struct netdev_queue rx_queue ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned short reg_state ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
   struct ethtool_rx_ntuple_list ethtool_ntuple_list ;
   struct phy_device *phydev ;
};
#line 1233
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 144 "include/linux/irq.h"
struct timer_rand_state;
#line 146
struct irqaction;
#line 99 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 118 "include/linux/sem.h"
struct sem_undo_list;
#line 131 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 140 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 149
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_161 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_161 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_163 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_164 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_165 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_166 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_167 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_168 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_162 {
   int _pad[28U] ;
   struct __anonstruct__kill_163 _kill ;
   struct __anonstruct__timer_164 _timer ;
   struct __anonstruct__rt_165 _rt ;
   struct __anonstruct__sigchld_166 _sigchld ;
   struct __anonstruct__sigfault_167 _sigfault ;
   struct __anonstruct__sigpoll_168 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_162 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_171 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_171 seccomp_t;
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 40 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 84 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_28984_172 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_173 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_174 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_28984_172 ldv_28984 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_173 type_data ;
   union __anonunion_payload_174 payload ;
};
#line 291
struct audit_context;
#line 69 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 263
struct futex_pi_state;
#line 264
struct robust_list_head;
#line 265
struct bio_list;
#line 266
struct fs_struct;
#line 267
struct perf_event_context;
#line 149 "include/linux/sched.h"
struct cfs_rq;
#line 357
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_175 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_175 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 398 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 440 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 448 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 455 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 472 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 508
struct tty_struct;
#line 508
struct taskstats;
#line 508
struct tty_audit_buf;
#line 508 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
   int oom_score_adj ;
};
#line 655 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 697
struct reclaim_state;
#line 698 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 716 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 990
struct io_context;
#line 1013
struct rq;
#line 1014 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*moved_group)(struct task_struct * , int  ) ;
};
#line 1077 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1082 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1117 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1143
struct rt_rq;
#line 1143 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1160
struct mem_cgroup;
#line 1160 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long bytes ;
   unsigned long memsw_bytes ;
};
#line 1496
struct css_set;
#line 1496
struct compat_robust_list_head;
#line 1496 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int mems_allowed_change_disable ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
};
#line 326 "include/linux/fsnotify.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char const   *filename ;
   char const   *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 61 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 79 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
#line 82 "include/linux/security.h"
struct xfrm_policy;
#line 83
struct xfrm_state;
#line 104
struct request_sock;
#line 3000 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 85 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 95 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 785 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 93
struct neigh_table;
#line 93 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   struct net_device *dev ;
   unsigned long used ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t probes ;
   rwlock_t lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   atomic_t refcnt ;
   int (*output)(struct sk_buff * ) ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   struct neigh_ops  const  *ops ;
   u8 primary_key[0U] ;
};
#line 116 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 126 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 136 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct pneigh_entry **phash_buckets ;
};
#line 362
struct dn_route;
#line 362 "include/net/neighbour.h"
union __anonunion_ldv_33902_180 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 362 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[14U] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[1U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_33902_180 ldv_33902 ;
};
#line 100 "include/net/sock.h"
struct __anonstruct_socket_lock_t_181 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 100 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_181 socket_lock_t;
#line 100
struct proto;
#line 101 "include/net/sock.h"
union __anonunion_ldv_34044_182 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_34050_183 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_34058_184 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 101 "include/net/sock.h"
struct sock_common {
   union __anonunion_ldv_34044_182 ldv_34044 ;
   atomic_t skc_refcnt ;
   int skc_tx_queue_mapping ;
   union __anonunion_ldv_34050_183 ldv_34050 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_34058_184 ldv_34058 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
#line 153 "include/net/sock.h"
struct __anonstruct_sk_backlog_185 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   int len ;
};
#line 153 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_185 sk_backlog ;
   struct socket_wq *sk_wq ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2U] ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   __u32 sk_rxhash ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 697
struct request_sock_ops;
#line 698
struct timewait_sock_ops;
#line 699
struct inet_hashinfo;
#line 700
struct raw_hashinfo;
#line 701
struct udp_table;
#line 701 "include/net/sock.h"
union __anonunion_h_186 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 701 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_186 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 172 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 185 "include/linux/drbd.h"
struct __anonstruct_ldv_35202_187 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned short _pad : 11 ;
};
#line 185 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_35202_187 ldv_35202 ;
   unsigned int i ;
};
#line 110 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 111
struct crypto_async_request;
#line 112
struct crypto_aead;
#line 113
struct crypto_blkcipher;
#line 114
struct crypto_hash;
#line 115
struct crypto_rng;
#line 116
struct crypto_tfm;
#line 117
struct crypto_type;
#line 118
struct aead_givcrypt_request;
#line 119
struct skcipher_givcrypt_request;
#line 119 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 128 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 141 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 167 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 181 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 186 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 205 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 220 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 237 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 246 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 252 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 261 "include/linux/crypto.h"
union __anonunion_cra_u_188 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 261 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_188 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 313 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 333 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 348 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 357 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 365 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 377 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 384 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 392 "include/linux/crypto.h"
union __anonunion_crt_u_189 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 392 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_189 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 421 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 425 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 429 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 445 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 142 "include/linux/jhash.h"
struct request_values {

};
#line 145 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 363 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 80 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 89 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   int make_it_fail ;
   unsigned long stamp ;
   int in_flight[2U] ;
   struct disk_stats *dkstats ;
   struct rcu_head rcu_head ;
};
#line 128 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 135
struct request_queue;
#line 135
struct blk_integrity;
#line 135 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct work_struct async_notify ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 15 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 20 "include/linux/writeback.h"
struct writeback_control {
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   unsigned long wb_start ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
};
#line 56
struct bdi_writeback;
#line 38 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 45 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 61 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   void (*unplug_io_fn)(struct backing_dev_info * , struct page * ) ;
   void *unplug_io_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 29 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned short cgroup_changed ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 94 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 371 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 63 "include/linux/blkdev.h"
union __anonunion_ldv_38766_197 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 63 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_38766_197 ldv_38766 ;
   void *elevator_private ;
   void *elevator_private2 ;
   void *elevator_private3 ;
   struct gendisk *rq_disk ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 20 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 22 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef int elevator_queue_empty_fn(struct request_queue * );
#line 24 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 28 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 29 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 30 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 31 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 33 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 34 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 35 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_queue_empty_fn *elevator_queue_empty_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 64 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 72 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 84 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
};
#line 185 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 186 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 187 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 188 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 189 "include/linux/blkdev.h"
typedef void unplug_fn(struct request_queue * );
#line 190 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 198 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 200 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 201 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 202 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 203
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 210 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 216 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 225 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char no_cluster ;
   signed char discard_zeroes_data ;
};
#line 252 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   unplug_fn *unplug_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct timer_list unplug_timer ;
   int unplug_thresh ;
   unsigned long unplug_delay ;
   struct work_struct unplug_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   unsigned int ordered ;
   unsigned int next_ordered ;
   unsigned int ordseq ;
   int orderr ;
   int ordcolor ;
   struct request pre_flush_rq ;
   struct request bar_rq ;
   struct request post_flush_rq ;
   struct request *orig_bar_rq ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 1171 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1192 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1193 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1194 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1195 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1196 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1237 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 492 "include/linux/ipv6.h"
struct __anonstruct_ldv_40243_204 {
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 492 "include/linux/ipv6.h"
union __anonunion_ldv_40245_203 {
   struct __anonstruct_ldv_40243_204 ldv_40243 ;
   struct rcu_head rcu ;
};
#line 492 "include/linux/ipv6.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   __be32 v4daddr ;
   __u32 avl_height ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   union __anonunion_ldv_40245_203 ldv_40245 ;
};
#line 49 "include/linux/route.h"
struct in_device;
#line 49 "include/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   struct flowi fl ;
   struct in_device *idev ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_iif ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   struct inet_peer *peer ;
};
#line 225 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1516 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 346 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 376 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 392 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 401 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 424 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header head ;
   u32 barrier ;
   u32 pad ;
};
#line 431 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header head ;
   u32 barrier ;
   u32 set_size ;
};
#line 445 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 458 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 471 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header head ;
   u64 uuid[6U] ;
};
#line 482 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_segment_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 492 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header head ;
   u32 state ;
};
#line 497 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header head ;
   u32 mask ;
   u32 val ;
};
#line 503 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header head ;
   u32 retcode ;
};
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   struct p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
};
#line 621
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 628 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 649
struct drbd_work;
#line 659 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 663
struct drbd_tl_epoch;
#line 694 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_req ;
};
#line 702 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 746 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node colision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   u64 block_id ;
};
#line 798
struct drbd_bitmap;
#line 799 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 851 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 861 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 73 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
};
#line 138 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct file *lo_file ;
   struct file *md_file ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 903 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 910
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2,
    WO_bio_barrier = 3
} ;
#line 917 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work md_sync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_mark_left ;
   unsigned long rs_mark_time ;
   unsigned long rs_same_csum ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
};
#line 1097
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   atomic_t bm_async_io ;
   wait_queue_head_t bm_io_wait ;
   unsigned long bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 1404 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___0;
#line 1456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___5;
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 139 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 146
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_MASK = 31
} ;
#line 1212 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 54 "include/linux/smp_lock.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct cgroupfs_root;
#line 57
struct cgroup;
#line 58
struct css_id;
#line 56 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 190 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 243 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 166 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_MAX_CMD = 40,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 664 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 735 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 741 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 897 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    send_canceled = 5,
    send_failed = 6,
    handed_over_to_network = 7,
    connection_lost_while_pending = 8,
    read_retry_remote_canceled = 9,
    recv_acked_by_peer = 10,
    write_acked_by_peer = 11,
    write_acked_by_peer_and_sis = 12,
    conflict_discarded_by_peer = 13,
    neg_acked = 14,
    barrier_acked = 15,
    data_received = 16,
    read_completed_with_error = 17,
    read_ahead_completed_with_error = 18,
    write_completed_with_error = 19,
    completed_ok = 20,
    nothing = 21
} ;
#line 284 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 181 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 251
enum drbd_state_ret_codes {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 477 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header head ;
   u64 uuid ;
};
#line 525
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 529 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 727
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BARRIER_DONE = 2,
    EV_BECAME_LAST = 3,
    EV_CLEANUP = 32
} ;
#line 1105
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1418
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct flush_work {
   struct drbd_work w ;
   struct drbd_epoch *epoch ;
};
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3379
enum receive_bitmap_ret {
    OK = 0,
    DONE = 1,
    FAILED = 2
} ;
#line 3656 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef int (*drbd_cmd_handler_f)(struct drbd_conf * , struct p_header * );
#line 4293 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header * ) ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 190 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_207 {
   u32 pos ;
   u32 extent ;
};
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_207 updates[62U] ;
   u32 xor_sum ;
};
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct drbd_atodb_wait {
   atomic_t count ;
   struct completion io_done ;
   struct drbd_conf *mdev ;
   int error ;
};
#line 146 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 490 "include/linux/module.h"
typedef unsigned int pao_T_____3;
#line 490 "include/linux/module.h"
typedef unsigned int pao_T_____4;
#line 490 "include/linux/module.h"
typedef unsigned int pao_T_____5;
#line 490 "include/linux/module.h"
typedef unsigned int pao_T_____6;
#line 189 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 1995 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_30234 {
    OK___0 = 0,
    FAILED___0 = 1,
    DONE___0 = 2
} ;
#line 3308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 reserved_u32[4U] ;
};
#line 3719 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 173 "include/linux/types.h"
typedef __u32 __le32;
#line 175 "include/linux/types.h"
typedef __u64 __le64;
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 36 "include/linux/kmod.h"
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 42 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   enum umh_wait wait ;
   int retval ;
   int (*init)(struct subprocess_info * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 692 "include/linux/module.h"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 63 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 144 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 158 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
   kernel_cap_t eff_cap ;
   __u32 loginuid ;
   __u32 sessionid ;
   __u32 sid ;
};
#line 88 "include/linux/drbd.h"
enum drbd_ret_codes {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    AFTER_LAST_ERR_CODE = 154
} ;
#line 300 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 336 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 874 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 103 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 125 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 134 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 34 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 101 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2032 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )(*((unsigned long *)addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n .balign 8 \n .quad 661b\n .quad 663f\n\t .word (4*32+23)\n\t .byte 662b-661b\n\t .byte 664f-663f\n.previous\n.section .discard,\"aw\",@progbits\n\t .byte 0xff + (664f-663f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n663:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n664:\n.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 47 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 49
  tmp = __arch_hweight64((__u64 )w);
#line 49
  return (tmp);
}
}
#line 182
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 192
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 69 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 139 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 266
extern int printk(char const   *  , ...) ;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1940;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1940;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1940;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1940;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1940: ;
#line 14
  return (pfo_ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4361: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4361;
  } else {

  }

#line 19
  return (order);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 550 "include/linux/lockdep.h"
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 159
extern int mutex_trylock(struct mutex * ) ;
#line 162
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) ;
#line 166
int ldv_mutex_trylock_7(struct mutex *ldv_func_arg1 ) ;
#line 168
extern void mutex_unlock(struct mutex * ) ;
#line 171
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) ;
#line 27
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 28
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 31
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 43
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 47
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 51
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 52
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 55
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 59
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 63
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5888;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5888;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5888;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5888;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5888: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 92 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 271 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 273
  return (& lock->ldv_5628.rlock);
}
}
#line 307 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 309
  _raw_spin_lock_irq(& lock->ldv_5628.rlock);
#line 310
  return;
}
}
#line 332 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 334
  _raw_spin_unlock_irq(& lock->ldv_5628.rlock);
#line 335
  return;
}
}
#line 337 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 339
  _raw_spin_unlock_irqrestore(& lock->ldv_5628.rlock, flags);
#line 340
  return;
}
}
#line 55 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 64
extern void vfree(void const   * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 156
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 300 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 303 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 305
  tmp = alloc_pages_current(gfp_mask, order);
#line 305
  return (tmp);
}
}
#line 316
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 328
extern void __free_pages(struct page * , unsigned int  ) ;
#line 120 "include/linux/rcupdate.h"
extern int debug_lockdep_rcu_enabled(void) ;
#line 171 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 


  {
#line 173
  return (1);
}
}
#line 398 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 402
  return;
}
}
#line 39 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 144 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 62 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 64
  return;
}
}
#line 51 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13898: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_13898;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 154 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[28U] ;
#line 160 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 162
  if (size == 0UL) {
#line 163
    return (0);
  } else {

  }
#line 165
  if (size <= 8UL) {
#line 166
    return (3);
  } else {

  }
#line 168
  if (size > 64UL && size <= 96UL) {
#line 169
    return (1);
  } else {

  }
#line 170
  if (size > 128UL && size <= 192UL) {
#line 171
    return (2);
  } else {

  }
#line 172
  if (size <= 8UL) {
#line 172
    return (3);
  } else {

  }
#line 173
  if (size <= 16UL) {
#line 173
    return (4);
  } else {

  }
#line 174
  if (size <= 32UL) {
#line 174
    return (5);
  } else {

  }
#line 175
  if (size <= 64UL) {
#line 175
    return (6);
  } else {

  }
#line 176
  if (size <= 128UL) {
#line 176
    return (7);
  } else {

  }
#line 177
  if (size <= 256UL) {
#line 177
    return (8);
  } else {

  }
#line 178
  if (size <= 512UL) {
#line 178
    return (9);
  } else {

  }
#line 179
  if (size <= 1024UL) {
#line 179
    return (10);
  } else {

  }
#line 180
  if (size <= 2048UL) {
#line 180
    return (11);
  } else {

  }
#line 181
  if (size <= 4096UL) {
#line 181
    return (12);
  } else {

  }
#line 186
  if (size <= 8192UL) {
#line 186
    return (13);
  } else {

  }
#line 187
  if (size <= 16384UL) {
#line 187
    return (14);
  } else {

  }
#line 188
  if (size <= 32768UL) {
#line 188
    return (15);
  } else {

  }
#line 189
  if (size <= 65536UL) {
#line 189
    return (16);
  } else {

  }
#line 190
  if (size <= 131072UL) {
#line 190
    return (17);
  } else {

  }
#line 191
  if (size <= 262144UL) {
#line 191
    return (18);
  } else {

  }
#line 192
  if (size <= 524288UL) {
#line 192
    return (19);
  } else {

  }
#line 193
  if (size <= 1048576UL) {
#line 193
    return (20);
  } else {

  }
#line 194
  if (size <= 2097152UL) {
#line 194
    return (21);
  } else {

  }
#line 195
  return (-1);
}
}
#line 212 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 214
  tmp = kmalloc_index(size);
#line 214
  index = tmp;
#line 216
  if (index == 0) {
#line 217
    return (0);
  } else {

  }
#line 219
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 223
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 226
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 651 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 655
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 657
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 661
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 601 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 603
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 56L) << 12) + 0xffff880000000000UL));
}
}
#line 2196 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 355 "include/linux/sched.h"
extern void schedule(void) ;
#line 2348
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 69 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 71
  pagefault_disable();
#line 72
  tmp = lowmem_page_address(page);
#line 72
  return (tmp);
}
}
#line 76 "include/linux/highmem.h"
__inline static void kunmap_atomic_notypecheck(void *addr , enum km_type idx ) 
{ 


  {
#line 78
  pagefault_enable();
#line 79
  return;
}
}
#line 218 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 221
extern void bio_put(struct bio * ) ;
#line 224
extern void bio_endio(struct bio * , int  ) ;
#line 233
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 755 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 757
  return ((bdev->bd_disk)->queue);
}
}
#line 930
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * , unsigned long  ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 142
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 145
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 145
    tmp = _drbd_insert_fault(mdev, type);
#line 145
    if (tmp != 0U) {
#line 145
      tmp___0 = 1;
    } else {
#line 145
      tmp___0 = 0;
    }
  } else {
#line 145
    tmp___0 = 0;
  }
#line 145
  return (tmp___0);
}
}
#line 165
struct ratelimit_state drbd_ratelimit_state ;
#line 1124
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) ;
#line 1346
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1347
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1348
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1349
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1350
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1351
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1353
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1356
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1358
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1359
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1360
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1361
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1362
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1363
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1365
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1366
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1367
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1368
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1370
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1371
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1372
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1375
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1378
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1381
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) ;
#line 1382
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1384
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1399
rwlock_t global_state_lock ;
#line 1416
char *ppsize(char *buf , unsigned long long size ) ;
#line 1435
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1678 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  int rv ;

  {
#line 1684
  _raw_read_lock(& global_state_lock);
#line 1685
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1686
  _raw_read_unlock(& global_state_lock);
#line 1688
  return (rv);
}
}
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1711
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1713
  if (forcedetach == 0) {
#line 1714
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1714
    if (tmp != 0) {
#line 1715
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1717
    goto ldv_43473;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1722
  if ((int )mdev->state.ldv_35202.disk > 2) {
#line 1723
    __ns.i = mdev->state.i;
#line 1723
    __ns.ldv_35202.disk = 2U;
#line 1723
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1727
  goto ldv_43473;
  }
  ldv_43473: ;
#line 1730
  return;
}
}
#line 1740 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1743
  if (error != 0) {
#line 1745
    tmp = spinlock_check(& mdev->req_lock);
#line 1745
    flags = _raw_spin_lock_irqsave(tmp);
#line 1746
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1747
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1749
  return;
}
}
#line 1775 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1777
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1780
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1783
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2045 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 2048
  tmp = atomic_dec_and_test(& mdev->local_cnt);
#line 2048
  if (tmp != 0) {
#line 2049
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2050
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 2050
  if (tmp___0 < 0) {
#line 2050
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2050);
  } else {

  }
#line 2051
  return;
}
}
#line 2054 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2058
  atomic_inc(& mdev->local_cnt);
#line 2059
  io_allowed = (unsigned int )mdev->state.ldv_35202.disk >= (unsigned int )mins;
#line 2060
  if (io_allowed == 0) {
#line 2061
    put_ldev(mdev);
  } else {

  }
#line 2062
  return (io_allowed);
}
}
#line 2303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_blk_run_queue(struct request_queue *q ) 
{ 


  {
#line 2305
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned long )q->unplug_fn != (unsigned long )((unplug_fn *)0)) {
#line 2306
    (*(q->unplug_fn))(q);
  } else {

  }
#line 2307
  return;
}
}
#line 2317 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2321
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2321
  if (tmp != 0) {
#line 2322
    return;
  } else {

  }
#line 2324
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0, 1UL);
#line 2326
  if (r != 0) {
#line 2327
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 2328
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2330
  return;
}
}
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) ;
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_is_locked(struct drbd_bitmap *b ) 
{ 
  int tmp ;

  {
#line 147
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& b->bm_flags));
#line 147
  return (tmp);
}
}
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 153
  b = mdev->bitmap;
#line 154
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 154
  if (tmp == 0) {
#line 155
    return;
  } else {

  }
#line 156
  tmp___9 = get_current();
#line 156
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 156
    tmp___7 = get_current();
#line 156
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 156
      tmp___5 = get_current();
#line 156
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 156
        tmp___3 = get_current();
#line 156
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 156
        tmp___4 = (char *)"worker";
      }
#line 156
      tmp___6 = tmp___4;
    } else {
#line 156
      tmp___6 = (char *)"asender";
    }
#line 156
    tmp___8 = tmp___6;
  } else {
#line 156
    tmp___8 = (char *)"receiver";
  }
#line 156
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 162
  return;
}
}
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  int tmp___10 ;

  {
#line 168
  b = mdev->bitmap;
#line 171
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 172
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 173
    return;
  } else {

  }
#line 176
  tmp = ldv_mutex_trylock_7(& b->bm_change);
#line 176
  trylock_failed = tmp == 0;
#line 178
  if (trylock_failed != 0) {
#line 179
    tmp___9 = get_current();
#line 179
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 179
      tmp___7 = get_current();
#line 179
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 179
        tmp___5 = get_current();
#line 179
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 179
          tmp___3 = get_current();
#line 179
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 179
          tmp___4 = (char *)"worker";
        }
#line 179
        tmp___6 = tmp___4;
      } else {
#line 179
        tmp___6 = (char *)"asender";
      }
#line 179
      tmp___8 = tmp___6;
    } else {
#line 179
      tmp___8 = (char *)"receiver";
    }
#line 179
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 187
    ldv_mutex_lock_8(& b->bm_change);
  } else {

  }
#line 189
  tmp___10 = __test_and_set_bit(0, (unsigned long volatile   *)(& b->bm_flags));
#line 189
  if (tmp___10 != 0) {
#line 190
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 192
  b->bm_why = why;
#line 193
  b->bm_task = get_current();
#line 194
  return;
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;

  {
#line 198
  b = mdev->bitmap;
#line 199
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 200
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 201
    return;
  } else {

  }
#line 204
  tmp = __test_and_clear_bit(0, (unsigned long volatile   *)(& (mdev->bitmap)->bm_flags));
#line 204
  if (tmp == 0) {
#line 205
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 207
  b->bm_why = 0;
#line 208
  b->bm_task = 0;
#line 209
  ldv_mutex_unlock_9(& b->bm_change);
#line 210
  return;
}
}
#line 213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ,
                                     enum km_type  const  km ) 
{ 
  struct page *page ;
  unsigned long page_nr ;
  long tmp ;
  void *tmp___0 ;

  {
#line 219
  page_nr = offset >> 9;
#line 220
  tmp = __builtin_expect(b->bm_number_of_pages <= page_nr, 0L);
#line 220
  if (tmp != 0L) {
#line 220
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (220), "i" (12UL));
    ldv_43750: ;
#line 220
    goto ldv_43750;
  } else {

  }
#line 221
  page = *(b->bm_pages + page_nr);
#line 223
  tmp___0 = kmap_atomic(page, km);
#line 223
  return ((unsigned long *)tmp___0);
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ) 
{ 
  unsigned long *tmp ;

  {
#line 228
  tmp = __bm_map_paddr(b, offset, KM_IRQ1);
#line 228
  return (tmp);
}
}
#line 231 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 233
  kunmap_atomic_notypecheck((void *)p_addr, km);
#line 234
  return;
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 238
  return;
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 263
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 264
    return;
  } else {

  }
#line 266
  i = 0UL;
#line 266
  goto ldv_43769;
  ldv_43768: ;
#line 267
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 268
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 271
    goto ldv_43767;
  } else {

  }
#line 273
  __free_pages(*(pages + i), 0U);
#line 274
  *(pages + i) = 0;
  ldv_43767: 
#line 266
  i = i + 1UL;
  ldv_43769: ;
#line 266
  if (i < number) {
#line 267
    goto ldv_43768;
  } else {

  }

#line 271
  return;
}
}
#line 278 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 280
  if (v != 0) {
#line 281
    vfree((void const   *)ptr);
  } else {
#line 283
    kfree((void const   *)ptr);
  }
#line 284
  return;
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 291
  old_pages = b->bm_pages;
#line 293
  vmalloced = 0U;
#line 294
  have = b->bm_number_of_pages;
#line 296
  tmp = __builtin_expect(have == 0UL, 0L);
#line 296
  if (tmp != 0L) {
#line 296
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 296
    if (tmp___0 != 0L) {
#line 296
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (296), "i" (12UL));
      ldv_43786: ;
#line 296
      goto ldv_43786;
    } else {

    }
  } else {

  }
#line 297
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 297
  if (tmp___1 != 0L) {
#line 297
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 297
    if (tmp___2 != 0L) {
#line 297
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (297), "i" (12UL));
      ldv_43787: ;
#line 297
      goto ldv_43787;
    } else {

    }
  } else {

  }
#line 299
  if (have == want) {
#line 300
    return (old_pages);
  } else {

  }
#line 307
  bytes = (unsigned int )want * 8U;
#line 308
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 308
  new_pages = (struct page **)tmp___3;
#line 309
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 310
    tmp___4 = vmalloc((unsigned long )bytes);
#line 310
    new_pages = (struct page **)tmp___4;
#line 311
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 312
      return (0);
    } else {

    }
#line 313
    vmalloced = 1U;
  } else {

  }
#line 316
  memset((void *)new_pages, 0, (size_t )bytes);
#line 317
  if (want >= have) {
#line 318
    i = 0U;
#line 318
    goto ldv_43789;
    ldv_43788: 
#line 319
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 318
    i = i + 1U;
    ldv_43789: ;
#line 318
    if ((unsigned long )i < have) {
#line 319
      goto ldv_43788;
    } else {

    }

#line 320
    goto ldv_43792;
    ldv_43791: 
#line 321
    page = alloc_pages(131282U, 0U);
#line 322
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 323
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 324
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 325
      return (0);
    } else {

    }
#line 327
    *(new_pages + (unsigned long )i) = page;
#line 320
    i = i + 1U;
    ldv_43792: ;
#line 320
    if ((unsigned long )i < want) {
#line 321
      goto ldv_43791;
    } else {

    }

  } else {
#line 330
    i = 0U;
#line 330
    goto ldv_43795;
    ldv_43794: 
#line 331
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 330
    i = i + 1U;
    ldv_43795: ;
#line 330
    if ((unsigned long )i < want) {
#line 331
      goto ldv_43794;
    } else {

    }

  }
#line 337
  if (vmalloced != 0U) {
#line 338
    set_bit(2U, (unsigned long volatile   *)(& b->bm_flags));
  } else {
#line 340
    clear_bit(2, (unsigned long volatile   *)(& b->bm_flags));
  }
#line 342
  return (new_pages);
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 351
  b = mdev->bitmap;
#line 352
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 352
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 352
  if (tmp != 0L) {
#line 352
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       352);
  } else {

  }
#line 352
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 353
  tmp___0 = kzalloc(376UL, 208U);
#line 353
  b = (struct drbd_bitmap *)tmp___0;
#line 354
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 355
    return (-12);
  } else {

  }
#line 356
  spinlock_check(& b->bm_lock);
#line 356
  __raw_spin_lock_init(& b->bm_lock.ldv_5628.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 357
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 358
  __init_waitqueue_head(& b->bm_io_wait, & __key___1);
#line 360
  mdev->bitmap = b;
#line 362
  return (0);
}
}
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 367
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 367
  if (_b != 0) {
#line 367
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            367);
  } else {

  }
#line 367
  if (_b != 0) {
#line 367
    return (0UL);
  } else {

  }
#line 368
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 373 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;
  int tmp ;

  {
#line 375
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 375
  if (_b != 0) {
#line 375
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            375);
  } else {

  }
#line 375
  if (_b != 0) {
#line 375
    return;
  } else {

  }
#line 376
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 377
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& (mdev->bitmap)->bm_flags));
#line 377
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, tmp);
#line 378
  kfree((void const   *)mdev->bitmap);
#line 379
  mdev->bitmap = 0;
#line 380
  return;
}
}
#line 387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  int cleared ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 389
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 390
  w = b->bm_bits >> 6;
#line 391
  cleared = 0;
#line 394
  p_addr = bm_map_paddr(b, w);
#line 395
  bm = p_addr + (w & 511UL);
#line 396
  if (b->bm_words > w) {
#line 397
    tmp = hweight_long(*bm & ~ mask);
#line 397
    cleared = (int )tmp;
#line 398
    *bm = *bm & mask;
#line 399
    w = w + (size_t )1;
#line 399
    bm = bm + 1;
  } else {

  }
#line 402
  if (b->bm_words > w) {
#line 403
    tmp___0 = hweight_long(*bm);
#line 403
    cleared = (int )((unsigned int )tmp___0 + (unsigned int )cleared);
#line 404
    *bm = 0UL;
  } else {

  }
#line 406
  bm_unmap(p_addr);
#line 407
  return (cleared);
}
}
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  unsigned long *p_addr ;
  unsigned long *bm ;

  {
#line 412
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 413
  w = b->bm_bits >> 6;
#line 416
  p_addr = bm_map_paddr(b, w);
#line 417
  bm = p_addr + (w & 511UL);
#line 418
  if (b->bm_words > w) {
#line 419
    *bm = *bm | ~ mask;
#line 420
    bm = bm + 1;
#line 420
    w = w + (size_t )1;
  } else {

  }
#line 423
  if (b->bm_words > w) {
#line 424
    *bm = 0xffffffffffffffffUL;
  } else {

  }
#line 426
  bm_unmap(p_addr);
#line 427
  return;
}
}
#line 429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_count_bits(struct drbd_bitmap *b , int const   swap_endian ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long offset ;
  unsigned long bits ;
  unsigned long i ;
  unsigned long do_now ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 431
  offset = 0UL;
#line 432
  bits = 0UL;
#line 435
  goto ldv_43851;
  ldv_43850: 
#line 436
  __min1 = b->bm_words - offset;
#line 436
  __min2 = 512UL;
#line 436
  do_now = __min1 < __min2 ? __min1 : __min2;
#line 436
  i = do_now;
#line 437
  p_addr = __bm_map_paddr(b, offset, KM_USER0);
#line 438
  bm = p_addr + (offset & 511UL);
#line 439
  goto ldv_43847;
  ldv_43846: 
#line 444
  tmp = bm;
#line 444
  bm = bm + 1;
#line 444
  tmp___0 = hweight_long(*tmp);
#line 444
  bits = tmp___0 + bits;
  ldv_43847: 
#line 439
  tmp___1 = i;
#line 439
  i = i - 1UL;
#line 439
  if (tmp___1 != 0UL) {
#line 440
    goto ldv_43846;
  } else {

  }
#line 446
  __bm_unmap(p_addr, KM_USER0);
#line 447
  offset = offset + do_now;
#line 448
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                448, 0);
#line 448
  _cond_resched();
  ldv_43851: ;
#line 435
  if (b->bm_words > offset) {
#line 436
    goto ldv_43850;
  } else {

  }

#line 451
  return (bits);
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 456
  tmp = __bm_count_bits(b, 0);
#line 456
  return (tmp);
}
}
#line 459 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits_swap_endian(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 461
  tmp = __bm_count_bits(b, 1);
#line 461
  return (tmp);
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 472
  end = offset + len;
#line 474
  if (b->bm_words < end) {
#line 475
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 476
    return;
  } else {

  }
#line 479
  goto ldv_43874;
  ldv_43873: 
#line 480
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 480
  __min2 = end;
#line 480
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 481
  p_addr = bm_map_paddr(b, offset);
#line 482
  bm = p_addr + (offset & 511UL);
#line 483
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 484
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
#line 486
    goto ldv_43872;
  } else {

  }
#line 488
  memset((void *)bm, c, do_now * 8UL);
#line 489
  bm_unmap(p_addr);
#line 490
  offset = offset + do_now;
  ldv_43874: ;
#line 479
  if (offset < end) {
#line 480
    goto ldv_43873;
  } else {

  }
  ldv_43872: ;
#line 484
  return;
}
}
#line 502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 504
  b = mdev->bitmap;
#line 507
  opages = 0;
#line 508
  err = 0;
#line 511
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 511
  if (_b != 0) {
#line 511
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            511);
  } else {

  }
#line 511
  if (_b != 0) {
#line 511
    return (-12);
  } else {

  }
#line 513
  drbd_bm_lock(mdev, (char *)"resize");
#line 515
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 518
  if (b->bm_dev_capacity == capacity) {
#line 519
    goto out;
  } else {

  }
#line 521
  opages_vmalloced = constant_test_bit(2U, (unsigned long const volatile   *)(& b->bm_flags));
#line 523
  if (capacity == 0UL) {
#line 524
    spin_lock_irq(& b->bm_lock);
#line 525
    opages = b->bm_pages;
#line 526
    onpages = b->bm_number_of_pages;
#line 527
    owords = b->bm_words;
#line 528
    b->bm_pages = 0;
#line 529
    tmp___2 = 0UL;
#line 529
    b->bm_dev_capacity = tmp___2;
#line 529
    tmp___1 = tmp___2;
#line 529
    b->bm_words = tmp___1;
#line 529
    tmp___0 = tmp___1;
#line 529
    b->bm_bits = tmp___0;
#line 529
    tmp = tmp___0;
#line 529
    b->bm_set = tmp;
#line 529
    b->bm_number_of_pages = tmp;
#line 534
    spin_unlock_irq(& b->bm_lock);
#line 535
    bm_free_pages(opages, onpages);
#line 536
    bm_vk_free((void *)opages, opages_vmalloced);
#line 537
    goto out;
  } else {

  }
#line 539
  bits = (capacity + 7UL) >> 3;
#line 546
  words = (bits + 63UL) >> 6;
#line 548
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 548
  if (tmp___3 != 0) {
#line 549
    if (((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12 < (unsigned long long )bits) {
#line 549
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (u64)bits <= (((u64)mdev->ldev->md.md_size_sect-MD_BM_OFFSET) << 12) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
              549);
    } else {

    }
#line 550
    put_ldev(mdev);
  } else {

  }
#line 554
  want = ((words + 1UL) * 8UL + 4095UL) >> 12;
#line 555
  have = b->bm_number_of_pages;
#line 556
  if (want == have) {
#line 557
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 557
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
              557);
    } else {

    }
#line 558
    npages = b->bm_pages;
  } else {
#line 560
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 560
    if (tmp___4 != 0) {
#line 561
      npages = 0;
    } else {
#line 563
      npages = bm_realloc_pages(b, want);
    }
  }
#line 566
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 567
    err = -12;
#line 568
    goto out;
  } else {

  }
#line 571
  spin_lock_irq(& b->bm_lock);
#line 572
  opages = b->bm_pages;
#line 573
  owords = b->bm_words;
#line 574
  obits = b->bm_bits;
#line 576
  growing = bits > obits;
#line 577
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 578
    bm_set_surplus(b);
  } else {

  }
#line 580
  b->bm_pages = npages;
#line 581
  b->bm_number_of_pages = want;
#line 582
  b->bm_bits = bits;
#line 583
  b->bm_words = words;
#line 584
  b->bm_dev_capacity = capacity;
#line 586
  if (growing != 0) {
#line 587
    if (set_new_bits != 0) {
#line 588
      bm_memset(b, owords, 255, words - owords);
#line 589
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 591
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 595
  if (want < have) {
#line 597
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 600
  p_addr = bm_map_paddr(b, words);
#line 601
  bm = p_addr + (words & 511UL);
#line 602
  *bm = 2205418087UL;
#line 603
  bm_unmap(p_addr);
#line 605
  bm_clear_surplus(b);
#line 607
  spin_unlock_irq(& b->bm_lock);
#line 608
  if ((unsigned long )opages != (unsigned long )npages) {
#line 609
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 610
  if (growing == 0) {
#line 611
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 612
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu\n",
            bits, words);
  out: 
#line 615
  drbd_bm_unlock(mdev);
#line 616
  return (err);
}
}
#line 627 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 629
  b = mdev->bitmap;
#line 633
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 633
  if (_b != 0) {
#line 633
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            633);
  } else {

  }
#line 633
  if (_b != 0) {
#line 633
    return (0UL);
  } else {

  }
#line 634
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 634
  if (_b___0 != 0) {
#line 634
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            634);
  } else {

  }
#line 634
  if (_b___0 != 0) {
#line 634
    return (0UL);
  } else {

  }
#line 636
  tmp = spinlock_check(& b->bm_lock);
#line 636
  flags = _raw_spin_lock_irqsave(tmp);
#line 637
  s = b->bm_set;
#line 638
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 640
  return (s);
}
}
#line 643 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 647
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 647
  if (tmp == 0) {
#line 648
    return (0UL);
  } else {

  }
#line 649
  s = _drbd_bm_total_weight(mdev);
#line 650
  put_ldev(mdev);
#line 651
  return (s);
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 656
  b = mdev->bitmap;
#line 657
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 657
  if (_b != 0) {
#line 657
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            657);
  } else {

  }
#line 657
  if (_b != 0) {
#line 657
    return (0UL);
  } else {

  }
#line 658
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 658
  if (_b___0 != 0) {
#line 658
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            658);
  } else {

  }
#line 658
  if (_b___0 != 0) {
#line 658
    return (0UL);
  } else {

  }
#line 660
  return (b->bm_words);
}
}
#line 663 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 665
  b = mdev->bitmap;
#line 666
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 666
  if (_b != 0) {
#line 666
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            666);
  } else {

  }
#line 666
  if (_b != 0) {
#line 666
    return (0UL);
  } else {

  }
#line 668
  return (b->bm_bits);
}
}
#line 676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 679
  b = mdev->bitmap;
#line 684
  end = offset + number;
#line 686
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 686
  if (_b != 0) {
#line 686
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            686);
  } else {

  }
#line 686
  if (_b != 0) {
#line 686
    return;
  } else {

  }
#line 687
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 687
  if (_b___0 != 0) {
#line 687
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            687);
  } else {

  }
#line 687
  if (_b___0 != 0) {
#line 687
    return;
  } else {

  }
#line 688
  if (number == 0UL) {
#line 689
    return;
  } else {

  }
#line 690
  __ret_warn_on = b->bm_words <= offset;
#line 690
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 690
  if (tmp != 0L) {
#line 690
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       690);
  } else {

  }
#line 690
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 691
  __ret_warn_on___0 = b->bm_words < end;
#line 691
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 691
  if (tmp___0 != 0L) {
#line 691
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       691);
  } else {

  }
#line 691
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 693
  spin_lock_irq(& b->bm_lock);
#line 694
  goto ldv_43962;
  ldv_43961: 
#line 695
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 695
  __min2 = end;
#line 695
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 696
  p_addr = bm_map_paddr(b, offset);
#line 697
  bm = p_addr + (offset & 511UL);
#line 698
  offset = offset + do_now;
#line 699
  goto ldv_43959;
  ldv_43958: 
#line 700
  bits = hweight_long(*bm);
#line 701
  tmp___1 = buffer;
#line 701
  buffer = buffer + 1;
#line 701
  word = (unsigned long )((unsigned long long )*bm | (unsigned long long )*tmp___1);
#line 702
  tmp___2 = bm;
#line 702
  bm = bm + 1;
#line 702
  *tmp___2 = word;
#line 703
  tmp___3 = hweight_long(word);
#line 703
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_43959: 
#line 699
  tmp___4 = do_now;
#line 699
  do_now = do_now - (size_t )1;
#line 699
  if (tmp___4 != 0UL) {
#line 700
    goto ldv_43958;
  } else {

  }
#line 705
  bm_unmap(p_addr);
  ldv_43962: ;
#line 694
  if (offset < end) {
#line 695
    goto ldv_43961;
  } else {

  }

#line 712
  if (b->bm_words == end) {
#line 713
    tmp___5 = bm_clear_surplus(b);
#line 713
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 715
  spin_unlock_irq(& b->bm_lock);
#line 716
  return;
}
}
#line 721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long *tmp___0 ;
  size_t tmp___1 ;

  {
#line 724
  b = mdev->bitmap;
#line 728
  end = offset + number;
#line 730
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 730
  if (_b != 0) {
#line 730
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            730);
  } else {

  }
#line 730
  if (_b != 0) {
#line 730
    return;
  } else {

  }
#line 731
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 731
  if (_b___0 != 0) {
#line 731
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            731);
  } else {

  }
#line 731
  if (_b___0 != 0) {
#line 731
    return;
  } else {

  }
#line 733
  spin_lock_irq(& b->bm_lock);
#line 734
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 737
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 742
    goto ldv_43987;
    ldv_43986: 
#line 743
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 743
    __min2 = end;
#line 743
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 744
    p_addr = bm_map_paddr(b, offset);
#line 745
    bm = p_addr + (offset & 511UL);
#line 746
    offset = offset + do_now;
#line 747
    goto ldv_43984;
    ldv_43983: 
#line 748
    tmp = buffer;
#line 748
    buffer = buffer + 1;
#line 748
    tmp___0 = bm;
#line 748
    bm = bm + 1;
#line 748
    *tmp = *tmp___0;
    ldv_43984: 
#line 747
    tmp___1 = do_now;
#line 747
    do_now = do_now - (size_t )1;
#line 747
    if (tmp___1 != 0UL) {
#line 748
      goto ldv_43983;
    } else {

    }
#line 749
    bm_unmap(p_addr);
    ldv_43987: ;
#line 742
    if (offset < end) {
#line 743
      goto ldv_43986;
    } else {

    }

  }
#line 752
  spin_unlock_irq(& b->bm_lock);
#line 753
  return;
}
}
#line 756 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 758
  b = mdev->bitmap;
#line 759
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 759
  if (_b != 0) {
#line 759
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            759);
  } else {

  }
#line 759
  if (_b != 0) {
#line 759
    return;
  } else {

  }
#line 760
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 760
  if (_b___0 != 0) {
#line 760
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            760);
  } else {

  }
#line 760
  if (_b___0 != 0) {
#line 760
    return;
  } else {

  }
#line 762
  spin_lock_irq(& b->bm_lock);
#line 763
  bm_memset(b, 0UL, 255, b->bm_words);
#line 764
  bm_clear_surplus(b);
#line 765
  b->bm_set = b->bm_bits;
#line 766
  spin_unlock_irq(& b->bm_lock);
#line 767
  return;
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 772
  b = mdev->bitmap;
#line 773
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 773
  if (_b != 0) {
#line 773
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            773);
  } else {

  }
#line 773
  if (_b != 0) {
#line 773
    return;
  } else {

  }
#line 774
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 774
  if (_b___0 != 0) {
#line 774
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            774);
  } else {

  }
#line 774
  if (_b___0 != 0) {
#line 774
    return;
  } else {

  }
#line 776
  spin_lock_irq(& b->bm_lock);
#line 777
  bm_memset(b, 0UL, 0, b->bm_words);
#line 778
  b->bm_set = 0UL;
#line 779
  spin_unlock_irq(& b->bm_lock);
#line 780
  return;
}
}
#line 782 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_bitmap *b ;
  int uptodate ;
  int tmp ;

  {
#line 784
  b = (struct drbd_bitmap *)bio->bi_private;
#line 785
  uptodate = (int )bio->bi_flags & 1;
#line 792
  if (error == 0 && uptodate == 0) {
#line 793
    error = -5;
  } else {

  }
#line 795
  if (error != 0) {
#line 798
    __set_bit(1, (unsigned long volatile   *)(& b->bm_flags));
  } else {

  }
#line 800
  tmp = atomic_dec_and_test(& b->bm_async_io);
#line 800
  if (tmp != 0) {
#line 801
    __wake_up(& b->bm_io_wait, 3U, 1, 0);
  } else {

  }
#line 803
  bio_put(bio);
#line 804
  return;
}
}
#line 806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct drbd_conf *mdev , struct drbd_bitmap *b , int page_nr ,
                             int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  int tmp___1 ;

  {
#line 809
  tmp = bio_alloc(208U, 1);
#line 809
  bio = tmp;
#line 811
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 813
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 817
  __min1 = 4096U;
#line 817
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 817
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 817
  len = __min1 < __min2 ? __min1 : __min2;
#line 820
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 821
  bio->bi_sector = on_disk_sector;
#line 822
  bio_add_page(bio, *(b->bm_pages + (unsigned long )page_nr), len, 0U);
#line 823
  bio->bi_private = (void *)b;
#line 824
  bio->bi_end_io = & bm_async_io_complete;
#line 826
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 826
  if (tmp___1 != 0) {
#line 827
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 828
    bio_endio(bio, -5);
  } else {
#line 830
    submit_bio(rw, bio);
  }
#line 831
  return;
}
}
#line 870 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw ) 
{ 
  struct drbd_bitmap *b ;
  int bm_words ;
  int num_pages ;
  int i ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;
  size_t tmp___1 ;
  struct request_queue *tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char *tmp___7 ;

  {
#line 872
  b = mdev->bitmap;
#line 877
  err = 0;
#line 879
  tmp = bm_is_locked(b);
#line 879
  __ret_warn_on = tmp == 0;
#line 879
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 879
  if (tmp___0 != 0L) {
#line 879
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       879);
  } else {

  }
#line 879
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 883
  tmp___1 = drbd_bm_words(mdev);
#line 883
  bm_words = (int )tmp___1;
#line 884
  num_pages = (int )((((unsigned long )bm_words + 512UL) * 8UL - 1UL) >> 12);
#line 890
  now = jiffies;
#line 891
  atomic_set(& b->bm_async_io, num_pages);
#line 892
  __clear_bit(1, (unsigned long volatile   *)(& b->bm_flags));
#line 895
  i = 0;
#line 895
  goto ldv_44039;
  ldv_44038: 
#line 896
  bm_page_io_async(mdev, b, i, rw);
#line 895
  i = i + 1;
  ldv_44039: ;
#line 895
  if (i < num_pages) {
#line 896
    goto ldv_44038;
  } else {

  }
#line 898
  tmp___2 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 898
  drbd_blk_run_queue(tmp___2);
#line 899
  tmp___3 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 899
  if (tmp___3 == 0) {
#line 899
    goto ldv_44041;
  } else {

  }
#line 899
  tmp___4 = get_current();
#line 899
  __wait.flags = 0U;
#line 899
  __wait.private = (void *)tmp___4;
#line 899
  __wait.func = & autoremove_wake_function;
#line 899
  __wait.task_list.next = & __wait.task_list;
#line 899
  __wait.task_list.prev = & __wait.task_list;
  ldv_44044: 
#line 899
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 899
  tmp___5 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 899
  if (tmp___5 == 0) {
#line 899
    goto ldv_44043;
  } else {

  }
#line 899
  schedule();
#line 899
  goto ldv_44044;
  ldv_44043: 
#line 899
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_44041: 
#line 901
  tmp___6 = constant_test_bit(1U, (unsigned long const volatile   *)(& b->bm_flags));
#line 901
  if (tmp___6 != 0) {
#line 902
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 903
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 904
    err = -5;
  } else {

  }
#line 907
  now = jiffies;
#line 908
  if (rw == 1) {
#line 912
    drbd_md_flush(mdev);
  } else {
#line 915
    b->bm_set = bm_count_bits_swap_endian(b);
#line 916
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 919
  now = b->bm_set;
#line 921
  tmp___7 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 921
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___7, now);
#line 924
  return (err);
}
}
#line 931 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 933
  tmp = bm_rw(mdev, 0);
#line 933
  return (tmp);
}
}
#line 940 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 942
  tmp = bm_rw(mdev, 1);
#line 942
  return (tmp);
}
}
#line 954 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  sector_t on_disk_sector ;
  int bm_words ;
  int num_words ;
  int offset ;
  int err ;
  size_t tmp ;
  int _min1 ;
  int _min2 ;
  void *tmp___0 ;
  void *tmp___1 ;
  int i ;
  int tmp___2 ;

  {
#line 956
  on_disk_sector = (sector_t )(((mdev->ldev)->md.md_offset + (unsigned long long )enr) + (unsigned long long )(mdev->ldev)->md.bm_offset);
#line 959
  err = 0;
#line 961
  ldv_mutex_lock_10(& mdev->md_io_mutex);
#line 962
  tmp = drbd_bm_words(mdev);
#line 962
  bm_words = (int )tmp;
#line 963
  offset = (int )(enr << 6);
#line 964
  _min1 = 64;
#line 964
  _min2 = bm_words - offset;
#line 964
  num_words = _min1 < _min2 ? _min1 : _min2;
#line 965
  if (num_words <= 63) {
#line 966
    tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 966
    memset(tmp___0, 0, 512UL);
  } else {

  }
#line 967
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 967
  drbd_bm_get_lel(mdev, (size_t )offset, (size_t )num_words, (unsigned long *)tmp___1);
#line 969
  tmp___2 = drbd_md_sync_page_io(mdev, mdev->ldev, on_disk_sector, 1);
#line 969
  if (tmp___2 == 0) {
#line 971
    err = -5;
#line 972
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR writing bitmap sector %lu (meta-disk sector %llus)\n",
            enr, (unsigned long long )on_disk_sector);
#line 975
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_sect");
#line 976
    i = 0;
#line 976
    goto ldv_44067;
    ldv_44066: 
#line 977
    drbd_bm_ALe_set_all(mdev, enr * 4UL + (unsigned long )i);
#line 976
    i = i + 1;
    ldv_44067: ;
#line 976
    if (i <= 3) {
#line 977
      goto ldv_44066;
    } else {

    }

  } else {

  }
#line 979
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 980
  ldv_mutex_unlock_11(& mdev->md_io_mutex);
#line 981
  return (err);
}
}
#line 991 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned long offset ;

  {
#line 994
  b = mdev->bitmap;
#line 995
  i = 0xffffffffffffffffUL;
#line 999
  if (b->bm_bits < bm_fo) {
#line 1000
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
  } else {
#line 1002
    goto ldv_44083;
    ldv_44082: 
#line 1004
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 1005
    offset = bit_offset >> 6;
#line 1006
    p_addr = __bm_map_paddr(b, offset, km);
#line 1008
    if ((int )find_zero_bit != 0) {
#line 1009
      i = find_next_zero_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    } else {
#line 1011
      i = find_next_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    }
#line 1013
    __bm_unmap(p_addr, km);
#line 1014
    if (i <= 32767UL) {
#line 1015
      i = bit_offset + i;
#line 1016
      if (b->bm_bits <= i) {
#line 1017
        goto ldv_44080;
      } else {

      }
#line 1018
      goto found;
    } else {

    }
#line 1020
    bm_fo = bit_offset + 32768UL;
    ldv_44083: ;
#line 1002
    if (b->bm_bits > bm_fo) {
#line 1003
      goto ldv_44082;
    } else {

    }
    ldv_44080: 
#line 1022
    i = 0xffffffffffffffffUL;
  }
  found: ;
#line 1025
  return (i);
}
}
#line 1028 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;
  int tmp ;

  {
#line 1031
  b = mdev->bitmap;
#line 1032
  i = 0xffffffffffffffffUL;
#line 1034
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1034
  if (_b != 0) {
#line 1034
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1034);
  } else {

  }
#line 1034
  if (_b != 0) {
#line 1034
    return (i);
  } else {

  }
#line 1035
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1035
  if (_b___0 != 0) {
#line 1035
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1035);
  } else {

  }
#line 1035
  if (_b___0 != 0) {
#line 1035
    return (i);
  } else {

  }
#line 1037
  spin_lock_irq(& b->bm_lock);
#line 1038
  tmp = bm_is_locked(b);
#line 1038
  if (tmp != 0) {
#line 1039
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1041
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 1043
  spin_unlock_irq(& b->bm_lock);
#line 1044
  return (i);
}
}
#line 1047 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1049
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1049
  return (tmp);
}
}
#line 1062 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1065
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1065
  return (tmp);
}
}
#line 1068 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1071
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1071
  return (tmp);
}
}
#line 1080 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned long last_page_nr ;
  int c ;
  unsigned long offset ;
  unsigned long page_nr ;
  int tmp ;
  int tmp___0 ;

  {
#line 1083
  b = mdev->bitmap;
#line 1084
  p_addr = 0;
#line 1086
  last_page_nr = 0xffffffffffffffffUL;
#line 1087
  c = 0;
#line 1089
  if (b->bm_bits <= e) {
#line 1090
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1092
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1094
  bitnr = s;
#line 1094
  goto ldv_44123;
  ldv_44122: 
#line 1095
  offset = bitnr >> 6;
#line 1096
  page_nr = offset >> 9;
#line 1097
  if (page_nr != last_page_nr) {
#line 1098
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1099
      __bm_unmap(p_addr, km);
    } else {

    }
#line 1100
    p_addr = __bm_map_paddr(b, offset, km);
#line 1101
    last_page_nr = page_nr;
  } else {

  }
#line 1103
  if (val != 0) {
#line 1104
    tmp = __test_and_set_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1104
    c = (tmp == 0) + c;
  } else {
#line 1106
    tmp___0 = __test_and_clear_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1106
    c = c - (tmp___0 != 0);
  }
#line 1094
  bitnr = bitnr + 1UL;
  ldv_44123: ;
#line 1094
  if (bitnr <= e) {
#line 1095
    goto ldv_44122;
  } else {

  }

#line 1108
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1109
    __bm_unmap(p_addr, km);
  } else {

  }
#line 1110
  b->bm_set = b->bm_set + (unsigned long )c;
#line 1111
  return (c);
}
}
#line 1118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;

  {
#line 1122
  b = mdev->bitmap;
#line 1123
  c = 0;
#line 1125
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1125
  if (_b != 0) {
#line 1125
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1125);
  } else {

  }
#line 1125
  if (_b != 0) {
#line 1125
    return (1);
  } else {

  }
#line 1126
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1126
  if (_b___0 != 0) {
#line 1126
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1126);
  } else {

  }
#line 1126
  if (_b___0 != 0) {
#line 1126
    return (0);
  } else {

  }
#line 1128
  tmp = spinlock_check(& b->bm_lock);
#line 1128
  flags = _raw_spin_lock_irqsave(tmp);
#line 1129
  tmp___0 = bm_is_locked(b);
#line 1129
  if (tmp___0 != 0) {
#line 1130
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1132
  c = __bm_change_bits_to(mdev, s, e, val, KM_IRQ1);
#line 1134
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1135
  return (c);
}
}
#line 1139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1141
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1141
  return (tmp);
}
}
#line 1145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1147
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1147
  return (- tmp);
}
}
#line 1152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1157
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr), KM_USER0);
#line 1157
  paddr = (unsigned long *)tmp;
#line 1158
  i = first_word;
#line 1158
  goto ldv_44162;
  ldv_44161: 
#line 1159
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1159
  bits = (int )tmp___0;
#line 1160
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1161
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1158
  i = i + 1;
  ldv_44162: ;
#line 1158
  if (i < last_word) {
#line 1159
    goto ldv_44161;
  } else {

  }
#line 1163
  kunmap_atomic_notypecheck((void *)paddr, KM_USER0);
#line 1164
  return;
}
}
#line 1170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1180
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1181
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1188
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1190
    __bm_change_bits_to(mdev, s, e, 1, KM_USER0);
#line 1191
    return;
  } else {

  }
#line 1197
  if (sl != 0UL) {
#line 1198
    __bm_change_bits_to(mdev, s, sl - 1UL, 1, KM_USER0);
  } else {

  }
#line 1200
  first_page = (int )(sl >> 15);
#line 1201
  last_page = (int )(el >> 15);
#line 1205
  first_word = (int )(sl >> 6) & 511;
#line 1206
  last_word = 512;
#line 1209
  page_nr = first_page;
#line 1209
  goto ldv_44178;
  ldv_44177: 
#line 1210
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1211
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1211, 0);
#line 1211
  _cond_resched();
#line 1212
  first_word = 0;
#line 1209
  page_nr = page_nr + 1;
  ldv_44178: ;
#line 1209
  if (page_nr < last_page) {
#line 1210
    goto ldv_44177;
  } else {

  }
#line 1216
  last_word = (int )(el >> 6) & 511;
#line 1217
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1224
  if (el <= (unsigned long )e) {
#line 1225
    __bm_change_bits_to(mdev, el, e, 1, KM_USER0);
  } else {

  }
#line 1226
  return;
}
}
#line 1235 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  unsigned long offset ;
  int tmp___1 ;

  {
#line 1238
  b = mdev->bitmap;
#line 1242
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1242
  if (_b != 0) {
#line 1242
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1242);
  } else {

  }
#line 1242
  if (_b != 0) {
#line 1242
    return (0);
  } else {

  }
#line 1243
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1243
  if (_b___0 != 0) {
#line 1243
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1243);
  } else {

  }
#line 1243
  if (_b___0 != 0) {
#line 1243
    return (0);
  } else {

  }
#line 1245
  tmp = spinlock_check(& b->bm_lock);
#line 1245
  flags = _raw_spin_lock_irqsave(tmp);
#line 1246
  tmp___0 = bm_is_locked(b);
#line 1246
  if (tmp___0 != 0) {
#line 1247
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1248
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1249
    offset = bitnr >> 6;
#line 1250
    p_addr = bm_map_paddr(b, offset);
#line 1251
    tmp___1 = variable_test_bit((int )bitnr & 32767, (unsigned long const volatile   *)p_addr);
#line 1251
    i = tmp___1 != 0;
#line 1252
    bm_unmap(p_addr);
  } else
#line 1253
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1254
    i = -1;
  } else {
#line 1256
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1257
    i = 0;
  }
#line 1260
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1261
  return (i);
}
}
#line 1265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long page_nr ;
  unsigned long bitnr ;
  int c ;
  size_t w ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1268
  b = mdev->bitmap;
#line 1269
  p_addr = 0;
#line 1269
  page_nr = 0xffffffffffffffffUL;
#line 1271
  c = 0;
#line 1278
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1278
  if (_b != 0) {
#line 1278
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1278);
  } else {

  }
#line 1278
  if (_b != 0) {
#line 1278
    return (1);
  } else {

  }
#line 1279
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1279
  if (_b___0 != 0) {
#line 1279
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1279);
  } else {

  }
#line 1279
  if (_b___0 != 0) {
#line 1279
    return (1);
  } else {

  }
#line 1281
  tmp = spinlock_check(& b->bm_lock);
#line 1281
  flags = _raw_spin_lock_irqsave(tmp);
#line 1282
  tmp___0 = bm_is_locked(b);
#line 1282
  if (tmp___0 != 0) {
#line 1283
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1284
  bitnr = s;
#line 1284
  goto ldv_44220;
  ldv_44219: 
#line 1285
  w = bitnr >> 6;
#line 1286
  if (w >> 9 != page_nr) {
#line 1287
    page_nr = w >> 9;
#line 1288
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1289
      bm_unmap(p_addr);
    } else {

    }
#line 1290
    p_addr = bm_map_paddr(b, w);
  } else {

  }
#line 1292
  _b___1 = b->bm_bits <= bitnr;
#line 1292
  if (_b___1 != 0) {
#line 1292
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1292);
  } else {

  }
#line 1292
  if (_b___1 != 0) {
#line 1293
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1295
    tmp___1 = variable_test_bit((int )((unsigned int )bitnr - ((unsigned int )page_nr << 15U)),
                                (unsigned long const volatile   *)p_addr);
#line 1295
    c = (tmp___1 != 0) + c;
  }
#line 1284
  bitnr = bitnr + 1UL;
  ldv_44220: ;
#line 1284
  if (bitnr <= (unsigned long )e) {
#line 1285
    goto ldv_44219;
  } else {

  }

#line 1298
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1299
    bm_unmap(p_addr);
  } else {

  }
#line 1300
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1301
  return (c);
}
}
#line 1319 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1321
  b = mdev->bitmap;
#line 1326
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1326
  if (_b != 0) {
#line 1326
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1326);
  } else {

  }
#line 1326
  if (_b != 0) {
#line 1326
    return (0);
  } else {

  }
#line 1327
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1327
  if (_b___0 != 0) {
#line 1327
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1327);
  } else {

  }
#line 1327
  if (_b___0 != 0) {
#line 1327
    return (0);
  } else {

  }
#line 1329
  tmp = spinlock_check(& b->bm_lock);
#line 1329
  flags = _raw_spin_lock_irqsave(tmp);
#line 1330
  tmp___0 = bm_is_locked(b);
#line 1330
  if (tmp___0 != 0) {
#line 1331
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1333
  s = (int )(enr << 6);
#line 1334
  _min1 = (enr + 1UL) << 6;
#line 1334
  _min2 = b->bm_words;
#line 1334
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1335
  count = 0;
#line 1336
  if ((size_t )s < b->bm_words) {
#line 1337
    n = e - s;
#line 1338
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1339
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1340
    goto ldv_44246;
    ldv_44245: 
#line 1341
    tmp___1 = bm;
#line 1341
    bm = bm + 1;
#line 1341
    tmp___2 = hweight_long(*tmp___1);
#line 1341
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_44246: 
#line 1340
    tmp___3 = n;
#line 1340
    n = n - 1;
#line 1340
    if (tmp___3 != 0) {
#line 1341
      goto ldv_44245;
    } else {

    }
#line 1342
    bm_unmap(p_addr);
  } else {
#line 1344
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1346
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1347
  return (count);
}
}
#line 1351 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  int count ;
  int s ;
  int e ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  int tmp ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1353
  b = mdev->bitmap;
#line 1357
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1357
  if (_b != 0) {
#line 1357
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1357);
  } else {

  }
#line 1357
  if (_b != 0) {
#line 1357
    return (0UL);
  } else {

  }
#line 1358
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1358
  if (_b___0 != 0) {
#line 1358
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1358);
  } else {

  }
#line 1358
  if (_b___0 != 0) {
#line 1358
    return (0UL);
  } else {

  }
#line 1360
  spin_lock_irq(& b->bm_lock);
#line 1361
  tmp = bm_is_locked(b);
#line 1361
  if (tmp != 0) {
#line 1362
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1363
  weight = b->bm_set;
#line 1365
  s = (int )((unsigned int )al_enr * 16U);
#line 1366
  __min1 = (size_t )(s + 16);
#line 1366
  __min2 = b->bm_words;
#line 1366
  e = (int )(__min1 < __min2 ? __min1 : __min2);
#line 1368
  if ((e + -1) >> 9 != s >> 9) {
#line 1368
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1369);
  } else {

  }
#line 1370
  count = 0;
#line 1371
  if ((size_t )s < b->bm_words) {
#line 1372
    do_now = e - s;
#line 1372
    i = do_now;
#line 1373
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1374
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1375
    goto ldv_44270;
    ldv_44269: 
#line 1376
    tmp___0 = hweight_long(*bm);
#line 1376
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1377
    *bm = 0xffffffffffffffffUL;
#line 1378
    bm = bm + 1;
    ldv_44270: 
#line 1375
    tmp___1 = i;
#line 1375
    i = i - 1;
#line 1375
    if (tmp___1 != 0) {
#line 1376
      goto ldv_44269;
    } else {

    }
#line 1380
    bm_unmap(p_addr);
#line 1381
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1382
    if ((size_t )e == b->bm_words) {
#line 1383
      tmp___2 = bm_clear_surplus(b);
#line 1383
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1385
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1387
  weight = b->bm_set - weight;
#line 1388
  spin_unlock_irq(& b->bm_lock);
#line 1389
  return (weight);
}
}
#line 1392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1397
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1399
  mutex_lock(ldv_func_arg1);
#line 1400
  return;
}
}
#line 1402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1407
  tmp = mutex_trylock(ldv_func_arg1);
#line 1407
  ldv_func_res = tmp;
#line 1409
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1409
  return (tmp___0);
#line 1411
  return (ldv_func_res);
}
}
#line 1414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1419
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1421
  mutex_unlock(ldv_func_arg1);
#line 1422
  return;
}
}
#line 1424 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1429
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1431
  mutex_lock(ldv_func_arg1);
#line 1432
  return;
}
}
#line 1434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1439
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1441
  mutex_unlock(ldv_func_arg1);
#line 1442
  return;
}
}
#line 1444 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1449
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1451
  mutex_unlock(ldv_func_arg1);
#line 1452
  return;
}
}
#line 1454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_7(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1459
  tmp = mutex_trylock(ldv_func_arg1);
#line 1459
  ldv_func_res = tmp;
#line 1461
  tmp___0 = ldv_mutex_trylock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1461
  return (tmp___0);
#line 1463
  return (ldv_func_res);
}
}
#line 1466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1471
  ldv_mutex_lock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1473
  mutex_lock(ldv_func_arg1);
#line 1474
  return;
}
}
#line 1476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1481
  ldv_mutex_unlock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1483
  mutex_unlock(ldv_func_arg1);
#line 1484
  return;
}
}
#line 1486 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1491
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1493
  mutex_lock(ldv_func_arg1);
#line 1494
  return;
}
}
#line 1496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1501
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1503
  mutex_unlock(ldv_func_arg1);
#line 1504
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) ;
#line 90 "include/linux/module.h"
extern struct module __this_module ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 280
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 281
char const   *drbd_role_str(enum drbd_role s ) ;
#line 282
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 164
struct drbd_conf **minor_table ;
#line 1059 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1063
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1065
  return (mdev);
}
}
#line 1404
int proc_details ;
#line 1536 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1537
struct file_operations  const  drbd_proc_fops ;
#line 2069 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2082
  tmp = drbd_bm_total_weight(mdev);
#line 2082
  *bits_left = tmp - mdev->rs_failed;
#line 2085
  if (*bits_left > mdev->rs_total) {
#line 2091
    __asm__  volatile   ("": : : "memory");
#line 2092
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35202.conn);
#line 2092
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2095
    *per_mil_done = 0U;
  } else {
#line 2098
    tmp___1 = 1000UL - ((*bits_left >> 10) * 1000UL) / ((mdev->rs_total >> 10) + 1UL);
#line 2101
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2103
  return;
}
}
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 96
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & single_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;

  {
#line 117
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 119
  x = (int )(res / 50U);
#line 120
  y = 20 - x;
#line 121
  seq_printf(seq, "\t[");
#line 122
  i = 1;
#line 122
  goto ldv_43736;
  ldv_43735: 
#line 123
  seq_printf(seq, "=");
#line 122
  i = i + 1;
  ldv_43736: ;
#line 122
  if (i < x) {
#line 123
    goto ldv_43735;
  } else {

  }
#line 124
  seq_printf(seq, ">");
#line 125
  i = 0;
#line 125
  goto ldv_43739;
  ldv_43738: 
#line 126
  seq_printf(seq, ".");
#line 125
  i = i + 1;
  ldv_43739: ;
#line 125
  if (i < y) {
#line 126
    goto ldv_43738;
  } else {

  }
#line 127
  seq_printf(seq, "] ");
#line 129
  seq_printf(seq, "sync\'ed:%3u.%u%% ", res / 10U, res % 10U);
#line 131
  if (mdev->rs_total > 1048576UL) {
#line 132
    seq_printf(seq, "(%lu/%lu)M\n\t", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 136
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 149
  dt = ((unsigned long )jiffies - mdev->rs_mark_time) / 250UL;
#line 151
  if (dt > 20UL) {
#line 154
    seq_printf(seq, "stalled\n");
#line 155
    return;
  } else {

  }
#line 158
  if (dt == 0UL) {
#line 159
    dt = dt + 1UL;
  } else {

  }
#line 160
  db = mdev->rs_mark_left - rs_left;
#line 161
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 163
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 167
  dbdt = db / dt << 2;
#line 168
  if (dbdt > 1000UL) {
#line 169
    seq_printf(seq, " speed: %ld,%03ld", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 172
    seq_printf(seq, " speed: %ld", dbdt);
  }
#line 176
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 177
  if (dt == 0UL) {
#line 178
    dt = 1UL;
  } else {

  }
#line 179
  db = mdev->rs_total - rs_left;
#line 180
  dbdt = db / dt << 2;
#line 181
  if (dbdt > 1000UL) {
#line 182
    seq_printf(seq, " (%ld,%03ld)", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 185
    seq_printf(seq, " (%ld)", dbdt);
  }
#line 187
  seq_printf(seq, " K/sec\n");
#line 188
  return;
}
}
#line 190 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 192
  __mptr = (struct lc_element  const  *)e;
#line 192
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 194
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 197
  return;
}
}
#line 200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[4U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;

  {
#line 202
  hole = 0;
#line 206
  write_ordering_chars[0] = 110;
#line 206
  write_ordering_chars[1] = 100;
#line 206
  write_ordering_chars[2] = 102;
#line 206
  write_ordering_chars[3] = 98;
#line 213
  tmp = drbd_buildtag();
#line 213
  seq_printf(seq, "version: 8.3.8.1 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 94, tmp);
#line 236
  i = 0;
#line 236
  goto ldv_43759;
  ldv_43758: 
#line 237
  mdev = minor_to_mdev((unsigned int )i);
#line 238
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 239
    hole = 1;
#line 240
    goto ldv_43757;
  } else {

  }
#line 242
  if (hole != 0) {
#line 243
    hole = 0;
#line 244
    seq_printf(seq, "\n");
  } else {

  }
#line 247
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35202.conn);
#line 249
  if (((unsigned int )*((unsigned short *)mdev + 910UL) == 0U && (unsigned int )*((unsigned char *)mdev + 1821UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1820UL) == 2U) {
#line 252
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 254
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 254
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 254
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 254
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 254
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 254
    tmp___5 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35202.pdsk);
#line 254
    tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35202.disk);
#line 254
    tmp___7 = drbd_role_str((enum drbd_role )mdev->state.ldv_35202.peer);
#line 254
    tmp___8 = drbd_role_str((enum drbd_role )mdev->state.ldv_35202.role);
#line 254
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___8, tmp___7, tmp___6, tmp___5, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               (unsigned int )*((unsigned char *)mdev + 1822UL) != 0U ? 115 : 114,
               (unsigned int )*((unsigned char *)mdev + 1822UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)mdev + 1822UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 1822UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               mdev->send_cnt / 2U, mdev->recv_cnt / 2U, mdev->writ_cnt / 2U, mdev->read_cnt / 2U,
               mdev->al_writ_cnt, mdev->bm_writ_cnt, tmp___4, tmp___2 + tmp___3, tmp___1,
               tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 284
    tmp___9 = drbd_bm_total_weight(mdev);
#line 284
    seq_printf(seq, " oos:%lu\n", tmp___9 << 2);
  }
#line 287
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 256U || (unsigned int )*((unsigned short *)mdev + 910UL) == 272U) {
#line 289
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 291
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 288U || (unsigned int )*((unsigned short *)mdev + 910UL) == 304U) {
#line 292
    seq_printf(seq, "\t%3d%%      %lu/%lu\n", (int )((mdev->rs_total - mdev->ov_left) / (mdev->rs_total / 100UL + 1UL)),
               mdev->rs_total - mdev->ov_left, mdev->rs_total);
  } else {

  }
#line 298
  if (proc_details > 0) {
#line 298
    tmp___10 = _get_ldev_if_state(mdev, D_FAILED);
#line 298
    if (tmp___10 != 0) {
#line 299
      lc_seq_printf_stats(seq, mdev->resync);
#line 300
      lc_seq_printf_stats(seq, mdev->act_log);
#line 301
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 304
  if (proc_details > 1) {
#line 305
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 306
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_43757: 
#line 236
  i = i + 1;
  ldv_43759: ;
#line 236
  if ((unsigned int )i < minor_count) {
#line 237
    goto ldv_43758;
  } else {

  }

#line 312
  return (0);
}
}
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;

  {
#line 317
  tmp = PDE((struct inode  const  *)inode);
#line 317
  tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 317
  return (tmp___0);
}
}
#line 338
void ldv_check_final_state(void) ;
#line 341
extern void ldv_check_return_value(int  ) ;
#line 347
void ldv_initialize(void) ;
#line 350
extern void ldv_handler_precall(void) ;
#line 353
extern int nondet_int(void) ;
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 359 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_main1_sequence_infinite_withcheck_stateful(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_3 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 391
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 381
  LDV_IN_INTERRUPT = 1;
#line 390
  ldv_initialize();
#line 394
  goto ldv_43790;
  ldv_43789: 
#line 398
  tmp = nondet_int();
#line 398
  switch (tmp) {
  case 0: ;
#line 403
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 408
    ldv_handler_precall();
#line 409
    res_drbd_proc_open_3 = drbd_proc_open(var_group1, var_group2);
#line 410
    ldv_check_return_value(res_drbd_proc_open_3);
#line 411
    if (res_drbd_proc_open_3 != 0) {
#line 412
      goto ldv_module_exit;
    } else {

    }
#line 413
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 419
  goto ldv_43787;
  default: ;
#line 420
  goto ldv_43787;
  }
  ldv_43787: ;
  ldv_43790: 
#line 394
  tmp___0 = nondet_int();
#line 394
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 396
    goto ldv_43789;
  } else {

  }

  ldv_module_exit: ;
#line 429
  ldv_check_final_state();
#line 432
  return;
}
}
#line 436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 441
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 443
  mutex_lock(ldv_func_arg1);
#line 444
  return;
}
}
#line 446 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 451
  tmp = mutex_trylock(ldv_func_arg1);
#line 451
  ldv_func_res = tmp;
#line 453
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 453
  return (tmp___0);
#line 455
  return (ldv_func_res);
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 463
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 465
  mutex_unlock(ldv_func_arg1);
#line 466
  return;
}
}
#line 468 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 473
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 475
  mutex_lock(ldv_func_arg1);
#line 476
  return;
}
}
#line 478 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 483
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 485
  mutex_unlock(ldv_func_arg1);
#line 486
  return;
}
}
#line 488 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 493
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 495
  mutex_unlock(ldv_func_arg1);
#line 496
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 199 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 25 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 27
  list->next = list;
#line 28
  list->prev = list;
#line 29
  return;
}
}
#line 48
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 61 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 63
  __list_add(new, head, head->next);
#line 64
  return;
}
}
#line 75 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 77
  __list_add(new, head->prev, head);
#line 78
  return;
}
}
#line 87 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 89
  next->prev = prev;
#line 90
  prev->next = next;
#line 91
  return;
}
}
#line 107
extern void list_del(struct list_head * ) ;
#line 137 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 139
  __list_del(entry->prev, entry->next);
#line 140
  INIT_LIST_HEAD(entry);
#line 141
  return;
}
}
#line 181 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 183
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 268 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 272
  first = list->next;
#line 273
  last = list->prev;
#line 275
  first->prev = prev;
#line 276
  prev->next = first;
#line 278
  last->next = next;
#line 279
  next->prev = last;
#line 280
  return;
}
}
#line 313 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 316
  tmp = list_empty((struct list_head  const  *)list);
#line 316
  if (tmp == 0) {
#line 317
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 318
    INIT_LIST_HEAD(list);
  } else {

  }
#line 320
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 250 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_36(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_37(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_39(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_42(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_44(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_35(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_38(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_41(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_43(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_45(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 185 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 91 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 57 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___0(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13783: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_13783;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___0(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___0(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___0(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 348 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 348
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 348
  return (tmp);
}
}
#line 307 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 309
  tmp = PageTail(page);
#line 309
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 309
  if (tmp___0 != 0L) {
#line 310
    return (page->ldv_12434.first_page);
  } else {

  }
#line 311
  return (page);
}
}
#line 314 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 316
  tmp = compound_head(page);
#line 316
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 316
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17874: ;
#line 63
    goto ldv_17874;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17875: ;
#line 65
    goto ldv_17875;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17876: ;
#line 66
    goto ldv_17876;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 35 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 38
  __constr_expr_0.lock.ldv_5628.rlock.raw_lock.slock = 0U;
#line 38
  __constr_expr_0.lock.ldv_5628.rlock.magic = 3735899821U;
#line 38
  __constr_expr_0.lock.ldv_5628.rlock.owner_cpu = 4294967295U;
#line 38
  __constr_expr_0.lock.ldv_5628.rlock.owner = 0xffffffffffffffffUL;
#line 38
  __constr_expr_0.lock.ldv_5628.rlock.dep_map.key = 0;
#line 38
  __constr_expr_0.lock.ldv_5628.rlock.dep_map.class_cache = 0;
#line 38
  __constr_expr_0.lock.ldv_5628.rlock.dep_map.name = "(*sem).lock";
#line 38
  __constr_expr_0.lock.ldv_5628.rlock.dep_map.cpu = 0;
#line 38
  __constr_expr_0.lock.ldv_5628.rlock.dep_map.ip = 0UL;
#line 38
  __constr_expr_0.count = (unsigned int )val;
#line 38
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 38
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 38
  *sem = __constr_expr_0;
#line 39
  lockdep_init_map(& sem->lock.ldv_5628.ldv_5627.dep_map, "semaphore->lock", & __key,
                   0);
#line 40
  return;
}
}
#line 46
extern int down_interruptible(struct semaphore * ) ;
#line 48
extern int down_trylock(struct semaphore * ) ;
#line 50
extern void up(struct semaphore * ) ;
#line 351 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 2001
extern void flush_signals(struct task_struct * ) ;
#line 2034
extern void force_sig(int  , struct task_struct * ) ;
#line 1069 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1127 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1129
  return (& tfm->base);
}
}
#line 1147 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1149
  tmp = crypto_hash_tfm(tfm);
#line 1149
  return (& tmp->crt_u.hash);
}
}
#line 1162 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1164
  tmp = crypto_hash_crt(tfm);
#line 1164
  return (tmp->digestsize);
}
}
#line 1182 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1184
  tmp = crypto_hash_crt(desc->tfm);
#line 1184
  tmp___0 = (*(tmp->init))(desc);
#line 1184
  return (tmp___0);
}
}
#line 1187 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1196
  tmp = crypto_hash_crt(desc->tfm);
#line 1196
  tmp___0 = (*(tmp->final))(desc, out);
#line 1196
  return (tmp___0);
}
}
#line 982 "include/linux/blkdev.h"
__inline static unsigned int queue_max_segment_size(struct request_queue *q ) 
{ 


  {
#line 984
  return (q->limits.max_segment_size);
}
}
#line 640 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 646
  __asm__  volatile   ("": : : "memory");
#line 647
  return (thi->t_state);
}
}
#line 1068 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1070
  return (mdev->minor);
}
}
#line 1081 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1083
  ldv_mutex_lock_38(& mdev->data.mutex);
#line 1086
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1086
  if (tmp != 0L) {
#line 1087
    ldv_mutex_unlock_39(& mdev->data.mutex);
#line 1088
    return (0);
  } else {

  }
#line 1090
  return (1);
}
}
#line 1093 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1095
  ldv_mutex_unlock_40(& mdev->data.mutex);
#line 1096
  return;
}
}
#line 1120
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1129
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1131
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1148
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) ;
#line 1152
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) ;
#line 1157
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) ;
#line 1165
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1171
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1173
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1175
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1178
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1180
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1184
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1190
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1193
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1196
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1197
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1200
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1205
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) ;
#line 1399 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1425
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1428
int drbd_worker(struct drbd_thread *thi ) ;
#line 1429
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1430
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1431
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1432
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1433
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1437
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1439 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1441
  if (mdev->ov_last_oos_size != 0UL) {
#line 1442
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1446
  mdev->ov_last_oos_size = 0UL;
#line 1447
  return;
}
}
#line 1450
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1451
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1454
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1455
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1456
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1457
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1458
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1459
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1460
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1461
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1463
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1464
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1465
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1466
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1467
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1468
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1469
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1471
void resync_timer_fn(unsigned long data ) ;
#line 1474
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1477
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1482
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) ;
#line 1493 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1497
  if (level == 1) {
#line 1498
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1500
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1502
  return (err);
}
}
#line 1505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1507
  val = 1;
#line 1508
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1510
  return;
}
}
#line 1512 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1514
  val = 0;
#line 1515
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1517
  return;
}
}
#line 1533
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1543
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1544
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1546
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1547
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1548
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1549
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1552
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1556
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) ;
#line 1632 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1634
  return ((struct page *)page->ldv_12434.ldv_12431.private);
}
}
#line 1655 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1657
  page = e->pages;
#line 1658
  goto ldv_44051;
  ldv_44050: 
#line 1659
  tmp = page_count(page);
#line 1659
  if (tmp > 1) {
#line 1660
    return (1);
  } else {

  }
#line 1658
  page = page_chain_next(page);
  ldv_44051: ;
#line 1658
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1658
    tmp___0 = page_chain_next(page);
#line 1658
    __builtin_prefetch((void const   *)tmp___0);
#line 1658
    if (1 != 0) {
#line 1659
      goto ldv_44050;
    } else {
#line 1661
      goto ldv_44052;
    }
  } else {

  }
  ldv_44052: ;
#line 1662
  return (0);
}
}
#line 1666 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1668
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1668
  if (tmp == 0) {
#line 1668
    goto ldv_44056;
  } else {

  }
#line 1668
  tmp___0 = get_current();
#line 1668
  __wait.flags = 0U;
#line 1668
  __wait.private = (void *)tmp___0;
#line 1668
  __wait.func = & autoremove_wake_function;
#line 1668
  __wait.task_list.next = & __wait.task_list;
#line 1668
  __wait.task_list.prev = & __wait.task_list;
  ldv_44059: 
#line 1668
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1668
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1668
  if (tmp___1 == 0) {
#line 1668
    goto ldv_44058;
  } else {

  }
#line 1668
  schedule();
#line 1668
  goto ldv_44059;
  ldv_44058: 
#line 1668
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44056: ;
#line 1671
  return;
}
}
#line 1672 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1674
  clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1675
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1676
  return;
}
}
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1711
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1713
  if (forcedetach == 0) {
#line 1714
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1714
    if (tmp != 0) {
#line 1715
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1717
    goto ldv_44082;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1722
  if ((int )mdev->state.ldv_35202.disk > 2) {
#line 1723
    __ns.i = mdev->state.i;
#line 1723
    __ns.ldv_35202.disk = 2U;
#line 1723
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1727
  goto ldv_44082;
  }
  ldv_44082: ;
#line 1730
  return;
}
}
#line 1788 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 


  {
#line 1791
  return ((unsigned long )bdev != (unsigned long )((struct block_device *)0) ? (sector_t )((bdev->bd_inode)->i_size >> 9) : 0UL);
}
}
#line 1877 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1880
  tmp = spinlock_check(& q->q_lock);
#line 1880
  flags = _raw_spin_lock_irqsave(tmp);
#line 1881
  list_add_tail(& w->list, & q->q);
#line 1882
  up(& q->s);
#line 1884
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1885
  return;
}
}
#line 1887 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1889
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1889
  if (tmp != 0) {
#line 1890
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 1891
  return;
}
}
#line 1893 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 1895
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 1896
  wake_asender(mdev);
#line 1897
  return;
}
}
#line 1899 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1903
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 1903
  return (tmp);
}
}
#line 1918 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 1920
  _drbd_thread_stop(thi, 0, 1);
#line 1921
  return;
}
}
#line 1978 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1980
  atomic_inc(& mdev->rs_pending_cnt);
#line 1981
  return;
}
}
#line 2309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_kick_lo(struct drbd_conf *mdev ) 
{ 
  struct request_queue *tmp ;
  int tmp___0 ;

  {
#line 2311
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2311
  if (tmp___0 != 0) {
#line 2312
    tmp = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2312
    drbd_blk_run_queue(tmp);
#line 2313
    put_ldev(mdev);
  } else {

  }
#line 2315
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 297
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 304
  mdev = req->mdev;
#line 308
  __req_mod(req, what, & m);
#line 309
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 310
    complete_master_bio(mdev, & m);
  } else {

  }
#line 311
  return;
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 318
  mdev = req->mdev;
#line 320
  spin_lock_irq(& mdev->req_lock);
#line 321
  __req_mod(req, what, & m);
#line 322
  spin_unlock_irq(& mdev->req_lock);
#line 324
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 325
    complete_master_bio(mdev, & m);
  } else {

  }
#line 326
  return;
}
}
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 129 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 133
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 134
  md_io->error = error;
#line 136
  complete(& md_io->event);
#line 137
  return;
}
}
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 144
  flags = 0UL;
#line 145
  mdev = e->mdev;
#line 147
  if (e->block_id == 0ULL) {
#line 147
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            147);
  } else {

  }
#line 149
  tmp = spinlock_check(& mdev->req_lock);
#line 149
  flags = _raw_spin_lock_irqsave(tmp);
#line 150
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 151
  list_del(& e->w.list);
#line 152
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 152
  if (tmp___0 != 0) {
#line 153
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 154
  tmp___1 = constant_test_bit(4U, (unsigned long const volatile   *)(& e->flags));
#line 154
  if (tmp___1 != 0) {
#line 155
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_read_sec_final");
  } else {

  }
#line 156
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 158
  drbd_queue_work(& mdev->data.work, & e->w);
#line 159
  put_ldev(mdev);
#line 160
  return;
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int is_failed_barrier(int ee_flags ) 
{ 


  {
#line 164
  return ((ee_flags & 28) == 20);
}
}
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 172
  flags = 0UL;
#line 173
  mdev = e->mdev;
#line 181
  tmp___0 = is_failed_barrier((int )e->flags);
#line 181
  if (tmp___0 != 0) {
#line 182
    drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 183
    tmp = spinlock_check(& mdev->req_lock);
#line 183
    flags = _raw_spin_lock_irqsave(tmp);
#line 184
    list_del(& e->w.list);
#line 185
    e->flags = (e->flags & 0xffffffffffffffe7UL) | 8UL;
#line 186
    e->w.cb = & w_e_reissue;
#line 189
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 190
    drbd_queue_work(& mdev->data.work, & e->w);
#line 191
    return;
  } else {

  }
#line 194
  if (e->block_id == 0ULL) {
#line 194
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            194);
  } else {

  }
#line 200
  e_sector = e->sector;
#line 201
  do_al_complete_io = (int )e->flags & 1;
#line 202
  is_syncer_req = e->block_id == 0xffffffffffffffffULL;
#line 204
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 204
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 205
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 206
  list_del(& e->w.list);
#line 207
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 214
  if (is_syncer_req != 0) {
#line 214
    tmp___2 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 214
    do_wake = tmp___2;
  } else {
#line 214
    tmp___3 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 214
    do_wake = tmp___3;
  }
#line 218
  tmp___4 = constant_test_bit(4U, (unsigned long const volatile   *)(& e->flags));
#line 218
  if (tmp___4 != 0) {
#line 219
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec_final");
  } else {

  }
#line 220
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 222
  if (is_syncer_req != 0) {
#line 223
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 225
  if (do_wake != 0) {
#line 226
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 228
  if (do_al_complete_io != 0) {
#line 229
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 231
  wake_asender(mdev);
#line 232
  put_ldev(mdev);
#line 233
  return;
}
}
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;

  {
#line 240
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 241
  mdev = e->mdev;
#line 242
  uptodate = (int )bio->bi_flags & 1;
#line 243
  is_write = (int )bio->bi_rw & 1;
#line 245
  if (error != 0) {
#line 246
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
             is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
  } else {

  }
#line 249
  if (error == 0 && uptodate == 0) {
#line 250
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
             is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
#line 256
    error = -5;
  } else {

  }
#line 259
  if (error != 0) {
#line 260
    set_bit(4U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 262
  bio_put(bio);
#line 263
  tmp = atomic_dec_and_test(& e->pending_bios);
#line 263
  if (tmp != 0) {
#line 264
    if (is_write != 0) {
#line 265
      drbd_endio_write_sec_final(e);
    } else {
#line 267
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 268
  return;
}
}
#line 273 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 276
  req = (struct drbd_request *)bio->bi_private;
#line 277
  mdev = req->mdev;
#line 280
  uptodate = (int )bio->bi_flags & 1;
#line 282
  if (error == 0 && uptodate == 0) {
#line 283
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 288
    error = -5;
  } else {

  }
#line 292
  tmp = __builtin_expect(error != 0, 0L);
#line 292
  if (tmp != 0L) {
#line 293
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 1025UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 299
    what = completed_ok;
  }
#line 301
  bio_put(req->private_bio);
#line 302
  tmp___0 = ERR_PTR((long )error);
#line 302
  req->private_bio = (struct bio *)tmp___0;
#line 304
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 304
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 305
  __req_mod(req, what, & m);
#line 306
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 308
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 309
    complete_master_bio(mdev, & m);
  } else {

  }
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 314
  __mptr = (struct drbd_work  const  *)w;
#line 314
  req = (struct drbd_request *)__mptr;
#line 320
  spin_lock_irq(& mdev->req_lock);
#line 321
  if (cancel != 0 || *((unsigned int *)mdev + 455UL) != 65536U) {
#line 322
    _req_mod(req, read_retry_remote_canceled);
#line 323
    spin_unlock_irq(& mdev->req_lock);
#line 324
    return (1);
  } else {

  }
#line 326
  spin_unlock_irq(& mdev->req_lock);
#line 328
  tmp = w_send_read_req(mdev, w, 0);
#line 328
  return (tmp);
}
}
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int _b ;

  {
#line 333
  _b = cancel != 0;
#line 333
  if (_b != 0) {
#line 333
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "w_resync_inactive", (char *)"cancel", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            333);
  } else {

  }
#line 333
  if (_b != 0) {
#line 333
    return (1);
  } else {

  }
#line 334
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync inactive, but callback triggered??\n");
#line 335
  return (1);
}
}
#line 338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 342
  page = e->pages;
#line 346
  desc.tfm = tfm;
#line 347
  desc.flags = 0U;
#line 349
  sg_init_table(& sg, 1U);
#line 350
  crypto_hash_init(& desc);
#line 352
  goto ldv_44537;
  ldv_44536: 
#line 354
  sg_set_page(& sg, page, 4096U, 0U);
#line 355
  crypto_hash_update(& desc, & sg, sg.length);
#line 356
  page = tmp;
  ldv_44537: 
#line 352
  tmp = page_chain_next(page);
#line 352
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 353
    goto ldv_44536;
  } else {

  }
#line 359
  len = e->size & 4095U;
#line 360
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 361
  crypto_hash_update(& desc, & sg, sg.length);
#line 362
  crypto_hash_final(& desc, (u8 *)digest);
#line 363
  return;
}
}
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 372
  desc.tfm = tfm;
#line 373
  desc.flags = 0U;
#line 375
  sg_init_table(& sg, 1U);
#line 376
  crypto_hash_init(& desc);
#line 378
  bvec = bio->bi_io_vec;
#line 378
  i = 0;
#line 378
  goto ldv_44550;
  ldv_44549: 
#line 379
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 380
  crypto_hash_update(& desc, & sg, sg.length);
#line 378
  bvec = bvec + 1;
#line 378
  i = i + 1;
  ldv_44550: ;
#line 378
  if ((int )bio->bi_vcnt > i) {
#line 379
    goto ldv_44549;
  } else {

  }
#line 382
  crypto_hash_final(& desc, (u8 *)digest);
#line 383
  return;
}
}
#line 385 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 387
  __mptr = (struct drbd_work  const  *)w;
#line 387
  e = (struct drbd_epoch_entry *)__mptr;
#line 392
  if (e->block_id != 2205466966ULL) {
#line 392
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            392);
  } else {

  }
#line 394
  tmp = __builtin_expect(cancel != 0, 0L);
#line 394
  if (tmp != 0L) {
#line 395
    drbd_free_ee(mdev, e);
#line 396
    return (1);
  } else {

  }
#line 399
  tmp___1 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 399
  if (tmp___1 != 0L) {
#line 400
    tmp___0 = crypto_hash_digestsize(mdev->csums_tfm);
#line 400
    digest_size = (int )tmp___0;
#line 401
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 402
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 403
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 405
      inc_rs_pending(mdev);
#line 406
      ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                   P_CSUM_RS_REQUEST);
#line 412
      kfree((void const   *)digest);
    } else {
#line 414
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 415
      ok = 0;
    }
  } else {
#line 418
    ok = 1;
  }
#line 420
  drbd_free_ee(mdev, e);
#line 422
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 422
  if (tmp___2 != 0L) {
#line 423
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 424
  return (ok);
}
}
#line 429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;

  {
#line 433
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 433
  if (tmp == 0) {
#line 434
    return (0);
  } else {

  }
#line 438
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 439
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 440
    goto fail;
  } else {

  }
#line 442
  spin_lock_irq(& mdev->req_lock);
#line 443
  list_add(& e->w.list, & mdev->read_ee);
#line 444
  spin_unlock_irq(& mdev->req_lock);
#line 446
  e->w.cb = & w_e_send_csum;
#line 447
  tmp___0 = drbd_submit_ee(mdev, e, 0U, 3);
#line 447
  if (tmp___0 == 0) {
#line 448
    return (1);
  } else {

  }
#line 450
  drbd_free_ee(mdev, e);
  fail: 
#line 452
  put_ldev(mdev);
#line 453
  return (2);
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  int queue ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
#line 459
  mdev = (struct drbd_conf *)data;
#line 462
  tmp = spinlock_check(& mdev->req_lock);
#line 462
  flags = _raw_spin_lock_irqsave(tmp);
#line 464
  tmp___0 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 464
  tmp___1 = __builtin_expect(tmp___0 == 0, 1L);
#line 464
  if (tmp___1 != 0L) {
#line 465
    queue = 1;
#line 466
    if ((unsigned int )*((unsigned short *)mdev + 910UL) == 288U) {
#line 467
      mdev->resync_work.cb = & w_make_ov_request;
    } else {
#line 469
      mdev->resync_work.cb = & w_make_resync_request;
    }
  } else {
#line 471
    queue = 0;
#line 472
    mdev->resync_work.cb = & w_resync_inactive;
  }
#line 475
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 478
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 478
  if (tmp___2 != 0 && queue != 0) {
#line 479
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 480
  return;
}
}
#line 482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_segment_size ;
  int number ;
  int i ;
  int size ;
  int pe ;
  int mx ;
  int align ;
  int queued ;
  int sndbuf ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  unsigned int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  unsigned long tmp___13 ;

  {
#line 487
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 487
  capacity = tmp;
#line 492
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 492
  if (tmp___0 != 0L) {
#line 493
    return (1);
  } else {

  }
#line 495
  tmp___1 = __builtin_expect((int )mdev->state.ldv_35202.conn <= 9, 0L);
#line 495
  if (tmp___1 != 0L) {
#line 496
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Confused in w_make_resync_request()! cstate < Connected");
#line 497
    return (0);
  } else {

  }
#line 500
  if ((unsigned int )*((unsigned short *)mdev + 910UL) != 272U) {
#line 501
    tmp___2 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35202.conn);
#line 501
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s in w_make_resync_request\n",
            tmp___2);
  } else {

  }
#line 504
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 504
  if (tmp___3 == 0) {
#line 509
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 510
    mdev->resync_work.cb = & w_resync_inactive;
#line 511
    return (1);
  } else {

  }
#line 516
  if (mdev->agreed_pro_version <= 93) {
#line 516
    tmp___4 = queue_max_segment_size(mdev->rq_queue);
#line 516
    max_segment_size = (int )tmp___4;
  } else {
#line 516
    max_segment_size = 32768;
  }
#line 519
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 520
  pe = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 522
  ldv_mutex_lock_41(& mdev->data.mutex);
#line 523
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 524
    mx = (int )((unsigned long )((mdev->data.socket)->sk)->sk_rcvbuf / 32UL);
  } else {
#line 526
    mx = 1;
  }
#line 527
  ldv_mutex_unlock_42(& mdev->data.mutex);
#line 530
  if (number > mx) {
#line 531
    mx = number;
  } else {

  }
#line 534
  if (pe + number > mx) {
#line 535
    number = mx - pe;
  } else {

  }
#line 538
  i = 0;
#line 538
  goto ldv_44607;
  ldv_44606: 
#line 540
  ldv_mutex_lock_43(& mdev->data.mutex);
#line 541
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 542
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 543
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 545
    queued = 1;
#line 546
    sndbuf = 0;
  }
#line 548
  ldv_mutex_unlock_44(& mdev->data.mutex);
#line 549
  if (sndbuf / 2 < queued) {
#line 550
    goto requeue;
  } else {

  }
  next_sector: 
#line 553
  size = 4096;
#line 554
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 556
  if (bit == 0xffffffffffffffffUL) {
#line 557
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 558
    mdev->resync_work.cb = & w_resync_inactive;
#line 559
    put_ldev(mdev);
#line 560
    return (1);
  } else {

  }
#line 563
  sector = bit << 3;
#line 565
  tmp___5 = drbd_try_rs_begin_io(mdev, sector);
#line 565
  if (tmp___5 != 0) {
#line 566
    mdev->bm_resync_fo = bit;
#line 567
    goto requeue;
  } else {

  }
#line 569
  mdev->bm_resync_fo = bit + 1UL;
#line 571
  tmp___6 = drbd_bm_test_bit(mdev, bit);
#line 571
  tmp___7 = __builtin_expect(tmp___6 == 0, 0L);
#line 571
  if (tmp___7 != 0L) {
#line 572
    drbd_rs_complete_io(mdev, sector);
#line 573
    goto next_sector;
  } else {

  }
#line 583
  align = 1;
  ldv_44599: ;
#line 585
  if (size + 4096 > max_segment_size) {
#line 586
    goto ldv_44598;
  } else {

  }
#line 589
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 590
    goto ldv_44598;
  } else {

  }
#line 593
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 594
    goto ldv_44598;
  } else {

  }
#line 600
  tmp___8 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 600
  if (tmp___8 != 1) {
#line 601
    goto ldv_44598;
  } else {

  }
#line 602
  bit = bit + 1UL;
#line 603
  size = size + 4096;
#line 604
  if (4096 << align <= size) {
#line 605
    align = align + 1;
  } else {

  }
#line 606
  i = i + 1;
#line 607
  goto ldv_44599;
  ldv_44598: ;
#line 610
  if (size > 4096) {
#line 611
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 615
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 616
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 617
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 618
    tmp___9 = read_for_csum(mdev, sector, size);
#line 618
    switch (tmp___9) {
    case 0: 
#line 620
    put_ldev(mdev);
#line 621
    return (0);
    case 2: 
#line 623
    drbd_rs_complete_io(mdev, sector);
#line 624
    mdev->bm_resync_fo = sector >> 3;
#line 625
    goto requeue;
    }
  } else {
#line 629
    inc_rs_pending(mdev);
#line 630
    tmp___12 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 630
    if (tmp___12 == 0) {
#line 632
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 633
      atomic_dec(& mdev->rs_pending_cnt);
#line 633
      tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 633
      if (tmp___11 < 0) {
#line 633
        tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 633
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 633, tmp___10);
      } else {

      }
#line 634
      put_ldev(mdev);
#line 635
      return (0);
    } else {

    }
  }
#line 538
  i = i + 1;
  ldv_44607: ;
#line 538
  if (i < number) {
#line 539
    goto ldv_44606;
  } else {

  }
#line 640
  tmp___13 = drbd_bm_bits(mdev);
#line 640
  if (mdev->bm_resync_fo >= tmp___13) {
#line 647
    mdev->resync_work.cb = & w_resync_inactive;
#line 648
    put_ldev(mdev);
#line 649
    return (1);
  } else {

  }
  requeue: 
#line 653
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 654
  put_ldev(mdev);
#line 655
  return (1);
}
}
#line 658 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 662
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 662
  capacity = tmp;
#line 664
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 664
  if (tmp___0 != 0L) {
#line 665
    return (1);
  } else {

  }
#line 667
  tmp___1 = __builtin_expect((int )mdev->state.ldv_35202.conn <= 9, 0L);
#line 667
  if (tmp___1 != 0L) {
#line 668
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Confused in w_make_ov_request()! cstate < Connected");
#line 669
    return (0);
  } else {

  }
#line 672
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 673
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 673
  if (tmp___2 > number) {
#line 674
    goto requeue;
  } else {

  }
#line 676
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 676
  number = number - tmp___3;
#line 678
  sector = mdev->ov_position;
#line 679
  i = 0;
#line 679
  goto ldv_44625;
  ldv_44624: ;
#line 680
  if (sector >= capacity) {
#line 681
    mdev->resync_work.cb = & w_resync_inactive;
#line 682
    return (1);
  } else {

  }
#line 685
  size = 4096;
#line 687
  tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 687
  if (tmp___4 != 0) {
#line 688
    mdev->ov_position = sector;
#line 689
    goto requeue;
  } else {

  }
#line 692
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 693
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 695
  inc_rs_pending(mdev);
#line 696
  tmp___7 = drbd_send_ov_request(mdev, sector, size);
#line 696
  if (tmp___7 == 0) {
#line 697
    atomic_dec(& mdev->rs_pending_cnt);
#line 697
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 697
    if (tmp___6 < 0) {
#line 697
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 697
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 697, tmp___5);
    } else {

    }
#line 698
    return (0);
  } else {

  }
#line 700
  sector = sector + 8UL;
#line 679
  i = i + 1;
  ldv_44625: ;
#line 679
  if (i < number) {
#line 680
    goto ldv_44624;
  } else {

  }
#line 702
  mdev->ov_position = sector;
  requeue: 
#line 705
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 706
  return (1);
}
}
#line 710 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 712
  kfree((void const   *)w);
#line 713
  ov_oos_print(mdev);
#line 714
  drbd_resync_finished(mdev);
#line 716
  return (1);
}
}
#line 719 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 721
  kfree((void const   *)w);
#line 723
  drbd_resync_finished(mdev);
#line 725
  return (1);
}
}
#line 728 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;
  int tmp___3 ;

  {
#line 734
  khelper_cmd = 0;
#line 739
  tmp___1 = drbd_rs_del_all(mdev);
#line 739
  if (tmp___1 != 0) {
#line 745
    drbd_kick_lo(mdev);
#line 746
    tmp = get_current();
#line 746
    tmp->state = 1L;
#line 747
    schedule_timeout(25L);
#line 748
    tmp___0 = kmalloc___0(24UL, 32U);
#line 748
    w = (struct drbd_work *)tmp___0;
#line 749
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 750
      w->cb = & w_resync_finished;
#line 751
      drbd_queue_work(& mdev->data.work, w);
#line 752
      return (1);
    } else {

    }
#line 754
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 757
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 758
  if (dt == 0UL) {
#line 759
    dt = 1UL;
  } else {

  }
#line 760
  db = mdev->rs_total;
#line 761
  dbdt = db / dt << 2;
#line 762
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 764
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 764
  if (tmp___2 == 0) {
#line 765
    goto out;
  } else {

  }
#line 767
  spin_lock_irq(& mdev->req_lock);
#line 768
  os = mdev->state;
#line 772
  if ((int )os.ldv_35202.conn <= 10) {
#line 773
    goto out_unlock;
  } else {

  }
#line 775
  ns = os;
#line 776
  ns.ldv_35202.conn = 10U;
#line 778
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? (char *)"Online verify " : (char *)"Resync",
            mdev->rs_paused + dt, mdev->rs_paused, dbdt);
#line 783
  n_oos = drbd_bm_total_weight(mdev);
#line 785
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 786
    if (n_oos != 0UL) {
#line 787
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 789
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 792
      if (mdev->rs_failed != n_oos) {
#line 792
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                792);
      } else {

      }
#line 794
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 795
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 797
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 798
        s = mdev->rs_same_csum;
#line 799
        t = mdev->rs_total;
#line 800
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 803
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal check sums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 812
  if (mdev->rs_failed != 0UL) {
#line 813
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 815
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 816
      ns.ldv_35202.disk = 4U;
#line 817
      ns.ldv_35202.pdsk = 8U;
    } else {
#line 819
      ns.ldv_35202.disk = 8U;
#line 820
      ns.ldv_35202.pdsk = 4U;
    }
  } else {
#line 823
    ns.ldv_35202.disk = 8U;
#line 824
    ns.ldv_35202.pdsk = 8U;
#line 826
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 827
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 829
        i = 1;
#line 829
        goto ldv_44655;
        ldv_44654: 
#line 830
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 829
        i = i + 1;
        ldv_44655: ;
#line 829
        if (i <= 3) {
#line 830
          goto ldv_44654;
        } else {

        }
#line 831
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 832
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 834
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 838
    drbd_uuid_set_bm(mdev, 0ULL);
#line 840
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 844
      i___0 = 0;
#line 844
      goto ldv_44659;
      ldv_44658: 
#line 845
      *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 844
      i___0 = i___0 + 1;
      ldv_44659: ;
#line 844
      if (i___0 <= 3) {
#line 845
        goto ldv_44658;
      } else {

      }

    } else {

    }
  }
#line 849
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 851
  spin_unlock_irq(& mdev->req_lock);
#line 852
  put_ldev(mdev);
  out: 
#line 854
  mdev->rs_total = 0UL;
#line 855
  mdev->rs_failed = 0UL;
#line 856
  mdev->rs_paused = 0UL;
#line 857
  mdev->ov_start_sector = 0UL;
#line 859
  tmp___3 = test_and_clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 859
  if (tmp___3 != 0) {
#line 860
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, due to failed kmalloc\n");
#line 861
    drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished");
  } else {

  }
#line 864
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 865
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 867
  return (1);
}
}
#line 871 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int tmp ;

  {
#line 873
  tmp = drbd_ee_has_active_page(e);
#line 873
  if (tmp != 0) {
#line 875
    spin_lock_irq(& mdev->req_lock);
#line 876
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 877
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 879
    drbd_free_ee(mdev, e);
  }
#line 880
  return;
}
}
#line 888 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 890
  __mptr = (struct drbd_work  const  *)w;
#line 890
  e = (struct drbd_epoch_entry *)__mptr;
#line 893
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 893
  if (tmp___1 != 0L) {
#line 894
    drbd_free_ee(mdev, e);
#line 895
    atomic_dec(& mdev->unacked_cnt);
#line 895
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 895
    if (tmp___0 < 0) {
#line 895
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 895
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 895, tmp);
    } else {

    }
#line 896
    return (1);
  } else {

  }
#line 899
  tmp___3 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 899
  if (tmp___3 != 0L) {
#line 900
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 902
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 902
    if (tmp___2 != 0) {
#line 903
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 906
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 909
  atomic_dec(& mdev->unacked_cnt);
#line 909
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 909
  if (tmp___5 < 0) {
#line 909
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 909
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 909, tmp___4);
  } else {

  }
#line 911
  move_to_net_ee_or_free(mdev, e);
#line 913
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 913
  if (tmp___6 != 0L) {
#line 914
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 915
  return (ok);
}
}
#line 924 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 926
  __mptr = (struct drbd_work  const  *)w;
#line 926
  e = (struct drbd_epoch_entry *)__mptr;
#line 929
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 929
  if (tmp___1 != 0L) {
#line 930
    drbd_free_ee(mdev, e);
#line 931
    atomic_dec(& mdev->unacked_cnt);
#line 931
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 931
    if (tmp___0 < 0) {
#line 931
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 931
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 931, tmp);
    } else {

    }
#line 932
    return (1);
  } else {

  }
#line 935
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 935
  if (tmp___2 != 0) {
#line 936
    drbd_rs_complete_io(mdev, e->sector);
#line 937
    put_ldev(mdev);
  } else {

  }
#line 940
  tmp___6 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 940
  if (tmp___6 != 0L) {
#line 941
    tmp___4 = __builtin_expect((int )mdev->state.ldv_35202.pdsk > 3, 1L);
#line 941
    if (tmp___4 != 0L) {
#line 942
      inc_rs_pending(mdev);
#line 943
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    } else {
#line 945
      tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 945
      if (tmp___3 != 0) {
#line 946
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
      } else {

      }
#line 948
      ok = 1;
    }
  } else {
#line 951
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 951
    if (tmp___5 != 0) {
#line 952
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 955
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 958
    drbd_rs_failed_io(mdev, e->sector, (int )e->size);
  }
#line 961
  atomic_dec(& mdev->unacked_cnt);
#line 961
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 961
  if (tmp___8 < 0) {
#line 961
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 961
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 961, tmp___7);
  } else {

  }
#line 963
  move_to_net_ee_or_free(mdev, e);
#line 965
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 965
  if (tmp___9 != 0L) {
#line 966
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 967
  return (ok);
}
}
#line 970 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;

  {
#line 972
  __mptr = (struct drbd_work  const  *)w;
#line 972
  e = (struct drbd_epoch_entry *)__mptr;
#line 975
  digest = 0;
#line 976
  eq = 0;
#line 978
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 978
  if (tmp___1 != 0L) {
#line 979
    drbd_free_ee(mdev, e);
#line 980
    atomic_dec(& mdev->unacked_cnt);
#line 980
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 980
    if (tmp___0 < 0) {
#line 980
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 980
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 980, tmp);
    } else {

    }
#line 981
    return (1);
  } else {

  }
#line 984
  drbd_rs_complete_io(mdev, e->sector);
#line 986
  di = (struct digest_info *)e->block_id;
#line 988
  tmp___5 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 988
  if (tmp___5 != 0L) {
#line 992
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 993
      tmp___2 = crypto_hash_digestsize(mdev->csums_tfm);
#line 993
      digest_size = (int )tmp___2;
#line 994
      if (di->digest_size != digest_size) {
#line 994
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                994);
      } else {

      }
#line 995
      digest = kmalloc___0((size_t )digest_size, 16U);
    } else {

    }
#line 997
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 998
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 999
      tmp___3 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 999
      eq = tmp___3 == 0;
#line 1000
      kfree((void const   *)digest);
    } else {

    }
#line 1003
    if (eq != 0) {
#line 1004
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1004U);
#line 1006
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1007
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1009
      inc_rs_pending(mdev);
#line 1010
      e->block_id = 0xffffffffffffffffULL;
#line 1011
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1014
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1015
    tmp___4 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1015
    if (tmp___4 != 0) {
#line 1016
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1019
  atomic_dec(& mdev->unacked_cnt);
#line 1019
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1019
  if (tmp___7 < 0) {
#line 1019
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1019
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1019, tmp___6);
  } else {

  }
#line 1021
  kfree((void const   *)di);
#line 1023
  move_to_net_ee_or_free(mdev, e);
#line 1025
  tmp___8 = __builtin_expect(ok == 0, 0L);
#line 1025
  if (tmp___8 != 0L) {
#line 1026
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1027
  return (ok);
}
}
#line 1030 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1032
  __mptr = (struct drbd_work  const  *)w;
#line 1032
  e = (struct drbd_epoch_entry *)__mptr;
#line 1035
  ok = 1;
#line 1037
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1037
  if (tmp != 0L) {
#line 1038
    goto out;
  } else {

  }
#line 1040
  tmp___0 = __builtin_expect((e->flags & 16UL) != 0UL, 0L);
#line 1040
  if (tmp___0 != 0L) {
#line 1041
    goto out;
  } else {

  }
#line 1043
  tmp___1 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1043
  digest_size = (int )tmp___1;
#line 1045
  digest = kmalloc___0((size_t )digest_size, 16U);
#line 1046
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1047
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1048
    inc_rs_pending(mdev);
#line 1049
    ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                 P_OV_REPLY);
#line 1051
    if (ok == 0) {
#line 1052
      atomic_dec(& mdev->rs_pending_cnt);
#line 1052
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1052
      if (tmp___3 < 0) {
#line 1052
        tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1052
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_e_end_ov_req", 1052, tmp___2);
      } else {

      }
    } else {

    }
#line 1053
    kfree((void const   *)digest);
  } else {

  }
  out: 
#line 1057
  drbd_free_ee(mdev, e);
#line 1059
  atomic_dec(& mdev->unacked_cnt);
#line 1059
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1059
  if (tmp___5 < 0) {
#line 1059
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1059
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1059, tmp___4);
  } else {

  }
#line 1061
  return (ok);
}
}
#line 1064 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1066
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1067
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1069
    mdev->ov_last_oos_start = sector;
#line 1070
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1072
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1072U);
#line 1073
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 1074
  return;
}
}
#line 1076 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1078
  __mptr = (struct drbd_work  const  *)w;
#line 1078
  e = (struct drbd_epoch_entry *)__mptr;
#line 1082
  eq = 0;
#line 1084
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1084
  if (tmp___1 != 0L) {
#line 1085
    drbd_free_ee(mdev, e);
#line 1086
    atomic_dec(& mdev->unacked_cnt);
#line 1086
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1086
    if (tmp___0 < 0) {
#line 1086
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1086
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1086, tmp);
    } else {

    }
#line 1087
    return (1);
  } else {

  }
#line 1092
  drbd_rs_complete_io(mdev, e->sector);
#line 1094
  di = (struct digest_info *)e->block_id;
#line 1096
  tmp___5 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1096
  if (tmp___5 != 0L) {
#line 1097
    tmp___2 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1097
    digest_size = (int )tmp___2;
#line 1098
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 1099
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1100
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1102
      if (di->digest_size != digest_size) {
#line 1102
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1102);
      } else {

      }
#line 1103
      tmp___3 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1103
      eq = tmp___3 == 0;
#line 1104
      kfree((void const   *)digest);
    } else {

    }
  } else {
#line 1107
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1108
    tmp___4 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_ov_reply");
#line 1108
    if (tmp___4 != 0) {
#line 1109
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1112
  atomic_dec(& mdev->unacked_cnt);
#line 1112
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1112
  if (tmp___7 < 0) {
#line 1112
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1112
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1112, tmp___6);
  } else {

  }
#line 1114
  kfree((void const   *)di);
#line 1116
  if (eq == 0) {
#line 1117
    drbd_ov_oos_found(mdev, e->sector, (int )e->size);
  } else {
#line 1119
    ov_oos_print(mdev);
  }
#line 1121
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, e->sector, (int )e->size, eq != 0 ? 4711ULL : 4712ULL);
#line 1124
  drbd_free_ee(mdev, e);
#line 1126
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1126
  if (mdev->ov_left == 0UL) {
#line 1127
    ov_oos_print(mdev);
#line 1128
    drbd_resync_finished(mdev);
  } else {

  }
#line 1131
  return (ok);
}
}
#line 1134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1136
  __mptr = (struct drbd_work  const  *)w;
#line 1136
  b = (struct drbd_wq_barrier *)__mptr;
#line 1137
  complete(& b->done);
#line 1138
  return (1);
}
}
#line 1141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1143
  __mptr = (struct drbd_work  const  *)w;
#line 1143
  b = (struct drbd_tl_epoch *)__mptr;
#line 1144
  p = & mdev->data.sbuf.barrier;
#line 1145
  ok = 1;
#line 1152
  spin_lock_irq(& mdev->req_lock);
#line 1153
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_35202.conn <= 9) {
#line 1154
    cancel = 1;
  } else {

  }
#line 1155
  spin_unlock_irq(& mdev->req_lock);
#line 1156
  if (cancel != 0) {
#line 1157
    return (1);
  } else {

  }
#line 1159
  tmp = drbd_get_data_sock(mdev);
#line 1159
  if (tmp == 0) {
#line 1160
    return (0);
  } else {

  }
#line 1161
  p->barrier = b->br_number;
#line 1165
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header *)p, 16UL,
                      0U);
#line 1167
  drbd_put_data_sock(mdev);
#line 1169
  return (ok);
}
}
#line 1172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1174
  if (cancel != 0) {
#line 1175
    return (1);
  } else {

  }
#line 1176
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1176
  return (tmp);
}
}
#line 1185 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1187
  __mptr = (struct drbd_work  const  *)w;
#line 1187
  req = (struct drbd_request *)__mptr;
#line 1190
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1190
  if (tmp != 0L) {
#line 1191
    req_mod(req, send_canceled);
#line 1192
    return (1);
  } else {

  }
#line 1195
  ok = drbd_send_dblock(mdev, req);
#line 1196
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1198
  return (ok);
}
}
#line 1207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1209
  __mptr = (struct drbd_work  const  *)w;
#line 1209
  req = (struct drbd_request *)__mptr;
#line 1212
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1212
  if (tmp != 0L) {
#line 1213
    req_mod(req, send_canceled);
#line 1214
    return (1);
  } else {

  }
#line 1217
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1220
  if (ok == 0) {
#line 1223
    if ((int )mdev->state.ldv_35202.conn > 9) {
#line 1224
      val.i = 0U;
#line 1224
      val.ldv_35202.conn = 5U;
#line 1224
      mask.i = 0U;
#line 1224
      mask.ldv_35202.conn = 31U;
#line 1224
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1226
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1228
  return (ok);
}
}
#line 1231 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1233
  odev = mdev;
  ldv_44813: ;
#line 1236
  if (odev->sync_conf.after == -1) {
#line 1237
    return (1);
  } else {

  }
#line 1238
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1239
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1239
  if (_b != 0) {
#line 1239
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1239);
  } else {

  }
#line 1239
  if (_b != 0) {
#line 1239
    return (1);
  } else {

  }
#line 1240
  if (((((int )odev->state.ldv_35202.conn > 15 && (int )odev->state.ldv_35202.conn <= 21) || (unsigned int )*((unsigned char *)odev + 1822UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1822UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1822UL) != 0U) {
#line 1244
    return (0);
  } else {

  }
#line 1245
  goto ldv_44813;
}
}
#line 1254 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1257
  rv = 0;
#line 1259
  i = 0;
#line 1259
  goto ldv_44824;
  ldv_44823: 
#line 1260
  odev = minor_to_mdev((unsigned int )i);
#line 1261
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1262
    goto ldv_44820;
  } else {

  }
#line 1263
  if ((unsigned int )*((unsigned short *)odev + 910UL) == 0U && (unsigned int )*((unsigned char *)odev + 1821UL) == 0U) {
#line 1264
    goto ldv_44820;
  } else {

  }
#line 1265
  tmp___0 = _drbd_may_sync_now(odev);
#line 1265
  if (tmp___0 == 0) {
#line 1266
    __ns.i = odev->state.i;
#line 1266
    __ns.ldv_35202.aftr_isp = 1U;
#line 1266
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1266
    rv = (tmp != 2) | rv;
  } else {

  }
  ldv_44820: 
#line 1259
  i = i + 1;
  ldv_44824: ;
#line 1259
  if ((unsigned int )i < minor_count) {
#line 1260
    goto ldv_44823;
  } else {

  }

#line 1270
  return (rv);
}
}
#line 1279 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1282
  rv = 0;
#line 1284
  i = 0;
#line 1284
  goto ldv_44836;
  ldv_44835: 
#line 1285
  odev = minor_to_mdev((unsigned int )i);
#line 1286
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1287
    goto ldv_44832;
  } else {

  }
#line 1288
  if ((unsigned int )*((unsigned short *)odev + 910UL) == 0U && (unsigned int )*((unsigned char *)odev + 1821UL) == 0U) {
#line 1289
    goto ldv_44832;
  } else {

  }
#line 1290
  if ((unsigned int )*((unsigned char *)odev + 1822UL) != 0U) {
#line 1291
    tmp___0 = _drbd_may_sync_now(odev);
#line 1291
    if (tmp___0 != 0) {
#line 1292
      __ns.i = odev->state.i;
#line 1292
      __ns.ldv_35202.aftr_isp = 0U;
#line 1292
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1292
      rv = (tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_44832: 
#line 1284
  i = i + 1;
  ldv_44836: ;
#line 1284
  if ((unsigned int )i < minor_count) {
#line 1285
    goto ldv_44835;
  } else {

  }

#line 1297
  return (rv);
}
}
#line 1300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1302
  _raw_write_lock_irq(& global_state_lock);
#line 1303
  _drbd_resume_next(mdev);
#line 1304
  _raw_write_unlock_irq(& global_state_lock);
#line 1305
  return;
}
}
#line 1307 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1309
  _raw_write_lock_irq(& global_state_lock);
#line 1310
  _drbd_pause_after(mdev);
#line 1311
  _raw_write_unlock_irq(& global_state_lock);
#line 1312
  return;
}
}
#line 1314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1318
  if (o_minor == -1) {
#line 1319
    return (101);
  } else {

  }
#line 1320
  if (o_minor < -1) {
#line 1321
    return (132);
  } else {
#line 1320
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1320
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1321
      return (132);
    } else {

    }
  }
#line 1324
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_44849: ;
#line 1326
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1327
    return (133);
  } else {

  }
#line 1330
  if (odev->sync_conf.after == -1) {
#line 1331
    return (101);
  } else {

  }
#line 1334
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1335
  goto ldv_44849;
}
}
#line 1338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1343
  _raw_write_lock_irq(& global_state_lock);
#line 1344
  retcode = sync_after_error(mdev, na);
#line 1345
  if (retcode == 101) {
#line 1346
    mdev->sync_conf.after = na;
    ldv_44856: 
#line 1348
    changes = _drbd_pause_after(mdev);
#line 1349
    tmp = _drbd_resume_next(mdev);
#line 1349
    changes = tmp | changes;
#line 1350
    if (changes != 0) {
#line 1351
      goto ldv_44856;
    } else {

    }

  } else {

  }
#line 1352
  _raw_write_unlock_irq(& global_state_lock);
#line 1353
  return (retcode);
}
}
#line 1356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1358
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 1359
  request_ping(mdev);
#line 1360
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1360
  if (tmp != 0 || (int )mdev->state.ldv_35202.conn <= 9) {
#line 1360
    goto ldv_44861;
  } else {

  }
#line 1360
  tmp___0 = get_current();
#line 1360
  __wait.flags = 0U;
#line 1360
  __wait.private = (void *)tmp___0;
#line 1360
  __wait.func = & autoremove_wake_function;
#line 1360
  __wait.task_list.next = & __wait.task_list;
#line 1360
  __wait.task_list.prev = & __wait.task_list;
  ldv_44864: 
#line 1360
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1360
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1360
  if (tmp___1 != 0 || (int )mdev->state.ldv_35202.conn <= 9) {
#line 1360
    goto ldv_44863;
  } else {

  }
#line 1360
  schedule();
#line 1360
  goto ldv_44864;
  ldv_44863: 
#line 1360
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44861: ;
#line 1363
  return;
}
}
#line 1372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  u64 uuid ;
  int tmp___0 ;
  unsigned long tmp___1 ;
  unsigned long tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1377
  if ((int )mdev->state.ldv_35202.conn > 15) {
#line 1378
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1379
    return;
  } else {

  }
#line 1383
  drbd_rs_cancel_all(mdev);
#line 1385
  if ((unsigned int )side == 17U) {
#line 1389
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1390
    r = (r >> 8) & 255;
#line 1391
    if (r > 0) {
#line 1392
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1394
      val.i = 0U;
#line 1394
      val.ldv_35202.conn = 1U;
#line 1394
      mask.i = 0U;
#line 1394
      mask.ldv_35202.conn = 31U;
#line 1394
      drbd_force_state(mdev, mask, val);
#line 1395
      return;
    } else {

    }
  } else {

  }
#line 1399
  drbd_state_lock(mdev);
#line 1401
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1401
  if (tmp == 0) {
#line 1402
    drbd_state_unlock(mdev);
#line 1403
    return;
  } else {

  }
#line 1406
  if ((unsigned int )side == 17U) {
#line 1407
    mdev->bm_resync_fo = 0UL;
  } else {
#line 1411
    get_random_bytes((void *)(& uuid), 8);
#line 1412
    drbd_uuid_set(mdev, 1, uuid);
#line 1413
    drbd_send_sync_uuid(mdev, uuid);
#line 1415
    if ((unsigned int )*((unsigned char *)mdev + 1821UL) != 16U) {
#line 1415
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1415);
    } else {

    }
  }
#line 1418
  _raw_write_lock_irq(& global_state_lock);
#line 1419
  ns = mdev->state;
#line 1421
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1421
  ns.ldv_35202.aftr_isp = tmp___0 == 0;
#line 1423
  ns.ldv_35202.conn = (unsigned char )side;
#line 1425
  if ((unsigned int )side == 17U) {
#line 1426
    ns.ldv_35202.disk = 4U;
  } else {
#line 1428
    ns.ldv_35202.pdsk = 4U;
  }
#line 1430
  r = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1431
  ns = mdev->state;
#line 1433
  if ((int )ns.ldv_35202.conn <= 9) {
#line 1434
    r = 0;
  } else {

  }
#line 1436
  if (r == 1) {
#line 1437
    tmp___1 = drbd_bm_total_weight(mdev);
#line 1437
    mdev->rs_mark_left = tmp___1;
#line 1437
    mdev->rs_total = tmp___1;
#line 1439
    mdev->rs_failed = 0UL;
#line 1440
    mdev->rs_paused = 0UL;
#line 1441
    tmp___2 = jiffies;
#line 1441
    mdev->rs_mark_time = tmp___2;
#line 1441
    mdev->rs_start = tmp___2;
#line 1443
    mdev->rs_same_csum = 0UL;
#line 1444
    _drbd_pause_after(mdev);
  } else {

  }
#line 1446
  _raw_write_unlock_irq(& global_state_lock);
#line 1447
  put_ldev(mdev);
#line 1449
  if (r == 1) {
#line 1450
    tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_35202.conn);
#line 1450
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___3, mdev->rs_total << 2, mdev->rs_total);
#line 1455
    if (mdev->rs_total == 0UL) {
#line 1457
      ping_peer(mdev);
#line 1458
      drbd_resync_finished(mdev);
    } else {

    }
#line 1465
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1466
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1468
    drbd_md_sync(mdev);
  } else {

  }
#line 1470
  drbd_state_unlock(mdev);
#line 1471
  return;
}
}
#line 1473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1475
  mdev = thi->mdev;
#line 1476
  w = 0;
#line 1477
  work_list.next = & work_list;
#line 1477
  work_list.prev = & work_list;
#line 1478
  intr = 0;
#line 1480
  tmp = mdev_to_minor(mdev);
#line 1480
  tmp___0 = get_current();
#line 1480
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1482
  goto ldv_44887;
  ldv_44897: 
#line 1483
  drbd_thread_current_set_cpu(mdev);
#line 1485
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1485
  if (tmp___1 != 0) {
#line 1486
    ldv_mutex_lock_45(& mdev->data.mutex);
#line 1487
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1488
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1489
    ldv_mutex_unlock_46(& mdev->data.mutex);
#line 1491
    intr = down_interruptible(& mdev->data.work.s);
#line 1493
    ldv_mutex_lock_47(& mdev->data.mutex);
#line 1494
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1495
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1496
    ldv_mutex_unlock_48(& mdev->data.mutex);
  } else {

  }
#line 1499
  if (intr != 0) {
#line 1500
    if (intr != -4) {
#line 1500
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1500);
    } else {

    }
#line 1501
    tmp___2 = get_current();
#line 1501
    flush_signals(tmp___2);
#line 1502
    tmp___3 = get_t_state(thi);
#line 1502
    _b = (unsigned int )tmp___3 == 1U;
#line 1502
    if (_b != 0) {
#line 1502
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1502);
    } else {

    }
#line 1502
    if (_b != 0) {
#line 1503
      goto ldv_44887;
    } else {

    }
#line 1504
    goto ldv_44888;
  } else {

  }
#line 1507
  tmp___4 = get_t_state(thi);
#line 1507
  if ((unsigned int )tmp___4 != 1U) {
#line 1508
    goto ldv_44888;
  } else {

  }
#line 1513
  w = 0;
#line 1514
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1515
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1515
  _b___0 = tmp___5 != 0;
#line 1515
  if (_b___0 != 0) {
#line 1515
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1515);
  } else {

  }
#line 1515
  if (_b___0 != 0) {
#line 1527
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1528
    goto ldv_44887;
  } else {

  }
#line 1530
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1530
  w = (struct drbd_work *)__mptr;
#line 1531
  list_del_init(& w->list);
#line 1532
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1534
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_35202.conn <= 9);
#line 1534
  if (tmp___6 == 0) {
#line 1536
    if ((int )mdev->state.ldv_35202.conn > 9) {
#line 1538
      val.i = 0U;
#line 1538
      val.ldv_35202.conn = 5U;
#line 1538
      mask.i = 0U;
#line 1538
      mask.ldv_35202.conn = 31U;
#line 1538
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_44887: 
#line 1482
  tmp___7 = get_t_state(thi);
#line 1482
  if ((unsigned int )tmp___7 == 1U) {
#line 1483
    goto ldv_44897;
  } else {

  }
  ldv_44888: 
#line 1541
  tmp___8 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1541
  if (tmp___8 == 0) {
#line 1541
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1541);
  } else {

  }
#line 1542
  tmp___9 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1542
  if (tmp___9 == 0) {
#line 1542
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1542);
  } else {

  }
#line 1544
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1545
  i = 0;
#line 1546
  goto ldv_44904;
  ldv_44903: 
#line 1547
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1548
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1550
  goto ldv_44901;
  ldv_44900: 
#line 1551
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1551
  w = (struct drbd_work *)__mptr___0;
#line 1552
  list_del_init(& w->list);
#line 1553
  (*(w->cb))(mdev, w, 1);
#line 1554
  i = i + 1;
  ldv_44901: 
#line 1550
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1550
  if (tmp___10 == 0) {
#line 1551
    goto ldv_44900;
  } else {

  }
#line 1557
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_44904: 
#line 1546
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1546
  if (tmp___11 == 0) {
#line 1547
    goto ldv_44903;
  } else {

  }
#line 1559
  sema_init(& mdev->data.work.s, 0);
#line 1565
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1567
  if ((unsigned int )*((unsigned char *)mdev + 1821UL) != 0U || (unsigned int )*((unsigned short *)mdev + 910UL) != 0U) {
#line 1567
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1567);
  } else {

  }
#line 1570
  drbd_thread_stop(& mdev->receiver);
#line 1571
  drbd_mdev_cleanup(mdev);
#line 1573
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1575
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1576
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1577
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1579
  return (0);
}
}
#line 1582 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_35(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1587
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1589
  mutex_lock(ldv_func_arg1);
#line 1590
  return;
}
}
#line 1592 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int ldv_mutex_trylock_36(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1597
  tmp = mutex_trylock(ldv_func_arg1);
#line 1597
  ldv_func_res = tmp;
#line 1599
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1599
  return (tmp___0);
#line 1601
  return (ldv_func_res);
}
}
#line 1604 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_37(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1609
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1611
  mutex_unlock(ldv_func_arg1);
#line 1612
  return;
}
}
#line 1614 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_38(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1619
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1621
  mutex_lock(ldv_func_arg1);
#line 1622
  return;
}
}
#line 1624 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_39(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1629
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1631
  mutex_unlock(ldv_func_arg1);
#line 1632
  return;
}
}
#line 1634 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1639
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1641
  mutex_unlock(ldv_func_arg1);
#line 1642
  return;
}
}
#line 1644 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_41(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1649
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1651
  mutex_lock(ldv_func_arg1);
#line 1652
  return;
}
}
#line 1654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_42(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1659
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1661
  mutex_unlock(ldv_func_arg1);
#line 1662
  return;
}
}
#line 1664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_43(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1669
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1671
  mutex_lock(ldv_func_arg1);
#line 1672
  return;
}
}
#line 1674 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_44(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1679
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1681
  mutex_unlock(ldv_func_arg1);
#line 1682
  return;
}
}
#line 1684 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_45(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1689
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1691
  mutex_lock(ldv_func_arg1);
#line 1692
  return;
}
}
#line 1694 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1699
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1701
  mutex_unlock(ldv_func_arg1);
#line 1702
  return;
}
}
#line 1704 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1709
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1711
  mutex_lock(ldv_func_arg1);
#line 1712
  return;
}
}
#line 1714 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1719
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1721
  mutex_unlock(ldv_func_arg1);
#line 1722
  return;
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 371 "include/linux/kernel.h"
extern void dump_stack(void) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 148 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 150
  __list_del(list->prev, list->next);
#line 151
  list_add(list, head);
#line 152
  return;
}
}
#line 569 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 571
  h->next = 0;
#line 572
  h->pprev = 0;
#line 573
  return;
}
}
#line 575 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 577
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 580 "include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 582
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
#line 585 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 587
  next = n->next;
#line 588
  pprev = n->pprev;
#line 589
  *pprev = next;
#line 590
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 591
    next->pprev = pprev;
  } else {

  }
#line 592
  return;
}
}
#line 601 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 603
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 603
  if (tmp == 0) {
#line 604
    __hlist_del(n);
#line 605
    INIT_HLIST_NODE(n);
  } else {

  }
#line 607
  return;
}
}
#line 609 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 611
  first = h->first;
#line 612
  n->next = first;
#line 613
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 614
    first->pprev = & n->next;
  } else {

  }
#line 615
  h->first = n;
#line 616
  n->pprev = & h->first;
#line 617
  return;
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_64(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_67(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
extern int mutex_lock_interruptible(struct mutex * ) ;
#line 8
int ldv_mutex_lock_interruptible_69(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_66(struct mutex *ldv_func_arg1 ) ;
#line 52
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5911;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5911;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5911;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5911;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5911: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 85 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 87
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 87
  return (tmp);
}
}
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 282 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 284
  _raw_spin_lock(& lock->ldv_5628.rlock);
#line 285
  return;
}
}
#line 322 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 324
  _raw_spin_unlock(& lock->ldv_5628.rlock);
#line 325
  return;
}
}
#line 253 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 329 "include/linux/gfp.h"
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 78 "include/linux/random.h"
extern u32 random32(void) ;
#line 234 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 236
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 238
extern void sock_release(struct socket * ) ;
#line 241
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___1(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13911: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_13911;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___1(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___1(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___1(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 341 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17844: ;
#line 63
    goto ldv_17844;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17845: ;
#line 65
    goto ldv_17845;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17846: ;
#line 66
    goto ldv_17846;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 2285 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2287
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2287
  return (tmp);
}
}
#line 2311 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2313
  tmp = test_tsk_thread_flag(p, 2);
#line 2313
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2313
  return ((int )tmp___0);
}
}
#line 283 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) ;
#line 480 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 483 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 485
  return;
}
}
#line 513 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 515
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1104 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1106
  return ((struct crypto_hash *)tfm);
}
}
#line 1116 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1119
  type = type & 4294967280U;
#line 1120
  mask = mask & 4294967280U;
#line 1121
  type = type | 8U;
#line 1122
  mask = mask | 14U;
#line 1124
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1124
  tmp___0 = __crypto_hash_cast(tmp);
#line 1124
  return (tmp___0);
}
}
#line 1132 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1134
  tmp = crypto_hash_tfm(tfm);
#line 1134
  crypto_free_tfm(tmp);
#line 1135
  return;
}
}
#line 1199 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1203
  return (tmp___0);
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(hash);
#line 1209
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1209
  return (tmp___0);
}
}
#line 375 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 377
  disk->part0.nr_sects = size;
#line 378
  return;
}
}
#line 59 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 61
  __might_sleep("include/linux/highmem.h", 61, 0);
#line 62
  tmp = lowmem_page_address(page);
#line 62
  return (tmp);
}
}
#line 65 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 67
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 34
extern void mempool_free(void * , mempool_t * ) ;
#line 687 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 228 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[41U] ;

  {
#line 233
  cmdnames[0] = "Data";
#line 233
  cmdnames[1] = "DataReply";
#line 233
  cmdnames[2] = "RSDataReply";
#line 233
  cmdnames[3] = "Barrier";
#line 233
  cmdnames[4] = "ReportBitMap";
#line 233
  cmdnames[5] = "BecomeSyncTarget";
#line 233
  cmdnames[6] = "BecomeSyncSource";
#line 233
  cmdnames[7] = "UnplugRemote";
#line 233
  cmdnames[8] = "DataRequest";
#line 233
  cmdnames[9] = "RSDataRequest";
#line 233
  cmdnames[10] = "SyncParam";
#line 233
  cmdnames[11] = "ReportProtocol";
#line 233
  cmdnames[12] = "ReportUUIDs";
#line 233
  cmdnames[13] = "ReportSizes";
#line 233
  cmdnames[14] = "ReportState";
#line 233
  cmdnames[15] = "ReportSyncUUID";
#line 233
  cmdnames[16] = "AuthChallenge";
#line 233
  cmdnames[17] = "AuthResponse";
#line 233
  cmdnames[18] = "StateChgRequest";
#line 233
  cmdnames[19] = "Ping";
#line 233
  cmdnames[20] = "PingAck";
#line 233
  cmdnames[21] = "RecvAck";
#line 233
  cmdnames[22] = "WriteAck";
#line 233
  cmdnames[23] = "RSWriteAck";
#line 233
  cmdnames[24] = "DiscardAck";
#line 233
  cmdnames[25] = "NegAck";
#line 233
  cmdnames[26] = "NegDReply";
#line 233
  cmdnames[27] = "NegRSDReply";
#line 233
  cmdnames[28] = "BarrierAck";
#line 233
  cmdnames[29] = "StateChgReply";
#line 233
  cmdnames[30] = "OVRequest";
#line 233
  cmdnames[31] = "OVReply";
#line 233
  cmdnames[32] = "OVResult";
#line 233
  cmdnames[33] = "CsumRSRequest";
#line 233
  cmdnames[34] = "CsumRSIsInSync";
#line 233
  cmdnames[35] = "SyncParam89";
#line 233
  cmdnames[36] = "CBitmap";
#line 233
  cmdnames[37] = 0;
#line 233
  cmdnames[38] = 0;
#line 233
  cmdnames[39] = "DelayProbe";
#line 233
  cmdnames[40] = 0;
#line 275
  if ((unsigned int )cmd == 65521U) {
#line 276
    return ("HandShakeM");
  } else {

  }
#line 277
  if ((unsigned int )cmd == 65522U) {
#line 278
    return ("HandShakeS");
  } else {

  }
#line 279
  if ((unsigned int )cmd == 65534U) {
#line 280
    return ("HandShake");
  } else {

  }
#line 281
  if ((unsigned int )cmd > 39U) {
#line 282
    return ("Unknown");
  } else {

  }
#line 283
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 304
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 307 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 317
  c->word_offset = c->bit_offset >> 6;
#line 318
  return;
}
}
#line 555 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 557
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 568 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 570
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 580 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 582
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1118
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) ;
#line 1122
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) ;
#line 1128
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1138
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1140
void tl_clear(struct drbd_conf *mdev ) ;
#line 1142
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1145
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1146
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1149
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1151
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1160
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1162
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1163
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1167
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1169
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) ;
#line 1186
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1188
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) ;
#line 1209
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1210
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1211
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) ;
#line 1392
mempool_t *drbd_ee_mempool ;
#line 1394
struct page *drbd_pp_pool ;
#line 1395
spinlock_t drbd_pp_lock ;
#line 1396
int drbd_pp_vacant ;
#line 1397
wait_queue_head_t drbd_pp_wait ;
#line 1417
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1419
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1420
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1421
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) ;
#line 1422
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) ;
#line 1424
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1476
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1483
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1485
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1489
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1519 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1521
  val = 1;
#line 1522
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1524
  return;
}
}
#line 1526 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1528
  val = 2;
#line 1529
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1531
  return;
}
}
#line 1542
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1545
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1571
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1655 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1657
  page = e->pages;
#line 1658
  goto ldv_44306;
  ldv_44305: 
#line 1659
  tmp = page_count(page);
#line 1659
  if (tmp > 1) {
#line 1660
    return (1);
  } else {

  }
#line 1658
  page = page_chain_next(page);
  ldv_44306: ;
#line 1658
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1658
    tmp___0 = page_chain_next(page);
#line 1658
    __builtin_prefetch((void const   *)tmp___0);
#line 1658
    if (1 != 0) {
#line 1659
      goto ldv_44305;
    } else {
#line 1661
      goto ldv_44307;
    }
  } else {

  }
  ldv_44307: ;
#line 1662
  return (0);
}
}
#line 1701 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  int tmp ;

  {
#line 1705
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1705
  return (tmp);
}
}
#line 1759 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1761
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1764
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1767
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1802 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1805
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1809
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1809
  if (tmp___1 != 0UL) {
#line 1809
    __min1 = 34359738368UL;
#line 1809
    tmp___0 = drbd_md_first_sector(bdev);
#line 1809
    __min2 = tmp___0;
#line 1809
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1809
    s = 0UL;
  }
#line 1812
  goto ldv_44378;
  case -2: 
#line 1814
  __min1___0 = 34359738368UL;
#line 1814
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1814
  __min2___0 = tmp___2;
#line 1814
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1817
  __min1___1 = s;
#line 1817
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1817
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1820
  goto ldv_44378;
  default: 
#line 1822
  __min1___2 = 8587575296UL;
#line 1822
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1822
  __min2___2 = tmp___3;
#line 1822
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_44378: ;
#line 1825
  return (s);
}
}
#line 1866 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1869
  tmp = spinlock_check(& q->q_lock);
#line 1869
  flags = _raw_spin_lock_irqsave(tmp);
#line 1870
  list_add(& w->list, & q->q);
#line 1871
  up(& q->s);
#line 1873
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1874
  return;
}
}
#line 1906 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1909
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 1909
  return (tmp);
}
}
#line 1912 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1915
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 1915
  return (tmp);
}
}
#line 1997 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 1999
  atomic_inc(& mdev->unacked_cnt);
#line 2000
  return;
}
}
#line 2013 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2015
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2015
  if (tmp != 0) {
#line 2016
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2017
  return;
}
}
#line 2025 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2029
  atomic_inc(& mdev->net_cnt);
#line 2030
  have_net_conf = (int )mdev->state.ldv_35202.conn > 1;
#line 2031
  if (have_net_conf == 0) {
#line 2032
    put_net_conf(mdev);
  } else {

  }
#line 2033
  return (have_net_conf);
}
}
#line 2254 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 2256
  mdev->ed_uuid = val;
#line 2257
  return;
}
}
#line 2259 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2266
  return ((int )a - (int )b);
}
}
#line 2275 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2278
  spin_lock(& mdev->peer_seq_lock);
#line 2279
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2279
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2280
  mdev->peer_seq = m;
#line 2281
  spin_unlock(& mdev->peer_seq_lock);
#line 2282
  if (m == new_seq) {
#line 2283
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2284
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 66 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 68
  tmp = crypto_tfm_alg_type(tfm);
#line 68
  return ((tmp & 14U) == 8U);
}
}
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 208
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 208
  if (tmp != 0L) {
#line 208
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (208), "i" (12UL));
    ldv_44640: ;
#line 208
    goto ldv_44640;
  } else {

  }
#line 209
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 217
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 217
  if (tmp != 0L) {
#line 217
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (217), "i" (12UL));
    ldv_44645: ;
#line 217
    goto ldv_44645;
  } else {

  }
#line 218
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 225
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 231 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 234
  tmp = ar_hash_slot(mdev, sector);
#line 234
  slot = tmp;
#line 238
  n = slot->first;
#line 238
  goto ldv_44663;
  ldv_44662: ;
#line 239
  if ((unsigned long )req == (unsigned long )id) {
#line 240
    if (req->sector != sector) {
#line 240
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              240);
    } else {

    }
#line 241
    return (req);
  } else {

  }
#line 238
  n = n->next;
  ldv_44663: ;
#line 238
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 238
    __builtin_prefetch((void const   *)n->next);
#line 238
    if (1 != 0) {
#line 238
      __mptr = (struct hlist_node  const  *)n;
#line 238
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 238
      if (1 != 0) {
#line 239
        goto ldv_44662;
      } else {
#line 241
        goto ldv_44664;
      }
    } else {
#line 241
      goto ldv_44664;
    }
  } else {

  }
  ldv_44664: ;
#line 244
  return (0);
}
}
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 282
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_44710: ;
#line 162
  goto ldv_44710;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 120
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 122
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 123
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch *previous_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  struct drbd_epoch *prev ;
  struct list_head  const  *__mptr ;

  {
#line 128
  spin_lock(& mdev->epoch_lock);
#line 129
  __mptr = (struct list_head  const  *)epoch->list.prev;
#line 129
  prev = (struct drbd_epoch *)__mptr;
#line 130
  if ((unsigned long )prev == (unsigned long )epoch || (unsigned long )mdev->current_epoch == (unsigned long )prev) {
#line 131
    prev = 0;
  } else {

  }
#line 132
  spin_unlock(& mdev->epoch_lock);
#line 133
  return (prev);
}
}
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 152
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 152
  if (tmp___0 != 0L) {
#line 152
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (152), "i" (12UL));
    ldv_44800: ;
#line 152
    goto ldv_44800;
  } else {

  }
#line 153
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 153
  if (tmp___1 != 0L) {
#line 153
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (153), "i" (12UL));
    ldv_44801: ;
#line 153
    goto ldv_44801;
  } else {

  }
#line 155
  page = *head;
#line 157
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 158
    return (0);
  } else {

  }
#line 160
  goto ldv_44804;
  ldv_44803: 
#line 161
  tmp = page_chain_next(page);
#line 162
  n = n - 1;
#line 162
  if (n == 0) {
#line 163
    goto ldv_44802;
  } else {

  }
#line 164
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 166
    return (0);
  } else {

  }
#line 167
  page = tmp;
  ldv_44804: ;
#line 160
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 161
    goto ldv_44803;
  } else {

  }
  ldv_44802: 
#line 171
  page->ldv_12434.ldv_12431.private = 0UL;
#line 173
  page = *head;
#line 174
  *head = tmp;
#line 175
  return (page);
}
}
#line 181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 184
  i = 1;
#line 185
  goto ldv_44812;
  ldv_44811: 
#line 186
  i = i + 1;
#line 186
  page = tmp;
  ldv_44812: 
#line 185
  tmp = page_chain_next(page);
#line 185
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 186
    goto ldv_44811;
  } else {

  }

#line 187
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 188
    *len = i;
  } else {

  }
#line 189
  return (page);
}
}
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 195
  i = 0;
#line 196
  goto ldv_44821;
  ldv_44820: 
#line 197
  put_page(page);
#line 198
  i = i + 1;
#line 196
  page = tmp;
  ldv_44821: ;
#line 196
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 196
    tmp = page_chain_next(page);
#line 196
    if (1 != 0) {
#line 197
      goto ldv_44820;
    } else {
#line 199
      goto ldv_44822;
    }
  } else {

  }
  ldv_44822: ;
#line 200
  return (i);
}
}
#line 203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 208
  tmp = page_chain_tail(chain_first, 0);
#line 209
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 209
  if (tmp___0 != 0L) {
#line 209
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (209), "i" (12UL));
    ldv_44829: ;
#line 209
    goto ldv_44829;
  } else {

  }
#line 213
  chain_last->ldv_12434.ldv_12431.private = (unsigned long )*head;
#line 214
  *head = chain_first;
#line 215
  return;
}
}
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 219
  page = 0;
#line 220
  tmp = 0;
#line 221
  i = 0;
#line 225
  if (drbd_pp_vacant >= number) {
#line 226
    spin_lock(& drbd_pp_lock);
#line 227
    page = page_chain_del(& drbd_pp_pool, number);
#line 228
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 229
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 230
    spin_unlock(& drbd_pp_lock);
#line 231
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 232
      return (page);
    } else {

    }
  } else {

  }
#line 238
  i = 0;
#line 238
  goto ldv_44839;
  ldv_44838: 
#line 239
  tmp = alloc_pages(514U, 0U);
#line 240
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 241
    goto ldv_44837;
  } else {

  }
#line 242
  tmp->ldv_12434.ldv_12431.private = (unsigned long )page;
#line 243
  page = tmp;
#line 238
  i = i + 1;
  ldv_44839: ;
#line 238
  if (i < number) {
#line 239
    goto ldv_44838;
  } else {

  }
  ldv_44837: ;
#line 246
  if (i == number) {
#line 247
    return (page);
  } else {

  }
#line 252
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 253
    tmp = page_chain_tail(page, 0);
#line 254
    spin_lock(& drbd_pp_lock);
#line 255
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 256
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 257
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 259
  return (0);
}
}
#line 265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void maybe_kick_lo(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 267
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 267
  if (tmp >= (mdev->net_conf)->unplug_watermark) {
#line 268
    drbd_kick_lo(mdev);
  } else {

  }
#line 269
  return;
}
}
#line 271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 281
  le = mdev->net_ee.next;
#line 281
  tle = le->next;
#line 281
  goto ldv_44854;
  ldv_44853: 
#line 282
  __mptr = (struct list_head  const  *)le;
#line 282
  e = (struct drbd_epoch_entry *)__mptr;
#line 283
  tmp = drbd_ee_has_active_page___0(e);
#line 283
  if (tmp != 0) {
#line 284
    goto ldv_44852;
  } else {

  }
#line 285
  list_move(le, to_be_freed);
#line 281
  le = tle;
#line 281
  tle = le->next;
  ldv_44854: ;
#line 281
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 282
    goto ldv_44853;
  } else {

  }
  ldv_44852: ;
#line 286
  return;
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 291
  reclaimed.next = & reclaimed;
#line 291
  reclaimed.prev = & reclaimed;
#line 294
  maybe_kick_lo(mdev);
#line 295
  spin_lock_irq(& mdev->req_lock);
#line 296
  reclaim_net_ee(mdev, & reclaimed);
#line 297
  spin_unlock_irq(& mdev->req_lock);
#line 299
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 299
  e = (struct drbd_epoch_entry *)__mptr;
#line 299
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 299
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 299
  goto ldv_44868;
  ldv_44867: 
#line 300
  drbd_free_ee(mdev, e);
#line 299
  e = t;
#line 299
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 299
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_44868: ;
#line 299
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 300
    goto ldv_44867;
  } else {

  }

#line 304
  return;
}
}
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 317
  page = 0;
#line 318
  tmp = get_current();
#line 318
  wait.flags = 0U;
#line 318
  wait.private = (void *)tmp;
#line 318
  wait.func = & autoremove_wake_function;
#line 318
  wait.task_list.next = & wait.task_list;
#line 318
  wait.task_list.prev = & wait.task_list;
#line 322
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 322
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 323
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 325
  goto ldv_44879;
  ldv_44878: 
#line 326
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 328
  drbd_kick_lo_and_reclaim_net(mdev);
#line 330
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 330
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 331
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 332
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 333
      goto ldv_44877;
    } else {

    }
  } else {

  }
#line 336
  if (! retry) {
#line 337
    goto ldv_44877;
  } else {

  }
#line 339
  tmp___2 = get_current();
#line 339
  tmp___3 = signal_pending(tmp___2);
#line 339
  if (tmp___3 != 0) {
#line 340
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 341
    goto ldv_44877;
  } else {

  }
#line 344
  schedule();
  ldv_44879: ;
#line 325
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 326
    goto ldv_44878;
  } else {

  }
  ldv_44877: 
#line 346
  finish_wait(& drbd_pp_wait, & wait);
#line 348
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 349
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 350
  return (page);
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page ) 
{ 
  int i ;
  struct page *tmp ;

  {
#line 360
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 8UL) {
#line 361
    i = page_chain_free(page);
  } else {
#line 364
    tmp = page_chain_tail(page, & i);
#line 365
    spin_lock(& drbd_pp_lock);
#line 366
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 367
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 368
    spin_unlock(& drbd_pp_lock);
  }
#line 370
  atomic_sub(i, & mdev->pp_in_use);
#line 371
  i = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 372
  if (i < 0) {
#line 373
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: pp_in_use: %d < 0\n",
             i);
  } else {

  }
#line 374
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 375
  return;
}
}
#line 392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 400
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 402
  tmp = drbd_insert_fault(mdev, 8U);
#line 402
  if (tmp != 0) {
#line 403
    return (0);
  } else {

  }
#line 405
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 405
  e = (struct drbd_epoch_entry *)tmp___0;
#line 406
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 407
    if ((gfp_mask & 512U) == 0U) {
#line 408
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 409
    return (0);
  } else {

  }
#line 412
  page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 413
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 414
    goto fail;
  } else {

  }
#line 416
  INIT_HLIST_NODE(& e->colision);
#line 417
  e->epoch = 0;
#line 418
  e->mdev = mdev;
#line 419
  e->pages = page;
#line 420
  atomic_set(& e->pending_bios, 0);
#line 421
  e->size = data_size;
#line 422
  e->flags = 0UL;
#line 423
  e->sector = sector;
#line 424
  e->sector = sector;
#line 425
  e->block_id = id;
#line 427
  return (e);
  fail: 
#line 430
  mempool_free((void *)e, drbd_ee_mempool);
#line 431
  return (0);
}
}
#line 434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 436
  drbd_pp_free(mdev, e->pages);
#line 437
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 437
  if (tmp != 0) {
#line 437
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            437);
  } else {

  }
#line 438
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 438
  if (tmp___0 == 0) {
#line 438
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            438);
  } else {

  }
#line 439
  mempool_free((void *)e, drbd_ee_mempool);
#line 440
  return;
}
}
#line 442 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 444
  work_list.next = & work_list;
#line 444
  work_list.prev = & work_list;
#line 446
  count = 0;
#line 448
  spin_lock_irq(& mdev->req_lock);
#line 449
  list_splice_init(list, & work_list);
#line 450
  spin_unlock_irq(& mdev->req_lock);
#line 452
  __mptr = (struct list_head  const  *)work_list.next;
#line 452
  e = (struct drbd_epoch_entry *)__mptr;
#line 452
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 452
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 452
  goto ldv_44916;
  ldv_44915: 
#line 453
  drbd_free_ee(mdev, e);
#line 454
  count = count + 1;
#line 452
  e = t;
#line 452
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 452
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_44916: ;
#line 452
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 453
    goto ldv_44915;
  } else {

  }

#line 456
  return (count);
}
}
#line 469 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 471
  work_list.next = & work_list;
#line 471
  work_list.prev = & work_list;
#line 472
  reclaimed.next = & reclaimed;
#line 472
  reclaimed.prev = & reclaimed;
#line 474
  ok = (int )mdev->state.ldv_35202.conn > 8;
#line 476
  spin_lock_irq(& mdev->req_lock);
#line 477
  reclaim_net_ee(mdev, & reclaimed);
#line 478
  list_splice_init(& mdev->done_ee, & work_list);
#line 479
  spin_unlock_irq(& mdev->req_lock);
#line 481
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 481
  e = (struct drbd_epoch_entry *)__mptr;
#line 481
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 481
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 481
  goto ldv_44933;
  ldv_44932: 
#line 482
  drbd_free_ee(mdev, e);
#line 481
  e = t;
#line 481
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 481
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_44933: ;
#line 481
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 482
    goto ldv_44932;
  } else {

  }
#line 488
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 488
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 488
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 488
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 488
  goto ldv_44942;
  ldv_44941: 
#line 490
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 490
  ok = tmp != 0 && ok != 0;
#line 491
  drbd_free_ee(mdev, e);
#line 488
  e = t;
#line 488
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 488
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_44942: ;
#line 488
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 489
    goto ldv_44941;
  } else {

  }
#line 493
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 495
  return (ok);
}
}
#line 498 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 500
  tmp = get_current();
#line 500
  wait.flags = 0U;
#line 500
  wait.private = (void *)tmp;
#line 500
  wait.func = & autoremove_wake_function;
#line 500
  wait.task_list.next = & wait.task_list;
#line 500
  wait.task_list.prev = & wait.task_list;
#line 504
  goto ldv_44950;
  ldv_44949: 
#line 505
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 506
  spin_unlock_irq(& mdev->req_lock);
#line 507
  drbd_kick_lo(mdev);
#line 508
  schedule();
#line 509
  finish_wait(& mdev->ee_wait, & wait);
#line 510
  spin_lock_irq(& mdev->req_lock);
  ldv_44950: 
#line 504
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 504
  if (tmp___0 == 0) {
#line 505
    goto ldv_44949;
  } else {

  }

#line 509
  return;
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 516
  spin_lock_irq(& mdev->req_lock);
#line 517
  _drbd_wait_ee_list_empty(mdev, head);
#line 518
  spin_unlock_irq(& mdev->req_lock);
#line 519
  return;
}
}
#line 523 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 526
  sk = sock->sk;
#line 527
  err = 0;
#line 529
  *what = "listen";
#line 530
  err = (*((sock->ops)->listen))(sock, 5);
#line 531
  if (err < 0) {
#line 532
    goto out;
  } else {

  }
#line 534
  *what = "sock_create_lite";
#line 535
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 537
  if (err < 0) {
#line 538
    goto out;
  } else {

  }
#line 540
  *what = "accept";
#line 541
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 542
  if (err < 0) {
#line 543
    sock_release(*newsock);
#line 544
    *newsock = 0;
#line 545
    goto out;
  } else {

  }
#line 547
  (*newsock)->ops = sock->ops;
  out: ;
#line 550
  return (err);
}
}
#line 553 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 557
  iov.iov_base = buf;
#line 557
  iov.iov_len = size;
#line 561
  msg.msg_name = 0;
#line 561
  msg.msg_namelen = 0;
#line 561
  msg.msg_iov = (struct iovec *)(& iov);
#line 561
  msg.msg_iovlen = 1UL;
#line 561
  msg.msg_control = 0;
#line 561
  msg.msg_controllen = 0UL;
#line 561
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 568
  tmp = current_thread_info___0();
#line 568
  oldfs = tmp->addr_limit;
#line 569
  tmp___0 = current_thread_info___0();
#line 569
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 569
  tmp___0->addr_limit = __constr_expr_0;
#line 570
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 571
  tmp___1 = current_thread_info___0();
#line 571
  tmp___1->addr_limit = oldfs;
#line 573
  return (rv);
}
}
#line 576 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 579
  iov.iov_base = buf;
#line 579
  iov.iov_len = size;
#line 583
  msg.msg_name = 0;
#line 583
  msg.msg_namelen = 0;
#line 583
  msg.msg_iov = (struct iovec *)(& iov);
#line 583
  msg.msg_iovlen = 1UL;
#line 583
  msg.msg_control = 0;
#line 583
  msg.msg_controllen = 0UL;
#line 583
  msg.msg_flags = 16640U;
#line 590
  tmp = current_thread_info___0();
#line 590
  oldfs = tmp->addr_limit;
#line 591
  tmp___0 = current_thread_info___0();
#line 591
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 591
  tmp___0->addr_limit = __constr_expr_0;
  ldv_44988: 
#line 594
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 595
  if ((size_t )rv == size) {
#line 596
    goto ldv_44987;
  } else {

  }
#line 603
  if (rv < 0) {
#line 604
    if (rv == -104) {
#line 605
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 606
    if (rv != -512) {
#line 607
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 608
    goto ldv_44987;
  } else
#line 609
  if (rv == 0) {
#line 610
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 611
    goto ldv_44987;
  } else {
#line 617
    goto ldv_44987;
  }
#line 619
  goto ldv_44988;
  ldv_44987: 
#line 621
  tmp___1 = current_thread_info___0();
#line 621
  tmp___1->addr_limit = oldfs;
#line 623
  if ((size_t )rv != size) {
#line 624
    val.i = 0U;
#line 624
    val.ldv_35202.conn = 4U;
#line 624
    mask.i = 0U;
#line 624
    mask.ldv_35202.conn = 31U;
#line 624
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 626
  return (rv);
}
}
#line 634 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 638
  if (snd != 0U) {
#line 639
    (sock->sk)->sk_sndbuf = (int )snd;
#line 640
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 642
  if (rcv != 0U) {
#line 643
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 644
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 646
  return;
}
}
#line 648 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 654
  disconnect_on_error = 1;
#line 656
  tmp = get_net_conf(mdev);
#line 656
  if (tmp == 0) {
#line 657
    return (0);
  } else {

  }
#line 659
  what = "sock_create_kern";
#line 660
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 662
  if (err < 0) {
#line 663
    sock = 0;
#line 664
    goto out;
  } else {

  }
#line 667
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 667
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 667
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 669
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 679
  __min1 = (mdev->net_conf)->my_addr_len;
#line 679
  __min2 = 28;
#line 679
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 679
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 681
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 682
    src_in6.sin6_port = 0U;
  } else {
#line 684
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 686
  what = "bind before connect";
#line 687
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 690
  if (err < 0) {
#line 691
    goto out;
  } else {

  }
#line 695
  disconnect_on_error = 0;
#line 696
  what = "connect";
#line 697
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 702
  if (err < 0) {
#line 703
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 704
      sock_release(sock);
#line 705
      sock = 0;
    } else {

    }
#line 707
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 714
    disconnect_on_error = 0;
#line 715
    goto ldv_45025;
    default: 
#line 717
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_45025: ;
#line 719
    if (disconnect_on_error != 0) {
#line 720
      val.i = 0U;
#line 720
      val.ldv_35202.conn = 1U;
#line 720
      mask.i = 0U;
#line 720
      mask.ldv_35202.conn = 31U;
#line 720
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 722
  put_net_conf(mdev);
#line 723
  return (sock);
}
}
#line 726 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 729
  s_estab = 0;
#line 732
  tmp = get_net_conf(mdev);
#line 732
  if (tmp == 0) {
#line 733
    return (0);
  } else {

  }
#line 735
  what = "sock_create_kern";
#line 736
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 738
  if (err != 0) {
#line 739
    s_listen = 0;
#line 740
    goto out;
  } else {

  }
#line 743
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 744
  tmp___0 = random32();
#line 744
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 746
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 747
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 748
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 749
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 752
  what = "bind before listen";
#line 753
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 756
  if (err < 0) {
#line 757
    goto out;
  } else {

  }
#line 759
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 762
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 763
    sock_release(s_listen);
  } else {

  }
#line 764
  if (err < 0) {
#line 765
    if ((err != -11 && err != -4) && err != -512) {
#line 766
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 767
      val.i = 0U;
#line 767
      val.ldv_35202.conn = 1U;
#line 767
      mask.i = 0U;
#line 767
      mask.ldv_35202.conn = 31U;
#line 767
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 770
  put_net_conf(mdev);
#line 772
  return (s_estab);
}
}
#line 775 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header *h ;
  int tmp ;

  {
#line 778
  h = & mdev->data.sbuf.header;
#line 780
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 780
  return (tmp);
}
}
#line 783 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header *h ;
  int rr ;
  __u16 tmp ;

  {
#line 785
  h = & mdev->data.sbuf.header;
#line 788
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 790
  if (rr == 8 && h->magic == 1728214147U) {
#line 791
    tmp = __fswab16((int )h->command);
#line 791
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 793
  return (65535);
}
}
#line 801 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 806
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 807
    return (0);
  } else {

  }
#line 809
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 811
  if (rr > 0 || rr == -11) {
#line 812
    return (1);
  } else {
#line 814
    sock_release(*sock);
#line 815
    *sock = 0;
#line 816
    return (0);
  }
}
}
#line 828 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  enum drbd_packets tmp___4 ;
  u32 tmp___5 ;
  struct task_struct *tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 833
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 833
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            833);
  } else {

  }
#line 835
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 835
  if (tmp != 0) {
#line 836
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "CREATE_BARRIER flag was set in drbd_connect - now cleared!\n");
  } else {

  }
#line 838
  val.i = 0U;
#line 838
  val.ldv_35202.conn = 8U;
#line 838
  mask.i = 0U;
#line 838
  mask.ldv_35202.conn = 31U;
#line 838
  tmp___0 = drbd_request_state(mdev, mask, val);
#line 838
  if (tmp___0 <= 0) {
#line 839
    return (-2);
  } else {

  }
#line 841
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 843
  sock = 0;
#line 844
  msock = 0;
  ldv_45084: 
#line 847
  try = 0;
  ldv_45076: 
#line 849
  s = drbd_try_connect(mdev);
#line 850
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 851
    goto ldv_45075;
  } else {
#line 850
    try = try + 1;
#line 850
    if (try > 2) {
#line 851
      goto ldv_45075;
    } else {

    }
  }
#line 853
  tmp___1 = get_current();
#line 853
  tmp___1->state = 1L;
#line 854
  schedule_timeout(25L);
#line 855
  goto ldv_45076;
  ldv_45075: ;
#line 857
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 858
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 859
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 860
      sock = s;
#line 861
      s = 0;
    } else
#line 862
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 863
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 864
      msock = s;
#line 865
      s = 0;
    } else {
#line 867
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 868
      goto out_release_sockets;
    }
  } else {

  }
#line 872
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 873
    tmp___2 = get_current();
#line 873
    tmp___2->state = 1L;
#line 874
    schedule_timeout(25L);
#line 875
    ok = drbd_socket_okay(mdev, & sock);
#line 876
    tmp___3 = drbd_socket_okay(mdev, & msock);
#line 876
    ok = tmp___3 != 0 && ok != 0;
#line 877
    if (ok != 0) {
#line 878
      goto ldv_45078;
    } else {

    }
  } else {

  }
  retry: 
#line 882
  s = drbd_wait_for_connect(mdev);
#line 883
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 884
    tmp___4 = drbd_recv_fp(mdev, s);
#line 884
    try = (int )tmp___4;
#line 885
    drbd_socket_okay(mdev, & sock);
#line 886
    drbd_socket_okay(mdev, & msock);
#line 887
    switch (try) {
    case 65522: ;
#line 889
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 890
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 891
      sock_release(sock);
    } else {

    }
#line 893
    sock = s;
#line 894
    goto ldv_45081;
    case 65521: ;
#line 896
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 897
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 898
      sock_release(msock);
    } else {

    }
#line 900
    msock = s;
#line 901
    set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
#line 902
    goto ldv_45081;
    default: 
#line 904
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 905
    sock_release(s);
#line 906
    tmp___5 = random32();
#line 906
    if ((int )tmp___5 & 1) {
#line 907
      goto retry;
    } else {

    }
    }
    ldv_45081: ;
  } else {

  }
#line 911
  if ((int )mdev->state.ldv_35202.conn <= 1) {
#line 912
    goto out_release_sockets;
  } else {

  }
#line 913
  tmp___8 = get_current();
#line 913
  tmp___9 = signal_pending(tmp___8);
#line 913
  if (tmp___9 != 0) {
#line 914
    tmp___6 = get_current();
#line 914
    flush_signals(tmp___6);
#line 915
    __asm__  volatile   ("": : : "memory");
#line 916
    tmp___7 = get_t_state(& mdev->receiver);
#line 916
    if ((unsigned int )tmp___7 == 2U) {
#line 917
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 920
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 921
    ok = drbd_socket_okay(mdev, & sock);
#line 922
    tmp___10 = drbd_socket_okay(mdev, & msock);
#line 922
    ok = tmp___10 != 0 && ok != 0;
#line 923
    if (ok != 0) {
#line 924
      goto ldv_45078;
    } else {

    }
  } else {

  }
#line 926
  goto ldv_45084;
  ldv_45078: 
#line 928
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 929
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 931
  (sock->sk)->sk_allocation = 16U;
#line 932
  (msock->sk)->sk_allocation = 16U;
#line 934
  (sock->sk)->sk_priority = 4U;
#line 935
  (msock->sk)->sk_priority = 6U;
#line 942
  tmp___11 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 942
  (sock->sk)->sk_rcvtimeo = tmp___11;
#line 942
  (sock->sk)->sk_sndtimeo = tmp___11;
#line 945
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 946
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 950
  drbd_tcp_nodelay(sock);
#line 951
  drbd_tcp_nodelay(msock);
#line 953
  mdev->data.socket = sock;
#line 954
  mdev->meta.socket = msock;
#line 955
  mdev->last_received = jiffies;
#line 957
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 957
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            957);
  } else {

  }
#line 959
  h = drbd_do_handshake(mdev);
#line 960
  if (h <= 0) {
#line 961
    return (h);
  } else {

  }
#line 963
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 965
    tmp___12 = drbd_do_auth(mdev);
#line 965
    switch (tmp___12) {
    case -1: 
#line 967
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 968
    return (-1);
    case 0: 
#line 970
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 971
    return (0);
    }
  } else {

  }
#line 975
  val___0.i = 0U;
#line 975
  val___0.ldv_35202.conn = 9U;
#line 975
  mask___0.i = 0U;
#line 975
  mask___0.ldv_35202.conn = 31U;
#line 975
  tmp___13 = drbd_request_state(mdev, mask___0, val___0);
#line 975
  if (tmp___13 <= 0) {
#line 976
    return (0);
  } else {

  }
#line 978
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 979
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 981
  atomic_set(& mdev->packet_seq, 0);
#line 982
  mdev->peer_seq = 0U;
#line 984
  drbd_thread_start(& mdev->asender);
#line 986
  tmp___14 = drbd_send_protocol(mdev);
#line 986
  if (tmp___14 == 0) {
#line 987
    return (-1);
  } else {

  }
#line 988
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 989
  drbd_send_sizes(mdev, 0, 0);
#line 990
  drbd_send_uuids(mdev);
#line 991
  drbd_send_state(mdev);
#line 992
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 993
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 995
  return (1);
  out_release_sockets: ;
#line 998
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 999
    sock_release(sock);
  } else {

  }
#line 1000
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 1001
    sock_release(msock);
  } else {

  }
#line 1002
  return (-1);
}
}
#line 1005 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int r ;
  long tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  long tmp___3 ;

  {
#line 1009
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 1011
  tmp = __builtin_expect(r != 8, 0L);
#line 1011
  if (tmp != 0L) {
#line 1012
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
            r);
#line 1013
    return (0);
  } else {

  }
#line 1015
  tmp___0 = __fswab16((int )h->command);
#line 1015
  h->command = tmp___0;
#line 1016
  tmp___1 = __fswab16((int )h->length);
#line 1016
  h->length = tmp___1;
#line 1017
  tmp___3 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 1017
  if (tmp___3 != 0L) {
#line 1018
    tmp___2 = __fswab32(h->magic);
#line 1018
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%lx c: %d l: %d\n",
            (long )tmp___2, (int )h->command, (int )h->length);
#line 1021
    return (0);
  } else {

  }
#line 1023
  mdev->last_received = jiffies;
#line 1025
  return (1);
}
}
#line 1028 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_flush_after_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  int rv ;
  int tmp ;
  enum finish_epoch tmp___0 ;

  {
#line 1032
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 1032
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1032
    if (tmp != 0) {
#line 1033
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0, 1UL);
#line 1035
      if (rv != 0) {
#line 1036
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                rv);
#line 1040
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 1042
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1045
  tmp___0 = drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1045
  return (tmp___0);
}
}
#line 1048 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int w_flush(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct flush_work *fw ;
  struct drbd_epoch *epoch ;
  int tmp ;

  {
#line 1050
  fw = (struct flush_work *)w;
#line 1051
  epoch = fw->epoch;
#line 1053
  kfree((void const   *)w);
#line 1055
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& epoch->flags));
#line 1055
  if (tmp == 0) {
#line 1056
    drbd_flush_after_epoch(mdev, epoch);
  } else {

  }
#line 1058
  drbd_may_finish_epoch(mdev, epoch, (int )mdev->state.ldv_35202.conn <= 9 ? EV_CLEANUP : EV_PUT);
#line 1061
  return (1);
}
}
#line 1070 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int finish ;
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  int schedule_flush ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct list_head  const  *__mptr ;
  struct flush_work *fw ;
  void *tmp___8 ;

  {
#line 1076
  schedule_flush = 0;
#line 1077
  rv = FE_STILL_LIVE;
#line 1079
  spin_lock(& mdev->epoch_lock);
  ldv_45130: 
#line 1081
  next_epoch = 0;
#line 1082
  finish = 0;
#line 1084
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1086
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1088
  atomic_dec(& epoch->active);
#line 1089
  goto ldv_45119;
  case 1U: 
#line 1091
  set_bit(3U, (unsigned long volatile   *)(& epoch->flags));
#line 1095
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1095
  if (((tmp != 0 && epoch_size == 1) && (unsigned int )mdev->write_ordering != 3U) && (unsigned long )mdev->current_epoch == (unsigned long )epoch) {
#line 1098
    clear_bit(2, (unsigned long volatile   *)(& epoch->flags));
  } else {

  }
#line 1099
  goto ldv_45119;
  case 2U: 
#line 1101
  set_bit(1U, (unsigned long volatile   *)(& epoch->flags));
#line 1102
  goto ldv_45119;
  case 3U: ;
#line 1105
  goto ldv_45119;
  }
  ldv_45119: ;
#line 1108
  if (epoch_size != 0) {
#line 1108
    tmp___3 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1108
    if (tmp___3 == 0) {
#line 1108
      tmp___4 = constant_test_bit(3U, (unsigned long const volatile   *)(& epoch->flags));
#line 1108
      if (tmp___4 != 0) {
#line 1108
        if ((unsigned long )epoch->list.prev == (unsigned long )(& (mdev->current_epoch)->list)) {
#line 1108
          tmp___5 = constant_test_bit(4U, (unsigned long const volatile   *)(& epoch->flags));
#line 1108
          if (tmp___5 == 0) {
#line 1114
            tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& epoch->flags));
#line 1114
            if (tmp___1 != 0 || (unsigned int )mdev->write_ordering == 0U) {
#line 1118
              finish = 1;
#line 1119
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else
#line 1114
            if (epoch_size == 1) {
#line 1114
              tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1114
              if (tmp___2 != 0) {
#line 1118
                finish = 1;
#line 1119
                set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
              } else {
#line 1114
                goto _L;
              }
            } else
            _L: /* CIL Label */ 
#line 1114
            if (((unsigned int )ev & 32U) != 0U) {
#line 1118
              finish = 1;
#line 1119
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else {
#line 1120
              tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1120
              if (tmp___0 == 0 && (unsigned int )mdev->write_ordering == 3U) {
#line 1122
                atomic_inc(& epoch->active);
#line 1123
                schedule_flush = 1;
              } else {

              }
            }
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1126
  if (finish != 0) {
#line 1127
    if (((unsigned int )ev & 32U) == 0U) {
#line 1128
      spin_unlock(& mdev->epoch_lock);
#line 1129
      drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1130
      spin_lock(& mdev->epoch_lock);
    } else {

    }
#line 1132
    atomic_dec(& mdev->unacked_cnt);
#line 1132
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1132
    if (tmp___7 < 0) {
#line 1132
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1132
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "drbd_may_finish_epoch", 1132, tmp___6);
    } else {

    }
#line 1134
    if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1135
      __mptr = (struct list_head  const  *)epoch->list.next;
#line 1135
      next_epoch = (struct drbd_epoch *)__mptr;
#line 1136
      list_del(& epoch->list);
#line 1137
      ev = (enum epoch_event )(((unsigned int )ev & 32U) | 3U);
#line 1138
      mdev->epochs = mdev->epochs - 1U;
#line 1139
      kfree((void const   *)epoch);
#line 1141
      if ((unsigned int )rv == 0U) {
#line 1142
        rv = FE_DESTROYED;
      } else {

      }
    } else {
#line 1144
      epoch->flags = 0UL;
#line 1145
      atomic_set(& epoch->epoch_size, 0);
#line 1147
      if ((unsigned int )rv == 0U) {
#line 1148
        rv = FE_RECYCLED;
      } else {

      }
    }
  } else {

  }
#line 1152
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1153
    goto ldv_45129;
  } else {

  }
#line 1155
  epoch = next_epoch;
#line 1156
  goto ldv_45130;
  ldv_45129: 
#line 1158
  spin_unlock(& mdev->epoch_lock);
#line 1160
  if (schedule_flush != 0) {
#line 1162
    tmp___8 = kmalloc___1(32UL, 32U);
#line 1162
    fw = (struct flush_work *)tmp___8;
#line 1163
    if ((unsigned long )fw != (unsigned long )((struct flush_work *)0)) {
#line 1164
      fw->w.cb = & w_flush;
#line 1165
      fw->epoch = epoch;
#line 1166
      drbd_queue_work(& mdev->data.work, & fw->w);
    } else {
#line 1168
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc a flush_work obj\n");
#line 1169
      set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1171
      drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1172
      drbd_may_finish_epoch(mdev, epoch, EV_PUT);
    }
  } else {

  }
#line 1176
  return (rv);
}
}
#line 1184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[4U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1187
  write_ordering_str[0] = (char *)"none";
#line 1187
  write_ordering_str[1] = (char *)"drain";
#line 1187
  write_ordering_str[2] = (char *)"flush";
#line 1187
  write_ordering_str[3] = (char *)"barrier";
#line 1194
  pwo = mdev->write_ordering;
#line 1195
  _min1 = pwo;
#line 1195
  _min2 = wo;
#line 1195
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1196
  if ((unsigned int )wo == 3U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1197
    wo = WO_bdev_flush;
  } else {

  }
#line 1198
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1199
    wo = WO_drain_io;
  } else {

  }
#line 1200
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1201
    wo = WO_none;
  } else {

  }
#line 1202
  mdev->write_ordering = wo;
#line 1203
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 3U) {
#line 1204
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1205
  return;
}
}
#line 1214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  long tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 1217
  bios = 0;
#line 1219
  page = e->pages;
#line 1220
  sector = e->sector;
#line 1221
  ds = e->size;
#line 1222
  n_bios = 0U;
#line 1223
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
  next_bio: 
#line 1230
  bio = bio_alloc(16U, (int )nr_pages);
#line 1231
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1232
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1233
    goto fail;
  } else {

  }
#line 1236
  bio->bi_sector = sector;
#line 1237
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1240
  bio->bi_rw = (unsigned long )rw;
#line 1241
  bio->bi_private = (void *)e;
#line 1242
  bio->bi_end_io = & drbd_endio_sec;
#line 1244
  bio->bi_next = bios;
#line 1245
  bios = bio;
#line 1246
  n_bios = n_bios + 1U;
#line 1248
  goto ldv_45163;
  ldv_45162: 
#line 1249
  __min1 = ds;
#line 1249
  __min2 = 4096U;
#line 1249
  len = __min1 < __min2 ? __min1 : __min2;
#line 1250
  tmp___0 = bio_add_page(bio, page, len, 0U);
#line 1250
  if (tmp___0 == 0) {
#line 1252
    tmp = __builtin_expect((unsigned int )bio->bi_vcnt == 0U, 0L);
#line 1252
    if (tmp != 0L) {
#line 1252
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1252), "i" (12UL));
      ldv_45161: ;
#line 1252
      goto ldv_45161;
    } else {

    }
#line 1253
    goto next_bio;
  } else {

  }
#line 1255
  ds = ds - len;
#line 1256
  sector = (sector_t )(len >> 9) + sector;
#line 1257
  nr_pages = nr_pages - 1U;
#line 1248
  page = page_chain_next(page);
  ldv_45163: ;
#line 1248
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1248
    tmp___1 = page_chain_next(page);
#line 1248
    __builtin_prefetch((void const   *)tmp___1);
#line 1248
    if (1 != 0) {
#line 1249
      goto ldv_45162;
    } else {
#line 1251
      goto ldv_45164;
    }
  } else {

  }
  ldv_45164: ;
#line 1259
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1259
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1259);
  } else {

  }
#line 1260
  if (ds != 0U) {
#line 1260
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1260);
  } else {

  }
#line 1262
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_45165: 
#line 1264
  bio = bios;
#line 1265
  bios = bios->bi_next;
#line 1266
  bio->bi_next = 0;
#line 1269
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1270
    bio->bi_rw = bio->bi_rw & 0xfffffffffffffdffUL;
  } else {

  }
#line 1272
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1276
  if ((unsigned long )bios != (unsigned long )((struct bio *)0) && (unsigned long )bios->bi_next != (unsigned long )((struct bio *)0)) {
#line 1277
    bios->bi_rw = bios->bi_rw & 0xffffffffffffffefUL;
  } else {

  }
#line 1278
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1279
    goto ldv_45165;
  } else {

  }
#line 1279
  maybe_kick_lo(mdev);
#line 1280
  return (0);
  fail: ;
#line 1283
  goto ldv_45168;
  ldv_45167: 
#line 1284
  bio = bios;
#line 1285
  bios = bios->bi_next;
#line 1286
  bio_put(bio);
  ldv_45168: ;
#line 1283
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1284
    goto ldv_45167;
  } else {

  }

#line 1288
  return (-12);
}
}
#line 1297 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_epoch *tmp ;
  int tmp___0 ;

  {
#line 1299
  e = (struct drbd_epoch_entry *)w;
#line 1310
  tmp = previous_epoch(mdev, e->epoch);
#line 1310
  if ((unsigned long )tmp != (unsigned long )((struct drbd_epoch *)0)) {
#line 1311
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Write ordering was not enforced (one time event)\n");
  } else {

  }
#line 1316
  e->w.cb = & e_end_block;
#line 1317
  tmp___0 = drbd_submit_ee(mdev, e, 1U, 4);
#line 1317
  if (tmp___0 != 0) {
#line 1321
    e->w.cb = & w_e_reissue;
#line 1322
    drbd_queue_work(& mdev->data.work, & e->w);
  } else {

  }
#line 1324
  return (1);
}
}
#line 1327 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int rv ;
  int issue_flush ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  int _b ;
  int _b___0 ;
  enum finish_epoch tmp ;
  enum finish_epoch tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  enum finish_epoch tmp___3 ;
  int tmp___4 ;

  {
#line 1330
  p = (struct p_barrier *)h;
#line 1333
  _b = (unsigned int )h->length != 8U;
#line 1333
  if (_b != 0) {
#line 1333
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_Barrier", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1333);
  } else {

  }
#line 1333
  if (_b != 0) {
#line 1333
    return (0);
  } else {

  }
#line 1335
  rv = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 1336
  _b___0 = (int )h->length != rv;
#line 1336
  if (_b___0 != 0) {
#line 1336
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_Barrier", (char *)"rv != h->length", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1336);
  } else {

  }
#line 1336
  if (_b___0 != 0) {
#line 1336
    return (0);
  } else {

  }
#line 1338
  inc_unacked(mdev);
#line 1340
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1341
    drbd_kick_lo(mdev);
  } else {

  }
#line 1343
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1344
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1344
  rv = (int )tmp;
#line 1351
  switch ((unsigned int )mdev->write_ordering) {
  case 3U: ;
  case 0U: ;
#line 1354
  if (rv == 2) {
#line 1355
    return (1);
  } else {

  }
#line 1356
  goto ldv_45191;
  case 2U: ;
  case 1U: ;
#line 1360
  if (rv == 0) {
#line 1361
    set_bit(0U, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1362
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1363
    tmp___0 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1363
    rv = (int )tmp___0;
  } else {

  }
#line 1365
  if (rv == 2) {
#line 1366
    return (1);
  } else {

  }
#line 1371
  goto ldv_45191;
  }
  ldv_45191: 
#line 1376
  tmp___1 = kmalloc___1(40UL, 16U);
#line 1376
  epoch = (struct drbd_epoch *)tmp___1;
#line 1377
  if ((unsigned long )epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1378
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
#line 1379
    tmp___2 = test_and_set_bit(0, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1379
    issue_flush = tmp___2 == 0;
#line 1380
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1381
    if (issue_flush != 0) {
#line 1382
      tmp___3 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1382
      rv = (int )tmp___3;
#line 1383
      if (rv == 2) {
#line 1384
        return (1);
      } else {

      }
    } else {

    }
#line 1387
    drbd_wait_ee_list_empty(mdev, & mdev->done_ee);
#line 1389
    return (1);
  } else {

  }
#line 1392
  epoch->flags = 0UL;
#line 1393
  atomic_set(& epoch->epoch_size, 0);
#line 1394
  atomic_set(& epoch->active, 0);
#line 1396
  spin_lock(& mdev->epoch_lock);
#line 1397
  tmp___4 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1397
  if (tmp___4 != 0) {
#line 1398
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1399
    mdev->current_epoch = epoch;
#line 1400
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1403
    kfree((void const   *)epoch);
  }
#line 1405
  spin_unlock(& mdev->epoch_lock);
#line 1407
  return (1);
}
}
#line 1413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  int _b ;
  int _b___0 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___1 ;
  int tmp___2 ;
  struct page *tmp___3 ;
  int tmp___4 ;

  {
#line 1415
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1415
  capacity = tmp;
#line 1419
  dig_in = mdev->int_dig_in;
#line 1420
  dig_vv = mdev->int_dig_vv;
#line 1423
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1423
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1423
    dgs = (int )tmp___0;
  } else {
#line 1423
    dgs = 0;
  }
#line 1426
  if (dgs != 0) {
#line 1427
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1428
    if (rr != dgs) {
#line 1429
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
               rr, dgs);
#line 1431
      return (0);
    } else {

    }
  } else {

  }
#line 1435
  data_size = data_size - dgs;
#line 1437
  _b = (data_size & 511) != 0;
#line 1437
  if (_b != 0) {
#line 1437
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1437);
  } else {

  }
#line 1437
  if (_b != 0) {
#line 1437
    return (0);
  } else {

  }
#line 1438
  _b___0 = (unsigned int )data_size > 32768U;
#line 1438
  if (_b___0 != 0) {
#line 1438
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_SEGMENT_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1438);
  } else {

  }
#line 1438
  if (_b___0 != 0) {
#line 1438
    return (0);
  } else {

  }
#line 1442
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1443
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1446
    return (0);
  } else {

  }
#line 1452
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1453
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1454
    return (0);
  } else {

  }
#line 1456
  ds = data_size;
#line 1457
  page = e->pages;
#line 1458
  goto ldv_45220;
  ldv_45219: 
#line 1459
  __min1 = ds;
#line 1459
  __min2 = 4096;
#line 1459
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1460
  tmp___1 = kmap(page);
#line 1460
  data = (unsigned long *)tmp___1;
#line 1461
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1462
  tmp___2 = drbd_insert_fault(mdev, 9U);
#line 1462
  if (tmp___2 != 0) {
#line 1463
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1464
    *data = ~ *data;
  } else {

  }
#line 1466
  kunmap(page);
#line 1467
  if ((unsigned int )rr != len) {
#line 1468
    drbd_free_ee(mdev, e);
#line 1469
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
             rr, len);
#line 1471
    return (0);
  } else {

  }
#line 1473
  ds = ds - rr;
#line 1458
  page = page_chain_next(page);
  ldv_45220: ;
#line 1458
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1458
    tmp___3 = page_chain_next(page);
#line 1458
    __builtin_prefetch((void const   *)tmp___3);
#line 1458
    if (1 != 0) {
#line 1459
      goto ldv_45219;
    } else {
#line 1461
      goto ldv_45221;
    }
  } else {

  }
  ldv_45221: ;
#line 1476
  if (dgs != 0) {
#line 1477
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1478
    tmp___4 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1478
    if (tmp___4 != 0) {
#line 1479
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED.\n");
#line 1480
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1482
      drbd_free_ee(mdev, e);
#line 1483
      return (0);
    } else {

    }
  } else {

  }
#line 1486
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1487
  return (e);
}
}
#line 1493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1496
  rv = 1;
#line 1499
  if (data_size == 0) {
#line 1500
    return (1);
  } else {

  }
#line 1502
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1504
  data = kmap(page);
#line 1505
  goto ldv_45241;
  ldv_45240: 
#line 1506
  __min1 = data_size;
#line 1506
  __min2 = 4096;
#line 1506
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1507
  __min1___1 = data_size;
#line 1507
  __min2___1 = 4096;
#line 1507
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1508
    rv = 0;
#line 1510
    __min1___0 = data_size;
#line 1510
    __min2___0 = 4096;
#line 1510
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
             rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1511
    goto ldv_45239;
  } else {

  }
#line 1513
  data_size = data_size - rr;
  ldv_45241: ;
#line 1505
  if (data_size != 0) {
#line 1506
    goto ldv_45240;
  } else {

  }
  ldv_45239: 
#line 1515
  kunmap(page);
#line 1516
  drbd_pp_free(mdev, page);
#line 1517
  return (rv);
}
}
#line 1520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  int __min1 ;
  int __min2 ;
  void *tmp___0 ;
  int tmp___1 ;

  {
#line 1526
  dig_in = mdev->int_dig_in;
#line 1527
  dig_vv = mdev->int_dig_vv;
#line 1529
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1529
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1529
    dgs = (int )tmp;
  } else {
#line 1529
    dgs = 0;
  }
#line 1532
  if (dgs != 0) {
#line 1533
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1534
    if (rr != dgs) {
#line 1535
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
               rr, dgs);
#line 1537
      return (0);
    } else {

    }
  } else {

  }
#line 1541
  data_size = data_size - dgs;
#line 1545
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1547
  bio = req->master_bio;
#line 1548
  if (bio->bi_sector != sector) {
#line 1548
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1548);
  } else {

  }
#line 1550
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1550
  i = (int )bio->bi_idx;
#line 1550
  goto ldv_45260;
  ldv_45259: 
#line 1551
  __min1 = data_size;
#line 1551
  __min2 = (int )bvec->bv_len;
#line 1551
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1552
  tmp___0 = kmap(bvec->bv_page);
#line 1552
  rr = drbd_recv(mdev, tmp___0 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1555
  kunmap(bvec->bv_page);
#line 1556
  if (rr != expect) {
#line 1557
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
             rr, expect);
#line 1560
    return (0);
  } else {

  }
#line 1562
  data_size = data_size - rr;
#line 1550
  bvec = bvec + 1;
#line 1550
  i = i + 1;
  ldv_45260: ;
#line 1550
  if ((int )bio->bi_vcnt > i) {
#line 1551
    goto ldv_45259;
  } else {

  }

#line 1565
  if (dgs != 0) {
#line 1566
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1567
    tmp___1 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1567
    if (tmp___1 != 0) {
#line 1568
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1569
      return (0);
    } else {

    }
  } else {

  }
#line 1573
  if (data_size != 0) {
#line 1573
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1573);
  } else {

  }
#line 1574
  return (1);
}
}
#line 1579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1581
  e = (struct drbd_epoch_entry *)w;
#line 1582
  sector = e->sector;
#line 1585
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1585
  if (tmp == 0) {
#line 1585
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1585);
  } else {

  }
#line 1587
  tmp___0 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1587
  if (tmp___0 != 0L) {
#line 1588
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1588U);
#line 1589
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1592
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1594
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1596
  atomic_dec(& mdev->unacked_cnt);
#line 1596
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1596
  if (tmp___2 < 0) {
#line 1596
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1596
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1596, tmp___1);
  } else {

  }
#line 1598
  return (ok);
}
}
#line 1601 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1605
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1606
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1607
    goto fail;
  } else {

  }
#line 1609
  atomic_dec(& mdev->rs_pending_cnt);
#line 1609
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1609
  if (tmp___0 < 0) {
#line 1609
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1609
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1609, tmp);
  } else {

  }
#line 1611
  inc_unacked(mdev);
#line 1615
  e->w.cb = & e_end_resync_block;
#line 1617
  spin_lock_irq(& mdev->req_lock);
#line 1618
  list_add(& e->w.list, & mdev->sync_ee);
#line 1619
  spin_unlock_irq(& mdev->req_lock);
#line 1621
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1621
  if (tmp___1 == 0) {
#line 1622
    return (1);
  } else {

  }
#line 1624
  drbd_free_ee(mdev, e);
  fail: 
#line 1626
  put_ldev(mdev);
#line 1627
  return (0);
}
}
#line 1630 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  int tmp ;
  __u64 tmp___0 ;
  long tmp___1 ;

  {
#line 1636
  p = (struct p_data *)h;
#line 1638
  header_size = 24U;
#line 1639
  data_size = (unsigned int )h->length - header_size;
#line 1641
  _b = data_size == 0U;
#line 1641
  if (_b != 0) {
#line 1641
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_DataReply", (char *)"data_size == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1641);
  } else {

  }
#line 1641
  if (_b != 0) {
#line 1641
    return (0);
  } else {

  }
#line 1643
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1643
  if ((unsigned int )tmp != header_size) {
#line 1644
    return (0);
  } else {

  }
#line 1646
  tmp___0 = __fswab64(p->sector);
#line 1646
  sector = (sector_t )tmp___0;
#line 1648
  spin_lock_irq(& mdev->req_lock);
#line 1649
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1650
  spin_unlock_irq(& mdev->req_lock);
#line 1651
  tmp___1 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1651
  if (tmp___1 != 0L) {
#line 1652
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1653
    return (0);
  } else {

  }
#line 1659
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1661
  if (ok != 0) {
#line 1662
    req_mod(req, data_received);
  } else {

  }
#line 1667
  return (ok);
}
}
#line 1670 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  int tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1675
  p = (struct p_data *)h;
#line 1677
  header_size = 24U;
#line 1678
  data_size = (unsigned int )h->length - header_size;
#line 1680
  _b = data_size == 0U;
#line 1680
  if (_b != 0) {
#line 1680
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_RSDataReply", (char *)"data_size == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1680);
  } else {

  }
#line 1680
  if (_b != 0) {
#line 1680
    return (0);
  } else {

  }
#line 1682
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1682
  if ((unsigned int )tmp != header_size) {
#line 1683
    return (0);
  } else {

  }
#line 1685
  tmp___0 = __fswab64(p->sector);
#line 1685
  sector = (sector_t )tmp___0;
#line 1686
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1686
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1686);
  } else {

  }
#line 1688
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1688
  if (tmp___2 != 0) {
#line 1692
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1694
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1694
    if (tmp___1 != 0) {
#line 1695
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1697
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1699
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
  }
#line 1702
  return (ok);
}
}
#line 1708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  struct drbd_epoch *epoch ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1710
  e = (struct drbd_epoch_entry *)w;
#line 1711
  sector = e->sector;
#line 1713
  ok = 1;
#line 1715
  if ((e->flags & 4UL) != 0UL) {
#line 1716
    epoch = previous_epoch(mdev, e->epoch);
#line 1717
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1718
      drbd_may_finish_epoch(mdev, epoch, cancel != 0 ? 34 : EV_BARRIER_DONE);
    } else {

    }
  } else {

  }
#line 1721
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1722
    tmp___0 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1722
    if (tmp___0 != 0L) {
#line 1723
      pcmd = ((int )mdev->state.ldv_35202.conn > 15 && (int )mdev->state.ldv_35202.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1727
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1727
      ok = tmp & ok;
#line 1728
      if (pcmd == 23) {
#line 1729
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1729U);
      } else {

      }
    } else {
#line 1731
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1735
    atomic_dec(& mdev->unacked_cnt);
#line 1735
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1735
    if (tmp___2 < 0) {
#line 1735
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1735
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1735, tmp___1);
    } else {

    }
  } else {

  }
#line 1739
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1740
    spin_lock_irq(& mdev->req_lock);
#line 1741
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1741
    if (tmp___3 != 0) {
#line 1741
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1741);
    } else {

    }
#line 1742
    hlist_del_init(& e->colision);
#line 1743
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1745
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1745
    if (tmp___4 == 0) {
#line 1745
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1745);
    } else {

    }
  }
#line 1748
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1750
  return (ok);
}
}
#line 1753 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1755
  e = (struct drbd_epoch_entry *)w;
#line 1756
  ok = 1;
#line 1758
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1758
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1758);
  } else {

  }
#line 1759
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1761
  spin_lock_irq(& mdev->req_lock);
#line 1762
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1762
  if (tmp != 0) {
#line 1762
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1762);
  } else {

  }
#line 1763
  hlist_del_init(& e->colision);
#line 1764
  spin_unlock_irq(& mdev->req_lock);
#line 1766
  atomic_dec(& mdev->unacked_cnt);
#line 1766
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1766
  if (tmp___1 < 0) {
#line 1766
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1766
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1766, tmp___0);
  } else {

  }
#line 1768
  return (ok);
}
}
#line 1792 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1794
  tmp = get_current();
#line 1794
  wait.flags = 0U;
#line 1794
  wait.private = (void *)tmp;
#line 1794
  wait.func = & autoremove_wake_function;
#line 1794
  wait.task_list.next = & wait.task_list;
#line 1794
  wait.task_list.prev = & wait.task_list;
#line 1797
  ret = 0;
#line 1798
  spin_lock(& mdev->peer_seq_lock);
  ldv_45344: 
#line 1800
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1801
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1801
  if (tmp___0 <= 0) {
#line 1802
    goto ldv_45343;
  } else {

  }
#line 1803
  tmp___1 = get_current();
#line 1803
  tmp___2 = signal_pending(tmp___1);
#line 1803
  if (tmp___2 != 0) {
#line 1804
    ret = -512;
#line 1805
    goto ldv_45343;
  } else {

  }
#line 1807
  p_seq = mdev->peer_seq;
#line 1808
  spin_unlock(& mdev->peer_seq_lock);
#line 1809
  timeout = schedule_timeout(7500L);
#line 1810
  spin_lock(& mdev->peer_seq_lock);
#line 1811
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1812
    ret = -110;
#line 1813
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1814
    goto ldv_45343;
  } else {

  }
#line 1816
  goto ldv_45344;
  ldv_45343: 
#line 1817
  finish_wait(& mdev->seq_wait, & wait);
#line 1818
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1819
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1820
  spin_unlock(& mdev->peer_seq_lock);
#line 1821
  return (ret);
}
}
#line 1825 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int header_size ;
  int data_size ;
  int rw ;
  u32 dp_flags ;
  int _b ;
  int tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u64 tmp___4 ;
  struct drbd_epoch *epoch ;
  struct list_head  const  *__mptr ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  __u32 tmp___8 ;
  int size ;
  int discard ;
  int tmp___9 ;
  wait_queue_t wait ;
  struct task_struct *tmp___10 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___11 ;
  long tmp___12 ;
  __u32 tmp___13 ;
  int tmp___14 ;
  struct hlist_head *tmp___15 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___16 ;
  struct task_struct *tmp___17 ;
  int tmp___18 ;
  struct hlist_node  const  *__mptr___0 ;
  struct task_struct *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;

  {
#line 1829
  p = (struct p_data *)h;
#line 1831
  rw = 1;
#line 1834
  header_size = 24;
#line 1835
  data_size = (int )h->length - header_size;
#line 1837
  _b = data_size == 0;
#line 1837
  if (_b != 0) {
#line 1837
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_Data", (char *)"data_size == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1837);
  } else {

  }
#line 1837
  if (_b != 0) {
#line 1837
    return (0);
  } else {

  }
#line 1839
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1839
  if (tmp != header_size) {
#line 1840
    return (0);
  } else {

  }
#line 1842
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1842
  if (tmp___3 == 0) {
#line 1843
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_Data");
#line 1843
    if (tmp___0 != 0) {
#line 1844
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write mirrored data block to local disk.\n");
    } else {

    }
#line 1846
    spin_lock(& mdev->peer_seq_lock);
#line 1847
    tmp___1 = __fswab32(p->seq_num);
#line 1847
    if (mdev->peer_seq + 1U == tmp___1) {
#line 1848
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1849
    spin_unlock(& mdev->peer_seq_lock);
#line 1851
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
#line 1852
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1853
    tmp___2 = drbd_drain_block(mdev, data_size);
#line 1853
    return (tmp___2);
  } else {

  }
#line 1861
  tmp___4 = __fswab64(p->sector);
#line 1861
  sector = (sector_t )tmp___4;
#line 1862
  e = read_in_block(mdev, p->block_id, sector, data_size);
#line 1863
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1864
    put_ldev(mdev);
#line 1865
    return (0);
  } else {

  }
#line 1868
  e->w.cb = & e_end_block;
#line 1870
  spin_lock(& mdev->epoch_lock);
#line 1871
  e->epoch = mdev->current_epoch;
#line 1872
  atomic_inc(& (e->epoch)->epoch_size);
#line 1873
  atomic_inc(& (e->epoch)->active);
#line 1875
  if ((unsigned int )mdev->write_ordering == 3U) {
#line 1875
    tmp___7 = atomic_read((atomic_t const   *)(& (e->epoch)->epoch_size));
#line 1875
    if (tmp___7 == 1) {
#line 1880
      __mptr = (struct list_head  const  *)(e->epoch)->list.prev;
#line 1880
      epoch = (struct drbd_epoch *)__mptr;
#line 1881
      if ((unsigned long )e->epoch == (unsigned long )epoch) {
#line 1882
        set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1883
        rw = rw | 16;
#line 1884
        e->flags = e->flags | 4UL;
      } else {
#line 1886
        tmp___5 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1886
        if (tmp___5 > 1) {
#line 1888
          set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1889
          set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1890
          rw = rw | 16;
#line 1891
          e->flags = e->flags | 4UL;
        } else {
#line 1886
          tmp___6 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1886
          if (tmp___6 == 0) {
#line 1888
            set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1889
            set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1890
            rw = rw | 16;
#line 1891
            e->flags = e->flags | 4UL;
          } else {

          }
        }
      }
    } else {

    }
  } else {

  }
#line 1895
  spin_unlock(& mdev->epoch_lock);
#line 1897
  tmp___8 = __fswab32(p->dp_flags);
#line 1897
  dp_flags = tmp___8;
#line 1898
  if ((int )dp_flags & 1) {
#line 1899
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED would have submitted barrier request\n");
  } else {

  }
#line 1902
  if ((dp_flags & 2U) != 0U) {
#line 1903
    rw = rw | 544;
  } else {

  }
#line 1904
  if ((dp_flags & 4U) != 0U) {
#line 1905
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1908
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1909
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1913
    size = (int const   )e->size;
#line 1914
    tmp___9 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 1914
    discard = tmp___9;
#line 1915
    tmp___10 = get_current();
#line 1915
    wait.flags = 0U;
#line 1915
    wait.private = (void *)tmp___10;
#line 1915
    wait.func = & autoremove_wake_function;
#line 1915
    wait.task_list.next = & wait.task_list;
#line 1915
    wait.task_list.prev = & wait.task_list;
#line 1921
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1921
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1921);
    } else {

    }
#line 1922
    tmp___11 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1922
    if (tmp___11 != 0L) {
#line 1922
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1922), "i" (12UL));
      ldv_45369: ;
#line 1922
      goto ldv_45369;
    } else {

    }
#line 1923
    tmp___12 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1923
    if (tmp___12 != 0L) {
#line 1923
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1923), "i" (12UL));
      ldv_45370: ;
#line 1923
      goto ldv_45370;
    } else {

    }
#line 1959
    tmp___13 = __fswab32(p->seq_num);
#line 1959
    tmp___14 = drbd_wait_peer_seq(mdev, tmp___13);
#line 1959
    if (tmp___14 != 0) {
#line 1960
      goto out_interrupted;
    } else {

    }
#line 1962
    spin_lock_irq(& mdev->req_lock);
#line 1964
    tmp___15 = ee_hash_slot(mdev, sector);
#line 1964
    hlist_add_head(& e->colision, tmp___15);
#line 1967
    slot = tl_hash_slot(mdev, sector);
#line 1968
    first = 1;
    ldv_45382: 
#line 1970
    have_unacked = 0;
#line 1971
    have_conflict = 0;
#line 1972
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1974
    n = slot->first;
#line 1974
    goto ldv_45379;
    ldv_45378: 
#line 1975
    tmp___18 = overlaps(i->sector, (int )i->size, sector, size);
#line 1975
    if (tmp___18 != 0) {
#line 1978
      if (first != 0) {
#line 1979
        tmp___16 = get_current();
#line 1979
        tmp___17 = get_current();
#line 1979
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___17->comm), tmp___16->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1984
      if ((i->rq_state & 8UL) != 0UL) {
#line 1985
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1986
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1974
    n = n->next;
    ldv_45379: ;
#line 1974
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1974
      __builtin_prefetch((void const   *)n->next);
#line 1974
      if (1 != 0) {
#line 1974
        __mptr___0 = (struct hlist_node  const  *)n;
#line 1974
        i = (struct drbd_request *)__mptr___0 + 0xffffffffffffffd8UL;
#line 1974
        if (1 != 0) {
#line 1975
          goto ldv_45378;
        } else {
#line 1977
          goto ldv_45380;
        }
      } else {
#line 1977
        goto ldv_45380;
      }
    } else {

    }
    ldv_45380: ;
#line 1990
    if (have_conflict == 0) {
#line 1991
      goto ldv_45381;
    } else {

    }
#line 1994
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1995
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1997
      inc_unacked(mdev);
#line 1998
      e->w.cb = & e_send_discard_ack;
#line 1999
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 2001
      spin_unlock_irq(& mdev->req_lock);
#line 2006
      put_ldev(mdev);
#line 2007
      wake_asender(mdev);
#line 2008
      finish_wait(& mdev->misc_wait, & wait);
#line 2009
      return (1);
    } else {

    }
#line 2012
    tmp___19 = get_current();
#line 2012
    tmp___20 = signal_pending(tmp___19);
#line 2012
    if (tmp___20 != 0) {
#line 2013
      hlist_del_init(& e->colision);
#line 2015
      spin_unlock_irq(& mdev->req_lock);
#line 2017
      finish_wait(& mdev->misc_wait, & wait);
#line 2018
      goto out_interrupted;
    } else {

    }
#line 2021
    spin_unlock_irq(& mdev->req_lock);
#line 2022
    if (first != 0) {
#line 2023
      first = 0;
#line 2024
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 2026
    if (discard != 0) {
#line 2029
      if (have_unacked != 0) {
#line 2029
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2029);
      } else {

      }
    } else {

    }
#line 2031
    schedule();
#line 2032
    spin_lock_irq(& mdev->req_lock);
#line 2033
    goto ldv_45382;
    ldv_45381: 
#line 2034
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 2037
  list_add(& e->w.list, & mdev->active_ee);
#line 2038
  spin_unlock_irq(& mdev->req_lock);
#line 2040
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 2042
  inc_unacked(mdev);
#line 2045
  goto ldv_45384;
  case 2: 
#line 2049
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 2050
  goto ldv_45384;
  case 1: ;
#line 2053
  goto ldv_45384;
  }
  ldv_45384: ;
#line 2056
  if (*((unsigned int *)mdev + 455UL) == 0U) {
#line 2058
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           2058U);
#line 2059
    e->flags = e->flags | 1UL;
#line 2060
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 2063
  tmp___21 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 2063
  if (tmp___21 == 0) {
#line 2064
    return (1);
  } else {

  }
  out_interrupted: 
#line 2070
  put_ldev(mdev);
#line 2071
  drbd_free_ee(mdev, e);
#line 2072
  return (0);
}
}
#line 2075 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int digest_size ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  int brps ;
  int tmp___0 ;
  __u64 tmp___1 ;
  __u32 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  void *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  struct task_struct *tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;

  {
#line 2078
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 2078
  capacity = tmp;
#line 2080
  di = 0;
#line 2083
  p = (struct p_block_req *)h;
#line 2085
  brps = 24;
#line 2087
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )brps);
#line 2087
  if (tmp___0 != brps) {
#line 2088
    return (0);
  } else {

  }
#line 2090
  tmp___1 = __fswab64(p->sector);
#line 2090
  sector = (sector_t )tmp___1;
#line 2091
  tmp___2 = __fswab32(p->blksize);
#line 2091
  size = (int )tmp___2;
#line 2093
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 2094
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2094, (unsigned long long )sector, size);
#line 2096
    return (0);
  } else {

  }
#line 2098
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2099
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2099, (unsigned long long )sector, size);
#line 2101
    return (0);
  } else {

  }
#line 2104
  tmp___5 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2104
  if (tmp___5 == 0) {
#line 2105
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2105
    if (tmp___3 != 0) {
#line 2106
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
    } else {

    }
#line 2108
    drbd_send_ack_rp(mdev, (unsigned int )h->command == 8U ? P_NEG_DREPLY : P_NEG_RS_DREPLY,
                     p);
#line 2110
    tmp___4 = drbd_drain_block(mdev, (int )h->length - brps);
#line 2110
    return (tmp___4);
  } else {

  }
#line 2116
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2117
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2118
    put_ldev(mdev);
#line 2119
    return (0);
  } else {

  }
#line 2122
  switch ((int )h->command) {
  case 8: 
#line 2124
  e->w.cb = & w_e_end_data_req;
#line 2125
  fault_type = 5U;
#line 2126
  goto ldv_45402;
  case 9: 
#line 2128
  e->w.cb = & w_e_end_rsdata_req;
#line 2129
  fault_type = 3U;
#line 2135
  tmp___8 = drbd_rs_begin_io(mdev, sector);
#line 2135
  if (tmp___8 == 0) {
#line 2138
    tmp___6 = get_current();
#line 2138
    tmp___7 = signal_pending(tmp___6);
#line 2138
    if (tmp___7 == 0) {
#line 2138
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( signal_pending(current) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2138);
    } else {

    }
#line 2139
    goto out_free_e;
  } else {

  }
#line 2141
  goto ldv_45402;
  case 31: ;
  case 33: 
#line 2145
  fault_type = 3U;
#line 2146
  digest_size = (int )h->length - brps;
#line 2147
  tmp___9 = kmalloc___1((unsigned long )digest_size + 16UL, 16U);
#line 2147
  di = (struct digest_info *)tmp___9;
#line 2148
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2149
    goto out_free_e;
  } else {

  }
#line 2151
  di->digest_size = digest_size;
#line 2152
  di->digest = (void *)di + 16U;
#line 2154
  tmp___10 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2154
  if (tmp___10 != digest_size) {
#line 2155
    goto out_free_e;
  } else {

  }
#line 2157
  e->block_id = (unsigned long long )di;
#line 2158
  if ((unsigned int )h->command == 33U) {
#line 2159
    if (mdev->agreed_pro_version <= 88) {
#line 2159
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2159);
    } else {

    }
#line 2160
    e->w.cb = & w_e_end_csum_rs_req;
  } else
#line 2161
  if ((unsigned int )h->command == 31U) {
#line 2162
    e->w.cb = & w_e_end_ov_reply;
#line 2163
    atomic_dec(& mdev->rs_pending_cnt);
#line 2163
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2163
    if (tmp___12 < 0) {
#line 2163
      tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2163
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2163, tmp___11);
    } else {

    }
#line 2164
    goto ldv_45402;
  } else {

  }
#line 2167
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 2167
  if (tmp___15 == 0) {
#line 2169
    tmp___13 = get_current();
#line 2169
    tmp___14 = signal_pending(tmp___13);
#line 2169
    if (tmp___14 == 0) {
#line 2169
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( signal_pending(current) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2169);
    } else {

    }
#line 2170
    goto out_free_e;
  } else {

  }
#line 2172
  goto ldv_45402;
  case 30: ;
#line 2175
  if ((int )mdev->state.ldv_35202.conn > 9 && (unsigned int )*((unsigned short *)mdev + 910UL) != 304U) {
#line 2177
    tmp___16 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35202.conn);
#line 2177
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: got P_OV_REQUEST while being %s\n",
             tmp___16);
  } else {

  }
#line 2179
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2181
    mdev->ov_start_sector = sector;
#line 2182
    mdev->ov_position = sector;
#line 2183
    mdev->ov_left = mdev->rs_total - (sector >> 3);
#line 2184
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2187
  e->w.cb = & w_e_end_ov_req;
#line 2188
  fault_type = 3U;
#line 2194
  tmp___19 = drbd_rs_begin_io(mdev, sector);
#line 2194
  if (tmp___19 == 0) {
#line 2197
    tmp___17 = get_current();
#line 2197
    tmp___18 = signal_pending(tmp___17);
#line 2197
    if (tmp___18 == 0) {
#line 2197
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( signal_pending(current) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2197);
    } else {

    }
#line 2198
    goto out_free_e;
  } else {

  }
#line 2200
  goto ldv_45402;
  default: 
#line 2204
  tmp___20 = cmdname((enum drbd_packets )h->command);
#line 2204
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___20);
#line 2206
  fault_type = 10U;
  }
  ldv_45402: 
#line 2209
  spin_lock_irq(& mdev->req_lock);
#line 2210
  list_add(& e->w.list, & mdev->read_ee);
#line 2211
  spin_unlock_irq(& mdev->req_lock);
#line 2213
  inc_unacked(mdev);
#line 2215
  tmp___21 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2215
  if (tmp___21 == 0) {
#line 2216
    return (1);
  } else {

  }
  out_free_e: 
#line 2219
  kfree((void const   *)di);
#line 2220
  put_ldev(mdev);
#line 2221
  drbd_free_ee(mdev, e);
#line 2222
  return (0);
}
}
#line 2225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2227
  rv = -100;
#line 2230
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2231
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2233
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2234
  ch_self = mdev->comm_bm_set;
#line 2236
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2240
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2241
  goto ldv_45423;
  case 0: ;
#line 2243
  goto ldv_45423;
  case 1: ;
#line 2245
  if (self == 0 && peer == 1) {
#line 2246
    rv = -1;
#line 2247
    goto ldv_45423;
  } else {

  }
#line 2249
  if (self == 1 && peer == 0) {
#line 2250
    rv = 1;
#line 2251
    goto ldv_45423;
  } else {

  }
  case 2: ;
#line 2255
  if (self == 0 && peer == 1) {
#line 2256
    rv = 1;
#line 2257
    goto ldv_45423;
  } else {

  }
#line 2259
  if (self == 1 && peer == 0) {
#line 2260
    rv = -1;
#line 2261
    goto ldv_45423;
  } else {

  }
#line 2264
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2267
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2268
    tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2268
    rv = tmp != 0 ? -1 : 1;
#line 2270
    goto ldv_45423;
  } else {
#line 2272
    if (ch_peer == 0UL) {
#line 2272
      rv = 1;
#line 2272
      goto ldv_45423;
    } else {

    }
#line 2273
    if (ch_self == 0UL) {
#line 2273
      rv = -1;
#line 2273
      goto ldv_45423;
    } else {

    }
  }
#line 2275
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2276
    goto ldv_45423;
  } else {

  }
  case 4: ;
#line 2278
  if (ch_self < ch_peer) {
#line 2279
    rv = -1;
  } else
#line 2280
  if (ch_self > ch_peer) {
#line 2281
    rv = 1;
  } else {
#line 2284
    tmp___0 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2284
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2286
  goto ldv_45423;
  case 5: 
#line 2288
  rv = -1;
#line 2289
  goto ldv_45423;
  case 6: 
#line 2291
  rv = 1;
  }
  ldv_45423: ;
#line 2294
  return (rv);
}
}
#line 2297 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2299
  rv = -100;
#line 2301
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2302
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2304
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2310
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2311
  goto ldv_45443;
  case 0: ;
#line 2313
  goto ldv_45443;
  case 7: 
#line 2315
  hg = drbd_asb_recover_0p(mdev);
#line 2316
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 2U) {
#line 2317
    rv = hg;
  } else {

  }
#line 2318
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 2319
    rv = hg;
  } else {

  }
#line 2320
  goto ldv_45443;
  case 10: 
#line 2322
  rv = drbd_asb_recover_0p(mdev);
#line 2323
  goto ldv_45443;
  case 8: ;
#line 2325
  return ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U ? 1 : -1);
  case 9: 
#line 2327
  hg = drbd_asb_recover_0p(mdev);
#line 2328
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 2329
    self = drbd_set_role(mdev, R_SECONDARY, 0);
#line 2333
    val.i = 0U;
#line 2333
    val.ldv_35202.role = 2U;
#line 2333
    mask.i = 0U;
#line 2333
    mask.ldv_35202.role = 3U;
#line 2333
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2334
    if (self != 1) {
#line 2335
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2337
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2338
      rv = hg;
    }
  } else {
#line 2341
    rv = hg;
  }
  }
  ldv_45443: ;
#line 2344
  return (rv);
}
}
#line 2347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2349
  rv = -100;
#line 2351
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2352
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2354
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2362
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2363
  goto ldv_45467;
  case 10: 
#line 2365
  rv = drbd_asb_recover_0p(mdev);
#line 2366
  goto ldv_45467;
  case 0: ;
#line 2368
  goto ldv_45467;
  case 9: 
#line 2370
  hg = drbd_asb_recover_0p(mdev);
#line 2371
  if (hg == -1) {
#line 2375
    val.i = 0U;
#line 2375
    val.ldv_35202.role = 2U;
#line 2375
    mask.i = 0U;
#line 2375
    mask.ldv_35202.role = 3U;
#line 2375
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2376
    if (self != 1) {
#line 2377
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2379
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2380
      rv = hg;
    }
  } else {
#line 2383
    rv = hg;
  }
  }
  ldv_45467: ;
#line 2386
  return (rv);
}
}
#line 2389 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2392
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2393
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2394
    return;
  } else {

  }
#line 2396
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2397
  return;
}
}
#line 2416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2421
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2422
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2424
  *rule_nr = 10;
#line 2425
  if (self == 4ULL && peer == 4ULL) {
#line 2426
    return (0);
  } else {

  }
#line 2428
  *rule_nr = 20;
#line 2429
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2431
    return (-2);
  } else {

  }
#line 2433
  *rule_nr = 30;
#line 2434
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2436
    return (2);
  } else {

  }
#line 2438
  if (self == peer) {
#line 2441
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2443
      if (mdev->agreed_pro_version <= 90) {
#line 2444
        return (-1001);
      } else {

      }
#line 2446
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2448
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2449
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2451
        if ((int )mdev->state.ldv_35202.disk > 2) {
#line 2451
          tmp = drbd_bm_total_weight(mdev);
#line 2451
          tmp___0 = (u64 )tmp;
        } else {
#line 2451
          tmp___0 = 0ULL;
        }
#line 2451
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2453
        *rule_nr = 34;
      } else {
#line 2455
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2456
        *rule_nr = 36;
      }
#line 2459
      return (1);
    } else {

    }
#line 2462
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2464
      if (mdev->agreed_pro_version <= 90) {
#line 2465
        return (-1001);
      } else {

      }
#line 2467
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2469
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2471
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2472
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2473
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2475
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2476
        *rule_nr = 35;
      } else {
#line 2478
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2479
        *rule_nr = 37;
      }
#line 2482
      return (-1);
    } else {

    }
#line 2486
    tmp___1 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 2486
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2490
    *rule_nr = 40;
#line 2492
    switch (rct) {
    case 0: ;
#line 2493
    return (0);
    case 1: ;
#line 2494
    return (1);
    case 2: ;
#line 2495
    return (-1);
    case 3: 
#line 2497
    dc = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2498
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2502
  *rule_nr = 50;
#line 2503
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2504
  if (self == peer) {
#line 2505
    return (-1);
  } else {

  }
#line 2507
  *rule_nr = 51;
#line 2508
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2509
  if (self == peer) {
#line 2510
    self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2511
    peer = *(mdev->p_uuid + 3UL) & 0xfffffffffffffffeULL;
#line 2512
    if (self == peer) {
#line 2516
      if (mdev->agreed_pro_version <= 90) {
#line 2517
        return (-1001);
      } else {

      }
#line 2519
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2520
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2521
      return (-1);
    } else {

    }
  } else {

  }
#line 2525
  *rule_nr = 60;
#line 2526
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2527
  i = 2;
#line 2527
  goto ldv_45497;
  ldv_45496: 
#line 2528
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2529
  if (self == peer) {
#line 2530
    return (-2);
  } else {

  }
#line 2527
  i = i + 1;
  ldv_45497: ;
#line 2527
  if (i <= 3) {
#line 2528
    goto ldv_45496;
  } else {

  }
#line 2533
  *rule_nr = 70;
#line 2534
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2535
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2536
  if (self == peer) {
#line 2537
    return (1);
  } else {

  }
#line 2539
  *rule_nr = 71;
#line 2540
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2541
  if (self == peer) {
#line 2542
    self = (mdev->ldev)->md.uuid[3] & 0xfffffffffffffffeULL;
#line 2543
    peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2544
    if (self == peer) {
#line 2548
      if (mdev->agreed_pro_version <= 90) {
#line 2549
        return (-1001);
      } else {

      }
#line 2551
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2552
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2554
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Undid last start of resync:\n");
#line 2556
      if ((int )mdev->state.ldv_35202.disk > 2) {
#line 2556
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2556
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2556
        tmp___3 = 0ULL;
      }
#line 2556
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2559
      return (1);
    } else {

    }
  } else {

  }
#line 2564
  *rule_nr = 80;
#line 2565
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2566
  i = 2;
#line 2566
  goto ldv_45500;
  ldv_45499: 
#line 2567
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2568
  if (self == peer) {
#line 2569
    return (2);
  } else {

  }
#line 2566
  i = i + 1;
  ldv_45500: ;
#line 2566
  if (i <= 3) {
#line 2567
    goto ldv_45499;
  } else {

  }
#line 2572
  *rule_nr = 90;
#line 2573
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2574
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2575
  if (self == peer && self != 0ULL) {
#line 2576
    return (100);
  } else {

  }
#line 2578
  *rule_nr = 100;
#line 2579
  i = 2;
#line 2579
  goto ldv_45506;
  ldv_45505: 
#line 2580
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2581
  j = 2;
#line 2581
  goto ldv_45503;
  ldv_45502: 
#line 2582
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2583
  if (self == peer) {
#line 2584
    return (-100);
  } else {

  }
#line 2581
  j = j + 1;
  ldv_45503: ;
#line 2581
  if (j <= 3) {
#line 2582
    goto ldv_45502;
  } else {

  }
#line 2579
  i = i + 1;
  ldv_45506: ;
#line 2579
  if (i <= 3) {
#line 2580
    goto ldv_45505;
  } else {

  }

#line 2588
  return (-1000);
}
}
#line 2594 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long __x ;
  int tmp ;
  long __x___0 ;
  int pcount ;
  int forced ;
  long __x___1 ;
  long __x___2 ;
  long __x___3 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long __x___4 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2598
  rv = C_MASK;
#line 2601
  mydisk = (enum drbd_disk_state )mdev->state.ldv_35202.disk;
#line 2602
  if ((unsigned int )mydisk == 3U) {
#line 2603
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_35202.disk;
  } else {

  }
#line 2605
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2606
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2607
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2610
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2612
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2614
  if (hg == -1000) {
#line 2615
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2616
    return (C_MASK);
  } else {

  }
#line 2618
  if (hg == -1001) {
#line 2619
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol\n");
#line 2620
    return (C_MASK);
  } else {

  }
#line 2623
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2625
    if (hg == -100) {
#line 2625
      tmp = 1;
    } else {
#line 2625
      __x = (long )hg;
#line 2625
      if ((__x < 0L ? - __x : __x) == 2L) {
#line 2625
        tmp = 1;
      } else {
#line 2625
        tmp = 0;
      }
    }
#line 2625
    f = tmp;
#line 2626
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2627
    if (f != 0) {
#line 2628
      hg = hg * 2;
    } else {

    }
#line 2629
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2633
  __x___0 = (long )hg;
#line 2633
  if ((__x___0 < 0L ? - __x___0 : __x___0) == 100L) {
#line 2634
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2636
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U)) {
#line 2637
    pcount = ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2639
    forced = hg == -100;
#line 2641
    switch (pcount) {
    case 0: 
#line 2643
    hg = drbd_asb_recover_0p(mdev);
#line 2644
    goto ldv_45525;
    case 1: 
#line 2646
    hg = drbd_asb_recover_1p(mdev);
#line 2647
    goto ldv_45525;
    case 2: 
#line 2649
    hg = drbd_asb_recover_2p(mdev);
#line 2650
    goto ldv_45525;
    }
    ldv_45525: 
#line 2652
    __x___1 = (long )hg;
#line 2652
    if ((__x___1 < 0L ? - __x___1 : __x___1) <= 99L) {
#line 2653
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2656
      if (forced != 0) {
#line 2657
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2659
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2664
  if (hg == -100) {
#line 2665
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2666
      hg = -1;
    } else {

    }
#line 2667
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2668
      hg = 1;
    } else {

    }
#line 2670
    __x___2 = (long )hg;
#line 2670
    if ((__x___2 < 0L ? - __x___2 : __x___2) <= 99L) {
#line 2671
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2676
  if (hg == -100) {
#line 2681
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2682
    drbd_khelper(mdev, (char *)"split-brain");
#line 2683
    return (C_MASK);
  } else {

  }
#line 2686
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2687
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2688
    return (C_MASK);
  } else {

  }
#line 2691
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) && (int )mdev->state.ldv_35202.disk > 6) {
#line 2693
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2695
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2698
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2699
    return (C_MASK);
    case 10: 
#line 2701
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2706
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2706
    goto _L;
  } else {
#line 2706
    tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2706
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2707
      if (hg == 0) {
#line 2708
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2710
        __x___3 = (long )hg;
#line 2710
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2710
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, (__x___3 < 0L ? - __x___3 : __x___3) > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2713
      return (C_MASK);
    } else {

    }
  }
#line 2716
  __x___4 = (long )hg;
#line 2716
  if ((__x___4 < 0L ? - __x___4 : __x___4) > 1L) {
#line 2717
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2718
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake");
#line 2718
    if (tmp___2 != 0) {
#line 2719
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2722
  if (hg > 0) {
#line 2723
    rv = C_WF_BITMAP_S;
  } else
#line 2724
  if (hg < 0) {
#line 2725
    rv = C_WF_BITMAP_T;
  } else {
#line 2727
    rv = C_CONNECTED;
#line 2728
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2728
    if (tmp___4 != 0UL) {
#line 2729
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2729
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2734
  return (rv);
}
}
#line 2738 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2741
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2743
    return (0);
  } else {

  }
#line 2746
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2748
    return (1);
  } else {

  }
#line 2751
  if ((unsigned int )peer == (unsigned int )self) {
#line 2752
    return (0);
  } else {

  }
#line 2755
  return (1);
}
}
#line 2758 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_protocol *p ;
  int header_size ;
  int data_size ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *my_alg ;
  int tmp___10 ;
  int tmp___11 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2760
  p = (struct p_protocol *)h;
#line 2764
  p_integrity_alg[0] = '\000';
#line 2764
  tmp = 1U;
#line 2764
  while (1) {
#line 2764
    if (tmp >= 64U) {
#line 2764
      break;
    } else {

    }
#line 2764
    p_integrity_alg[tmp] = (char)0;
#line 2764
    tmp = tmp + 1U;
  }
#line 2766
  header_size = 24;
#line 2767
  data_size = (int )h->length - header_size;
#line 2769
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2769
  if (tmp___0 != header_size) {
#line 2770
    return (0);
  } else {

  }
#line 2772
  tmp___1 = __fswab32(p->protocol);
#line 2772
  p_proto = (int )tmp___1;
#line 2773
  tmp___2 = __fswab32(p->after_sb_0p);
#line 2773
  p_after_sb_0p = (int )tmp___2;
#line 2774
  tmp___3 = __fswab32(p->after_sb_1p);
#line 2774
  p_after_sb_1p = (int )tmp___3;
#line 2775
  tmp___4 = __fswab32(p->after_sb_2p);
#line 2775
  p_after_sb_2p = (int )tmp___4;
#line 2776
  tmp___5 = __fswab32(p->two_primaries);
#line 2776
  p_two_primaries = (int )tmp___5;
#line 2777
  tmp___6 = __fswab32(p->conn_flags);
#line 2777
  cf = (int )tmp___6;
#line 2778
  p_want_lose = cf & 1;
#line 2780
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2782
  if ((cf & 2) != 0) {
#line 2783
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2785
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2786
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2787
    goto disconnect;
  } else {

  }
#line 2790
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2790
  if (tmp___7 != 0) {
#line 2791
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2792
    goto disconnect;
  } else {

  }
#line 2795
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2795
  if (tmp___8 != 0) {
#line 2796
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2797
    goto disconnect;
  } else {

  }
#line 2800
  tmp___9 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2800
  if (tmp___9 != 0) {
#line 2801
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2802
    goto disconnect;
  } else {

  }
#line 2805
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2806
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2807
    goto disconnect;
  } else {

  }
#line 2810
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2811
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2812
    goto disconnect;
  } else {

  }
#line 2815
  if (mdev->agreed_pro_version > 86) {
#line 2816
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2818
    tmp___10 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2818
    if (tmp___10 != data_size) {
#line 2819
      return (0);
    } else {

    }
#line 2821
    p_integrity_alg[63] = 0;
#line 2822
    tmp___11 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2822
    if (tmp___11 != 0) {
#line 2823
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2824
      goto disconnect;
    } else {

    }
#line 2826
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2830
  return (1);
  disconnect: 
#line 2833
  val.i = 0U;
#line 2833
  val.ldv_35202.conn = 1U;
#line 2833
  mask.i = 0U;
#line 2833
  mask.ldv_35202.conn = 31U;
#line 2833
  drbd_force_state(mdev, mask, val);
#line 2834
  return (0);
}
}
#line 2842 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2847
  if ((int )((signed char )*alg) == 0) {
#line 2848
    return (0);
  } else {

  }
#line 2850
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2851
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2851
  if (tmp___0 != 0L) {
#line 2852
    tmp = PTR_ERR((void const   *)tfm);
#line 2852
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2854
    return (tfm);
  } else {

  }
#line 2856
  tmp___2 = crypto_hash_tfm(tfm);
#line 2856
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2856
  if (tmp___3 == 0) {
#line 2857
    crypto_free_hash(tfm);
#line 2858
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2859
    tmp___1 = ERR_PTR(-22L);
#line 2859
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2861
  return (tfm);
}
}
#line 2864 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int ok ;
  struct p_rs_param_89 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  size_t tmp___6 ;
  size_t tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2866
  ok = 1;
#line 2867
  p = (struct p_rs_param_89 *)h;
#line 2869
  verify_tfm = 0;
#line 2870
  csums_tfm = 0;
#line 2871
  apv = mdev->agreed_pro_version;
#line 2873
  exp_max_sz = apv > 87 ? (apv == 88 ? 76U : 140U) : 12U;
#line 2878
  if ((unsigned int )h->length > exp_max_sz) {
#line 2879
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            (int )h->length, exp_max_sz);
#line 2881
    return (0);
  } else {

  }
#line 2884
  if (apv <= 88) {
#line 2885
    header_size = 4U;
#line 2886
    data_size = (unsigned int )h->length - header_size;
  } else {
#line 2888
    header_size = 132U;
#line 2889
    data_size = (unsigned int )h->length - header_size;
#line 2890
    if (data_size != 0U) {
#line 2890
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2890);
    } else {

    }
  }
#line 2894
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2896
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2896
  if ((unsigned int )tmp != header_size) {
#line 2897
    return (0);
  } else {

  }
#line 2899
  tmp___0 = __fswab32(p->rate);
#line 2899
  mdev->sync_conf.rate = (int )tmp___0;
#line 2901
  if (apv > 87) {
#line 2902
    if (apv == 88) {
#line 2903
      if (data_size > 64U) {
#line 2904
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg too long, peer wants %u, accepting only %u byte\n",
                data_size, 64);
#line 2907
        return (0);
      } else {

      }
#line 2910
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2910
      if ((unsigned int )tmp___1 != data_size) {
#line 2911
        return (0);
      } else {

      }
#line 2915
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2915
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2915);
      } else {

      }
#line 2916
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2921
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2921
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2921);
      } else {

      }
#line 2922
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2922
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2922);
      } else {

      }
#line 2923
      p->verify_alg[63] = 0;
#line 2924
      p->csums_alg[63] = 0;
    }
#line 2927
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2927
    if (tmp___3 != 0) {
#line 2928
      if ((unsigned int )*((unsigned short *)mdev + 910UL) == 144U) {
#line 2929
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2931
        goto disconnect;
      } else {

      }
#line 2933
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2935
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2935
      if (tmp___2 != 0L) {
#line 2936
        verify_tfm = 0;
#line 2937
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2941
    if (apv > 88) {
#line 2941
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2941
      if (tmp___5 != 0) {
#line 2942
        if ((unsigned int )*((unsigned short *)mdev + 910UL) == 144U) {
#line 2943
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2945
          goto disconnect;
        } else {

        }
#line 2947
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2949
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2949
        if (tmp___4 != 0L) {
#line 2950
          csums_tfm = 0;
#line 2951
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2956
    spin_lock(& mdev->peer_seq_lock);
#line 2958
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2959
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2960
      tmp___6 = strlen((char const   *)(& p->verify_alg));
#line 2960
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___6 + 1U);
#line 2961
      crypto_free_hash(mdev->verify_tfm);
#line 2962
      mdev->verify_tfm = verify_tfm;
#line 2963
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 2965
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2966
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2967
      tmp___7 = strlen((char const   *)(& p->csums_alg));
#line 2967
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___7 + 1U);
#line 2968
      crypto_free_hash(mdev->csums_tfm);
#line 2969
      mdev->csums_tfm = csums_tfm;
#line 2970
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 2972
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2975
  return (ok);
  disconnect: 
#line 2979
  crypto_free_hash(csums_tfm);
#line 2981
  crypto_free_hash(verify_tfm);
#line 2982
  val.i = 0U;
#line 2982
  val.ldv_35202.conn = 1U;
#line 2982
  mask.i = 0U;
#line 2982
  mask.ldv_35202.conn = 31U;
#line 2982
  drbd_force_state(mdev, mask, val);
#line 2983
  return (0);
}
}
#line 2986 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setup_order_type(struct drbd_conf *mdev , int peer ) 
{ 


  {
#line 2988
  return;
}
}
#line 2993 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 2997
  if (a == 0UL || b == 0UL) {
#line 2998
    return;
  } else {

  }
#line 2999
  d = a > b ? a - b : b - a;
#line 3000
  if (a >> 3 < d || b >> 3 < d) {
#line 3001
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 3003
  return;
}
}
#line 3005 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  unsigned int max_seg_s ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  int _b ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___2 ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  sector_t tmp___9 ;
  __u32 tmp___10 ;
  unsigned int tmp___11 ;
  __u16 tmp___12 ;
  int tmp___13 ;
  __u64 tmp___14 ;
  sector_t tmp___15 ;
  int tmp___16 ;

  {
#line 3007
  p = (struct p_sizes *)h;
#line 3008
  dd = 0;
#line 3011
  ldsc = 0;
#line 3014
  _b = (unsigned int )h->length != 32U;
#line 3014
  if (_b != 0) {
#line 3014
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_sizes", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3014);
  } else {

  }
#line 3014
  if (_b != 0) {
#line 3014
    return (0);
  } else {

  }
#line 3015
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3015
  if (tmp != (int )h->length) {
#line 3016
    return (0);
  } else {

  }
#line 3018
  tmp___0 = __fswab64(p->d_size);
#line 3018
  p_size = (sector_t )tmp___0;
#line 3019
  tmp___1 = __fswab64(p->u_size);
#line 3019
  p_usize = (sector_t )tmp___1;
#line 3021
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 1821UL) == 0U) {
#line 3022
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 3023
    val.i = 0U;
#line 3023
    val.ldv_35202.conn = 1U;
#line 3023
    mask.i = 0U;
#line 3023
    mask.ldv_35202.conn = 31U;
#line 3023
    drbd_force_state(mdev, mask, val);
#line 3024
    return (0);
  } else {

  }
#line 3029
  mdev->p_size = p_size;
#line 3032
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3032
  if (tmp___6 != 0) {
#line 3033
    tmp___2 = drbd_get_max_capacity(mdev->ldev);
#line 3033
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___2);
#line 3035
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 3040
    if ((unsigned int )*((unsigned short *)mdev + 910UL) == 144U) {
#line 3041
      if ((unsigned long )(mdev->ldev)->dc.disk_size != 0UL) {
#line 3041
        if (p_usize == 0UL) {
#line 3041
          tmp___3 = (unsigned long )(mdev->ldev)->dc.disk_size;
        } else {
#line 3041
          _min1 = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 3041
          _min2 = p_usize;
#line 3041
          tmp___3 = _min1 < _min2 ? _min1 : _min2;
        }
#line 3041
        p_usize = tmp___3;
      } else {
#line 3041
        p_usize = p_usize;
      }
    } else {

    }
#line 3044
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 3046
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 3047
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 3048
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 3054
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 3054
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 3054
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_35202.disk > 4) && (int )mdev->state.ldv_35202.conn <= 9) {
#line 3058
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 3059
      val___0.i = 0U;
#line 3059
      val___0.ldv_35202.conn = 1U;
#line 3059
      mask___0.i = 0U;
#line 3059
      mask___0.ldv_35202.conn = 31U;
#line 3059
      drbd_force_state(mdev, mask___0, val___0);
#line 3060
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 3061
      put_ldev(mdev);
#line 3062
      return (0);
    } else {

    }
#line 3064
    put_ldev(mdev);
  } else {

  }
#line 3068
  tmp___7 = __fswab16((int )p->dds_flags);
#line 3068
  ddsf = (enum dds_flags )tmp___7;
#line 3069
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3069
  if (tmp___8 != 0) {
#line 3070
    dd = drbd_determin_dev_size(mdev, ddsf);
#line 3071
    put_ldev(mdev);
#line 3072
    if ((int )dd == -1) {
#line 3073
      return (0);
    } else {

    }
#line 3074
    drbd_md_sync(mdev);
  } else {
#line 3077
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3080
  tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3080
  if (tmp___13 != 0) {
#line 3081
    tmp___9 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3081
    if ((mdev->ldev)->known_size != tmp___9) {
#line 3082
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3083
      ldsc = 1;
    } else {

    }
#line 3086
    if (mdev->agreed_pro_version <= 93) {
#line 3087
      tmp___10 = __fswab32(p->max_segment_size);
#line 3087
      max_seg_s = tmp___10;
    } else {
#line 3089
      max_seg_s = 32768U;
    }
#line 3091
    tmp___11 = queue_max_segment_size(mdev->rq_queue);
#line 3091
    if (tmp___11 != max_seg_s) {
#line 3092
      drbd_setup_queue_param(mdev, max_seg_s);
    } else {

    }
#line 3094
    tmp___12 = __fswab16((int )p->queue_order_type);
#line 3094
    drbd_setup_order_type(mdev, (int )tmp___12);
#line 3095
    put_ldev(mdev);
  } else {

  }
#line 3098
  if ((int )mdev->state.ldv_35202.conn > 9) {
#line 3099
    tmp___14 = __fswab64(p->c_size);
#line 3099
    tmp___15 = drbd_get_capacity(mdev->this_bdev);
#line 3099
    if (tmp___14 != (unsigned long long )tmp___15 || ldsc != 0) {
#line 3103
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3105
    tmp___16 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3105
    if (tmp___16 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 910UL) == 160U)) {
#line 3107
      if ((int )mdev->state.ldv_35202.pdsk > 3 && (int )mdev->state.ldv_35202.disk > 3) {
#line 3109
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3110
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3112
          resync_after_online_grow(mdev);
        }
      } else {
#line 3114
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3118
  return (1);
}
}
#line 3121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int _b ;
  int tmp ;
  void *tmp___0 ;
  __u64 tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;

  {
#line 3123
  p = (struct p_uuids *)h;
#line 3127
  _b = (unsigned int )h->length != 48U;
#line 3127
  if (_b != 0) {
#line 3127
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_uuids", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3127);
  } else {

  }
#line 3127
  if (_b != 0) {
#line 3127
    return (0);
  } else {

  }
#line 3128
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3128
  if (tmp != (int )h->length) {
#line 3129
    return (0);
  } else {

  }
#line 3131
  tmp___0 = kmalloc___1(48UL, 16U);
#line 3131
  p_uuid = (u64 *)tmp___0;
#line 3133
  i = 0;
#line 3133
  goto ldv_45635;
  ldv_45634: 
#line 3134
  tmp___1 = __fswab64(p->uuid[i]);
#line 3134
  *(p_uuid + (unsigned long )i) = tmp___1;
#line 3133
  i = i + 1;
  ldv_45635: ;
#line 3133
  if (i <= 5) {
#line 3134
    goto ldv_45634;
  } else {

  }
#line 3136
  kfree((void const   *)mdev->p_uuid);
#line 3137
  mdev->p_uuid = p_uuid;
#line 3139
  if ((((int )mdev->state.ldv_35202.conn <= 9 && (int )mdev->state.ldv_35202.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3143
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3145
    val.i = 0U;
#line 3145
    val.ldv_35202.conn = 1U;
#line 3145
    mask.i = 0U;
#line 3145
    mask.ldv_35202.conn = 31U;
#line 3145
    drbd_force_state(mdev, mask, val);
#line 3146
    return (0);
  } else {

  }
#line 3149
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3149
  if (tmp___2 != 0) {
#line 3150
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 910UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3155
    if (skip_initial_sync != 0) {
#line 3156
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3157
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids");
#line 3159
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3160
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3161
      __ns.i = mdev->state.i;
#line 3161
      __ns.ldv_35202.disk = 8U;
#line 3161
      __ns.ldv_35202.pdsk = 8U;
#line 3161
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3163
      drbd_md_sync(mdev);
    } else {

    }
#line 3165
    put_ldev(mdev);
  } else {

  }
#line 3172
  tmp___3 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3172
  if (tmp___3 == 0) {
#line 3172
    goto ldv_45644;
  } else {

  }
#line 3172
  tmp___4 = get_current();
#line 3172
  __wait.flags = 0U;
#line 3172
  __wait.private = (void *)tmp___4;
#line 3172
  __wait.func = & autoremove_wake_function;
#line 3172
  __wait.task_list.next = & __wait.task_list;
#line 3172
  __wait.task_list.prev = & __wait.task_list;
  ldv_45647: 
#line 3172
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3172
  tmp___5 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3172
  if (tmp___5 == 0) {
#line 3172
    goto ldv_45646;
  } else {

  }
#line 3172
  schedule();
#line 3172
  goto ldv_45647;
  ldv_45646: 
#line 3172
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_45644: ;
#line 3173
  if ((int )mdev->state.ldv_35202.conn > 9 && (int )mdev->state.ldv_35202.disk <= 3) {
#line 3174
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3176
  return (1);
}
}
#line 3183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3187
  c_tab[0] = 0;
#line 3187
  c_tab[1] = C_TEAR_DOWN;
#line 3187
  c_tab[2] = 0;
#line 3187
  c_tab[3] = 0;
#line 3187
  c_tab[4] = 0;
#line 3187
  c_tab[5] = 0;
#line 3187
  c_tab[6] = 0;
#line 3187
  c_tab[7] = 0;
#line 3187
  c_tab[8] = 0;
#line 3187
  c_tab[9] = 0;
#line 3187
  c_tab[10] = C_CONNECTED;
#line 3187
  c_tab[11] = C_STARTING_SYNC_T;
#line 3187
  c_tab[12] = C_STARTING_SYNC_S;
#line 3187
  c_tab[13] = 0;
#line 3187
  c_tab[14] = 0;
#line 3187
  c_tab[15] = 0;
#line 3187
  c_tab[16] = 0;
#line 3187
  c_tab[17] = 0;
#line 3187
  c_tab[18] = C_VERIFY_T;
#line 3187
  c_tab[19] = 0;
#line 3187
  c_tab[20] = 0;
#line 3187
  c_tab[21] = 0;
#line 3187
  c_tab[22] = 0;
#line 3187
  c_tab[23] = 0;
#line 3187
  c_tab[24] = 0;
#line 3187
  c_tab[25] = 0;
#line 3187
  c_tab[26] = 0;
#line 3187
  c_tab[27] = 0;
#line 3187
  c_tab[28] = 0;
#line 3187
  c_tab[29] = 0;
#line 3187
  c_tab[30] = 0;
#line 3187
  c_tab[31] = C_MASK;
#line 3197
  ms.i = ps.i;
#line 3199
  ms.ldv_35202.conn = (unsigned char )c_tab[(int )ps.ldv_35202.conn];
#line 3200
  ms.ldv_35202.peer = ps.ldv_35202.role;
#line 3201
  ms.ldv_35202.role = ps.ldv_35202.peer;
#line 3202
  ms.ldv_35202.pdsk = ps.ldv_35202.disk;
#line 3203
  ms.ldv_35202.disk = ps.ldv_35202.pdsk;
#line 3204
  ms.ldv_35202.peer_isp = (unsigned char )((int )ps.ldv_35202.aftr_isp | (int )ps.ldv_35202.user_isp);
#line 3206
  return (ms);
}
}
#line 3209 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  int rv ;
  int _b ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 3211
  p = (struct p_req_state *)h;
#line 3215
  _b = (unsigned int )h->length != 8U;
#line 3215
  if (_b != 0) {
#line 3215
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_req_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3215);
  } else {

  }
#line 3215
  if (_b != 0) {
#line 3215
    return (0);
  } else {

  }
#line 3216
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3216
  if (tmp != (int )h->length) {
#line 3217
    return (0);
  } else {

  }
#line 3219
  tmp___0 = __fswab32(p->mask);
#line 3219
  mask.i = tmp___0;
#line 3220
  tmp___1 = __fswab32(p->val);
#line 3220
  val.i = tmp___1;
#line 3222
  tmp___2 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3222
  if (tmp___2 != 0) {
#line 3222
    tmp___3 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3222
    if (tmp___3 != 0) {
#line 3224
      drbd_send_sr_reply(mdev, -19);
#line 3225
      return (1);
    } else {

    }
  } else {

  }
#line 3228
  mask = convert_state(mask);
#line 3229
  val = convert_state(val);
#line 3231
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3233
  drbd_send_sr_reply(mdev, rv);
#line 3234
  drbd_md_sync(mdev);
#line 3236
  return (1);
}
}
#line 3239 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_state *p ;
  enum drbd_conns nconn ;
  enum drbd_conns oconn ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  int rv ;
  int _b ;
  int tmp ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  int cr ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___4 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 3241
  p = (struct p_state *)h;
#line 3247
  _b = (unsigned int )h->length != 4U;
#line 3247
  if (_b != 0) {
#line 3247
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3247);
  } else {

  }
#line 3247
  if (_b != 0) {
#line 3248
    return (0);
  } else {

  }
#line 3250
  tmp = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3250
  if (tmp != (int )h->length) {
#line 3251
    return (0);
  } else {

  }
#line 3253
  tmp___0 = __fswab32(p->state);
#line 3253
  peer_state.i = tmp___0;
#line 3255
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_35202.disk;
#line 3256
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3257
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3258
    tmp___1 = drbd_disk_str(real_peer_disk);
#line 3258
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___1);
  } else {

  }
#line 3261
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3263
  nconn = (enum drbd_conns )mdev->state.ldv_35202.conn;
#line 3263
  oconn = nconn;
#line 3264
  spin_unlock_irq(& mdev->req_lock);
#line 3266
  if ((unsigned int )nconn == 9U) {
#line 3267
    nconn = C_CONNECTED;
  } else {

  }
#line 3269
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_35202.disk > 2) {
#line 3269
    tmp___4 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3269
    if (tmp___4 != 0) {
#line 3274
      cr = (unsigned int )oconn <= 9U;
#line 3277
      cr = ((unsigned int )oconn == 10U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)mdev + 1821UL) == 6U)) | cr;
#line 3282
      tmp___2 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 3282
      cr = tmp___2 | cr;
#line 3285
      cr = ((unsigned int )oconn == 10U && ((int )peer_state.ldv_35202.conn > 10 && (int )peer_state.ldv_35202.conn <= 14)) | cr;
#line 3289
      if (cr != 0) {
#line 3290
        nconn = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_35202.role,
                                    real_peer_disk);
      } else {

      }
#line 3292
      put_ldev(mdev);
#line 3293
      if ((unsigned int )nconn == 31U) {
#line 3294
        nconn = C_CONNECTED;
#line 3295
        if ((unsigned int )*((unsigned char *)mdev + 1821UL) == 6U) {
#line 3296
          val.i = 0U;
#line 3296
          val.ldv_35202.disk = 0U;
#line 3296
          mask.i = 0U;
#line 3296
          mask.ldv_35202.disk = 15U;
#line 3296
          drbd_force_state(mdev, mask, val);
        } else
#line 3297
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3298
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3299
          peer_state.ldv_35202.disk = 0U;
#line 3300
          real_peer_disk = D_DISKLESS;
        } else {
#line 3302
          tmp___3 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3302
          if (tmp___3 != 0) {
#line 3303
            return (0);
          } else {

          }
#line 3304
          if ((unsigned int )oconn != 9U) {
#line 3304
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( oconn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3304);
          } else {

          }
#line 3305
          val___0.i = 0U;
#line 3305
          val___0.ldv_35202.conn = 1U;
#line 3305
          mask___0.i = 0U;
#line 3305
          mask___0.ldv_35202.conn = 31U;
#line 3305
          drbd_force_state(mdev, mask___0, val___0);
#line 3306
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3311
  spin_lock_irq(& mdev->req_lock);
#line 3312
  if ((unsigned int )mdev->state.ldv_35202.conn != (unsigned int )oconn) {
#line 3313
    goto retry;
  } else {

  }
#line 3314
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 3315
  ns.i = mdev->state.i;
#line 3316
  ns.ldv_35202.conn = (unsigned char )nconn;
#line 3317
  ns.ldv_35202.peer = peer_state.ldv_35202.role;
#line 3318
  ns.ldv_35202.pdsk = (unsigned char )real_peer_disk;
#line 3319
  ns.ldv_35202.peer_isp = (unsigned char )((int )peer_state.ldv_35202.aftr_isp | (int )peer_state.ldv_35202.user_isp);
#line 3320
  if (((unsigned int )nconn == 10U || (unsigned int )nconn == 13U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3321
    ns.ldv_35202.disk = mdev->new_state_tmp.ldv_35202.disk;
  } else {

  }
#line 3323
  rv = _drbd_set_state(mdev, ns, 3, 0);
#line 3324
  ns = mdev->state;
#line 3325
  spin_unlock_irq(& mdev->req_lock);
#line 3327
  if (rv <= 0) {
#line 3328
    val___1.i = 0U;
#line 3328
    val___1.ldv_35202.conn = 1U;
#line 3328
    mask___1.i = 0U;
#line 3328
    mask___1.ldv_35202.conn = 31U;
#line 3328
    drbd_force_state(mdev, mask___1, val___1);
#line 3329
    return (0);
  } else {

  }
#line 3332
  if ((unsigned int )oconn > 9U) {
#line 3333
    if (((unsigned int )nconn > 10U && (int )peer_state.ldv_35202.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3338
      drbd_send_uuids(mdev);
#line 3339
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3343
  (mdev->net_conf)->want_lose = 0U;
#line 3345
  drbd_md_sync(mdev);
#line 3347
  return (1);
}
}
#line 3350 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int _b ;
  int tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 3352
  p = (struct p_rs_uuid *)h;
#line 3354
  if (((unsigned int )*((unsigned short *)mdev + 910UL) == 240U || (int )mdev->state.ldv_35202.conn <= 9) || (int )mdev->state.ldv_35202.disk <= 2) {
#line 3354
    goto ldv_45697;
  } else {

  }
#line 3354
  tmp = get_current();
#line 3354
  __wait.flags = 0U;
#line 3354
  __wait.private = (void *)tmp;
#line 3354
  __wait.func = & autoremove_wake_function;
#line 3354
  __wait.task_list.next = & __wait.task_list;
#line 3354
  __wait.task_list.prev = & __wait.task_list;
  ldv_45700: 
#line 3354
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3354
  if (((unsigned int )*((unsigned short *)mdev + 910UL) == 240U || (int )mdev->state.ldv_35202.conn <= 9) || (int )mdev->state.ldv_35202.disk <= 2) {
#line 3354
    goto ldv_45699;
  } else {

  }
#line 3354
  schedule();
#line 3354
  goto ldv_45700;
  ldv_45699: 
#line 3354
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_45697: 
#line 3361
  _b = (unsigned int )h->length != 8U;
#line 3361
  if (_b != 0) {
#line 3361
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_sync_uuid", (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3361);
  } else {

  }
#line 3361
  if (_b != 0) {
#line 3361
    return (0);
  } else {

  }
#line 3362
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3362
  if (tmp___0 != (int )h->length) {
#line 3363
    return (0);
  } else {

  }
#line 3367
  tmp___2 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3367
  if (tmp___2 != 0) {
#line 3368
    tmp___1 = __fswab64(p->uuid);
#line 3368
    _drbd_uuid_set(mdev, 0, tmp___1);
#line 3369
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3371
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3373
    put_ldev(mdev);
  } else {
#line 3375
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3377
  return (1);
}
}
#line 3383 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret receive_bitmap_plain(struct drbd_conf *mdev , struct p_header *h ,
                                                    unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int tmp ;

  {
#line 3386
  __min1 = 511UL;
#line 3386
  __min2 = c->bm_words - c->word_offset;
#line 3386
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3387
  want = num_words * 8U;
#line 3389
  if ((unsigned int )h->length != want) {
#line 3390
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != h->length (%u)\n",
            "receive_bitmap_plain", want, (int )h->length);
#line 3391
    return (FAILED);
  } else {

  }
#line 3393
  if (want == 0U) {
#line 3394
    return (DONE);
  } else {

  }
#line 3395
  tmp = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3395
  if ((unsigned int )tmp != want) {
#line 3396
    return (FAILED);
  } else {

  }
#line 3398
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3400
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3401
  c->bit_offset = c->word_offset * 64UL;
#line 3402
  if (c->bit_offset > c->bm_bits) {
#line 3403
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3405
  return (OK);
}
}
#line 3409 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                                struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  int toggle ;
  int tmp___0 ;
  int have ;
  int bits ;
  int tmp___1 ;

  {
#line 3417
  s = c->bit_offset;
#line 3419
  len = (int )((unsigned int )p->head.length - 1U);
#line 3420
  tmp___0 = DCBP_get_start(p);
#line 3420
  toggle = tmp___0;
#line 3424
  tmp___1 = DCBP_get_pad_bits(p);
#line 3424
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___1);
#line 3426
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3427
  if (bits < 0) {
#line 3428
    return (FAILED);
  } else {

  }
#line 3430
  have = bits;
#line 3430
  goto ldv_45736;
  ldv_45735: 
#line 3431
  bits = vli_decode_bits(& rl, look_ahead);
#line 3432
  if (bits <= 0) {
#line 3433
    return (FAILED);
  } else {

  }
#line 3435
  if (toggle != 0) {
#line 3436
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3437
    if (c->bm_bits <= e) {
#line 3438
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3439
      return (FAILED);
    } else {

    }
#line 3441
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3444
  if (have < bits) {
#line 3445
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3449
    return (FAILED);
  } else {

  }
#line 3451
  look_ahead = look_ahead >> bits;
#line 3452
  have = have - bits;
#line 3454
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3455
  if (bits < 0) {
#line 3456
    return (FAILED);
  } else {

  }
#line 3457
  look_ahead = (tmp << have) | look_ahead;
#line 3458
  have = have + bits;
#line 3430
  s = (unsigned long )((unsigned long long )s + rl);
#line 3430
  toggle = toggle == 0;
  ldv_45736: ;
#line 3430
  if (have > 0) {
#line 3431
    goto ldv_45735;
  } else {

  }
#line 3461
  c->bit_offset = s;
#line 3462
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3464
  return (c->bm_bits == s);
}
}
#line 3468 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                               struct bm_xfer_ctx *c ) 
{ 
  enum receive_bitmap_ret tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3472
  tmp___0 = DCBP_get_code(p);
#line 3472
  if ((unsigned int )tmp___0 == 2U) {
#line 3473
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3473
    return (tmp);
  } else {

  }
#line 3479
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3480
  val.i = 0U;
#line 3480
  val.ldv_35202.conn = 6U;
#line 3480
  mask.i = 0U;
#line 3480
  mask.ldv_35202.conn = 31U;
#line 3480
  drbd_force_state(mdev, mask, val);
#line 3481
  return (FAILED);
}
}
#line 3484 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3488
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3491
  total = c->bytes[0] + c->bytes[1];
#line 3495
  if (total == 0U) {
#line 3496
    return;
  } else {

  }
#line 3499
  if (total >= plain) {
#line 3500
    return;
  } else {

  }
#line 3503
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3506
  if (r > 1000U) {
#line 3507
    r = 1000U;
  } else {

  }
#line 3509
  r = 1000U - r;
#line 3510
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3511
  return;
}
}
#line 3526 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  enum receive_bitmap_ret ret ;
  int ok ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___8 ;

  {
#line 3531
  ok = 0;
#line 3533
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3533
  if (tmp == 0) {
#line 3533
    goto ldv_45763;
  } else {

  }
#line 3533
  tmp___0 = get_current();
#line 3533
  __wait.flags = 0U;
#line 3533
  __wait.private = (void *)tmp___0;
#line 3533
  __wait.func = & autoremove_wake_function;
#line 3533
  __wait.task_list.next = & __wait.task_list;
#line 3533
  __wait.task_list.prev = & __wait.task_list;
  ldv_45766: 
#line 3533
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3533
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3533
  if (tmp___1 == 0) {
#line 3533
    goto ldv_45765;
  } else {

  }
#line 3533
  schedule();
#line 3533
  goto ldv_45766;
  ldv_45765: 
#line 3533
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_45763: 
#line 3535
  drbd_bm_lock(mdev, (char *)"receive bitmap");
#line 3539
  tmp___2 = __get_free_pages(16U, 0U);
#line 3539
  buffer = (void *)tmp___2;
#line 3540
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3541
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3542
    goto out;
  } else {

  }
#line 3545
  tmp___3 = drbd_bm_bits(mdev);
#line 3545
  tmp___4 = drbd_bm_words(mdev);
#line 3545
  __constr_expr_0.bm_bits = tmp___3;
#line 3545
  __constr_expr_0.bm_words = tmp___4;
#line 3545
  __constr_expr_0.bit_offset = 0UL;
#line 3545
  __constr_expr_0.word_offset = 0UL;
#line 3545
  __constr_expr_0.packets[0] = 0U;
#line 3545
  __constr_expr_0.packets[1] = 0U;
#line 3545
  __constr_expr_0.bytes[0] = 0U;
#line 3545
  __constr_expr_0.bytes[1] = 0U;
#line 3545
  c = __constr_expr_0;
  ldv_45775: ;
#line 3551
  if ((unsigned int )h->command == 4U) {
#line 3552
    ret = receive_bitmap_plain(mdev, h, (unsigned long *)buffer, & c);
  } else
#line 3553
  if ((unsigned int )h->command == 36U) {
#line 3558
    if ((unsigned int )h->length > 4088U) {
#line 3559
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3560
      goto out;
    } else {

    }
#line 3563
    p = (struct p_compressed_bm *)buffer;
#line 3564
    __len = 8UL;
#line 3564
    if (__len > 63UL) {
#line 3564
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3564
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3565
    tmp___5 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )h->length);
#line 3565
    if (tmp___5 != (int )h->length) {
#line 3566
      goto out;
    } else {

    }
#line 3567
    if ((unsigned int )p->head.length <= 1U) {
#line 3568
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              (int )p->head.length);
#line 3569
      return (2);
    } else {

    }
#line 3571
    ret = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3573
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: h->command neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (int )h->command);
#line 3574
    goto out;
  }
#line 3577
  c.packets[(unsigned int )h->command == 4U] = c.packets[(unsigned int )h->command == 4U] + 1U;
#line 3578
  c.bytes[(unsigned int )h->command == 4U] = (c.bytes[(unsigned int )h->command == 4U] + (unsigned int )h->length) + 8U;
#line 3580
  if ((unsigned int )ret != 0U) {
#line 3581
    goto ldv_45774;
  } else {

  }
#line 3583
  tmp___6 = drbd_recv_header(mdev, h);
#line 3583
  if (tmp___6 == 0) {
#line 3584
    goto out;
  } else {

  }
#line 3585
  if ((unsigned int )ret == 0U) {
#line 3586
    goto ldv_45775;
  } else {

  }
  ldv_45774: ;
#line 3586
  if ((unsigned int )ret == 2U) {
#line 3587
    goto out;
  } else {

  }
#line 3589
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3591
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 224U) {
#line 3592
    tmp___7 = drbd_send_bitmap(mdev);
#line 3592
    ok = tmp___7 == 0;
#line 3593
    if (ok == 0) {
#line 3594
      goto out;
    } else {

    }
#line 3596
    val.i = 0U;
#line 3596
    val.ldv_35202.conn = 15U;
#line 3596
    mask.i = 0U;
#line 3596
    mask.ldv_35202.conn = 31U;
#line 3596
    ok = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3597
    if (ok != 1) {
#line 3597
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ok == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              3597);
    } else {

    }
  } else
#line 3598
  if ((unsigned int )*((unsigned short *)mdev + 910UL) != 208U) {
#line 3601
    tmp___8 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35202.conn);
#line 3601
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___8);
  } else {

  }
#line 3605
  ok = 1;
  out: 
#line 3607
  drbd_bm_unlock(mdev);
#line 3608
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 910UL) == 208U) {
#line 3609
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3610
  free_pages((unsigned long )buffer, 0U);
#line 3611
  return (ok);
}
}
#line 3614 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip_(struct drbd_conf *mdev , struct p_header *h , int silent ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3620
  if (silent == 0) {
#line 3621
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
             (int )h->command, (int )h->length);
  } else {

  }
#line 3624
  size = (int )h->length;
#line 3625
  goto ldv_45797;
  ldv_45796: 
#line 3626
  __min1 = size;
#line 3626
  __min2 = 128;
#line 3626
  want = __min1 < __min2 ? __min1 : __min2;
#line 3627
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3628
  _b = r <= 0;
#line 3628
  if (_b != 0) {
#line 3628
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_skip_", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3628);
  } else {

  }
#line 3628
  if (_b != 0) {
#line 3628
    goto ldv_45795;
  } else {

  }
#line 3629
  size = size - r;
  ldv_45797: ;
#line 3625
  if (size > 0) {
#line 3626
    goto ldv_45796;
  } else {

  }
  ldv_45795: ;
#line 3631
  return (size == 0);
}
}
#line 3634 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 3636
  tmp = receive_skip_(mdev, h, 0);
#line 3636
  return (tmp);
}
}
#line 3639 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip_silent(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 3641
  tmp = receive_skip_(mdev, h, 1);
#line 3641
  return (tmp);
}
}
#line 3644 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , struct p_header *h ) 
{ 


  {
#line 3646
  if ((int )mdev->state.ldv_35202.disk > 3) {
#line 3647
    drbd_kick_lo(mdev);
  } else {

  }
#line 3651
  drbd_tcp_quickack(mdev->data.socket);
#line 3653
  return (1);
}
}
#line 3658 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f drbd_default_handler[41U]  = 
#line 3658
  {      & receive_Data,      & receive_DataReply,      & receive_RSDataReply,      & receive_Barrier, 
        & receive_bitmap,      0,      0,      & receive_UnplugRemote, 
        & receive_DataRequest,      & receive_DataRequest,      & receive_SyncParam,      & receive_protocol, 
        & receive_uuids,      & receive_sizes,      & receive_state,      & receive_sync_uuid, 
        0,      0,      & receive_req_state,      0, 
        0,      0,      0,      0, 
        0,      0,      0,      0, 
        0,      0,      & receive_DataRequest,      & receive_DataRequest, 
        0,      & receive_DataRequest,      0,      & receive_SyncParam, 
        & receive_bitmap,      0,      0,      & receive_skip_silent, 
        0};
#line 3685 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_cmd_handler)(struct drbd_conf * , struct p_header * )  =    (drbd_cmd_handler_f (**)(struct drbd_conf * ,
                            struct p_header * ))(& drbd_default_handler);
#line 3686 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_opt_cmd_handler)(struct drbd_conf * , struct p_header * )  ;
#line 3688 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  int (*handler)(struct drbd_conf * , struct p_header * ) ;
  struct p_header *header ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  long tmp___0 ;
  char const   *tmp___1 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___2 ;
  long tmp___3 ;
  enum drbd_thread_state tmp___4 ;

  {
#line 3691
  header = & mdev->data.rbuf.header;
#line 3693
  goto ldv_45835;
  ldv_45834: 
#line 3694
  drbd_thread_current_set_cpu(mdev);
#line 3695
  tmp = drbd_recv_header(mdev, header);
#line 3695
  if (tmp == 0) {
#line 3696
    val.i = 0U;
#line 3696
    val.ldv_35202.conn = 6U;
#line 3696
    mask.i = 0U;
#line 3696
    mask.ldv_35202.conn = 31U;
#line 3696
    drbd_force_state(mdev, mask, val);
#line 3697
    goto ldv_45825;
  } else {

  }
#line 3700
  if ((unsigned int )header->command <= 39U) {
#line 3701
    handler = *(drbd_cmd_handler + (unsigned long )header->command);
  } else
#line 3702
  if ((unsigned int )header->command > 256U && (unsigned int )header->command <= 256U) {
#line 3704
    handler = *(drbd_opt_cmd_handler + ((unsigned long )header->command + 0xffffffffffffff00UL));
  } else
#line 3705
  if ((unsigned int )header->command > 257U) {
#line 3706
    handler = & receive_skip;
  } else {
#line 3708
    handler = 0;
  }
#line 3710
  tmp___0 = __builtin_expect((unsigned long )handler == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                  struct p_header * ))0),
                             0L);
#line 3710
  if (tmp___0 != 0L) {
#line 3711
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (int )header->command, (int )header->length);
#line 3713
    val___0.i = 0U;
#line 3713
    val___0.ldv_35202.conn = 6U;
#line 3713
    mask___0.i = 0U;
#line 3713
    mask___0.ldv_35202.conn = 31U;
#line 3713
    drbd_force_state(mdev, mask___0, val___0);
#line 3714
    goto ldv_45825;
  } else {

  }
#line 3716
  tmp___2 = (*handler)(mdev, header);
#line 3716
  tmp___3 = __builtin_expect(tmp___2 == 0, 0L);
#line 3716
  if (tmp___3 != 0L) {
#line 3717
    tmp___1 = cmdname((enum drbd_packets )header->command);
#line 3717
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___1, (int )header->length);
#line 3719
    val___1.i = 0U;
#line 3719
    val___1.ldv_35202.conn = 6U;
#line 3719
    mask___1.i = 0U;
#line 3719
    mask___1.ldv_35202.conn = 31U;
#line 3719
    drbd_force_state(mdev, mask___1, val___1);
#line 3720
    goto ldv_45825;
  } else {

  }
  ldv_45835: 
#line 3693
  tmp___4 = get_t_state(& mdev->receiver);
#line 3693
  if ((unsigned int )tmp___4 == 1U) {
#line 3694
    goto ldv_45834;
  } else {

  }
  ldv_45825: ;
#line 3698
  return;
}
}
#line 3725 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_fail_pending_reads(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *slot ;
  struct hlist_node *pos ;
  struct hlist_node *tmp ;
  struct drbd_request *req ;
  int i ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr ;
  int tmp___1 ;

  {
#line 3736
  spin_lock_irq(& mdev->req_lock);
#line 3737
  i = 0;
#line 3737
  goto ldv_45852;
  ldv_45851: 
#line 3738
  slot = mdev->app_reads_hash + (unsigned long )i;
#line 3739
  pos = slot->first;
#line 3739
  goto ldv_45849;
  ldv_45848: 
#line 3745
  tmp___0 = list_empty((struct list_head  const  *)(& req->w.list));
#line 3745
  if (tmp___0 == 0) {
#line 3745
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&req->w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3745);
  } else {

  }
#line 3748
  _req_mod(req, connection_lost_while_pending);
#line 3739
  pos = tmp;
  ldv_45849: ;
#line 3739
  if ((unsigned long )pos != (unsigned long )((struct hlist_node *)0)) {
#line 3739
    tmp = pos->next;
#line 3739
    if (1 != 0) {
#line 3739
      __mptr = (struct hlist_node  const  *)pos;
#line 3739
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 3739
      if (1 != 0) {
#line 3740
        goto ldv_45848;
      } else {
#line 3742
        goto ldv_45850;
      }
    } else {
#line 3742
      goto ldv_45850;
    }
  } else {

  }
  ldv_45850: 
#line 3737
  i = i + 1;
  ldv_45852: ;
#line 3737
  if (i <= 14) {
#line 3738
    goto ldv_45851;
  } else {

  }
#line 3751
  i = 0;
#line 3751
  goto ldv_45855;
  ldv_45854: 
#line 3752
  tmp___1 = hlist_empty((struct hlist_head  const  *)mdev->app_reads_hash + (unsigned long )i);
#line 3752
  if (tmp___1 == 0) {
#line 3753
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: app_reads_hash[%d].first: %p, should be NULL\n",
             i, (mdev->app_reads_hash + (unsigned long )i)->first);
  } else {

  }
#line 3751
  i = i + 1;
  ldv_45855: ;
#line 3751
  if (i <= 14) {
#line 3752
    goto ldv_45854;
  } else {

  }
#line 3756
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 3757
  spin_unlock_irq(& mdev->req_lock);
#line 3758
  return;
}
}
#line 3760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3764
  barr.w.cb = & w_prev_work_done;
#line 3765
  init_completion(& barr.done);
#line 3766
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3767
  wait_for_completion(& barr.done);
#line 3768
  return;
}
}
#line 3770 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  char const   *tmp ;
  int tmp___0 ;
  enum drbd_disk_state nps ;
  enum drbd_disk_state tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  struct hlist_head *h ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 3774
  rv = 0;
#line 3777
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 0U) {
#line 3778
    return;
  } else {

  }
#line 3779
  if ((int )mdev->state.ldv_35202.conn > 7) {
#line 3780
    tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35202.conn);
#line 3780
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected < WFConnection\n",
            tmp);
  } else {

  }
#line 3784
  drbd_thread_stop(& mdev->asender);
#line 3785
  drbd_free_sock(mdev);
#line 3787
  spin_lock_irq(& mdev->req_lock);
#line 3788
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3789
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3790
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3791
  spin_unlock_irq(& mdev->req_lock);
#line 3803
  drbd_rs_cancel_all(mdev);
#line 3804
  mdev->rs_total = 0UL;
#line 3805
  mdev->rs_failed = 0UL;
#line 3806
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3807
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3810
  del_timer_sync(& mdev->resync_timer);
#line 3811
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 3812
  resync_timer_fn((unsigned long )mdev);
#line 3817
  drbd_flush_workqueue(mdev);
#line 3821
  drbd_process_done_ee(mdev);
#line 3823
  kfree((void const   *)mdev->p_uuid);
#line 3824
  mdev->p_uuid = 0;
#line 3826
  if ((unsigned int )*((unsigned char *)mdev + 1822UL) == 0U) {
#line 3827
    tl_clear(mdev);
  } else {

  }
#line 3829
  drbd_fail_pending_reads(mdev);
#line 3831
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3833
  drbd_md_sync(mdev);
#line 3835
  fp = FP_DONT_CARE;
#line 3836
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3836
  if (tmp___0 != 0) {
#line 3837
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3838
    put_ldev(mdev);
  } else {

  }
#line 3841
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 3842
    if ((unsigned int )fp != 0U && (int )mdev->state.ldv_35202.pdsk > 5) {
#line 3843
      tmp___1 = drbd_try_outdate_peer(mdev);
#line 3843
      nps = tmp___1;
#line 3844
      val.i = 0U;
#line 3844
      val.ldv_35202.pdsk = (unsigned char )nps;
#line 3844
      mask.i = 0U;
#line 3844
      mask.ldv_35202.pdsk = 15U;
#line 3844
      drbd_request_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 3848
  spin_lock_irq(& mdev->req_lock);
#line 3849
  os = mdev->state;
#line 3850
  if ((int )os.ldv_35202.conn > 1) {
#line 3852
    ns = os;
#line 3853
    ns.ldv_35202.conn = 2U;
#line 3854
    rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 3856
  spin_unlock_irq(& mdev->req_lock);
#line 3858
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3860
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3860
    if (tmp___2 == 0) {
#line 3860
      goto ldv_45875;
    } else {

    }
#line 3860
    tmp___3 = get_current();
#line 3860
    __wait.flags = 0U;
#line 3860
    __wait.private = (void *)tmp___3;
#line 3860
    __wait.func = & autoremove_wake_function;
#line 3860
    __wait.task_list.next = & __wait.task_list;
#line 3860
    __wait.task_list.prev = & __wait.task_list;
    ldv_45878: 
#line 3860
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3860
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3860
    if (tmp___4 == 0) {
#line 3860
      goto ldv_45877;
    } else {

    }
#line 3860
    schedule();
#line 3860
    goto ldv_45878;
    ldv_45877: 
#line 3860
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_45875: 
#line 3864
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3864
    if (tmp___5 == 0) {
#line 3864
      goto ldv_45879;
    } else {

    }
#line 3864
    tmp___6 = get_current();
#line 3864
    __wait___0.flags = 0U;
#line 3864
    __wait___0.private = (void *)tmp___6;
#line 3864
    __wait___0.func = & autoremove_wake_function;
#line 3864
    __wait___0.task_list.next = & __wait___0.task_list;
#line 3864
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_45882: 
#line 3864
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3864
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3864
    if (tmp___7 == 0) {
#line 3864
      goto ldv_45881;
    } else {

    }
#line 3864
    schedule();
#line 3864
    goto ldv_45882;
    ldv_45881: 
#line 3864
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_45879: 
#line 3866
    spin_lock_irq(& mdev->req_lock);
#line 3868
    h = mdev->ee_hash;
#line 3868
    goto ldv_45884;
    ldv_45883: ;
#line 3869
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3870
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
              (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
    } else {

    }
#line 3868
    h = h + 1;
    ldv_45884: ;
#line 3868
    if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3869
      goto ldv_45883;
    } else {

    }
#line 3872
    kfree((void const   *)mdev->ee_hash);
#line 3873
    mdev->ee_hash = 0;
#line 3874
    mdev->ee_hash_s = 0U;
#line 3877
    h = mdev->tl_hash;
#line 3877
    goto ldv_45887;
    ldv_45886: ;
#line 3878
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3879
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED tl_hash[%u] == %p, expected NULL\n",
              (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
    } else {

    }
#line 3877
    h = h + 1;
    ldv_45887: ;
#line 3877
    if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3878
      goto ldv_45886;
    } else {

    }
#line 3881
    kfree((void const   *)mdev->tl_hash);
#line 3882
    mdev->tl_hash = 0;
#line 3883
    mdev->tl_hash_s = 0U;
#line 3884
    spin_unlock_irq(& mdev->req_lock);
#line 3886
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3887
    mdev->cram_hmac_tfm = 0;
#line 3889
    kfree((void const   *)mdev->net_conf);
#line 3890
    mdev->net_conf = 0;
#line 3891
    val___0.i = 0U;
#line 3891
    val___0.ldv_35202.conn = 0U;
#line 3891
    mask___0.i = 0U;
#line 3891
    mask___0.ldv_35202.conn = 31U;
#line 3891
    drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 3901
  tmp___8 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3901
  i = (unsigned int )tmp___8;
#line 3902
  if (i != 0U) {
#line 3903
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 3904
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3904
  i = (unsigned int )tmp___9;
#line 3905
  if (i != 0U) {
#line 3906
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 3908
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3908
  if (tmp___10 == 0) {
#line 3908
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3908);
  } else {

  }
#line 3909
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3909
  if (tmp___11 == 0) {
#line 3909
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3909);
  } else {

  }
#line 3910
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3910
  if (tmp___12 == 0) {
#line 3910
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3910);
  } else {

  }
#line 3911
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3911
  if (tmp___13 == 0) {
#line 3911
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3911);
  } else {

  }
#line 3914
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3915
  tmp___14 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3915
  if (tmp___14 == 0) {
#line 3915
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3915);
  } else {

  }
#line 3916
  return;
}
}
#line 3927 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 3930
  p = & mdev->data.sbuf.handshake;
#line 3933
  tmp = ldv_mutex_lock_interruptible_69(& mdev->data.mutex);
#line 3933
  if (tmp != 0) {
#line 3934
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 3935
    return (0);
  } else {

  }
#line 3938
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 3939
    ldv_mutex_unlock_70(& mdev->data.mutex);
#line 3940
    return (0);
  } else {

  }
#line 3943
  memset((void *)p, 0, 80UL);
#line 3944
  p->protocol_min = 1442840576U;
#line 3945
  p->protocol_max = 1577058304U;
#line 3946
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header *)p,
                      80UL, 0U);
#line 3948
  ldv_mutex_unlock_71(& mdev->data.mutex);
#line 3949
  return (ok);
}
}
#line 3959 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  int rv ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int __min1 ;
  int __min2 ;

  {
#line 3962
  p = & mdev->data.rbuf.handshake;
#line 3963
  expect = 72;
#line 3967
  rv = drbd_send_handshake(mdev);
#line 3968
  if (rv == 0) {
#line 3969
    return (0);
  } else {

  }
#line 3971
  rv = drbd_recv_header(mdev, & p->head);
#line 3972
  if (rv == 0) {
#line 3973
    return (0);
  } else {

  }
#line 3975
  if ((unsigned int )p->head.command != 65534U) {
#line 3976
    tmp = cmdname((enum drbd_packets )p->head.command);
#line 3976
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (int )p->head.command);
#line 3978
    return (-1);
  } else {

  }
#line 3981
  if ((int )p->head.length != expect) {
#line 3982
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, (int )p->head.length);
#line 3984
    return (-1);
  } else {

  }
#line 3987
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 3989
  if (rv != expect) {
#line 3990
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
            rv);
#line 3991
    return (0);
  } else {

  }
#line 3994
  tmp___0 = __fswab32(p->protocol_min);
#line 3994
  p->protocol_min = tmp___0;
#line 3995
  tmp___1 = __fswab32(p->protocol_max);
#line 3995
  p->protocol_max = tmp___1;
#line 3996
  if (p->protocol_max == 0U) {
#line 3997
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 3999
  if (p->protocol_min > 94U || p->protocol_max <= 85U) {
#line 4001
    goto incompat;
  } else {

  }
#line 4003
  __min1 = 94;
#line 4003
  __min2 = (int )p->protocol_max;
#line 4003
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 4005
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 4008
  return (1);
  incompat: 
#line 4011
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 94, p->protocol_min, p->protocol_max);
#line 4015
  return (-1);
}
}
#line 4034 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  struct p_header p ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  char const   *tmp___3 ;
  void *tmp___4 ;
  int tmp___5 ;

  {
#line 4038
  response = 0;
#line 4039
  right_response = 0;
#line 4040
  peers_ch = 0;
#line 4042
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4042
  key_len = (unsigned int )tmp;
#line 4047
  desc.tfm = mdev->cram_hmac_tfm;
#line 4048
  desc.flags = 0U;
#line 4050
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4052
  if (rv != 0) {
#line 4053
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 4054
    rv = -1;
#line 4055
    goto fail;
  } else {

  }
#line 4058
  get_random_bytes((void *)(& my_challenge), 64);
#line 4060
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4061
  if (rv == 0) {
#line 4062
    goto fail;
  } else {

  }
#line 4064
  rv = drbd_recv_header(mdev, & p);
#line 4065
  if (rv == 0) {
#line 4066
    goto fail;
  } else {

  }
#line 4068
  if ((unsigned int )p.command != 16U) {
#line 4069
    tmp___0 = cmdname((enum drbd_packets )p.command);
#line 4069
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (int )p.command);
#line 4071
    rv = 0;
#line 4072
    goto fail;
  } else {

  }
#line 4075
  if ((unsigned int )p.length > 128U) {
#line 4076
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4077
    rv = -1;
#line 4078
    goto fail;
  } else {

  }
#line 4081
  tmp___1 = kmalloc___1((size_t )p.length, 16U);
#line 4081
  peers_ch = (char *)tmp___1;
#line 4082
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4083
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4084
    rv = -1;
#line 4085
    goto fail;
  } else {

  }
#line 4088
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )p.length);
#line 4090
  if ((int )p.length != rv) {
#line 4091
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
            rv);
#line 4092
    rv = 0;
#line 4093
    goto fail;
  } else {

  }
#line 4096
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4097
  tmp___2 = kmalloc___1((size_t )resp_size, 16U);
#line 4097
  response = (char *)tmp___2;
#line 4098
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4099
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4100
    rv = -1;
#line 4101
    goto fail;
  } else {

  }
#line 4104
  sg_init_table(& sg, 1U);
#line 4105
  sg_set_buf(& sg, (void const   *)peers_ch, (unsigned int )p.length);
#line 4107
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4108
  if (rv != 0) {
#line 4109
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4110
    rv = -1;
#line 4111
    goto fail;
  } else {

  }
#line 4114
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4115
  if (rv == 0) {
#line 4116
    goto fail;
  } else {

  }
#line 4118
  rv = drbd_recv_header(mdev, & p);
#line 4119
  if (rv == 0) {
#line 4120
    goto fail;
  } else {

  }
#line 4122
  if ((unsigned int )p.command != 17U) {
#line 4123
    tmp___3 = cmdname((enum drbd_packets )p.command);
#line 4123
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___3, (int )p.command);
#line 4125
    rv = 0;
#line 4126
    goto fail;
  } else {

  }
#line 4129
  if ((unsigned int )p.length != resp_size) {
#line 4130
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4131
    rv = 0;
#line 4132
    goto fail;
  } else {

  }
#line 4135
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4137
  if ((unsigned int )rv != resp_size) {
#line 4138
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
            rv);
#line 4139
    rv = 0;
#line 4140
    goto fail;
  } else {

  }
#line 4143
  tmp___4 = kmalloc___1((size_t )resp_size, 16U);
#line 4143
  right_response = (char *)tmp___4;
#line 4144
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4145
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4146
    rv = -1;
#line 4147
    goto fail;
  } else {

  }
#line 4150
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4152
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4153
  if (rv != 0) {
#line 4154
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4155
    rv = -1;
#line 4156
    goto fail;
  } else {

  }
#line 4159
  tmp___5 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4159
  rv = tmp___5 == 0;
#line 4161
  if (rv != 0) {
#line 4162
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4165
    rv = -1;
  }
  fail: 
#line 4168
  kfree((void const   *)peers_ch);
#line 4169
  kfree((void const   *)response);
#line 4170
  kfree((void const   *)right_response);
#line 4172
  return (rv);
}
}
#line 4176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___2 ;

  {
#line 4178
  mdev = thi->mdev;
#line 4179
  tmp = mdev_to_minor(mdev);
#line 4179
  minor = tmp;
#line 4182
  tmp___0 = get_current();
#line 4182
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4184
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_45932: 
#line 4187
  h = drbd_connect(mdev);
#line 4188
  if (h == 0) {
#line 4189
    drbd_disconnect(mdev);
#line 4190
    tmp___1 = get_current();
#line 4190
    tmp___1->state = 1L;
#line 4191
    schedule_timeout(250L);
  } else {

  }
#line 4193
  if (h == -1) {
#line 4194
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4195
    val.i = 0U;
#line 4195
    val.ldv_35202.conn = 1U;
#line 4195
    mask.i = 0U;
#line 4195
    mask.ldv_35202.conn = 31U;
#line 4195
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4197
  if (h == 0) {
#line 4198
    goto ldv_45932;
  } else {

  }

#line 4199
  if (h > 0) {
#line 4200
    tmp___2 = get_net_conf(mdev);
#line 4200
    if (tmp___2 != 0) {
#line 4201
      drbdd(mdev);
#line 4202
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4206
  drbd_disconnect(mdev);
#line 4208
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4209
  return (0);
}
}
#line 4214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4216
  p = (struct p_req_state_reply *)h;
#line 4218
  tmp = __fswab32(p->retcode);
#line 4218
  retcode = (int )tmp;
#line 4220
  if (retcode > 0) {
#line 4221
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4223
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 4224
    tmp___0 = drbd_set_st_err_str((enum drbd_state_ret_codes )retcode);
#line 4224
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4227
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4229
  return (1);
}
}
#line 4232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4234
  tmp = drbd_send_ping_ack(mdev);
#line 4234
  return (tmp);
}
}
#line 4238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4241
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4242
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4242
  if (tmp == 0) {
#line 4243
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4245
  return (1);
}
}
#line 4248 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 4250
  p = (struct p_block_ack *)h;
#line 4251
  tmp = __fswab64(p->sector);
#line 4251
  sector = (sector_t )tmp;
#line 4252
  tmp___0 = __fswab32(p->blksize);
#line 4252
  blksize = (int )tmp___0;
#line 4254
  if (mdev->agreed_pro_version <= 88) {
#line 4254
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4254);
  } else {

  }
#line 4256
  tmp___1 = __fswab32(p->seq_num);
#line 4256
  update_peer_seq(mdev, tmp___1);
#line 4258
  drbd_rs_complete_io(mdev, sector);
#line 4259
  __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                     4259U);
#line 4261
  mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4262
  atomic_dec(& mdev->rs_pending_cnt);
#line 4262
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4262
  if (tmp___3 < 0) {
#line 4262
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4262
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4262, tmp___2);
  } else {

  }
#line 4264
  return (1);
}
}
#line 4269 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4272
  tmp = tl_hash_slot(mdev, sector);
#line 4272
  slot = tmp;
#line 4276
  n = slot->first;
#line 4276
  goto ldv_45973;
  ldv_45972: ;
#line 4277
  if ((unsigned long )req == (unsigned long )id) {
#line 4278
    if (req->sector != sector) {
#line 4279
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4283
      goto ldv_45971;
    } else {

    }
#line 4285
    return (req);
  } else {

  }
#line 4276
  n = n->next;
  ldv_45973: ;
#line 4276
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4276
    __builtin_prefetch((void const   *)n->next);
#line 4276
    if (1 != 0) {
#line 4276
      __mptr = (struct hlist_node  const  *)n;
#line 4276
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4276
      if (1 != 0) {
#line 4277
        goto ldv_45972;
      } else {
#line 4279
        goto ldv_45971;
      }
    } else {
#line 4279
      goto ldv_45971;
    }
  } else {

  }
  ldv_45971: 
#line 4288
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: failed to find req %p, sector %llus in list\n",
          (void *)id, (unsigned long long )sector);
#line 4290
  return (0);
}
}
#line 4296 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4303
  spin_lock_irq(& mdev->req_lock);
#line 4304
  req = (*validator)(mdev, id, sector);
#line 4305
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4305
  if (tmp != 0L) {
#line 4306
    spin_unlock_irq(& mdev->req_lock);
#line 4307
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: got a corrupt block_id/sector pair\n",
            func);
#line 4308
    return (0);
  } else {

  }
#line 4310
  __req_mod(req, what, & m);
#line 4311
  spin_unlock_irq(& mdev->req_lock);
#line 4313
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4314
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4315
  return (1);
}
}
#line 4318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4320
  p = (struct p_block_ack *)h;
#line 4321
  tmp = __fswab64(p->sector);
#line 4321
  sector = (sector_t )tmp;
#line 4322
  tmp___0 = __fswab32(p->blksize);
#line 4322
  blksize = (int )tmp___0;
#line 4325
  tmp___1 = __fswab32(p->seq_num);
#line 4325
  update_peer_seq(mdev, tmp___1);
#line 4327
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4328
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4328U);
#line 4329
    atomic_dec(& mdev->rs_pending_cnt);
#line 4329
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4329
    if (tmp___3 < 0) {
#line 4329
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4329
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4329, tmp___2);
    } else {

    }
#line 4330
    return (1);
  } else {

  }
#line 4332
  tmp___4 = __fswab16((int )h->command);
#line 4332
  switch ((int )tmp___4) {
  case 23: ;
#line 4334
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4334
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4334);
  } else {

  }
#line 4335
  what = write_acked_by_peer_and_sis;
#line 4336
  goto ldv_46001;
  case 22: ;
#line 4338
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4338
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4338);
  } else {

  }
#line 4339
  what = write_acked_by_peer;
#line 4340
  goto ldv_46001;
  case 21: ;
#line 4342
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4342
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4342);
  } else {

  }
#line 4343
  what = recv_acked_by_peer;
#line 4344
  goto ldv_46001;
  case 24: ;
#line 4346
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4346
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4346);
  } else {

  }
#line 4347
  what = conflict_discarded_by_peer;
#line 4348
  goto ldv_46001;
  default: 
#line 4350
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
          4350);
#line 4351
  return (0);
  }
  ldv_46001: 
#line 4354
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4354
  return (tmp___5);
}
}
#line 4358 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  int size ;
  __u32 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 4360
  p = (struct p_block_ack *)h;
#line 4361
  tmp = __fswab64(p->sector);
#line 4361
  sector = (sector_t )tmp;
#line 4363
  tmp___0 = ___ratelimit(& drbd_ratelimit_state, "got_NegAck");
#line 4363
  if (tmp___0 != 0) {
#line 4364
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegAck packet. Peer is in troubles?\n");
  } else {

  }
#line 4366
  tmp___1 = __fswab32(p->seq_num);
#line 4366
  update_peer_seq(mdev, tmp___1);
#line 4368
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4369
    tmp___2 = __fswab32(p->blksize);
#line 4369
    size = (int )tmp___2;
#line 4370
    atomic_dec(& mdev->rs_pending_cnt);
#line 4370
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4370
    if (tmp___4 < 0) {
#line 4370
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4370
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4370, tmp___3);
    } else {

    }
#line 4371
    drbd_rs_failed_io(mdev, sector, size);
#line 4372
    return (1);
  } else {

  }
#line 4374
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_NegAck", neg_acked);
#line 4374
  return (tmp___5);
}
}
#line 4378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4380
  p = (struct p_block_ack *)h;
#line 4381
  tmp = __fswab64(p->sector);
#line 4381
  sector = (sector_t )tmp;
#line 4383
  tmp___0 = __fswab32(p->seq_num);
#line 4383
  update_peer_seq(mdev, tmp___0);
#line 4384
  tmp___1 = __fswab32(p->blksize);
#line 4384
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4387
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4387
  return (tmp___2);
}
}
#line 4391 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4395
  p = (struct p_block_ack *)h;
#line 4397
  tmp = __fswab64(p->sector);
#line 4397
  sector = (sector_t )tmp;
#line 4398
  tmp___0 = __fswab32(p->blksize);
#line 4398
  size = (int )tmp___0;
#line 4400
  tmp___1 = __fswab32(p->seq_num);
#line 4400
  update_peer_seq(mdev, tmp___1);
#line 4402
  atomic_dec(& mdev->rs_pending_cnt);
#line 4402
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4402
  if (tmp___3 < 0) {
#line 4402
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4402
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4402, tmp___2);
  } else {

  }
#line 4404
  tmp___4 = _get_ldev_if_state(mdev, D_FAILED);
#line 4404
  if (tmp___4 != 0) {
#line 4405
    drbd_rs_complete_io(mdev, sector);
#line 4406
    drbd_rs_failed_io(mdev, sector, size);
#line 4407
    put_ldev(mdev);
  } else {

  }
#line 4410
  return (1);
}
}
#line 4413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;

  {
#line 4415
  p = (struct p_barrier_ack *)h;
#line 4417
  tmp = __fswab32(p->set_size);
#line 4417
  tl_release(mdev, p->barrier, tmp);
#line 4419
  return (1);
}
}
#line 4422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;

  {
#line 4424
  p = (struct p_block_ack *)h;
#line 4429
  tmp = __fswab64(p->sector);
#line 4429
  sector = (sector_t )tmp;
#line 4430
  tmp___0 = __fswab32(p->blksize);
#line 4430
  size = (int )tmp___0;
#line 4432
  tmp___1 = __fswab32(p->seq_num);
#line 4432
  update_peer_seq(mdev, tmp___1);
#line 4434
  tmp___2 = __fswab64(p->block_id);
#line 4434
  if (tmp___2 == 4712ULL) {
#line 4435
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4437
    ov_oos_print(mdev);
  }
#line 4439
  drbd_rs_complete_io(mdev, sector);
#line 4440
  atomic_dec(& mdev->rs_pending_cnt);
#line 4440
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4440
  if (tmp___4 < 0) {
#line 4440
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4440
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4440, tmp___3);
  } else {

  }
#line 4442
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4442
  if (mdev->ov_left == 0UL) {
#line 4443
    tmp___5 = kmalloc___1(24UL, 16U);
#line 4443
    w = (struct drbd_work *)tmp___5;
#line 4444
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4445
      w->cb = & w_ov_finished;
#line 4446
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4448
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4449
      ov_oos_print(mdev);
#line 4450
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4453
  return (1);
}
}
#line 4456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_something_to_ignore_m(struct drbd_conf *mdev , struct p_header *h ) 
{ 


  {
#line 4459
  return (1);
}
}
#line 4467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[41U] ;

  {
#line 4469
  asender_tbl[0].pkt_size = 0UL;
#line 4469
  asender_tbl[0].process = 0;
#line 4469
  asender_tbl[1].pkt_size = 0UL;
#line 4469
  asender_tbl[1].process = 0;
#line 4469
  asender_tbl[2].pkt_size = 0UL;
#line 4469
  asender_tbl[2].process = 0;
#line 4469
  asender_tbl[3].pkt_size = 0UL;
#line 4469
  asender_tbl[3].process = 0;
#line 4469
  asender_tbl[4].pkt_size = 0UL;
#line 4469
  asender_tbl[4].process = 0;
#line 4469
  asender_tbl[5].pkt_size = 0UL;
#line 4469
  asender_tbl[5].process = 0;
#line 4469
  asender_tbl[6].pkt_size = 0UL;
#line 4469
  asender_tbl[6].process = 0;
#line 4469
  asender_tbl[7].pkt_size = 0UL;
#line 4469
  asender_tbl[7].process = 0;
#line 4469
  asender_tbl[8].pkt_size = 0UL;
#line 4469
  asender_tbl[8].process = 0;
#line 4469
  asender_tbl[9].pkt_size = 0UL;
#line 4469
  asender_tbl[9].process = 0;
#line 4469
  asender_tbl[10].pkt_size = 0UL;
#line 4469
  asender_tbl[10].process = 0;
#line 4469
  asender_tbl[11].pkt_size = 0UL;
#line 4469
  asender_tbl[11].process = 0;
#line 4469
  asender_tbl[12].pkt_size = 0UL;
#line 4469
  asender_tbl[12].process = 0;
#line 4469
  asender_tbl[13].pkt_size = 0UL;
#line 4469
  asender_tbl[13].process = 0;
#line 4469
  asender_tbl[14].pkt_size = 0UL;
#line 4469
  asender_tbl[14].process = 0;
#line 4469
  asender_tbl[15].pkt_size = 0UL;
#line 4469
  asender_tbl[15].process = 0;
#line 4469
  asender_tbl[16].pkt_size = 0UL;
#line 4469
  asender_tbl[16].process = 0;
#line 4469
  asender_tbl[17].pkt_size = 0UL;
#line 4469
  asender_tbl[17].process = 0;
#line 4469
  asender_tbl[18].pkt_size = 0UL;
#line 4469
  asender_tbl[18].process = 0;
#line 4469
  asender_tbl[19].pkt_size = 8UL;
#line 4469
  asender_tbl[19].process = & got_Ping;
#line 4469
  asender_tbl[20].pkt_size = 8UL;
#line 4469
  asender_tbl[20].process = & got_PingAck;
#line 4469
  asender_tbl[21].pkt_size = 32UL;
#line 4469
  asender_tbl[21].process = & got_BlockAck;
#line 4469
  asender_tbl[22].pkt_size = 32UL;
#line 4469
  asender_tbl[22].process = & got_BlockAck;
#line 4469
  asender_tbl[23].pkt_size = 32UL;
#line 4469
  asender_tbl[23].process = & got_BlockAck;
#line 4469
  asender_tbl[24].pkt_size = 32UL;
#line 4469
  asender_tbl[24].process = & got_BlockAck;
#line 4469
  asender_tbl[25].pkt_size = 32UL;
#line 4469
  asender_tbl[25].process = & got_NegAck;
#line 4469
  asender_tbl[26].pkt_size = 32UL;
#line 4469
  asender_tbl[26].process = & got_NegDReply;
#line 4469
  asender_tbl[27].pkt_size = 32UL;
#line 4469
  asender_tbl[27].process = & got_NegRSDReply;
#line 4469
  asender_tbl[28].pkt_size = 16UL;
#line 4469
  asender_tbl[28].process = & got_BarrierAck;
#line 4469
  asender_tbl[29].pkt_size = 12UL;
#line 4469
  asender_tbl[29].process = & got_RqSReply;
#line 4469
  asender_tbl[30].pkt_size = 0UL;
#line 4469
  asender_tbl[30].process = 0;
#line 4469
  asender_tbl[31].pkt_size = 0UL;
#line 4469
  asender_tbl[31].process = 0;
#line 4469
  asender_tbl[32].pkt_size = 32UL;
#line 4469
  asender_tbl[32].process = & got_OVResult;
#line 4469
  asender_tbl[33].pkt_size = 0UL;
#line 4469
  asender_tbl[33].process = 0;
#line 4469
  asender_tbl[34].pkt_size = 32UL;
#line 4469
  asender_tbl[34].process = & got_IsInSync;
#line 4469
  asender_tbl[35].pkt_size = 0UL;
#line 4469
  asender_tbl[35].process = 0;
#line 4469
  asender_tbl[36].pkt_size = 0UL;
#line 4469
  asender_tbl[36].process = 0;
#line 4469
  asender_tbl[37].pkt_size = 0UL;
#line 4469
  asender_tbl[37].process = 0;
#line 4469
  asender_tbl[38].pkt_size = 0UL;
#line 4469
  asender_tbl[38].process = 0;
#line 4469
  asender_tbl[39].pkt_size = 16UL;
#line 4469
  asender_tbl[39].process = & got_something_to_ignore_m;
#line 4469
  asender_tbl[40].pkt_size = 0UL;
#line 4469
  asender_tbl[40].process = 0;
#line 4489
  if (cmd > 40 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header * ))0)) {
#line 4490
    return (0);
  } else {

  }
#line 4491
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4494 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u32 tmp___12 ;
  long tmp___13 ;
  __u16 tmp___14 ;
  __u16 tmp___15 ;
  __u32 tmp___16 ;
  long tmp___17 ;
  int _b___0 ;
  int tmp___18 ;
  enum drbd_thread_state tmp___19 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4496
  mdev = thi->mdev;
#line 4497
  h = & mdev->meta.rbuf.header;
#line 4498
  cmd = 0;
#line 4501
  buf = (void *)h;
#line 4502
  received = 0;
#line 4503
  expect = 8;
#line 4506
  tmp = mdev_to_minor(mdev);
#line 4506
  tmp___0 = get_current();
#line 4506
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4508
  tmp___1 = get_current();
#line 4508
  tmp___1->policy = 2U;
#line 4509
  tmp___2 = get_current();
#line 4509
  tmp___2->rt_priority = 2U;
#line 4511
  goto ldv_46083;
  ldv_46087: 
#line 4512
  drbd_thread_current_set_cpu(mdev);
#line 4513
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4513
  if (tmp___4 != 0) {
#line 4514
    tmp___3 = drbd_send_ping(mdev);
#line 4514
    _b = tmp___3 == 0;
#line 4514
    if (_b != 0) {
#line 4514
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4514);
    } else {

    }
#line 4514
    if (_b != 0) {
#line 4514
      goto reconnect;
    } else {

    }
#line 4515
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
  } else {

  }
#line 4521
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4521
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4521
    if (tmp___5 > 3) {
#line 4523
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_46082: 
#line 4525
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4526
  tmp___6 = get_current();
#line 4526
  flush_signals(tmp___6);
#line 4527
  tmp___7 = drbd_process_done_ee(mdev);
#line 4527
  if (tmp___7 == 0) {
#line 4528
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "process_done_ee() = NOT_OK\n");
#line 4529
    goto reconnect;
  } else {

  }
#line 4532
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4533
  spin_lock_irq(& mdev->req_lock);
#line 4534
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4535
  spin_unlock_irq(& mdev->req_lock);
#line 4539
  if (empty != 0) {
#line 4540
    goto ldv_46081;
  } else {

  }
#line 4541
  goto ldv_46082;
  ldv_46081: ;
#line 4543
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4544
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4547
  tmp___8 = get_current();
#line 4547
  tmp___9 = signal_pending(tmp___8);
#line 4547
  if (tmp___9 != 0) {
#line 4548
    goto ldv_46083;
  } else {

  }
#line 4550
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4552
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4554
  tmp___10 = get_current();
#line 4554
  flush_signals(tmp___10);
#line 4566
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4566
  if (tmp___11 != 0L) {
#line 4567
    received = received + rv;
#line 4568
    buf = buf + (unsigned long )rv;
  } else
#line 4569
  if (rv == 0) {
#line 4570
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4571
    goto reconnect;
  } else
#line 4572
  if (rv == -11) {
#line 4573
    if (((mdev->meta.socket)->sk)->sk_rcvtimeo == (long )(((mdev->net_conf)->ping_timeo * 250) / 10)) {
#line 4575
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4576
      goto reconnect;
    } else {

    }
#line 4578
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4579
    goto ldv_46083;
  } else
#line 4580
  if (rv == -4) {
#line 4581
    goto ldv_46083;
  } else {
#line 4583
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4584
    goto reconnect;
  }
#line 4587
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4588
    tmp___13 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4588
    if (tmp___13 != 0L) {
#line 4589
      tmp___12 = __fswab32(h->magic);
#line 4589
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%lx c: %d l: %d\n",
              (long )tmp___12, (int )h->command, (int )h->length);
#line 4592
      goto reconnect;
    } else {

    }
#line 4594
    tmp___14 = __fswab16((int )h->command);
#line 4594
    cmd = get_asender_cmd((int )tmp___14);
#line 4595
    tmp___15 = __fswab16((int )h->length);
#line 4595
    len = (int )tmp___15;
#line 4596
    tmp___17 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4596
    if (tmp___17 != 0L) {
#line 4597
      tmp___16 = __fswab32(h->magic);
#line 4597
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%lx c: %d l: %d\n",
              (long )tmp___16, (int )h->command, (int )h->length);
#line 4600
      goto disconnect;
    } else {

    }
#line 4602
    expect = (int )cmd->pkt_size;
#line 4603
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4603
    if (_b___0 != 0) {
#line 4603
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4603);
    } else {

    }
#line 4603
    if (_b___0 != 0) {
#line 4604
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4606
  if (received == expect) {
#line 4607
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4607
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4607);
    } else {

    }
#line 4608
    tmp___18 = (*(cmd->process))(mdev, h);
#line 4608
    if (tmp___18 == 0) {
#line 4609
      goto reconnect;
    } else {

    }
#line 4611
    buf = (void *)h;
#line 4612
    received = 0;
#line 4613
    expect = 8;
#line 4614
    cmd = 0;
  } else {

  }
  ldv_46083: 
#line 4511
  tmp___19 = get_t_state(thi);
#line 4511
  if ((unsigned int )tmp___19 == 1U) {
#line 4512
    goto ldv_46087;
  } else {

  }

#line 4618
  if (0) {
    reconnect: 
#line 4620
    val.i = 0U;
#line 4620
    val.ldv_35202.conn = 5U;
#line 4620
    mask.i = 0U;
#line 4620
    mask.ldv_35202.conn = 31U;
#line 4620
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4622
  if (0) {
    disconnect: 
#line 4624
    val___0.i = 0U;
#line 4624
    val___0.ldv_35202.conn = 1U;
#line 4624
    mask___0.i = 0U;
#line 4624
    mask___0.ldv_35202.conn = 31U;
#line 4624
    drbd_force_state(mdev, mask___0, val___0);
  } else {

  }
#line 4626
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4628
  if ((int )mdev->state.ldv_35202.conn > 9) {
#line 4628
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4628);
  } else {

  }
#line 4629
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4631
  return (0);
}
}
#line 4671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4683
  LDV_IN_INTERRUPT = 1;
#line 4692
  ldv_initialize();
#line 4694
  goto ldv_46116;
  ldv_46115: 
#line 4697
  tmp = nondet_int();
#line 4697
  switch (tmp) {
  default: ;
#line 4699
  goto ldv_46114;
  }
  ldv_46114: ;
  ldv_46116: 
#line 4694
  tmp___0 = nondet_int();
#line 4694
  if (tmp___0 != 0) {
#line 4695
    goto ldv_46115;
  } else {

  }


#line 4708
  ldv_check_final_state();
#line 4711
  return;
}
}
#line 4715 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4720
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4722
  mutex_lock(ldv_func_arg1);
#line 4723
  return;
}
}
#line 4725 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_trylock_64(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4730
  tmp = mutex_trylock(ldv_func_arg1);
#line 4730
  ldv_func_res = tmp;
#line 4732
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4732
  return (tmp___0);
#line 4734
  return (ldv_func_res);
}
}
#line 4737 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4742
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4744
  mutex_unlock(ldv_func_arg1);
#line 4745
  return;
}
}
#line 4747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_66(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4752
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4754
  mutex_lock(ldv_func_arg1);
#line 4755
  return;
}
}
#line 4757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_67(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4762
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4764
  mutex_unlock(ldv_func_arg1);
#line 4765
  return;
}
}
#line 4767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4772
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4774
  mutex_unlock(ldv_func_arg1);
#line 4775
  return;
}
}
#line 4777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_lock_interruptible_69(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4782
  tmp = mutex_lock_interruptible(ldv_func_arg1);
#line 4782
  ldv_func_res = tmp;
#line 4784
  tmp___0 = ldv_mutex_lock_interruptible_mutex_of_drbd_socket(ldv_func_arg1);
#line 4784
  return (tmp___0);
#line 4786
  return (ldv_func_res);
}
}
#line 4789 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4794
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4796
  mutex_unlock(ldv_func_arg1);
#line 4797
  return;
}
}
#line 4799 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4804
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4806
  mutex_unlock(ldv_func_arg1);
#line 4807
  return;
}
}
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 594 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 596
  __hlist_del(n);
#line 597
  n->next = 0xdead000000100100UL;
#line 598
  n->pprev = 0xdead000000200200UL;
#line 599
  return;
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 182
  __i = i;
#line 183
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 186
  return (i + __i);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 207
  tmp = atomic_add_return(- i, v);
#line 207
  return (tmp);
}
}
#line 304 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 308
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_82(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_83(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_81(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_84(struct mutex *ldv_func_arg1 ) ;
#line 184 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 104 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_lock_map ;
#line 322 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 324
  rcu_read_lock_sched_notrace();
#line 326
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 328
  return;
}
}
#line 344 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 346
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 348
  rcu_read_lock_sched_notrace();
#line 349
  return;
}
}
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___2(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_12024: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_12024;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___2(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___2(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___2(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 173 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 175
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 175
  if (tmp != 0L) {
#line 176
    if (part->partno != 0) {
#line 177
      __mptr = (struct device  const  *)part->__dev.parent;
#line 177
      return ((struct gendisk *)__mptr + 0xffffffffffffffa0UL);
    } else {
#line 179
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 179
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffffa0UL);
    }
  } else {

  }
#line 181
  return (0);
}
}
#line 326 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 328
  part->in_flight[rw] = part->in_flight[rw] + 1;
#line 329
  if (part->partno != 0) {
#line 330
    tmp = part_to_disk(part);
#line 330
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] + 1;
  } else {

  }
#line 331
  return;
}
}
#line 333 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 335
  part->in_flight[rw] = part->in_flight[rw] - 1;
#line 336
  if (part->partno != 0) {
#line 337
    tmp = part_to_disk(part);
#line 337
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] - 1;
  } else {

  }
#line 338
  return;
}
}
#line 346
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 212 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 213
extern void bio_pair_release(struct bio_pair * ) ;
#line 229
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 707 "include/linux/blkdev.h"
extern void blk_plug_device(struct request_queue * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1141
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1391
mempool_t *drbd_request_mempool ;
#line 1407
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) ;
#line 1409
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____1(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1711
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1713
  if (forcedetach == 0) {
#line 1714
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1714
    if (tmp != 0) {
#line 1715
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1717
    goto ldv_43453;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1722
  if ((int )mdev->state.ldv_35202.disk > 2) {
#line 1723
    __ns.i = mdev->state.i;
#line 1723
    __ns.ldv_35202.disk = 2U;
#line 1723
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1727
  goto ldv_43453;
  }
  ldv_43453: ;
#line 1730
  return;
}
}
#line 1955 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1957
  atomic_inc(& mdev->ap_pending_cnt);
#line 1958
  return;
}
}
#line 2109 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2111
  mxb = 1000000;
#line 2112
  tmp = get_net_conf(mdev);
#line 2112
  if (tmp != 0) {
#line 2113
    mxb = (mdev->net_conf)->max_buffers;
#line 2114
    put_net_conf(mdev);
  } else {

  }
#line 2116
  return (mxb);
}
}
#line 2119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(union drbd_state s ) 
{ 


  {
#line 2125
  switch ((unsigned int )s.ldv_35202.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2138
  goto ldv_43612;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2157
  return (0);
  }
  ldv_43612: ;
#line 2160
  switch ((unsigned int )s.ldv_35202.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2167
  goto ldv_43632;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2176
  return (0);
  }
  ldv_43632: ;
#line 2179
  return (1);
}
}
#line 2182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2184
  tmp = drbd_get_max_buffers(mdev);
#line 2184
  mxb = tmp;
#line 2186
  if ((unsigned int )*((unsigned char *)mdev + 1822UL) != 0U) {
#line 2187
    return (0);
  } else {

  }
#line 2188
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2188
  if (tmp___0 != 0) {
#line 2189
    return (0);
  } else {

  }
#line 2196
  tmp___1 = drbd_state_is_stable(mdev->state);
#line 2196
  if (tmp___1 == 0) {
#line 2197
    return (0);
  } else {

  }
#line 2201
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2201
  if (tmp___2 > mxb) {
#line 2202
    return (0);
  } else {

  }
#line 2203
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2203
  if (tmp___3 != 0) {
#line 2204
    return (0);
  } else {

  }
#line 2205
  return (1);
}
}
#line 2211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 2215
  tmp = get_current();
#line 2215
  wait.flags = 0U;
#line 2215
  wait.private = (void *)tmp;
#line 2215
  wait.func = & autoremove_wake_function;
#line 2215
  wait.task_list.next = & wait.task_list;
#line 2215
  wait.task_list.prev = & wait.task_list;
#line 2225
  spin_lock_irq(& mdev->req_lock);
#line 2226
  goto ldv_43648;
  ldv_43647: 
#line 2227
  prepare_to_wait(& mdev->misc_wait, & wait, 2);
#line 2228
  spin_unlock_irq(& mdev->req_lock);
#line 2229
  schedule();
#line 2230
  finish_wait(& mdev->misc_wait, & wait);
#line 2231
  spin_lock_irq(& mdev->req_lock);
  ldv_43648: 
#line 2226
  tmp___0 = __inc_ap_bio_cond(mdev);
#line 2226
  if (tmp___0 == 0) {
#line 2227
    goto ldv_43647;
  } else {

  }
#line 2233
  atomic_add(count, & mdev->ap_bio_cnt);
#line 2234
  spin_unlock_irq(& mdev->req_lock);
#line 2235
  return;
}
}
#line 2237 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2239
  tmp = drbd_get_max_buffers(mdev);
#line 2239
  mxb = tmp;
#line 2240
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2240
  ap_bio = tmp___0;
#line 2242
  if (ap_bio < 0) {
#line 2242
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2242);
  } else {

  }
#line 2246
  if (ap_bio < mxb) {
#line 2247
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2248
  if (ap_bio == 0) {
#line 2248
    tmp___2 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2248
    if (tmp___2 != 0) {
#line 2249
      tmp___1 = test_and_set_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 2249
      if (tmp___1 == 0) {
#line 2250
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2251
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_plug_device(struct drbd_conf *mdev ) 
{ 
  struct request_queue *q ;
  int tmp ;

  {
#line 51
  q = bdev_get_queue(mdev->this_bdev);
#line 53
  spin_lock_irq(q->queue_lock);
#line 58
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& q->queue_flags));
#line 58
  if (tmp == 0) {
#line 59
    blk_plug_device(q);
#line 60
    del_timer(& q->unplug_timer);
  } else {

  }
#line 63
  spin_unlock_irq(q->queue_lock);
#line 64
  return;
}
}
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 208
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 208
  if (tmp != 0L) {
#line 208
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (208), "i" (12UL));
    ldv_43756: ;
#line 208
    goto ldv_43756;
  } else {

  }
#line 209
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 217
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 217
  if (tmp != 0L) {
#line 217
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (217), "i" (12UL));
    ldv_43761: ;
#line 217
    goto ldv_43761;
  } else {

  }
#line 218
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 225
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 247 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct bio *bio ;
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 251
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 251
  req = (struct drbd_request *)tmp;
#line 253
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 253
  if (tmp___0 != 0L) {
#line 254
    bio = bio_clone(bio_src, 16U);
#line 256
    req->rq_state = 0UL;
#line 257
    req->mdev = mdev;
#line 258
    req->master_bio = bio_src;
#line 259
    req->private_bio = bio;
#line 260
    req->epoch = 0U;
#line 261
    req->sector = bio->bi_sector;
#line 262
    req->size = bio->bi_size;
#line 263
    req->start_time = jiffies;
#line 264
    INIT_HLIST_NODE(& req->colision);
#line 265
    INIT_LIST_HEAD(& req->tl_requests);
#line 266
    INIT_LIST_HEAD(& req->w.list);
#line 268
    bio->bi_private = (void *)req;
#line 269
    bio->bi_end_io = & drbd_endio_pri;
#line 270
    bio->bi_next = 0;
  } else {

  }
#line 272
  return (req);
}
}
#line 275 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 277
  mempool_free((void *)req, drbd_request_mempool);
#line 278
  return;
}
}
#line 293
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 92
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 94
  rcu_read_lock();
#line 94
  switch (4UL) {
  case 1UL: 
#line 94
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_43830;
  case 2UL: 
#line 94
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_43830;
  case 4UL: 
#line 94
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_43830;
  case 8UL: 
#line 94
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 94
  goto ldv_43830;
  default: 
#line 94
  __bad_percpu_size();
  }
  ldv_43830: 
#line 94
  cpu = pfo_ret__;
#line 95
  __vpp_verify = 0;
#line 95
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 95
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 95
  if ((mdev->vdisk)->part0.partno != 0) {
#line 95
    __vpp_verify___0 = 0;
#line 95
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 95
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 95
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 96
  __vpp_verify___1 = 0;
#line 96
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 96
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 96
  if ((mdev->vdisk)->part0.partno != 0) {
#line 96
    __vpp_verify___2 = 0;
#line 96
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 96
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 96
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 97
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 98
  rcu_read_unlock();
#line 99
  return;
}
}
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 104
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 105
  duration = (unsigned long )jiffies - req->start_time;
#line 107
  rcu_read_lock();
#line 107
  switch (4UL) {
  case 1UL: 
#line 107
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_43863;
  case 2UL: 
#line 107
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_43863;
  case 4UL: 
#line 107
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_43863;
  case 8UL: 
#line 107
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 107
  goto ldv_43863;
  default: 
#line 107
  __bad_percpu_size();
  }
  ldv_43863: 
#line 107
  cpu = pfo_ret__;
#line 108
  __vpp_verify = 0;
#line 108
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 108
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 108
  if ((mdev->vdisk)->part0.partno != 0) {
#line 108
    __vpp_verify___0 = 0;
#line 108
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 108
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 108
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 109
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 110
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 111
  rcu_read_unlock();
#line 112
  return;
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 116
  s = req->rq_state;
#line 120
  if ((int )rw == 1) {
#line 127
    list_del(& req->tl_requests);
#line 132
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 133
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                             133U);
    } else {

    }
#line 135
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 136
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         136U);
    } else {

    }
#line 148
    if ((s & 7UL) != 0UL) {
#line 149
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 149
      if (tmp___0 != 0) {
#line 150
        drbd_al_complete_io(mdev, req->sector);
#line 151
        put_ldev(mdev);
      } else {
#line 152
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 152
        if (tmp != 0) {
#line 153
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 160
  drbd_req_free(req);
#line 161
  return;
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 172
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 172
  if (tmp != 0) {
#line 173
    return;
  } else {

  }
#line 175
  b = mdev->newest_tle;
#line 176
  b->w.cb = & w_send_barrier;
#line 181
  inc_ap_pending(mdev);
#line 182
  drbd_queue_work(& mdev->data.work, & b->w);
#line 183
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 184
  return;
}
}
#line 186 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 189
  s = req->rq_state;
#line 197
  if ((int )mdev->state.ldv_35202.conn > 9 && req->epoch == (mdev->newest_tle)->br_number) {
#line 199
    queue_barrier(mdev);
  } else {

  }
#line 204
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 205
    sector = req->sector;
#line 206
    size = (int const   )req->size;
#line 212
    slot = tl_hash_slot___0(mdev, sector);
#line 213
    n = slot->first;
#line 213
    goto ldv_43906;
    ldv_43905: 
#line 214
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 214
    if (tmp != 0) {
#line 215
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 213
    n = n->next;
    ldv_43906: ;
#line 213
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 213
      __builtin_prefetch((void const   *)n->next);
#line 213
      if (1 != 0) {
#line 213
        __mptr = (struct hlist_node  const  *)n;
#line 213
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 213
        if (1 != 0) {
#line 214
          goto ldv_43905;
        } else {
#line 216
          goto ldv_43907;
        }
      } else {
#line 216
        goto ldv_43907;
      }
    } else {

    }
    ldv_43907: 
#line 236
    slot = ee_hash_slot___0(mdev, req->sector);
#line 237
    n = slot->first;
#line 237
    goto ldv_43914;
    ldv_43913: 
#line 238
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 238
    if (tmp___0 != 0) {
#line 239
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 240
      goto ldv_43912;
    } else {

    }
#line 237
    n = n->next;
    ldv_43914: ;
#line 237
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 237
      __builtin_prefetch((void const   *)n->next);
#line 237
      if (1 != 0) {
#line 237
        __mptr___0 = (struct hlist_node  const  *)n;
#line 237
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 237
        if (1 != 0) {
#line 238
          goto ldv_43913;
        } else {
#line 240
          goto ldv_43912;
        }
      } else {
#line 240
        goto ldv_43912;
      }
    } else {

    }
    ldv_43912: ;
  } else {

  }
#line 243
  return;
}
}
#line 247 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 250
  bio_endio(m->bio, m->error);
#line 251
  dec_ap_bio(mdev);
#line 252
  return;
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 262
  s = req->rq_state;
#line 263
  mdev = req->mdev;
#line 265
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 276
  if ((s & 16UL) != 0UL) {
#line 277
    return;
  } else {

  }
#line 278
  if ((s & 8UL) != 0UL) {
#line 279
    return;
  } else {

  }
#line 280
  if ((int )s & 1) {
#line 281
    return;
  } else {

  }
#line 283
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 305
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 306
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 306
    error = (int )tmp;
#line 310
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 310
    if (tmp___0 == 0) {
#line 311
      hlist_del(& req->colision);
    } else
#line 313
    if ((s & 504UL) != 0UL) {
#line 313
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & RQ_NET_MASK) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              313);
    } else {

    }
#line 316
    if (rw == 1) {
#line 317
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 320
    _drbd_end_io_acct(mdev, req);
#line 322
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 323
    m->bio = req->master_bio;
#line 324
    req->master_bio = 0;
  } else {

  }
#line 327
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 332
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 333
  return;
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 363
  mdev = req->mdev;
#line 364
  sector = req->sector;
#line 365
  size = (int const   )req->size;
#line 371
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 371
  if (tmp == 0) {
#line 371
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            371);
  } else {

  }
#line 373
  tmp___0 = get_net_conf(mdev);
#line 373
  if (tmp___0 == 0) {
#line 374
    return (0);
  } else {

  }
#line 377
  _b = mdev->tl_hash_s == 0U;
#line 377
  if (_b != 0) {
#line 377
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            377);
  } else {

  }
#line 377
  if (_b != 0) {
#line 378
    goto out_no_conflict;
  } else {

  }
#line 379
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 379
  if (tmp___1 != 0L) {
#line 379
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (379), "i" (12UL));
    ldv_43942: ;
#line 379
    goto ldv_43942;
  } else {

  }
#line 382
  slot = tl_hash_slot___0(mdev, sector);
#line 383
  n = slot->first;
#line 383
  goto ldv_43949;
  ldv_43948: 
#line 384
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 384
  if (tmp___4 != 0) {
#line 385
    tmp___2 = get_current();
#line 385
    tmp___3 = get_current();
#line 385
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 391
    goto out_conflict;
  } else {

  }
#line 383
  n = n->next;
  ldv_43949: ;
#line 383
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 383
    __builtin_prefetch((void const   *)n->next);
#line 383
    if (1 != 0) {
#line 383
      __mptr = (struct hlist_node  const  *)n;
#line 383
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 383
      if (1 != 0) {
#line 384
        goto ldv_43948;
      } else {
#line 386
        goto ldv_43950;
      }
    } else {
#line 386
      goto ldv_43950;
    }
  } else {

  }
  ldv_43950: ;
#line 395
  if (mdev->ee_hash_s != 0U) {
#line 397
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 397
    if (tmp___5 != 0L) {
#line 397
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (397), "i" (12UL));
      ldv_43951: ;
#line 397
      goto ldv_43951;
    } else {

    }
#line 400
    slot = ee_hash_slot___0(mdev, sector);
#line 401
    n = slot->first;
#line 401
    goto ldv_43957;
    ldv_43956: 
#line 402
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 402
    if (tmp___8 != 0) {
#line 403
      tmp___6 = get_current();
#line 403
      tmp___7 = get_current();
#line 403
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 409
      goto out_conflict;
    } else {

    }
#line 401
    n = n->next;
    ldv_43957: ;
#line 401
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 401
      __builtin_prefetch((void const   *)n->next);
#line 401
      if (1 != 0) {
#line 401
        __mptr___0 = (struct hlist_node  const  *)n;
#line 401
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 401
        if (1 != 0) {
#line 402
          goto ldv_43956;
        } else {
#line 404
          goto ldv_43958;
        }
      } else {
#line 404
        goto ldv_43958;
      }
    } else {

    }
    ldv_43958: ;
  } else {

  }
  out_no_conflict: 
#line 418
  put_net_conf(mdev);
#line 419
  return (0);
  out_conflict: 
#line 422
  put_net_conf(mdev);
#line 423
  return (1);
}
}
#line 438 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 441
  mdev = req->mdev;
#line 442
  m->bio = 0;
#line 444
  switch ((unsigned int )what) {
  default: 
#line 446
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
          446);
#line 447
  goto ldv_43966;
  case 1U: ;
#line 458
  if ((req->rq_state & 504UL) != 0UL) {
#line 458
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            458);
  } else {

  }
#line 459
  req->rq_state = req->rq_state | 8UL;
#line 460
  inc_ap_pending(mdev);
#line 461
  goto ldv_43966;
  case 2U: ;
#line 465
  if ((req->rq_state & 7UL) != 0UL) {
#line 465
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            465);
  } else {

  }
#line 466
  req->rq_state = req->rq_state | 1UL;
#line 467
  goto ldv_43966;
  case 20U: ;
#line 470
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 471
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 473
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 475
  req->rq_state = req->rq_state | 6UL;
#line 476
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 478
  _req_may_be_done(req, m);
#line 479
  put_ldev(mdev);
#line 480
  goto ldv_43966;
  case 19U: 
#line 483
  req->rq_state = req->rq_state | 2UL;
#line 484
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 486
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 487
  _req_may_be_done(req, m);
#line 488
  put_ldev(mdev);
#line 489
  goto ldv_43966;
  case 18U: 
#line 493
  req->rq_state = req->rq_state | 2UL;
#line 494
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 495
  _req_may_be_done(req, m);
#line 496
  put_ldev(mdev);
#line 497
  goto ldv_43966;
  case 17U: 
#line 500
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         500U);
#line 502
  req->rq_state = req->rq_state | 2UL;
#line 503
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 505
  if ((req->rq_state & 504UL) != 0UL) {
#line 505
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            505);
  } else {

  }
#line 507
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 508
  put_ldev(mdev);
#line 512
  if (*((unsigned int *)mdev + 455UL) != 65536U) {
#line 513
    _req_may_be_done(req, m);
#line 514
    goto ldv_43966;
  } else {

  }
#line 518
  req->rq_state = req->rq_state | 8UL;
#line 519
  inc_ap_pending(mdev);
  case 4U: 
#line 532
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 532
  hlist_add_head(& req->colision, tmp);
#line 534
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 536
  if ((req->rq_state & 8UL) == 0UL) {
#line 536
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            536);
  } else {

  }
#line 537
  req->rq_state = req->rq_state | 16UL;
#line 538
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 541
  drbd_queue_work(& mdev->data.work, & req->w);
#line 542
  goto ldv_43966;
  case 3U: 
#line 548
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 548
  hlist_add_head(& req->colision, tmp___0);
#line 568
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 572
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 572
  if (tmp___1 != 0) {
#line 572
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            572);
  } else {

  }
#line 574
  req->epoch = (mdev->newest_tle)->br_number;
#line 575
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 579
  (mdev->newest_tle)->n_req = (mdev->newest_tle)->n_req + 1;
#line 582
  if ((req->rq_state & 8UL) == 0UL) {
#line 582
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            582);
  } else {

  }
#line 583
  req->rq_state = req->rq_state | 16UL;
#line 584
  req->w.cb = & w_send_dblock;
#line 585
  drbd_queue_work(& mdev->data.work, & req->w);
#line 588
  if ((mdev->newest_tle)->n_req >= (mdev->net_conf)->max_epoch_size) {
#line 589
    queue_barrier(mdev);
  } else {

  }
#line 591
  goto ldv_43966;
  case 5U: ;
  case 6U: 
#line 598
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 601
  _req_may_be_done(req, m);
#line 602
  goto ldv_43966;
  case 7U: ;
#line 606
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 610
    if ((req->rq_state & 8UL) != 0UL) {
#line 611
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 611
      if (tmp___2 != 0) {
#line 611
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 611
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 611
      if (tmp___4 < 0) {
#line 611
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 611
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 611, tmp___3);
      } else {

      }
#line 612
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 613
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 619
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 620
  req->rq_state = req->rq_state | 32UL;
#line 626
  _req_may_be_done(req, m);
#line 627
  goto ldv_43966;
  case 9U: 
#line 630
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
  case 8U: ;
#line 635
  if ((req->rq_state & 8UL) != 0UL) {
#line 636
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 636
    if (tmp___5 != 0) {
#line 636
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 636
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 636
    if (tmp___7 < 0) {
#line 636
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 636
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 636, tmp___6);
    } else {

    }
  } else {

  }
#line 637
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 638
  req->rq_state = req->rq_state | 64UL;
#line 641
  if ((req->rq_state & 16UL) == 0UL) {
#line 642
    _req_may_be_done(req, m);
  } else {

  }
#line 643
  goto ldv_43966;
  case 12U: 
#line 646
  req->rq_state = req->rq_state | 256UL;
  case 13U: ;
#line 651
  if ((unsigned int )what == 13U) {
#line 652
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 655
  req->rq_state = req->rq_state | 64UL;
  case 11U: ;
  case 10U: 
#line 673
  req->rq_state = req->rq_state | 128UL;
#line 674
  if ((req->rq_state & 8UL) == 0UL) {
#line 674
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            674);
  } else {

  }
#line 675
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 675
  if (tmp___8 != 0) {
#line 675
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 675
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 675
  if (tmp___10 < 0) {
#line 675
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 675
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 675, tmp___9);
  } else {

  }
#line 676
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 677
  _req_may_be_done(req, m);
#line 678
  goto ldv_43966;
  case 14U: ;
#line 682
  if ((req->rq_state & 8UL) != 0UL) {
#line 683
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 683
    if (tmp___11 != 0) {
#line 683
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 683
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 683
    if (tmp___13 < 0) {
#line 683
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 683
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 683, tmp___12);
    } else {

    }
  } else {

  }
#line 684
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 686
  req->rq_state = req->rq_state | 64UL;
#line 687
  _req_may_be_done(req, m);
#line 689
  goto ldv_43966;
  case 15U: ;
#line 692
  if ((req->rq_state & 8UL) != 0UL) {
#line 696
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 697
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 699
  if ((req->rq_state & 32UL) == 0UL) {
#line 699
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_SENT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            699);
  } else {

  }
#line 700
  req->rq_state = req->rq_state | 64UL;
#line 701
  _req_may_be_done(req, m);
#line 702
  goto ldv_43966;
  case 16U: ;
#line 705
  if ((req->rq_state & 8UL) == 0UL) {
#line 705
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            705);
  } else {

  }
#line 706
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 706
  if (tmp___14 != 0) {
#line 706
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 706
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 706
  if (tmp___16 < 0) {
#line 706
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 706
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 706, tmp___15);
  } else {

  }
#line 707
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 708
  req->rq_state = req->rq_state | 192UL;
#line 709
  _req_may_be_done(req, m);
#line 710
  goto ldv_43966;
  }
  ldv_43966: ;
#line 712
  return;
}
}
#line 721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 726
  if ((unsigned int )*((unsigned char *)mdev + 1821UL) == 16U) {
#line 727
    return (1);
  } else {

  }
#line 728
  if ((int )mdev->state.ldv_35202.disk > 4) {
#line 729
    return (0);
  } else {

  }
#line 730
  if ((int )mdev->state.ldv_35202.disk <= 3) {
#line 731
    return (0);
  } else {

  }
#line 733
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 734
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 736
  if (sector >= nr_sectors) {
#line 736
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            736);
  } else {

  }
#line 737
  if (esector >= nr_sectors) {
#line 737
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            737);
  } else {

  }
#line 739
  sbnr = sector >> 3;
#line 740
  ebnr = esector >> 3;
#line 742
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 742
  return (tmp == 0);
}
}
#line 745 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int err ;
  int ret ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 747
  rw = (int const   )bio->bi_rw & (int const   )1025;
#line 748
  size = (int const   )bio->bi_size;
#line 749
  sector = bio->bi_sector;
#line 750
  b = 0;
#line 753
  err = -5;
#line 754
  ret = 0;
#line 757
  req = drbd_req_new(mdev, bio);
#line 758
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 759
    dec_ap_bio(mdev);
#line 762
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 763
    bio_endio(bio, -12);
#line 764
    return (0);
  } else {

  }
#line 767
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 768
  if (local == 0) {
#line 769
    bio_put(req->private_bio);
#line 770
    req->private_bio = 0;
  } else {

  }
#line 772
  if (rw == 1) {
#line 773
    remote = 1;
  } else {
#line 776
    if (local != 0) {
#line 777
      tmp = drbd_may_do_local_read(mdev, sector, size);
#line 777
      if (tmp == 0) {
#line 783
        local = 0;
#line 784
        bio_put(req->private_bio);
#line 785
        req->private_bio = 0;
#line 786
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 789
    remote = local == 0 && (int )mdev->state.ldv_35202.pdsk > 7;
  }
#line 800
  if ((rw == 1024 && (int )mdev->state.ldv_35202.disk > 3) && local == 0) {
#line 801
    err = -11;
#line 802
    goto fail_and_free_req;
  } else {

  }
#line 810
  if (rw == 1 && local != 0) {
#line 811
    drbd_al_begin_io(mdev, sector);
  } else {

  }
#line 813
  remote = remote != 0 && (*((unsigned int *)mdev + 455UL) == 65536U || (*((unsigned int *)mdev + 455UL) == 32768U && (int )mdev->state.ldv_35202.conn > 9));
#line 817
  if ((local == 0 && remote == 0) && (unsigned int )*((unsigned char *)mdev + 1822UL) == 0U) {
#line 818
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 819
    goto fail_free_complete;
  } else {

  }
#line 828
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 828
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 828
    if (tmp___1 != 0) {
      allocate_barrier: 
#line 832
      tmp___0 = kmalloc___2(56UL, 16U);
#line 832
      b = (struct drbd_tl_epoch *)tmp___0;
#line 833
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 834
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 835
        err = -12;
#line 836
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 841
  spin_lock_irq(& mdev->req_lock);
#line 843
  if ((unsigned int )*((unsigned char *)mdev + 1822UL) != 0U) {
#line 848
    ret = 1;
#line 849
    spin_unlock_irq(& mdev->req_lock);
#line 850
    goto fail_free_complete;
  } else {

  }
#line 853
  if (remote != 0) {
#line 854
    remote = *((unsigned int *)mdev + 455UL) == 65536U || (*((unsigned int *)mdev + 455UL) == 32768U && (int )mdev->state.ldv_35202.conn > 9);
#line 857
    if (remote == 0) {
#line 858
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 859
    if (local == 0 && remote == 0) {
#line 860
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 861
      spin_unlock_irq(& mdev->req_lock);
#line 862
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 866
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 867
    mdev->unused_spare_tle = b;
#line 868
    b = 0;
  } else {

  }
#line 870
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 870
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 870
    if (tmp___2 != 0) {
#line 875
      spin_unlock_irq(& mdev->req_lock);
#line 876
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 881
  _drbd_start_io_acct(mdev, req, bio);
#line 893
  if (remote != 0 && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 893
    tmp___4 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 893
    if (tmp___4 != 0) {
#line 895
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 896
      mdev->unused_spare_tle = 0;
    } else {
#line 893
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 898
  if (remote != 0 && rw == 1) {
#line 898
    tmp___3 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 898
    if (tmp___3 != 0) {
#line 898
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              899);
    } else {

    }
  } else {

  }
#line 917
  if (remote != 0) {
#line 918
    _req_mod(req, to_be_send);
  } else {

  }
#line 919
  if (local != 0) {
#line 920
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 925
  if (rw == 1) {
#line 925
    tmp___8 = _req_conflicts(req);
#line 925
    if (tmp___8 != 0) {
#line 932
      if (local != 0) {
#line 933
        bio_put(req->private_bio);
#line 934
        req->private_bio = 0;
#line 935
        drbd_al_complete_io(mdev, req->sector);
#line 936
        put_ldev(mdev);
#line 937
        local = 0;
      } else {

      }
#line 939
      if (remote != 0) {
#line 940
        tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 940
        if (tmp___5 != 0) {
#line 940
          __wake_up(& mdev->misc_wait, 3U, 1, 0);
        } else {

        }
#line 940
        tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 940
        if (tmp___7 < 0) {
#line 940
          tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 940
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                  "drbd_make_request_common", 940, tmp___6);
        } else {

        }
      } else {

      }
#line 941
      _drbd_end_io_acct(mdev, req);
#line 943
      bio_endio(req->master_bio, 0);
#line 944
      req->master_bio = 0;
#line 945
      dec_ap_bio(mdev);
#line 946
      drbd_req_free(req);
#line 947
      remote = 0;
    } else {

    }
  } else {

  }
#line 952
  if (remote != 0) {
#line 957
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 961
  spin_unlock_irq(& mdev->req_lock);
#line 962
  kfree((void const   *)b);
#line 964
  if (local != 0) {
#line 965
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 967
    tmp___9 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 967
    if (tmp___9 != 0) {
#line 970
      bio_endio(req->private_bio, -5);
    } else {
#line 972
      generic_make_request(req->private_bio);
    }
  } else {

  }
#line 977
  drbd_plug_device(mdev);
#line 979
  return (0);
  fail_free_complete: ;
#line 982
  if (rw == 1 && local != 0) {
#line 983
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 985
  if (local != 0) {
#line 986
    bio_put(req->private_bio);
#line 987
    req->private_bio = 0;
#line 988
    put_ldev(mdev);
  } else {

  }
#line 990
  if (ret == 0) {
#line 991
    bio_endio(bio, err);
  } else {

  }
#line 993
  drbd_req_free(req);
#line 994
  dec_ap_bio(mdev);
#line 995
  kfree((void const   *)b);
#line 997
  return (ret);
}
}
#line 1005 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1007
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 1009
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1009
    if (tmp___1 != 0) {
#line 1010
      tmp = get_current();
#line 1010
      tmp___0 = get_current();
#line 1010
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1016
    return (1);
  } else {

  }
#line 1028
  if ((int )mdev->state.ldv_35202.disk <= 7 && (int )mdev->state.ldv_35202.pdsk <= 7) {
#line 1029
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1029
    if (tmp___2 != 0) {
#line 1030
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sorry, I have no access to good data anymore.\n");
    } else {

    }
#line 1031
    return (1);
  } else {

  }
#line 1034
  return (0);
}
}
#line 1037 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1040
  mdev = (struct drbd_conf *)q->queuedata;
#line 1042
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1042
  if (tmp != 0) {
#line 1043
    bio_endio(bio, -1);
#line 1044
    return (0);
  } else {

  }
#line 1055
  tmp___0 = __builtin_expect((bio->bi_rw & 16UL) != 0UL, 0L);
#line 1055
  if (tmp___0 != 0L) {
#line 1055
    tmp___1 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 1055
    if (tmp___1 != 0) {
#line 1057
      bio_endio(bio, -95);
#line 1058
      return (0);
    } else {

    }
  } else {

  }
#line 1064
  if (bio->bi_size == 0U) {
#line 1064
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_size > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1064);
  } else {

  }
#line 1065
  if ((bio->bi_size & 511U) != 0U) {
#line 1065
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1065);
  } else {

  }
#line 1066
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1066
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_idx == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1066);
  } else {

  }
#line 1070
  s_enr = (unsigned int )(bio->bi_sector >> 6);
#line 1071
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 6);
#line 1073
  tmp___3 = __builtin_expect(s_enr == e_enr, 1L);
#line 1073
  if (tmp___3 != 0L) {
#line 1074
    inc_ap_bio(mdev, 1);
#line 1075
    tmp___2 = drbd_make_request_common(mdev, bio);
#line 1075
    return (tmp___2);
  } else {

  }
#line 1080
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 32768U) {
#line 1082
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1086
    bio_endio(bio, -22);
  } else {
#line 1098
    sect = bio->bi_sector;
#line 1099
    sps = 64;
#line 1100
    mask = sps + -1;
#line 1101
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1102
    bp = bio_split(bio, (int )first_sectors);
#line 1113
    inc_ap_bio(mdev, 3);
#line 1115
    if (s_enr + 1U != e_enr) {
#line 1115
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1115);
    } else {

    }
#line 1117
    goto ldv_44050;
    ldv_44049: 
#line 1118
    inc_ap_bio(mdev, 1);
    ldv_44050: 
#line 1117
    tmp___4 = drbd_make_request_common(mdev, & bp->bio1);
#line 1117
    if (tmp___4 != 0) {
#line 1118
      goto ldv_44049;
    } else {

    }

#line 1120
    goto ldv_44053;
    ldv_44052: 
#line 1121
    inc_ap_bio(mdev, 1);
    ldv_44053: 
#line 1120
    tmp___5 = drbd_make_request_common(mdev, & bp->bio2);
#line 1120
    if (tmp___5 != 0) {
#line 1121
      goto ldv_44052;
    } else {

    }
#line 1123
    dec_ap_bio(mdev);
#line 1125
    bio_pair_release(bp);
  }
#line 1127
  return (0);
}
}
#line 1143 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1145
  mdev = (struct drbd_conf *)q->queuedata;
#line 1146
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1148
  bio_size = bvm->bi_size;
#line 1151
  limit = (int )(32768U - ((bio_offset & 32767U) + bio_size));
#line 1153
  if (limit < 0) {
#line 1154
    limit = 0;
  } else {

  }
#line 1155
  if (bio_size == 0U) {
#line 1156
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1157
      limit = (int )bvec->bv_len;
    } else
#line 1158
    if (limit != 0) {
#line 1158
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1158
      if (tmp != 0) {
#line 1159
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1161
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1162
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1163
          _min1 = limit;
#line 1163
          _min2 = backing_limit;
#line 1163
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1165
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1167
  return (limit);
}
}
#line 1170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_81(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1175
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1177
  mutex_lock(ldv_func_arg1);
#line 1178
  return;
}
}
#line 1180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int ldv_mutex_trylock_82(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1185
  tmp = mutex_trylock(ldv_func_arg1);
#line 1185
  ldv_func_res = tmp;
#line 1187
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1187
  return (tmp___0);
#line 1189
  return (ldv_func_res);
}
}
#line 1192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_83(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1197
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1199
  mutex_unlock(ldv_func_arg1);
#line 1200
  return;
}
}
#line 1202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_84(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1207
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1209
  mutex_lock(ldv_func_arg1);
#line 1210
  return;
}
}
#line 1212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1217
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1219
  mutex_unlock(ldv_func_arg1);
#line 1220
  return;
}
}
#line 1222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1227
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1229
  mutex_unlock(ldv_func_arg1);
#line 1230
  return;
}
}
#line 124 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 126
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 126
  return (tmp != 1);
}
}
#line 130
__inline static int ldv_mutex_is_locked_99(struct mutex *lock ) ;
#line 162
int ldv_mutex_trylock_94(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_98(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_103(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_105(struct mutex *ldv_func_arg1 ) ;
#line 195
void ldv_mutex_unlock_106(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_93(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_96(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_102(struct mutex *ldv_func_arg1 ) ;
#line 46
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___3(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_11026: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_11026;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___3(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___3((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___3(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___3(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___3((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___0(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___3(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 319 "include/linux/mm.h"
__inline static void get_page(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 321
  page = compound_head(page);
#line 322
  tmp = atomic_read((atomic_t const   *)(& page->_count));
#line 322
  tmp___0 = __builtin_expect(tmp == 0, 0L);
#line 322
  if (tmp___0 != 0L) {
#line 322
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                         "i" (322), "i" (12UL));
    ldv_16295: ;
#line 322
    goto ldv_16295;
  } else {

  }
#line 323
  atomic_inc(& page->_count);
#line 324
  return;
}
}
#line 987 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 989
  retval = 512;
#line 991
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 992
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 994
  return ((unsigned short )retval);
}
}
#line 997 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 999
  tmp = bdev_get_queue(bdev);
#line 999
  tmp___0 = queue_logical_block_size(tmp);
#line 999
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 249
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1551 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1560
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1561
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) ;
#line 1562
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1570
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____2(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1711
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1713
  if (forcedetach == 0) {
#line 1714
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1714
    if (tmp != 0) {
#line 1715
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1717
    goto ldv_43486;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1722
  if ((int )mdev->state.ldv_35202.disk > 2) {
#line 1723
    __ns.i = mdev->state.i;
#line 1723
    __ns.ldv_35202.disk = 2U;
#line 1723
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1727
  goto ldv_43486;
  }
  ldv_43486: ;
#line 1730
  return;
}
}
#line 1740 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1743
  if (error != 0) {
#line 1745
    tmp = spinlock_check(& mdev->req_lock);
#line 1745
    flags = _raw_spin_lock_irqsave(tmp);
#line 1746
    __drbd_chk_io_error____2(mdev, forcedetach, where);
#line 1747
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1749
  return;
}
}
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
#line 132
  md_io.mdev = mdev;
#line 133
  init_completion(& md_io.event);
#line 134
  md_io.error = 0;
#line 136
  if (rw & 1) {
#line 136
    tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 136
    if (tmp == 0) {
#line 137
      rw = rw | 16;
    } else {

    }
  } else {

  }
#line 138
  rw = rw | 544;
  retry: 
#line 141
  bio = bio_alloc(16U, 1);
#line 142
  bio->bi_bdev = bdev->md_bdev;
#line 143
  bio->bi_sector = sector;
#line 144
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 144
  ok = tmp___0 == size;
#line 145
  if (ok == 0) {
#line 146
    goto out;
  } else {

  }
#line 147
  bio->bi_private = (void *)(& md_io);
#line 148
  bio->bi_end_io = & drbd_md_io_complete;
#line 149
  bio->bi_rw = (unsigned long )rw;
#line 151
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 151
  if (tmp___1 != 0) {
#line 152
    bio_endio(bio, -5);
  } else {
#line 154
    submit_bio(rw, bio);
  }
#line 155
  wait_for_completion(& md_io.event);
#line 156
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
#line 161
  tmp___2 = __builtin_expect((bio->bi_rw & 16UL) != 0UL, 0L);
#line 161
  if (tmp___2 != 0L) {
#line 161
    tmp___3 = __builtin_expect(ok == 0, 0L);
#line 161
    if (tmp___3 != 0L) {
#line 163
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Barriers not supported on meta data device - disabling\n");
#line 164
      set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 165
      rw = rw & -17;
#line 166
      bio_put(bio);
#line 167
      goto retry;
    } else {

    }
  } else {

  }
  out: 
#line 170
  bio_put(bio);
#line 171
  return (ok);
}
}
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 178
  offset = 0;
#line 179
  iop = mdev->md_io_page;
#line 181
  tmp = ldv_mutex_is_locked_99(& mdev->md_io_mutex);
#line 181
  if (tmp == 0) {
#line 181
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            181);
  } else {

  }
#line 183
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 183
  if (tmp___0 != 0L) {
#line 183
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (183), "i" (12UL));
    ldv_43801: ;
#line 183
    goto ldv_43801;
  } else {

  }
#line 185
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 185
  logical_block_size = (int )tmp___1;
#line 186
  if (logical_block_size == 0) {
#line 187
    logical_block_size = 512;
  } else {

  }
#line 190
  if (logical_block_size != 512) {
#line 191
    mask = logical_block_size / 512 + -1;
#line 192
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 192
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              192);
    } else {

    }
#line 193
    if ((mask + 1) * 512 != logical_block_size) {
#line 193
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              193);
    } else {

    }
#line 194
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 195
    sector = (sector_t )(~ mask) & sector;
#line 196
    iop = mdev->md_io_tmpp;
#line 198
    if (rw & 1) {
#line 201
      tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 201
      p = tmp___2;
#line 202
      tmp___3 = lowmem_page_address(mdev->md_io_tmpp);
#line 202
      hp = tmp___3;
#line 204
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 207
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 207
      if (tmp___4 != 0L) {
#line 208
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 211
        return (0);
      } else {

      }
#line 214
      __len = 512UL;
#line 214
      if (__len > 63UL) {
#line 214
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 214
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 218
  tmp___7 = drbd_md_first_sector(bdev);
#line 218
  if (tmp___7 > sector) {
#line 220
    tmp___5 = get_current();
#line 220
    tmp___6 = get_current();
#line 220
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 218
    tmp___8 = drbd_md_last_sector(bdev);
#line 218
    if (tmp___8 < sector) {
#line 220
      tmp___5 = get_current();
#line 220
      tmp___6 = get_current();
#line 220
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 224
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 225
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 225
  if (tmp___9 != 0L) {
#line 226
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 228
    return (0);
  } else {

  }
#line 231
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 232
    tmp___10 = lowmem_page_address(mdev->md_io_page);
#line 232
    p___0 = tmp___10;
#line 233
    tmp___11 = lowmem_page_address(mdev->md_io_tmpp);
#line 233
    hp___0 = tmp___11;
#line 235
    __len___0 = 512UL;
#line 235
    if (__len___0 > 63UL) {
#line 235
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 235
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 238
  return (ok);
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 245
  al_flags = 0UL;
#line 247
  spin_lock_irq(& mdev->al_lock);
#line 248
  tmp = lc_find(mdev->resync, enr / 4U);
#line 249
  tmp___1 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 249
  if (tmp___1 != 0L) {
#line 250
    __mptr = (struct lc_element  const  *)tmp;
#line 250
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 251
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 251
    if (tmp___0 != 0) {
#line 252
      spin_unlock_irq(& mdev->al_lock);
#line 253
      return (0);
    } else {

    }
  } else {

  }
#line 256
  al_ext = lc_get(mdev->act_log, enr);
#line 257
  al_flags = (mdev->act_log)->flags;
#line 258
  spin_unlock_irq(& mdev->al_lock);
#line 269
  return (al_ext);
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 274
  enr = (unsigned int )(sector >> 13);
#line 278
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 278
  if (tmp <= 0) {
#line 278
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            278);
  } else {

  }
#line 280
  al_ext = _al_get(mdev, enr);
#line 280
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 280
    goto ldv_43830;
  } else {

  }
#line 280
  tmp___0 = get_current();
#line 280
  __wait.flags = 0U;
#line 280
  __wait.private = (void *)tmp___0;
#line 280
  __wait.func = & autoremove_wake_function;
#line 280
  __wait.task_list.next = & __wait.task_list;
#line 280
  __wait.task_list.prev = & __wait.task_list;
  ldv_43833: 
#line 280
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 280
  al_ext = _al_get(mdev, enr);
#line 280
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 280
    goto ldv_43832;
  } else {

  }
#line 280
  schedule();
#line 280
  goto ldv_43833;
  ldv_43832: 
#line 280
  finish_wait(& mdev->al_wait, & __wait);
  ldv_43830: ;
#line 282
  if (al_ext->lc_number != enr) {
#line 289
    init_completion(& al_work.event);
#line 290
    al_work.al_ext = al_ext;
#line 291
    al_work.enr = enr;
#line 292
    al_work.old_enr = al_ext->lc_number;
#line 293
    al_work.w.cb = & w_al_write_transaction;
#line 294
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 295
    wait_for_completion(& al_work.event);
#line 297
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 299
    spin_lock_irq(& mdev->al_lock);
#line 300
    lc_changed(mdev->act_log, al_ext);
#line 301
    spin_unlock_irq(& mdev->al_lock);
#line 302
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 304
  return;
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 308
  enr = (unsigned int )(sector >> 13);
#line 312
  tmp = spinlock_check(& mdev->al_lock);
#line 312
  flags = _raw_spin_lock_irqsave(tmp);
#line 314
  extent = lc_find(mdev->act_log, enr);
#line 316
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 317
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 318
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 319
    return;
  } else {

  }
#line 322
  tmp___0 = lc_put(mdev->act_log, extent);
#line 322
  if (tmp___0 == 0U) {
#line 323
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 325
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 326
  return;
}
}
#line 329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  int tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  unsigned int tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  int tmp___9 ;

  {
#line 331
  __mptr = (struct drbd_work  const  *)w;
#line 331
  aw = (struct update_al_work *)__mptr;
#line 332
  updated = aw->al_ext;
#line 333
  new_enr = aw->enr;
#line 334
  evicted = aw->old_enr;
#line 339
  xor_sum = 0U;
#line 341
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 341
  if (tmp == 0) {
#line 342
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "get_ldev() failed in w_al_write_transaction\n");
#line 343
    complete(& ((struct update_al_work *)w)->event);
#line 344
    return (1);
  } else {

  }
#line 350
  if ((int )mdev->state.ldv_35202.conn <= 9 && evicted != 4294967295U) {
#line 351
    drbd_bm_write_sect(mdev, (unsigned long )(evicted / 4U));
  } else {

  }
#line 353
  ldv_mutex_lock_100(& mdev->md_io_mutex);
#line 354
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 354
  buffer = (struct al_transaction *)tmp___0;
#line 356
  buffer->magic = 1728214147U;
#line 357
  tmp___1 = __fswab32(mdev->al_tr_number);
#line 357
  buffer->tr_number = tmp___1;
#line 359
  tmp___2 = lc_index_of(mdev->act_log, updated);
#line 359
  n = (int )tmp___2;
#line 361
  tmp___3 = __fswab32((__u32 )n);
#line 361
  buffer->updates[0].pos = tmp___3;
#line 362
  tmp___4 = __fswab32(new_enr);
#line 362
  buffer->updates[0].extent = tmp___4;
#line 364
  xor_sum = xor_sum ^ new_enr;
#line 366
  __min1 = 61;
#line 366
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 366
  mx = __min1 < __min2 ? __min1 : __min2;
#line 368
  i = 0;
#line 368
  goto ldv_43867;
  ldv_43866: 
#line 369
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 370
  tmp___5 = lc_element_by_index(mdev->act_log, idx);
#line 370
  extent_nr = tmp___5->lc_number;
#line 371
  tmp___6 = __fswab32(idx);
#line 371
  buffer->updates[i + 1].pos = tmp___6;
#line 372
  tmp___7 = __fswab32(extent_nr);
#line 372
  buffer->updates[i + 1].extent = tmp___7;
#line 373
  xor_sum = xor_sum ^ extent_nr;
#line 368
  i = i + 1;
  ldv_43867: ;
#line 368
  if (i < mx) {
#line 369
    goto ldv_43866;
  } else {

  }

#line 375
  goto ldv_43870;
  ldv_43869: 
#line 376
  buffer->updates[i + 1].pos = 4294967295U;
#line 377
  buffer->updates[i + 1].extent = 4294967295U;
#line 378
  xor_sum = ~ xor_sum;
#line 375
  i = i + 1;
  ldv_43870: ;
#line 375
  if (i <= 60) {
#line 376
    goto ldv_43869;
  } else {

  }
#line 380
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 381
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 382
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 384
  tmp___8 = __fswab32(xor_sum);
#line 384
  buffer->xor_sum = tmp___8;
#line 386
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 389
  tmp___9 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 389
  if (tmp___9 == 0) {
#line 390
    drbd_chk_io_error____0(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 392
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 392
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 394
    mdev->al_tr_pos = 0;
  } else {

  }
#line 396
  if (mdev->al_tr_pos > 63) {
#line 396
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            396);
  } else {

  }
#line 397
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 399
  ldv_mutex_unlock_101(& mdev->md_io_mutex);
#line 401
  complete(& ((struct update_al_work *)w)->event);
#line 402
  put_ldev(mdev);
#line 404
  return (1);
}
}
#line 416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 423
  xor_sum = 0U;
#line 425
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 429
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 429
  if (tmp == 0) {
#line 430
    return (-1);
  } else {

  }
#line 432
  tmp___0 = __fswab32(b->magic);
#line 432
  rv = tmp___0 == 2205418087U;
#line 434
  i = 0;
#line 434
  goto ldv_43884;
  ldv_43883: 
#line 435
  tmp___1 = __fswab32(b->updates[i].extent);
#line 435
  xor_sum = tmp___1 ^ xor_sum;
#line 434
  i = i + 1;
  ldv_43884: ;
#line 434
  if (i <= 61) {
#line 435
    goto ldv_43883;
  } else {

  }
#line 436
  tmp___2 = __fswab32(b->xor_sum);
#line 436
  rv = (tmp___2 == xor_sum) & rv;
#line 438
  return (rv);
}
}
#line 448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 454
  active_extents = 0;
#line 455
  transactions = 0;
#line 456
  found_valid = 0;
#line 457
  from = 0;
#line 458
  to = 0;
#line 459
  from_tnr = 0U;
#line 460
  to_tnr = 0U;
#line 463
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 468
  ldv_mutex_lock_102(& mdev->md_io_mutex);
#line 469
  tmp = lowmem_page_address(mdev->md_io_page);
#line 469
  buffer = (struct al_transaction *)tmp;
#line 472
  i = 0;
#line 472
  goto ldv_43904;
  ldv_43903: 
#line 473
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 474
  if (rv == 0) {
#line 475
    goto ldv_43902;
  } else {

  }
#line 476
  if (rv == -1) {
#line 477
    ldv_mutex_unlock_103(& mdev->md_io_mutex);
#line 478
    return (0);
  } else {

  }
#line 480
  tmp___0 = __fswab32(buffer->tr_number);
#line 480
  cnr = tmp___0;
#line 482
  found_valid = found_valid + 1;
#line 482
  if (found_valid == 1) {
#line 483
    from = i;
#line 484
    to = i;
#line 485
    from_tnr = cnr;
#line 486
    to_tnr = cnr;
#line 487
    goto ldv_43902;
  } else {

  }
#line 489
  if ((int )cnr - (int )from_tnr < 0) {
#line 490
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 490
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              490);
    } else {

    }
#line 491
    from = i;
#line 492
    from_tnr = cnr;
  } else {

  }
#line 494
  if ((int )cnr - (int )to_tnr > 0) {
#line 495
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 495
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              495);
    } else {

    }
#line 496
    to = i;
#line 497
    to_tnr = cnr;
  } else {

  }
  ldv_43902: 
#line 472
  i = i + 1;
  ldv_43904: ;
#line 472
  if (i <= mx) {
#line 473
    goto ldv_43903;
  } else {

  }

#line 501
  if (found_valid == 0) {
#line 502
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 503
    ldv_mutex_unlock_104(& mdev->md_io_mutex);
#line 504
    return (1);
  } else {

  }
#line 509
  i = from;
  ldv_43919: 
#line 515
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 516
  _b = rv == 0;
#line 516
  if (_b != 0) {
#line 516
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            516);
  } else {

  }
#line 516
  if (_b != 0) {
#line 516
    goto cancel;
  } else {

  }
#line 517
  if (rv == -1) {
#line 518
    ldv_mutex_unlock_105(& mdev->md_io_mutex);
#line 519
    return (0);
  } else {

  }
#line 522
  tmp___1 = __fswab32(buffer->tr_number);
#line 522
  trn = tmp___1;
#line 524
  spin_lock_irq(& mdev->al_lock);
#line 530
  j = 61;
#line 530
  goto ldv_43916;
  ldv_43915: 
#line 531
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 531
  pos = (int )tmp___2;
#line 532
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 532
  extent_nr = tmp___3;
#line 534
  if (extent_nr == 4294967295U) {
#line 535
    goto ldv_43914;
  } else {

  }
#line 537
  lc_set(mdev->act_log, extent_nr, pos);
#line 538
  active_extents = active_extents + 1;
  ldv_43914: 
#line 530
  j = j - 1;
  ldv_43916: ;
#line 530
  if (j >= 0) {
#line 531
    goto ldv_43915;
  } else {

  }
#line 540
  spin_unlock_irq(& mdev->al_lock);
#line 542
  transactions = transactions + 1;
  cancel: ;
#line 545
  if (i == to) {
#line 546
    goto ldv_43918;
  } else {

  }
#line 547
  i = i + 1;
#line 548
  if (i > mx) {
#line 549
    i = 0;
  } else {

  }
#line 550
  goto ldv_43919;
  ldv_43918: 
#line 552
  mdev->al_tr_number = to_tnr + 1U;
#line 553
  mdev->al_tr_pos = to;
#line 554
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 554
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 556
    mdev->al_tr_pos = 0;
  } else {

  }
#line 559
  ldv_mutex_unlock_106(& mdev->md_io_mutex);
#line 561
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 564
  return (1);
}
}
#line 567 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void atodb_endio(struct bio *bio , int error ) 
{ 
  struct drbd_atodb_wait *wc ;
  struct drbd_conf *mdev ;
  struct page *page ;
  int uptodate ;
  int tmp ;

  {
#line 569
  wc = (struct drbd_atodb_wait *)bio->bi_private;
#line 570
  mdev = wc->mdev;
#line 572
  uptodate = (int )bio->bi_flags & 1;
#line 577
  if (error == 0 && uptodate == 0) {
#line 578
    error = -5;
  } else {

  }
#line 580
  drbd_chk_io_error____0(mdev, error, 1, "atodb_endio");
#line 581
  if (error != 0 && wc->error == 0) {
#line 582
    wc->error = error;
  } else {

  }
#line 584
  tmp = atomic_dec_and_test(& wc->count);
#line 584
  if (tmp != 0) {
#line 585
    complete(& wc->io_done);
  } else {

  }
#line 587
  page = (bio->bi_io_vec)->bv_page;
#line 588
  put_page(page);
#line 589
  bio_put(bio);
#line 590
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 591
  put_ldev(mdev);
#line 592
  return;
}
}
#line 599 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int atodb_prepare_unless_covered(struct drbd_conf *mdev , struct bio **bios ,
                                        unsigned int enr , struct drbd_atodb_wait *wc ) 
{ 
  struct bio *bio ;
  struct page *page ;
  sector_t on_disk_sector ;
  unsigned int page_offset___0 ;
  int offset ;
  int i ;
  int err ;
  struct bio_vec  const  *prev_bv ;
  void *tmp ;
  size_t __min1 ;
  size_t __min2 ;
  size_t tmp___0 ;
  int tmp___1 ;

  {
#line 607
  page_offset___0 = 4096U;
#line 609
  i = 0;
#line 610
  err = -12;
#line 614
  enr = enr & 4294967288U;
#line 615
  on_disk_sector = (sector_t )(((u64 )enr + (mdev->ldev)->md.md_offset) + (u64 )(mdev->ldev)->md.bm_offset);
#line 618
  if ((on_disk_sector & 7UL) != 0UL) {
#line 618
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(on_disk_sector & 7U) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            618);
  } else {

  }
#line 627
  goto ldv_43943;
  ldv_43942: ;
#line 628
  if (bio->bi_sector == on_disk_sector) {
#line 629
    return (0);
  } else {

  }
#line 630
  i = i + 1;
  ldv_43943: 
#line 627
  bio = *(bios + (unsigned long )i);
#line 627
  if ((unsigned long )bio != (unsigned long )((struct bio *)0)) {
#line 628
    goto ldv_43942;
  } else {

  }
#line 635
  bio = bio_alloc(208U, 1);
#line 636
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 637
    return (-12);
  } else {

  }
#line 639
  if (i > 0) {
#line 640
    prev_bv = (struct bio_vec  const  *)(*(bios + ((unsigned long )i + 0xffffffffffffffffUL)))->bi_io_vec;
#line 641
    page_offset___0 = (unsigned int )prev_bv->bv_offset + (unsigned int )prev_bv->bv_len;
#line 642
    page = prev_bv->bv_page;
  } else {

  }
#line 644
  if (page_offset___0 == 4096U) {
#line 645
    page = alloc_pages(2U, 0U);
#line 646
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 647
      goto out_bio_put;
    } else {

    }
#line 648
    page_offset___0 = 0U;
  } else {
#line 650
    get_page(page);
  }
#line 653
  offset = (int )(enr << 6);
#line 654
  tmp = kmap(page);
#line 655
  __min1 = 512UL;
#line 655
  tmp___0 = drbd_bm_words(mdev);
#line 655
  __min2 = tmp___0 - (size_t )offset;
#line 655
  drbd_bm_get_lel(mdev, (size_t )offset, __min1 < __min2 ? __min1 : __min2, (unsigned long *)tmp + (unsigned long )page_offset___0);
#line 657
  kunmap(page);
#line 659
  bio->bi_private = (void *)wc;
#line 660
  bio->bi_end_io = & atodb_endio;
#line 661
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 662
  bio->bi_sector = on_disk_sector;
#line 664
  tmp___1 = bio_add_page(bio, page, 4096U, page_offset___0);
#line 664
  if (tmp___1 != 4096) {
#line 665
    goto out_put_page;
  } else {

  }
#line 667
  atomic_inc(& wc->count);
#line 673
  atomic_inc(& mdev->local_cnt);
#line 675
  *(bios + (unsigned long )i) = bio;
#line 677
  return (0);
  out_put_page: 
#line 680
  err = -22;
#line 681
  put_page(page);
  out_bio_put: 
#line 683
  bio_put(bio);
#line 684
  return (err);
}
}
#line 694 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) 
{ 
  int i ;
  int nr_elements ;
  unsigned int enr ;
  struct bio **bios ;
  struct drbd_atodb_wait wc ;
  int _b ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  struct lc_element *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  struct request_queue *tmp___7 ;
  int tmp___8 ;
  struct lc_element *tmp___9 ;

  {
#line 701
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 701
  _b = tmp == 0;
#line 701
  if (_b != 0) {
#line 701
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_al_to_on_disk_bm", (char *)"!get_ldev_if_state(mdev, D_ATTACHING)",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            701);
  } else {

  }
#line 701
  if (_b != 0) {
#line 702
    return;
  } else {

  }
#line 704
  tmp___0 = lc_try_lock(mdev->act_log);
#line 704
  if (tmp___0 != 0) {
#line 704
    goto ldv_43962;
  } else {

  }
#line 704
  tmp___1 = get_current();
#line 704
  __wait.flags = 0U;
#line 704
  __wait.private = (void *)tmp___1;
#line 704
  __wait.func = & autoremove_wake_function;
#line 704
  __wait.task_list.next = & __wait.task_list;
#line 704
  __wait.task_list.prev = & __wait.task_list;
  ldv_43965: 
#line 704
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 704
  tmp___2 = lc_try_lock(mdev->act_log);
#line 704
  if (tmp___2 != 0) {
#line 704
    goto ldv_43964;
  } else {

  }
#line 704
  schedule();
#line 704
  goto ldv_43965;
  ldv_43964: 
#line 704
  finish_wait(& mdev->al_wait, & __wait);
  ldv_43962: 
#line 706
  nr_elements = (int )(mdev->act_log)->nr_elements;
#line 709
  tmp___3 = kzalloc___0((unsigned long )nr_elements * 8UL, 208U);
#line 709
  bios = (struct bio **)tmp___3;
#line 710
  if ((unsigned long )bios == (unsigned long )((struct bio **)0)) {
#line 711
    goto submit_one_by_one;
  } else {

  }
#line 713
  atomic_set(& wc.count, 0);
#line 714
  init_completion(& wc.io_done);
#line 715
  wc.mdev = mdev;
#line 716
  wc.error = 0;
#line 718
  i = 0;
#line 718
  goto ldv_43970;
  ldv_43969: 
#line 719
  tmp___4 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 719
  enr = tmp___4->lc_number;
#line 720
  if (enr == 4294967295U) {
#line 721
    goto ldv_43967;
  } else {

  }
#line 723
  tmp___5 = atodb_prepare_unless_covered(mdev, bios, enr / 4U, & wc);
#line 723
  if (tmp___5 != 0) {
#line 726
    goto free_bios_submit_one_by_one;
  } else {

  }
  ldv_43967: 
#line 718
  i = i + 1;
  ldv_43970: ;
#line 718
  if (i < nr_elements) {
#line 719
    goto ldv_43969;
  } else {

  }
#line 730
  lc_unlock(mdev->act_log);
#line 731
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 734
  i = 0;
#line 734
  goto ldv_43974;
  ldv_43973: ;
#line 735
  if ((unsigned long )*(bios + (unsigned long )i) == (unsigned long )((struct bio *)0)) {
#line 736
    goto ldv_43972;
  } else {

  }
#line 737
  tmp___6 = drbd_insert_fault(mdev, 0U);
#line 737
  if (tmp___6 != 0) {
#line 738
    (*(bios + (unsigned long )i))->bi_rw = 1UL;
#line 739
    bio_endio(*(bios + (unsigned long )i), -5);
  } else {
#line 741
    submit_bio(1, *(bios + (unsigned long )i));
  }
#line 734
  i = i + 1;
  ldv_43974: ;
#line 734
  if (i < nr_elements) {
#line 735
    goto ldv_43973;
  } else {

  }
  ldv_43972: 
#line 745
  tmp___7 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 745
  drbd_blk_run_queue(tmp___7);
#line 748
  drbd_md_flush(mdev);
#line 756
  tmp___8 = atomic_read((atomic_t const   *)(& wc.count));
#line 756
  if (tmp___8 != 0) {
#line 757
    wait_for_completion(& wc.io_done);
  } else {

  }
#line 759
  put_ldev(mdev);
#line 761
  kfree((void const   *)bios);
#line 762
  return;
  free_bios_submit_one_by_one: 
#line 766
  i = 0;
#line 766
  goto ldv_43976;
  ldv_43975: 
#line 767
  bio_endio(*(bios + (unsigned long )i), 0);
#line 766
  i = i + 1;
  ldv_43976: ;
#line 766
  if (i < nr_elements && (unsigned long )*(bios + (unsigned long )i) != (unsigned long )((struct bio *)0)) {
#line 767
    goto ldv_43975;
  } else {

  }
#line 769
  kfree((void const   *)bios);
  submit_one_by_one: 
#line 772
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Using the slow drbd_al_to_on_disk_bm()\n");
#line 774
  i = 0;
#line 774
  goto ldv_43980;
  ldv_43979: 
#line 775
  tmp___9 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 775
  enr = tmp___9->lc_number;
#line 776
  if (enr == 4294967295U) {
#line 777
    goto ldv_43978;
  } else {

  }
#line 780
  drbd_bm_write_sect(mdev, (unsigned long )(enr / 4U));
  ldv_43978: 
#line 774
  i = i + 1;
  ldv_43980: ;
#line 774
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 775
    goto ldv_43979;
  } else {

  }
#line 783
  lc_unlock(mdev->act_log);
#line 784
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 785
  put_ldev(mdev);
#line 786
  return;
}
}
#line 792 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct lc_element *tmp___2 ;
  unsigned long tmp___3 ;
  char *tmp___4 ;

  {
#line 795
  add = 0UL;
#line 799
  tmp = lc_try_lock(mdev->act_log);
#line 799
  if (tmp != 0) {
#line 799
    goto ldv_43989;
  } else {

  }
#line 799
  tmp___0 = get_current();
#line 799
  __wait.flags = 0U;
#line 799
  __wait.private = (void *)tmp___0;
#line 799
  __wait.func = & autoremove_wake_function;
#line 799
  __wait.task_list.next = & __wait.task_list;
#line 799
  __wait.task_list.prev = & __wait.task_list;
  ldv_43992: 
#line 799
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 799
  tmp___1 = lc_try_lock(mdev->act_log);
#line 799
  if (tmp___1 != 0) {
#line 799
    goto ldv_43991;
  } else {

  }
#line 799
  schedule();
#line 799
  goto ldv_43992;
  ldv_43991: 
#line 799
  finish_wait(& mdev->al_wait, & __wait);
  ldv_43989: 
#line 801
  i = 0;
#line 801
  goto ldv_43995;
  ldv_43994: 
#line 802
  tmp___2 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 802
  enr = tmp___2->lc_number;
#line 803
  if (enr == 4294967295U) {
#line 804
    goto ldv_43993;
  } else {

  }
#line 805
  tmp___3 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 805
  add = tmp___3 + add;
  ldv_43993: 
#line 801
  i = i + 1;
  ldv_43995: ;
#line 801
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 802
    goto ldv_43994;
  } else {

  }
#line 808
  lc_unlock(mdev->act_log);
#line 809
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 811
  tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 811
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___4);
#line 812
  return;
}
}
#line 815 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 819
  spin_lock_irq(& mdev->al_lock);
#line 820
  rv = al_ext->refcnt == 0U;
#line 821
  tmp = __builtin_expect(rv != 0, 1L);
#line 821
  if (tmp != 0L) {
#line 822
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 823
  spin_unlock_irq(& mdev->al_lock);
#line 825
  return (rv);
}
}
#line 837 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 842
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 842
  if (tmp == 0) {
#line 842
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            842);
  } else {

  }
#line 844
  i = 0;
#line 844
  goto ldv_44013;
  ldv_44012: 
#line 845
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 846
  if (al_ext->lc_number == 4294967295U) {
#line 847
    goto ldv_44007;
  } else {

  }
#line 848
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 848
  if (tmp___0 != 0) {
#line 848
    goto ldv_44008;
  } else {

  }
#line 848
  tmp___1 = get_current();
#line 848
  __wait.flags = 0U;
#line 848
  __wait.private = (void *)tmp___1;
#line 848
  __wait.func = & autoremove_wake_function;
#line 848
  __wait.task_list.next = & __wait.task_list;
#line 848
  __wait.task_list.prev = & __wait.task_list;
  ldv_44011: 
#line 848
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 848
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 848
  if (tmp___2 != 0) {
#line 848
    goto ldv_44010;
  } else {

  }
#line 848
  schedule();
#line 848
  goto ldv_44011;
  ldv_44010: 
#line 848
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44008: ;
  ldv_44007: 
#line 844
  i = i + 1;
  ldv_44013: ;
#line 844
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 845
    goto ldv_44012;
  } else {

  }
#line 851
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 852
  return;
}
}
#line 854 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 856
  __mptr = (struct drbd_work  const  *)w;
#line 856
  udw = (struct update_odbm_work *)__mptr;
#line 858
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 858
  if (tmp___0 == 0) {
#line 859
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 859
    if (tmp != 0) {
#line 860
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 861
    kfree((void const   *)udw);
#line 862
    return (1);
  } else {

  }
#line 865
  drbd_bm_write_sect(mdev, (unsigned long )udw->enr);
#line 866
  put_ldev(mdev);
#line 868
  kfree((void const   *)udw);
#line 870
  tmp___1 = drbd_bm_total_weight(mdev);
#line 870
  if (tmp___1 <= mdev->rs_failed) {
#line 871
    switch ((int )mdev->state.ldv_35202.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 874
    drbd_resync_finished(mdev);
    default: ;
#line 877
    goto ldv_44029;
    }
    ldv_44029: ;
  } else {

  }
#line 880
  drbd_bcast_sync_progress(mdev);
#line 882
  return (1);
}
}
#line 892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 900
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 900
  if (tmp == 0) {
#line 900
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            900);
  } else {

  }
#line 904
  enr = (unsigned int )(sector >> 15);
#line 906
  e = lc_get(mdev->resync, enr);
#line 907
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 908
    __mptr = (struct lc_element  const  *)e;
#line 908
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 909
    if (ext->lce.lc_number == enr) {
#line 910
      if (success != 0) {
#line 911
        ext->rs_left = ext->rs_left - count;
      } else {
#line 913
        ext->rs_failed = ext->rs_failed + count;
      }
#line 914
      if (ext->rs_left < ext->rs_failed) {
#line 915
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
                (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                count);
#line 920
        dump_stack();
#line 922
        lc_put(mdev->resync, & ext->lce);
#line 923
        val.i = 0U;
#line 923
        val.ldv_35202.conn = 1U;
#line 923
        mask.i = 0U;
#line 923
        mask.ldv_35202.conn = 31U;
#line 923
        drbd_force_state(mdev, mask, val);
#line 924
        return;
      } else {

      }
    } else {
#line 933
      tmp___0 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 933
      rs_left = tmp___0;
#line 934
      if (ext->flags != 0UL) {
#line 935
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 939
        ext->flags = 0UL;
      } else {

      }
#line 941
      if (ext->rs_failed != 0) {
#line 942
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
#line 945
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 947
      ext->rs_left = rs_left;
#line 948
      ext->rs_failed = success == 0 ? count : 0;
#line 949
      lc_changed(mdev->resync, & ext->lce);
    }
#line 951
    lc_put(mdev->resync, & ext->lce);
#line 954
    if (ext->rs_left == ext->rs_failed) {
#line 955
      ext->rs_failed = 0;
#line 957
      tmp___1 = kmalloc___3(32UL, 32U);
#line 957
      udw = (struct update_odbm_work *)tmp___1;
#line 958
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 959
        udw->enr = ext->lce.lc_number;
#line 960
        udw->w.cb = & w_update_odbm;
#line 961
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 963
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
#line 964
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {
#line 968
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 972
  return;
}
}
#line 982 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;
  unsigned long tmp___3 ;
  int tmp___4 ;

  {
#line 987
  count = 0UL;
#line 989
  wake_up = 0;
#line 992
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 993
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 995
    return;
  } else {

  }
#line 997
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 998
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1000
  _b = sector >= nr_sectors;
#line 1000
  if (_b != 0) {
#line 1000
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1000);
  } else {

  }
#line 1000
  if (_b != 0) {
#line 1000
    return;
  } else {

  }
#line 1001
  _b___0 = esector >= nr_sectors;
#line 1001
  if (_b___0 != 0) {
#line 1001
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1001);
  } else {

  }
#line 1001
  if (_b___0 != 0) {
#line 1001
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1003
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1008
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1008
  if (tmp != 0L) {
#line 1009
    return;
  } else {

  }
#line 1010
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1010
  if (tmp___0 != 0L) {
#line 1011
    ebnr = lbnr;
  } else {
#line 1013
    ebnr = (esector - 7UL) >> 3;
  }
#line 1014
  sbnr = (sector + 7UL) >> 3;
#line 1016
  if (sbnr > ebnr) {
#line 1017
    return;
  } else {

  }
#line 1023
  tmp___1 = spinlock_check(& mdev->al_lock);
#line 1023
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 1024
  tmp___2 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 1024
  count = (unsigned long )tmp___2;
#line 1025
  if (count != 0UL) {
#line 1027
    if ((unsigned long )jiffies - mdev->rs_mark_time > 2500UL) {
#line 1030
      tmp___3 = drbd_bm_total_weight(mdev);
#line 1030
      if ((mdev->rs_mark_left != tmp___3 && (unsigned int )*((unsigned short *)mdev + 910UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 910UL) != 320U) {
#line 1033
        mdev->rs_mark_time = jiffies;
#line 1034
        mdev->rs_mark_left = drbd_bm_total_weight(mdev);
      } else {

      }
    } else {

    }
#line 1037
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1037
    if (tmp___4 != 0) {
#line 1038
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 1039
      put_ldev(mdev);
    } else {

    }
#line 1043
    wake_up = 1;
  } else {

  }
#line 1045
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1046
  if (wake_up != 0) {
#line 1047
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1048
  return;
}
}
#line 1058 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 1066
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1067
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 1069
    return;
  } else {

  }
#line 1072
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1072
  if (tmp == 0) {
#line 1073
    return;
  } else {

  }
#line 1075
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1076
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1078
  _b = sector >= nr_sectors;
#line 1078
  if (_b != 0) {
#line 1078
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1078);
  } else {

  }
#line 1078
  if (_b != 0) {
#line 1079
    goto out;
  } else {

  }
#line 1080
  _b___0 = esector >= nr_sectors;
#line 1080
  if (_b___0 != 0) {
#line 1080
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1080);
  } else {

  }
#line 1080
  if (_b___0 != 0) {
#line 1081
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1083
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1087
  sbnr = sector >> 3;
#line 1088
  ebnr = esector >> 3;
#line 1092
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 1092
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 1093
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 1093
  count = (unsigned int )tmp___1;
#line 1095
  enr = (unsigned int )(sector >> 15);
#line 1096
  e = lc_find(mdev->resync, enr);
#line 1097
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1098
    __mptr = (struct lc_element  const  *)e;
#line 1098
    __mptr___0 = (struct lc_element  const  *)e;
#line 1098
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 1099
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 1102
  put_ldev(mdev);
#line 1103
  return;
}
}
#line 1106 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 1110
  wakeup = 0;
#line 1113
  spin_lock_irq(& mdev->al_lock);
#line 1114
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 1115
    spin_unlock_irq(& mdev->al_lock);
#line 1116
    return (0);
  } else {

  }
#line 1118
  e = lc_get(mdev->resync, enr);
#line 1119
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1119
    __mptr = (struct lc_element  const  *)e;
#line 1119
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1119
    bm_ext = 0;
  }
#line 1120
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1121
    if (bm_ext->lce.lc_number != enr) {
#line 1122
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1123
      bm_ext->rs_failed = 0;
#line 1124
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1125
      wakeup = 1;
    } else {

    }
#line 1127
    if (bm_ext->lce.refcnt == 1U) {
#line 1128
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1129
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1131
  rs_flags = (mdev->resync)->flags;
#line 1132
  spin_unlock_irq(& mdev->al_lock);
#line 1133
  if (wakeup != 0) {
#line 1134
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1136
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1137
    if ((rs_flags & 4UL) != 0UL) {
#line 1138
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 1140
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1140
    if (tmp != 0L) {
#line 1140
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1140), "i" (12UL));
      ldv_44107: ;
#line 1140
      goto ldv_44107;
    } else {

    }
  } else {

  }
#line 1143
  return (bm_ext);
}
}
#line 1146 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1149
  rv = 0;
#line 1151
  spin_lock_irq(& mdev->al_lock);
#line 1152
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1152
  if (tmp != 0L) {
#line 1153
    rv = 1;
  } else {
#line 1155
    al_ext = lc_find(mdev->act_log, enr);
#line 1156
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1157
      if (al_ext->refcnt != 0U) {
#line 1158
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1161
  spin_unlock_irq(& mdev->al_lock);
#line 1168
  return (rv);
}
}
#line 1178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned int tmp___8 ;

  {
#line 1180
  enr = (unsigned int )(sector >> 15);
#line 1184
  __ret = 0;
#line 1184
  bm_ext = _bme_get(mdev, enr);
#line 1184
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1184
    tmp = get_current();
#line 1184
    __wait.flags = 0U;
#line 1184
    __wait.private = (void *)tmp;
#line 1184
    __wait.func = & autoremove_wake_function;
#line 1184
    __wait.task_list.next = & __wait.task_list;
#line 1184
    __wait.task_list.prev = & __wait.task_list;
    ldv_44126: 
#line 1184
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1184
    bm_ext = _bme_get(mdev, enr);
#line 1184
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1184
      goto ldv_44124;
    } else {

    }
#line 1184
    tmp___0 = get_current();
#line 1184
    tmp___1 = signal_pending(tmp___0);
#line 1184
    if (tmp___1 == 0) {
#line 1184
      schedule();
#line 1184
      goto ldv_44125;
    } else {

    }
#line 1184
    __ret = -512;
#line 1184
    goto ldv_44124;
    ldv_44125: ;
#line 1184
    goto ldv_44126;
    ldv_44124: 
#line 1184
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1184
  sig = __ret;
#line 1186
  if (sig != 0) {
#line 1187
    return (0);
  } else {

  }
#line 1189
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1189
  if (tmp___2 != 0) {
#line 1190
    return (1);
  } else {

  }
#line 1192
  i = 0;
#line 1192
  goto ldv_44135;
  ldv_44134: 
#line 1193
  __ret___0 = 0;
#line 1193
  tmp___7 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1193
  if (tmp___7 != 0) {
#line 1193
    tmp___3 = get_current();
#line 1193
    __wait___0.flags = 0U;
#line 1193
    __wait___0.private = (void *)tmp___3;
#line 1193
    __wait___0.func = & autoremove_wake_function;
#line 1193
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1193
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_44132: 
#line 1193
    prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1193
    tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1193
    if (tmp___4 == 0) {
#line 1193
      goto ldv_44130;
    } else {

    }
#line 1193
    tmp___5 = get_current();
#line 1193
    tmp___6 = signal_pending(tmp___5);
#line 1193
    if (tmp___6 == 0) {
#line 1193
      schedule();
#line 1193
      goto ldv_44131;
    } else {

    }
#line 1193
    __ret___0 = -512;
#line 1193
    goto ldv_44130;
    ldv_44131: ;
#line 1193
    goto ldv_44132;
    ldv_44130: 
#line 1193
    finish_wait(& mdev->al_wait, & __wait___0);
  } else {

  }
#line 1193
  sig = __ret___0;
#line 1195
  if (sig != 0) {
#line 1196
    spin_lock_irq(& mdev->al_lock);
#line 1197
    tmp___8 = lc_put(mdev->resync, & bm_ext->lce);
#line 1197
    if (tmp___8 == 0U) {
#line 1198
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1199
      mdev->resync_locked = mdev->resync_locked - 1U;
#line 1200
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {

    }
#line 1202
    spin_unlock_irq(& mdev->al_lock);
#line 1203
    return (0);
  } else {

  }
#line 1192
  i = i + 1;
  ldv_44135: ;
#line 1192
  if (i <= 3) {
#line 1193
    goto ldv_44134;
  } else {

  }
#line 1207
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1209
  return (1);
}
}
#line 1221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1223
  enr = (unsigned int )(sector >> 15);
#line 1224
  al_enr = enr * 4U;
#line 1229
  spin_lock_irq(& mdev->al_lock);
#line 1230
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1244
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1245
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1245
      __mptr = (struct lc_element  const  *)e;
#line 1245
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1245
      bm_ext = 0;
    }
#line 1246
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1247
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1247
      if (tmp != 0) {
#line 1247
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1247);
      } else {

      }
#line 1248
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1248
      if (tmp___0 == 0) {
#line 1248
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1248);
      } else {

      }
#line 1249
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1250
      mdev->resync_wenr = 4294967295U;
#line 1251
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1251
      if (tmp___1 == 0U) {
#line 1252
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1253
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1255
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1259
  e = lc_try_get(mdev->resync, enr);
#line 1260
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1260
    __mptr___0 = (struct lc_element  const  *)e;
#line 1260
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1260
    bm_ext = 0;
  }
#line 1261
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1262
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1262
    if (tmp___2 != 0) {
#line 1263
      goto proceed;
    } else {

    }
#line 1264
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1264
    if (tmp___3 == 0) {
#line 1265
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1271
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1272
      if (bm_ext->lce.refcnt == 0U) {
#line 1272
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1272);
      } else {

      }
    }
#line 1274
    goto check_al;
  } else {
#line 1277
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1278
      goto try_again;
    } else {

    }
#line 1280
    e = lc_get(mdev->resync, enr);
#line 1281
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1281
      __mptr___1 = (struct lc_element  const  *)e;
#line 1281
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1281
      bm_ext = 0;
    }
#line 1282
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1283
      rs_flags = (mdev->resync)->flags;
#line 1284
      if ((rs_flags & 4UL) != 0UL) {
#line 1285
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1287
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1287
      if (tmp___4 != 0L) {
#line 1287
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1287), "i" (12UL));
        ldv_44156: ;
#line 1287
        goto ldv_44156;
      } else {

      }
#line 1288
      goto try_again;
    } else {

    }
#line 1290
    if (bm_ext->lce.lc_number != enr) {
#line 1291
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1292
      bm_ext->rs_failed = 0;
#line 1293
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1294
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1295
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1295
      if (tmp___5 != 0) {
#line 1295
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1295);
      } else {

      }
    } else {

    }
#line 1297
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1298
    if (bm_ext->lce.refcnt != 1U) {
#line 1298
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1298);
    } else {

    }
#line 1299
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1300
    goto check_al;
  }
  check_al: 
#line 1303
  i = 0;
#line 1303
  goto ldv_44158;
  ldv_44157: 
#line 1304
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1304
  if (tmp___6 != 0L) {
#line 1305
    goto try_again;
  } else {

  }
#line 1306
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1306
  if (tmp___7 != 0) {
#line 1307
    goto try_again;
  } else {

  }
#line 1303
  i = i + 1;
  ldv_44158: ;
#line 1303
  if (i <= 3) {
#line 1304
    goto ldv_44157;
  } else {

  }
#line 1309
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1311
  mdev->resync_wenr = 4294967295U;
#line 1312
  spin_unlock_irq(& mdev->al_lock);
#line 1313
  return (0);
  try_again: ;
#line 1316
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1317
    mdev->resync_wenr = enr;
  } else {

  }
#line 1318
  spin_unlock_irq(& mdev->al_lock);
#line 1319
  return (-11);
}
}
#line 1322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1324
  enr = (unsigned int )(sector >> 15);
#line 1329
  tmp = spinlock_check(& mdev->al_lock);
#line 1329
  flags = _raw_spin_lock_irqsave(tmp);
#line 1330
  e = lc_find(mdev->resync, enr);
#line 1331
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1331
    __mptr = (struct lc_element  const  *)e;
#line 1331
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1331
    bm_ext = 0;
  }
#line 1332
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1333
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1334
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1334
    if (tmp___0 != 0) {
#line 1335
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1336
    return;
  } else {

  }
#line 1339
  if (bm_ext->lce.refcnt == 0U) {
#line 1340
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1341
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1344
    return;
  } else {

  }
#line 1347
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1347
  if (tmp___1 == 0U) {
#line 1348
    clear_bit(1, (unsigned long volatile   *)(& bm_ext->flags));
#line 1349
    clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1350
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1351
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1354
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1355
  return;
}
}
#line 1361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1363
  spin_lock_irq(& mdev->al_lock);
#line 1365
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1365
  if (tmp != 0) {
#line 1366
    lc_reset(mdev->resync);
#line 1367
    put_ldev(mdev);
  } else {

  }
#line 1369
  mdev->resync_locked = 0U;
#line 1370
  mdev->resync_wenr = 4294967295U;
#line 1371
  spin_unlock_irq(& mdev->al_lock);
#line 1372
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1373
  return;
}
}
#line 1382 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1388
  spin_lock_irq(& mdev->al_lock);
#line 1390
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1390
  if (tmp___3 != 0) {
#line 1392
    i = 0;
#line 1392
    goto ldv_44187;
    ldv_44186: 
#line 1393
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1394
    __mptr = (struct lc_element  const  *)e;
#line 1394
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1395
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1396
      goto ldv_44185;
    } else {

    }
#line 1397
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1398
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1401
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1401
      if (tmp != 0) {
#line 1401
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1401);
      } else {

      }
#line 1402
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1402
      if (tmp___0 == 0) {
#line 1402
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1402);
      } else {

      }
#line 1403
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1404
      mdev->resync_wenr = 4294967295U;
#line 1405
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1407
    if (bm_ext->lce.refcnt != 0U) {
#line 1408
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1410
      put_ldev(mdev);
#line 1411
      spin_unlock_irq(& mdev->al_lock);
#line 1412
      return (-11);
    } else {

    }
#line 1414
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1414
    if (tmp___1 != 0) {
#line 1414
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1414);
    } else {

    }
#line 1415
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1415
    if (tmp___2 != 0) {
#line 1415
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1415);
    } else {

    }
#line 1416
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_44185: 
#line 1392
    i = i + 1;
    ldv_44187: ;
#line 1392
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1393
      goto ldv_44186;
    } else {

    }

#line 1418
    if ((mdev->resync)->used != 0U) {
#line 1418
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1418);
    } else {

    }
#line 1419
    put_ldev(mdev);
  } else {

  }
#line 1421
  spin_unlock_irq(& mdev->al_lock);
#line 1423
  return (0);
}
}
#line 1432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1438
  wake_up = 0;
#line 1440
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1441
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1443
    return;
  } else {

  }
#line 1445
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1446
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1448
  _b = sector >= nr_sectors;
#line 1448
  if (_b != 0) {
#line 1448
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1448);
  } else {

  }
#line 1448
  if (_b != 0) {
#line 1448
    return;
  } else {

  }
#line 1449
  _b___0 = esector >= nr_sectors;
#line 1449
  if (_b___0 != 0) {
#line 1449
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1449);
  } else {

  }
#line 1449
  if (_b___0 != 0) {
#line 1449
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1451
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1456
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1456
  if (tmp != 0L) {
#line 1457
    return;
  } else {

  }
#line 1458
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1458
  if (tmp___0 != 0L) {
#line 1459
    ebnr = lbnr;
  } else {
#line 1461
    ebnr = (esector - 7UL) >> 3;
  }
#line 1462
  sbnr = (sector + 7UL) >> 3;
#line 1464
  if (sbnr > ebnr) {
#line 1465
    return;
  } else {

  }
#line 1471
  spin_lock_irq(& mdev->al_lock);
#line 1472
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1472
  count = (unsigned long )tmp___1;
#line 1473
  if (count != 0UL) {
#line 1474
    mdev->rs_failed = mdev->rs_failed + count;
#line 1476
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1476
    if (tmp___2 != 0) {
#line 1477
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1478
      put_ldev(mdev);
    } else {

    }
#line 1483
    wake_up = 1;
  } else {

  }
#line 1485
  spin_unlock_irq(& mdev->al_lock);
#line 1486
  if (wake_up != 0) {
#line 1487
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1488
  return;
}
}
#line 1490 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_93(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1495
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1497
  mutex_lock(ldv_func_arg1);
#line 1498
  return;
}
}
#line 1500 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int ldv_mutex_trylock_94(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1505
  tmp = mutex_trylock(ldv_func_arg1);
#line 1505
  ldv_func_res = tmp;
#line 1507
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1507
  return (tmp___0);
#line 1509
  return (ldv_func_res);
}
}
#line 1512 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1517
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1519
  mutex_unlock(ldv_func_arg1);
#line 1520
  return;
}
}
#line 1522 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_96(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1527
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1529
  mutex_lock(ldv_func_arg1);
#line 1530
  return;
}
}
#line 1532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1537
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1539
  mutex_unlock(ldv_func_arg1);
#line 1540
  return;
}
}
#line 1542 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_98(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1547
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1549
  mutex_unlock(ldv_func_arg1);
#line 1550
  return;
}
}
#line 1552 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
__inline static int ldv_mutex_is_locked_99(struct mutex *lock ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1557
  tmp = mutex_is_locked(lock);
#line 1557
  ldv_func_res = tmp;
#line 1559
  tmp___0 = ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(lock);
#line 1559
  return (tmp___0);
#line 1561
  return (ldv_func_res);
}
}
#line 1564 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1569
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1571
  mutex_lock(ldv_func_arg1);
#line 1572
  return;
}
}
#line 1574 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1579
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1581
  mutex_unlock(ldv_func_arg1);
#line 1582
  return;
}
}
#line 1584 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_102(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1589
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1591
  mutex_lock(ldv_func_arg1);
#line 1592
  return;
}
}
#line 1594 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_103(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1599
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1601
  mutex_unlock(ldv_func_arg1);
#line 1602
  return;
}
}
#line 1604 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1609
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1611
  mutex_unlock(ldv_func_arg1);
#line 1612
  return;
}
}
#line 1614 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_105(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1619
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1621
  mutex_unlock(ldv_func_arg1);
#line 1622
  return;
}
}
#line 1624 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_106(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1629
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1631
  mutex_unlock(ldv_func_arg1);
#line 1632
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 112 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 164 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 166
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 168
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 169
  memset((void *)dst, 255, (size_t )len);
#line 171
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 172
  return;
}
}
#line 271 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 275
  tmp___0 = __bitmap_weight(src, nbits);
#line 275
  return (tmp___0);
}
}
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_online_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 612
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 614
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_122(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_131(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_132(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) ;
#line 195
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) ;
#line 199
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) ;
#line 203
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) ;
#line 207
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) ;
#line 211
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) ;
#line 215
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) ;
#line 219
void ldv_mutex_unlock_148(struct mutex *ldv_func_arg1 ) ;
#line 223
void ldv_mutex_unlock_150(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_130(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_133(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) ;
#line 46
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) ;
#line 50
void ldv_mutex_lock_143(struct mutex *ldv_func_arg1 ) ;
#line 54
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) ;
#line 58
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) ;
#line 62
void ldv_mutex_lock_149(struct mutex *ldv_func_arg1 ) ;
#line 75
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) ;
#line 79
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) ;
#line 107
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 111
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___1(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5995;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5995;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5995;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5995;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5995: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 65 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 237 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 84 "include/trace/events/module.h"
extern struct tracepoint __tracepoint_module_get ;
#line 84 "include/trace/events/module.h"
__inline static void trace_module_get(struct module *mod , unsigned long ip ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 79
  tmp___1 = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 79
  if (tmp___1 != 0L) {
#line 79
    rcu_read_lock_sched_notrace();
#line 79
    tmp = debug_lockdep_rcu_enabled();
#line 79
    if (tmp != 0 && ! __warned) {
#line 79
      tmp___0 = rcu_read_lock_sched_held();
#line 79
      if (tmp___0 == 0) {
#line 79
        __warned = 1;
#line 79
        lockdep_rcu_dereference("include/trace/events/module.h", 84);
      } else {

      }
    } else {

    }
#line 79
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 79
    it_func_ptr = _________p1;
#line 79
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_11568: 
#line 79
      it_func = it_func_ptr->func;
#line 79
      __data = it_func_ptr->data;
#line 79
      (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                         ip);
#line 79
      it_func_ptr = it_func_ptr + 1;
#line 79
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 80
        goto ldv_11568;
      } else {

      }

    } else {

    }
#line 79
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 81
  return;
}
}
#line 400 "include/linux/module.h"
__inline static int module_is_live(struct module *mod ) 
{ 


  {
#line 402
  return ((unsigned int )mod->state != 2U);
}
}
#line 482 "include/linux/module.h"
__inline static int try_module_get(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 484
  ret = 1;
#line 486
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 489
    tmp = module_is_live(module);
#line 489
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 489
    if (tmp___0 != 0L) {
#line 490
      __vpp_verify = 0;
#line 490
      switch (4UL) {
      case 1UL: 
#line 490
      pao_ID__ = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11933;
      case 2UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11933;
      case 4UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11933;
      case 8UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11933;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11933: ;
#line 490
      goto ldv_11938;
      case 2UL: 
#line 490
      pao_ID_____0 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11944;
      case 2UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11944;
      case 4UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11944;
      case 8UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11944;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11944: ;
#line 490
      goto ldv_11938;
      case 4UL: 
#line 490
      pao_ID_____1 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11954;
      case 2UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11954;
      case 4UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11954;
      case 8UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11954;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11954: ;
#line 490
      goto ldv_11938;
      case 8UL: 
#line 490
      pao_ID_____2 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11964;
      case 2UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11964;
      case 4UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11964;
      case 8UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11964;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11964: ;
#line 490
      goto ldv_11938;
      default: 
#line 490
      __bad_size_call_parameter();
#line 490
      goto ldv_11938;
      }
      ldv_11938: ;
#line 491
      trace_module_get(module, (unsigned long )((void *)0));
    } else {
#line 493
      ret = 0;
    }
  } else {

  }
#line 497
  return (ret);
}
}
#line 500
extern void module_put(struct module * ) ;
#line 251 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 275
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___4(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13847: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_13847;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___4(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___4(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___4(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___1(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___4(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 207 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 207
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 207
  return (tmp);
}
}
#line 1954 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 1955
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 1956
extern struct block_device *bdget(dev_t  ) ;
#line 1960
extern void bdput(struct block_device * ) ;
#line 1995
extern void bd_release(struct block_device * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 1765 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 1989
extern int wake_up_process(struct task_struct * ) ;
#line 14 "include/linux/file.h"
extern void fput(struct file * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create(int (*)(void * ) , void * , char const   * 
                                          , ...) ;
#line 350 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 356
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 541
extern struct gendisk *alloc_disk(int  ) ;
#line 543
extern void put_disk(struct gendisk * ) ;
#line 257 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 259
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 260
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 260
    return (tmp);
  } else {

  }
#line 261
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 709 "include/linux/blkdev.h"
extern int blk_remove_plug(struct request_queue * ) ;
#line 845
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 846
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 847
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 850
extern void blk_queue_max_segment_size(struct request_queue * , unsigned int  ) ;
#line 878
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 897
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 164 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 561 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 563
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 563
  if (tmp != 0L) {
#line 563
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (563), "i" (12UL));
    ldv_43210: ;
#line 563
    goto ldv_43210;
  } else {

  }
#line 564
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 565
  return;
}
}
#line 574 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 576
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 577
  return;
}
}
#line 586 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 588
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 588
  if (tmp != 0L) {
#line 588
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (588), "i" (12UL));
    ldv_43225: ;
#line 588
    goto ldv_43225;
  } else {

  }
#line 589
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 590
  return;
}
}
#line 1081 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock___0(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1083
  ldv_mutex_lock_124(& mdev->data.mutex);
#line 1086
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1086
  if (tmp != 0L) {
#line 1087
    ldv_mutex_unlock_125(& mdev->data.mutex);
#line 1088
    return (0);
  } else {

  }
#line 1090
  return (1);
}
}
#line 1093 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock___0(struct drbd_conf *mdev ) 
{ 


  {
#line 1095
  ldv_mutex_unlock_126(& mdev->data.mutex);
#line 1096
  return;
}
}
#line 1117
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1126
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) ;
#line 1132
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1137
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1143
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1147
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1187
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1189
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1194
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1198
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1201
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1202
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1203
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1204
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1387 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1389 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1390 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1391 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1392 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1394 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1395 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1396 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1397 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1401
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1402
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1414
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1415
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1567
void drbd_nl_cleanup(void) ;
#line 1568
int drbd_nl_init(void) ;
#line 1569
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1666 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1668
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1668
  if (tmp == 0) {
#line 1668
    goto ldv_44230;
  } else {

  }
#line 1668
  tmp___0 = get_current();
#line 1668
  __wait.flags = 0U;
#line 1668
  __wait.private = (void *)tmp___0;
#line 1668
  __wait.func = & autoremove_wake_function;
#line 1668
  __wait.task_list.next = & __wait.task_list;
#line 1668
  __wait.task_list.prev = & __wait.task_list;
  ldv_44233: 
#line 1668
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1668
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1668
  if (tmp___1 == 0) {
#line 1668
    goto ldv_44232;
  } else {

  }
#line 1668
  schedule();
#line 1668
  goto ldv_44233;
  ldv_44232: 
#line 1668
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44230: ;
#line 1671
  return;
}
}
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1711
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1713
  if (forcedetach == 0) {
#line 1714
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1714
    if (tmp != 0) {
#line 1715
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1717
    goto ldv_44256;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1722
  if ((int )mdev->state.ldv_35202.disk > 2) {
#line 1723
    __ns.i = mdev->state.i;
#line 1723
    __ns.ldv_35202.disk = 2U;
#line 1723
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1724
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1727
  goto ldv_44256;
  }
  ldv_44256: ;
#line 1730
  return;
}
}
#line 1740 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1743
  if (error != 0) {
#line 1745
    tmp = spinlock_check(& mdev->req_lock);
#line 1745
    flags = _raw_spin_lock_irqsave(tmp);
#line 1746
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1747
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1749
  return;
}
}
#line 1802 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1805
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1809
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1809
  if (tmp___1 != 0UL) {
#line 1809
    __min1 = 34359738368UL;
#line 1809
    tmp___0 = drbd_md_first_sector(bdev);
#line 1809
    __min2 = tmp___0;
#line 1809
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1809
    s = 0UL;
  }
#line 1812
  goto ldv_44297;
  case -2: 
#line 1814
  __min1___0 = 34359738368UL;
#line 1814
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1814
  __min2___0 = tmp___2;
#line 1814
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1817
  __min1___1 = s;
#line 1817
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1817
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1820
  goto ldv_44297;
  default: 
#line 1822
  __min1___2 = 8587575296UL;
#line 1822
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1822
  __min2___2 = tmp___3;
#line 1822
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_44297: ;
#line 1825
  return (s);
}
}
#line 1833 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1836
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1838
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1844
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1845
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1845
    if (tmp != 0) {
#line 1846
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 1847
      dump_stack();
    } else {

    }
#line 1849
    return (0UL);
  } else {

  }
#line 1851
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 1851
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1854
  return (0UL);
  }
}
}
#line 1923 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1925
  _drbd_thread_stop(thi, 0, 0);
#line 1926
  return;
}
}
#line 1928 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1930
  _drbd_thread_stop(thi, 1, 0);
#line 1931
  return;
}
}
#line 2119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(union drbd_state s ) 
{ 


  {
#line 2125
  switch ((unsigned int )s.ldv_35202.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2138
  goto ldv_44415;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2157
  return (0);
  }
  ldv_44415: ;
#line 2160
  switch ((unsigned int )s.ldv_35202.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2167
  goto ldv_44435;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2176
  return (0);
  }
  ldv_44435: ;
#line 2179
  return (1);
}
}
#line 2182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2184
  tmp = drbd_get_max_buffers(mdev);
#line 2184
  mxb = tmp;
#line 2186
  if ((unsigned int )*((unsigned char *)mdev + 1822UL) != 0U) {
#line 2187
    return (0);
  } else {

  }
#line 2188
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2188
  if (tmp___0 != 0) {
#line 2189
    return (0);
  } else {

  }
#line 2196
  tmp___1 = drbd_state_is_stable___0(mdev->state);
#line 2196
  if (tmp___1 == 0) {
#line 2197
    return (0);
  } else {

  }
#line 2201
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2201
  if (tmp___2 > mxb) {
#line 2202
    return (0);
  } else {

  }
#line 2203
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2203
  if (tmp___3 != 0) {
#line 2204
    return (0);
  } else {

  }
#line 2205
  return (1);
}
}
#line 2286 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2288
  sk = (mdev->data.socket)->sk;
#line 2289
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2290
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2291
  return;
}
}
#line 2293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2300
  return (0);
}
}
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_44662;
  ldv_44661: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_44662: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_44661;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "drbd_main_mutex.wait_lock",
                                                                   0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, 0, "drbd_main_mutex", 0, 0UL}};
#line 128
int drbd_init(void) ;
#line 129
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 130
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 131
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 132
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 134
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 135
static void md_sync_timer_fn(unsigned long data ) ;
#line 136
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 181
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}}}, 1250, 5,
    0, 0, 0UL};
#line 210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 210
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 247 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 252
  tmp = kmalloc___4(56UL, 208U);
#line 252
  b = (struct drbd_tl_epoch *)tmp;
#line 253
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 254
    return (0);
  } else {

  }
#line 255
  INIT_LIST_HEAD(& b->requests);
#line 256
  INIT_LIST_HEAD(& b->w.list);
#line 257
  b->next = 0;
#line 258
  b->br_number = 4711U;
#line 259
  b->n_req = 0;
#line 260
  b->w.cb = 0;
#line 262
  mdev->oldest_tle = b;
#line 263
  mdev->newest_tle = b;
#line 264
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 266
  mdev->tl_hash = 0;
#line 267
  mdev->tl_hash_s = 0U;
#line 269
  return (1);
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 274
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 274
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            274);
  } else {

  }
#line 275
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 275
  if (tmp == 0) {
#line 275
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            275);
  } else {

  }
#line 276
  kfree((void const   *)mdev->oldest_tle);
#line 277
  mdev->oldest_tle = 0;
#line 278
  kfree((void const   *)mdev->unused_spare_tle);
#line 279
  mdev->unused_spare_tle = 0;
#line 280
  kfree((void const   *)mdev->tl_hash);
#line 281
  mdev->tl_hash = 0;
#line 282
  mdev->tl_hash_s = 0U;
#line 283
  return;
}
}
#line 292 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 296
  INIT_LIST_HEAD(& new->requests);
#line 297
  INIT_LIST_HEAD(& new->w.list);
#line 298
  new->w.cb = 0;
#line 299
  new->next = 0;
#line 300
  new->n_req = 0;
#line 302
  newest_before = mdev->newest_tle;
#line 305
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 306
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 307
    (mdev->newest_tle)->next = new;
#line 308
    mdev->newest_tle = new;
  } else {

  }
#line 310
  return;
}
}
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 329
  spin_lock_irq(& mdev->req_lock);
#line 331
  b = mdev->oldest_tle;
#line 334
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 335
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 337
    goto bail;
  } else {

  }
#line 339
  if (b->br_number != barrier_nr) {
#line 340
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 342
    goto bail;
  } else {

  }
#line 344
  if ((unsigned int )b->n_req != set_size) {
#line 345
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_req=%u, expected n_req=%u!\n",
            barrier_nr, set_size, b->n_req);
#line 347
    goto bail;
  } else {

  }
#line 351
  le = b->requests.next;
#line 351
  tle = le->next;
#line 351
  goto ldv_44886;
  ldv_44885: 
#line 352
  __mptr = (struct list_head  const  *)le;
#line 352
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 353
  _req_mod(r, barrier_acked);
#line 351
  le = tle;
#line 351
  tle = le->next;
  ldv_44886: ;
#line 351
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 352
    goto ldv_44885;
  } else {

  }
#line 368
  list_del_init(& b->requests);
#line 370
  nob = b->next;
#line 371
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 371
  if (tmp != 0) {
#line 372
    _tl_add_barrier(mdev, b);
#line 373
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 374
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 378
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 378
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              378);
    } else {

    }
#line 379
    mdev->oldest_tle = nob;
#line 380
    kfree((void const   *)b);
  }
#line 383
  spin_unlock_irq(& mdev->req_lock);
#line 384
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 384
  if (tmp___0 != 0) {
#line 384
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 384
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 384
  if (tmp___2 < 0) {
#line 384
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 384
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 384, tmp___1);
  } else {

  }
#line 386
  return;
  bail: 
#line 389
  spin_unlock_irq(& mdev->req_lock);
#line 390
  val.i = 0U;
#line 390
  val.ldv_35202.conn = 6U;
#line 390
  mask.i = 0U;
#line 390
  mask.ldv_35202.conn = 31U;
#line 390
  drbd_force_state(mdev, mask, val);
#line 392
  return;
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int new_initial_bnr ;
  u32 tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 407
  tmp___0 = random32();
#line 407
  new_initial_bnr = (int )tmp___0;
#line 409
  spin_lock_irq(& mdev->req_lock);
#line 411
  b = mdev->oldest_tle;
#line 412
  goto ldv_44916;
  ldv_44915: 
#line 413
  le = b->requests.next;
#line 413
  tle = le->next;
#line 413
  goto ldv_44908;
  ldv_44907: 
#line 414
  __mptr = (struct list_head  const  *)le;
#line 414
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 417
  _req_mod(r, connection_lost_while_pending);
#line 413
  le = tle;
#line 413
  tle = le->next;
  ldv_44908: ;
#line 413
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 414
    goto ldv_44907;
  } else {

  }
#line 419
  tmp = b->next;
#line 423
  list_del(& b->requests);
#line 428
  if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * , struct drbd_work * ,
                                                           int  ))0)) {
#line 429
    tmp___1 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 429
    if (tmp___1 != 0) {
#line 429
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 429
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 429
    if (tmp___3 < 0) {
#line 429
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 429
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "tl_clear", 429, tmp___2);
    } else {

    }
  } else {

  }
#line 431
  if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 433
    if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 433
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              433);
    } else {

    }
#line 434
    INIT_LIST_HEAD(& b->requests);
#line 435
    INIT_LIST_HEAD(& b->w.list);
#line 436
    b->w.cb = 0;
#line 437
    b->br_number = (unsigned int )new_initial_bnr;
#line 438
    b->n_req = 0;
#line 440
    mdev->oldest_tle = b;
#line 441
    goto ldv_44914;
  } else {

  }
#line 443
  kfree((void const   *)b);
#line 444
  b = tmp;
  ldv_44916: ;
#line 412
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 413
    goto ldv_44915;
  } else {

  }
  ldv_44914: 
#line 448
  tmp___4 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 448
  if (tmp___4 == 0) {
#line 448
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            448);
  } else {

  }
#line 451
  le = mdev->out_of_sequence_requests.next;
#line 451
  tle = le->next;
#line 451
  goto ldv_44920;
  ldv_44919: 
#line 452
  __mptr___0 = (struct list_head  const  *)le;
#line 452
  r = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 455
  _req_mod(r, connection_lost_while_pending);
#line 451
  le = tle;
#line 451
  tle = le->next;
  ldv_44920: ;
#line 451
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 452
    goto ldv_44919;
  } else {

  }
#line 459
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 461
  spin_unlock_irq(& mdev->req_lock);
#line 462
  return;
}
}
#line 470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 473
  return (((((int )os.ldv_35202.conn > 9 && (int )ns.ldv_35202.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_35202.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 489
  tmp = spinlock_check(& mdev->req_lock);
#line 489
  flags = _raw_spin_lock_irqsave(tmp);
#line 490
  os = mdev->state;
#line 491
  ns.i = (os.i & ~ mask.i) | val.i;
#line 492
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 493
  ns = mdev->state;
#line 494
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 496
  return (rv);
}
}
#line 505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 508
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 509
  return;
}
}
#line 511
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 512
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) ;
#line 514
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) ;
#line 516
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_ret_codes _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                              union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  int rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 526
  tmp = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 526
  if (tmp != 0) {
#line 527
    return (SS_CW_SUCCESS);
  } else {

  }
#line 529
  tmp___0 = test_and_clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 529
  if (tmp___0 != 0) {
#line 530
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 532
  rv = 0;
#line 533
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 533
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 534
  os = mdev->state;
#line 535
  ns.i = (os.i & ~ mask.i) | val.i;
#line 536
  ns = sanitize_state(mdev, os, ns, 0);
#line 538
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 538
  if (tmp___2 == 0) {
#line 539
    rv = 4;
  } else {

  }
#line 540
  if (rv == 0) {
#line 541
    rv = is_valid_state(mdev, ns);
#line 542
    if (rv == 1) {
#line 543
      rv = is_valid_state_transition(mdev, ns, os);
#line 544
      if (rv == 1) {
#line 545
        rv = 0;
      } else {

      }
    } else {

    }
  } else {

  }
#line 548
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 550
  return ((enum drbd_state_ret_codes )rv);
}
}
#line 563 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_req_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                          enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  enum drbd_state_ret_codes tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  enum drbd_state_ret_codes tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;

  {
#line 572
  init_completion(& done);
#line 574
  if (((unsigned int )f & 8U) != 0U) {
#line 575
    ldv_mutex_lock_127(& mdev->state_mutex);
  } else {

  }
#line 577
  tmp = spinlock_check(& mdev->req_lock);
#line 577
  flags = _raw_spin_lock_irqsave(tmp);
#line 578
  os = mdev->state;
#line 579
  ns.i = (os.i & ~ mask.i) | val.i;
#line 580
  ns = sanitize_state(mdev, os, ns, 0);
#line 582
  tmp___5 = cl_wide_st_chg(mdev, os, ns);
#line 582
  if (tmp___5 != 0) {
#line 583
    rv = is_valid_state(mdev, ns);
#line 584
    if (rv == 1) {
#line 585
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 586
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 588
    if (rv <= 0) {
#line 589
      if (((unsigned int )f & 2U) != 0U) {
#line 590
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 591
      goto abort;
    } else {

    }
#line 594
    drbd_state_lock___0(mdev);
#line 595
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 595
    if (tmp___0 == 0) {
#line 596
      drbd_state_unlock(mdev);
#line 597
      rv = -10;
#line 598
      if (((unsigned int )f & 2U) != 0U) {
#line 599
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 600
      goto abort;
    } else {

    }
#line 603
    tmp___1 = _req_st_cond(mdev, mask, val);
#line 603
    rv = (int )tmp___1;
#line 603
    if (rv != 0) {
#line 603
      goto ldv_44988;
    } else {

    }
#line 603
    tmp___2 = get_current();
#line 603
    __wait.flags = 0U;
#line 603
    __wait.private = (void *)tmp___2;
#line 603
    __wait.func = & autoremove_wake_function;
#line 603
    __wait.task_list.next = & __wait.task_list;
#line 603
    __wait.task_list.prev = & __wait.task_list;
    ldv_44991: 
#line 603
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 603
    tmp___3 = _req_st_cond(mdev, mask, val);
#line 603
    rv = (int )tmp___3;
#line 603
    if (rv != 0) {
#line 603
      goto ldv_44990;
    } else {

    }
#line 603
    schedule();
#line 603
    goto ldv_44991;
    ldv_44990: 
#line 603
    finish_wait(& mdev->state_wait, & __wait);
    ldv_44988: ;
#line 606
    if (rv <= 0) {
#line 607
      drbd_state_unlock(mdev);
#line 608
      if (((unsigned int )f & 2U) != 0U) {
#line 609
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 610
      goto abort;
    } else {

    }
#line 612
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 612
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 613
    os = mdev->state;
#line 614
    ns.i = (os.i & ~ mask.i) | val.i;
#line 615
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 616
    drbd_state_unlock(mdev);
  } else {
#line 618
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 621
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 623
  if (((unsigned int )f & 4U) != 0U && rv == 1) {
#line 624
    tmp___6 = get_current();
#line 624
    if ((unsigned long )tmp___6 == (unsigned long )mdev->worker.task) {
#line 624
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              624);
    } else {

    }
#line 625
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 629
  if (((unsigned int )f & 8U) != 0U) {
#line 630
    ldv_mutex_unlock_128(& mdev->state_mutex);
  } else {

  }
#line 632
  return (rv);
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) 
{ 
  int rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 650
  rv = drbd_req_state(mdev, mask, val, f);
#line 650
  if (rv != -18) {
#line 650
    goto ldv_45002;
  } else {

  }
#line 650
  tmp = get_current();
#line 650
  __wait.flags = 0U;
#line 650
  __wait.private = (void *)tmp;
#line 650
  __wait.func = & autoremove_wake_function;
#line 650
  __wait.task_list.next = & __wait.task_list;
#line 650
  __wait.task_list.prev = & __wait.task_list;
  ldv_45005: 
#line 650
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 650
  rv = drbd_req_state(mdev, mask, val, f);
#line 650
  if (rv != -18) {
#line 650
    goto ldv_45004;
  } else {

  }
#line 650
  schedule();
#line 650
  goto ldv_45005;
  ldv_45004: 
#line 650
  finish_wait(& mdev->state_wait, & __wait);
  ldv_45002: ;
#line 653
  return (rv);
}
}
#line 656 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 658
  tmp = drbd_disk_str((enum drbd_disk_state )ns.ldv_35202.pdsk);
#line 658
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35202.disk);
#line 658
  tmp___1 = drbd_role_str((enum drbd_role )ns.ldv_35202.peer);
#line 658
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_35202.role);
#line 658
  tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_35202.conn);
#line 658
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___3, tmp___2, tmp___1, tmp___0, tmp, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 669
  return;
}
}
#line 672 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) 
{ 
  char const   *tmp ;

  {
#line 675
  if (err == -18) {
#line 676
    return;
  } else {

  }
#line 677
  tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )err);
#line 677
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 678
  print_st(mdev, (char *)" state", os);
#line 679
  print_st(mdev, (char *)"wanted", ns);
#line 680
  return;
}
}
#line 703 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 708
  rv = 1;
#line 710
  fp = FP_DONT_CARE;
#line 711
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 711
  if (tmp != 0) {
#line 712
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 713
    put_ldev(mdev);
  } else {

  }
#line 716
  tmp___0 = get_net_conf(mdev);
#line 716
  if (tmp___0 != 0) {
#line 717
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 719
      rv = -1;
    } else {

    }
#line 720
    put_net_conf(mdev);
  } else {

  }
#line 723
  if (rv <= 0) {

  } else
#line 725
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 726
    rv = -12;
  } else
#line 728
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35202.conn <= 9) && (int )ns.ldv_35202.disk <= 7) {
#line 729
    rv = -2;
  } else
#line 731
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_35202.conn <= 9) && (int )ns.ldv_35202.pdsk > 5) {
#line 733
    rv = -7;
  } else
#line 735
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35202.disk <= 4) && (int )ns.ldv_35202.pdsk <= 4) {
#line 736
    rv = -2;
  } else
#line 738
  if ((int )ns.ldv_35202.conn > 10 && (int )ns.ldv_35202.disk <= 3) {
#line 739
    rv = -4;
  } else
#line 741
  if ((int )ns.ldv_35202.conn > 10 && (int )ns.ldv_35202.pdsk <= 3) {
#line 742
    rv = -5;
  } else
#line 744
  if (((int )ns.ldv_35202.conn > 10 && (int )ns.ldv_35202.disk <= 7) && (int )ns.ldv_35202.pdsk <= 7) {
#line 745
    rv = -2;
  } else
#line 747
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 752
    rv = -6;
  } else
#line 754
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 756
    rv = -14;
  } else
#line 758
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 760
    rv = -17;
  } else {

  }
#line 762
  return (rv);
}
}
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) 
{ 
  int rv ;

  {
#line 774
  rv = 1;
#line 776
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_35202.conn > 10) {
#line 778
    rv = -8;
  } else {

  }
#line 780
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 781
    rv = -9;
  } else {

  }
#line 783
  if ((int )ns.ldv_35202.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 784
    rv = -11;
  } else {

  }
#line 786
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_35202.conn <= 1) {
#line 787
    rv = -13;
  } else {

  }
#line 789
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_35202.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 790
    rv = -16;
  } else {

  }
#line 792
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 793
    rv = -18;
  } else {

  }
#line 795
  if ((int )ns.ldv_35202.conn == (int )os.ldv_35202.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 796
    rv = -18;
  } else {

  }
#line 798
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_35202.conn <= 9) {
#line 799
    rv = -15;
  } else {

  }
#line 801
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_35202.conn != (int )os.ldv_35202.conn) && (int )os.ldv_35202.conn > 10) {
#line 803
    rv = -8;
  } else {

  }
#line 805
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_35202.conn <= 9) {
#line 807
    rv = -15;
  } else {

  }
#line 809
  return (rv);
}
}
#line 822 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  int tmp___0 ;

  {
#line 827
  fp = FP_DONT_CARE;
#line 828
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 828
  if (tmp != 0) {
#line 829
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 830
    put_ldev(mdev);
  } else {

  }
#line 834
  if (((int )ns.ldv_35202.conn > 2 && (int )ns.ldv_35202.conn <= 7) && (int )os.ldv_35202.conn <= 1) {
#line 836
    ns.ldv_35202.conn = os.ldv_35202.conn;
  } else {

  }
#line 839
  if ((((int )os.ldv_35202.conn > 2 && (int )os.ldv_35202.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) {
#line 841
    ns.ldv_35202.conn = os.ldv_35202.conn;
  } else {

  }
#line 844
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 845
    ns.ldv_35202.conn = os.ldv_35202.conn;
  } else {

  }
#line 847
  if ((int )ns.ldv_35202.conn <= 9) {
#line 848
    ns.ldv_35202.peer_isp = 0U;
#line 849
    ns.ldv_35202.peer = 0U;
#line 850
    if ((int )ns.ldv_35202.pdsk > 6 || (int )ns.ldv_35202.pdsk <= 3) {
#line 851
      ns.ldv_35202.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 855
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 856
    ns.ldv_35202.aftr_isp = 0U;
  } else {

  }
#line 858
  if ((int )ns.ldv_35202.conn <= 1 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 859
    ns.ldv_35202.pdsk = 6U;
  } else {

  }
#line 862
  if (((int )os.ldv_35202.conn > 10 && (int )ns.ldv_35202.conn > 10) && ((int )ns.ldv_35202.disk <= 2 || (int )ns.ldv_35202.pdsk <= 2)) {
#line 864
    if ((unsigned long )warn_sync_abort != (unsigned long )((int *)0)) {
#line 865
      *warn_sync_abort = 1;
    } else {

    }
#line 866
    ns.ldv_35202.conn = 10U;
  } else {

  }
#line 869
  if ((int )ns.ldv_35202.conn > 9 && (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) || ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 224U))) {
#line 872
    switch ((int )ns.ldv_35202.conn) {
    case 14: ;
    case 21: 
#line 875
    ns.ldv_35202.disk = 5U;
#line 876
    goto ldv_45038;
    case 10: ;
    case 13: ;
    case 16: ;
    case 20: 
#line 881
    ns.ldv_35202.disk = 8U;
#line 882
    goto ldv_45038;
    case 17: 
#line 884
    ns.ldv_35202.disk = 4U;
#line 885
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk state Inconsistent!\n");
#line 886
    goto ldv_45038;
    }
    ldv_45038: ;
#line 888
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 10U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 16U) {
#line 889
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk from Outdated to UpToDate\n");
    } else {

    }
  } else {

  }
#line 892
  if ((int )ns.ldv_35202.conn > 9 && (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 894
    switch ((int )ns.ldv_35202.conn) {
    case 10: ;
    case 14: ;
    case 21: ;
    case 17: 
#line 899
    ns.ldv_35202.pdsk = 8U;
#line 900
    goto ldv_45048;
    case 13: ;
    case 20: 
#line 906
    ns.ldv_35202.pdsk = (int )os.ldv_35202.pdsk > 0 && (int )os.ldv_35202.pdsk <= 4 ? os.ldv_35202.pdsk : 5U;
#line 909
    goto ldv_45048;
    case 16: 
#line 911
    ns.ldv_35202.pdsk = 4U;
#line 912
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk Inconsistent!\n");
#line 913
    goto ldv_45048;
    }
    ldv_45048: ;
#line 915
    if (*((unsigned int *)(& os) + 0UL) == 40960U && *((unsigned int *)(& ns) + 0UL) == 65536U) {
#line 916
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk from Outdated to UpToDate\n");
    } else {

    }
  } else {

  }
#line 920
  if ((int )ns.ldv_35202.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 920
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 920
    if (tmp___0 != 0) {
#line 922
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 923
        ns.ldv_35202.disk = mdev->new_state_tmp.ldv_35202.disk;
#line 924
        ns.ldv_35202.pdsk = mdev->new_state_tmp.ldv_35202.pdsk;
      } else {
#line 926
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection lost while negotiating, no data!\n");
#line 927
        ns.ldv_35202.disk = 0U;
#line 928
        ns.ldv_35202.pdsk = 6U;
      }
#line 930
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 933
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35202.conn <= 9) && (int )ns.ldv_35202.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35202.conn > 9) || (int )os.ldv_35202.pdsk <= 5)) {
#line 936
    ns.ldv_35202.susp = 1U;
  } else {

  }
#line 938
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 939
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 940
      ns.ldv_35202.conn = 20U;
    } else {

    }
#line 941
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 942
      ns.ldv_35202.conn = 21U;
    } else {

    }
  } else {
#line 944
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 945
      ns.ldv_35202.conn = 16U;
    } else {

    }
#line 946
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 947
      ns.ldv_35202.conn = 17U;
    } else {

    }
  }
#line 950
  return (ns);
}
}
#line 954 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 956
  if ((unsigned int )cs == 19U) {
#line 962
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 964
    bit = mdev->ov_start_sector >> 3;
#line 965
    if (mdev->rs_total <= bit) {
#line 966
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
    } else {

    }
#line 968
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 970
  return;
}
}
#line 981 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) 
{ 
  union drbd_state os ;
  int rv ;
  int warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  char const   *tmp ;
  int tmp___0 ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  unsigned long tmp___22 ;
  unsigned long tmp___23 ;
  u32 mdf ;
  int tmp___24 ;
  int tmp___25 ;
  void *tmp___26 ;

  {
#line 986
  rv = 1;
#line 987
  warn_sync_abort = 0;
#line 990
  os = mdev->state;
#line 992
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 994
  if (ns.i == os.i) {
#line 995
    return (2);
  } else {

  }
#line 997
  if (((unsigned int )flags & 1U) == 0U) {
#line 1001
    rv = is_valid_state(mdev, ns);
#line 1002
    if (rv <= 0) {
#line 1006
      tmp___0 = is_valid_state(mdev, os);
#line 1006
      if (tmp___0 == rv) {
#line 1007
        tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )rv);
#line 1007
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considering state change from bad state. Error would be: \'%s\'\n",
                tmp);
#line 1010
        print_st(mdev, (char *)"old", os);
#line 1011
        print_st(mdev, (char *)"new", ns);
#line 1012
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1015
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1018
  if (rv <= 0) {
#line 1019
    if (((unsigned int )flags & 2U) != 0U) {
#line 1020
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1021
    return (rv);
  } else {

  }
#line 1024
  if (warn_sync_abort != 0) {
#line 1025
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync aborted.\n");
  } else {

  }
#line 1029
  pbp = (char *)(& pb);
#line 1030
  *pbp = 0;
#line 1031
  if ((int )ns.ldv_35202.role != (int )os.ldv_35202.role) {
#line 1031
    tmp___1 = drbd_role_str((enum drbd_role )ns.ldv_35202.role);
#line 1031
    tmp___2 = drbd_role_str((enum drbd_role )os.ldv_35202.role);
#line 1031
    tmp___3 = sprintf(pbp, "role( %s -> %s ) ", tmp___2, tmp___1);
#line 1031
    pbp = pbp + (unsigned long )tmp___3;
  } else {

  }
#line 1032
  if ((int )ns.ldv_35202.peer != (int )os.ldv_35202.peer) {
#line 1032
    tmp___4 = drbd_role_str((enum drbd_role )ns.ldv_35202.peer);
#line 1032
    tmp___5 = drbd_role_str((enum drbd_role )os.ldv_35202.peer);
#line 1032
    tmp___6 = sprintf(pbp, "peer( %s -> %s ) ", tmp___5, tmp___4);
#line 1032
    pbp = pbp + (unsigned long )tmp___6;
  } else {

  }
#line 1033
  if ((int )ns.ldv_35202.conn != (int )os.ldv_35202.conn) {
#line 1033
    tmp___7 = drbd_conn_str((enum drbd_conns )ns.ldv_35202.conn);
#line 1033
    tmp___8 = drbd_conn_str((enum drbd_conns )os.ldv_35202.conn);
#line 1033
    tmp___9 = sprintf(pbp, "conn( %s -> %s ) ", tmp___8, tmp___7);
#line 1033
    pbp = pbp + (unsigned long )tmp___9;
  } else {

  }
#line 1034
  if ((int )ns.ldv_35202.disk != (int )os.ldv_35202.disk) {
#line 1034
    tmp___10 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35202.disk);
#line 1034
    tmp___11 = drbd_disk_str((enum drbd_disk_state )os.ldv_35202.disk);
#line 1034
    tmp___12 = sprintf(pbp, "disk( %s -> %s ) ", tmp___11, tmp___10);
#line 1034
    pbp = pbp + (unsigned long )tmp___12;
  } else {

  }
#line 1035
  if ((int )ns.ldv_35202.pdsk != (int )os.ldv_35202.pdsk) {
#line 1035
    tmp___13 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35202.pdsk);
#line 1035
    tmp___14 = drbd_disk_str((enum drbd_disk_state )os.ldv_35202.pdsk);
#line 1035
    tmp___15 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___14, tmp___13);
#line 1035
    pbp = pbp + (unsigned long )tmp___15;
  } else {

  }
#line 1036
  if ((int )ns.ldv_35202.susp != (int )os.ldv_35202.susp) {
#line 1036
    tmp___16 = sprintf(pbp, "susp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1036
    pbp = pbp + (unsigned long )tmp___16;
  } else {

  }
#line 1037
  if ((int )ns.ldv_35202.aftr_isp != (int )os.ldv_35202.aftr_isp) {
#line 1037
    tmp___17 = sprintf(pbp, "aftr_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1037
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1038
  if ((int )ns.ldv_35202.peer_isp != (int )os.ldv_35202.peer_isp) {
#line 1038
    tmp___18 = sprintf(pbp, "peer_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1038
    pbp = pbp + (unsigned long )tmp___18;
  } else {

  }
#line 1039
  if ((int )ns.ldv_35202.user_isp != (int )os.ldv_35202.user_isp) {
#line 1039
    tmp___19 = sprintf(pbp, "user_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1039
    pbp = pbp + (unsigned long )tmp___19;
  } else {

  }
#line 1040
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1051
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1051
    tmp___20 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1051
    if (tmp___20 == 0) {
#line 1055
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1057
  mdev->state.i = ns.i;
#line 1058
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1059
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1062
  if ((int )os.ldv_35202.conn > 15 && (int )ns.ldv_35202.conn <= 10) {
#line 1063
    set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 1064
    mod_timer(& mdev->resync_timer, jiffies);
  } else {

  }
#line 1068
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_35202.conn <= 9) {
#line 1070
    mdev->ov_start_sector = (mdev->rs_total - mdev->ov_left) << 3;
#line 1072
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
              (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1076
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1078
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1079
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time);
#line 1080
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1081
      tmp___21 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 1081
      if (tmp___21 == 0) {
#line 1082
        mod_timer(& mdev->resync_timer, jiffies);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1090
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1092
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1093
    mdev->rs_mark_time = jiffies;
#line 1094
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1095
      set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1098
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1100
    mdev->ov_position = 0UL;
#line 1101
    tmp___22 = drbd_bm_bits(mdev);
#line 1101
    mdev->rs_mark_left = tmp___22;
#line 1101
    mdev->rs_total = tmp___22;
#line 1103
    if (mdev->agreed_pro_version > 89) {
#line 1104
      set_ov_position(mdev, (enum drbd_conns )ns.ldv_35202.conn);
    } else {
#line 1106
      mdev->ov_start_sector = 0UL;
    }
#line 1107
    mdev->ov_left = mdev->rs_total - (mdev->ov_position >> 3);
#line 1109
    tmp___23 = jiffies;
#line 1109
    mdev->rs_mark_time = tmp___23;
#line 1109
    mdev->rs_start = tmp___23;
#line 1111
    mdev->ov_last_oos_size = 0UL;
#line 1112
    mdev->ov_last_oos_start = 0UL;
#line 1114
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1115
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1117
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1121
  tmp___25 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1121
  if (tmp___25 != 0) {
#line 1122
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1126
    tmp___24 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1126
    if (tmp___24 != 0) {
#line 1127
      mdf = mdf | 64U;
    } else {

    }
#line 1128
    if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U || ((int )mdev->state.ldv_35202.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 4U)) {
#line 1130
      mdf = mdf | 2U;
    } else {

    }
#line 1131
    if ((int )mdev->state.ldv_35202.conn > 9) {
#line 1132
      mdf = mdf | 4U;
    } else {

    }
#line 1133
    if ((int )mdev->state.ldv_35202.disk > 4) {
#line 1134
      mdf = mdf | 1U;
    } else {

    }
#line 1135
    if ((int )mdev->state.ldv_35202.disk > 5) {
#line 1136
      mdf = mdf | 16U;
    } else {

    }
#line 1137
    if ((int )mdev->state.ldv_35202.pdsk <= 5 && (int )mdev->state.ldv_35202.pdsk > 3) {
#line 1138
      mdf = mdf | 32U;
    } else {

    }
#line 1139
    if ((mdev->ldev)->md.flags != mdf) {
#line 1140
      (mdev->ldev)->md.flags = mdf;
#line 1141
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1143
    if ((int )os.ldv_35202.disk <= 6 && (int )ns.ldv_35202.disk > 6) {
#line 1144
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1145
    put_ldev(mdev);
  } else {

  }
#line 1149
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1151
    set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1154
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1155
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1158
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1159
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1162
  if (((int )os.ldv_35202.conn > 7 && (int )ns.ldv_35202.conn <= 7) && (int )ns.ldv_35202.conn > 2) {
#line 1164
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1166
  tmp___26 = kmalloc___4(48UL, 32U);
#line 1166
  ascw = (struct after_state_chg_work *)tmp___26;
#line 1167
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1168
    ascw->os = os;
#line 1169
    ascw->ns = ns;
#line 1170
    ascw->flags = flags;
#line 1171
    ascw->w.cb = & w_after_state_ch;
#line 1172
    ascw->done = done;
#line 1173
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1175
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1178
  return (rv);
}
}
#line 1181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1184
  __mptr = (struct drbd_work  const  *)w;
#line 1184
  ascw = (struct after_state_chg_work *)__mptr;
#line 1185
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1186
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1187
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1187
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              1187);
    } else {

    }
#line 1188
    complete(ascw->done);
  } else {

  }
#line 1190
  kfree((void const   *)ascw);
#line 1192
  return (1);
}
}
#line 1195 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1197
  if (rv != 0) {
#line 1198
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1199
    val.i = 0U;
#line 1199
    val.ldv_35202.conn = 10U;
#line 1199
    mask.i = 0U;
#line 1199
    mask.ldv_35202.conn = 31U;
#line 1199
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1200
    return;
  } else {

  }
#line 1203
  switch ((int )mdev->state.ldv_35202.conn) {
  case 12: 
#line 1205
  val___0.i = 0U;
#line 1205
  val___0.ldv_35202.conn = 15U;
#line 1205
  mask___0.i = 0U;
#line 1205
  mask___0.ldv_35202.conn = 31U;
#line 1205
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1206
  goto ldv_45091;
  case 11: 
#line 1208
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1209
  goto ldv_45091;
  }
  ldv_45091: ;
#line 1212
  return;
}
}
#line 1220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state __ns ;
  int tmp___0 ;
  int tmp___1 ;
  enum drbd_io_error_p eh ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  union drbd_state __ns___0 ;
  int tmp___6 ;
  int tmp___7 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1225
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1226
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 1227
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1228
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1231
  fp = FP_DONT_CARE;
#line 1232
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1232
  if (tmp != 0) {
#line 1233
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1234
    put_ldev(mdev);
  } else {

  }
#line 1238
  drbd_bcast_state(mdev, ns);
#line 1240
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35202.disk > 7) || (int )os.ldv_35202.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35202.disk <= 7) && (int )ns.ldv_35202.pdsk <= 7)) {
#line 1242
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1247
  if ((unsigned int )fp == 2U && (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1250
    if (((int )os.ldv_35202.pdsk > 5 && (int )ns.ldv_35202.pdsk <= 5) || ((int )os.ldv_35202.conn <= 9 && (int )ns.ldv_35202.conn > 9)) {
#line 1252
      tl_clear(mdev);
#line 1253
      spin_lock_irq(& mdev->req_lock);
#line 1254
      __ns.i = mdev->state.i;
#line 1254
      __ns.ldv_35202.susp = 0U;
#line 1254
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1255
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1259
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_35202.pdsk > 0) {
#line 1260
    drbd_send_uuids(mdev);
#line 1261
    drbd_send_state(mdev);
  } else {

  }
#line 1263
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) {
#line 1264
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)");
  } else {

  }
#line 1267
  if ((((int )os.ldv_35202.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_35202.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1273
    tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1273
    if (tmp___0 != 0) {
#line 1274
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_35202.disk > 7) {
#line 1276
        drbd_uuid_new_current(mdev);
#line 1277
        drbd_send_uuids(mdev);
      } else {

      }
#line 1279
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1283
  if ((int )ns.ldv_35202.pdsk <= 3) {
#line 1283
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1283
    if (tmp___1 != 0) {
#line 1284
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1285
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 1288
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1289
        drbd_al_to_on_disk_bm(mdev);
      } else {

      }
#line 1290
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1294
  if (((int )ns.ldv_35202.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1296
    drbd_send_sizes(mdev, 0, 0);
#line 1297
    drbd_send_uuids(mdev);
#line 1298
    drbd_send_state(mdev);
  } else {

  }
#line 1302
  if ((int )ns.ldv_35202.conn > 9 && ((int )os.ldv_35202.aftr_isp != (int )ns.ldv_35202.aftr_isp || (int )os.ldv_35202.user_isp != (int )ns.ldv_35202.user_isp)) {
#line 1305
    drbd_send_state(mdev);
  } else {

  }
#line 1308
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1310
    suspend_other_sg(mdev);
  } else {

  }
#line 1314
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_35202.conn > 9) {
#line 1315
    drbd_send_state(mdev);
  } else {

  }
#line 1318
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1320
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync");
  } else {

  }
#line 1323
  if ((((int )os.ldv_35202.conn <= 9 && (int )ns.ldv_35202.conn <= 9) && (int )os.ldv_35202.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1325
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate");
  } else {

  }
#line 1327
  if ((int )os.ldv_35202.disk > 2 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1330
    eh = EP_PASS_ON;
#line 1331
    tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1331
    if (tmp___2 != 0) {
#line 1332
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1333
      put_ldev(mdev);
    } else {

    }
#line 1336
    drbd_rs_cancel_all(mdev);
#line 1340
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1340
    if (tmp___3 == 0) {
#line 1340
      goto ldv_45103;
    } else {

    }
#line 1340
    tmp___4 = get_current();
#line 1340
    __wait.flags = 0U;
#line 1340
    __wait.private = (void *)tmp___4;
#line 1340
    __wait.func = & autoremove_wake_function;
#line 1340
    __wait.task_list.next = & __wait.task_list;
#line 1340
    __wait.task_list.prev = & __wait.task_list;
    ldv_45106: 
#line 1340
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1340
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1340
    if (tmp___5 == 0) {
#line 1340
      goto ldv_45105;
    } else {

    }
#line 1340
    schedule();
#line 1340
    goto ldv_45106;
    ldv_45105: 
#line 1340
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_45103: 
#line 1341
    mdev->rs_total = 0UL;
#line 1342
    mdev->rs_failed = 0UL;
#line 1343
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1345
    spin_lock_irq(& mdev->req_lock);
#line 1346
    __ns___0.i = mdev->state.i;
#line 1346
    __ns___0.ldv_35202.disk = 0U;
#line 1346
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1347
    spin_unlock_irq(& mdev->req_lock);
#line 1349
    if ((unsigned int )eh == 1U) {
#line 1350
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1353
  if ((int )os.ldv_35202.disk > 0 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1355
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 4U) {
#line 1356
      tmp___6 = drbd_send_state(mdev);
#line 1356
      if (tmp___6 != 0) {
#line 1357
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that my disk is broken.\n");
      } else {
#line 1359
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state in drbd_io_error() failed\n");
      }
    } else {

    }
#line 1362
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1362
    if (tmp___7 == 0) {
#line 1362
      goto ldv_45109;
    } else {

    }
#line 1362
    tmp___8 = get_current();
#line 1362
    __wait___0.flags = 0U;
#line 1362
    __wait___0.private = (void *)tmp___8;
#line 1362
    __wait___0.func = & autoremove_wake_function;
#line 1362
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1362
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_45112: 
#line 1362
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1362
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1362
    if (tmp___9 == 0) {
#line 1362
      goto ldv_45111;
    } else {

    }
#line 1362
    schedule();
#line 1362
    goto ldv_45112;
    ldv_45111: 
#line 1362
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_45109: 
#line 1363
    lc_destroy(mdev->resync);
#line 1364
    mdev->resync = 0;
#line 1365
    lc_destroy(mdev->act_log);
#line 1366
    mdev->act_log = 0;
#line 1367
    drbd_free_bc(mdev->ldev);
#line 1367
    mdev->ldev = 0;
#line 1371
    if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 1372
      __free_pages(mdev->md_io_tmpp, 0U);
    } else {

    }
  } else {

  }
#line 1376
  if ((int )ns.ldv_35202.disk > 3 && (int )ns.ldv_35202.pdsk > 3) {
#line 1376
    tmp___10 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1376
    if (tmp___10 != 0) {
#line 1378
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1379
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1383
  if ((((int )os.ldv_35202.conn > 10 && (int )ns.ldv_35202.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1386
    resume_next_sg(mdev);
  } else {

  }
#line 1389
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1390
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1394
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1397
    if ((int )os.ldv_35202.aftr_isp != (int )ns.ldv_35202.aftr_isp) {
#line 1398
      resume_next_sg(mdev);
    } else {

    }
#line 1400
    tmp___11 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1400
    if (tmp___11 != 0) {
#line 1401
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1404
  drbd_md_sync(mdev);
#line 1405
  return;
}
}
#line 1408 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1410
  thi = (struct drbd_thread *)arg;
#line 1411
  mdev = thi->mdev;
  restart: 
#line 1416
  retval = (*(thi->function))(thi);
#line 1418
  tmp = spinlock_check(& thi->t_lock);
#line 1418
  flags = _raw_spin_lock_irqsave(tmp);
#line 1430
  if ((unsigned int )thi->t_state == 3U) {
#line 1431
    tmp___0 = get_current();
#line 1431
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1432
    thi->t_state = Running;
#line 1433
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1434
    goto restart;
  } else {

  }
#line 1437
  thi->task = 0;
#line 1438
  thi->t_state = None;
#line 1439
  __asm__  volatile   ("mfence": : : "memory");
#line 1440
  complete(& thi->stop);
#line 1441
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1443
  tmp___1 = get_current();
#line 1443
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1446
  module_put(& __this_module);
#line 1447
  return (retval);
}
}
#line 1450 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1453
  spinlock_check(& thi->t_lock);
#line 1453
  __raw_spin_lock_init(& thi->t_lock.ldv_5628.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1454
  thi->task = 0;
#line 1455
  thi->t_state = None;
#line 1456
  thi->function = func;
#line 1457
  thi->mdev = mdev;
#line 1458
  return;
}
}
#line 1460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  unsigned int tmp___4 ;
  long tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 1462
  mdev = thi->mdev;
#line 1466
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1473
  tmp = spinlock_check(& thi->t_lock);
#line 1473
  flags = _raw_spin_lock_irqsave(tmp);
#line 1475
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1477
  tmp___0 = get_current();
#line 1477
  tmp___1 = get_current();
#line 1477
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1481
  tmp___2 = try_module_get(& __this_module);
#line 1481
  if (tmp___2 == 0) {
#line 1482
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1483
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1484
    return (0);
  } else {

  }
#line 1487
  init_completion(& thi->stop);
#line 1488
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1488
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1488);
  } else {

  }
#line 1489
  thi->reset_cpu_mask = 1;
#line 1490
  thi->t_state = Running;
#line 1491
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1492
  tmp___3 = get_current();
#line 1492
  flush_signals(tmp___3);
#line 1494
  tmp___4 = mdev_to_minor(mdev);
#line 1494
  nt = kthread_create(& drbd_thread_setup, (void *)thi, "drbd%d_%s", tmp___4, me);
#line 1497
  tmp___5 = IS_ERR((void const   *)nt);
#line 1497
  if (tmp___5 != 0L) {
#line 1498
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1500
    module_put(& __this_module);
#line 1501
    return (0);
  } else {

  }
#line 1503
  tmp___6 = spinlock_check(& thi->t_lock);
#line 1503
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1504
  thi->task = nt;
#line 1505
  thi->t_state = Running;
#line 1506
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1507
  wake_up_process(nt);
#line 1508
  goto ldv_45145;
  case 2U: 
#line 1510
  thi->t_state = Restarting;
#line 1511
  tmp___7 = get_current();
#line 1511
  tmp___8 = get_current();
#line 1511
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___8->comm), tmp___7->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1517
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1518
  goto ldv_45145;
  }
  ldv_45145: ;
#line 1521
  return (1);
}
}
#line 1525 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1529
  ns = restart != 0 ? Restarting : Exiting;
#line 1532
  tmp = spinlock_check(& thi->t_lock);
#line 1532
  flags = _raw_spin_lock_irqsave(tmp);
#line 1534
  if ((unsigned int )thi->t_state == 0U) {
#line 1535
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1536
    if (restart != 0) {
#line 1537
      drbd_thread_start(thi);
    } else {

    }
#line 1538
    return;
  } else {

  }
#line 1541
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1542
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1543
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1544
      return;
    } else {

    }
#line 1547
    thi->t_state = ns;
#line 1548
    __asm__  volatile   ("mfence": : : "memory");
#line 1549
    init_completion(& thi->stop);
#line 1550
    tmp___0 = get_current();
#line 1550
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1551
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1555
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1557
  if (wait != 0) {
#line 1558
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1559
  return;
}
}
#line 1569 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1574
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1574
  if (tmp != 0U) {
#line 1575
    return;
  } else {

  }
#line 1577
  tmp___0 = mdev_to_minor(mdev);
#line 1577
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1577
  ord = (int )(tmp___0 % tmp___1);
#line 1578
  cpu = -1;
#line 1578
  goto ldv_45166;
  ldv_45165: 
#line 1579
  tmp___2 = ord;
#line 1579
  ord = ord - 1;
#line 1579
  if (tmp___2 == 0) {
#line 1580
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1581
    return;
  } else {

  }
  ldv_45166: 
#line 1578
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1578
  cpu = (int )tmp___3;
#line 1578
  if (cpu < nr_cpu_ids) {
#line 1579
    goto ldv_45165;
  } else {

  }
#line 1585
  cpumask_setall(mdev->cpu_mask);
#line 1586
  return;
}
}
#line 1595 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 1597
  tmp = get_current();
#line 1597
  p = tmp;
#line 1598
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1603
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1603
  if (_b != 0) {
#line 1603
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1603);
  } else {

  }
#line 1603
  if (_b != 0) {
#line 1604
    return;
  } else {

  }
#line 1605
  if (thi->reset_cpu_mask == 0) {
#line 1606
    return;
  } else {

  }
#line 1607
  thi->reset_cpu_mask = 0;
#line 1608
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1609
  return;
}
}
#line 1613 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;

  {
#line 1619
  _b = (unsigned long )h == (unsigned long )((struct p_header *)0);
#line 1619
  if (_b != 0) {
#line 1619
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1619);
  } else {

  }
#line 1619
  if (_b != 0) {
#line 1619
    return (0);
  } else {

  }
#line 1620
  _b___0 = size == 0UL;
#line 1620
  if (_b___0 != 0) {
#line 1620
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1620);
  } else {

  }
#line 1620
  if (_b___0 != 0) {
#line 1620
    return (0);
  } else {

  }
#line 1622
  h->magic = 1728214147U;
#line 1623
  tmp = __fswab16((int )((__u16 )cmd));
#line 1623
  h->command = tmp;
#line 1624
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1624
  h->length = tmp___0;
#line 1626
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1628
  ok = (size_t )sent == size;
#line 1629
  if (ok == 0) {
#line 1630
    tmp___1 = cmdname(cmd);
#line 1630
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
            tmp___1, (int )size, sent);
  } else {

  }
#line 1632
  return (ok);
}
}
#line 1638 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1641
  ok = 0;
#line 1644
  if (use_data_socket != 0) {
#line 1645
    ldv_mutex_lock_129(& mdev->data.mutex);
#line 1646
    sock = mdev->data.socket;
  } else {
#line 1648
    ldv_mutex_lock_130(& mdev->meta.mutex);
#line 1649
    sock = mdev->meta.socket;
  }
#line 1654
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1654
  if (tmp != 0L) {
#line 1655
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1657
  if (use_data_socket != 0) {
#line 1658
    ldv_mutex_unlock_131(& mdev->data.mutex);
  } else {
#line 1660
    ldv_mutex_unlock_132(& mdev->meta.mutex);
  }
#line 1661
  return (ok);
}
}
#line 1664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1670
  h.magic = 1728214147U;
#line 1671
  tmp = __fswab16((int )((__u16 )cmd));
#line 1671
  h.command = tmp;
#line 1672
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1672
  h.length = tmp___0;
#line 1674
  tmp___1 = drbd_get_data_sock___0(mdev);
#line 1674
  if (tmp___1 == 0) {
#line 1675
    return (0);
  } else {

  }
#line 1677
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1677
  ok = tmp___2 == 8;
#line 1679
  if (ok != 0) {
#line 1679
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1679
    if ((size_t )tmp___3 == size) {
#line 1679
      tmp___4 = 1;
    } else {
#line 1679
      tmp___4 = 0;
    }
  } else {
#line 1679
    tmp___4 = 0;
  }
#line 1679
  ok = tmp___4;
#line 1682
  drbd_put_data_sock___0(mdev);
#line 1684
  return (ok);
}
}
#line 1687 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_89 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  long tmp___2 ;

  {
#line 1692
  apv = mdev->agreed_pro_version;
#line 1694
  if (apv > 87) {
#line 1694
    if (apv == 88) {
#line 1694
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1694
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1694
      tmp___0 = 140;
    }
#line 1694
    size = tmp___0;
  } else {
#line 1694
    size = 12;
  }
#line 1702
  ldv_mutex_lock_133(& mdev->data.mutex);
#line 1703
  sock = mdev->data.socket;
#line 1705
  tmp___2 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1705
  if (tmp___2 != 0L) {
#line 1706
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1708
    p = & mdev->data.sbuf.rs_param_89;
#line 1711
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1713
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1713
    p->rate = tmp___1;
#line 1715
    if (apv > 87) {
#line 1716
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1717
    if (apv > 88) {
#line 1718
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1720
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1722
    rv = 0;
  }
#line 1724
  ldv_mutex_unlock_134(& mdev->data.mutex);
#line 1726
  return (rv);
}
}
#line 1729 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 1734
  size = 32;
#line 1736
  if (mdev->agreed_pro_version > 86) {
#line 1737
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1737
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1741
  tmp___0 = kmalloc___4((size_t )size, 16U);
#line 1741
  p = (struct p_protocol *)tmp___0;
#line 1742
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1743
    return (0);
  } else {

  }
#line 1745
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1745
  p->protocol = tmp___1;
#line 1746
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1746
  p->after_sb_0p = tmp___2;
#line 1747
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1747
  p->after_sb_1p = tmp___3;
#line 1748
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1748
  p->after_sb_2p = tmp___4;
#line 1749
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1749
  p->two_primaries = tmp___5;
#line 1751
  cf = 0;
#line 1752
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1753
    cf = cf | 1;
  } else {

  }
#line 1754
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1755
    if (mdev->agreed_pro_version > 91) {
#line 1756
      cf = cf | 2;
    } else {
#line 1758
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 1759
      kfree((void const   *)p);
#line 1760
      return (0);
    }
  } else {

  }
#line 1763
  tmp___6 = __fswab32((__u32 )cf);
#line 1763
  p->conn_flags = tmp___6;
#line 1765
  if (mdev->agreed_pro_version > 86) {
#line 1766
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 1768
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header *)p, (size_t )size);
#line 1770
  kfree((void const   *)p);
#line 1771
  return (rv);
}
}
#line 1774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 1779
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1779
  if (tmp == 0) {
#line 1780
    return (1);
  } else {

  }
#line 1782
  i = 0;
#line 1782
  goto ldv_45232;
  ldv_45231: ;
#line 1783
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1783
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 1783
    p.uuid[i] = tmp___0;
  } else {
#line 1783
    p.uuid[i] = 0ULL;
  }
#line 1782
  i = i + 1;
  ldv_45232: ;
#line 1782
  if (i <= 3) {
#line 1783
    goto ldv_45231;
  } else {

  }
#line 1785
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 1786
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 1786
  p.uuid[4] = tmp___1;
#line 1787
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 1788
  tmp___2 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1788
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 1789
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 1817UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 1790
  tmp___3 = __fswab64(uuid_flags);
#line 1790
  p.uuid[5] = tmp___3;
#line 1792
  put_ldev(mdev);
#line 1794
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header *)(& p), 56UL);
#line 1794
  return (tmp___4);
}
}
#line 1798 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1800
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 1800
  return (tmp);
}
}
#line 1803 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1805
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 1805
  return (tmp);
}
}
#line 1809 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  struct p_rs_uuid p ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 1813
  tmp = __fswab64(val);
#line 1813
  p.uuid = tmp;
#line 1815
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header *)(& p), 16UL);
#line 1815
  return (tmp___0);
}
}
#line 1819 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int ok ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 1826
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1826
  if (tmp != 0) {
#line 1827
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1827
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              1827);
    } else {

    }
#line 1828
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 1829
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 1830
    q_order_type = drbd_queue_order_type(mdev);
#line 1831
    put_ldev(mdev);
  } else {
#line 1833
    d_size = 0UL;
#line 1834
    u_size = 0UL;
#line 1835
    q_order_type = 0;
  }
#line 1838
  tmp___0 = __fswab64((__u64 )d_size);
#line 1838
  p.d_size = tmp___0;
#line 1839
  tmp___1 = __fswab64((__u64 )u_size);
#line 1839
  p.u_size = tmp___1;
#line 1840
  if (trigger_reply == 0) {
#line 1840
    tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 1840
    tmp___3 = (__u64 )tmp___2;
  } else {
#line 1840
    tmp___3 = 0ULL;
  }
#line 1840
  tmp___4 = __fswab64(tmp___3);
#line 1840
  p.c_size = tmp___4;
#line 1841
  tmp___5 = queue_max_segment_size(mdev->rq_queue);
#line 1841
  tmp___6 = __fswab32(tmp___5);
#line 1841
  p.max_segment_size = tmp___6;
#line 1842
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 1842
  p.queue_order_type = tmp___7;
#line 1843
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 1843
  p.dds_flags = tmp___8;
#line 1845
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header *)(& p), 40UL);
#line 1847
  return (ok);
}
}
#line 1854 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 1858
  ok = 0;
#line 1862
  drbd_state_lock___0(mdev);
#line 1864
  ldv_mutex_lock_135(& mdev->data.mutex);
#line 1866
  tmp = __fswab32(mdev->state.i);
#line 1866
  p.state = tmp;
#line 1867
  sock = mdev->data.socket;
#line 1869
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1869
  if (tmp___0 != 0L) {
#line 1870
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header *)(& p), 12UL, 0U);
  } else {

  }
#line 1874
  ldv_mutex_unlock_136(& mdev->data.mutex);
#line 1876
  drbd_state_unlock(mdev);
#line 1877
  return (ok);
}
}
#line 1880 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 1885
  tmp = __fswab32(mask.i);
#line 1885
  p.mask = tmp;
#line 1886
  tmp___0 = __fswab32(val.i);
#line 1886
  p.val = tmp___0;
#line 1888
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header *)(& p), 16UL);
#line 1888
  return (tmp___1);
}
}
#line 1892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 1896
  tmp = __fswab32((__u32 )retcode);
#line 1896
  p.retcode = tmp;
#line 1898
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header *)(& p), 12UL);
#line 1898
  return (tmp___0);
}
}
#line 1902 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 1915
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 1917
    return (0);
  } else {

  }
#line 1919
  if (c->bit_offset >= c->bm_bits) {
#line 1920
    return (0);
  } else {

  }
#line 1923
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 1924
  memset((void *)(& p->code), 0, 4087UL);
#line 1926
  plain_bits = 0UL;
#line 1931
  toggle = 2U;
  ldv_45286: ;
#line 1936
  if (toggle == 0U) {
#line 1936
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 1936
    tmp = tmp___0;
  } else {
#line 1936
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 1936
    tmp = tmp___1;
  }
#line 1938
  if (tmp == 0xffffffffffffffffUL) {
#line 1939
    tmp = c->bm_bits;
  } else {

  }
#line 1940
  rl = tmp - c->bit_offset;
#line 1942
  if (toggle == 2U) {
#line 1943
    if (rl == 0UL) {
#line 1946
      DCBP_set_start(p, 1);
#line 1948
      toggle = toggle == 0U;
#line 1949
      goto ldv_45284;
    } else {

    }
#line 1951
    DCBP_set_start(p, 0);
  } else {

  }
#line 1956
  if (rl == 0UL) {
#line 1957
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 1959
    return (-1);
  } else {

  }
#line 1962
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 1963
  if (bits == -105) {
#line 1964
    goto ldv_45285;
  } else {

  }
#line 1965
  if (bits <= 0) {
#line 1966
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 1967
    return (0);
  } else {

  }
#line 1970
  toggle = toggle == 0U;
#line 1971
  plain_bits = plain_bits + rl;
#line 1972
  c->bit_offset = tmp;
  ldv_45284: ;
#line 1973
  if (c->bit_offset < c->bm_bits) {
#line 1974
    goto ldv_45286;
  } else {

  }
  ldv_45285: 
#line 1975
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 1977
  if ((unsigned long )(len << 3) > plain_bits) {
#line 1980
    c->bit_offset = c->bit_offset - plain_bits;
#line 1981
    bm_xfer_ctx_bit_to_word_offset(c);
#line 1982
    c->bit_offset = c->word_offset * 64UL;
#line 1983
    return (0);
  } else {

  }
#line 1988
  bm_xfer_ctx_bit_to_word_offset(c);
#line 1991
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 1993
  return ((int )len);
}
}
#line 1997 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_30234 send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header *h ,
                                        struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2000
  p = (struct p_compressed_bm *)h;
#line 2005
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2007
  if (len < 0) {
#line 2008
    return (FAILED);
  } else {

  }
#line 2010
  if (len != 0) {
#line 2011
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2012
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2015
    c->packets[0] = c->packets[0] + 1U;
#line 2016
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2018
    if (c->bit_offset >= c->bm_bits) {
#line 2019
      len = 0;
    } else {

    }
  } else {
#line 2023
    __min1 = 511UL;
#line 2023
    __min2 = c->bm_words - c->word_offset;
#line 2023
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2024
    len = (int )((unsigned int )num_words * 8U);
#line 2025
    if (len != 0) {
#line 2026
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2027
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2029
    c->word_offset = c->word_offset + num_words;
#line 2030
    c->bit_offset = c->word_offset * 64UL;
#line 2032
    c->packets[1] = c->packets[1] + 1U;
#line 2033
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2035
    if (c->bit_offset > c->bm_bits) {
#line 2036
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2038
  ok = ok != 0 ? (len == 0 ? 2 : 0) : 1;
#line 2040
  if (ok == 2) {
#line 2041
    INFO_bm_xfer_stats(mdev, "send", c);
  } else {

  }
#line 2042
  return ((enum ldv_30234 )ok);
}
}
#line 2046 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header *p ;
  int ret ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  enum ldv_30234 tmp___5 ;

  {
#line 2052
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2052
  if (_b != 0) {
#line 2052
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2052);
  } else {

  }
#line 2052
  if (_b != 0) {
#line 2052
    return (0);
  } else {

  }
#line 2056
  tmp = __get_free_pages(16U, 0U);
#line 2056
  p = (struct p_header *)tmp;
#line 2057
  if ((unsigned long )p == (unsigned long )((struct p_header *)0)) {
#line 2058
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2059
    return (0);
  } else {

  }
#line 2062
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2062
  if (tmp___2 != 0) {
#line 2063
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2063
    if (tmp___1 != 0) {
#line 2064
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2065
      drbd_bm_set_all(mdev);
#line 2066
      tmp___0 = drbd_bm_write(mdev);
#line 2066
      if (tmp___0 != 0) {
#line 2070
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2072
        drbd_md_clear_flag(mdev, 8);
#line 2073
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2076
    put_ldev(mdev);
  } else {

  }
#line 2079
  tmp___3 = drbd_bm_bits(mdev);
#line 2079
  tmp___4 = drbd_bm_words(mdev);
#line 2079
  __constr_expr_0.bm_bits = tmp___3;
#line 2079
  __constr_expr_0.bm_words = tmp___4;
#line 2079
  __constr_expr_0.bit_offset = 0UL;
#line 2079
  __constr_expr_0.word_offset = 0UL;
#line 2079
  __constr_expr_0.packets[0] = 0U;
#line 2079
  __constr_expr_0.packets[1] = 0U;
#line 2079
  __constr_expr_0.bytes[0] = 0U;
#line 2079
  __constr_expr_0.bytes[1] = 0U;
#line 2079
  c = __constr_expr_0;
  ldv_45313: 
#line 2085
  tmp___5 = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2085
  ret = (int )tmp___5;
#line 2086
  if (ret == 0) {
#line 2087
    goto ldv_45313;
  } else {

  }
#line 2088
  free_pages((unsigned long )p, 0U);
#line 2089
  return (ret == 2);
}
}
#line 2092 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2096
  tmp = drbd_get_data_sock___0(mdev);
#line 2096
  if (tmp == 0) {
#line 2097
    return (-1);
  } else {

  }
#line 2098
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2098
  err = tmp___0 == 0;
#line 2099
  drbd_put_data_sock___0(mdev);
#line 2100
  return (err);
}
}
#line 2103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2108
  p.barrier = barrier_nr;
#line 2109
  tmp = __fswab32(set_size);
#line 2109
  p.set_size = tmp;
#line 2111
  if ((int )mdev->state.ldv_35202.conn <= 9) {
#line 2112
    return (0);
  } else {

  }
#line 2113
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header *)(& p), 16UL);
#line 2115
  return (ok);
}
}
#line 2126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2134
  p.sector = sector;
#line 2135
  p.block_id = block_id;
#line 2136
  p.blksize = blksize;
#line 2137
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2137
  tmp___0 = __fswab32((__u32 )tmp);
#line 2137
  p.seq_num = tmp___0;
#line 2139
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_35202.conn <= 9) {
#line 2140
    return (0);
  } else {

  }
#line 2141
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header *)(& p), 32UL);
#line 2143
  return (ok);
}
}
#line 2146 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) 
{ 
  int header_size ;
  int data_size ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2149
  header_size = 24;
#line 2151
  data_size = (int )((struct p_header *)dp)->length - header_size;
#line 2153
  tmp = __fswab32((__u32 )data_size);
#line 2153
  tmp___0 = _drbd_send_ack(mdev, cmd, dp->sector, tmp, dp->block_id);
#line 2153
  return (tmp___0);
}
}
#line 2157 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2160
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2160
  return (tmp);
}
}
#line 2169 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2172
  tmp = __fswab32(e->size);
#line 2172
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2172
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->block_id);
#line 2172
  return (tmp___1);
}
}
#line 2180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2183
  tmp = __fswab64(block_id);
#line 2183
  tmp___0 = __fswab32((__u32 )blksize);
#line 2183
  tmp___1 = __fswab64((__u64 )sector);
#line 2183
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2183
  return (tmp___2);
}
}
#line 2189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2195
  tmp = __fswab64((__u64 )sector);
#line 2195
  p.sector = tmp;
#line 2196
  p.block_id = block_id;
#line 2197
  tmp___0 = __fswab32((__u32 )size);
#line 2197
  p.blksize = tmp___0;
#line 2199
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header *)(& p), 32UL);
#line 2201
  return (ok);
}
}
#line 2204 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2212
  tmp = __fswab64((__u64 )sector);
#line 2212
  p.sector = tmp;
#line 2213
  p.block_id = 1728263026ULL;
#line 2214
  tmp___0 = __fswab32((__u32 )size);
#line 2214
  p.blksize = tmp___0;
#line 2216
  p.head.magic = 1728214147U;
#line 2217
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2217
  p.head.command = tmp___1;
#line 2218
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2218
  p.head.length = tmp___2;
#line 2220
  ldv_mutex_lock_137(& mdev->data.mutex);
#line 2222
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2222
  ok = tmp___3 == 32;
#line 2223
  if (ok != 0) {
#line 2223
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2223
    if (tmp___4 == digest_size) {
#line 2223
      tmp___5 = 1;
    } else {
#line 2223
      tmp___5 = 0;
    }
  } else {
#line 2223
    tmp___5 = 0;
  }
#line 2223
  ok = tmp___5;
#line 2225
  ldv_mutex_unlock_138(& mdev->data.mutex);
#line 2227
  return (ok);
}
}
#line 2230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2235
  tmp = __fswab64((__u64 )sector);
#line 2235
  p.sector = tmp;
#line 2236
  p.block_id = 1728261953ULL;
#line 2237
  tmp___0 = __fswab32((__u32 )size);
#line 2237
  p.blksize = tmp___0;
#line 2239
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header *)(& p), 32UL);
#line 2241
  return (ok);
}
}
#line 2248 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2253
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2253
    tmp___0 = 1;
  } else {
#line 2253
    tmp = get_t_state(& mdev->asender);
#line 2253
    if ((unsigned int )tmp != 1U) {
#line 2253
      tmp___0 = 1;
    } else
#line 2253
    if ((int )mdev->state.ldv_35202.conn <= 9) {
#line 2253
      tmp___0 = 1;
    } else {
#line 2253
      tmp___0 = 0;
    }
  }
#line 2253
  drop_it = tmp___0;
#line 2258
  if (drop_it != 0) {
#line 2259
    return (1);
  } else {

  }
#line 2261
  mdev->ko_count = mdev->ko_count - 1U;
#line 2261
  drop_it = mdev->ko_count == 0U;
#line 2262
  if (drop_it == 0) {
#line 2263
    tmp___1 = get_current();
#line 2263
    tmp___2 = get_current();
#line 2263
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2265
    request_ping(mdev);
  } else {

  }
#line 2268
  return (drop_it);
}
}
#line 2292 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2295
  tmp = kmap(page);
#line 2295
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2295
  sent = tmp___0;
#line 2296
  kunmap(page);
#line 2297
  if ((size_t )sent == size) {
#line 2298
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2299
  return ((size_t )sent == size);
}
}
#line 2302 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2305
  tmp = current_thread_info___1();
#line 2305
  oldfs = tmp->addr_limit;
#line 2307
  len = (int )size;
#line 2315
  if (disable_sendpage != 0) {
#line 2316
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2316
    return (tmp___0);
  } else {
#line 2315
    tmp___1 = page_count(page);
#line 2315
    if (tmp___1 <= 0) {
#line 2316
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2316
      return (tmp___0);
    } else {
#line 2315
      tmp___2 = PageSlab(page);
#line 2315
      if (tmp___2 != 0) {
#line 2316
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2316
        return (tmp___0);
      } else {

      }
    }
  }
#line 2318
  msg_flags = msg_flags | 16384U;
#line 2319
  drbd_update_congested(mdev);
#line 2320
  tmp___3 = current_thread_info___1();
#line 2320
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2320
  tmp___3->addr_limit = __constr_expr_0;
  ldv_45413: 
#line 2322
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2322
  sent = (int )tmp___4;
#line 2325
  if (sent == -11) {
#line 2326
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2326
    if (tmp___5 != 0) {
#line 2328
      goto ldv_45410;
    } else {
#line 2330
      goto ldv_45411;
    }
  } else {

  }
#line 2332
  if (sent <= 0) {
#line 2333
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2335
    goto ldv_45410;
  } else {

  }
#line 2337
  len = len - sent;
#line 2338
  offset = offset + sent;
  ldv_45411: ;
#line 2339
  if (len > 0) {
#line 2340
    goto ldv_45413;
  } else {

  }
  ldv_45410: 
#line 2340
  tmp___6 = current_thread_info___1();
#line 2340
  tmp___6->addr_limit = oldfs;
#line 2341
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2343
  ok = len == 0;
#line 2344
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2344
  if (tmp___7 != 0L) {
#line 2345
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2346
  return (ok);
}
}
#line 2349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2354
  bvec = bio->bi_io_vec;
#line 2354
  i = 0;
#line 2354
  goto ldv_45421;
  ldv_45420: 
#line 2355
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2355
  if (tmp == 0) {
#line 2358
    return (0);
  } else {

  }
#line 2354
  bvec = bvec + 1;
#line 2354
  i = i + 1;
  ldv_45421: ;
#line 2354
  if ((int )bio->bi_vcnt > i) {
#line 2355
    goto ldv_45420;
  } else {

  }

#line 2360
  return (1);
}
}
#line 2363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2368
  bvec = bio->bi_io_vec;
#line 2368
  i = 0;
#line 2368
  goto ldv_45430;
  ldv_45429: 
#line 2369
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2369
  if (tmp == 0) {
#line 2372
    return (0);
  } else {

  }
#line 2368
  bvec = bvec + 1;
#line 2368
  i = i + 1;
  ldv_45430: ;
#line 2368
  if ((int )bio->bi_vcnt > i) {
#line 2369
    goto ldv_45429;
  } else {

  }

#line 2374
  return (1);
}
}
#line 2377 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2379
  page = e->pages;
#line 2380
  len = e->size;
#line 2382
  goto ldv_45444;
  ldv_45443: 
#line 2383
  __min1 = len;
#line 2383
  __min2 = 4096U;
#line 2383
  l = __min1 < __min2 ? __min1 : __min2;
#line 2384
  tmp = page_chain_next(page);
#line 2384
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2384
  if (tmp___0 == 0) {
#line 2386
    return (0);
  } else {

  }
#line 2387
  len = len - l;
#line 2382
  page = page_chain_next(page);
  ldv_45444: ;
#line 2382
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2382
    tmp___1 = page_chain_next(page);
#line 2382
    __builtin_prefetch((void const   *)tmp___1);
#line 2382
    if (1 != 0) {
#line 2383
      goto ldv_45443;
    } else {
#line 2385
      goto ldv_45445;
    }
  } else {

  }
  ldv_45445: ;
#line 2389
  return (1);
}
}
#line 2395 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;

  {
#line 2397
  ok = 1;
#line 2399
  dp_flags = 0U;
#line 2403
  tmp = drbd_get_data_sock___0(mdev);
#line 2403
  if (tmp == 0) {
#line 2404
    return (0);
  } else {

  }
#line 2406
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2406
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2406
    dgs = (int )tmp___0;
  } else {
#line 2406
    dgs = 0;
  }
#line 2409
  p.head.magic = 1728214147U;
#line 2410
  p.head.command = 0U;
#line 2411
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2411
  p.head.length = tmp___1;
#line 2414
  tmp___2 = __fswab64((__u64 )req->sector);
#line 2414
  p.sector = tmp___2;
#line 2415
  p.block_id = (u64 )req;
#line 2416
  tmp___3 = atomic_add_return(1, & mdev->packet_seq);
#line 2416
  req->seq_num = tmp___3;
#line 2416
  tmp___4 = __fswab32((__u32 )tmp___3);
#line 2416
  p.seq_num = tmp___4;
#line 2418
  dp_flags = 0U;
#line 2423
  if (((req->master_bio)->bi_rw & 16UL) != 0UL) {
#line 2424
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED would have set DP_HARDBARRIER\n");
  } else {

  }
#line 2427
  if (((req->master_bio)->bi_rw & 32UL) != 0UL) {
#line 2428
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2431
  if (((req->master_bio)->bi_rw & 512UL) != 0UL) {
#line 2432
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2433
  if ((int )mdev->state.ldv_35202.conn > 15 && (int )mdev->state.ldv_35202.conn <= 21) {
#line 2435
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2437
  tmp___5 = __fswab32(dp_flags);
#line 2437
  p.dp_flags = tmp___5;
#line 2438
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 2439
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2439
  ok = tmp___6 == 32;
#line 2441
  if (ok != 0 && dgs != 0) {
#line 2442
    dgb = mdev->int_dig_out;
#line 2443
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2444
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
  } else {

  }
#line 2446
  if (ok != 0) {
#line 2447
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 2448
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2450
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
  } else {

  }
#line 2453
  drbd_put_data_sock___0(mdev);
#line 2455
  return (ok);
}
}
#line 2462 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2470
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2470
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2470
    dgs = (int )tmp;
  } else {
#line 2470
    dgs = 0;
  }
#line 2473
  p.head.magic = 1728214147U;
#line 2474
  tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2474
  p.head.command = tmp___0;
#line 2475
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2475
  p.head.length = tmp___1;
#line 2478
  tmp___2 = __fswab64((__u64 )e->sector);
#line 2478
  p.sector = tmp___2;
#line 2479
  p.block_id = e->block_id;
#line 2486
  tmp___3 = drbd_get_data_sock___0(mdev);
#line 2486
  if (tmp___3 == 0) {
#line 2487
    return (0);
  } else {

  }
#line 2489
  tmp___4 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2489
  ok = tmp___4 == 32;
#line 2491
  if (ok != 0 && dgs != 0) {
#line 2492
    dgb = mdev->int_dig_out;
#line 2493
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 2494
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
  } else {

  }
#line 2496
  if (ok != 0) {
#line 2497
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 2499
  drbd_put_data_sock___0(mdev);
#line 2501
  return (ok);
}
}
#line 2520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2525
  sent = 0;
#line 2527
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2528
    return (-1000);
  } else {

  }
#line 2532
  iov.iov_base = buf;
#line 2533
  iov.iov_len = size;
#line 2535
  msg.msg_name = 0;
#line 2536
  msg.msg_namelen = 0;
#line 2537
  msg.msg_control = 0;
#line 2538
  msg.msg_controllen = 0UL;
#line 2539
  msg.msg_flags = msg_flags | 16384U;
#line 2541
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2542
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2543
    drbd_update_congested(mdev);
  } else {

  }
  ldv_45477: 
#line 2555
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2556
  if (rv == -11) {
#line 2557
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2557
    if (tmp != 0) {
#line 2558
      goto ldv_45475;
    } else {
#line 2560
      goto ldv_45476;
    }
  } else {

  }
#line 2562
  if (rv == 0) {
#line 2562
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2562);
  } else {

  }
#line 2563
  if (rv == -4) {
#line 2564
    tmp___0 = get_current();
#line 2564
    flush_signals(tmp___0);
#line 2565
    rv = 0;
  } else {

  }
#line 2567
  if (rv < 0) {
#line 2568
    goto ldv_45475;
  } else {

  }
#line 2569
  sent = sent + rv;
#line 2570
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2571
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_45476: ;
#line 2572
  if ((size_t )sent < size) {
#line 2573
    goto ldv_45477;
  } else {

  }
  ldv_45475: ;
#line 2574
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2575
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2577
  if (rv <= 0) {
#line 2578
    if (rv != -11) {
#line 2579
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 2582
      val.i = 0U;
#line 2582
      val.ldv_35202.conn = 4U;
#line 2582
      mask.i = 0U;
#line 2582
      mask.ldv_35202.conn = 31U;
#line 2582
      drbd_force_state(mdev, mask, val);
    } else {
#line 2584
      val___0.i = 0U;
#line 2584
      val___0.ldv_35202.conn = 3U;
#line 2584
      mask___0.i = 0U;
#line 2584
      mask___0.ldv_35202.conn = 31U;
#line 2584
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2587
  return (sent);
}
}
#line 2590 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2592
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2594
  rv = 0;
#line 2596
  ldv_mutex_lock_139(& drbd_main_mutex);
#line 2597
  tmp = spinlock_check(& mdev->req_lock);
#line 2597
  flags = _raw_spin_lock_irqsave(tmp);
#line 2601
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) != 1U) {
#line 2602
    if ((mode & 2U) != 0U) {
#line 2603
      rv = -30;
    } else
#line 2604
    if (allow_oos == 0) {
#line 2605
      rv = -124;
    } else {

    }
  } else {

  }
#line 2608
  if (rv == 0) {
#line 2609
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2610
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2611
  ldv_mutex_unlock_140(& drbd_main_mutex);
#line 2613
  return (rv);
}
}
#line 2616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2618
  mdev = (struct drbd_conf *)gd->private_data;
#line 2619
  ldv_mutex_lock_141(& drbd_main_mutex);
#line 2620
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2621
  ldv_mutex_unlock_142(& drbd_main_mutex);
#line 2622
  return (0);
}
}
#line 2625 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_unplug_fn(struct request_queue *q ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;
  int tmp___0 ;

  {
#line 2627
  mdev = (struct drbd_conf *)q->queuedata;
#line 2630
  spin_lock_irq(q->queue_lock);
#line 2631
  blk_remove_plug(q);
#line 2632
  spin_unlock_irq(q->queue_lock);
#line 2635
  spin_lock_irq(& mdev->req_lock);
#line 2636
  if ((int )mdev->state.ldv_35202.pdsk > 3 && (int )mdev->state.ldv_35202.conn > 9) {
#line 2637
    if ((unsigned int )*((unsigned char *)mdev + 1820UL) != 1U) {
#line 2637
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.role == R_PRIMARY ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              2637);
    } else {

    }
#line 2638
    tmp___0 = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 2638
    if (tmp___0 != 0) {
#line 2643
      tmp = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2643
      if (tmp != 0) {
#line 2644
        drbd_queue_work(& mdev->data.work, & mdev->unplug_work);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2648
  spin_unlock_irq(& mdev->req_lock);
#line 2650
  if ((int )mdev->state.ldv_35202.disk > 3) {
#line 2651
    drbd_kick_lo(mdev);
  } else {

  }
#line 2652
  return;
}
}
#line 2654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 2658
  __constr_expr_0.rate = 250;
#line 2658
  __constr_expr_0.after = -1;
#line 2658
  __constr_expr_0.al_extents = 127;
#line 2658
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 2658
  __constr_expr_0.verify_alg_len = 0;
#line 2658
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 2658
  __constr_expr_0.cpu_mask_len = 0;
#line 2658
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 2658
  __constr_expr_0.csums_alg_len = 0;
#line 2658
  __constr_expr_0.use_rle = 0U;
#line 2658
  mdev->sync_conf = __constr_expr_0;
#line 2670
  __constr_expr_1.ldv_35202.role = 2U;
#line 2670
  __constr_expr_1.ldv_35202.peer = 0U;
#line 2670
  __constr_expr_1.ldv_35202.conn = 0U;
#line 2670
  __constr_expr_1.ldv_35202.disk = 0U;
#line 2670
  __constr_expr_1.ldv_35202.pdsk = 6U;
#line 2670
  __constr_expr_1.ldv_35202.susp = 0U;
#line 2670
  __constr_expr_1.ldv_35202.aftr_isp = (unsigned char)0;
#line 2670
  __constr_expr_1.ldv_35202.peer_isp = (unsigned char)0;
#line 2670
  __constr_expr_1.ldv_35202.user_isp = (unsigned char)0;
#line 2670
  __constr_expr_1.ldv_35202._pad = (unsigned short)0;
#line 2670
  mdev->state = __constr_expr_1;
#line 2671
  return;
}
}
#line 2680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;

  {
#line 2685
  drbd_set_defaults(mdev);
#line 2690
  set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2692
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2693
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2694
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2695
  atomic_set(& mdev->unacked_cnt, 0);
#line 2696
  atomic_set(& mdev->local_cnt, 0);
#line 2697
  atomic_set(& mdev->net_cnt, 0);
#line 2698
  atomic_set(& mdev->packet_seq, 0);
#line 2699
  atomic_set(& mdev->pp_in_use, 0);
#line 2701
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 2702
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 2703
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 2704
  sema_init(& mdev->data.work.s, 0);
#line 2705
  sema_init(& mdev->meta.work.s, 0);
#line 2706
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 2708
  spinlock_check(& mdev->data.work.q_lock);
#line 2708
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5628.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 2709
  spinlock_check(& mdev->meta.work.q_lock);
#line 2709
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5628.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 2711
  spinlock_check(& mdev->al_lock);
#line 2711
  __raw_spin_lock_init(& mdev->al_lock.ldv_5628.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 2712
  spinlock_check(& mdev->req_lock);
#line 2712
  __raw_spin_lock_init(& mdev->req_lock.ldv_5628.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 2713
  spinlock_check(& mdev->peer_seq_lock);
#line 2713
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5628.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 2714
  spinlock_check(& mdev->epoch_lock);
#line 2714
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5628.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 2716
  INIT_LIST_HEAD(& mdev->active_ee);
#line 2717
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 2718
  INIT_LIST_HEAD(& mdev->done_ee);
#line 2719
  INIT_LIST_HEAD(& mdev->read_ee);
#line 2720
  INIT_LIST_HEAD(& mdev->net_ee);
#line 2721
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 2722
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 2723
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 2724
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 2725
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 2726
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 2727
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 2729
  mdev->resync_work.cb = & w_resync_inactive;
#line 2730
  mdev->unplug_work.cb = & w_send_write_hint;
#line 2731
  mdev->md_sync_work.cb = & w_md_sync;
#line 2732
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 2733
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 2734
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 2735
  mdev->resync_timer.function = & resync_timer_fn;
#line 2736
  mdev->resync_timer.data = (unsigned long )mdev;
#line 2737
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 2738
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 2740
  __init_waitqueue_head(& mdev->misc_wait, & __key___11);
#line 2741
  __init_waitqueue_head(& mdev->state_wait, & __key___12);
#line 2742
  __init_waitqueue_head(& mdev->ee_wait, & __key___13);
#line 2743
  __init_waitqueue_head(& mdev->al_wait, & __key___14);
#line 2744
  __init_waitqueue_head(& mdev->seq_wait, & __key___15);
#line 2746
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 2747
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 2748
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 2750
  mdev->agreed_pro_version = 94;
#line 2751
  mdev->write_ordering = WO_bio_barrier;
#line 2752
  mdev->resync_wenr = 4294967295U;
#line 2753
  return;
}
}
#line 2755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  unsigned long tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;

  {
#line 2757
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 2758
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 2762
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2762
  if (tmp___0 != 0) {
#line 2763
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2763
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 2764
  tmp___11 = 0UL;
#line 2764
  mdev->rs_mark_time = tmp___11;
#line 2764
  tmp___10 = tmp___11;
#line 2764
  mdev->rs_mark_left = tmp___10;
#line 2764
  tmp___9 = tmp___10;
#line 2764
  mdev->rs_failed = tmp___9;
#line 2764
  tmp___8 = tmp___9;
#line 2764
  mdev->rs_total = tmp___8;
#line 2764
  tmp___7 = tmp___8;
#line 2764
  mdev->rs_start = tmp___7;
#line 2764
  tmp___6 = tmp___7;
#line 2764
  mdev->p_size = tmp___6;
#line 2764
  tmp___5 = (unsigned int )tmp___6;
#line 2764
  mdev->writ_cnt = tmp___5;
#line 2764
  tmp___4 = tmp___5;
#line 2764
  mdev->send_cnt = tmp___4;
#line 2764
  tmp___3 = tmp___4;
#line 2764
  mdev->recv_cnt = tmp___3;
#line 2764
  tmp___2 = tmp___3;
#line 2764
  mdev->read_cnt = tmp___2;
#line 2764
  tmp___1 = tmp___2;
#line 2764
  mdev->bm_writ_cnt = tmp___1;
#line 2764
  mdev->al_writ_cnt = tmp___1;
#line 2776
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 2776
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2776);
  } else {

  }
#line 2778
  drbd_set_my_capacity(mdev, 0UL);
#line 2779
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 2781
    drbd_bm_resize(mdev, 0UL, 1);
#line 2782
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 2785
  drbd_free_resources(mdev);
#line 2791
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 2791
  if (tmp___12 == 0) {
#line 2791
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2791);
  } else {

  }
#line 2792
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 2792
  if (tmp___13 == 0) {
#line 2792
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2792);
  } else {

  }
#line 2793
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 2793
  if (tmp___14 == 0) {
#line 2793
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2793);
  } else {

  }
#line 2794
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 2794
  if (tmp___15 == 0) {
#line 2794
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2794);
  } else {

  }
#line 2795
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 2795
  if (tmp___16 == 0) {
#line 2795
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2795);
  } else {

  }
#line 2796
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 2796
  if (tmp___17 == 0) {
#line 2796
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2796);
  } else {

  }
#line 2797
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2797
  if (tmp___18 == 0) {
#line 2797
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2797);
  } else {

  }
#line 2798
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 2798
  if (tmp___19 == 0) {
#line 2798
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2798);
  } else {

  }
#line 2799
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 2799
  if (tmp___20 == 0) {
#line 2799
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2799);
  } else {

  }
#line 2800
  tmp___21 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2800
  if (tmp___21 == 0) {
#line 2800
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2800);
  } else {

  }
#line 2801
  return;
}
}
#line 2805 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 2809
  goto ldv_45538;
  ldv_45537: 
#line 2810
  page = drbd_pp_pool;
#line 2811
  drbd_pp_pool = (struct page *)page->ldv_12434.ldv_12431.private;
#line 2812
  __free_pages(page, 0U);
#line 2813
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_45538: ;
#line 2809
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 2810
    goto ldv_45537;
  } else {

  }

#line 2818
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 2819
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 2820
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 2821
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 2822
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2823
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 2824
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2825
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 2826
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2827
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 2828
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2829
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 2831
  drbd_ee_mempool = 0;
#line 2832
  drbd_request_mempool = 0;
#line 2833
  drbd_ee_cache = 0;
#line 2834
  drbd_request_cache = 0;
#line 2835
  drbd_bm_ext_cache = 0;
#line 2836
  drbd_al_ext_cache = 0;
#line 2838
  return;
}
}
#line 2841 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 2844
  number = (int const   )(minor_count * 8U);
#line 2848
  drbd_request_mempool = 0;
#line 2849
  drbd_ee_cache = 0;
#line 2850
  drbd_request_cache = 0;
#line 2851
  drbd_bm_ext_cache = 0;
#line 2852
  drbd_al_ext_cache = 0;
#line 2853
  drbd_pp_pool = 0;
#line 2856
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 2858
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2859
    goto Enomem;
  } else {

  }
#line 2861
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 2863
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2864
    goto Enomem;
  } else {

  }
#line 2866
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 2868
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2869
    goto Enomem;
  } else {

  }
#line 2871
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 2873
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2874
    goto Enomem;
  } else {

  }
#line 2877
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 2879
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2880
    goto Enomem;
  } else {

  }
#line 2882
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 2884
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2885
    goto Enomem;
  } else {

  }
#line 2888
  spinlock_check(& drbd_pp_lock);
#line 2888
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5628.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 2890
  i = 0;
#line 2890
  goto ldv_45549;
  ldv_45548: 
#line 2891
  page = alloc_pages(131282U, 0U);
#line 2892
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 2893
    goto Enomem;
  } else {

  }
#line 2894
  page->ldv_12434.ldv_12431.private = (unsigned long )drbd_pp_pool;
#line 2895
  drbd_pp_pool = page;
#line 2890
  i = i + 1;
  ldv_45549: ;
#line 2890
  if (i < number) {
#line 2891
    goto ldv_45548;
  } else {

  }
#line 2897
  drbd_pp_vacant = number;
#line 2899
  return (0);
  Enomem: 
#line 2902
  drbd_destroy_mempools();
#line 2903
  return (-12);
}
}
#line 2906 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 2913
  return (0);
}
}
#line 2916 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 2920 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 2924
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 2925
  if (rr != 0) {
#line 2926
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 2928
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 2929
  if (rr != 0) {
#line 2930
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 2932
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 2933
  if (rr != 0) {
#line 2934
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 2936
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 2937
  if (rr != 0) {
#line 2938
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 2940
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 2941
  if (rr != 0) {
#line 2942
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 2943
  return;
}
}
#line 2947 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 2949
  tmp = minor_to_mdev(minor);
#line 2949
  mdev = tmp;
#line 2951
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2952
    return;
  } else {

  }
#line 2955
  if (mdev->open_cnt != 0) {
#line 2956
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2957);
  } else {

  }
#line 2959
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2959
  _b = tmp___0 == 0;
#line 2959
  if (_b != 0) {
#line 2959
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2959);
  } else {

  }
#line 2959
  if (_b != 0) {
#line 2961
    lp = mdev->data.work.q.next;
#line 2961
    goto ldv_45570;
    ldv_45569: 
#line 2962
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 2961
    lp = lp->next;
    ldv_45570: 
#line 2961
    __builtin_prefetch((void const   *)lp->next);
#line 2961
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 2962
      goto ldv_45569;
    } else {

    }

  } else {

  }
#line 2967
  del_gendisk(mdev->vdisk);
#line 2972
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 2973
    bdput(mdev->this_bdev);
  } else {

  }
#line 2975
  drbd_free_resources(mdev);
#line 2977
  drbd_release_ee_lists(mdev);
#line 2980
  kfree((void const   *)mdev->ee_hash);
#line 2986
  lc_destroy(mdev->act_log);
#line 2987
  lc_destroy(mdev->resync);
#line 2989
  kfree((void const   *)mdev->p_uuid);
#line 2992
  kfree((void const   *)mdev->int_dig_out);
#line 2993
  kfree((void const   *)mdev->int_dig_in);
#line 2994
  kfree((void const   *)mdev->int_dig_vv);
#line 2999
  drbd_free_mdev(mdev);
#line 3000
  return;
}
}
#line 3002 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3006
  unregister_reboot_notifier(& drbd_notifier);
#line 3008
  drbd_nl_cleanup();
#line 3010
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3011
    if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3012
      remove_proc_entry("drbd", 0);
    } else {

    }
#line 3013
    i = minor_count;
#line 3014
    goto ldv_45577;
    ldv_45576: 
#line 3015
    drbd_delete_device(i);
    ldv_45577: 
#line 3014
    tmp = i;
#line 3014
    i = i - 1U;
#line 3014
    if (tmp != 0U) {
#line 3015
      goto ldv_45576;
    } else {

    }
#line 3016
    drbd_destroy_mempools();
  } else {

  }
#line 3019
  kfree((void const   *)minor_table);
#line 3021
  unregister_blkdev(147U, "drbd");
#line 3023
  printk("<6>drbd: module cleanup done.\n");
#line 3024
  return;
}
}
#line 3033 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 3035
  mdev = (struct drbd_conf *)congested_data;
#line 3037
  reason = 45;
#line 3038
  r = 0;
#line 3040
  tmp = __inc_ap_bio_cond___0(mdev);
#line 3040
  if (tmp == 0) {
#line 3042
    r = bdi_bits;
#line 3043
    reason = 100;
#line 3044
    goto out;
  } else {

  }
#line 3047
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3047
  if (tmp___0 != 0) {
#line 3048
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3049
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3050
    put_ldev(mdev);
#line 3051
    if (r != 0) {
#line 3052
      reason = 98;
    } else {

    }
  } else {

  }
#line 3055
  if ((bdi_bits & 4) != 0) {
#line 3055
    tmp___1 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3055
    if (tmp___1 != 0) {
#line 3056
      r = r | 4;
#line 3057
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3061
  mdev->congestion_reason = reason;
#line 3062
  return (r);
}
}
#line 3065 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3072
  tmp = kzalloc___1(3968UL, 208U);
#line 3072
  mdev = (struct drbd_conf *)tmp;
#line 3073
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3074
    return (0);
  } else {

  }
#line 3075
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3075
  if (tmp___0) {
#line 3075
    tmp___1 = 0;
  } else {
#line 3075
    tmp___1 = 1;
  }
#line 3075
  if (tmp___1) {
#line 3076
    goto out_no_cpumask;
  } else {

  }
#line 3078
  mdev->minor = minor;
#line 3080
  drbd_init_set_defaults(mdev);
#line 3082
  q = blk_alloc_queue(208U);
#line 3083
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3084
    goto out_no_q;
  } else {

  }
#line 3085
  mdev->rq_queue = q;
#line 3086
  q->queuedata = (void *)mdev;
#line 3088
  disk = alloc_disk(1);
#line 3089
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3090
    goto out_no_disk;
  } else {

  }
#line 3091
  mdev->vdisk = disk;
#line 3093
  set_disk_ro(disk, 1);
#line 3095
  disk->queue = q;
#line 3096
  disk->major = 147;
#line 3097
  disk->first_minor = (int )minor;
#line 3098
  disk->fops = & drbd_ops;
#line 3099
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3100
  disk->private_data = (void *)mdev;
#line 3102
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3104
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3106
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3107
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3109
  blk_queue_make_request(q, & drbd_make_request_26);
#line 3110
  blk_queue_max_segment_size(q, 32768U);
#line 3111
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3112
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3113
  q->queue_lock = & mdev->req_lock;
#line 3115
  q->unplug_fn = & drbd_unplug_fn;
#line 3117
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3118
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3119
    goto out_no_io_page;
  } else {

  }
#line 3121
  tmp___2 = drbd_bm_init(mdev);
#line 3121
  if (tmp___2 != 0) {
#line 3122
    goto out_no_bitmap;
  } else {

  }
#line 3124
  tmp___3 = tl_init(mdev);
#line 3124
  if (tmp___3 == 0) {
#line 3125
    goto out_no_tl;
  } else {

  }
#line 3127
  tmp___4 = kzalloc___1(120UL, 208U);
#line 3127
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3128
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3129
    goto out_no_app_reads;
  } else {

  }
#line 3131
  tmp___5 = kzalloc___1(40UL, 208U);
#line 3131
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3132
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3133
    goto out_no_epoch;
  } else {

  }
#line 3135
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3136
  mdev->epochs = 1U;
#line 3138
  return (mdev);
  out_no_epoch: 
#line 3143
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3145
  tl_cleanup(mdev);
  out_no_tl: 
#line 3147
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3149
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3151
  put_disk(disk);
  out_no_disk: 
#line 3153
  blk_cleanup_queue(q);
  out_no_q: 
#line 3155
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3157
  kfree((void const   *)mdev);
#line 3158
  return (0);
}
}
#line 3163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3165
  kfree((void const   *)mdev->current_epoch);
#line 3166
  kfree((void const   *)mdev->app_reads_hash);
#line 3167
  tl_cleanup(mdev);
#line 3168
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3169
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3170
  __free_pages(mdev->md_io_page, 0U);
#line 3171
  put_disk(mdev->vdisk);
#line 3172
  blk_cleanup_queue(mdev->rq_queue);
#line 3173
  free_cpumask_var(mdev->cpu_mask);
#line 3174
  kfree((void const   *)mdev);
#line 3175
  return;
}
}
#line 3178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3189
  if (minor_count == 0U || minor_count > 255U) {
#line 3190
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3193
    return (-22);
  } else {

  }
#line 3199
  err = drbd_nl_init();
#line 3200
  if (err != 0) {
#line 3201
    return (err);
  } else {

  }
#line 3203
  err = register_blkdev(147U, "drbd");
#line 3204
  if (err != 0) {
#line 3205
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3208
    return (err);
  } else {

  }
#line 3211
  register_reboot_notifier(& drbd_notifier);
#line 3216
  err = -12;
#line 3218
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3220
  drbd_proc = 0;
#line 3221
  tmp = kzalloc___1((unsigned long )minor_count * 8UL, 208U);
#line 3221
  minor_table = (struct drbd_conf **)tmp;
#line 3223
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3224
    goto Enomem;
  } else {

  }
#line 3226
  err = drbd_create_mempools();
#line 3227
  if (err != 0) {
#line 3228
    goto Enomem;
  } else {

  }
#line 3230
  drbd_proc = proc_create_data("drbd", 33060U, 0, & drbd_proc_fops, 0);
#line 3231
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3232
    printk("<3>drbd: unable to register proc file\n");
#line 3233
    goto Enomem;
  } else {

  }
#line 3236
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3238
  printk("<6>drbd: initialized. Version: 8.3.8.1 (api:%d/proto:%d-%d)\n", 88, 86,
         94);
#line 3241
  tmp___0 = drbd_buildtag();
#line 3241
  printk("<6>drbd: %s\n", tmp___0);
#line 3242
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3244
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3246
  return (0);
  Enomem: 
#line 3249
  drbd_cleanup();
#line 3250
  if (err == -12) {
#line 3252
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3254
    printk("<3>drbd: initialization failure\n");
  }
#line 3255
  return (err);
}
}
#line 3258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3260
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3261
    return;
  } else {

  }
#line 3263
  bd_release(ldev->backing_bdev);
#line 3264
  bd_release(ldev->md_bdev);
#line 3266
  fput(ldev->lo_file);
#line 3267
  fput(ldev->md_file);
#line 3269
  kfree((void const   *)ldev);
#line 3270
  return;
}
}
#line 3272 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3274
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3275
    ldv_mutex_lock_143(& mdev->data.mutex);
#line 3276
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3277
    sock_release(mdev->data.socket);
#line 3278
    mdev->data.socket = 0;
#line 3279
    ldv_mutex_unlock_144(& mdev->data.mutex);
  } else {

  }
#line 3281
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3282
    ldv_mutex_lock_145(& mdev->meta.mutex);
#line 3283
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3284
    sock_release(mdev->meta.socket);
#line 3285
    mdev->meta.socket = 0;
#line 3286
    ldv_mutex_unlock_146(& mdev->meta.mutex);
  } else {

  }
#line 3288
  return;
}
}
#line 3291 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3293
  crypto_free_hash(mdev->csums_tfm);
#line 3294
  mdev->csums_tfm = 0;
#line 3295
  crypto_free_hash(mdev->verify_tfm);
#line 3296
  mdev->verify_tfm = 0;
#line 3297
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3298
  mdev->cram_hmac_tfm = 0;
#line 3299
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3300
  mdev->integrity_w_tfm = 0;
#line 3301
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3302
  mdev->integrity_r_tfm = 0;
#line 3304
  drbd_free_sock(mdev);
#line 3306
  drbd_free_bc(mdev->ldev);
#line 3306
  mdev->ldev = 0;
#line 3307
  return;
}
}
#line 3334 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  sector_t tmp___11 ;
  int tmp___12 ;
  sector_t tmp___13 ;

  {
#line 3340
  tmp = test_and_clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 3340
  if (tmp == 0) {
#line 3341
    return;
  } else {

  }
#line 3342
  del_timer(& mdev->md_sync_timer);
#line 3346
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3346
  if (tmp___0 == 0) {
#line 3347
    return;
  } else {

  }
#line 3349
  ldv_mutex_lock_147(& mdev->md_io_mutex);
#line 3350
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3350
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3351
  memset((void *)buffer, 0, 512UL);
#line 3353
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3353
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3353
  buffer->la_size = tmp___3;
#line 3354
  i = 0;
#line 3354
  goto ldv_45641;
  ldv_45640: 
#line 3355
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3355
  buffer->uuid[i] = tmp___4;
#line 3354
  i = i + 1;
  ldv_45641: ;
#line 3354
  if (i <= 3) {
#line 3355
    goto ldv_45640;
  } else {

  }
#line 3356
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3356
  buffer->flags = tmp___5;
#line 3357
  buffer->magic = 1795323011U;
#line 3359
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3359
  buffer->md_size_sect = tmp___6;
#line 3360
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3360
  buffer->al_offset = tmp___7;
#line 3361
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3361
  buffer->al_nr_extents = tmp___8;
#line 3362
  buffer->bm_bytes_per_bit = 1048576U;
#line 3363
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3363
  buffer->device_uuid = tmp___9;
#line 3365
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3365
  buffer->bm_offset = tmp___10;
#line 3367
  tmp___11 = drbd_md_ss__(mdev, mdev->ldev);
#line 3367
  if ((unsigned long long )tmp___11 != (mdev->ldev)->md.md_offset) {
#line 3367
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3367);
  } else {

  }
#line 3368
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3370
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3370
  if (tmp___12 != 0) {
#line 3371
    clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 3374
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3376
    drbd_chk_io_error____1(mdev, 1, 1, "drbd_md_sync");
  }
#line 3381
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3381
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___13;
#line 3383
  ldv_mutex_unlock_148(& mdev->md_io_mutex);
#line 3384
  put_ldev(mdev);
#line 3385
  return;
}
}
#line 3395 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;

  {
#line 3398
  rv = 101;
#line 3400
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3400
  if (tmp == 0) {
#line 3401
    return (118);
  } else {

  }
#line 3403
  ldv_mutex_lock_149(& mdev->md_io_mutex);
#line 3404
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3404
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3406
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3406
  if (tmp___1 == 0) {
#line 3409
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3410
    rv = 118;
#line 3411
    goto err;
  } else {

  }
#line 3414
  tmp___2 = __fswab32(buffer->magic);
#line 3414
  if (tmp___2 != 2205418091U) {
#line 3415
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 3416
    rv = 119;
#line 3417
    goto err;
  } else {

  }
#line 3419
  tmp___4 = __fswab32(buffer->al_offset);
#line 3419
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 3420
    tmp___3 = __fswab32(buffer->al_offset);
#line 3420
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 3422
    rv = 119;
#line 3423
    goto err;
  } else {

  }
#line 3425
  tmp___6 = __fswab32(buffer->bm_offset);
#line 3425
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 3426
    tmp___5 = __fswab32(buffer->bm_offset);
#line 3426
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 3428
    rv = 119;
#line 3429
    goto err;
  } else {

  }
#line 3431
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 3431
  if (tmp___8 != bdev->md.md_size_sect) {
#line 3432
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 3432
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 3434
    rv = 119;
#line 3435
    goto err;
  } else {

  }
#line 3438
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 3438
  if (tmp___10 != 4096U) {
#line 3439
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 3439
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 3441
    rv = 119;
#line 3442
    goto err;
  } else {

  }
#line 3445
  tmp___11 = __fswab64(buffer->la_size);
#line 3445
  bdev->md.la_size_sect = tmp___11;
#line 3446
  i = 0;
#line 3446
  goto ldv_45653;
  ldv_45652: 
#line 3447
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 3447
  bdev->md.uuid[i] = tmp___12;
#line 3446
  i = i + 1;
  ldv_45653: ;
#line 3446
  if (i <= 3) {
#line 3447
    goto ldv_45652;
  } else {

  }
#line 3448
  tmp___13 = __fswab32(buffer->flags);
#line 3448
  bdev->md.flags = tmp___13;
#line 3449
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 3449
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 3450
  tmp___15 = __fswab64(buffer->device_uuid);
#line 3450
  bdev->md.device_uuid = tmp___15;
#line 3452
  if (mdev->sync_conf.al_extents <= 6) {
#line 3453
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3456
  ldv_mutex_unlock_150(& mdev->md_io_mutex);
#line 3457
  put_ldev(mdev);
#line 3459
  return (rv);
}
}
#line 3470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 


  {
#line 3472
  set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 3473
  mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
#line 3474
  return;
}
}
#line 3477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3481
  i = 2;
#line 3481
  goto ldv_45663;
  ldv_45662: 
#line 3482
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3481
  i = i + 1;
  ldv_45663: ;
#line 3481
  if (i <= 2) {
#line 3482
    goto ldv_45662;
  } else {

  }

#line 3486
  return;
}
}
#line 3485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3487
  if (idx == 0) {
#line 3488
    if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 3489
      val = val | 1ULL;
    } else {
#line 3491
      val = val & 0xfffffffffffffffeULL;
    }
#line 3493
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3496
  (mdev->ldev)->md.uuid[idx] = val;
#line 3497
  drbd_md_mark_dirty(mdev);
#line 3498
  return;
}
}
#line 3501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3503
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3504
    drbd_uuid_move_history(mdev);
#line 3505
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 3507
  _drbd_uuid_set(mdev, idx, val);
#line 3508
  return;
}
}
#line 3517 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;

  {
#line 3521
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Creating new current UUID\n");
#line 3522
  if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3522
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->md.uuid[UI_BITMAP] == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3522);
  } else {

  }
#line 3523
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3525
  get_random_bytes((void *)(& val), 8);
#line 3526
  _drbd_uuid_set(mdev, 0, val);
#line 3527
  return;
}
}
#line 3529 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 3531
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3532
    return;
  } else {

  }
#line 3534
  if (val == 0ULL) {
#line 3535
    drbd_uuid_move_history(mdev);
#line 3536
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3537
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 3539
    if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3540
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID already set");
    } else {

    }
#line 3542
    (mdev->ldev)->md.uuid[1] = val;
#line 3543
    (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
  }
#line 3546
  drbd_md_mark_dirty(mdev);
#line 3547
  return;
}
}
#line 3555 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3557
  rv = -5;
#line 3559
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3559
  if (tmp != 0) {
#line 3560
    drbd_md_set_flag(mdev, 8);
#line 3561
    drbd_md_sync(mdev);
#line 3562
    drbd_bm_set_all(mdev);
#line 3564
    rv = drbd_bm_write(mdev);
#line 3566
    if (rv == 0) {
#line 3567
      drbd_md_clear_flag(mdev, 8);
#line 3568
      drbd_md_sync(mdev);
    } else {

    }
#line 3571
    put_ldev(mdev);
  } else {

  }
#line 3574
  return (rv);
}
}
#line 3583 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3585
  rv = -5;
#line 3587
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3587
  if (tmp != 0) {
#line 3588
    drbd_bm_clear_all(mdev);
#line 3589
    rv = drbd_bm_write(mdev);
#line 3590
    put_ldev(mdev);
  } else {

  }
#line 3593
  return (rv);
}
}
#line 3596 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;

  {
#line 3598
  __mptr = (struct drbd_work  const  *)w;
#line 3598
  work = (struct bm_io_work *)__mptr;
#line 3601
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3601
  if (tmp != 0) {
#line 3601
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3601);
  } else {

  }
#line 3603
  drbd_bm_lock(mdev, work->why);
#line 3604
  rv = (*(work->io_fn))(mdev);
#line 3605
  drbd_bm_unlock(mdev);
#line 3607
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3608
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3610
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3611
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3613
  clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 3614
  work->why = 0;
#line 3616
  return (1);
}
}
#line 3631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 3636
  tmp = get_current();
#line 3636
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 3636
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3636);
  } else {

  }
#line 3638
  tmp___0 = constant_test_bit(19U, (unsigned long const volatile   *)(& mdev->flags));
#line 3638
  if (tmp___0 != 0) {
#line 3638
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3638);
  } else {

  }
#line 3639
  tmp___1 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 3639
  if (tmp___1 != 0) {
#line 3639
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3639);
  } else {

  }
#line 3640
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3640
  if (tmp___2 == 0) {
#line 3640
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3640);
  } else {

  }
#line 3641
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 3642
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 3645
  mdev->bm_io_work.io_fn = io_fn;
#line 3646
  mdev->bm_io_work.done = done;
#line 3647
  mdev->bm_io_work.why = why;
#line 3649
  set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
#line 3650
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3650
  if (tmp___4 == 0) {
#line 3651
    tmp___3 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3651
    if (tmp___3 != 0) {
#line 3652
      set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 3653
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {
#line 3655
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME avoided double queuing bm_io_work\n");
    }
  } else {

  }
#line 3656
  return;
}
}
#line 3668 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 3672
  tmp = get_current();
#line 3672
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 3672
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3672);
  } else {

  }
#line 3674
  drbd_suspend_io(mdev);
#line 3676
  drbd_bm_lock(mdev, why);
#line 3677
  rv = (*io_fn)(mdev);
#line 3678
  drbd_bm_unlock(mdev);
#line 3680
  drbd_resume_io(mdev);
#line 3682
  return (rv);
}
}
#line 3685 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3687
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 3688
    drbd_md_mark_dirty(mdev);
#line 3689
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 3691
  return;
}
}
#line 3693 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3695
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 3696
    drbd_md_mark_dirty(mdev);
#line 3697
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 3699
  return;
}
}
#line 3700 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 3702
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 3705 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3707
  mdev = (struct drbd_conf *)data;
#line 3709
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 3710
  return;
}
}
#line 3712 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 3714
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 3715
  drbd_md_sync(mdev);
#line 3717
  return (1);
}
}
#line 3737 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 3741
  tmp = rsp->count;
#line 3741
  rsp->count = rsp->count - 1UL;
#line 3741
  if (tmp == 0UL) {
#line 3742
    get_random_bytes((void *)(& refresh), 8);
#line 3743
    rsp->state = rsp->state + (unsigned long )refresh;
#line 3744
    rsp->count = 10000UL;
  } else {

  }
#line 3746
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 3747
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 3747
  return ((unsigned long )tmp___0);
}
}
#line 3751 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 3752
  _faults[0] = (char *)"Meta-data write";
#line 3752
  _faults[1] = (char *)"Meta-data read";
#line 3752
  _faults[2] = (char *)"Resync write";
#line 3752
  _faults[3] = (char *)"Resync read";
#line 3752
  _faults[4] = (char *)"Data write";
#line 3752
  _faults[5] = (char *)"Data read";
#line 3752
  _faults[6] = (char *)"Data read ahead";
#line 3752
  _faults[7] = (char *)"BM allocation";
#line 3752
  _faults[8] = (char *)"EE allocation";
#line 3752
  _faults[9] = (char *)"receive data corruption";
#line 3765
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 3769 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 3771
  rrs.state = 0UL;
#line 3771
  rrs.count = 0UL;
#line 3773
  if (fault_devs == 0) {
#line 3773
    goto _L;
  } else {
#line 3773
    tmp = mdev_to_minor(mdev);
#line 3773
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 3773
      tmp___0 = _drbd_fault_random(& rrs);
#line 3773
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 3773
        tmp___1 = 1;
      } else {
#line 3773
        tmp___1 = 0;
      }
    } else {
#line 3773
      tmp___1 = 0;
    }
  }
#line 3773
  ret = (unsigned int )tmp___1;
#line 3778
  if (ret != 0U) {
#line 3779
    fault_count = fault_count + 1;
#line 3781
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 3781
    if (tmp___3 != 0) {
#line 3782
      tmp___2 = _drbd_fault_str(type);
#line 3782
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 3786
  return (ret);
}
}
#line 3790 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 3795
  buildtag[0] = '\000';
#line 3795
  tmp = 1U;
#line 3795
  while (1) {
#line 3795
    if (tmp >= 38U) {
#line 3795
      break;
    } else {

    }
#line 3795
    buildtag[tmp] = (char)0;
#line 3795
    tmp = tmp + 1U;
  }
#line 3797
  if ((int )((signed char )buildtag[0]) == 0) {
#line 3799
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 3800
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 3803
      buildtag[0] = 98;
    }
  } else {

  }
#line 3806
  return ((char const   *)(& buildtag));
}
}
#line 3854 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_61_p1 ;
  int res_drbd_open_61 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_62_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_69_p1 ;
  void *var_drbd_notify_sys_69_p2 ;
  unsigned long var_md_sync_timer_fn_94_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4078
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4030
  LDV_IN_INTERRUPT = 1;
#line 4039
  ldv_initialize();
#line 4066
  ldv_handler_precall();
#line 4067
  tmp = drbd_init();
#line 4067
  if (tmp != 0) {
#line 4068
    goto ldv_final;
  } else {

  }
#line 4085
  goto ldv_45824;
  ldv_45823: 
#line 4089
  tmp___0 = nondet_int();
#line 4089
  switch (tmp___0) {
  case 0: ;
#line 4094
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4120
    ldv_handler_precall();
#line 4121
    res_drbd_open_61 = drbd_open(var_group1, var_drbd_open_61_p1);
#line 4122
    ldv_check_return_value(res_drbd_open_61);
#line 4123
    if (res_drbd_open_61 != 0) {
#line 4124
      goto ldv_module_exit;
    } else {

    }
#line 4137
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4143
  goto ldv_45818;
  case 1: ;
#line 4147
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4173
    ldv_handler_precall();
#line 4174
    drbd_release(var_group2, var_drbd_release_62_p1);
#line 4187
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4193
  goto ldv_45818;
  case 2: 
#line 4223
  ldv_handler_precall();
#line 4224
  drbd_notify_sys(var_group3, var_drbd_notify_sys_69_p1, var_drbd_notify_sys_69_p2);
#line 4243
  goto ldv_45818;
  case 3: 
#line 4276
  ldv_handler_precall();
#line 4277
  md_sync_timer_fn(var_md_sync_timer_fn_94_p0);
#line 4293
  goto ldv_45818;
  default: ;
#line 4294
  goto ldv_45818;
  }
  ldv_45818: ;
  ldv_45824: 
#line 4085
  tmp___1 = nondet_int();
#line 4085
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4087
    goto ldv_45823;
  } else {

  }

  ldv_module_exit: 
#line 4327
  ldv_handler_precall();
#line 4328
  drbd_cleanup();
  ldv_final: 
#line 4343
  ldv_check_final_state();
#line 4346
  return;
}
}
#line 4350 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4355
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4357
  mutex_lock(ldv_func_arg1);
#line 4358
  return;
}
}
#line 4360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_mutex_trylock_122(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4365
  tmp = mutex_trylock(ldv_func_arg1);
#line 4365
  ldv_func_res = tmp;
#line 4367
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4367
  return (tmp___0);
#line 4369
  return (ldv_func_res);
}
}
#line 4372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4377
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4379
  mutex_unlock(ldv_func_arg1);
#line 4380
  return;
}
}
#line 4382 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4387
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4389
  mutex_lock(ldv_func_arg1);
#line 4390
  return;
}
}
#line 4392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4397
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4399
  mutex_unlock(ldv_func_arg1);
#line 4400
  return;
}
}
#line 4402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4407
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4409
  mutex_unlock(ldv_func_arg1);
#line 4410
  return;
}
}
#line 4412 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4417
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4419
  mutex_lock(ldv_func_arg1);
#line 4420
  return;
}
}
#line 4422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4427
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4429
  mutex_unlock(ldv_func_arg1);
#line 4430
  return;
}
}
#line 4432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4437
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4439
  mutex_lock(ldv_func_arg1);
#line 4440
  return;
}
}
#line 4442 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_130(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4447
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4449
  mutex_lock(ldv_func_arg1);
#line 4450
  return;
}
}
#line 4452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_131(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4457
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4459
  mutex_unlock(ldv_func_arg1);
#line 4460
  return;
}
}
#line 4462 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_132(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4467
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4469
  mutex_unlock(ldv_func_arg1);
#line 4470
  return;
}
}
#line 4472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_133(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4477
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4479
  mutex_lock(ldv_func_arg1);
#line 4480
  return;
}
}
#line 4482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4487
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4489
  mutex_unlock(ldv_func_arg1);
#line 4490
  return;
}
}
#line 4492 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4497
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4499
  mutex_lock(ldv_func_arg1);
#line 4500
  return;
}
}
#line 4502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4507
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4509
  mutex_unlock(ldv_func_arg1);
#line 4510
  return;
}
}
#line 4512 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4517
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4519
  mutex_lock(ldv_func_arg1);
#line 4520
  return;
}
}
#line 4522 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4527
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4529
  mutex_unlock(ldv_func_arg1);
#line 4530
  return;
}
}
#line 4532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4537
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 4539
  mutex_lock(ldv_func_arg1);
#line 4540
  return;
}
}
#line 4542 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4547
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 4549
  mutex_unlock(ldv_func_arg1);
#line 4550
  return;
}
}
#line 4552 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4557
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 4559
  mutex_lock(ldv_func_arg1);
#line 4560
  return;
}
}
#line 4562 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4567
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 4569
  mutex_unlock(ldv_func_arg1);
#line 4570
  return;
}
}
#line 4572 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_143(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4577
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4579
  mutex_lock(ldv_func_arg1);
#line 4580
  return;
}
}
#line 4582 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4587
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4589
  mutex_unlock(ldv_func_arg1);
#line 4590
  return;
}
}
#line 4592 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4597
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4599
  mutex_lock(ldv_func_arg1);
#line 4600
  return;
}
}
#line 4602 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4607
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4609
  mutex_unlock(ldv_func_arg1);
#line 4610
  return;
}
}
#line 4612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4617
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4619
  mutex_lock(ldv_func_arg1);
#line 4620
  return;
}
}
#line 4622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_148(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4627
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4629
  mutex_unlock(ldv_func_arg1);
#line 4630
  return;
}
}
#line 4632 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_149(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4637
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4639
  mutex_lock(ldv_func_arg1);
#line 4640
  return;
}
}
#line 4642 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_150(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4647
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4649
  mutex_unlock(ldv_func_arg1);
#line 4650
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_182(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_183(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_181(struct mutex *ldv_func_arg1 ) ;
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[22U]  = 
#line 83
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT"};
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 114
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 126
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 150
  return ((unsigned int )s <= 21U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 155
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 160
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) 
{ 


  {
#line 165
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_181(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 175
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 177
  mutex_lock(ldv_func_arg1);
#line 178
  return;
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
int ldv_mutex_trylock_182(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 185
  tmp = mutex_trylock(ldv_func_arg1);
#line 185
  ldv_func_res = tmp;
#line 187
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 187
  return (tmp___0);
#line 189
  return (ldv_func_res);
}
}
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_183(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 197
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 199
  mutex_unlock(ldv_func_arg1);
#line 200
  return;
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 203 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 92 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 124
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 174 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 180
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 181
  __len = (size_t )len;
#line 181
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 184
  return;
}
}
#line 228 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 234
  tmp = __bitmap_equal(src1, src2, nbits);
#line 234
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 162 "include/linux/mutex.h"
int ldv_mutex_trylock_188(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_189(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_191(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_192(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_194(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_196(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_187(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_190(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_193(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_195(struct mutex *ldv_func_arg1 ) ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___2(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5915;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5915;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5915;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5915;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5915: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 70 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 74
extern void call_usermodehelper_setfns(struct subprocess_info * , int (*)(struct subprocess_info * ) ,
                                       void (*)(struct subprocess_info * ) , void * ) ;
#line 80
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 87 "include/linux/kmod.h"
__inline static int call_usermodehelper_fns(char *path , char **argv , char **envp ,
                                            enum umh_wait wait , int (*init)(struct subprocess_info * ) ,
                                            void (*cleanup)(struct subprocess_info * ) ,
                                            void *data ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 93
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 95
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 97
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 98
    return (-12);
  } else {

  }
#line 100
  call_usermodehelper_setfns(info, init, cleanup, data);
#line 102
  tmp = call_usermodehelper_exec(info, wait);
#line 102
  return (tmp);
}
}
#line 106 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  int tmp ;

  {
#line 108
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 108
  return (tmp);
}
}
#line 207 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 84 "include/trace/events/module.h"
__inline static void trace_module_get___0(struct module *mod , unsigned long ip ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 79
  tmp___1 = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 79
  if (tmp___1 != 0L) {
#line 79
    rcu_read_lock_sched_notrace();
#line 79
    tmp = debug_lockdep_rcu_enabled();
#line 79
    if (tmp != 0 && ! __warned) {
#line 79
      tmp___0 = rcu_read_lock_sched_held();
#line 79
      if (tmp___0 == 0) {
#line 79
        __warned = 1;
#line 79
        lockdep_rcu_dereference("include/trace/events/module.h", 84);
      } else {

      }
    } else {

    }
#line 79
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_module_get.funcs));
#line 79
    it_func_ptr = _________p1;
#line 79
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_11488: 
#line 79
      it_func = it_func_ptr->func;
#line 79
      __data = it_func_ptr->data;
#line 79
      (*((void (*)(void * , struct module * , unsigned long  ))it_func))(__data, mod,
                                                                         ip);
#line 79
      it_func_ptr = it_func_ptr + 1;
#line 79
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 80
        goto ldv_11488;
      } else {

      }

    } else {

    }
#line 79
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 81
  return;
}
}
#line 482 "include/linux/module.h"
__inline static int try_module_get___0(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 484
  ret = 1;
#line 486
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 489
    tmp = module_is_live(module);
#line 489
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 489
    if (tmp___0 != 0L) {
#line 490
      __vpp_verify = 0;
#line 490
      switch (4UL) {
      case 1UL: 
#line 490
      pao_ID__ = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11853;
      case 2UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11853;
      case 4UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11853;
      case 8UL: ;
#line 490
      if (pao_ID__ == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID__ == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11853;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11853: ;
#line 490
      goto ldv_11858;
      case 2UL: 
#line 490
      pao_ID_____0 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11864;
      case 2UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11864;
      case 4UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11864;
      case 8UL: ;
#line 490
      if (pao_ID_____0 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____0 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11864;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11864: ;
#line 490
      goto ldv_11858;
      case 4UL: 
#line 490
      pao_ID_____1 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11874;
      case 2UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11874;
      case 4UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11874;
      case 8UL: ;
#line 490
      if (pao_ID_____1 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____1 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11874;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11874: ;
#line 490
      goto ldv_11858;
      case 8UL: 
#line 490
      pao_ID_____2 = 1;
#line 490
      switch (4UL) {
      case 1UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 490
      goto ldv_11884;
      case 2UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11884;
      case 4UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 490
      goto ldv_11884;
      case 8UL: ;
#line 490
      if (pao_ID_____2 == 1) {
#line 490
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 490
      if (pao_ID_____2 == -1) {
#line 490
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 490
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 490
      goto ldv_11884;
      default: 
#line 490
      __bad_percpu_size();
      }
      ldv_11884: ;
#line 490
      goto ldv_11858;
      default: 
#line 490
      __bad_size_call_parameter();
#line 490
      goto ldv_11858;
      }
      ldv_11858: ;
#line 491
      trace_module_get___0(module, (unsigned long )((void *)0));
    } else {
#line 493
      ret = 0;
    }
  } else {

  }
#line 497
  return (ret);
}
}
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___5(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct tracepoint_func *_________p1 ;
  long tmp___1 ;

  {
#line 45
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp___1 != 0L) {
#line 45
    rcu_read_lock_sched_notrace();
#line 45
    tmp = debug_lockdep_rcu_enabled();
#line 45
    if (tmp != 0 && ! __warned) {
#line 45
      tmp___0 = rcu_read_lock_sched_held();
#line 45
      if (tmp___0 == 0) {
#line 45
        __warned = 1;
#line 45
        lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
      } else {

      }
    } else {

    }
#line 45
    _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
    it_func_ptr = _________p1;
#line 45
    if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
      ldv_13767: 
#line 45
      it_func = it_func_ptr->func;
#line 45
      __data = it_func_ptr->data;
#line 45
      (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  ,
                   gfp_t  ))it_func))(__data, call_site, ptr, bytes_req, bytes_alloc,
                                      gfp_flags);
#line 45
      it_func_ptr = it_func_ptr + 1;
#line 45
      if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
        goto ldv_13767;
      } else {

      }

    } else {

    }
#line 45
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___5(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___5((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___5(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___5(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___5((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___2(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___5(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 1928 "include/linux/fs.h"
extern struct file *filp_open(char const   * , int  , int  ) ;
#line 1994
extern int bd_claim(struct block_device * , void * ) ;
#line 137 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char * , void (*)(struct cn_msg * , struct netlink_skb_parms * ) ) ;
#line 138
extern void cn_del_callback(struct cb_id * ) ;
#line 139
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info___2();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info___2();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 349 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 69 "include/linux/highmem.h"
__inline static void *kmap_atomic___0(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 71
  pagefault_disable___0();
#line 72
  tmp = lowmem_page_address(page);
#line 72
  return (tmp);
}
}
#line 76 "include/linux/highmem.h"
__inline static void kunmap_atomic_notypecheck___0(void *addr , enum km_type idx ) 
{ 


  {
#line 78
  pagefault_enable___0();
#line 79
  return;
}
}
#line 848 "include/linux/blkdev.h"
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 849
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 853
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 862
extern int blk_stack_limits(struct queue_limits * , struct queue_limits * , sector_t  ) ;
#line 875
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 967 "include/linux/blkdev.h"
__inline static unsigned int queue_max_sectors(struct request_queue *q ) 
{ 


  {
#line 969
  return (q->limits.max_sectors);
}
}
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1802 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1805
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1809
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1809
  if (tmp___1 != 0UL) {
#line 1809
    __min1 = 34359738368UL;
#line 1809
    tmp___0 = drbd_md_first_sector(bdev);
#line 1809
    __min2 = tmp___0;
#line 1809
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1809
    s = 0UL;
  }
#line 1812
  goto ldv_43553;
  case -2: 
#line 1814
  __min1___0 = 34359738368UL;
#line 1814
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1814
  __min2___0 = tmp___2;
#line 1814
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1817
  __min1___1 = s;
#line 1817
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1817
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1820
  goto ldv_43553;
  default: 
#line 1822
  __min1___2 = 8587575296UL;
#line 1822
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1822
  __min2___2 = tmp___3;
#line 1822
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_43553: ;
#line 1825
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 75 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[71U]  = 
#line 75 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}};
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 97
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 98
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 101 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_44115;
  ldv_44114: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_44112;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_44112: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_44115: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_44114;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  unsigned short *tmp___5 ;
  u16 tmp___6 ;

  {
#line 20
  goto ldv_44176;
  ldv_44175: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_44144;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_44144;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_44144;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_44144;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_44144;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_44144;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44144;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44144;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44144;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_44144;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44144;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44144;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_44144: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_44176: 
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___6 = get_unaligned_le16((void const   *)tmp___5);
#line 20
  tag = (int )tmp___6;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_44175;
  } else {

  }

#line 20
  return (1);
}
}
#line 67
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 67 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  unsigned short *tmp___16 ;
  u16 tmp___17 ;

  {
#line 38
  goto ldv_44279;
  ldv_44278: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_44214;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_44214;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_44214;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_44214;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_44214;
  case 14: 
#line 38
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___1;
#line 38
  goto ldv_44214;
  case 15: 
#line 38
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___2;
#line 38
  goto ldv_44214;
  case 16: 
#line 38
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___3;
#line 38
  goto ldv_44214;
  case 17: 
#line 38
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___4;
#line 38
  goto ldv_44214;
  case 18: 
#line 38
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___5;
#line 38
  goto ldv_44214;
  case 19: 
#line 38
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___6;
#line 38
  goto ldv_44214;
  case 20: 
#line 38
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___7;
#line 38
  goto ldv_44214;
  case 21: 
#line 38
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___8;
#line 38
  goto ldv_44214;
  case 22: 
#line 38
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___9;
#line 38
  goto ldv_44214;
  case 24: 
#line 38
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___10;
#line 38
  goto ldv_44214;
  case 25: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___11;
#line 38
  goto ldv_44214;
  case 26: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___12;
#line 38
  goto ldv_44214;
  case 39: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___13;
#line 38
  goto ldv_44214;
  case 40: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___14;
#line 38
  goto ldv_44214;
  case 67: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___15;
#line 38
  goto ldv_44214;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44214;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44214;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44214;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44214;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44214;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44214;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44214;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_44214: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_44279: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___17 = get_unaligned_le16((void const   *)tmp___16);
#line 38
  tag = (int )tmp___17;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_44278;
  } else {

  }

#line 38
  return (1);
}
}
#line 75
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 75 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 71
  goto ldv_44313;
  ldv_44312: 
#line 71
  tmp = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 71
  dlen = (int )tmp___0;
#line 71
  switch (tag & 8191) {
  case 29: 
#line 71
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 71
  goto ldv_44308;
  case 68: 
#line 71
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_44308;
  case 69: 
#line 71
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_44308;
  default: ;
#line 71
  if ((tag & 8192) != 0) {
#line 71
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 71
    return (0);
  } else {

  }
  }
  ldv_44308: 
#line 71
  tags = tags + (unsigned long )dlen;
  ldv_44313: 
#line 71
  tmp___1 = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 71
  tag = (int )tmp___2;
#line 71
  if (tag != 0) {
#line 72
    goto ldv_44312;
  } else {

  }

#line 71
  return (1);
}
}
#line 90
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 90 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  unsigned short *tmp___4 ;
  u16 tmp___5 ;

  {
#line 77
  goto ldv_44363;
  ldv_44362: 
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 77
  dlen = (int )tmp___0;
#line 77
  switch (tag & 8191) {
  case 30: 
#line 77
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->rate = (int )tmp___1;
#line 77
  goto ldv_44327;
  case 31: 
#line 77
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->after = (int )tmp___2;
#line 77
  goto ldv_44327;
  case 32: 
#line 77
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->al_extents = (int )tmp___3;
#line 77
  goto ldv_44327;
  case 52: ;
#line 77
  if (dlen > 64) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->verify_alg_len = dlen;
#line 77
  __min1 = (size_t )dlen;
#line 77
  __min2 = 64UL;
#line 77
  __len = __min1 < __min2 ? __min1 : __min2;
#line 77
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 77
  goto ldv_44327;
  case 51: ;
#line 77
  if (dlen > 32) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->cpu_mask_len = dlen;
#line 77
  __min1___0 = (size_t )dlen;
#line 77
  __min2___0 = 32UL;
#line 77
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 77
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 77
  goto ldv_44327;
  case 64: ;
#line 77
  if (dlen > 64) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->csums_alg_len = dlen;
#line 77
  __min1___1 = (size_t )dlen;
#line 77
  __min2___1 = 64UL;
#line 77
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 77
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 77
  goto ldv_44327;
  case 65: 
#line 77
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 77
  goto ldv_44327;
  default: ;
#line 77
  if ((tag & 8192) != 0) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 77
    return (0);
  } else {

  }
  }
  ldv_44327: 
#line 77
  tags = tags + (unsigned long )dlen;
  ldv_44363: 
#line 77
  tmp___4 = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___5 = get_unaligned_le16((void const   *)tmp___4);
#line 77
  tag = (int )tmp___5;
#line 77
  if (tag != 0) {
#line 78
    goto ldv_44362;
  } else {

  }

#line 77
  return (1);
}
}
#line 134
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 134 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 132
  goto ldv_44662;
  ldv_44661: 
#line 132
  tmp = tags;
#line 132
  tags = tags + 1;
#line 132
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 132
  dlen = (int )tmp___0;
#line 132
  switch (tag & 8191) {
  case 66: 
#line 132
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 132
  goto ldv_44659;
  default: ;
#line 132
  if ((tag & 8192) != 0) {
#line 132
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 132
    return (0);
  } else {

  }
  }
  ldv_44659: 
#line 132
  tags = tags + (unsigned long )dlen;
  ldv_44662: 
#line 132
  tmp___1 = tags;
#line 132
  tags = tags + 1;
#line 132
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 132
  tag = (int )tmp___2;
#line 132
  if (tag != 0) {
#line 133
    goto ldv_44661;
  } else {

  }

#line 132
  return (1);
}
}
#line 138
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 138 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 136
  goto ldv_44679;
  ldv_44678: 
#line 136
  tmp = tags;
#line 136
  tags = tags + 1;
#line 136
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 136
  dlen = (int )tmp___0;
#line 136
  switch (tag & 8191) {
  case 63: 
#line 136
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 136
  goto ldv_44676;
  default: ;
#line 136
  if ((tag & 8192) != 0) {
#line 136
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 136
    return (0);
  } else {

  }
  }
  ldv_44676: 
#line 136
  tags = tags + (unsigned long )dlen;
  ldv_44679: 
#line 136
  tmp___1 = tags;
#line 136
  tags = tags + 1;
#line 136
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 136
  tag = (int )tmp___2;
#line 136
  if (tag != 0) {
#line 137
    goto ldv_44678;
  } else {

  }

#line 136
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_44724;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_44724;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_44724;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_44724;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44724;
  }
  ldv_44724: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_44731;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_44731;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_44731;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_44731;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44731;
  }
  ldv_44731: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_44738;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_44738;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_44738;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_44738;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44738;
  }
  ldv_44738: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_44745;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_44745;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_44745;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_44745;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44745;
  }
  ldv_44745: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_44752;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_44752;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_44752;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_44752;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44752;
  }
  ldv_44752: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_44762;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_44762;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_44762;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_44762;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44762;
  }
  ldv_44762: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_44769;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_44769;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_44769;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_44769;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44769;
  }
  ldv_44769: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_44779;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_44779;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_44779;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_44779;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44779;
  }
  ldv_44779: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_44786;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_44786;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_44786;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_44786;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44786;
  }
  ldv_44786: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_44793;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_44793;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_44793;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_44793;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44793;
  }
  ldv_44793: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_44800;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_44800;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_44800;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_44800;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44800;
  }
  ldv_44800: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_44807;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_44807;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_44807;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_44807;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44807;
  }
  ldv_44807: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_44814;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_44814;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_44814;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_44814;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44814;
  }
  ldv_44814: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_44821;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_44821;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_44821;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_44821;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44821;
  }
  ldv_44821: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_44828;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_44828;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_44828;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_44828;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44828;
  }
  ldv_44828: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_44835;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_44835;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_44835;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_44835;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44835;
  }
  ldv_44835: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_44842;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_44842;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_44842;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_44842;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44842;
  }
  ldv_44842: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_44849;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_44849;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_44849;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_44849;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44849;
  }
  ldv_44849: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_44856;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_44856;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_44856;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_44856;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44856;
  }
  ldv_44856: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_44863;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_44863;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_44863;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_44863;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44863;
  }
  ldv_44863: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_44870;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_44870;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_44870;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_44870;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44870;
  }
  ldv_44870: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_44877;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_44877;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_44877;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_44877;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44877;
  }
  ldv_44877: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_44884;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_44884;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_44884;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_44884;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44884;
  }
  ldv_44884: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_44891;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_44891;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_44891;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_44891;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44891;
  }
  ldv_44891: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_44898;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_44898;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_44898;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_44898;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44898;
  }
  ldv_44898: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_44905;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_44905;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_44905;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_44905;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44905;
  }
  ldv_44905: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_44912;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_44912;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_44912;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_44912;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44912;
  }
  ldv_44912: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_44919;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_44919;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_44919;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_44919;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44919;
  }
  ldv_44919: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_44926;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_44926;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_44926;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_44926;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_44926;
  }
  ldv_44926: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 67
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 67 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  unsigned short *tmp___41 ;
  void *__gu_p___57 ;
  unsigned short *tmp___42 ;
  void *__gu_p___58 ;
  unsigned short *tmp___43 ;
  void *__gu_p___59 ;
  unsigned short *tmp___44 ;
  void *__gu_p___60 ;
  unsigned short *tmp___45 ;
  void *__gu_p___61 ;
  unsigned short *tmp___46 ;
  void *__gu_p___62 ;
  unsigned short *tmp___47 ;
  void *__gu_p___63 ;
  unsigned short *tmp___48 ;
  void *__gu_p___64 ;
  unsigned short *tmp___49 ;
  void *__gu_p___65 ;
  unsigned short *tmp___50 ;
  void *__gu_p___66 ;
  unsigned short *tmp___51 ;
  void *__gu_p___67 ;
  unsigned short *tmp___52 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_44951;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_44951;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_44951;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_44951;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44951;
  }
  ldv_44951: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_44958;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_44958;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_44958;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_44958;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44958;
  }
  ldv_44958: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_44968;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_44968;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_44968;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_44968;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44968;
  }
  ldv_44968: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_44975;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_44975;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_44975;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_44975;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44975;
  }
  ldv_44975: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_44985;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_44985;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_44985;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_44985;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44985;
  }
  ldv_44985: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_44992;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_44992;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_44992;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_44992;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_44992;
  }
  ldv_44992: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_45002;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_45002;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_45002;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_45002;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45002;
  }
  ldv_45002: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_45009;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_45009;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_45009;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_45009;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45009;
  }
  ldv_45009: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_45019;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_45019;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_45019;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_45019;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45019;
  }
  ldv_45019: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_45026;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_45026;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_45026;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_45026;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45026;
  }
  ldv_45026: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_45036;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_45036;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_45036;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_45036;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45036;
  }
  ldv_45036: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_45043;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_45043;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_45043;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_45043;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45043;
  }
  ldv_45043: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_45050;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_45050;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_45050;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_45050;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45050;
  }
  ldv_45050: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_45057;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_45057;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_45057;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_45057;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45057;
  }
  ldv_45057: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_45064;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_45064;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_45064;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_45064;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45064;
  }
  ldv_45064: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_45071;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_45071;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_45071;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_45071;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45071;
  }
  ldv_45071: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_45078;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_45078;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_45078;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_45078;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45078;
  }
  ldv_45078: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_45085;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_45085;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_45085;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_45085;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45085;
  }
  ldv_45085: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_45092;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_45092;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_45092;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_45092;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45092;
  }
  ldv_45092: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_45099;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_45099;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_45099;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_45099;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45099;
  }
  ldv_45099: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_45106;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_45106;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_45106;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_45106;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45106;
  }
  ldv_45106: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_45113;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_45113;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_45113;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_45113;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45113;
  }
  ldv_45113: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_45120;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_45120;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_45120;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_45120;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45120;
  }
  ldv_45120: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_45127;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_45127;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_45127;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_45127;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45127;
  }
  ldv_45127: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_45134;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_45134;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_45134;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_45134;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45134;
  }
  ldv_45134: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_45141;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_45141;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_45141;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_45141;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45141;
  }
  ldv_45141: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_45148;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_45148;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_45148;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_45148;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45148;
  }
  ldv_45148: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_45155;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_45155;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_45155;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_45155;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45155;
  }
  ldv_45155: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_45162;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_45162;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_45162;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_45162;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45162;
  }
  ldv_45162: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_45169;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_45169;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_45169;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_45169;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45169;
  }
  ldv_45169: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_45176;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_45176;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_45176;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_45176;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45176;
  }
  ldv_45176: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_45183;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_45183;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_45183;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_45183;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45183;
  }
  ldv_45183: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_45190;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_45190;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_45190;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_45190;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45190;
  }
  ldv_45190: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_45197;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_45197;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_45197;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_45197;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45197;
  }
  ldv_45197: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_45204;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_45204;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_45204;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_45204;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45204;
  }
  ldv_45204: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_45211;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_45211;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_45211;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_45211;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45211;
  }
  ldv_45211: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_45218;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_45218;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_45218;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_45218;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45218;
  }
  ldv_45218: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_45225;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_45225;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_45225;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_45225;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45225;
  }
  ldv_45225: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_45232;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_45232;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_45232;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_45232;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45232;
  }
  ldv_45232: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_45239;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_45239;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_45239;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_45239;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45239;
  }
  ldv_45239: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_45246;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_45246;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_45246;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_45246;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45246;
  }
  ldv_45246: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_45253;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_45253;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_45253;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_45253;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45253;
  }
  ldv_45253: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_45260;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_45260;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_45260;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_45260;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45260;
  }
  ldv_45260: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_45267;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_45267;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_45267;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_45267;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45267;
  }
  ldv_45267: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_45274;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_45274;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_45274;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_45274;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45274;
  }
  ldv_45274: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_45281;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_45281;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_45281;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_45281;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45281;
  }
  ldv_45281: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_45288;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_45288;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_45288;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_45288;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45288;
  }
  ldv_45288: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_45295;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_45295;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_45295;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_45295;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45295;
  }
  ldv_45295: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_45302;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_45302;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_45302;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_45302;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45302;
  }
  ldv_45302: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_45309;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_45309;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_45309;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_45309;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45309;
  }
  ldv_45309: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_45316;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_45316;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_45316;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_45316;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45316;
  }
  ldv_45316: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_45323;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_45323;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_45323;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_45323;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45323;
  }
  ldv_45323: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_45330;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_45330;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_45330;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_45330;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45330;
  }
  ldv_45330: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_45337;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_45337;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_45337;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_45337;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45337;
  }
  ldv_45337: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_45344;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_45344;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_45344;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_45344;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45344;
  }
  ldv_45344: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 60U;
#line 38
  goto ldv_45351;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___54);
#line 38
  goto ldv_45351;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___54);
#line 38
  goto ldv_45351;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___54);
#line 38
  goto ldv_45351;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45351;
  }
  ldv_45351: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 1U;
#line 38
  goto ldv_45358;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___55);
#line 38
  goto ldv_45358;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___55);
#line 38
  goto ldv_45358;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___55);
#line 38
  goto ldv_45358;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45358;
  }
  ldv_45358: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___56 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = 27U;
#line 38
  goto ldv_45365;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___56);
#line 38
  goto ldv_45365;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___56);
#line 38
  goto ldv_45365;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___56);
#line 38
  goto ldv_45365;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45365;
  }
  ldv_45365: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 1U;
#line 38
  goto ldv_45372;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___57);
#line 38
  goto ldv_45372;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___57);
#line 38
  goto ldv_45372;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___57);
#line 38
  goto ldv_45372;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45372;
  }
  ldv_45372: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 28U;
#line 38
  goto ldv_45379;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___58);
#line 38
  goto ldv_45379;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___58);
#line 38
  goto ldv_45379;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___58);
#line 38
  goto ldv_45379;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45379;
  }
  ldv_45379: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___59 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = 1U;
#line 38
  goto ldv_45386;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___59);
#line 38
  goto ldv_45386;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___59);
#line 38
  goto ldv_45386;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___59);
#line 38
  goto ldv_45386;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45386;
  }
  ldv_45386: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 41U;
#line 38
  goto ldv_45393;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___60);
#line 38
  goto ldv_45393;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___60);
#line 38
  goto ldv_45393;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___60);
#line 38
  goto ldv_45393;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45393;
  }
  ldv_45393: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 1U;
#line 38
  goto ldv_45400;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___61);
#line 38
  goto ldv_45400;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___61);
#line 38
  goto ldv_45400;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___61);
#line 38
  goto ldv_45400;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45400;
  }
  ldv_45400: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___62 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = 61U;
#line 38
  goto ldv_45407;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___62);
#line 38
  goto ldv_45407;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___62);
#line 38
  goto ldv_45407;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___62);
#line 38
  goto ldv_45407;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45407;
  }
  ldv_45407: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 1U;
#line 38
  goto ldv_45414;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___63);
#line 38
  goto ldv_45414;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___63);
#line 38
  goto ldv_45414;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___63);
#line 38
  goto ldv_45414;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45414;
  }
  ldv_45414: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 62U;
#line 38
  goto ldv_45421;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___64);
#line 38
  goto ldv_45421;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___64);
#line 38
  goto ldv_45421;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___64);
#line 38
  goto ldv_45421;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45421;
  }
  ldv_45421: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 1U;
#line 38
  goto ldv_45428;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___65);
#line 38
  goto ldv_45428;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___65);
#line 38
  goto ldv_45428;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___65);
#line 38
  goto ldv_45428;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45428;
  }
  ldv_45428: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 70U;
#line 38
  goto ldv_45435;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___66);
#line 38
  goto ldv_45435;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___66);
#line 38
  goto ldv_45435;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___66);
#line 38
  goto ldv_45435;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45435;
  }
  ldv_45435: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 1U;
#line 38
  goto ldv_45442;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___67);
#line 38
  goto ldv_45442;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___67);
#line 38
  goto ldv_45442;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___67);
#line 38
  goto ldv_45442;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45442;
  }
  ldv_45442: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 90
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 90 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;

  {
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p = (void *)tmp;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p) = 30U;
#line 77
  goto ldv_45525;
  case 2UL: 
#line 77
  put_unaligned_le16(30, __gu_p);
#line 77
  goto ldv_45525;
  case 4UL: 
#line 77
  put_unaligned_le32(30U, __gu_p);
#line 77
  goto ldv_45525;
  case 8UL: 
#line 77
  put_unaligned_le64(30ULL, __gu_p);
#line 77
  goto ldv_45525;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45525;
  }
  ldv_45525: 
#line 77
  tmp___0 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___0 = (void *)tmp___0;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___0) = 4U;
#line 77
  goto ldv_45532;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___0);
#line 77
  goto ldv_45532;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___0);
#line 77
  goto ldv_45532;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___0);
#line 77
  goto ldv_45532;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45532;
  }
  ldv_45532: 
#line 77
  __gu_p___1 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 77
  goto ldv_45539;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 77
  goto ldv_45539;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 77
  goto ldv_45539;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 77
  goto ldv_45539;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45539;
  }
  ldv_45539: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___1 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___2 = (void *)tmp___1;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___2) = 31U;
#line 77
  goto ldv_45546;
  case 2UL: 
#line 77
  put_unaligned_le16(31, __gu_p___2);
#line 77
  goto ldv_45546;
  case 4UL: 
#line 77
  put_unaligned_le32(31U, __gu_p___2);
#line 77
  goto ldv_45546;
  case 8UL: 
#line 77
  put_unaligned_le64(31ULL, __gu_p___2);
#line 77
  goto ldv_45546;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45546;
  }
  ldv_45546: 
#line 77
  tmp___2 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___3 = (void *)tmp___2;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___3) = 4U;
#line 77
  goto ldv_45553;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___3);
#line 77
  goto ldv_45553;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___3);
#line 77
  goto ldv_45553;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___3);
#line 77
  goto ldv_45553;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45553;
  }
  ldv_45553: 
#line 77
  __gu_p___4 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 77
  goto ldv_45560;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 77
  goto ldv_45560;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 77
  goto ldv_45560;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 77
  goto ldv_45560;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45560;
  }
  ldv_45560: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___3 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___5 = (void *)tmp___3;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___5) = 32U;
#line 77
  goto ldv_45567;
  case 2UL: 
#line 77
  put_unaligned_le16(32, __gu_p___5);
#line 77
  goto ldv_45567;
  case 4UL: 
#line 77
  put_unaligned_le32(32U, __gu_p___5);
#line 77
  goto ldv_45567;
  case 8UL: 
#line 77
  put_unaligned_le64(32ULL, __gu_p___5);
#line 77
  goto ldv_45567;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45567;
  }
  ldv_45567: 
#line 77
  tmp___4 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___6 = (void *)tmp___4;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___6) = 4U;
#line 77
  goto ldv_45574;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___6);
#line 77
  goto ldv_45574;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___6);
#line 77
  goto ldv_45574;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___6);
#line 77
  goto ldv_45574;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45574;
  }
  ldv_45574: 
#line 77
  __gu_p___7 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 77
  goto ldv_45581;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 77
  goto ldv_45581;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_45581;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_45581;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45581;
  }
  ldv_45581: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___5 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___8 = (void *)tmp___5;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___8) = 52U;
#line 77
  goto ldv_45588;
  case 2UL: 
#line 77
  put_unaligned_le16(49204, __gu_p___8);
#line 77
  goto ldv_45588;
  case 4UL: 
#line 77
  put_unaligned_le32(49204U, __gu_p___8);
#line 77
  goto ldv_45588;
  case 8UL: 
#line 77
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 77
  goto ldv_45588;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45588;
  }
  ldv_45588: 
#line 77
  tmp___6 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___9 = (void *)tmp___6;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 77
  goto ldv_45595;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 77
  goto ldv_45595;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 77
  goto ldv_45595;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 77
  goto ldv_45595;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45595;
  }
  ldv_45595: 
#line 77
  __len = (size_t )arg->verify_alg_len;
#line 77
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 77
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 77
  tmp___7 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___10 = (void *)tmp___7;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___10) = 51U;
#line 77
  goto ldv_45605;
  case 2UL: 
#line 77
  put_unaligned_le16(49203, __gu_p___10);
#line 77
  goto ldv_45605;
  case 4UL: 
#line 77
  put_unaligned_le32(49203U, __gu_p___10);
#line 77
  goto ldv_45605;
  case 8UL: 
#line 77
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 77
  goto ldv_45605;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45605;
  }
  ldv_45605: 
#line 77
  tmp___8 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___11 = (void *)tmp___8;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 77
  goto ldv_45612;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 77
  goto ldv_45612;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 77
  goto ldv_45612;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 77
  goto ldv_45612;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45612;
  }
  ldv_45612: 
#line 77
  __len___0 = (size_t )arg->cpu_mask_len;
#line 77
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 77
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 77
  tmp___9 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___12 = (void *)tmp___9;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___12) = 64U;
#line 77
  goto ldv_45622;
  case 2UL: 
#line 77
  put_unaligned_le16(49216, __gu_p___12);
#line 77
  goto ldv_45622;
  case 4UL: 
#line 77
  put_unaligned_le32(49216U, __gu_p___12);
#line 77
  goto ldv_45622;
  case 8UL: 
#line 77
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 77
  goto ldv_45622;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45622;
  }
  ldv_45622: 
#line 77
  tmp___10 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___13 = (void *)tmp___10;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 77
  goto ldv_45629;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 77
  goto ldv_45629;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 77
  goto ldv_45629;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 77
  goto ldv_45629;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45629;
  }
  ldv_45629: 
#line 77
  __len___1 = (size_t )arg->csums_alg_len;
#line 77
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 77
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 77
  tmp___11 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___14 = (void *)tmp___11;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___14) = 65U;
#line 77
  goto ldv_45639;
  case 2UL: 
#line 77
  put_unaligned_le16(32833, __gu_p___14);
#line 77
  goto ldv_45639;
  case 4UL: 
#line 77
  put_unaligned_le32(32833U, __gu_p___14);
#line 77
  goto ldv_45639;
  case 8UL: 
#line 77
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 77
  goto ldv_45639;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45639;
  }
  ldv_45639: 
#line 77
  tmp___12 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___15 = (void *)tmp___12;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___15) = 1U;
#line 77
  goto ldv_45646;
  case 2UL: 
#line 77
  put_unaligned_le16(1, __gu_p___15);
#line 77
  goto ldv_45646;
  case 4UL: 
#line 77
  put_unaligned_le32(1U, __gu_p___15);
#line 77
  goto ldv_45646;
  case 8UL: 
#line 77
  put_unaligned_le64(1ULL, __gu_p___15);
#line 77
  goto ldv_45646;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_45646;
  }
  ldv_45646: 
#line 77
  *((char *)tags) = (char )arg->use_rle;
#line 77
  tags = tags + 1U;
#line 77
  return (tags);
}
}
#line 102
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 102 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 100
  tmp = tags;
#line 100
  tags = tags + 1;
#line 100
  __gu_p = (void *)tmp;
#line 100
  switch (2UL) {
  case 1UL: 
#line 100
  *((u8 *)__gu_p) = 33U;
#line 100
  goto ldv_45734;
  case 2UL: 
#line 100
  put_unaligned_le16(33, __gu_p);
#line 100
  goto ldv_45734;
  case 4UL: 
#line 100
  put_unaligned_le32(33U, __gu_p);
#line 100
  goto ldv_45734;
  case 8UL: 
#line 100
  put_unaligned_le64(33ULL, __gu_p);
#line 100
  goto ldv_45734;
  default: 
#line 100
  __bad_unaligned_access_size();
#line 100
  goto ldv_45734;
  }
  ldv_45734: 
#line 100
  tmp___0 = tags;
#line 100
  tags = tags + 1;
#line 100
  __gu_p___0 = (void *)tmp___0;
#line 100
  switch (2UL) {
  case 1UL: 
#line 100
  *((u8 *)__gu_p___0) = 4U;
#line 100
  goto ldv_45741;
  case 2UL: 
#line 100
  put_unaligned_le16(4, __gu_p___0);
#line 100
  goto ldv_45741;
  case 4UL: 
#line 100
  put_unaligned_le32(4U, __gu_p___0);
#line 100
  goto ldv_45741;
  case 8UL: 
#line 100
  put_unaligned_le64(4ULL, __gu_p___0);
#line 100
  goto ldv_45741;
  default: 
#line 100
  __bad_unaligned_access_size();
#line 100
  goto ldv_45741;
  }
  ldv_45741: 
#line 100
  __gu_p___1 = (void *)tags;
#line 100
  switch (4UL) {
  case 1UL: 
#line 100
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 100
  goto ldv_45748;
  case 2UL: 
#line 100
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 100
  goto ldv_45748;
  case 4UL: 
#line 100
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 100
  goto ldv_45748;
  case 8UL: 
#line 100
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 100
  goto ldv_45748;
  default: 
#line 100
  __bad_unaligned_access_size();
#line 100
  goto ldv_45748;
  }
  ldv_45748: 
#line 100
  tags = tags + 4U;
#line 100
  return (tags);
}
}
#line 186 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 187
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 191
  envp[0] = (char *)"HOME=/";
#line 191
  envp[1] = (char *)"TERM=linux";
#line 191
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 191
  envp[3] = 0;
#line 191
  envp[4] = 0;
#line 191
  envp[5] = 0;
#line 199
  argv[0] = (char *)(& usermode_helper);
#line 199
  argv[1] = cmd;
#line 199
  argv[2] = (char *)(& mb);
#line 199
  argv[3] = 0;
#line 202
  tmp = mdev_to_minor(mdev);
#line 202
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 204
  tmp___0 = get_net_conf(mdev);
#line 204
  if (tmp___0 != 0) {
#line 205
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 207
    afs = (char *)"ipv6";
#line 208
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 210
    goto ldv_46069;
    case 2: 
#line 212
    afs = (char *)"ipv4";
#line 213
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 215
    goto ldv_46069;
    default: 
#line 217
    afs = (char *)"ssocks";
#line 218
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_46069: 
#line 221
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 222
    envp[3] = (char *)(& af);
#line 223
    envp[4] = (char *)(& ad);
#line 224
    put_net_conf(mdev);
  } else {

  }
#line 227
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 229
  drbd_bcast_ev_helper(mdev, cmd);
#line 230
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 231
  if (ret != 0) {
#line 232
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 236
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 240
  if (ret < 0) {
#line 241
    ret = 0;
  } else {

  }
#line 243
  return (ret);
}
}
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 253
  if (*((unsigned int *)mdev + 455UL) != 49152U) {
#line 253
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            253);
  } else {

  }
#line 255
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 255
  if (tmp != 0) {
#line 256
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 257
    put_ldev(mdev);
  } else {
#line 259
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 260
    return ((enum drbd_disk_state )mdev->state.ldv_35202.pdsk);
  }
#line 263
  if ((unsigned int )fp == 2U) {
#line 264
    val.i = 0U;
#line 264
    val.ldv_35202.susp = 1U;
#line 264
    mask.i = 0U;
#line 264
    mask.ldv_35202.susp = 1U;
#line 264
    _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
  } else {

  }
#line 266
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 268
  switch ((r >> 8) & 255) {
  case 3: 
#line 270
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 271
  nps = D_INCONSISTENT;
#line 272
  goto ldv_46084;
  case 4: 
#line 274
  ex_to_string = (char *)"peer was fenced";
#line 275
  nps = D_OUTDATED;
#line 276
  goto ldv_46084;
  case 5: ;
#line 278
  if ((unsigned int )*((unsigned char *)mdev + 1821UL) == 16U) {
#line 280
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 281
    nps = D_OUTDATED;
  } else {
#line 283
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 284
    nps = (enum drbd_disk_state )mdev->state.ldv_35202.pdsk;
  }
#line 286
  goto ldv_46084;
  case 6: 
#line 290
  ex_to_string = (char *)"peer is active";
#line 291
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 292
  nps = D_UNKNOWN;
#line 293
  val___0.i = 0U;
#line 293
  val___0.ldv_35202.disk = 5U;
#line 293
  mask___0.i = 0U;
#line 293
  mask___0.ldv_35202.disk = 15U;
#line 293
  _drbd_request_state(mdev, mask___0, val___0, CS_WAIT_COMPLETE);
#line 294
  goto ldv_46084;
  case 7: ;
#line 296
  if ((unsigned int )fp != 2U) {
#line 297
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 298
  ex_to_string = (char *)"peer was stonithed";
#line 299
  nps = D_OUTDATED;
#line 300
  goto ldv_46084;
  default: 
#line 303
  nps = D_UNKNOWN;
#line 304
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 305
  return (nps);
  }
  ldv_46084: 
#line 308
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
#line 310
  return (nps);
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) 
{ 
  int max_tries ;
  int r ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 316
  max_tries = 4;
#line 317
  r = 0;
#line 318
  try = 0;
#line 319
  forced = 0;
#line 323
  if ((unsigned int )new_role == 1U) {
#line 324
    request_ping(mdev);
  } else {

  }
#line 326
  ldv_mutex_lock_193(& mdev->state_mutex);
#line 328
  mask.i = 0U;
#line 328
  mask.ldv_35202.role = 3U;
#line 329
  val.i = 0U;
#line 329
  val.ldv_35202.role = (unsigned char )new_role;
#line 331
  goto ldv_46106;
  ldv_46109: 
#line 332
  r = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 336
  if (r == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 337
    val.ldv_35202.pdsk = 0U;
#line 338
    mask.ldv_35202.pdsk = 0U;
#line 339
    goto ldv_46106;
  } else {

  }
#line 342
  if ((r == -2 && force != 0) && ((int )mdev->state.ldv_35202.disk <= 7 && (int )mdev->state.ldv_35202.disk > 3)) {
#line 345
    mask.ldv_35202.disk = 15U;
#line 346
    val.ldv_35202.disk = 8U;
#line 347
    forced = 1;
#line 348
    goto ldv_46106;
  } else {

  }
#line 351
  if ((r == -2 && (unsigned int )*((unsigned char *)mdev + 1821UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 353
    if (*((unsigned int *)mdev + 455UL) != 49152U) {
#line 353
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
              353);
    } else {

    }
#line 354
    nps = drbd_try_outdate_peer(mdev);
#line 356
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 357
      val.ldv_35202.disk = 8U;
#line 358
      mask.ldv_35202.disk = 15U;
    } else {

    }
#line 361
    val.ldv_35202.pdsk = (unsigned char )nps;
#line 362
    mask.ldv_35202.pdsk = 15U;
#line 364
    goto ldv_46106;
  } else {

  }
#line 367
  if (r == 2) {
#line 368
    goto fail;
  } else {

  }
#line 369
  if (r == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 370
    nps = drbd_try_outdate_peer(mdev);
#line 372
    if (force != 0 && (unsigned int )nps > 5U) {
#line 373
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 374
      nps = D_OUTDATED;
    } else {

    }
#line 377
    mask.ldv_35202.pdsk = 15U;
#line 378
    val.ldv_35202.pdsk = (unsigned char )nps;
#line 380
    goto ldv_46106;
  } else {

  }
#line 382
  if (r == -1) {
#line 385
    tmp = get_current();
#line 385
    tmp->state = 1L;
#line 386
    schedule_timeout((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 387
    if (try < max_tries) {
#line 388
      try = max_tries + -1;
    } else {

    }
#line 389
    goto ldv_46106;
  } else {

  }
#line 391
  if (r <= 0) {
#line 392
    r = _drbd_request_state(mdev, mask, val, 6);
#line 394
    if (r <= 0) {
#line 395
      goto fail;
    } else {

    }
  } else {

  }
#line 397
  goto ldv_46108;
  ldv_46106: 
#line 331
  tmp___0 = try;
#line 331
  try = try + 1;
#line 331
  if (tmp___0 < max_tries) {
#line 332
    goto ldv_46109;
  } else {

  }
  ldv_46108: ;
#line 400
  if (r <= 0) {
#line 401
    goto fail;
  } else {

  }
#line 403
  if (forced != 0) {
#line 404
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 407
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 407
  if (tmp___1 == 0) {
#line 407
    goto ldv_46110;
  } else {

  }
#line 407
  tmp___2 = get_current();
#line 407
  __wait.flags = 0U;
#line 407
  __wait.private = (void *)tmp___2;
#line 407
  __wait.func = & autoremove_wake_function;
#line 407
  __wait.task_list.next = & __wait.task_list;
#line 407
  __wait.task_list.prev = & __wait.task_list;
  ldv_46113: 
#line 407
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 407
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 407
  if (tmp___3 == 0) {
#line 407
    goto ldv_46112;
  } else {

  }
#line 407
  schedule();
#line 407
  goto ldv_46113;
  ldv_46112: 
#line 407
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46110: ;
#line 409
  if ((unsigned int )new_role == 2U) {
#line 410
    set_disk_ro(mdev->vdisk, 1);
#line 411
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 411
    if (tmp___4 != 0) {
#line 412
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 413
      put_ldev(mdev);
    } else {

    }
  } else {
#line 416
    tmp___5 = get_net_conf(mdev);
#line 416
    if (tmp___5 != 0) {
#line 417
      (mdev->net_conf)->want_lose = 0U;
#line 418
      put_net_conf(mdev);
    } else {

    }
#line 420
    set_disk_ro(mdev->vdisk, 0);
#line 421
    tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 421
    if (tmp___6 != 0) {
#line 422
      if ((((int )mdev->state.ldv_35202.conn <= 9 || (int )mdev->state.ldv_35202.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 425
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 427
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 428
      put_ldev(mdev);
    } else {

    }
  }
#line 432
  if ((unsigned int )new_role == 2U) {
#line 432
    tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 432
    if (tmp___7 != 0) {
#line 433
      drbd_al_to_on_disk_bm(mdev);
#line 434
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 437
  if ((int )mdev->state.ldv_35202.conn > 8) {
#line 439
    if (forced != 0) {
#line 440
      drbd_send_uuids(mdev);
    } else {

    }
#line 441
    drbd_send_state(mdev);
  } else {

  }
#line 444
  drbd_md_sync(mdev);
#line 446
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 448
  ldv_mutex_unlock_194(& mdev->state_mutex);
#line 449
  return (r);
}
}
#line 453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;

  {
#line 458
  memset((void *)(& primary_args), 0, 4UL);
#line 459
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 459
  if (tmp == 0) {
#line 460
    reply->ret_code = 126;
#line 461
    return (0);
  } else {

  }
#line 464
  reply->ret_code = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 467
  return (0);
}
}
#line 470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 


  {
#line 473
  reply->ret_code = drbd_set_role(mdev, R_SECONDARY, 0);
#line 475
  return (0);
}
}
#line 480 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 483
  md_size_sect = 0UL;
#line 484
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 487
  bdev->md.md_size_sect = 262144U;
#line 488
  tmp = drbd_md_ss__(mdev, bdev);
#line 488
  bdev->md.md_offset = (u64 )tmp;
#line 489
  bdev->md.al_offset = 8;
#line 490
  bdev->md.bm_offset = 72;
#line 491
  goto ldv_46131;
  case -2: 
#line 494
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 494
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 495
  bdev->md.md_offset = 0ULL;
#line 496
  bdev->md.al_offset = 8;
#line 497
  bdev->md.bm_offset = 72;
#line 498
  goto ldv_46131;
  case -1: ;
  case -3: 
#line 501
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 501
  bdev->md.md_offset = (u64 )tmp___1;
#line 503
  bdev->md.al_offset = -64;
#line 505
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 506
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 507
  md_size_sect = md_size_sect >> 15;
#line 508
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 512
  md_size_sect = md_size_sect + 72UL;
#line 514
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 516
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 517
  goto ldv_46131;
  }
  ldv_46131: ;
#line 520
  return;
}
}
#line 521 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 524
  units[0] = 75;
#line 524
  units[1] = 77;
#line 524
  units[2] = 71;
#line 524
  units[3] = 84;
#line 524
  units[4] = 80;
#line 524
  units[5] = 69;
#line 525
  base = 0;
#line 526
  goto ldv_46142;
  ldv_46141: 
#line 528
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 529
  base = base + 1;
  ldv_46142: ;
#line 526
  if (size > 9999ULL) {
#line 527
    goto ldv_46141;
  } else {

  }
#line 531
  sprintf(buf, "%lu %cB", (long )size, (int )units[base]);
#line 533
  return (buf);
}
}
#line 549 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 551
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 552
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 552
  if (tmp == 0) {
#line 552
    goto ldv_46147;
  } else {

  }
#line 552
  tmp___0 = get_current();
#line 552
  __wait.flags = 0U;
#line 552
  __wait.private = (void *)tmp___0;
#line 552
  __wait.func = & autoremove_wake_function;
#line 552
  __wait.task_list.next = & __wait.task_list;
#line 552
  __wait.task_list.prev = & __wait.task_list;
  ldv_46150: 
#line 552
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 552
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 552
  if (tmp___1 == 0) {
#line 552
    goto ldv_46149;
  } else {

  }
#line 552
  schedule();
#line 552
  goto ldv_46150;
  ldv_46149: 
#line 552
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46147: ;
#line 555
  return;
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 557
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 558
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 559
  return;
}
}
#line 568 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int tmp___8 ;

  {
#line 576
  rv = 0;
#line 587
  drbd_suspend_io(mdev);
#line 590
  tmp = lc_try_lock(mdev->act_log);
#line 590
  if (tmp != 0) {
#line 590
    goto ldv_46166;
  } else {

  }
#line 590
  tmp___0 = get_current();
#line 590
  __wait.flags = 0U;
#line 590
  __wait.private = (void *)tmp___0;
#line 590
  __wait.func = & autoremove_wake_function;
#line 590
  __wait.task_list.next = & __wait.task_list;
#line 590
  __wait.task_list.prev = & __wait.task_list;
  ldv_46169: 
#line 590
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 590
  tmp___1 = lc_try_lock(mdev->act_log);
#line 590
  if (tmp___1 != 0) {
#line 590
    goto ldv_46168;
  } else {

  }
#line 590
  schedule();
#line 590
  goto ldv_46169;
  ldv_46168: 
#line 590
  finish_wait(& mdev->al_wait, & __wait);
  ldv_46166: 
#line 592
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 593
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 594
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 597
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 599
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 601
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 601
  if (tmp___5 != size) {
#line 601
    goto _L;
  } else {
#line 601
    tmp___6 = drbd_bm_capacity(mdev);
#line 601
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 604
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 605
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 605
      if (tmp___3 != 0L) {
#line 607
        tmp___2 = drbd_bm_capacity(mdev);
#line 607
        size = tmp___2 >> 1;
#line 608
        if (size == 0UL) {
#line 609
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 612
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 616
        rv = dev_size_error;
      } else {

      }
#line 619
      drbd_set_my_capacity(mdev, size);
#line 620
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 621
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 621
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 624
  if ((int )rv == -1) {
#line 625
    goto out;
  } else {

  }
#line 627
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 629
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 629
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 632
  if (la_size_changed != 0 || md_moved != 0) {
#line 633
    drbd_al_shrink(mdev);
#line 634
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 637
    tmp___8 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed");
#line 637
    rv = (enum determine_dev_size )tmp___8;
#line 638
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 641
  if (size > la_size) {
#line 642
    rv = grew;
  } else {

  }
#line 643
  if (size < la_size) {
#line 644
    rv = shrunk;
  } else {

  }
  out: 
#line 646
  lc_unlock(mdev->act_log);
#line 647
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 648
  drbd_resume_io(mdev);
#line 650
  return (rv);
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 656
  p_size = mdev->p_size;
#line 657
  la_size = (sector_t )bdev->md.la_size_sect;
#line 659
  u_size = (sector_t )bdev->dc.disk_size;
#line 660
  size = 0UL;
#line 662
  m_size = drbd_get_max_capacity___1(bdev);
#line 664
  if ((int )mdev->state.ldv_35202.conn <= 9 && assume_peer_has_space != 0) {
#line 665
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 666
    p_size = m_size;
  } else {

  }
#line 669
  if (p_size != 0UL && m_size != 0UL) {
#line 670
    __min1 = p_size;
#line 670
    __min2 = m_size;
#line 670
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 672
  if (la_size != 0UL) {
#line 673
    size = la_size;
#line 674
    if (m_size != 0UL && m_size < size) {
#line 675
      size = m_size;
    } else {

    }
#line 676
    if (p_size != 0UL && p_size < size) {
#line 677
      size = p_size;
    } else {

    }
  } else {
#line 679
    if (m_size != 0UL) {
#line 680
      size = m_size;
    } else {

    }
#line 681
    if (p_size != 0UL) {
#line 682
      size = p_size;
    } else {

    }
  }
#line 686
  if (size == 0UL) {
#line 687
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 689
  if (u_size != 0UL) {
#line 690
    if (u_size > size) {
#line 691
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 694
      size = u_size;
    }
  } else {

  }
#line 697
  return (size);
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 715
  _b = mdev->sync_conf.al_extents <= 6;
#line 715
  if (_b != 0) {
#line 715
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            715);
  } else {

  }
#line 715
  if (_b != 0) {
#line 716
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 718
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 720
    return (0);
  } else {

  }
#line 722
  in_use = 0U;
#line 723
  t = mdev->act_log;
#line 724
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 727
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 728
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 729
    return (-12);
  } else {

  }
#line 731
  spin_lock_irq(& mdev->al_lock);
#line 732
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 733
    i = 0;
#line 733
    goto ldv_46197;
    ldv_46196: 
#line 734
    e = lc_element_by_index(t, (unsigned int )i);
#line 735
    if (e->refcnt != 0U) {
#line 736
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 738
    in_use = e->refcnt + in_use;
#line 733
    i = i + 1;
    ldv_46197: ;
#line 733
    if ((unsigned int )i < t->nr_elements) {
#line 734
      goto ldv_46196;
    } else {

    }

  } else {

  }
#line 741
  if (in_use == 0U) {
#line 742
    mdev->act_log = n;
  } else {

  }
#line 743
  spin_unlock_irq(& mdev->al_lock);
#line 744
  if (in_use != 0U) {
#line 745
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 746
    lc_destroy(n);
#line 747
    return (-16);
  } else
#line 749
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 750
    lc_destroy(t);
  } else {

  }
#line 752
  drbd_md_mark_dirty(mdev);
#line 753
  return (0);
}
}
#line 756 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) 
{ 
  struct request_queue *q ;
  struct request_queue *b ;
  int max_segments ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned short tmp___0 ;
  unsigned int _min2 ;
  unsigned int tmp___1 ;

  {
#line 758
  q = mdev->rq_queue;
#line 759
  b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 760
  max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 762
  tmp = queue_max_sectors(b);
#line 762
  tmp___0 = queue_logical_block_size(b);
#line 762
  _min1 = tmp * (unsigned int )tmp___0;
#line 762
  _min2 = max_seg_s;
#line 762
  max_seg_s = _min1 < _min2 ? _min1 : _min2;
#line 764
  blk_queue_max_hw_sectors(q, max_seg_s >> 9);
#line 765
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 766
  blk_queue_max_segment_size(q, max_seg_s);
#line 767
  blk_queue_logical_block_size(q, 512);
#line 768
  blk_queue_segment_boundary(q, 4095UL);
#line 769
  blk_stack_limits(& q->limits, & b->limits, 0UL);
#line 771
  if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 772
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Backing device\'s merge_bvec_fn() = %p\n",
             b->merge_bvec_fn);
  } else {

  }
#line 774
  tmp___1 = queue_max_segment_size(q);
#line 774
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max_segment_size ( = BIO size ) = %u\n",
            tmp___1);
#line 776
  if (q->backing_dev_info.ra_pages != b->backing_dev_info.ra_pages) {
#line 777
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
              q->backing_dev_info.ra_pages, b->backing_dev_info.ra_pages);
#line 780
    q->backing_dev_info.ra_pages = b->backing_dev_info.ra_pages;
  } else {

  }
#line 782
  return;
}
}
#line 790 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 792
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 792
  if (tmp == 0) {
#line 792
    goto ldv_46212;
  } else {

  }
#line 792
  tmp___0 = get_current();
#line 792
  __wait.flags = 0U;
#line 792
  __wait.private = (void *)tmp___0;
#line 792
  __wait.func = & autoremove_wake_function;
#line 792
  __wait.task_list.next = & __wait.task_list;
#line 792
  __wait.task_list.prev = & __wait.task_list;
  ldv_46215: 
#line 792
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 792
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 792
  if (tmp___1 == 0) {
#line 792
    goto ldv_46214;
  } else {

  }
#line 792
  schedule();
#line 792
  goto ldv_46215;
  ldv_46214: 
#line 792
  finish_wait(& mdev->state_wait, & __wait);
  ldv_46212: 
#line 793
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 793
  if (tmp___2 == 0) {
#line 793
    goto ldv_46216;
  } else {

  }
#line 793
  tmp___3 = get_current();
#line 793
  __wait___0.flags = 0U;
#line 793
  __wait___0.private = (void *)tmp___3;
#line 793
  __wait___0.func = & autoremove_wake_function;
#line 793
  __wait___0.task_list.next = & __wait___0.task_list;
#line 793
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_46219: 
#line 793
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 793
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 793
  if (tmp___4 == 0) {
#line 793
    goto ldv_46218;
  } else {

  }
#line 793
  schedule();
#line 793
  goto ldv_46219;
  ldv_46218: 
#line 793
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_46216: 
#line 794
  drbd_thread_start(& mdev->worker);
#line 795
  return;
}
}
#line 800 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 802
  spin_lock_irq(& mdev->req_lock);
#line 803
  if (((unsigned int )*((unsigned char *)mdev + 1821UL) == 0U && (unsigned int )*((unsigned short *)mdev + 910UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1820UL) == 2U) {
#line 806
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 807
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 809
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 810
  spin_unlock_irq(& mdev->req_lock);
#line 811
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 812
  return;
}
}
#line 816 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_codes retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct inode *inode ;
  struct inode *inode2 ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  int rv ;
  int cp_discovered ;
  int logical_block_size ;
  void *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  int tmp___12 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___15 ;
  int tmp___16 ;
  unsigned short tmp___17 ;
  struct page *page ;
  struct page *tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  sector_t tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 823
  nbc = 0;
#line 825
  resync_lru = 0;
#line 828
  cp_discovered = 0;
#line 831
  drbd_reconfig_start(mdev);
#line 834
  if ((int )mdev->state.ldv_35202.disk > 0) {
#line 835
    retcode = ERR_DISK_CONFIGURED;
#line 836
    goto fail;
  } else {

  }
#line 840
  tmp = kzalloc___2(408UL, 208U);
#line 840
  nbc = (struct drbd_backing_dev *)tmp;
#line 841
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 842
    retcode = ERR_NOMEM;
#line 843
    goto fail;
  } else {

  }
#line 846
  nbc->dc.disk_size = 0ULL;
#line 847
  nbc->dc.on_io_error = 0;
#line 848
  nbc->dc.fencing = 0;
#line 849
  nbc->dc.max_bio_bvecs = 0;
#line 851
  tmp___0 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 851
  if (tmp___0 == 0) {
#line 852
    retcode = ERR_MANDATORY_TAG;
#line 853
    goto fail;
  } else {

  }
#line 856
  if (nbc->dc.meta_dev_idx < -3) {
#line 857
    retcode = ERR_MD_IDX_INVALID;
#line 858
    goto fail;
  } else {

  }
#line 861
  nbc->lo_file = filp_open((char const   *)(& nbc->dc.backing_dev), 2, 0);
#line 862
  tmp___2 = IS_ERR((void const   *)nbc->lo_file);
#line 862
  if (tmp___2 != 0L) {
#line 863
    tmp___1 = PTR_ERR((void const   *)nbc->lo_file);
#line 863
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___1);
#line 865
    nbc->lo_file = 0;
#line 866
    retcode = ERR_OPEN_DISK;
#line 867
    goto fail;
  } else {

  }
#line 870
  inode = ((nbc->lo_file)->f_path.dentry)->d_inode;
#line 872
  if (((int )inode->i_mode & 61440) != 24576) {
#line 873
    retcode = ERR_DISK_NOT_BDEV;
#line 874
    goto fail;
  } else {

  }
#line 877
  nbc->md_file = filp_open((char const   *)(& nbc->dc.meta_dev), 2, 0);
#line 878
  tmp___4 = IS_ERR((void const   *)nbc->md_file);
#line 878
  if (tmp___4 != 0L) {
#line 879
    tmp___3 = PTR_ERR((void const   *)nbc->md_file);
#line 879
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___3);
#line 881
    nbc->md_file = 0;
#line 882
    retcode = ERR_OPEN_MD_DISK;
#line 883
    goto fail;
  } else {

  }
#line 886
  inode2 = ((nbc->md_file)->f_path.dentry)->d_inode;
#line 888
  if (((int )inode2->i_mode & 61440) != 24576) {
#line 889
    retcode = ERR_MD_NOT_BDEV;
#line 890
    goto fail;
  } else {

  }
#line 893
  nbc->backing_bdev = inode->ldv_23135.i_bdev;
#line 894
  tmp___5 = bd_claim(nbc->backing_bdev, (void *)mdev);
#line 894
  if (tmp___5 != 0) {
#line 895
    printk("<3>drbd: bd_claim(%p,%p); failed [%p;%p;%u]\n", nbc->backing_bdev, mdev,
           (nbc->backing_bdev)->bd_holder, ((nbc->backing_bdev)->bd_contains)->bd_holder,
           (nbc->backing_bdev)->bd_holders);
#line 900
    retcode = ERR_BDCLAIM_DISK;
#line 901
    goto fail;
  } else {

  }
#line 904
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 907
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 908
    retcode = ERR_NOMEM;
#line 909
    goto release_bdev_fail;
  } else {

  }
#line 919
  nbc->md_bdev = inode2->ldv_23135.i_bdev;
#line 920
  tmp___6 = bd_claim(nbc->md_bdev, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 920
  if (tmp___6 != 0) {
#line 922
    retcode = ERR_BDCLAIM_MD_DISK;
#line 923
    goto release_bdev_fail;
  } else {

  }
#line 926
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 929
    retcode = ERR_MD_IDX_INVALID;
#line 930
    goto release_bdev2_fail;
  } else {

  }
#line 934
  drbd_md_set_sector_offsets(mdev, nbc);
#line 936
  tmp___8 = drbd_get_max_capacity___1(nbc);
#line 936
  if ((unsigned long long )tmp___8 < nbc->dc.disk_size) {
#line 937
    tmp___7 = drbd_get_max_capacity___1(nbc);
#line 937
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___7, nbc->dc.disk_size);
#line 940
    retcode = ERR_DISK_TO_SMALL;
#line 941
    goto release_bdev2_fail;
  } else {

  }
#line 944
  if (nbc->dc.meta_dev_idx < 0) {
#line 945
    max_possible_sectors = 34359738368UL;
#line 947
    min_md_device_sectors = 2048UL;
  } else {
#line 949
    max_possible_sectors = 8587575296UL;
#line 950
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 953
  tmp___9 = drbd_get_capacity(nbc->md_bdev);
#line 953
  if (tmp___9 < min_md_device_sectors) {
#line 954
    retcode = ERR_MD_DISK_TO_SMALL;
#line 955
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 958
    goto release_bdev2_fail;
  } else {

  }
#line 963
  tmp___10 = drbd_get_max_capacity___1(nbc);
#line 963
  tmp___11 = drbd_get_capacity(mdev->this_bdev);
#line 963
  if (tmp___10 < tmp___11) {
#line 965
    retcode = ERR_DISK_TO_SMALL;
#line 966
    goto release_bdev2_fail;
  } else {

  }
#line 969
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 971
  if (nbc->known_size > max_possible_sectors) {
#line 972
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 975
    if (nbc->dc.meta_dev_idx >= 0) {
#line 976
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 980
  drbd_suspend_io(mdev);
#line 982
  tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 982
  if (tmp___12 == 0) {
#line 982
    goto ldv_46244;
  } else {

  }
#line 982
  tmp___13 = get_current();
#line 982
  __wait.flags = 0U;
#line 982
  __wait.private = (void *)tmp___13;
#line 982
  __wait.func = & autoremove_wake_function;
#line 982
  __wait.task_list.next = & __wait.task_list;
#line 982
  __wait.task_list.prev = & __wait.task_list;
  ldv_46247: 
#line 982
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 982
  tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 982
  if (tmp___14 == 0) {
#line 982
    goto ldv_46246;
  } else {

  }
#line 982
  schedule();
#line 982
  goto ldv_46247;
  ldv_46246: 
#line 982
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46244: 
#line 984
  drbd_flush_workqueue(mdev);
#line 986
  val.i = 0U;
#line 986
  val.ldv_35202.disk = 1U;
#line 986
  mask.i = 0U;
#line 986
  mask.ldv_35202.disk = 15U;
#line 986
  tmp___15 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 986
  retcode = (enum drbd_ret_codes )tmp___15;
#line 987
  drbd_resume_io(mdev);
#line 988
  if ((unsigned int )retcode == 0U) {
#line 989
    goto release_bdev2_fail;
  } else {

  }
#line 991
  tmp___16 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 991
  if (tmp___16 == 0) {
#line 992
    goto force_diskless;
  } else {

  }
#line 994
  drbd_md_set_sector_offsets(mdev, nbc);
#line 997
  tmp___17 = bdev_logical_block_size(nbc->md_bdev);
#line 997
  logical_block_size = (int )tmp___17;
#line 998
  if (logical_block_size == 0) {
#line 999
    logical_block_size = 512;
  } else {

  }
#line 1001
  if (logical_block_size != 512) {
#line 1002
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1003
      tmp___18 = alloc_pages(16U, 0U);
#line 1003
      page = tmp___18;
#line 1004
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1005
        goto force_diskless_dec;
      } else {

      }
#line 1007
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1009
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1011
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1015
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1016
    tmp___19 = drbd_bm_init(mdev);
#line 1016
    if (tmp___19 != 0) {
#line 1017
      retcode = ERR_NOMEM;
#line 1018
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1022
  tmp___20 = drbd_md_read(mdev, nbc);
#line 1022
  retcode = (enum drbd_ret_codes )tmp___20;
#line 1023
  if ((unsigned int )retcode != 101U) {
#line 1024
    goto force_diskless_dec;
  } else {

  }
#line 1026
  if (((int )mdev->state.ldv_35202.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1029
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1031
    retcode = ERR_DATA_NOT_CURRENT;
#line 1032
    goto force_diskless_dec;
  } else {

  }
#line 1036
  tmp___21 = drbd_check_al_size(mdev);
#line 1036
  if (tmp___21 != 0) {
#line 1037
    retcode = ERR_NOMEM;
#line 1038
    goto force_diskless_dec;
  } else {

  }
#line 1042
  tmp___22 = drbd_md_test_flag(nbc, 1);
#line 1042
  if (tmp___22 != 0) {
#line 1042
    tmp___23 = drbd_new_dev_size(mdev, nbc, 0);
#line 1042
    if ((unsigned long long )tmp___23 < nbc->md.la_size_sect) {
#line 1044
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1045
      retcode = ERR_DISK_TO_SMALL;
#line 1046
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1049
  tmp___24 = drbd_al_read_log(mdev, nbc);
#line 1049
  if (tmp___24 == 0) {
#line 1050
    retcode = ERR_IO_MD_DISK;
#line 1051
    goto force_diskless_dec;
  } else {

  }
#line 1056
  if ((unsigned int )*((unsigned char *)nbc + 388UL) != 0U) {
#line 1057
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1059
    clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1065
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1065
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1065);
  } else {

  }
#line 1066
  mdev->ldev = nbc;
#line 1067
  mdev->resync = resync_lru;
#line 1068
  nbc = 0;
#line 1069
  resync_lru = 0;
#line 1071
  mdev->write_ordering = WO_bio_barrier;
#line 1072
  drbd_bump_write_ordering(mdev, WO_bio_barrier);
#line 1074
  tmp___25 = drbd_md_test_flag(mdev->ldev, 64);
#line 1074
  if (tmp___25 != 0) {
#line 1075
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1077
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1079
  tmp___26 = drbd_md_test_flag(mdev->ldev, 2);
#line 1079
  if (tmp___26 != 0) {
#line 1080
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1081
    cp_discovered = 1;
  } else {

  }
#line 1084
  mdev->send_cnt = 0U;
#line 1085
  mdev->recv_cnt = 0U;
#line 1086
  mdev->read_cnt = 0U;
#line 1087
  mdev->writ_cnt = 0U;
#line 1089
  drbd_setup_queue_param(mdev, 32768U);
#line 1105
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1106
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) != 1U) {
#line 1106
    tmp___27 = drbd_md_test_flag(mdev->ldev, 2);
#line 1106
    if (tmp___27 != 0) {
#line 1106
      tmp___28 = drbd_md_test_flag(mdev->ldev, 4);
#line 1106
      if (tmp___28 == 0) {
#line 1109
        set_bit(8U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1111
  dd = drbd_determin_dev_size(mdev, 0);
#line 1112
  if ((int )dd == -1) {
#line 1113
    retcode = ERR_NOMEM_BITMAP;
#line 1114
    goto force_diskless_dec;
  } else
#line 1115
  if ((int )dd == 2) {
#line 1116
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1118
  tmp___31 = drbd_md_test_flag(mdev->ldev, 8);
#line 1118
  if (tmp___31 != 0) {
#line 1119
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1121
    tmp___29 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching");
#line 1121
    if (tmp___29 != 0) {
#line 1122
      retcode = ERR_IO_MD_DISK;
#line 1123
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1126
    tmp___30 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching");
#line 1126
    if (tmp___30 < 0) {
#line 1127
      retcode = ERR_IO_MD_DISK;
#line 1128
      goto force_diskless_dec;
    } else {

    }
  }
#line 1132
  if (cp_discovered != 0) {
#line 1133
    drbd_al_apply_to_bm(mdev);
#line 1134
    drbd_al_to_on_disk_bm(mdev);
  } else {

  }
#line 1137
  spin_lock_irq(& mdev->req_lock);
#line 1138
  os = mdev->state;
#line 1139
  ns.i = os.i;
#line 1145
  tmp___33 = drbd_md_test_flag(mdev->ldev, 1);
#line 1145
  if (tmp___33 != 0) {
#line 1146
    tmp___32 = drbd_md_test_flag(mdev->ldev, 16);
#line 1146
    if (tmp___32 != 0) {
#line 1147
      ns.ldv_35202.disk = 7U;
    } else {
#line 1149
      ns.ldv_35202.disk = 5U;
    }
  } else {
#line 1151
    ns.ldv_35202.disk = 4U;
  }
#line 1154
  tmp___34 = drbd_md_test_flag(mdev->ldev, 32);
#line 1154
  if (tmp___34 != 0) {
#line 1155
    ns.ldv_35202.pdsk = 5U;
  } else {

  }
#line 1157
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1159
    ns.ldv_35202.disk = 8U;
  } else {

  }
#line 1168
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 160U) {
#line 1169
    mdev->new_state_tmp.i = ns.i;
#line 1170
    ns.i = os.i;
#line 1171
    ns.ldv_35202.disk = 3U;
#line 1176
    kfree((void const   *)mdev->p_uuid);
#line 1177
    mdev->p_uuid = 0;
  } else {

  }
#line 1180
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1181
  ns = mdev->state;
#line 1182
  spin_unlock_irq(& mdev->req_lock);
#line 1184
  if (rv <= 0) {
#line 1185
    goto force_diskless_dec;
  } else {

  }
#line 1187
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U) {
#line 1188
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1190
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1192
  drbd_md_mark_dirty(mdev);
#line 1193
  drbd_md_sync(mdev);
#line 1195
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1196
  put_ldev(mdev);
#line 1197
  reply->ret_code = (int )retcode;
#line 1198
  drbd_reconfig_done(mdev);
#line 1199
  return (0);
  force_diskless_dec: 
#line 1202
  put_ldev(mdev);
  force_diskless: 
#line 1204
  val___0.i = 0U;
#line 1204
  val___0.ldv_35202.disk = 0U;
#line 1204
  mask___0.i = 0U;
#line 1204
  mask___0.ldv_35202.disk = 15U;
#line 1204
  drbd_force_state(mdev, mask___0, val___0);
#line 1205
  drbd_md_sync(mdev);
  release_bdev2_fail: ;
#line 1207
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1208
    bd_release(nbc->md_bdev);
  } else {

  }
  release_bdev_fail: ;
#line 1210
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1211
    bd_release(nbc->backing_bdev);
  } else {

  }
  fail: ;
#line 1213
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1214
    if ((unsigned long )nbc->lo_file != (unsigned long )((struct file *)0)) {
#line 1215
      fput(nbc->lo_file);
    } else {

    }
#line 1216
    if ((unsigned long )nbc->md_file != (unsigned long )((struct file *)0)) {
#line 1217
      fput(nbc->md_file);
    } else {

    }
#line 1218
    kfree((void const   *)nbc);
  } else {

  }
#line 1220
  lc_destroy(resync_lru);
#line 1222
  reply->ret_code = (int )retcode;
#line 1223
  drbd_reconfig_done(mdev);
#line 1224
  return (0);
}
}
#line 1227 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1230
  val.i = 0U;
#line 1230
  val.ldv_35202.disk = 0U;
#line 1230
  mask.i = 0U;
#line 1230
  mask.ldv_35202.disk = 15U;
#line 1230
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1231
  return (0);
}
}
#line 1234 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_codes retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  struct crypto_tfm *tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  unsigned int tmp___13 ;
  int tmp___14 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___15 ;

  {
#line 1239
  new_conf = 0;
#line 1240
  tfm = 0;
#line 1241
  integrity_w_tfm = 0;
#line 1242
  integrity_r_tfm = 0;
#line 1243
  new_tl_hash = 0;
#line 1244
  new_ee_hash = 0;
#line 1247
  int_dig_out = 0;
#line 1248
  int_dig_in = 0;
#line 1249
  int_dig_vv = 0;
#line 1252
  drbd_reconfig_start(mdev);
#line 1254
  if ((int )mdev->state.ldv_35202.conn > 0) {
#line 1255
    retcode = ERR_NET_CONFIGURED;
#line 1256
    goto fail;
  } else {

  }
#line 1260
  tmp = kzalloc___2(532UL, 208U);
#line 1260
  new_conf = (struct net_conf *)tmp;
#line 1261
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1262
    retcode = ERR_NOMEM;
#line 1263
    goto fail;
  } else {

  }
#line 1266
  new_conf->timeout = 60;
#line 1267
  new_conf->try_connect_int = 10;
#line 1268
  new_conf->ping_int = 10;
#line 1269
  new_conf->max_epoch_size = 2048;
#line 1270
  new_conf->max_buffers = 2048;
#line 1271
  new_conf->unplug_watermark = 128;
#line 1272
  new_conf->sndbuf_size = 0;
#line 1273
  new_conf->rcvbuf_size = 0;
#line 1274
  new_conf->ko_count = 0;
#line 1275
  new_conf->after_sb_0p = 0;
#line 1276
  new_conf->after_sb_1p = 0;
#line 1277
  new_conf->after_sb_2p = 0;
#line 1278
  new_conf->want_lose = 0U;
#line 1279
  new_conf->two_primaries = 0U;
#line 1280
  new_conf->wire_protocol = 3;
#line 1281
  new_conf->ping_timeo = 5;
#line 1282
  new_conf->rr_conflict = 0;
#line 1284
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1284
  if (tmp___0 == 0) {
#line 1285
    retcode = ERR_MANDATORY_TAG;
#line 1286
    goto fail;
  } else {

  }
#line 1289
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && new_conf->wire_protocol != 3) {
#line 1291
    retcode = ERR_NOT_PROTO_C;
#line 1292
    goto fail;
  } else {

  }
#line 1295
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 528UL) != 0U) {
#line 1296
    retcode = ERR_DISCARD;
#line 1297
    goto fail;
  } else {

  }
#line 1300
  retcode = NO_ERROR;
#line 1302
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1303
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1304
  i = 0;
#line 1304
  goto ldv_46293;
  ldv_46292: 
#line 1305
  odev = minor_to_mdev((unsigned int )i);
#line 1306
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1307
    goto ldv_46291;
  } else {

  }
#line 1308
  tmp___3 = get_net_conf(odev);
#line 1308
  if (tmp___3 != 0) {
#line 1309
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1310
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1310
      tmp___1 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1310
      if (tmp___1 == 0) {
#line 1312
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1314
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1315
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1315
      tmp___2 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1315
      if (tmp___2 == 0) {
#line 1317
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1319
    put_net_conf(odev);
#line 1320
    if ((unsigned int )retcode != 101U) {
#line 1321
      goto fail;
    } else {

    }
  } else {

  }
  ldv_46291: 
#line 1304
  i = i + 1;
  ldv_46293: ;
#line 1304
  if ((unsigned int )i < minor_count) {
#line 1305
    goto ldv_46292;
  } else {

  }

#line 1325
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1326
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1328
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1329
    tmp___4 = IS_ERR((void const   *)tfm);
#line 1329
    if (tmp___4 != 0L) {
#line 1330
      tfm = 0;
#line 1331
      retcode = ERR_AUTH_ALG;
#line 1332
      goto fail;
    } else {

    }
#line 1335
    tmp___5 = crypto_hash_tfm(tfm);
#line 1335
    tmp___6 = drbd_crypto_is_hash(tmp___5);
#line 1335
    if (tmp___6 == 0) {
#line 1336
      retcode = ERR_AUTH_ALG_ND;
#line 1337
      goto fail;
    } else {

    }
  } else {

  }
#line 1341
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1342
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1343
    tmp___7 = IS_ERR((void const   *)integrity_w_tfm);
#line 1343
    if (tmp___7 != 0L) {
#line 1344
      integrity_w_tfm = 0;
#line 1345
      retcode = ERR_INTEGRITY_ALG;
#line 1346
      goto fail;
    } else {

    }
#line 1349
    tmp___8 = crypto_hash_tfm(integrity_w_tfm);
#line 1349
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1349
    if (tmp___9 == 0) {
#line 1350
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1351
      goto fail;
    } else {

    }
#line 1354
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1355
    tmp___10 = IS_ERR((void const   *)integrity_r_tfm);
#line 1355
    if (tmp___10 != 0L) {
#line 1356
      integrity_r_tfm = 0;
#line 1357
      retcode = ERR_INTEGRITY_ALG;
#line 1358
      goto fail;
    } else {

    }
  } else {

  }
#line 1362
  ns = new_conf->max_epoch_size / 8;
#line 1363
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1364
    tmp___11 = kzalloc___2((unsigned long )ns * 8UL, 208U);
#line 1364
    new_tl_hash = (struct hlist_head *)tmp___11;
#line 1365
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1366
      retcode = ERR_NOMEM;
#line 1367
      goto fail;
    } else {

    }
  } else {

  }
#line 1371
  ns = new_conf->max_buffers / 8;
#line 1372
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1373
    tmp___12 = kzalloc___2((unsigned long )ns * 8UL, 208U);
#line 1373
    new_ee_hash = (struct hlist_head *)tmp___12;
#line 1374
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1375
      retcode = ERR_NOMEM;
#line 1376
      goto fail;
    } else {

    }
  } else {

  }
#line 1380
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1382
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1383
    tmp___13 = crypto_hash_digestsize(integrity_w_tfm);
#line 1383
    i = (int )tmp___13;
#line 1384
    int_dig_out = kmalloc___5((size_t )i, 208U);
#line 1385
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1386
      retcode = ERR_NOMEM;
#line 1387
      goto fail;
    } else {

    }
#line 1389
    int_dig_in = kmalloc___5((size_t )i, 208U);
#line 1390
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1391
      retcode = ERR_NOMEM;
#line 1392
      goto fail;
    } else {

    }
#line 1394
    int_dig_vv = kmalloc___5((size_t )i, 208U);
#line 1395
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1396
      retcode = ERR_NOMEM;
#line 1397
      goto fail;
    } else {

    }
  } else {

  }
#line 1401
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1402
    tmp___14 = drbd_bm_init(mdev);
#line 1402
    if (tmp___14 != 0) {
#line 1403
      retcode = ERR_NOMEM;
#line 1404
      goto fail;
    } else {

    }
  } else {

  }
#line 1408
  spin_lock_irq(& mdev->req_lock);
#line 1409
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1410
    retcode = ERR_NET_CONFIGURED;
#line 1411
    spin_unlock_irq(& mdev->req_lock);
#line 1412
    goto fail;
  } else {

  }
#line 1414
  mdev->net_conf = new_conf;
#line 1416
  mdev->send_cnt = 0U;
#line 1417
  mdev->recv_cnt = 0U;
#line 1419
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1420
    kfree((void const   *)mdev->tl_hash);
#line 1421
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1422
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1425
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1426
    kfree((void const   *)mdev->ee_hash);
#line 1427
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1428
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1431
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1432
  mdev->cram_hmac_tfm = tfm;
#line 1434
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1435
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1437
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1438
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1440
  kfree((void const   *)mdev->int_dig_out);
#line 1441
  kfree((void const   *)mdev->int_dig_in);
#line 1442
  kfree((void const   *)mdev->int_dig_vv);
#line 1443
  mdev->int_dig_out = int_dig_out;
#line 1444
  mdev->int_dig_in = int_dig_in;
#line 1445
  mdev->int_dig_vv = int_dig_vv;
#line 1446
  spin_unlock_irq(& mdev->req_lock);
#line 1448
  val.i = 0U;
#line 1448
  val.ldv_35202.conn = 2U;
#line 1448
  mask.i = 0U;
#line 1448
  mask.ldv_35202.conn = 31U;
#line 1448
  tmp___15 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1448
  retcode = (enum drbd_ret_codes )tmp___15;
#line 1450
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1451
  reply->ret_code = (int )retcode;
#line 1452
  drbd_reconfig_done(mdev);
#line 1453
  return (0);
  fail: 
#line 1456
  kfree((void const   *)int_dig_out);
#line 1457
  kfree((void const   *)int_dig_in);
#line 1458
  kfree((void const   *)int_dig_vv);
#line 1459
  crypto_free_hash(tfm);
#line 1460
  crypto_free_hash(integrity_w_tfm);
#line 1461
  crypto_free_hash(integrity_r_tfm);
#line 1462
  kfree((void const   *)new_tl_hash);
#line 1463
  kfree((void const   *)new_ee_hash);
#line 1464
  kfree((void const   *)new_conf);
#line 1466
  reply->ret_code = (int )retcode;
#line 1467
  drbd_reconfig_done(mdev);
#line 1468
  return (0);
}
}
#line 1471 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1476
  val.i = 0U;
#line 1476
  val.ldv_35202.conn = 1U;
#line 1476
  mask.i = 0U;
#line 1476
  mask.ldv_35202.conn = 31U;
#line 1476
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1478
  if (retcode == 2) {
#line 1479
    goto done;
  } else
#line 1480
  if (retcode == -9) {
#line 1481
    goto done;
  } else
#line 1482
  if (retcode == -7) {
#line 1485
    val___0.i = 0U;
#line 1485
    val___0.ldv_35202.conn = 1U;
#line 1485
    val___0.ldv_35202.pdsk = 5U;
#line 1484
    mask___0.i = 0U;
#line 1484
    mask___0.ldv_35202.conn = 31U;
#line 1485
    mask___0.ldv_35202.pdsk = 15U;
#line 1485
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1486
  if (retcode == -10) {
#line 1489
    val___1.i = 0U;
#line 1489
    val___1.ldv_35202.conn = 1U;
#line 1489
    val___1.ldv_35202.disk = 5U;
#line 1488
    mask___1.i = 0U;
#line 1488
    mask___1.ldv_35202.conn = 31U;
#line 1489
    mask___1.ldv_35202.disk = 15U;
#line 1489
    retcode = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1491
    if (retcode == -11 || retcode == -16) {
#line 1492
      val___2.i = 0U;
#line 1492
      val___2.ldv_35202.conn = 1U;
#line 1492
      mask___2.i = 0U;
#line 1492
      mask___2.ldv_35202.conn = 31U;
#line 1492
      drbd_force_state(mdev, mask___2, val___2);
#line 1493
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1497
  if (retcode <= 0) {
#line 1498
    goto fail;
  } else {

  }
#line 1500
  __ret = 0;
#line 1500
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 16U) {
#line 1500
    tmp = get_current();
#line 1500
    __wait.flags = 0U;
#line 1500
    __wait.private = (void *)tmp;
#line 1500
    __wait.func = & autoremove_wake_function;
#line 1500
    __wait.task_list.next = & __wait.task_list;
#line 1500
    __wait.task_list.prev = & __wait.task_list;
    ldv_46327: 
#line 1500
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1500
    if ((unsigned int )*((unsigned short *)mdev + 910UL) != 16U) {
#line 1500
      goto ldv_46325;
    } else {

    }
#line 1500
    tmp___0 = get_current();
#line 1500
    tmp___1 = signal_pending(tmp___0);
#line 1500
    if (tmp___1 == 0) {
#line 1500
      schedule();
#line 1500
      goto ldv_46326;
    } else {

    }
#line 1500
    __ret = -512;
#line 1500
    goto ldv_46325;
    ldv_46326: ;
#line 1500
    goto ldv_46327;
    ldv_46325: 
#line 1500
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1500
  if (__ret != 0) {
#line 1504
    retcode = 129;
#line 1505
    goto fail;
  } else {

  }
  done: 
#line 1509
  retcode = 101;
  fail: 
#line 1511
  drbd_md_sync(mdev);
#line 1512
  reply->ret_code = retcode;
#line 1513
  return (0);
}
}
#line 1516 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1520
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1521
  if ((int )mdev->state.ldv_35202.role != (int )mdev->state.ldv_35202.peer) {
#line 1522
    iass = (unsigned int )*((unsigned char *)mdev + 1820UL) == 1U;
  } else {
#line 1524
    iass = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1526
  if (iass != 0) {
#line 1527
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1529
    val.i = 0U;
#line 1529
    val.ldv_35202.conn = 15U;
#line 1529
    mask.i = 0U;
#line 1529
    mask.ldv_35202.conn = 31U;
#line 1529
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1531
  return;
}
}
#line 1532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1536
  retcode = 101;
#line 1540
  memset((void *)(& rs), 0, 16UL);
#line 1541
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1541
  if (tmp == 0) {
#line 1542
    retcode = 126;
#line 1543
    goto fail;
  } else {

  }
#line 1546
  if ((int )mdev->state.ldv_35202.conn > 10) {
#line 1547
    retcode = 130;
#line 1548
    goto fail;
  } else {

  }
#line 1551
  if ((unsigned int )*((unsigned char *)mdev + 1820UL) == 2U && (unsigned int )*((unsigned char *)mdev + 1820UL) == 8U) {
#line 1553
    retcode = 131;
#line 1554
    goto fail;
  } else {

  }
#line 1557
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1557
  if (tmp___0 == 0) {
#line 1558
    retcode = 138;
#line 1559
    goto fail;
  } else {

  }
#line 1562
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1563
    retcode = 153;
#line 1564
    goto fail;
  } else {

  }
#line 1567
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1567
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1568
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1570
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1571
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1572
  dd = drbd_determin_dev_size(mdev, ddsf);
#line 1573
  drbd_md_sync(mdev);
#line 1574
  put_ldev(mdev);
#line 1575
  if ((int )dd == -1) {
#line 1576
    retcode = 140;
#line 1577
    goto fail;
  } else {

  }
#line 1580
  if ((unsigned int )*((unsigned short *)mdev + 910UL) == 160U) {
#line 1581
    if ((int )dd == 2) {
#line 1582
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1584
    drbd_send_uuids(mdev);
#line 1585
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1589
  reply->ret_code = retcode;
#line 1590
  return (0);
}
}
#line 1593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  int tmp___10 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  bool tmp___14 ;
  int tmp___15 ;

  {
#line 1596
  retcode = 101;
#line 1600
  verify_tfm = 0;
#line 1601
  csums_tfm = 0;
#line 1605
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1605
  if (tmp) {
#line 1605
    tmp___0 = 0;
  } else {
#line 1605
    tmp___0 = 1;
  }
#line 1605
  if (tmp___0) {
#line 1606
    retcode = 122;
#line 1607
    goto fail;
  } else {

  }
#line 1610
  if ((nlp->flags & 2) != 0) {
#line 1611
    memset((void *)(& sc), 0, 188UL);
#line 1612
    sc.rate = 250;
#line 1613
    sc.after = -1;
#line 1614
    sc.al_extents = 127;
  } else {
#line 1616
    __len = 188UL;
#line 1616
    if (__len > 63UL) {
#line 1616
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1616
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1618
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1618
  if (tmp___1 == 0) {
#line 1619
    retcode = 126;
#line 1620
    goto fail;
  } else {

  }
#line 1624
  rsr = (((unsigned int )*((unsigned short *)mdev + 910UL) == 256U || (unsigned int )*((unsigned short *)mdev + 910UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 910UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 910UL) == 336U;
#line 1629
  if (rsr != 0) {
#line 1629
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1629
    if (tmp___2 != 0) {
#line 1630
      retcode = 148;
#line 1631
      goto fail;
    } else {

    }
  } else {

  }
#line 1634
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1635
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1636
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1636
    if (tmp___3 != 0L) {
#line 1637
      csums_tfm = 0;
#line 1638
      retcode = 144;
#line 1639
      goto fail;
    } else {

    }
#line 1642
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1642
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1642
    if (tmp___5 == 0) {
#line 1643
      retcode = 145;
#line 1644
      goto fail;
    } else {

    }
  } else {

  }
#line 1649
  ovr = (unsigned int )*((unsigned short *)mdev + 910UL) == 288U || (unsigned int )*((unsigned short *)mdev + 910UL) == 304U;
#line 1651
  if (ovr != 0) {
#line 1652
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1652
    if (tmp___6 != 0) {
#line 1653
      retcode = 149;
#line 1654
      goto fail;
    } else {

    }
  } else {

  }
#line 1658
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1659
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1660
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1660
    if (tmp___7 != 0L) {
#line 1661
      verify_tfm = 0;
#line 1662
      retcode = 146;
#line 1663
      goto fail;
    } else {

    }
#line 1666
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1666
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1666
    if (tmp___9 == 0) {
#line 1667
      retcode = 147;
#line 1668
      goto fail;
    } else {

    }
  } else {

  }
#line 1673
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1674
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1676
    if (err != 0) {
#line 1677
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "__bitmap_parse() failed with %d\n",
               err);
#line 1678
      retcode = 143;
#line 1679
      goto fail;
    } else {

    }
  } else {

  }
#line 1683
  _b = sc.rate <= 0;
#line 1683
  if (_b != 0) {
#line 1683
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1683);
  } else {

  }
#line 1683
  if (_b != 0) {
#line 1683
    sc.rate = 1;
  } else {

  }
#line 1684
  _b___0 = sc.al_extents <= 6;
#line 1684
  if (_b___0 != 0) {
#line 1684
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1684);
  } else {

  }
#line 1684
  if (_b___0 != 0) {
#line 1684
    sc.al_extents = 127;
  } else {

  }
#line 1686
  if (sc.al_extents > 3843) {
#line 1687
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1688
    sc.al_extents = 3843;
  } else {

  }
#line 1695
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1696
  if (retcode != 101) {
#line 1697
    goto fail;
  } else {

  }
#line 1701
  spin_lock(& mdev->peer_seq_lock);
#line 1702
  mdev->sync_conf = sc;
#line 1704
  if (rsr == 0) {
#line 1705
    crypto_free_hash(mdev->csums_tfm);
#line 1706
    mdev->csums_tfm = csums_tfm;
#line 1707
    csums_tfm = 0;
  } else {

  }
#line 1710
  if (ovr == 0) {
#line 1711
    crypto_free_hash(mdev->verify_tfm);
#line 1712
    mdev->verify_tfm = verify_tfm;
#line 1713
    verify_tfm = 0;
  } else {

  }
#line 1715
  spin_unlock(& mdev->peer_seq_lock);
#line 1717
  tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1717
  if (tmp___13 != 0) {
#line 1718
    tmp___10 = lc_try_lock(mdev->act_log);
#line 1718
    if (tmp___10 != 0) {
#line 1718
      goto ldv_46369;
    } else {

    }
#line 1718
    tmp___11 = get_current();
#line 1718
    __wait.flags = 0U;
#line 1718
    __wait.private = (void *)tmp___11;
#line 1718
    __wait.func = & autoremove_wake_function;
#line 1718
    __wait.task_list.next = & __wait.task_list;
#line 1718
    __wait.task_list.prev = & __wait.task_list;
    ldv_46372: 
#line 1718
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1718
    tmp___12 = lc_try_lock(mdev->act_log);
#line 1718
    if (tmp___12 != 0) {
#line 1718
      goto ldv_46371;
    } else {

    }
#line 1718
    schedule();
#line 1718
    goto ldv_46372;
    ldv_46371: 
#line 1718
    finish_wait(& mdev->al_wait, & __wait);
    ldv_46369: 
#line 1719
    drbd_al_shrink(mdev);
#line 1720
    err = drbd_check_al_size(mdev);
#line 1721
    lc_unlock(mdev->act_log);
#line 1722
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1724
    put_ldev(mdev);
#line 1725
    drbd_md_sync(mdev);
#line 1727
    if (err != 0) {
#line 1728
      retcode = 122;
#line 1729
      goto fail;
    } else {

    }
  } else {

  }
#line 1733
  if ((int )mdev->state.ldv_35202.conn > 9) {
#line 1734
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1736
  tmp___14 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1736
  if (tmp___14) {
#line 1736
    tmp___15 = 0;
  } else {
#line 1736
    tmp___15 = 1;
  }
#line 1736
  if (tmp___15) {
#line 1737
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1738
    drbd_calc_cpu_mask(mdev);
#line 1739
    mdev->receiver.reset_cpu_mask = 1;
#line 1740
    mdev->asender.reset_cpu_mask = 1;
#line 1741
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1744
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1746
  free_cpumask_var(new_cpu_mask);
#line 1747
  crypto_free_hash(csums_tfm);
#line 1748
  crypto_free_hash(verify_tfm);
#line 1749
  reply->ret_code = retcode;
#line 1750
  return (0);
}
}
#line 1753 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1758
  val.i = 0U;
#line 1758
  val.ldv_35202.conn = 12U;
#line 1758
  mask.i = 0U;
#line 1758
  mask.ldv_35202.conn = 31U;
#line 1758
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1760
  if (retcode <= 0 && retcode != -15) {
#line 1761
    val___0.i = 0U;
#line 1761
    val___0.ldv_35202.conn = 12U;
#line 1761
    mask___0.i = 0U;
#line 1761
    mask___0.ldv_35202.conn = 31U;
#line 1761
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1763
  goto ldv_46395;
  ldv_46394: 
#line 1764
  spin_lock_irq(& mdev->req_lock);
#line 1765
  if ((int )mdev->state.ldv_35202.conn <= 9) {
#line 1766
    __ns.i = mdev->state.i;
#line 1766
    __ns.ldv_35202.disk = 4U;
#line 1766
    retcode = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
  } else {

  }
#line 1767
  spin_unlock_irq(& mdev->req_lock);
#line 1769
  if (retcode != -15) {
#line 1770
    goto ldv_46389;
  } else {

  }
#line 1772
  val___1.i = 0U;
#line 1772
  val___1.ldv_35202.conn = 12U;
#line 1772
  mask___1.i = 0U;
#line 1772
  mask___1.ldv_35202.conn = 31U;
#line 1772
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_46395: ;
#line 1763
  if (retcode == -15) {
#line 1764
    goto ldv_46394;
  } else {

  }
  ldv_46389: 
#line 1775
  reply->ret_code = retcode;
#line 1776
  return (0);
}
}
#line 1779 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1783
  val.i = 0U;
#line 1783
  val.ldv_35202.conn = 11U;
#line 1783
  mask.i = 0U;
#line 1783
  mask.ldv_35202.conn = 31U;
#line 1783
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1785
  return (0);
}
}
#line 1788 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1791
  retcode = 101;
#line 1793
  val.i = 0U;
#line 1793
  val.ldv_35202.user_isp = 1U;
#line 1793
  mask.i = 0U;
#line 1793
  mask.ldv_35202.user_isp = 1U;
#line 1793
  tmp = drbd_request_state(mdev, mask, val);
#line 1793
  if (tmp == 2) {
#line 1794
    retcode = 134;
  } else {

  }
#line 1796
  reply->ret_code = retcode;
#line 1797
  return (0);
}
}
#line 1800 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1803
  retcode = 101;
#line 1805
  val.i = 0U;
#line 1805
  val.ldv_35202.user_isp = 0U;
#line 1805
  mask.i = 0U;
#line 1805
  mask.ldv_35202.user_isp = 1U;
#line 1805
  tmp = drbd_request_state(mdev, mask, val);
#line 1805
  if (tmp == 2) {
#line 1806
    retcode = 135;
  } else {

  }
#line 1808
  reply->ret_code = retcode;
#line 1809
  return (0);
}
}
#line 1812 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1815
  val.i = 0U;
#line 1815
  val.ldv_35202.susp = 1U;
#line 1815
  mask.i = 0U;
#line 1815
  mask.ldv_35202.susp = 1U;
#line 1815
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1817
  return (0);
}
}
#line 1820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1823
  val.i = 0U;
#line 1823
  val.ldv_35202.susp = 0U;
#line 1823
  mask.i = 0U;
#line 1823
  mask.ldv_35202.susp = 1U;
#line 1823
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1824
  return (0);
}
}
#line 1827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1830
  val.i = 0U;
#line 1830
  val.ldv_35202.disk = 5U;
#line 1830
  mask.i = 0U;
#line 1830
  mask.ldv_35202.disk = 15U;
#line 1830
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1831
  return (0);
}
}
#line 1834 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 1839
  tl = (unsigned short *)(& reply->tag_list);
#line 1841
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1841
  if (tmp != 0) {
#line 1842
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 1843
    put_ldev(mdev);
  } else {

  }
#line 1846
  tmp___0 = get_net_conf(mdev);
#line 1846
  if (tmp___0 != 0) {
#line 1847
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 1848
    put_net_conf(mdev);
  } else {

  }
#line 1850
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 1852
  tmp___1 = tl;
#line 1852
  tl = tl + 1;
#line 1852
  __gu_p = (void *)tmp___1;
#line 1852
  switch (2UL) {
  case 1UL: 
#line 1852
  *((u8 *)__gu_p) = 0U;
#line 1852
  goto ldv_46460;
  case 2UL: 
#line 1852
  put_unaligned_le16(0, __gu_p);
#line 1852
  goto ldv_46460;
  case 4UL: 
#line 1852
  put_unaligned_le32(0U, __gu_p);
#line 1852
  goto ldv_46460;
  case 8UL: 
#line 1852
  put_unaligned_le64(0ULL, __gu_p);
#line 1852
  goto ldv_46460;
  default: 
#line 1852
  __bad_unaligned_access_size();
#line 1852
  goto ldv_46460;
  }
  ldv_46460: ;
#line 1854
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1860
  tl = (unsigned short *)(& reply->tag_list);
#line 1861
  s = mdev->state;
#line 1865
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 1868
  if ((int )s.ldv_35202.conn > 15 && (int )s.ldv_35202.conn <= 21) {
#line 1869
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1869
    if (tmp != 0) {
#line 1870
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 1871
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 1872
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1875
  tmp___0 = tl;
#line 1875
  tl = tl + 1;
#line 1875
  __gu_p = (void *)tmp___0;
#line 1875
  switch (2UL) {
  case 1UL: 
#line 1875
  *((u8 *)__gu_p) = 0U;
#line 1875
  goto ldv_46476;
  case 2UL: 
#line 1875
  put_unaligned_le16(0, __gu_p);
#line 1875
  goto ldv_46476;
  case 4UL: 
#line 1875
  put_unaligned_le32(0U, __gu_p);
#line 1875
  goto ldv_46476;
  case 8UL: 
#line 1875
  put_unaligned_le64(0ULL, __gu_p);
#line 1875
  goto ldv_46476;
  default: 
#line 1875
  __bad_unaligned_access_size();
#line 1875
  goto ldv_46476;
  }
  ldv_46476: ;
#line 1877
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1880 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1885
  tl = (unsigned short *)(& reply->tag_list);
#line 1887
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1887
  if (tmp != 0) {
#line 1888
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 1889
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 1890
    put_ldev(mdev);
  } else {

  }
#line 1892
  tmp___0 = tl;
#line 1892
  tl = tl + 1;
#line 1892
  __gu_p = (void *)tmp___0;
#line 1892
  switch (2UL) {
  case 1UL: 
#line 1892
  *((u8 *)__gu_p) = 0U;
#line 1892
  goto ldv_46489;
  case 2UL: 
#line 1892
  put_unaligned_le16(0, __gu_p);
#line 1892
  goto ldv_46489;
  case 4UL: 
#line 1892
  put_unaligned_le32(0U, __gu_p);
#line 1892
  goto ldv_46489;
  case 8UL: 
#line 1892
  put_unaligned_le64(0ULL, __gu_p);
#line 1892
  goto ldv_46489;
  default: 
#line 1892
  __bad_unaligned_access_size();
#line 1892
  goto ldv_46489;
  }
  ldv_46489: ;
#line 1894
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1903 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1909
  tl = (unsigned short *)(& reply->tag_list);
#line 1911
  if (*((unsigned int *)mdev + 455UL) != 40960U) {
#line 1911
    tmp = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 1911
    rv = tmp != 0;
  } else {
#line 1911
    rv = 2;
  }
#line 1914
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 1915
  tmp___0 = tl;
#line 1915
  tl = tl + 1;
#line 1915
  __gu_p = (void *)tmp___0;
#line 1915
  switch (2UL) {
  case 1UL: 
#line 1915
  *((u8 *)__gu_p) = 0U;
#line 1915
  goto ldv_46503;
  case 2UL: 
#line 1915
  put_unaligned_le16(0, __gu_p);
#line 1915
  goto ldv_46503;
  case 4UL: 
#line 1915
  put_unaligned_le32(0U, __gu_p);
#line 1915
  goto ldv_46503;
  case 8UL: 
#line 1915
  put_unaligned_le64(0ULL, __gu_p);
#line 1915
  goto ldv_46503;
  default: 
#line 1915
  __bad_unaligned_access_size();
#line 1915
  goto ldv_46503;
  }
  ldv_46503: ;
#line 1917
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1920 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1924
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 1927
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1927
  if (tmp == 0) {
#line 1928
    reply->ret_code = 126;
#line 1929
    return (0);
  } else {

  }
#line 1932
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 1933
  val.i = 0U;
#line 1933
  val.ldv_35202.conn = 18U;
#line 1933
  mask.i = 0U;
#line 1933
  mask.ldv_35202.conn = 31U;
#line 1933
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1934
  return (0);
}
}
#line 1938 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 1941
  retcode = 101;
#line 1942
  skip_initial_sync = 0;
#line 1947
  memset((void *)(& args), 0, 4UL);
#line 1948
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1948
  if (tmp == 0) {
#line 1949
    reply->ret_code = 126;
#line 1950
    return (0);
  } else {

  }
#line 1953
  ldv_mutex_lock_195(& mdev->state_mutex);
#line 1955
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1955
  if (tmp___0 == 0) {
#line 1956
    retcode = 138;
#line 1957
    goto out;
  } else {

  }
#line 1961
  if ((((unsigned int )*((unsigned short *)mdev + 910UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1963
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 1964
    skip_initial_sync = 1;
  } else
#line 1965
  if ((unsigned int )*((unsigned short *)mdev + 910UL) != 0U) {
#line 1966
    retcode = 151;
#line 1967
    goto out_dec;
  } else {

  }
#line 1970
  drbd_uuid_set(mdev, 1, 0ULL);
#line 1971
  drbd_uuid_new_current(mdev);
#line 1973
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1974
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid");
#line 1975
    if (err != 0) {
#line 1976
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 1977
      retcode = 118;
    } else {

    }
#line 1979
    if (skip_initial_sync != 0) {
#line 1980
      drbd_send_uuids_skip_initial_sync(mdev);
#line 1981
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 1982
      spin_lock_irq(& mdev->req_lock);
#line 1983
      __ns.i = mdev->state.i;
#line 1983
      __ns.ldv_35202.disk = 8U;
#line 1983
      __ns.ldv_35202.pdsk = 8U;
#line 1983
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1985
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1989
  drbd_md_sync(mdev);
  out_dec: 
#line 1991
  put_ldev(mdev);
  out: 
#line 1993
  ldv_mutex_unlock_196(& mdev->state_mutex);
#line 1995
  reply->ret_code = retcode;
#line 1996
  return (0);
}
}
#line 1999 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(struct drbd_nl_cfg_req *nlp ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 2003
  if (nlp->drbd_minor >= minor_count) {
#line 2004
    return (0);
  } else {

  }
#line 2006
  mdev = minor_to_mdev(nlp->drbd_minor);
#line 2008
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && nlp->flags & 1) {
#line 2009
    disk = 0;
#line 2010
    mdev = drbd_new_device(nlp->drbd_minor);
#line 2012
    spin_lock_irq(& drbd_pp_lock);
#line 2013
    if ((unsigned long )*(minor_table + (unsigned long )nlp->drbd_minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 2014
      *(minor_table + (unsigned long )nlp->drbd_minor) = mdev;
#line 2015
      disk = mdev->vdisk;
#line 2016
      mdev = 0;
    } else {

    }
#line 2018
    spin_unlock_irq(& drbd_pp_lock);
#line 2020
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 2023
      add_disk(disk);
    } else {
#line 2025
      drbd_free_mdev(mdev);
    }
#line 2027
    mdev = minor_to_mdev(nlp->drbd_minor);
  } else {

  }
#line 2030
  return (mdev);
}
}
#line 2040 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2040
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1240}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2071 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  void *tmp___0 ;

  {
#line 2073
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2079
  reply_size = 34;
#line 2083
  tmp = try_module_get___0(& __this_module);
#line 2083
  if (tmp == 0) {
#line 2084
    printk("<3>drbd: try_module_get() failed!\n");
#line 2085
    return;
  } else {

  }
#line 2088
  if ((nsp->eff_cap.cap[0] & 2097152U) == 0U) {
#line 2089
    retcode = 152;
#line 2090
    goto fail;
  } else {

  }
#line 2093
  mdev = ensure_mdev(nlp);
#line 2094
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2095
    retcode = 127;
#line 2096
    goto fail;
  } else {

  }
#line 2099
  if (nlp->packet_type > 26) {
#line 2100
    retcode = 137;
#line 2101
    goto fail;
  } else {

  }
#line 2104
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2107
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2108
    retcode = 137;
#line 2109
    goto fail;
  } else {

  }
#line 2112
  reply_size = cm->reply_body_size + reply_size;
#line 2115
  tmp___0 = kmalloc___5((size_t )reply_size, 208U);
#line 2115
  cn_reply = (struct cn_msg *)tmp___0;
#line 2116
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2117
    retcode = 122;
#line 2118
    goto fail;
  } else {

  }
#line 2120
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2122
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2124
  reply->minor = nlp->drbd_minor;
#line 2125
  reply->ret_code = 101;
#line 2128
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2130
  cn_reply->id = req->id;
#line 2131
  cn_reply->seq = req->seq;
#line 2132
  cn_reply->ack = req->ack + 1U;
#line 2133
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2134
  cn_reply->flags = 0U;
#line 2136
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2137
  if (rr != 0 && rr != -3) {
#line 2138
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2140
  kfree((void const   *)cn_reply);
#line 2141
  module_put(& __this_module);
#line 2142
  return;
  fail: 
#line 2144
  drbd_nl_send_reply(req, retcode);
#line 2145
  module_put(& __this_module);
#line 2146
  return;
}
}
#line 2148 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2154
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2155
  len = (int )len < (int )l ? len : l;
#line 2156
  tmp = tl;
#line 2156
  tl = tl + 1;
#line 2156
  __gu_p = (void *)tmp;
#line 2156
  switch (2UL) {
  case 1UL: 
#line 2156
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2156
  goto ldv_46567;
  case 2UL: 
#line 2156
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2156
  goto ldv_46567;
  case 4UL: 
#line 2156
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2156
  goto ldv_46567;
  case 8UL: 
#line 2156
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2156
  goto ldv_46567;
  default: 
#line 2156
  __bad_unaligned_access_size();
#line 2156
  goto ldv_46567;
  }
  ldv_46567: 
#line 2157
  tmp___0 = tl;
#line 2157
  tl = tl + 1;
#line 2157
  __gu_p___0 = (void *)tmp___0;
#line 2157
  switch (2UL) {
  case 1UL: 
#line 2157
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2157
  goto ldv_46574;
  case 2UL: 
#line 2157
  put_unaligned_le16((int )len, __gu_p___0);
#line 2157
  goto ldv_46574;
  case 4UL: 
#line 2157
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2157
  goto ldv_46574;
  case 8UL: 
#line 2157
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2157
  goto ldv_46574;
  default: 
#line 2157
  __bad_unaligned_access_size();
#line 2157
  goto ldv_46574;
  }
  ldv_46574: 
#line 2158
  __len = (size_t )len;
#line 2158
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2159
  tl = tl + (unsigned long )len;
#line 2160
  if (nul_terminated != 0) {
#line 2161
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2162
  return (tl);
}
}
#line 2166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2168
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2168
  return (tmp);
}
}
#line 2172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2174
  tmp = strlen(str);
#line 2174
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2174
  return (tmp___0);
}
}
#line 2178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2180
  tmp = tl;
#line 2180
  tl = tl + 1;
#line 2180
  __gu_p = (void *)tmp;
#line 2180
  switch (2UL) {
  case 1UL: 
#line 2180
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2180
  goto ldv_46600;
  case 2UL: 
#line 2180
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2180
  goto ldv_46600;
  case 4UL: 
#line 2180
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2180
  goto ldv_46600;
  case 8UL: 
#line 2180
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2180
  goto ldv_46600;
  default: 
#line 2180
  __bad_unaligned_access_size();
#line 2180
  goto ldv_46600;
  }
  ldv_46600: ;
#line 2181
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2183
  tmp___0 = tl;
#line 2183
  tl = tl + 1;
#line 2183
  __gu_p___0 = (void *)tmp___0;
#line 2183
  switch (2UL) {
  case 1UL: 
#line 2183
  *((u8 *)__gu_p___0) = 4U;
#line 2183
  goto ldv_46608;
  case 2UL: 
#line 2183
  put_unaligned_le16(4, __gu_p___0);
#line 2183
  goto ldv_46608;
  case 4UL: 
#line 2183
  put_unaligned_le32(4U, __gu_p___0);
#line 2183
  goto ldv_46608;
  case 8UL: 
#line 2183
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2183
  goto ldv_46608;
  default: 
#line 2183
  __bad_unaligned_access_size();
#line 2183
  goto ldv_46608;
  }
  ldv_46608: 
#line 2184
  __gu_p___1 = (void *)tl;
#line 2184
  switch (4UL) {
  case 1UL: 
#line 2184
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2184
  goto ldv_46615;
  case 2UL: 
#line 2184
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2184
  goto ldv_46615;
  case 4UL: 
#line 2184
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2184
  goto ldv_46615;
  case 8UL: 
#line 2184
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2184
  goto ldv_46615;
  default: 
#line 2184
  __bad_unaligned_access_size();
#line 2184
  goto ldv_46615;
  }
  ldv_46615: 
#line 2185
  tl = tl + 4U;
#line 2186
  goto ldv_46620;
  case 16384U: 
#line 2188
  tmp___1 = tl;
#line 2188
  tl = tl + 1;
#line 2188
  __gu_p___2 = (void *)tmp___1;
#line 2188
  switch (2UL) {
  case 1UL: 
#line 2188
  *((u8 *)__gu_p___2) = 8U;
#line 2188
  goto ldv_46624;
  case 2UL: 
#line 2188
  put_unaligned_le16(8, __gu_p___2);
#line 2188
  goto ldv_46624;
  case 4UL: 
#line 2188
  put_unaligned_le32(8U, __gu_p___2);
#line 2188
  goto ldv_46624;
  case 8UL: 
#line 2188
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2188
  goto ldv_46624;
  default: 
#line 2188
  __bad_unaligned_access_size();
#line 2188
  goto ldv_46624;
  }
  ldv_46624: 
#line 2189
  __gu_p___3 = (void *)tl;
#line 2189
  switch (8UL) {
  case 1UL: 
#line 2189
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2189
  goto ldv_46631;
  case 2UL: 
#line 2189
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2189
  goto ldv_46631;
  case 4UL: 
#line 2189
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2189
  goto ldv_46631;
  case 8UL: 
#line 2189
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2189
  goto ldv_46631;
  default: 
#line 2189
  __bad_unaligned_access_size();
#line 2189
  goto ldv_46631;
  }
  ldv_46631: 
#line 2190
  tl = tl + 8U;
#line 2191
  goto ldv_46620;
  default: ;
  }
  ldv_46620: ;
#line 2196
  return (tl);
}
}
#line 2199 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2205
  cn_reply = (struct cn_msg *)(& buffer);
#line 2206
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2208
  tl = (unsigned short *)(& reply->tag_list);
#line 2212
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2214
  tmp = tl;
#line 2214
  tl = tl + 1;
#line 2214
  __gu_p = (void *)tmp;
#line 2214
  switch (2UL) {
  case 1UL: 
#line 2214
  *((u8 *)__gu_p) = 0U;
#line 2214
  goto ldv_46647;
  case 2UL: 
#line 2214
  put_unaligned_le16(0, __gu_p);
#line 2214
  goto ldv_46647;
  case 4UL: 
#line 2214
  put_unaligned_le32(0U, __gu_p);
#line 2214
  goto ldv_46647;
  case 8UL: 
#line 2214
  put_unaligned_le64(0ULL, __gu_p);
#line 2214
  goto ldv_46647;
  default: 
#line 2214
  __bad_unaligned_access_size();
#line 2214
  goto ldv_46647;
  }
  ldv_46647: 
#line 2216
  cn_reply->id.idx = 8U;
#line 2217
  cn_reply->id.val = 1U;
#line 2219
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2219
  cn_reply->seq = (__u32 )tmp___0;
#line 2220
  cn_reply->ack = 0U;
#line 2221
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2223
  cn_reply->flags = 0U;
#line 2225
  reply->packet_type = 17;
#line 2226
  reply->minor = mdev_to_minor(mdev);
#line 2227
  reply->ret_code = 101;
#line 2229
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2230
  return;
}
}
#line 2232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2238
  cn_reply = (struct cn_msg *)(& buffer);
#line 2239
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2241
  tl = (unsigned short *)(& reply->tag_list);
#line 2245
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2246
  tmp = tl;
#line 2246
  tl = tl + 1;
#line 2246
  __gu_p = (void *)tmp;
#line 2246
  switch (2UL) {
  case 1UL: 
#line 2246
  *((u8 *)__gu_p) = 0U;
#line 2246
  goto ldv_46662;
  case 2UL: 
#line 2246
  put_unaligned_le16(0, __gu_p);
#line 2246
  goto ldv_46662;
  case 4UL: 
#line 2246
  put_unaligned_le32(0U, __gu_p);
#line 2246
  goto ldv_46662;
  case 8UL: 
#line 2246
  put_unaligned_le64(0ULL, __gu_p);
#line 2246
  goto ldv_46662;
  default: 
#line 2246
  __bad_unaligned_access_size();
#line 2246
  goto ldv_46662;
  }
  ldv_46662: 
#line 2248
  cn_reply->id.idx = 8U;
#line 2249
  cn_reply->id.val = 1U;
#line 2251
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2251
  cn_reply->seq = (__u32 )tmp___0;
#line 2252
  cn_reply->ack = 0U;
#line 2253
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2255
  cn_reply->flags = 0U;
#line 2257
  reply->packet_type = 20;
#line 2258
  reply->minor = mdev_to_minor(mdev);
#line 2259
  reply->ret_code = 101;
#line 2261
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2262
  return;
}
}
#line 2264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2275
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2276
    return;
  } else {

  }
#line 2277
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2278
    return;
  } else {

  }
#line 2286
  tmp = kmalloc___5(33026UL, 16U);
#line 2286
  cn_reply = (struct cn_msg *)tmp;
#line 2293
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2294
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2296
    return;
  } else {

  }
#line 2299
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2300
  tl = (unsigned short *)(& reply->tag_list);
#line 2302
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2303
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2304
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2305
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2306
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->block_id));
#line 2308
  tmp___0 = tl;
#line 2308
  tl = tl + 1;
#line 2308
  __gu_p = (void *)tmp___0;
#line 2308
  switch (2UL) {
  case 1UL: 
#line 2308
  *((u8 *)__gu_p) = 50U;
#line 2308
  goto ldv_46682;
  case 2UL: 
#line 2308
  put_unaligned_le16(49202, __gu_p);
#line 2308
  goto ldv_46682;
  case 4UL: 
#line 2308
  put_unaligned_le32(49202U, __gu_p);
#line 2308
  goto ldv_46682;
  case 8UL: 
#line 2308
  put_unaligned_le64(49202ULL, __gu_p);
#line 2308
  goto ldv_46682;
  default: 
#line 2308
  __bad_unaligned_access_size();
#line 2308
  goto ldv_46682;
  }
  ldv_46682: 
#line 2309
  tmp___1 = tl;
#line 2309
  tl = tl + 1;
#line 2309
  __gu_p___0 = (void *)tmp___1;
#line 2309
  switch (2UL) {
  case 1UL: 
#line 2309
  *((u8 *)__gu_p___0) = (unsigned char )e->size;
#line 2309
  goto ldv_46689;
  case 2UL: 
#line 2309
  put_unaligned_le16((int )((unsigned short )e->size), __gu_p___0);
#line 2309
  goto ldv_46689;
  case 4UL: 
#line 2309
  put_unaligned_le32(e->size, __gu_p___0);
#line 2309
  goto ldv_46689;
  case 8UL: 
#line 2309
  put_unaligned_le64((unsigned long long )e->size, __gu_p___0);
#line 2309
  goto ldv_46689;
  default: 
#line 2309
  __bad_unaligned_access_size();
#line 2309
  goto ldv_46689;
  }
  ldv_46689: 
#line 2311
  len = e->size;
#line 2312
  page = e->pages;
#line 2313
  goto ldv_46704;
  ldv_46703: 
#line 2314
  tmp___2 = kmap_atomic___0(page, KM_USER0);
#line 2314
  d = tmp___2;
#line 2315
  __min1 = len;
#line 2315
  __min2 = 4096U;
#line 2315
  l = __min1 < __min2 ? __min1 : __min2;
#line 2316
  __len = (size_t )l;
#line 2316
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2317
  kunmap_atomic_notypecheck___0(d, KM_USER0);
#line 2318
  tl = tl + (unsigned long )l;
#line 2319
  len = len - l;
#line 2313
  page = page_chain_next(page);
  ldv_46704: ;
#line 2313
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2313
    tmp___3 = page_chain_next(page);
#line 2313
    __builtin_prefetch((void const   *)tmp___3);
#line 2313
    if (1 != 0) {
#line 2314
      goto ldv_46703;
    } else {
#line 2316
      goto ldv_46705;
    }
  } else {

  }
  ldv_46705: 
#line 2321
  tmp___4 = tl;
#line 2321
  tl = tl + 1;
#line 2321
  __gu_p___1 = (void *)tmp___4;
#line 2321
  switch (2UL) {
  case 1UL: 
#line 2321
  *((u8 *)__gu_p___1) = 0U;
#line 2321
  goto ldv_46708;
  case 2UL: 
#line 2321
  put_unaligned_le16(0, __gu_p___1);
#line 2321
  goto ldv_46708;
  case 4UL: 
#line 2321
  put_unaligned_le32(0U, __gu_p___1);
#line 2321
  goto ldv_46708;
  case 8UL: 
#line 2321
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2321
  goto ldv_46708;
  default: 
#line 2321
  __bad_unaligned_access_size();
#line 2321
  goto ldv_46708;
  }
  ldv_46708: 
#line 2323
  cn_reply->id.idx = 8U;
#line 2324
  cn_reply->id.val = 1U;
#line 2326
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2326
  cn_reply->seq = (__u32 )tmp___5;
#line 2327
  cn_reply->ack = 0U;
#line 2328
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2330
  cn_reply->flags = 0U;
#line 2332
  reply->packet_type = 24;
#line 2333
  reply->minor = mdev_to_minor(mdev);
#line 2334
  reply->ret_code = 101;
#line 2336
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2337
  kfree((void const   *)cn_reply);
#line 2338
  return;
}
}
#line 2340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2346
  cn_reply = (struct cn_msg *)(& buffer);
#line 2347
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2349
  tl = (unsigned short *)(& reply->tag_list);
#line 2354
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2354
  if (tmp == 0) {
#line 2355
    return;
  } else {

  }
#line 2356
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2357
  put_ldev(mdev);
#line 2359
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2360
  tmp___0 = tl;
#line 2360
  tl = tl + 1;
#line 2360
  __gu_p = (void *)tmp___0;
#line 2360
  switch (2UL) {
  case 1UL: 
#line 2360
  *((u8 *)__gu_p) = 0U;
#line 2360
  goto ldv_46724;
  case 2UL: 
#line 2360
  put_unaligned_le16(0, __gu_p);
#line 2360
  goto ldv_46724;
  case 4UL: 
#line 2360
  put_unaligned_le32(0U, __gu_p);
#line 2360
  goto ldv_46724;
  case 8UL: 
#line 2360
  put_unaligned_le64(0ULL, __gu_p);
#line 2360
  goto ldv_46724;
  default: 
#line 2360
  __bad_unaligned_access_size();
#line 2360
  goto ldv_46724;
  }
  ldv_46724: 
#line 2362
  cn_reply->id.idx = 8U;
#line 2363
  cn_reply->id.val = 1U;
#line 2365
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2365
  cn_reply->seq = (__u32 )tmp___1;
#line 2366
  cn_reply->ack = 0U;
#line 2367
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2369
  cn_reply->flags = 0U;
#line 2371
  reply->packet_type = 23;
#line 2372
  reply->minor = mdev_to_minor(mdev);
#line 2373
  reply->ret_code = 101;
#line 2375
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2376
  return;
}
}
#line 2378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2381
  try = 10;
#line 2383
  cn_id_drbd.val = 1U;
  ldv_46736: 
#line 2385
  cn_id_drbd.idx = cn_idx;
#line 2386
  err = cn_add_callback(& cn_id_drbd, (char *)"cn_drbd", & drbd_connector_callback);
#line 2387
  if (err == 0) {
#line 2388
    goto ldv_46735;
  } else {

  }
#line 2389
  cn_idx = cn_idx + 6977U;
#line 2390
  tmp = try;
#line 2390
  try = try - 1;
#line 2390
  if (tmp != 0) {
#line 2391
    goto ldv_46736;
  } else {

  }
  ldv_46735: ;
#line 2392
  if (err != 0) {
#line 2393
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2394
    return (err);
  } else {

  }
#line 2397
  return (0);
}
}
#line 2400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2404
  cn_id_drbd.idx = cn_idx;
#line 2405
  cn_id_drbd.val = 1U;
#line 2407
  cn_del_callback(& cn_id_drbd);
#line 2408
  return;
}
}
#line 2410 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2413
  cn_reply = (struct cn_msg *)(& buffer);
#line 2414
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2418
  cn_reply->id = req->id;
#line 2420
  cn_reply->seq = req->seq;
#line 2421
  cn_reply->ack = req->ack + 1U;
#line 2422
  cn_reply->len = 12U;
#line 2423
  cn_reply->flags = 0U;
#line 2425
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2426
  reply->ret_code = ret_code;
#line 2428
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2429
  if (rr != 0 && rr != -3) {
#line 2430
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2431
  return;
}
}
#line 2433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_187(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2438
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 2440
  mutex_lock(ldv_func_arg1);
#line 2441
  return;
}
}
#line 2443 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int ldv_mutex_trylock_188(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2448
  tmp = mutex_trylock(ldv_func_arg1);
#line 2448
  ldv_func_res = tmp;
#line 2450
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 2450
  return (tmp___0);
#line 2452
  return (ldv_func_res);
}
}
#line 2455 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_189(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2460
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 2462
  mutex_unlock(ldv_func_arg1);
#line 2463
  return;
}
}
#line 2465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_190(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2470
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2472
  mutex_lock(ldv_func_arg1);
#line 2473
  return;
}
}
#line 2475 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_191(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2480
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2482
  mutex_unlock(ldv_func_arg1);
#line 2483
  return;
}
}
#line 2485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_192(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2490
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2492
  mutex_unlock(ldv_func_arg1);
#line 2493
  return;
}
}
#line 2495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_193(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2500
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2502
  mutex_lock(ldv_func_arg1);
#line 2503
  return;
}
}
#line 2505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_194(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2510
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2512
  mutex_unlock(ldv_func_arg1);
#line 2513
  return;
}
}
#line 2515 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_195(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2520
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2522
  mutex_lock(ldv_func_arg1);
#line 2523
  return;
}
}
#line 2525 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_196(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2530
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2532
  mutex_unlock(ldv_func_arg1);
#line 2533
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_bm_change_of_drbd_bitmap  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_bm_change_of_drbd_bitmap(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_bm_change_of_drbd_bitmap == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_drbd_main_mutex  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_drbd_main_mutex = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_drbd_main_mutex = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_drbd_main_mutex = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_drbd_main_mutex(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_drbd_main_mutex = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_drbd_main_mutex(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_drbd_main_mutex = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_drbd_main_mutex == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_drbd_main_mutex == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_drbd_main_mutex = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_md_io_mutex_of_drbd_conf  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_md_io_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 462
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 472
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 472
    ldv_error();
  }
#line 475
  nondetermined = ldv_undef_int();
#line 478
  if (nondetermined) {
#line 481
    ldv_mutex_mutex_of_device = 2;
#line 483
    return (0);
  } else {
#line 488
    return (-4);
  }
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 498
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 498
    ldv_error();
  }
#line 501
  nondetermined = ldv_undef_int();
#line 504
  if (nondetermined) {
#line 507
    ldv_mutex_mutex_of_device = 2;
#line 509
    return (0);
  } else {
#line 514
    return (-4);
  }
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 522
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 522
    ldv_error();
  }
#line 524
  ldv_mutex_mutex_of_device = 2;
#line 525
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 533
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 533
    ldv_error();
  }
#line 536
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 539
  if (is_mutex_held_by_another_thread) {
#line 542
    return (0);
  } else {
#line 547
    ldv_mutex_mutex_of_device = 2;
#line 549
    return (1);
  }
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 559
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 559
    ldv_error();
  }
#line 562
  atomic_value_after_dec = ldv_undef_int();
#line 565
  if (atomic_value_after_dec == 0) {
#line 568
    ldv_mutex_mutex_of_device = 2;
#line 570
    return (1);
  } else {

  }
#line 574
  return (0);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 583
  if (ldv_mutex_mutex_of_device == 1) {
#line 586
    nondetermined = ldv_undef_int();
#line 589
    if (nondetermined) {
#line 592
      return (0);
    } else {
#line 597
      return (1);
    }
  } else {
#line 603
    return (1);
  }
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 611
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 611
    ldv_error();
  }
#line 613
  ldv_mutex_mutex_of_device = 1;
#line 614
  return;
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_drbd_socket  ;
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 624
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 624
    ldv_error();
  }
#line 627
  nondetermined = ldv_undef_int();
#line 630
  if (nondetermined) {
#line 633
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 635
    return (0);
  } else {
#line 640
    return (-4);
  }
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 650
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 650
    ldv_error();
  }
#line 653
  nondetermined = ldv_undef_int();
#line 656
  if (nondetermined) {
#line 659
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 661
    return (0);
  } else {
#line 666
    return (-4);
  }
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 674
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 674
    ldv_error();
  }
#line 676
  ldv_mutex_mutex_of_drbd_socket = 2;
#line 677
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 685
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 685
    ldv_error();
  }
#line 688
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 691
  if (is_mutex_held_by_another_thread) {
#line 694
    return (0);
  } else {
#line 699
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 701
    return (1);
  }
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_drbd_socket(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 711
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 711
    ldv_error();
  }
#line 714
  atomic_value_after_dec = ldv_undef_int();
#line 717
  if (atomic_value_after_dec == 0) {
#line 720
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 722
    return (1);
  } else {

  }
#line 726
  return (0);
}
}
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 735
  if (ldv_mutex_mutex_of_drbd_socket == 1) {
#line 738
    nondetermined = ldv_undef_int();
#line 741
    if (nondetermined) {
#line 744
      return (0);
    } else {
#line 749
      return (1);
    }
  } else {
#line 755
    return (1);
  }
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 763
  if (ldv_mutex_mutex_of_drbd_socket == 2) {

  } else {
#line 763
    ldv_error();
  }
#line 765
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 766
  return;
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_state_mutex_of_drbd_conf  ;
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 776
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 776
    ldv_error();
  }
#line 779
  nondetermined = ldv_undef_int();
#line 782
  if (nondetermined) {
#line 785
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 787
    return (0);
  } else {
#line 792
    return (-4);
  }
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 802
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 802
    ldv_error();
  }
#line 805
  nondetermined = ldv_undef_int();
#line 808
  if (nondetermined) {
#line 811
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 813
    return (0);
  } else {
#line 818
    return (-4);
  }
}
}
#line 823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 826
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 826
    ldv_error();
  }
#line 828
  ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 829
  return;
}
}
#line 832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 837
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 837
    ldv_error();
  }
#line 840
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 843
  if (is_mutex_held_by_another_thread) {
#line 846
    return (0);
  } else {
#line 851
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 853
    return (1);
  }
}
}
#line 858 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_state_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 863
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 863
    ldv_error();
  }
#line 866
  atomic_value_after_dec = ldv_undef_int();
#line 869
  if (atomic_value_after_dec == 0) {
#line 872
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 874
    return (1);
  } else {

  }
#line 878
  return (0);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 887
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {
#line 890
    nondetermined = ldv_undef_int();
#line 893
    if (nondetermined) {
#line 896
      return (0);
    } else {
#line 901
      return (1);
    }
  } else {
#line 907
    return (1);
  }
}
}
#line 912 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 915
  if (ldv_mutex_state_mutex_of_drbd_conf == 2) {

  } else {
#line 915
    ldv_error();
  }
#line 917
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 918
  return;
}
}
#line 922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 925
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 927
  ldv_mutex_drbd_main_mutex = 1;
#line 929
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 931
  ldv_mutex_mutex_of_device = 1;
#line 933
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 935
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 936
  return;
}
}
#line 939 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 942
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 942
    ldv_error();
  }
#line 944
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 944
    ldv_error();
  }
#line 946
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 946
    ldv_error();
  }
#line 948
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 948
    ldv_error();
  }
#line 950
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 950
    ldv_error();
  }
#line 952
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 952
    ldv_error();
  }
#line 953
  return;
}
}
