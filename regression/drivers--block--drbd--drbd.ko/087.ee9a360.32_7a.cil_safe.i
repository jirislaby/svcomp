/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_suseconds_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 24 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 25 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 168 "include/linux/types.h"
typedef __u16 __le16;
#line 169 "include/linux/types.h"
typedef __u16 __be16;
#line 171 "include/linux/types.h"
typedef __u32 __be32;
#line 176 "include/linux/types.h"
typedef __u32 __wsum;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 192 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 192 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 197 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 197 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 121 "include/linux/kernel.h"
struct completion;
#line 122
struct pt_regs;
#line 222
struct pid;
#line 750
struct task_struct;
#line 751
struct mm_struct;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1846_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1846_8 ldv_1846 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 277
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2065_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2080_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2081_14 {
   struct __anonstruct_ldv_2065_15 ldv_2065 ;
   struct __anonstruct_ldv_2080_16 ldv_2080 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2081_14 ldv_2081 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_KDB = 19,
    KM_TYPE_NR = 20
} ;
#line 122
struct thread_struct;
#line 124
struct cpumask;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 607 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 271 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/msr.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 148 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4668_20 {
   u64 rip ;
   u64 rdp ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4674_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4675_19 {
   struct __anonstruct_ldv_4668_20 ldv_4668 ;
   struct __anonstruct_ldv_4674_21 ldv_4674 ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4684_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4675_19 ldv_4675 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4684_22 ldv_4684 ;
};
#line 332 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 353 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 358 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 364 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 370 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 378 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   union thread_xstate *state ;
};
#line 424
struct kmem_cache;
#line 425
struct perf_event;
#line 426 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 341 "include/linux/list.h"
struct hlist_node;
#line 341 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 557 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 648 "include/linux/list.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_25 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_25 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 42 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 48 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 133 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 176 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 551 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5592_27 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5593_26 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5592_27 ldv_5592 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5593_26 ldv_5593 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_28 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_28 rwlock_t;
#line 23
struct thread_info;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct timespec;
#line 65
struct compat_timespec;
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_ldv_5791_30 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_futex_31 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_nanosleep_32 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 66
struct pollfd;
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_poll_33 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
union __anonunion_ldv_5814_29 {
   struct __anonstruct_ldv_5791_30 ldv_5791 ;
   struct __anonstruct_futex_31 futex ;
   struct __anonstruct_nanosleep_32 nanosleep ;
   struct __anonstruct_poll_33 poll ;
};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5814_29 ldv_5814 ;
};
#line 54 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 396 "include/linux/spinlock.h"
struct vm_area_struct;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_34 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_34 seqlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 18 "include/linux/time.h"
struct timeval {
   __kernel_time_t tv_sec ;
   __kernel_suseconds_t tv_usec ;
};
#line 311 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 96 "include/linux/debugobjects.h"
struct tvec_base;
#line 97 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 248 "include/linux/timer.h"
struct hrtimer;
#line 249
enum hrtimer_restart;
#line 261
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 36 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 299
struct hlist_nulls_node;
#line 299 "include/linux/workqueue.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 632 "include/linux/mmzone.h"
struct rw_semaphore;
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
typedef long rwsem_count_t;
#line 78 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
struct rw_semaphore {
   rwsem_count_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 741 "include/linux/mmzone.h"
struct ctl_table;
#line 172 "include/linux/ioport.h"
struct device;
#line 53 "include/linux/delay.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 37 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 46 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 47 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 266
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 276
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 283
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 290 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct completion completion ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_100 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_100 mm_context_t;
#line 15 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 34 "include/linux/kmod.h"
struct key;
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 443
struct kobject;
#line 444
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 445 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 38 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 103 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 121
struct sysfs_dirent;
#line 186 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106
struct kobj_ns_type_operations;
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 114 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 121 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 138
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 144
struct sock;
#line 145 "include/linux/kobject.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void const   *(*current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
};
#line 173 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 248
struct kernel_param;
#line 38 "include/linux/moduleparam.h"
struct kparam_string;
#line 38
struct kparam_array;
#line 38 "include/linux/moduleparam.h"
union __anonunion_ldv_10962_110 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 38 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   union __anonunion_ldv_10962_110 ldv_10962 ;
};
#line 54 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 60 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 242 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 518 "include/linux/rcupdate.h"
struct tracepoint;
#line 519 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   void **funcs ;
};
#line 230 "include/linux/percpu.h"
struct mod_arch_specific {

};
#line 96 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 60
struct module_param_attrs;
#line 60 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 182
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 188 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 374
struct module_sect_attrs;
#line 374
struct module_notes_attrs;
#line 374
struct ftrace_event_call;
#line 374 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 538
struct device_driver;
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 37 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 38 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 52 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 141 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_111 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_111 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_112 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_112 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_113 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_113 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_114 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_114 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_115 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_115 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_116 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_116 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_117 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_117 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 139 "include/linux/if.h"
union __anonunion_ifs_ifsu_118 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 139 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_118 ifs_ifsu ;
};
#line 157 "include/linux/if.h"
union __anonunion_ifr_ifrn_119 {
   char ifrn_name[16U] ;
};
#line 157 "include/linux/if.h"
union __anonunion_ifr_ifru_120 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 157 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_119 ifr_ifrn ;
   union __anonunion_ifr_ifru_120 ifr_ifru ;
};
#line 123 "include/linux/if_ether.h"
struct prio_tree_node;
#line 123 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
   void (*augment_cb)(struct rb_node * ) ;
};
#line 167
struct address_space;
#line 168 "include/linux/rbtree.h"
struct __anonstruct_ldv_12098_123 {
   u16 inuse ;
   u16 objects ;
};
#line 168 "include/linux/rbtree.h"
union __anonunion_ldv_12099_122 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_12098_123 ldv_12098 ;
};
#line 168 "include/linux/rbtree.h"
struct __anonstruct_ldv_12104_125 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 168 "include/linux/rbtree.h"
union __anonunion_ldv_12107_124 {
   struct __anonstruct_ldv_12104_125 ldv_12104 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 168 "include/linux/rbtree.h"
union __anonunion_ldv_12111_126 {
   unsigned long index ;
   void *freelist ;
};
#line 168 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_12099_122 ldv_12099 ;
   union __anonunion_ldv_12107_124 ldv_12107 ;
   union __anonunion_ldv_12111_126 ldv_12111 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_128 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_127 {
   struct __anonstruct_vm_set_128 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_127 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_12662 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 52 "include/linux/net.h"
typedef enum ldv_12662 socket_state;
#line 163 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 164
struct pipe_inode_info;
#line 165
struct inode;
#line 166
struct net;
#line 183
struct fasync_struct;
#line 183 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 125 "include/linux/net.h"
struct proto_ops;
#line 125 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 152
struct kiocb;
#line 153 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 946
struct ctl_table_header;
#line 964 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 984 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1026 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1034 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 1068 "include/linux/sysctl.h"
struct ratelimit_state {
   spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 117 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int stat[18U] ;
};
#line 44 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 55 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct driver_private;
#line 19
struct class;
#line 20
struct class_private;
#line 21
struct bus_type;
#line 22
struct bus_type_private;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 49 "include/linux/device.h"
struct device_attribute;
#line 49
struct driver_attribute;
#line 49 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 120 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 152 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 182
struct class_attribute;
#line 182 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 212
struct device_type;
#line 251 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 302 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 329 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 390 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 399
struct dma_coherent_mem;
#line 399 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 16 "include/asm-generic/scatterlist.h"
struct file_ra_state;
#line 17
struct user_struct;
#line 18
struct writeback_control;
#line 157 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 174 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_cpu)(struct device * , dma_addr_t  , unsigned long  ,
                                     size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_device)(struct device * , dma_addr_t  , unsigned long  ,
                                        size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 633
struct hrtimer_clock_base;
#line 634
struct hrtimer_cpu_base;
#line 643
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 648 "include/linux/dmaengine.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 444
struct net_device;
#line 445 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 252 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 253
struct sec_path;
#line 253 "include/linux/skbuff.h"
struct __anonstruct_ldv_18518_132 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 253 "include/linux/skbuff.h"
union __anonunion_ldv_18519_131 {
   __wsum csum ;
   struct __anonstruct_ldv_18518_132 ldv_18518 ;
};
#line 253 "include/linux/skbuff.h"
union __anonunion_ldv_18548_133 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 253 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_18519_131 ldv_18519 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u32 rxhash ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_18548_133 ldv_18548 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 435
struct dst_entry;
#line 482
struct rtable;
#line 114 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 96 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 99 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 564
struct dentry;
#line 271 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
};
#line 351
struct file_operations;
#line 51 "include/linux/miscdevice.h"
struct pm_qos_request_list;
#line 408 "include/linux/rculist.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 51 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 77 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 92 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 100 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 109 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 205 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 227 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 275 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 287 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 306 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 328 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 335 "include/linux/ethtool.h"
struct ethtool_rawip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __u8 hdata[64U] ;
};
#line 341 "include/linux/ethtool.h"
struct ethtool_ether_spec {
   __be16 ether_type ;
   __u8 frame_size ;
   __u8 eframe[16U] ;
};
#line 347 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 359 "include/linux/ethtool.h"
union __anonunion_h_u_135 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 359 "include/linux/ethtool.h"
union __anonunion_m_u_136 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 359 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_135 h_u ;
   union __anonunion_m_u_136 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 376 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 386 "include/linux/ethtool.h"
union __anonunion_h_u_137 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 386 "include/linux/ethtool.h"
union __anonunion_m_u_138 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 386 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_137 h_u ;
   union __anonunion_m_u_138 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 409 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 419 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 436 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_list {
   struct list_head list ;
   unsigned int count ;
};
#line 462 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rx_ntuple)(struct net_device * , u32  , void * ) ;
};
#line 593
struct prot_inuse;
#line 594 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct ipstats_mib {
   unsigned long mibs[31U] ;
};
#line 60 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 68 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 73 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 79 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 84 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 91 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 97 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[78U] ;
};
#line 103 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 109
struct proc_dir_entry;
#line 109 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 72 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 73
struct fib_rules_ops;
#line 74
struct xt_table;
#line 74 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   atomic_t rt_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 68 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
};
#line 28 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 68 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 314 "include/linux/in.h"
union __anonunion_in6_u_139 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 314 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_139 in6_u ;
};
#line 247 "include/linux/netfilter.h"
struct flowi;
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip4_u_141 {
   __be32 daddr ;
   __be32 saddr ;
   __u8 tos ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip6_u_142 {
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dn_u_143 {
   __le16 daddr ;
   __le16 saddr ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_nl_u_140 {
   struct __anonstruct_ip4_u_141 ip4_u ;
   struct __anonstruct_ip6_u_142 ip6_u ;
   struct __anonstruct_dn_u_143 dn_u ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ports_145 {
   __be16 sport ;
   __be16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_icmpt_146 {
   __u8 type ;
   __u8 code ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dnports_147 {
   __le16 sport ;
   __le16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_mht_148 {
   __u8 type ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_uli_u_144 {
   struct __anonstruct_ports_145 ports ;
   struct __anonstruct_icmpt_146 icmpt ;
   struct __anonstruct_dnports_147 dnports ;
   __be32 spi ;
   struct __anonstruct_mht_148 mht ;
};
#line 308 "include/linux/netfilter.h"
struct flowi {
   int oif ;
   int iif ;
   __u32 mark ;
   union __anonunion_nl_u_140 nl_u ;
   __u8 proto ;
   __u8 flags ;
   union __anonunion_uli_u_144 uli_u ;
   __u32 secid ;
};
#line 89 "include/linux/kdev_t.h"
struct nameidata;
#line 90
struct path;
#line 91
struct vfsmount;
#line 92 "include/linux/kdev_t.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_149 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_149 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 396 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 200
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 207
struct pid_namespace;
#line 207 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 164 "include/linux/pid.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 41
struct cred;
#line 418 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 186 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 187 "include/linux/quota.h"
typedef long long qsize_t;
#line 190 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 212
struct quota_format_type;
#line 213 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 276 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 307 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 318 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 332 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 345 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 391 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 567 "include/linux/fs.h"
union __anonunion_arg_151 {
   char *buf ;
   void *data ;
};
#line 567 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_150 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_151 arg ;
   int error ;
};
#line 567 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_150 read_descriptor_t;
#line 570 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 619
struct backing_dev_info;
#line 620 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 641
struct hd_struct;
#line 641
struct gendisk;
#line 641 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 710
struct posix_acl;
#line 711
struct inode_operations;
#line 711
struct file_lock;
#line 711
struct cdev;
#line 711 "include/linux/fs.h"
union __anonunion_ldv_22287_152 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 711 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_22287_152 ldv_22287 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_mark_entries ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 879 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 887 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 910 "include/linux/fs.h"
union __anonunion_f_u_153 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 910 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_153 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1033
struct files_struct;
#line 1033 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1034 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1039 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_155 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_154 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_155 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_154 fl_u ;
};
#line 1138 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1317
struct file_system_type;
#line 1317
struct super_operations;
#line 1317
struct xattr_handler;
#line 1317
struct mtd_info;
#line 1317 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
};
#line 1435 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1473
struct block_device_operations;
#line 1474 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1514 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1557 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1735 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 2187
struct bio;
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 361 "include/linux/netfilter.h"
struct ebt_table;
#line 362 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
   char *slabname ;
};
#line 470 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
#line 61
struct net_generic;
#line 62 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct netns_xfrm xfrm ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
};
#line 95 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
};
#line 54 "include/net/dcbnl.h"
struct vlan_group;
#line 55
struct netpoll_info;
#line 56
struct wireless_dev;
#line 57
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 111 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 130 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 210
struct neighbour;
#line 211
struct neigh_parms;
#line 236 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 241 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 283 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 489
struct Qdisc;
#line 489 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long tx_bytes ;
   unsigned long tx_packets ;
   unsigned long tx_dropped ;
};
#line 511 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 522 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 fill ;
   unsigned int last_qtail ;
};
#line 533 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 581 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct netdev_rx_queue *first ;
   atomic_t count ;
};
#line 590 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
};
#line 774
struct iw_handler_def;
#line 774
struct iw_public_data;
#line 774
struct net_bridge_port;
#line 774
struct macvlan_port;
#line 774
struct garp_port;
#line 774
struct rtnl_link_ops;
#line 774 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request_list *pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   int uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   struct netdev_queue rx_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned short reg_state ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct net_bridge_port *br_port ;
   struct macvlan_port *macvlan_port ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
   struct ethtool_rx_ntuple_list ethtool_ntuple_list ;
};
#line 1219
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 144 "include/linux/irq.h"
struct timer_rand_state;
#line 146
struct irqaction;
#line 94 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 2221 "include/linux/netdevice.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char *filename ;
   char *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 61 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 79 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
#line 135
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_158 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_158 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_160 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_161 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_162 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_163 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_164 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_165 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_159 {
   int _pad[28U] ;
   struct __anonstruct__kill_160 _kill ;
   struct __anonstruct__timer_161 _timer ;
   struct __anonstruct__rt_162 _rt ;
   struct __anonstruct__sigchld_163 _sigchld ;
   struct __anonstruct__sigfault_164 _sigfault ;
   struct __anonstruct__sigpoll_165 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_159 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 40 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 116 "include/linux/sem.h"
struct sem_undo_list;
#line 129 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 138 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 26 "include/asm-generic/cputime.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_168 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_168 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 87 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 100 "include/linux/rtmutex.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_28057_169 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_170 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_171 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_28057_169 ldv_28057 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_170 type_data ;
   union __anonunion_payload_171 payload ;
};
#line 291
struct audit_context;
#line 69 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 263
struct futex_pi_state;
#line 264
struct robust_list_head;
#line 265
struct bio_list;
#line 266
struct fs_struct;
#line 267
struct perf_event_context;
#line 149 "include/linux/sched.h"
struct cfs_rq;
#line 370
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_172 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_172 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 411 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 453 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 461 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 468 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 485 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 521
struct tty_struct;
#line 521
struct taskstats;
#line 521
struct tty_audit_buf;
#line 521 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
};
#line 666 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 708
struct reclaim_state;
#line 709 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 727 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 999
struct io_context;
#line 1022
struct rq;
#line 1023 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*moved_group)(struct task_struct * , int  ) ;
};
#line 1086 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1091 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1126 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1152
struct rt_rq;
#line 1152 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1169
struct mem_cgroup;
#line 1169 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long bytes ;
   unsigned long memsw_bytes ;
};
#line 1503
struct css_set;
#line 1503
struct compat_robust_list_head;
#line 1503 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
};
#line 81 "include/linux/security.h"
struct xfrm_policy;
#line 82
struct xfrm_state;
#line 103
struct request_sock;
#line 3001 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 37 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 95 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 784 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 93
struct neigh_table;
#line 93 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   struct net_device *dev ;
   unsigned long used ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t probes ;
   rwlock_t lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   atomic_t refcnt ;
   int (*output)(struct sk_buff * ) ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   struct neigh_ops  const  *ops ;
   u8 primary_key[0U] ;
};
#line 116 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 126 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 136 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct pneigh_entry **phash_buckets ;
};
#line 362
struct dn_route;
#line 362 "include/net/neighbour.h"
union __anonunion_ldv_32364_177 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 362 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[14U] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[1U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_32364_177 ldv_32364 ;
};
#line 100 "include/net/sock.h"
struct __anonstruct_socket_lock_t_178 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 100 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_178 socket_lock_t;
#line 100
struct proto;
#line 101 "include/net/sock.h"
union __anonunion_ldv_32506_179 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_32512_180 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_32520_181 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 101 "include/net/sock.h"
struct sock_common {
   union __anonunion_ldv_32506_179 ldv_32506 ;
   atomic_t skc_refcnt ;
   int skc_tx_queue_mapping ;
   union __anonunion_ldv_32512_180 ldv_32512 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_32520_181 ldv_32520 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
#line 153 "include/net/sock.h"
struct __anonstruct_sk_backlog_182 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   int len ;
};
#line 153 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_182 sk_backlog ;
   struct socket_wq *sk_wq ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2U] ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   __u32 sk_rxhash ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct ucred sk_peercred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 694
struct request_sock_ops;
#line 695
struct timewait_sock_ops;
#line 696
struct inet_hashinfo;
#line 697
struct raw_hashinfo;
#line 698
struct udp_table;
#line 698 "include/net/sock.h"
union __anonunion_h_183 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 698 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_183 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 172 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 185 "include/linux/drbd.h"
struct __anonstruct_ldv_33657_184 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned short _pad : 11 ;
};
#line 185 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_33657_184 ldv_33657 ;
   unsigned int i ;
};
#line 110 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 111
struct crypto_async_request;
#line 112
struct crypto_aead;
#line 113
struct crypto_blkcipher;
#line 114
struct crypto_hash;
#line 115
struct crypto_rng;
#line 116
struct crypto_tfm;
#line 117
struct crypto_type;
#line 118
struct aead_givcrypt_request;
#line 119
struct skcipher_givcrypt_request;
#line 125 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 134 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 147 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 173 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 187 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 192 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 211 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 226 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 243 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 252 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 258 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 267 "include/linux/crypto.h"
union __anonunion_cra_u_185 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 267 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_185 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 319 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 339 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 354 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 363 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 371 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 383 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 390 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 398 "include/linux/crypto.h"
union __anonunion_crt_u_186 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 398 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_186 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 427 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 431 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 435 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 447 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 451 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 142 "include/linux/jhash.h"
struct request_values {

};
#line 145 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 363 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 80 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 89 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   int make_it_fail ;
   unsigned long stamp ;
   int in_flight[2U] ;
   struct disk_stats *dkstats ;
   struct rcu_head rcu_head ;
};
#line 128 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 135
struct request_queue;
#line 135
struct blk_integrity;
#line 135 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct work_struct async_notify ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 15 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 20 "include/linux/writeback.h"
struct writeback_control {
   struct backing_dev_info *bdi ;
   struct super_block *sb ;
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   unsigned long wb_start ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
   unsigned char no_nrwrite_index_update : 1 ;
   unsigned char sb_pinned : 1 ;
};
#line 78
struct bdi_writeback;
#line 37 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 44 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct list_head list ;
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   struct task_struct *task ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 60 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   struct rcu_head rcu_head ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   void (*unplug_io_fn)(struct backing_dev_info * , struct page * ) ;
   void *unplug_io_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head wb_list ;
   unsigned long wb_mask ;
   unsigned int wb_cnt ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 30 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned short cgroup_changed ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 90 "include/linux/ioprio.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 52 "include/linux/bio.h"
struct bio_integrity_payload;
#line 55 "include/linux/bio.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 56 "include/linux/bio.h"
typedef void bio_destructor_t(struct bio * );
#line 57 "include/linux/bio.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 236 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 513 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_LINUX_BLOCK = 8,
    REQ_TYPE_ATA_TASKFILE = 9,
    REQ_TYPE_ATA_PC = 10
} ;
#line 99 "include/linux/blkdev.h"
union __anonunion_ldv_37290_194 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 99 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_37290_194 ldv_37290 ;
   void *elevator_private ;
   void *elevator_private2 ;
   void *elevator_private3 ;
   struct gendisk *rq_disk ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 20 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 22 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef int elevator_queue_empty_fn(struct request_queue * );
#line 24 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 28 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 29 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 30 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 31 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 33 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 34 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 35 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_queue_empty_fn *elevator_queue_empty_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 64 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 72 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 84 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
};
#line 264 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 265 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 266 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 267 "include/linux/blkdev.h"
typedef void unplug_fn(struct request_queue * );
#line 268 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 276 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 278 "include/linux/blkdev.h"
typedef void prepare_flush_fn(struct request_queue * , struct request * );
#line 279 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 280 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 281 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 282
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 289 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 295 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 304 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char no_cluster ;
   signed char discard_zeroes_data ;
};
#line 331 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unplug_fn *unplug_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   prepare_flush_fn *prepare_flush_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct timer_list unplug_timer ;
   int unplug_thresh ;
   unsigned long unplug_delay ;
   struct work_struct unplug_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   unsigned int ordered ;
   unsigned int next_ordered ;
   unsigned int ordseq ;
   int orderr ;
   int ordcolor ;
   struct request pre_flush_rq ;
   struct request bar_rq ;
   struct request post_flush_rq ;
   struct request *orig_bar_rq ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 1244 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1265 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1266 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1267 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1268 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1269 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1310 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*locked_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   struct module *owner ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 492 "include/linux/ipv6.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   __be32 v4daddr ;
   __u32 avl_height ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 49 "include/linux/route.h"
union __anonunion_u_200 {
   struct dst_entry dst ;
};
#line 49
struct in_device;
#line 49 "include/linux/route.h"
struct rtable {
   union __anonunion_u_200 u ;
   struct flowi fl ;
   struct in_device *idev ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_iif ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   struct inet_peer *peer ;
};
#line 227 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1560 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 346 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 376 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 392 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 401 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 424 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header head ;
   u32 barrier ;
   u32 pad ;
};
#line 431 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header head ;
   u32 barrier ;
   u32 set_size ;
};
#line 445 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 458 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 471 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header head ;
   u64 uuid[6U] ;
};
#line 482 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_segment_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 492 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header head ;
   u32 state ;
};
#line 497 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header head ;
   u32 mask ;
   u32 val ;
};
#line 503 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header head ;
   u32 retcode ;
};
#line 597 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   struct p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
};
#line 627
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 634 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 655
struct drbd_work;
#line 665 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 669
struct drbd_tl_epoch;
#line 700 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_req ;
};
#line 708 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 752 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node colision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   u64 block_id ;
};
#line 804
struct drbd_bitmap;
#line 805 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 867 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 73 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   int dp_volume ;
   int dp_interval ;
   int throttle_th ;
   int hold_off_th ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
};
#line 137 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct file *lo_file ;
   struct file *md_file ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 909 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 916
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2,
    WO_bio_barrier = 3
} ;
#line 923 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work md_sync_work ;
   struct drbd_work delay_probe_work ;
   struct drbd_work uuid_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   struct timer_list delay_probe_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_mark_left ;
   unsigned long rs_mark_time ;
   unsigned long rs_same_csum ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   struct list_head delay_probes ;
   int data_delay ;
   unsigned int delay_seq ;
   struct timeval dps_time ;
   unsigned int dp_volume_last ;
   int c_sync_rate ;
   atomic_t new_c_uuid ;
};
#line 1113
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2353 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   atomic_t bm_async_io ;
   wait_queue_head_t bm_io_wait ;
   unsigned long bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 1396 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___0;
#line 1448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___5;
#line 249 "include/linux/timer.h"
enum hrtimer_restart;
#line 444 "include/linux/elf.h"
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 139 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 146
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_MASK = 31
} ;
#line 1228 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 249 "include/linux/timer.h"
enum hrtimer_restart;
#line 444 "include/linux/elf.h"
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 54 "include/linux/smp_lock.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 146 "include/linux/idr.h"
struct cgroupfs_root;
#line 148
struct cgroup;
#line 149
struct css_id;
#line 56 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 190 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 243 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 166 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_MAX_CMD = 40,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 741 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 747 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 903 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    send_canceled = 5,
    send_failed = 6,
    handed_over_to_network = 7,
    connection_lost_while_pending = 8,
    recv_acked_by_peer = 9,
    write_acked_by_peer = 10,
    write_acked_by_peer_and_sis = 11,
    conflict_discarded_by_peer = 12,
    neg_acked = 13,
    barrier_acked = 14,
    data_received = 15,
    read_completed_with_error = 16,
    read_ahead_completed_with_error = 17,
    write_completed_with_error = 18,
    completed_ok = 19,
    nothing = 20
} ;
#line 283 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 249 "include/linux/timer.h"
enum hrtimer_restart;
#line 444 "include/linux/elf.h"
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 180 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 251
enum drbd_state_ret_codes {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 477 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header head ;
   u64 uuid ;
};
#line 525
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 529 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 546 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe {
   struct p_header head ;
   u32 seq_num ;
   u32 offset ;
};
#line 552 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct delay_probe {
   struct list_head list ;
   unsigned int seq_num ;
   struct timeval time ;
};
#line 733
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BARRIER_DONE = 2,
    EV_BECAME_LAST = 3,
    EV_CLEANUP = 32
} ;
#line 1121
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1434
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct flush_work {
   struct drbd_work w ;
   struct drbd_epoch *epoch ;
};
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3370
enum receive_bitmap_ret {
    OK = 0,
    DONE = 1,
    FAILED = 2
} ;
#line 3722 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef int (*drbd_cmd_handler_f)(struct drbd_conf * , struct p_header * );
#line 4359 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4529 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header * ) ;
};
#line 249 "include/linux/timer.h"
enum hrtimer_restart;
#line 444 "include/linux/elf.h"
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 113 "include/linux/bio.h"
enum bio_rw_flags {
    BIO_RW = 0,
    BIO_RW_FAILFAST_DEV = 1,
    BIO_RW_FAILFAST_TRANSPORT = 2,
    BIO_RW_FAILFAST_DRIVER = 3,
    BIO_RW_AHEAD = 4,
    BIO_RW_BARRIER = 5,
    BIO_RW_SYNCIO = 6,
    BIO_RW_UNPLUG = 7,
    BIO_RW_META = 8,
    BIO_RW_DISCARD = 9,
    BIO_RW_NOIDLE = 10
} ;
#line 332 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 249 "include/linux/timer.h"
enum hrtimer_restart;
#line 148 "include/linux/slab.h"
enum kobj_ns_type;
#line 148
enum kobj_ns_type;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_202 {
   u32 pos ;
   u32 extent ;
};
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_202 updates[62U] ;
   u32 xor_sum ;
};
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 95 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct drbd_atodb_wait {
   atomic_t count ;
   struct completion io_done ;
   struct drbd_conf *mdev ;
   int error ;
};
#line 146 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 249 "include/linux/timer.h"
enum hrtimer_restart;
#line 444 "include/linux/elf.h"
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 481 "include/linux/module.h"
typedef unsigned int pao_T_____3;
#line 481 "include/linux/module.h"
typedef unsigned int pao_T_____4;
#line 481 "include/linux/module.h"
typedef unsigned int pao_T_____5;
#line 481 "include/linux/module.h"
typedef unsigned int pao_T_____6;
#line 177 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 2007 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_29639 {
    OK___0 = 0,
    FAILED___0 = 1,
    DONE___0 = 2
} ;
#line 3377 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 reserved_u32[4U] ;
};
#line 3788 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 249 "include/linux/timer.h"
enum hrtimer_restart;
#line 444 "include/linux/elf.h"
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 170 "include/linux/types.h"
typedef __u32 __le32;
#line 172 "include/linux/types.h"
typedef __u64 __le64;
#line 249 "include/linux/timer.h"
enum hrtimer_restart;
#line 35 "include/linux/kmod.h"
struct subprocess_info;
#line 60
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 444 "include/linux/elf.h"
enum kobj_ns_type;
#line 444
enum kobj_ns_type;
#line 38 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 716 "include/linux/module.h"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 63 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 158 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
   kernel_cap_t eff_cap ;
   __u32 loginuid ;
   __u32 sessionid ;
   __u32 sid ;
};
#line 88 "include/linux/drbd.h"
enum drbd_ret_codes {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    AFTER_LAST_ERR_CODE = 154
} ;
#line 300 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 336 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 880 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 103 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 124 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 133 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 34 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_dp_volume = 71,
    T_dp_interval = 72,
    T_throttle_th = 73,
    T_hold_off_th = 74,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 105 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2022 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )(*((unsigned long *)addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n .balign 8 \n .quad 661b\n .quad 663f\n\t .byte (4*32+23)\n\t .byte 662b-661b\n\t .byte 664f-663f\n\t .byte 0xff + (664f-663f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n663:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n664:\n.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 47 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 49
  tmp = __arch_hweight64((__u64 )w);
#line 49
  return (tmp);
}
}
#line 182
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 192
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 63 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 139 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 253
extern int printk(char const   *  , ...) ;
#line 256
extern int __printk_ratelimit(char const   * ) ;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1922;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1922;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1922;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1922;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1922: ;
#line 14
  return (pfo_ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4343: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4343;
  } else {

  }

#line 19
  return (order);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 550 "include/linux/lockdep.h"
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 107 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 151
extern int mutex_trylock(struct mutex * ) ;
#line 154
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) ;
#line 158
int ldv_mutex_trylock_7(struct mutex *ldv_func_arg1 ) ;
#line 160
extern void mutex_unlock(struct mutex * ) ;
#line 163
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) ;
#line 27
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 28
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 31
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 35
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 39
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 43
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 44
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 47
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 51
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 55
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5835;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5835;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5835;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5835;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5835: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 92 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 271 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 273
  return (& lock->ldv_5593.rlock);
}
}
#line 307 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 309
  _raw_spin_lock_irq(& lock->ldv_5593.rlock);
#line 310
  return;
}
}
#line 332 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 334
  _raw_spin_unlock_irq(& lock->ldv_5593.rlock);
#line 335
  return;
}
}
#line 337 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 339
  _raw_spin_unlock_irqrestore(& lock->ldv_5593.rlock, flags);
#line 340
  return;
}
}
#line 53 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 62
extern void vfree(void const   * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 156
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 300 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 303 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 305
  tmp = alloc_pages_current(gfp_mask, order);
#line 305
  return (tmp);
}
}
#line 316
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 328
extern void __free_pages(struct page * , unsigned int  ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return ((char const   *)kobj->name);
}
}
#line 108 "include/linux/rcupdate.h"
extern int debug_lockdep_rcu_enabled(void) ;
#line 159 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 


  {
#line 161
  return (1);
}
}
#line 386 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 390
  return;
}
}
#line 28 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 144 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 87 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0 && ! __warned) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        __warned = 1;
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13502: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13502;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 62 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 64
  return;
}
}
#line 146 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[22U] ;
#line 152 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 154
  if (size == 0UL) {
#line 155
    return (0);
  } else {

  }
#line 157
  if (size <= 8UL) {
#line 158
    return (3);
  } else {

  }
#line 160
  if (size > 64UL && size <= 96UL) {
#line 161
    return (1);
  } else {

  }
#line 162
  if (size > 128UL && size <= 192UL) {
#line 163
    return (2);
  } else {

  }
#line 164
  if (size <= 8UL) {
#line 164
    return (3);
  } else {

  }
#line 165
  if (size <= 16UL) {
#line 165
    return (4);
  } else {

  }
#line 166
  if (size <= 32UL) {
#line 166
    return (5);
  } else {

  }
#line 167
  if (size <= 64UL) {
#line 167
    return (6);
  } else {

  }
#line 168
  if (size <= 128UL) {
#line 168
    return (7);
  } else {

  }
#line 169
  if (size <= 256UL) {
#line 169
    return (8);
  } else {

  }
#line 170
  if (size <= 512UL) {
#line 170
    return (9);
  } else {

  }
#line 171
  if (size <= 1024UL) {
#line 171
    return (10);
  } else {

  }
#line 172
  if (size <= 2048UL) {
#line 172
    return (11);
  } else {

  }
#line 173
  if (size <= 4096UL) {
#line 173
    return (12);
  } else {

  }
#line 178
  if (size <= 8192UL) {
#line 178
    return (13);
  } else {

  }
#line 179
  if (size <= 16384UL) {
#line 179
    return (14);
  } else {

  }
#line 180
  if (size <= 32768UL) {
#line 180
    return (15);
  } else {

  }
#line 181
  if (size <= 65536UL) {
#line 181
    return (16);
  } else {

  }
#line 182
  if (size <= 131072UL) {
#line 182
    return (17);
  } else {

  }
#line 183
  if (size <= 262144UL) {
#line 183
    return (18);
  } else {

  }
#line 184
  if (size <= 524288UL) {
#line 184
    return (19);
  } else {

  }
#line 185
  if (size <= 1048576UL) {
#line 185
    return (20);
  } else {

  }
#line 186
  if (size <= 2097152UL) {
#line 186
    return (21);
  } else {

  }
#line 187
  return (-1);
}
}
#line 204 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 206
  tmp = kmalloc_index(size);
#line 206
  index = tmp;
#line 208
  if (index == 0) {
#line 209
    return (0);
  } else {

  }
#line 211
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 215
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 218
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 454 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 457
  if ((unsigned long )dev->init_name != (unsigned long )((char const   */* const  */)0)) {
#line 458
    return ((char const   *)dev->init_name);
  } else {

  }
#line 460
  tmp = kobject_name(& dev->kobj);
#line 460
  return (tmp);
}
}
#line 632
extern char const   *dev_driver_string(struct device  const  * ) ;
#line 592 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 594
  return ((void *)(((unsigned long )(((long )page + 24189255811072L) / 56L) << 12) + 0xffff880000000000UL));
}
}
#line 2189 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 368 "include/linux/sched.h"
extern void schedule(void) ;
#line 2343
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 68 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 70
  pagefault_disable();
#line 71
  tmp = lowmem_page_address(page);
#line 71
  return (tmp);
}
}
#line 360 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 363
extern void bio_put(struct bio * ) ;
#line 366
extern void bio_endio(struct bio * , int  ) ;
#line 375
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 841 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 843
  return ((bdev->bd_disk)->queue);
}
}
#line 1012
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * , unsigned long  ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 142
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 145
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 145
    tmp = _drbd_insert_fault(mdev, type);
#line 145
    if (tmp != 0U) {
#line 145
      tmp___0 = 1;
    } else {
#line 145
      tmp___0 = 0;
    }
  } else {
#line 145
    tmp___0 = 0;
  }
#line 145
  return (tmp___0);
}
}
#line 165
struct ratelimit_state drbd_ratelimit_state ;
#line 1140
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) ;
#line 1362
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1363
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1364
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1365
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1366
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1367
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1369
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1372
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1374
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1375
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1376
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1377
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1378
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1379
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1381
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1382
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1383
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1384
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1386
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1387
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1388
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1391
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1394
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1397
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) ;
#line 1398
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1400
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1415
rwlock_t global_state_lock ;
#line 1432
char *ppsize(char *buf , unsigned long long size ) ;
#line 1451
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1695 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  int rv ;

  {
#line 1701
  _raw_read_lock(& global_state_lock);
#line 1702
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1703
  _raw_read_unlock(& global_state_lock);
#line 1705
  return (rv);
}
}
#line 1726 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1728
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1730
  if (forcedetach == 0) {
#line 1731
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1731
    if (tmp___1 != 0) {
#line 1732
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1732
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1732
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1734
    goto ldv_41984;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1739
  if ((int )mdev->state.ldv_33657.disk > 2) {
#line 1740
    __ns.i = mdev->state.i;
#line 1740
    __ns.ldv_33657.disk = 2U;
#line 1740
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1741
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1741
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1741
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1744
  goto ldv_41984;
  }
  ldv_41984: ;
#line 1747
  return;
}
}
#line 1757 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1760
  if (error != 0) {
#line 1762
    tmp = spinlock_check(& mdev->req_lock);
#line 1762
    flags = _raw_spin_lock_irqsave(tmp);
#line 1763
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1764
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1766
  return;
}
}
#line 1792 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1794
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1797
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1800
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2062 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 2065
  tmp = atomic_dec_and_test(& mdev->local_cnt);
#line 2065
  if (tmp != 0) {
#line 2066
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2067
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 2067
  if (tmp___2 < 0) {
#line 2067
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2067
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2067
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) >= 0 ) in %s:%d\n", tmp___1,
           tmp___0, (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
           2067);
  } else {

  }
#line 2068
  return;
}
}
#line 2071 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2075
  atomic_inc(& mdev->local_cnt);
#line 2076
  io_allowed = (unsigned int )mdev->state.ldv_33657.disk >= (unsigned int )mins;
#line 2077
  if (io_allowed == 0) {
#line 2078
    put_ldev(mdev);
  } else {

  }
#line 2079
  return (io_allowed);
}
}
#line 2325 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_blk_run_queue(struct request_queue *q ) 
{ 


  {
#line 2327
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned long )q->unplug_fn != (unsigned long )((unplug_fn *)0)) {
#line 2328
    (*(q->unplug_fn))(q);
  } else {

  }
#line 2329
  return;
}
}
#line 2339 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 2343
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2343
  if (tmp != 0) {
#line 2344
    return;
  } else {

  }
#line 2346
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0, 1UL);
#line 2348
  if (r != 0) {
#line 2349
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 2350
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2350
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2350
    printk("<3>%s %s: meta data flush failed with status %d, disabling md-flushes\n",
           tmp___1, tmp___0, r);
  } else {

  }
#line 2352
  return;
}
}
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) ;
#line 137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_is_locked(struct drbd_bitmap *b ) 
{ 
  int tmp ;

  {
#line 139
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& b->bm_flags));
#line 139
  return (tmp);
}
}
#line 143 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 145
  b = mdev->bitmap;
#line 146
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 146
  if (tmp == 0) {
#line 147
    return;
  } else {

  }
#line 148
  tmp___9 = get_current();
#line 148
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 148
    tmp___7 = get_current();
#line 148
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 148
      tmp___5 = get_current();
#line 148
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 148
        tmp___3 = get_current();
#line 148
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 148
        tmp___4 = (char *)"worker";
      }
#line 148
      tmp___6 = tmp___4;
    } else {
#line 148
      tmp___6 = (char *)"asender";
    }
#line 148
    tmp___8 = tmp___6;
  } else {
#line 148
    tmp___8 = (char *)"receiver";
  }
#line 148
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 148
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 148
  printk("<3>%s %s: FIXME %s in %s, bitmap locked for \'%s\' by %s\n", tmp___11, tmp___10,
         tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
         (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 149
  return;
}
}
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  char *tmp___10 ;
  struct task_struct *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;

  {
#line 160
  b = mdev->bitmap;
#line 163
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 164
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 164
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 164
    printk("<3>%s %s: FIXME no bitmap in drbd_bm_lock!?\n", tmp___0, tmp);
#line 165
    return;
  } else {

  }
#line 168
  tmp___1 = ldv_mutex_trylock_7(& b->bm_change);
#line 168
  trylock_failed = tmp___1 == 0;
#line 170
  if (trylock_failed != 0) {
#line 171
    tmp___11 = get_current();
#line 171
    if ((unsigned long )tmp___11 != (unsigned long )mdev->receiver.task) {
#line 171
      tmp___9 = get_current();
#line 171
      if ((unsigned long )tmp___9 != (unsigned long )mdev->asender.task) {
#line 171
        tmp___7 = get_current();
#line 171
        if ((unsigned long )tmp___7 != (unsigned long )mdev->worker.task) {
#line 171
          tmp___5 = get_current();
#line 171
          tmp___6 = (char *)(& tmp___5->comm);
        } else {
#line 171
          tmp___6 = (char *)"worker";
        }
#line 171
        tmp___8 = tmp___6;
      } else {
#line 171
        tmp___8 = (char *)"asender";
      }
#line 171
      tmp___10 = tmp___8;
    } else {
#line 171
      tmp___10 = (char *)"receiver";
    }
#line 171
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 171
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 171
    printk("<4>%s %s: %s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
           tmp___13, tmp___12, tmp___10, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
           (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 179
    ldv_mutex_lock_8(& b->bm_change);
  } else {

  }
#line 181
  tmp___16 = __test_and_set_bit(0, (unsigned long volatile   *)(& b->bm_flags));
#line 181
  if (tmp___16 != 0) {
#line 182
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 182
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 182
    printk("<3>%s %s: FIXME bitmap already locked in bm_lock\n", tmp___15, tmp___14);
  } else {

  }
#line 184
  b->bm_why = why;
#line 185
  b->bm_task = get_current();
#line 186
  return;
}
}
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 190
  b = mdev->bitmap;
#line 191
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 192
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 192
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 192
    printk("<3>%s %s: FIXME no bitmap in drbd_bm_unlock!?\n", tmp___0, tmp);
#line 193
    return;
  } else {

  }
#line 196
  tmp___3 = __test_and_clear_bit(0, (unsigned long volatile   *)(& (mdev->bitmap)->bm_flags));
#line 196
  if (tmp___3 == 0) {
#line 197
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 197
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 197
    printk("<3>%s %s: FIXME bitmap not locked in bm_unlock\n", tmp___2, tmp___1);
  } else {

  }
#line 199
  b->bm_why = 0;
#line 200
  b->bm_task = 0;
#line 201
  ldv_mutex_unlock_9(& b->bm_change);
#line 202
  return;
}
}
#line 205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ,
                                     enum km_type  const  km ) 
{ 
  struct page *page ;
  unsigned long page_nr ;
  long tmp ;
  void *tmp___0 ;

  {
#line 211
  page_nr = offset >> 9;
#line 212
  tmp = __builtin_expect(b->bm_number_of_pages <= page_nr, 0L);
#line 212
  if (tmp != 0L) {
#line 212
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (212), "i" (12UL));
    ldv_42261: ;
#line 212
    goto ldv_42261;
  } else {

  }
#line 213
  page = *(b->bm_pages + page_nr);
#line 215
  tmp___0 = kmap_atomic(page, km);
#line 215
  return ((unsigned long *)tmp___0);
}
}
#line 218 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ) 
{ 
  unsigned long *tmp ;

  {
#line 220
  tmp = __bm_map_paddr(b, offset, KM_IRQ1);
#line 220
  return (tmp);
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 225
  pagefault_enable();
#line 226
  return;
}
}
#line 228 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 230
  return;
}
}
#line 252 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 255
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 256
    return;
  } else {

  }
#line 258
  i = 0UL;
#line 258
  goto ldv_42280;
  ldv_42279: ;
#line 259
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 260
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 263
    goto ldv_42278;
  } else {

  }
#line 265
  __free_pages(*(pages + i), 0U);
#line 266
  *(pages + i) = 0;
  ldv_42278: 
#line 258
  i = i + 1UL;
  ldv_42280: ;
#line 258
  if (i < number) {
#line 259
    goto ldv_42279;
  } else {

  }

#line 263
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 272
  if (v != 0) {
#line 273
    vfree((void const   *)ptr);
  } else {
#line 275
    kfree((void const   *)ptr);
  }
#line 276
  return;
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 283
  old_pages = b->bm_pages;
#line 285
  vmalloced = 0U;
#line 286
  have = b->bm_number_of_pages;
#line 288
  tmp = __builtin_expect(have == 0UL, 0L);
#line 288
  if (tmp != 0L) {
#line 288
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 288
    if (tmp___0 != 0L) {
#line 288
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (288), "i" (12UL));
      ldv_42297: ;
#line 288
      goto ldv_42297;
    } else {

    }
  } else {

  }
#line 289
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 289
  if (tmp___1 != 0L) {
#line 289
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 289
    if (tmp___2 != 0L) {
#line 289
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (289), "i" (12UL));
      ldv_42298: ;
#line 289
      goto ldv_42298;
    } else {

    }
  } else {

  }
#line 291
  if (have == want) {
#line 292
    return (old_pages);
  } else {

  }
#line 299
  bytes = (unsigned int )want * 8U;
#line 300
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 300
  new_pages = (struct page **)tmp___3;
#line 301
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 302
    tmp___4 = vmalloc((unsigned long )bytes);
#line 302
    new_pages = (struct page **)tmp___4;
#line 303
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 304
      return (0);
    } else {

    }
#line 305
    vmalloced = 1U;
  } else {

  }
#line 308
  memset((void *)new_pages, 0, (size_t )bytes);
#line 309
  if (want >= have) {
#line 310
    i = 0U;
#line 310
    goto ldv_42300;
    ldv_42299: 
#line 311
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 310
    i = i + 1U;
    ldv_42300: ;
#line 310
    if ((unsigned long )i < have) {
#line 311
      goto ldv_42299;
    } else {

    }

#line 312
    goto ldv_42303;
    ldv_42302: 
#line 313
    page = alloc_pages(131282U, 0U);
#line 314
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 315
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 316
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 317
      return (0);
    } else {

    }
#line 319
    *(new_pages + (unsigned long )i) = page;
#line 312
    i = i + 1U;
    ldv_42303: ;
#line 312
    if ((unsigned long )i < want) {
#line 313
      goto ldv_42302;
    } else {

    }

  } else {
#line 322
    i = 0U;
#line 322
    goto ldv_42306;
    ldv_42305: 
#line 323
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 322
    i = i + 1U;
    ldv_42306: ;
#line 322
    if ((unsigned long )i < want) {
#line 323
      goto ldv_42305;
    } else {

    }

  }
#line 329
  if (vmalloced != 0U) {
#line 330
    set_bit(2U, (unsigned long volatile   *)(& b->bm_flags));
  } else {
#line 332
    clear_bit(2, (unsigned long volatile   *)(& b->bm_flags));
  }
#line 334
  return (new_pages);
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 343
  b = mdev->bitmap;
#line 344
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 344
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 344
  if (tmp != 0L) {
#line 344
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       344);
  } else {

  }
#line 344
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 345
  tmp___0 = kzalloc(376UL, 208U);
#line 345
  b = (struct drbd_bitmap *)tmp___0;
#line 346
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 347
    return (-12);
  } else {

  }
#line 348
  spinlock_check(& b->bm_lock);
#line 348
  __raw_spin_lock_init(& b->bm_lock.ldv_5593.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 349
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 350
  __init_waitqueue_head(& b->bm_io_wait, & __key___1);
#line 352
  mdev->bitmap = b;
#line 354
  return (0);
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 359
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 359
  if (_b != 0) {
#line 359
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 359
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 359
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_capacity", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           359);
  } else {

  }
#line 359
  if (_b != 0) {
#line 359
    return (0UL);
  } else {

  }
#line 360
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 367
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 367
  if (_b != 0) {
#line 367
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 367
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 367
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_cleanup", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           367);
  } else {

  }
#line 367
  if (_b != 0) {
#line 367
    return;
  } else {

  }
#line 368
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 369
  tmp___1 = constant_test_bit(2U, (unsigned long const volatile   *)(& (mdev->bitmap)->bm_flags));
#line 369
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, tmp___1);
#line 370
  kfree((void const   *)mdev->bitmap);
#line 371
  mdev->bitmap = 0;
#line 372
  return;
}
}
#line 379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  int cleared ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 381
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 382
  w = b->bm_bits >> 6;
#line 383
  cleared = 0;
#line 386
  p_addr = bm_map_paddr(b, w);
#line 387
  bm = p_addr + (w & 511UL);
#line 388
  if (b->bm_words > w) {
#line 389
    tmp = hweight_long(*bm & ~ mask);
#line 389
    cleared = (int )tmp;
#line 390
    *bm = *bm & mask;
#line 391
    w = w + (size_t )1;
#line 391
    bm = bm + 1;
  } else {

  }
#line 394
  if (b->bm_words > w) {
#line 395
    tmp___0 = hweight_long(*bm);
#line 395
    cleared = (int )((unsigned int )tmp___0 + (unsigned int )cleared);
#line 396
    *bm = 0UL;
  } else {

  }
#line 398
  bm_unmap(p_addr);
#line 399
  return (cleared);
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  unsigned long *p_addr ;
  unsigned long *bm ;

  {
#line 404
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 405
  w = b->bm_bits >> 6;
#line 408
  p_addr = bm_map_paddr(b, w);
#line 409
  bm = p_addr + (w & 511UL);
#line 410
  if (b->bm_words > w) {
#line 411
    *bm = *bm | ~ mask;
#line 412
    bm = bm + 1;
#line 412
    w = w + (size_t )1;
  } else {

  }
#line 415
  if (b->bm_words > w) {
#line 416
    *bm = 0xffffffffffffffffUL;
  } else {

  }
#line 418
  bm_unmap(p_addr);
#line 419
  return;
}
}
#line 421 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_count_bits(struct drbd_bitmap *b , int const   swap_endian ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long offset ;
  unsigned long bits ;
  unsigned long i ;
  unsigned long do_now ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 423
  offset = 0UL;
#line 424
  bits = 0UL;
#line 427
  goto ldv_42362;
  ldv_42361: 
#line 428
  __min1 = b->bm_words - offset;
#line 428
  __min2 = 512UL;
#line 428
  do_now = __min1 < __min2 ? __min1 : __min2;
#line 428
  i = do_now;
#line 429
  p_addr = __bm_map_paddr(b, offset, KM_USER0);
#line 430
  bm = p_addr + (offset & 511UL);
#line 431
  goto ldv_42358;
  ldv_42357: 
#line 436
  tmp = bm;
#line 436
  bm = bm + 1;
#line 436
  tmp___0 = hweight_long(*tmp);
#line 436
  bits = tmp___0 + bits;
  ldv_42358: 
#line 431
  tmp___1 = i;
#line 431
  i = i - 1UL;
#line 431
  if (tmp___1 != 0UL) {
#line 432
    goto ldv_42357;
  } else {

  }
#line 438
  __bm_unmap(p_addr, KM_USER0);
#line 439
  offset = offset + do_now;
#line 440
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                440, 0);
#line 440
  _cond_resched();
  ldv_42362: ;
#line 427
  if (b->bm_words > offset) {
#line 428
    goto ldv_42361;
  } else {

  }

#line 443
  return (bits);
}
}
#line 446 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 448
  tmp = __bm_count_bits(b, 0);
#line 448
  return (tmp);
}
}
#line 451 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits_swap_endian(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 453
  tmp = __bm_count_bits(b, 1);
#line 453
  return (tmp);
}
}
#line 457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 464
  end = offset + len;
#line 466
  if (b->bm_words < end) {
#line 467
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 468
    return;
  } else {

  }
#line 471
  goto ldv_42385;
  ldv_42384: 
#line 472
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 472
  __min2 = end;
#line 472
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 473
  p_addr = bm_map_paddr(b, offset);
#line 474
  bm = p_addr + (offset & 511UL);
#line 475
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 476
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
#line 478
    goto ldv_42383;
  } else {

  }
#line 480
  memset((void *)bm, c, do_now * 8UL);
#line 481
  bm_unmap(p_addr);
#line 482
  offset = offset + do_now;
  ldv_42385: ;
#line 471
  if (offset < end) {
#line 472
    goto ldv_42384;
  } else {

  }
  ldv_42383: ;
#line 476
  return;
}
}
#line 494 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;
  size_t tmp___5 ;
  sector_t tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;

  {
#line 496
  b = mdev->bitmap;
#line 499
  opages = 0;
#line 500
  err = 0;
#line 503
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 503
  if (_b != 0) {
#line 503
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 503
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 503
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_resize", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           503);
  } else {

  }
#line 503
  if (_b != 0) {
#line 503
    return (-12);
  } else {

  }
#line 505
  drbd_bm_lock(mdev, (char *)"resize");
#line 507
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 507
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 507
  printk("<6>%s %s: drbd_bm_resize called with capacity == %llu\n", tmp___2, tmp___1,
         (unsigned long long )capacity);
#line 510
  if (b->bm_dev_capacity == capacity) {
#line 511
    goto out;
  } else {

  }
#line 513
  opages_vmalloced = constant_test_bit(2U, (unsigned long const volatile   *)(& b->bm_flags));
#line 515
  if (capacity == 0UL) {
#line 516
    spin_lock_irq(& b->bm_lock);
#line 517
    opages = b->bm_pages;
#line 518
    onpages = b->bm_number_of_pages;
#line 519
    owords = b->bm_words;
#line 520
    b->bm_pages = 0;
#line 521
    tmp___6 = 0UL;
#line 521
    b->bm_dev_capacity = tmp___6;
#line 521
    tmp___5 = tmp___6;
#line 521
    b->bm_words = tmp___5;
#line 521
    tmp___4 = tmp___5;
#line 521
    b->bm_bits = tmp___4;
#line 521
    tmp___3 = tmp___4;
#line 521
    b->bm_set = tmp___3;
#line 521
    b->bm_number_of_pages = tmp___3;
#line 526
    spin_unlock_irq(& b->bm_lock);
#line 527
    bm_free_pages(opages, onpages);
#line 528
    bm_vk_free((void *)opages, opages_vmalloced);
#line 529
    goto out;
  } else {

  }
#line 531
  bits = (capacity + 7UL) >> 3;
#line 538
  words = (bits + 63UL) >> 6;
#line 540
  tmp___9 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 540
  if (tmp___9 != 0) {
#line 541
    if (((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12 < (unsigned long long )bits) {
#line 541
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 541
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 541
      printk("<3>%s %s: ASSERT( (u64)bits <= (((u64)mdev->ldev->md.md_size_sect-MD_BM_OFFSET) << 12) ) in %s:%d\n",
             tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
             541);
    } else {

    }
#line 542
    put_ldev(mdev);
  } else {

  }
#line 546
  want = ((words + 1UL) * 8UL + 4095UL) >> 12;
#line 547
  have = b->bm_number_of_pages;
#line 548
  if (want == have) {
#line 549
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 549
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 549
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 549
      printk("<3>%s %s: ASSERT( b->bm_pages != NULL ) in %s:%d\n", tmp___11, tmp___10,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
             549);
    } else {

    }
#line 550
    npages = b->bm_pages;
  } else {
#line 552
    tmp___12 = drbd_insert_fault(mdev, 7U);
#line 552
    if (tmp___12 != 0) {
#line 553
      npages = 0;
    } else {
#line 555
      npages = bm_realloc_pages(b, want);
    }
  }
#line 558
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 559
    err = -12;
#line 560
    goto out;
  } else {

  }
#line 563
  spin_lock_irq(& b->bm_lock);
#line 564
  opages = b->bm_pages;
#line 565
  owords = b->bm_words;
#line 566
  obits = b->bm_bits;
#line 568
  growing = bits > obits;
#line 569
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 570
    bm_set_surplus(b);
  } else {

  }
#line 572
  b->bm_pages = npages;
#line 573
  b->bm_number_of_pages = want;
#line 574
  b->bm_bits = bits;
#line 575
  b->bm_words = words;
#line 576
  b->bm_dev_capacity = capacity;
#line 578
  if (growing != 0) {
#line 579
    if (set_new_bits != 0) {
#line 580
      bm_memset(b, owords, 255, words - owords);
#line 581
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 583
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 587
  if (want < have) {
#line 589
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 592
  p_addr = bm_map_paddr(b, words);
#line 593
  bm = p_addr + (words & 511UL);
#line 594
  *bm = 2205418087UL;
#line 595
  bm_unmap(p_addr);
#line 597
  bm_clear_surplus(b);
#line 599
  spin_unlock_irq(& b->bm_lock);
#line 600
  if ((unsigned long )opages != (unsigned long )npages) {
#line 601
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 602
  if (growing == 0) {
#line 603
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 604
  tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 604
  tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 604
  printk("<6>%s %s: resync bitmap: bits=%lu words=%lu\n", tmp___14, tmp___13, bits,
         words);
  out: 
#line 607
  drbd_bm_unlock(mdev);
#line 608
  return (err);
}
}
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;

  {
#line 621
  b = mdev->bitmap;
#line 625
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 625
  if (_b != 0) {
#line 625
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 625
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 625
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_bm_total_weight",
           (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           625);
  } else {

  }
#line 625
  if (_b != 0) {
#line 625
    return (0UL);
  } else {

  }
#line 626
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 626
  if (_b___0 != 0) {
#line 626
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 626
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 626
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "_drbd_bm_total_weight",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           626);
  } else {

  }
#line 626
  if (_b___0 != 0) {
#line 626
    return (0UL);
  } else {

  }
#line 628
  tmp___3 = spinlock_check(& b->bm_lock);
#line 628
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 629
  s = b->bm_set;
#line 630
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 632
  return (s);
}
}
#line 635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 639
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 639
  if (tmp == 0) {
#line 640
    return (0UL);
  } else {

  }
#line 641
  s = _drbd_bm_total_weight(mdev);
#line 642
  put_ldev(mdev);
#line 643
  return (s);
}
}
#line 646 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 648
  b = mdev->bitmap;
#line 649
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 649
  if (_b != 0) {
#line 649
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 649
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 649
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_words", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           649);
  } else {

  }
#line 649
  if (_b != 0) {
#line 649
    return (0UL);
  } else {

  }
#line 650
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 650
  if (_b___0 != 0) {
#line 650
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 650
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 650
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_words", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           650);
  } else {

  }
#line 650
  if (_b___0 != 0) {
#line 650
    return (0UL);
  } else {

  }
#line 652
  return (b->bm_words);
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 657
  b = mdev->bitmap;
#line 658
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 658
  if (_b != 0) {
#line 658
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 658
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 658
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_bits", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           658);
  } else {

  }
#line 658
  if (_b != 0) {
#line 658
    return (0UL);
  } else {

  }
#line 660
  return (b->bm_bits);
}
}
#line 668 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  size_t end ;
  size_t do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int __ret_warn_on ;
  long tmp___3 ;
  int __ret_warn_on___0 ;
  long tmp___4 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___5 ;
  unsigned long *tmp___6 ;
  unsigned long tmp___7 ;
  size_t tmp___8 ;
  int tmp___9 ;

  {
#line 671
  b = mdev->bitmap;
#line 676
  end = offset + number;
#line 678
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 678
  if (_b != 0) {
#line 678
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 678
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 678
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_merge_lel", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           678);
  } else {

  }
#line 678
  if (_b != 0) {
#line 678
    return;
  } else {

  }
#line 679
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 679
  if (_b___0 != 0) {
#line 679
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 679
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 679
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_merge_lel",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           679);
  } else {

  }
#line 679
  if (_b___0 != 0) {
#line 679
    return;
  } else {

  }
#line 680
  if (number == 0UL) {
#line 681
    return;
  } else {

  }
#line 682
  __ret_warn_on = b->bm_words <= offset;
#line 682
  tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 682
  if (tmp___3 != 0L) {
#line 682
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       682);
  } else {

  }
#line 682
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 683
  __ret_warn_on___0 = b->bm_words < end;
#line 683
  tmp___4 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 683
  if (tmp___4 != 0L) {
#line 683
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       683);
  } else {

  }
#line 683
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 685
  spin_lock_irq(& b->bm_lock);
#line 686
  goto ldv_42473;
  ldv_42472: 
#line 687
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 687
  __min2 = end;
#line 687
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 688
  p_addr = bm_map_paddr(b, offset);
#line 689
  bm = p_addr + (offset & 511UL);
#line 690
  offset = offset + do_now;
#line 691
  goto ldv_42470;
  ldv_42469: 
#line 692
  bits = hweight_long(*bm);
#line 693
  tmp___5 = buffer;
#line 693
  buffer = buffer + 1;
#line 693
  word = (unsigned long )((unsigned long long )*bm | (unsigned long long )*tmp___5);
#line 694
  tmp___6 = bm;
#line 694
  bm = bm + 1;
#line 694
  *tmp___6 = word;
#line 695
  tmp___7 = hweight_long(word);
#line 695
  b->bm_set = b->bm_set + (tmp___7 - bits);
  ldv_42470: 
#line 691
  tmp___8 = do_now;
#line 691
  do_now = do_now - (size_t )1;
#line 691
  if (tmp___8 != 0UL) {
#line 692
    goto ldv_42469;
  } else {

  }
#line 697
  bm_unmap(p_addr);
  ldv_42473: ;
#line 686
  if (offset < end) {
#line 687
    goto ldv_42472;
  } else {

  }

#line 704
  if (b->bm_words == end) {
#line 705
    tmp___9 = bm_clear_surplus(b);
#line 705
    b->bm_set = b->bm_set - (unsigned long )tmp___9;
  } else {

  }
#line 707
  spin_unlock_irq(& b->bm_lock);
#line 708
  return;
}
}
#line 713 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___5 ;
  unsigned long *tmp___6 ;
  size_t tmp___7 ;

  {
#line 716
  b = mdev->bitmap;
#line 720
  end = offset + number;
#line 722
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 722
  if (_b != 0) {
#line 722
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 722
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 722
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_get_lel", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           722);
  } else {

  }
#line 722
  if (_b != 0) {
#line 722
    return;
  } else {

  }
#line 723
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 723
  if (_b___0 != 0) {
#line 723
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 723
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 723
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_get_lel", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           723);
  } else {

  }
#line 723
  if (_b___0 != 0) {
#line 723
    return;
  } else {

  }
#line 725
  spin_lock_irq(& b->bm_lock);
#line 726
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 729
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 729
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 729
    printk("<3>%s %s: offset=%lu number=%lu bm_words=%lu\n", tmp___4, tmp___3, offset,
           number, b->bm_words);
  } else {
#line 734
    goto ldv_42498;
    ldv_42497: 
#line 735
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 735
    __min2 = end;
#line 735
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 736
    p_addr = bm_map_paddr(b, offset);
#line 737
    bm = p_addr + (offset & 511UL);
#line 738
    offset = offset + do_now;
#line 739
    goto ldv_42495;
    ldv_42494: 
#line 740
    tmp___5 = buffer;
#line 740
    buffer = buffer + 1;
#line 740
    tmp___6 = bm;
#line 740
    bm = bm + 1;
#line 740
    *tmp___5 = *tmp___6;
    ldv_42495: 
#line 739
    tmp___7 = do_now;
#line 739
    do_now = do_now - (size_t )1;
#line 739
    if (tmp___7 != 0UL) {
#line 740
      goto ldv_42494;
    } else {

    }
#line 741
    bm_unmap(p_addr);
    ldv_42498: ;
#line 734
    if (offset < end) {
#line 735
      goto ldv_42497;
    } else {

    }

  }
#line 744
  spin_unlock_irq(& b->bm_lock);
#line 745
  return;
}
}
#line 748 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 750
  b = mdev->bitmap;
#line 751
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 751
  if (_b != 0) {
#line 751
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 751
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 751
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_set_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           751);
  } else {

  }
#line 751
  if (_b != 0) {
#line 751
    return;
  } else {

  }
#line 752
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 752
  if (_b___0 != 0) {
#line 752
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 752
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 752
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_set_all", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           752);
  } else {

  }
#line 752
  if (_b___0 != 0) {
#line 752
    return;
  } else {

  }
#line 754
  spin_lock_irq(& b->bm_lock);
#line 755
  bm_memset(b, 0UL, 255, b->bm_words);
#line 756
  bm_clear_surplus(b);
#line 757
  b->bm_set = b->bm_bits;
#line 758
  spin_unlock_irq(& b->bm_lock);
#line 759
  return;
}
}
#line 762 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 764
  b = mdev->bitmap;
#line 765
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 765
  if (_b != 0) {
#line 765
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 765
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 765
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_clear_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           765);
  } else {

  }
#line 765
  if (_b != 0) {
#line 765
    return;
  } else {

  }
#line 766
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 766
  if (_b___0 != 0) {
#line 766
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 766
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 766
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_clear_all",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           766);
  } else {

  }
#line 766
  if (_b___0 != 0) {
#line 766
    return;
  } else {

  }
#line 768
  spin_lock_irq(& b->bm_lock);
#line 769
  bm_memset(b, 0UL, 0, b->bm_words);
#line 770
  b->bm_set = 0UL;
#line 771
  spin_unlock_irq(& b->bm_lock);
#line 772
  return;
}
}
#line 774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_bitmap *b ;
  int uptodate ;
  int tmp ;

  {
#line 776
  b = (struct drbd_bitmap *)bio->bi_private;
#line 777
  uptodate = (int )bio->bi_flags & 1;
#line 784
  if (error == 0 && uptodate == 0) {
#line 785
    error = -5;
  } else {

  }
#line 787
  if (error != 0) {
#line 790
    __set_bit(1, (unsigned long volatile   *)(& b->bm_flags));
  } else {

  }
#line 792
  tmp = atomic_dec_and_test(& b->bm_async_io);
#line 792
  if (tmp != 0) {
#line 793
    __wake_up(& b->bm_io_wait, 3U, 1, 0);
  } else {

  }
#line 795
  bio_put(bio);
#line 796
  return;
}
}
#line 798 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct drbd_conf *mdev , struct drbd_bitmap *b , int page_nr ,
                             int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  int tmp___1 ;

  {
#line 801
  tmp = bio_alloc(208U, 1);
#line 801
  bio = tmp;
#line 803
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 805
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 809
  __min1 = 4096U;
#line 809
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 809
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 809
  len = __min1 < __min2 ? __min1 : __min2;
#line 812
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 813
  bio->bi_sector = on_disk_sector;
#line 814
  bio_add_page(bio, *(b->bm_pages + (unsigned long )page_nr), len, 0U);
#line 815
  bio->bi_private = (void *)b;
#line 816
  bio->bi_end_io = & bm_async_io_complete;
#line 818
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 818
  if (tmp___1 != 0) {
#line 819
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 820
    bio_endio(bio, -5);
  } else {
#line 822
    submit_bio(rw, bio);
  }
#line 823
  return;
}
}
#line 862 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw ) 
{ 
  struct drbd_bitmap *b ;
  int bm_words ;
  int num_pages ;
  int i ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;
  size_t tmp___1 ;
  struct request_queue *tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 864
  b = mdev->bitmap;
#line 869
  err = 0;
#line 871
  tmp = bm_is_locked(b);
#line 871
  __ret_warn_on = tmp == 0;
#line 871
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 871
  if (tmp___0 != 0L) {
#line 871
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       871);
  } else {

  }
#line 871
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 875
  tmp___1 = drbd_bm_words(mdev);
#line 875
  bm_words = (int )tmp___1;
#line 876
  num_pages = (int )((((unsigned long )bm_words + 512UL) * 8UL - 1UL) >> 12);
#line 882
  now = jiffies;
#line 883
  atomic_set(& b->bm_async_io, num_pages);
#line 884
  __clear_bit(1, (unsigned long volatile   *)(& b->bm_flags));
#line 887
  i = 0;
#line 887
  goto ldv_42550;
  ldv_42549: 
#line 888
  bm_page_io_async(mdev, b, i, rw);
#line 887
  i = i + 1;
  ldv_42550: ;
#line 887
  if (i < num_pages) {
#line 888
    goto ldv_42549;
  } else {

  }
#line 890
  tmp___2 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 890
  drbd_blk_run_queue(tmp___2);
#line 891
  tmp___3 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 891
  if (tmp___3 == 0) {
#line 891
    goto ldv_42552;
  } else {

  }
#line 891
  tmp___4 = get_current();
#line 891
  __wait.flags = 0U;
#line 891
  __wait.private = (void *)tmp___4;
#line 891
  __wait.func = & autoremove_wake_function;
#line 891
  __wait.task_list.next = & __wait.task_list;
#line 891
  __wait.task_list.prev = & __wait.task_list;
  ldv_42555: 
#line 891
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 891
  tmp___5 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 891
  if (tmp___5 == 0) {
#line 891
    goto ldv_42554;
  } else {

  }
#line 891
  schedule();
#line 891
  goto ldv_42555;
  ldv_42554: 
#line 891
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_42552: 
#line 893
  tmp___8 = constant_test_bit(1U, (unsigned long const volatile   *)(& b->bm_flags));
#line 893
  if (tmp___8 != 0) {
#line 894
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 894
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 894
    printk("<1>%s %s: we had at least one MD IO ERROR during bitmap IO\n", tmp___7,
           tmp___6);
#line 895
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 896
    err = -5;
  } else {

  }
#line 899
  now = jiffies;
#line 900
  if (rw == 1) {
#line 904
    drbd_md_flush(mdev);
  } else {
#line 907
    b->bm_set = bm_count_bits_swap_endian(b);
#line 908
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 908
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 908
    printk("<6>%s %s: recounting of set bits took additional %lu jiffies\n", tmp___10,
           tmp___9, (unsigned long )jiffies - now);
  }
#line 911
  now = b->bm_set;
#line 913
  tmp___11 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 913
  tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 913
  tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 913
  printk("<6>%s %s: %s (%lu bits) marked out-of-sync by on disk bit-map.\n", tmp___13,
         tmp___12, tmp___11, now);
#line 916
  return (err);
}
}
#line 923 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 925
  tmp = bm_rw(mdev, 0);
#line 925
  return (tmp);
}
}
#line 932 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 934
  tmp = bm_rw(mdev, 1);
#line 934
  return (tmp);
}
}
#line 946 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  sector_t on_disk_sector ;
  int bm_words ;
  int num_words ;
  int offset ;
  int err ;
  size_t tmp ;
  int _min1 ;
  int _min2 ;
  void *tmp___0 ;
  void *tmp___1 ;
  int i ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
#line 948
  on_disk_sector = (sector_t )(((mdev->ldev)->md.md_offset + (unsigned long long )enr) + (unsigned long long )(mdev->ldev)->md.bm_offset);
#line 951
  err = 0;
#line 953
  ldv_mutex_lock_10(& mdev->md_io_mutex);
#line 954
  tmp = drbd_bm_words(mdev);
#line 954
  bm_words = (int )tmp;
#line 955
  offset = (int )(enr << 6);
#line 956
  _min1 = 64;
#line 956
  _min2 = bm_words - offset;
#line 956
  num_words = _min1 < _min2 ? _min1 : _min2;
#line 957
  if (num_words <= 63) {
#line 958
    tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 958
    memset(tmp___0, 0, 512UL);
  } else {

  }
#line 959
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 959
  drbd_bm_get_lel(mdev, (size_t )offset, (size_t )num_words, (unsigned long *)tmp___1);
#line 961
  tmp___4 = drbd_md_sync_page_io(mdev, mdev->ldev, on_disk_sector, 1);
#line 961
  if (tmp___4 == 0) {
#line 963
    err = -5;
#line 964
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 964
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 964
    printk("<3>%s %s: IO ERROR writing bitmap sector %lu (meta-disk sector %llus)\n",
           tmp___3, tmp___2, enr, (unsigned long long )on_disk_sector);
#line 967
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_sect");
#line 968
    i = 0;
#line 968
    goto ldv_42578;
    ldv_42577: 
#line 969
    drbd_bm_ALe_set_all(mdev, enr * 4UL + (unsigned long )i);
#line 968
    i = i + 1;
    ldv_42578: ;
#line 968
    if (i <= 3) {
#line 969
      goto ldv_42577;
    } else {

    }

  } else {

  }
#line 971
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 972
  ldv_mutex_unlock_11(& mdev->md_io_mutex);
#line 973
  return (err);
}
}
#line 983 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long offset ;

  {
#line 986
  b = mdev->bitmap;
#line 987
  i = 0xffffffffffffffffUL;
#line 991
  if (b->bm_bits < bm_fo) {
#line 992
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 992
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 992
    printk("<3>%s %s: bm_fo=%lu bm_bits=%lu\n", tmp___0, tmp, bm_fo, b->bm_bits);
  } else {
#line 994
    goto ldv_42594;
    ldv_42593: 
#line 996
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 997
    offset = bit_offset >> 6;
#line 998
    p_addr = __bm_map_paddr(b, offset, km);
#line 1000
    if ((int )find_zero_bit != 0) {
#line 1001
      i = find_next_zero_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    } else {
#line 1003
      i = find_next_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    }
#line 1005
    __bm_unmap(p_addr, km);
#line 1006
    if (i <= 32767UL) {
#line 1007
      i = bit_offset + i;
#line 1008
      if (b->bm_bits <= i) {
#line 1009
        goto ldv_42591;
      } else {

      }
#line 1010
      goto found;
    } else {

    }
#line 1012
    bm_fo = bit_offset + 32768UL;
    ldv_42594: ;
#line 994
    if (b->bm_bits > bm_fo) {
#line 995
      goto ldv_42593;
    } else {

    }
    ldv_42591: 
#line 1014
    i = 0xffffffffffffffffUL;
  }
  found: ;
#line 1017
  return (i);
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 1023
  b = mdev->bitmap;
#line 1024
  i = 0xffffffffffffffffUL;
#line 1026
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1026
  if (_b != 0) {
#line 1026
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1026
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1026
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "bm_find_next", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1026);
  } else {

  }
#line 1026
  if (_b != 0) {
#line 1026
    return (i);
  } else {

  }
#line 1027
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1027
  if (_b___0 != 0) {
#line 1027
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1027
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1027
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "bm_find_next", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1027);
  } else {

  }
#line 1027
  if (_b___0 != 0) {
#line 1027
    return (i);
  } else {

  }
#line 1029
  spin_lock_irq(& b->bm_lock);
#line 1030
  tmp___3 = bm_is_locked(b);
#line 1030
  if (tmp___3 != 0) {
#line 1031
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1033
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 1035
  spin_unlock_irq(& b->bm_lock);
#line 1036
  return (i);
}
}
#line 1039 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1041
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1041
  return (tmp);
}
}
#line 1054 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1057
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1057
  return (tmp);
}
}
#line 1060 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1063
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1063
  return (tmp);
}
}
#line 1072 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned long last_page_nr ;
  int c ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long offset ;
  unsigned long page_nr ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1075
  b = mdev->bitmap;
#line 1076
  p_addr = 0;
#line 1078
  last_page_nr = 0xffffffffffffffffUL;
#line 1079
  c = 0;
#line 1081
  if (b->bm_bits <= e) {
#line 1082
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1082
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1082
    printk("<3>%s %s: ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n", tmp___0,
           tmp, s, e, b->bm_bits);
#line 1084
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1086
  bitnr = s;
#line 1086
  goto ldv_42634;
  ldv_42633: 
#line 1087
  offset = bitnr >> 6;
#line 1088
  page_nr = offset >> 9;
#line 1089
  if (page_nr != last_page_nr) {
#line 1090
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1091
      __bm_unmap(p_addr, km);
    } else {

    }
#line 1092
    p_addr = __bm_map_paddr(b, offset, km);
#line 1093
    last_page_nr = page_nr;
  } else {

  }
#line 1095
  if (val != 0) {
#line 1096
    tmp___1 = __test_and_set_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1096
    c = (tmp___1 == 0) + c;
  } else {
#line 1098
    tmp___2 = __test_and_clear_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1098
    c = c - (tmp___2 != 0);
  }
#line 1086
  bitnr = bitnr + 1UL;
  ldv_42634: ;
#line 1086
  if (bitnr <= e) {
#line 1087
    goto ldv_42633;
  } else {

  }

#line 1100
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1101
    __bm_unmap(p_addr, km);
  } else {

  }
#line 1102
  b->bm_set = b->bm_set + (unsigned long )c;
#line 1103
  return (c);
}
}
#line 1110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 1114
  b = mdev->bitmap;
#line 1115
  c = 0;
#line 1117
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1117
  if (_b != 0) {
#line 1117
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1117
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1117
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "bm_change_bits_to", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1117);
  } else {

  }
#line 1117
  if (_b != 0) {
#line 1117
    return (1);
  } else {

  }
#line 1118
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1118
  if (_b___0 != 0) {
#line 1118
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1118
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1118
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "bm_change_bits_to",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1118);
  } else {

  }
#line 1118
  if (_b___0 != 0) {
#line 1118
    return (0);
  } else {

  }
#line 1120
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1120
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1121
  tmp___4 = bm_is_locked(b);
#line 1121
  if (tmp___4 != 0) {
#line 1122
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1124
  c = __bm_change_bits_to(mdev, s, e, val, KM_IRQ1);
#line 1126
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1127
  return (c);
}
}
#line 1131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1133
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1133
  return (tmp);
}
}
#line 1137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1139
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1139
  return (- tmp);
}
}
#line 1144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1149
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr), KM_USER0);
#line 1149
  paddr = (unsigned long *)tmp;
#line 1150
  i = first_word;
#line 1150
  goto ldv_42673;
  ldv_42672: 
#line 1151
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1151
  bits = (int )tmp___0;
#line 1152
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1153
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1150
  i = i + 1;
  ldv_42673: ;
#line 1150
  if (i < last_word) {
#line 1151
    goto ldv_42672;
  } else {

  }
#line 1155
  pagefault_enable();
#line 1156
  return;
}
}
#line 1162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1172
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1173
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1180
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1182
    __bm_change_bits_to(mdev, s, e, 1, KM_USER0);
#line 1183
    return;
  } else {

  }
#line 1189
  if (sl != 0UL) {
#line 1190
    __bm_change_bits_to(mdev, s, sl - 1UL, 1, KM_USER0);
  } else {

  }
#line 1192
  first_page = (int )(sl >> 15);
#line 1193
  last_page = (int )(el >> 15);
#line 1197
  first_word = (int )(sl >> 6) & 511;
#line 1198
  last_word = 512;
#line 1201
  page_nr = first_page;
#line 1201
  goto ldv_42689;
  ldv_42688: 
#line 1202
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1203
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1203, 0);
#line 1203
  _cond_resched();
#line 1204
  first_word = 0;
#line 1201
  page_nr = page_nr + 1;
  ldv_42689: ;
#line 1201
  if (page_nr < last_page) {
#line 1202
    goto ldv_42688;
  } else {

  }
#line 1208
  last_word = (int )(el >> 6) & 511;
#line 1209
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1216
  if (el <= (unsigned long )e) {
#line 1217
    __bm_change_bits_to(mdev, el, e, 1, KM_USER0);
  } else {

  }
#line 1218
  return;
}
}
#line 1227 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  unsigned long offset ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 1230
  b = mdev->bitmap;
#line 1234
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1234
  if (_b != 0) {
#line 1234
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1234
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1234
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_test_bit", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1234);
  } else {

  }
#line 1234
  if (_b != 0) {
#line 1234
    return (0);
  } else {

  }
#line 1235
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1235
  if (_b___0 != 0) {
#line 1235
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1235
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1235
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_test_bit",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1235);
  } else {

  }
#line 1235
  if (_b___0 != 0) {
#line 1235
    return (0);
  } else {

  }
#line 1237
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1237
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1238
  tmp___4 = bm_is_locked(b);
#line 1238
  if (tmp___4 != 0) {
#line 1239
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1240
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1241
    offset = bitnr >> 6;
#line 1242
    p_addr = bm_map_paddr(b, offset);
#line 1243
    tmp___5 = variable_test_bit((int )bitnr & 32767, (unsigned long const volatile   *)p_addr);
#line 1243
    i = tmp___5 != 0;
#line 1244
    bm_unmap(p_addr);
  } else
#line 1245
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1246
    i = -1;
  } else {
#line 1248
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1248
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1248
    printk("<3>%s %s: bitnr=%lu > bm_bits=%lu\n", tmp___7, tmp___6, bitnr, b->bm_bits);
#line 1249
    i = 0;
  }
#line 1252
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1253
  return (i);
}
}
#line 1257 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long page_nr ;
  unsigned long bitnr ;
  int c ;
  size_t w ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int _b___1 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 1260
  b = mdev->bitmap;
#line 1261
  p_addr = 0;
#line 1261
  page_nr = 0xffffffffffffffffUL;
#line 1263
  c = 0;
#line 1270
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1270
  if (_b != 0) {
#line 1270
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1270
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1270
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_count_bits", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1270);
  } else {

  }
#line 1270
  if (_b != 0) {
#line 1270
    return (1);
  } else {

  }
#line 1271
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1271
  if (_b___0 != 0) {
#line 1271
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1271
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1271
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_count_bits",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1271);
  } else {

  }
#line 1271
  if (_b___0 != 0) {
#line 1271
    return (1);
  } else {

  }
#line 1273
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1273
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1274
  tmp___4 = bm_is_locked(b);
#line 1274
  if (tmp___4 != 0) {
#line 1275
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1276
  bitnr = s;
#line 1276
  goto ldv_42731;
  ldv_42730: 
#line 1277
  w = bitnr >> 6;
#line 1278
  if (w >> 9 != page_nr) {
#line 1279
    page_nr = w >> 9;
#line 1280
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1281
      bm_unmap(p_addr);
    } else {

    }
#line 1282
    p_addr = bm_map_paddr(b, w);
  } else {

  }
#line 1284
  _b___1 = b->bm_bits <= bitnr;
#line 1284
  if (_b___1 != 0) {
#line 1284
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1284
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1284
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___9, tmp___8, "drbd_bm_count_bits",
           (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1284);
  } else {

  }
#line 1284
  if (_b___1 != 0) {
#line 1285
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1285
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1285
    printk("<3>%s %s: bitnr=%lu bm_bits=%lu\n", tmp___6, tmp___5, bitnr, b->bm_bits);
  } else {
#line 1287
    tmp___7 = variable_test_bit((int )((unsigned int )bitnr - ((unsigned int )page_nr << 15U)),
                                (unsigned long const volatile   *)p_addr);
#line 1287
    c = (tmp___7 != 0) + c;
  }
#line 1276
  bitnr = bitnr + 1UL;
  ldv_42731: ;
#line 1276
  if (bitnr <= (unsigned long )e) {
#line 1277
    goto ldv_42730;
  } else {

  }

#line 1290
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1291
    bm_unmap(p_addr);
  } else {

  }
#line 1292
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1293
  return (c);
}
}
#line 1311 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned long *tmp___5 ;
  unsigned long tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 1313
  b = mdev->bitmap;
#line 1318
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1318
  if (_b != 0) {
#line 1318
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1318
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1318
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_e_weight", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1318);
  } else {

  }
#line 1318
  if (_b != 0) {
#line 1318
    return (0);
  } else {

  }
#line 1319
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1319
  if (_b___0 != 0) {
#line 1319
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1319
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1319
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_e_weight",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1319);
  } else {

  }
#line 1319
  if (_b___0 != 0) {
#line 1319
    return (0);
  } else {

  }
#line 1321
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1321
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1322
  tmp___4 = bm_is_locked(b);
#line 1322
  if (tmp___4 != 0) {
#line 1323
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1325
  s = (int )(enr << 6);
#line 1326
  _min1 = (enr + 1UL) << 6;
#line 1326
  _min2 = b->bm_words;
#line 1326
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1327
  count = 0;
#line 1328
  if ((size_t )s < b->bm_words) {
#line 1329
    n = e - s;
#line 1330
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1331
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1332
    goto ldv_42757;
    ldv_42756: 
#line 1333
    tmp___5 = bm;
#line 1333
    bm = bm + 1;
#line 1333
    tmp___6 = hweight_long(*tmp___5);
#line 1333
    count = (int )((unsigned int )tmp___6 + (unsigned int )count);
    ldv_42757: 
#line 1332
    tmp___7 = n;
#line 1332
    n = n - 1;
#line 1332
    if (tmp___7 != 0) {
#line 1333
      goto ldv_42756;
    } else {

    }
#line 1334
    bm_unmap(p_addr);
  } else {
#line 1336
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1336
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1336
    printk("<3>%s %s: start offset (%d) too large in drbd_bm_e_weight\n", tmp___9,
           tmp___8, s);
  }
#line 1338
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1339
  return (count);
}
}
#line 1343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  int count ;
  int s ;
  int e ;
  int i ;
  int do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  size_t __min1 ;
  size_t __min2 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  unsigned long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;

  {
#line 1345
  b = mdev->bitmap;
#line 1349
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1349
  if (_b != 0) {
#line 1349
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1349
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1349
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_ALe_set_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1349);
  } else {

  }
#line 1349
  if (_b != 0) {
#line 1349
    return (0UL);
  } else {

  }
#line 1350
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1350
  if (_b___0 != 0) {
#line 1350
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1350
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1350
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_ALe_set_all",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1350);
  } else {

  }
#line 1350
  if (_b___0 != 0) {
#line 1350
    return (0UL);
  } else {

  }
#line 1352
  spin_lock_irq(& b->bm_lock);
#line 1353
  tmp___3 = bm_is_locked(b);
#line 1353
  if (tmp___3 != 0) {
#line 1354
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1355
  weight = b->bm_set;
#line 1357
  s = (int )((unsigned int )al_enr * 16U);
#line 1358
  __min1 = (size_t )(s + 16);
#line 1358
  __min2 = b->bm_words;
#line 1358
  e = (int )(__min1 < __min2 ? __min1 : __min2);
#line 1360
  if ((e + -1) >> 9 != s >> 9) {
#line 1360
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1360
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1360
    printk("<3>%s %s: ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
           tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1361);
  } else {

  }
#line 1362
  count = 0;
#line 1363
  if ((size_t )s < b->bm_words) {
#line 1364
    do_now = e - s;
#line 1364
    i = do_now;
#line 1365
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1366
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1367
    goto ldv_42781;
    ldv_42780: 
#line 1368
    tmp___6 = hweight_long(*bm);
#line 1368
    count = (int )((unsigned int )tmp___6 + (unsigned int )count);
#line 1369
    *bm = 0xffffffffffffffffUL;
#line 1370
    bm = bm + 1;
    ldv_42781: 
#line 1367
    tmp___7 = i;
#line 1367
    i = i - 1;
#line 1367
    if (tmp___7 != 0) {
#line 1368
      goto ldv_42780;
    } else {

    }
#line 1372
    bm_unmap(p_addr);
#line 1373
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1374
    if ((size_t )e == b->bm_words) {
#line 1375
      tmp___8 = bm_clear_surplus(b);
#line 1375
      b->bm_set = b->bm_set - (unsigned long )tmp___8;
    } else {

    }
  } else {
#line 1377
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1377
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1377
    printk("<3>%s %s: start offset (%d) too large in drbd_bm_ALe_set_all\n", tmp___10,
           tmp___9, s);
  }
#line 1379
  weight = b->bm_set - weight;
#line 1380
  spin_unlock_irq(& b->bm_lock);
#line 1381
  return (weight);
}
}
#line 1384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1389
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1391
  mutex_lock(ldv_func_arg1);
#line 1392
  return;
}
}
#line 1394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1399
  tmp = mutex_trylock(ldv_func_arg1);
#line 1399
  ldv_func_res = tmp;
#line 1401
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1401
  return (tmp___0);
#line 1403
  return (ldv_func_res);
}
}
#line 1406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1411
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1413
  mutex_unlock(ldv_func_arg1);
#line 1414
  return;
}
}
#line 1416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1421
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1423
  mutex_lock(ldv_func_arg1);
#line 1424
  return;
}
}
#line 1426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1431
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1433
  mutex_unlock(ldv_func_arg1);
#line 1434
  return;
}
}
#line 1436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1441
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1443
  mutex_unlock(ldv_func_arg1);
#line 1444
  return;
}
}
#line 1446 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_7(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1451
  tmp = mutex_trylock(ldv_func_arg1);
#line 1451
  ldv_func_res = tmp;
#line 1453
  tmp___0 = ldv_mutex_trylock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1453
  return (tmp___0);
#line 1455
  return (ldv_func_res);
}
}
#line 1458 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1463
  ldv_mutex_lock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1465
  mutex_lock(ldv_func_arg1);
#line 1466
  return;
}
}
#line 1468 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1473
  ldv_mutex_unlock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1475
  mutex_unlock(ldv_func_arg1);
#line 1476
  return;
}
}
#line 1478 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1483
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1485
  mutex_lock(ldv_func_arg1);
#line 1486
  return;
}
}
#line 1488 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1493
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1495
  mutex_unlock(ldv_func_arg1);
#line 1496
  return;
}
}
#line 154 "include/linux/mutex.h"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) ;
#line 90 "include/linux/module.h"
extern struct module __this_module ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 280
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 281
char const   *drbd_role_str(enum drbd_role s ) ;
#line 282
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 164
struct drbd_conf **minor_table ;
#line 1075 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1079
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1081
  return (mdev);
}
}
#line 1420
int proc_details ;
#line 1553 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1554
struct file_operations  const  drbd_proc_fops ;
#line 2086 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned long tmp___3 ;

  {
#line 2099
  tmp = drbd_bm_total_weight(mdev);
#line 2099
  *bits_left = tmp - mdev->rs_failed;
#line 2102
  if (*bits_left > mdev->rs_total) {
#line 2108
    __asm__  volatile   ("": : : "memory");
#line 2109
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33657.conn);
#line 2109
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2109
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2109
    printk("<4>%s %s: cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n", tmp___2,
           tmp___1, tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2112
    *per_mil_done = 0U;
  } else {
#line 2115
    tmp___3 = 1000UL - ((*bits_left >> 10) * 1000UL) / ((mdev->rs_total >> 10) + 1UL);
#line 2118
    *per_mil_done = (unsigned int )tmp___3;
  }
#line 2120
  return;
}
}
#line 84 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 88 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 88
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & single_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;

  {
#line 109
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 111
  x = (int )(res / 50U);
#line 112
  y = 20 - x;
#line 113
  seq_printf(seq, "\t[");
#line 114
  i = 1;
#line 114
  goto ldv_42249;
  ldv_42248: 
#line 115
  seq_printf(seq, "=");
#line 114
  i = i + 1;
  ldv_42249: ;
#line 114
  if (i < x) {
#line 115
    goto ldv_42248;
  } else {

  }
#line 116
  seq_printf(seq, ">");
#line 117
  i = 0;
#line 117
  goto ldv_42252;
  ldv_42251: 
#line 118
  seq_printf(seq, ".");
#line 117
  i = i + 1;
  ldv_42252: ;
#line 117
  if (i < y) {
#line 118
    goto ldv_42251;
  } else {

  }
#line 119
  seq_printf(seq, "] ");
#line 121
  seq_printf(seq, "sync\'ed:%3u.%u%% ", res / 10U, res % 10U);
#line 123
  if (mdev->rs_total > 1048576UL) {
#line 124
    seq_printf(seq, "(%lu/%lu)M", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 128
    seq_printf(seq, "(%lu/%lu)K", rs_left << 2, mdev->rs_total << 2);
  }
#line 132
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 272U) {
#line 133
    seq_printf(seq, " queue_delay: %d.%d ms\n\t", mdev->data_delay / 1000, (mdev->data_delay % 1000) / 100);
  } else
#line 136
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 256U) {
#line 137
    seq_printf(seq, " delay_probe: %u\n\t", mdev->delay_seq);
  } else {

  }
#line 148
  dt = ((unsigned long )jiffies - mdev->rs_mark_time) / 250UL;
#line 150
  if (dt > 20UL) {
#line 153
    seq_printf(seq, "stalled\n");
#line 154
    return;
  } else {

  }
#line 157
  if (dt == 0UL) {
#line 158
    dt = dt + 1UL;
  } else {

  }
#line 159
  db = mdev->rs_mark_left - rs_left;
#line 160
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 162
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 166
  dbdt = db / dt << 2;
#line 167
  if (dbdt > 1000UL) {
#line 168
    seq_printf(seq, " speed: %ld,%03ld", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 171
    seq_printf(seq, " speed: %ld", dbdt);
  }
#line 175
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 176
  if (dt == 0UL) {
#line 177
    dt = 1UL;
  } else {

  }
#line 178
  db = mdev->rs_total - rs_left;
#line 179
  dbdt = db / dt << 2;
#line 180
  if (dbdt > 1000UL) {
#line 181
    seq_printf(seq, " (%ld,%03ld)", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 184
    seq_printf(seq, " (%ld)", dbdt);
  }
#line 186
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 272U) {
#line 187
    if (mdev->c_sync_rate > 1000) {
#line 188
      seq_printf(seq, " want: %d,%03d", mdev->c_sync_rate / 1000, mdev->c_sync_rate % 1000);
    } else {
#line 191
      seq_printf(seq, " want: %d", mdev->c_sync_rate);
    }
  } else {

  }
#line 194
  seq_printf(seq, " K/sec\n");
#line 195
  return;
}
}
#line 197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 199
  __mptr = (struct lc_element  const  *)e;
#line 199
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 201
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 204
  return;
}
}
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[4U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;

  {
#line 209
  hole = 0;
#line 213
  write_ordering_chars[0] = 110;
#line 213
  write_ordering_chars[1] = 100;
#line 213
  write_ordering_chars[2] = 102;
#line 213
  write_ordering_chars[3] = 98;
#line 220
  tmp = drbd_buildtag();
#line 220
  seq_printf(seq, "version: 8.3.8rc1 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 94, tmp);
#line 243
  i = 0;
#line 243
  goto ldv_42272;
  ldv_42271: 
#line 244
  mdev = minor_to_mdev((unsigned int )i);
#line 245
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 246
    hole = 1;
#line 247
    goto ldv_42270;
  } else {

  }
#line 249
  if (hole != 0) {
#line 250
    hole = 0;
#line 251
    seq_printf(seq, "\n");
  } else {

  }
#line 254
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33657.conn);
#line 256
  if (((unsigned int )*((unsigned short *)mdev + 1006UL) == 0U && (unsigned int )*((unsigned char *)mdev + 2013UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2012UL) == 2U) {
#line 259
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 261
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 261
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 261
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 261
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 261
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 261
    tmp___5 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_33657.pdsk);
#line 261
    tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_33657.disk);
#line 261
    tmp___7 = drbd_role_str((enum drbd_role )mdev->state.ldv_33657.peer);
#line 261
    tmp___8 = drbd_role_str((enum drbd_role )mdev->state.ldv_33657.role);
#line 261
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___8, tmp___7, tmp___6, tmp___5, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               (unsigned int )*((unsigned char *)mdev + 2014UL) != 0U ? 115 : 114,
               (unsigned int )*((unsigned char *)mdev + 2014UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)mdev + 2014UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 2014UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               mdev->send_cnt / 2U, mdev->recv_cnt / 2U, mdev->writ_cnt / 2U, mdev->read_cnt / 2U,
               mdev->al_writ_cnt, mdev->bm_writ_cnt, tmp___4, tmp___2 + tmp___3, tmp___1,
               tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 291
    tmp___9 = drbd_bm_total_weight(mdev);
#line 291
    seq_printf(seq, " oos:%lu\n", tmp___9 << 2);
  }
#line 294
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 272U) {
#line 296
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 298
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 304U) {
#line 299
    seq_printf(seq, "\t%3d%%      %lu/%lu\n", (int )((mdev->rs_total - mdev->ov_left) / (mdev->rs_total / 100UL + 1UL)),
               mdev->rs_total - mdev->ov_left, mdev->rs_total);
  } else {

  }
#line 305
  if (proc_details > 0) {
#line 305
    tmp___10 = _get_ldev_if_state(mdev, D_FAILED);
#line 305
    if (tmp___10 != 0) {
#line 306
      lc_seq_printf_stats(seq, mdev->resync);
#line 307
      lc_seq_printf_stats(seq, mdev->act_log);
#line 308
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 311
  if (proc_details > 1) {
#line 312
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 313
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_42270: 
#line 243
  i = i + 1;
  ldv_42272: ;
#line 243
  if ((unsigned int )i < minor_count) {
#line 244
    goto ldv_42271;
  } else {

  }

#line 319
  return (0);
}
}
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;

  {
#line 324
  tmp = PDE((struct inode  const  *)inode);
#line 324
  tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 324
  return (tmp___0);
}
}
#line 345
void ldv_check_final_state(void) ;
#line 348
extern void ldv_check_return_value(int  ) ;
#line 354
void ldv_initialize(void) ;
#line 357
extern void ldv_handler_precall(void) ;
#line 360
extern int nondet_int(void) ;
#line 363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_main1_sequence_infinite_withcheck_stateful(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_3 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 398
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 388
  LDV_IN_INTERRUPT = 1;
#line 397
  ldv_initialize();
#line 401
  goto ldv_42303;
  ldv_42302: 
#line 405
  tmp = nondet_int();
#line 405
  switch (tmp) {
  case 0: ;
#line 410
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 415
    ldv_handler_precall();
#line 416
    res_drbd_proc_open_3 = drbd_proc_open(var_group1, var_group2);
#line 417
    ldv_check_return_value(res_drbd_proc_open_3);
#line 418
    if (res_drbd_proc_open_3 != 0) {
#line 419
      goto ldv_module_exit;
    } else {

    }
#line 420
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 426
  goto ldv_42300;
  default: ;
#line 427
  goto ldv_42300;
  }
  ldv_42300: ;
  ldv_42303: 
#line 401
  tmp___0 = nondet_int();
#line 401
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 403
    goto ldv_42302;
  } else {

  }

  ldv_module_exit: ;
#line 436
  ldv_check_final_state();
#line 439
  return;
}
}
#line 443 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 448
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 450
  mutex_lock(ldv_func_arg1);
#line 451
  return;
}
}
#line 453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_mutex_trylock_24(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 458
  tmp = mutex_trylock(ldv_func_arg1);
#line 458
  ldv_func_res = tmp;
#line 460
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 460
  return (tmp___0);
#line 462
  return (ldv_func_res);
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 470
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 472
  mutex_unlock(ldv_func_arg1);
#line 473
  return;
}
}
#line 475 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 480
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 482
  mutex_lock(ldv_func_arg1);
#line 483
  return;
}
}
#line 485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 490
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 492
  mutex_unlock(ldv_func_arg1);
#line 493
  return;
}
}
#line 495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 500
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 502
  mutex_unlock(ldv_func_arg1);
#line 503
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 193 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 51
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 64 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 66
  __list_add(new, head, head->next);
#line 67
  return;
}
}
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 90 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 92
  next->prev = prev;
#line 93
  prev->next = next;
#line 94
  return;
}
}
#line 110
extern void list_del(struct list_head * ) ;
#line 140 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 142
  __list_del(entry->prev, entry->next);
#line 143
  INIT_LIST_HEAD(entry);
#line 144
  return;
}
}
#line 184 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 186
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 271 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 275
  first = list->next;
#line 276
  last = list->prev;
#line 278
  first->prev = prev;
#line 279
  prev->next = first;
#line 281
  last->next = next;
#line 282
  next->prev = last;
#line 283
  return;
}
}
#line 316 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 319
  tmp = list_empty((struct list_head  const  *)list);
#line 319
  if (tmp == 0) {
#line 320
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 321
    INIT_LIST_HEAD(list);
  } else {

  }
#line 323
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 250 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 154 "include/linux/mutex.h"
int ldv_mutex_trylock_36(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_37(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_39(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_42(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_44(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_35(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_38(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_41(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_43(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_45(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 170 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 89 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 53 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___0(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0 && ! __warned) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        __warned = 1;
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13388: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13388;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___0(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___0(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___0(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 350 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 350
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 350
  return (tmp);
}
}
#line 299 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 301
  tmp = PageTail(page);
#line 301
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 301
  if (tmp___0 != 0L) {
#line 302
    return (page->ldv_12107.first_page);
  } else {

  }
#line 303
  return (page);
}
}
#line 306 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 308
  tmp = compound_head(page);
#line 308
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 308
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17300: ;
#line 63
    goto ldv_17300;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17301: ;
#line 65
    goto ldv_17301;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17302: ;
#line 66
    goto ldv_17302;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.ldv_5593.rlock.raw_lock.slock = 0U;
#line 35
  __constr_expr_0.lock.ldv_5593.rlock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.ldv_5593.rlock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.ldv_5593.rlock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.ldv_5593.rlock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.ldv_5593.rlock.dep_map.class_cache = 0;
#line 35
  __constr_expr_0.lock.ldv_5593.rlock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.ldv_5593.rlock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.ldv_5593.rlock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.ldv_5593.ldv_5592.dep_map, "semaphore->lock", & __key,
                   0);
#line 37
  return;
}
}
#line 43
extern int down_interruptible(struct semaphore * ) ;
#line 45
extern int down_trylock(struct semaphore * ) ;
#line 47
extern void up(struct semaphore * ) ;
#line 364 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 2002
extern void flush_signals(struct task_struct * ) ;
#line 2035
extern void force_sig(int  , struct task_struct * ) ;
#line 1056 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1133 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1135
  return (& tfm->base);
}
}
#line 1153 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1155
  tmp = crypto_hash_tfm(tfm);
#line 1155
  return (& tmp->crt_u.hash);
}
}
#line 1168 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1170
  tmp = crypto_hash_crt(tfm);
#line 1170
  return (tmp->digestsize);
}
}
#line 1188 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1190
  tmp = crypto_hash_crt(desc->tfm);
#line 1190
  tmp___0 = (*(tmp->init))(desc);
#line 1190
  return (tmp___0);
}
}
#line 1193 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1197
  tmp = crypto_hash_crt(desc->tfm);
#line 1197
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1197
  return (tmp___0);
}
}
#line 1200 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1202
  tmp = crypto_hash_crt(desc->tfm);
#line 1202
  tmp___0 = (*(tmp->final))(desc, out);
#line 1202
  return (tmp___0);
}
}
#line 34 "include/linux/mempool.h"
extern void mempool_free(void * , mempool_t * ) ;
#line 1064 "include/linux/blkdev.h"
__inline static unsigned int queue_max_segment_size(struct request_queue *q ) 
{ 


  {
#line 1066
  return (q->limits.max_segment_size);
}
}
#line 646 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 652
  __asm__  volatile   ("": : : "memory");
#line 653
  return (thi->t_state);
}
}
#line 1084 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1086
  return (mdev->minor);
}
}
#line 1097 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1099
  ldv_mutex_lock_38(& mdev->data.mutex);
#line 1102
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1102
  if (tmp != 0L) {
#line 1103
    ldv_mutex_unlock_39(& mdev->data.mutex);
#line 1104
    return (0);
  } else {

  }
#line 1106
  return (1);
}
}
#line 1109 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1111
  ldv_mutex_unlock_40(& mdev->data.mutex);
#line 1112
  return;
}
}
#line 1136
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1145
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1147
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1164
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) ;
#line 1168
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) ;
#line 1173
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) ;
#line 1181
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1187
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1189
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1191
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1194
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1196
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1200
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1206
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1209
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1212
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1213
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1216
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1221
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) ;
#line 1407
mempool_t *drbd_request_mempool ;
#line 1415 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1441
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1444
int drbd_worker(struct drbd_thread *thi ) ;
#line 1445
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1446
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1447
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1448
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1449
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1453
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1455 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1457
  if (mdev->ov_last_oos_size != 0UL) {
#line 1458
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1458
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1458
    printk("<3>%s %s: Out of sync: start=%llu, size=%lu (sectors)\n", tmp___0, tmp,
           (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1462
  mdev->ov_last_oos_size = 0UL;
#line 1463
  return;
}
}
#line 1466
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1467
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1470
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1471
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1472
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1473
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1474
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1475
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1476
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1477
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1479
int w_io_error(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1480
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1481
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1482
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1483
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1484
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1485
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1486
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1488
void resync_timer_fn(unsigned long data ) ;
#line 1491
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1494
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1499
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) ;
#line 1510 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1514
  if (level == 1) {
#line 1515
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1517
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1519
  return (err);
}
}
#line 1522 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1524
  val = 1;
#line 1525
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1527
  return;
}
}
#line 1529 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1531
  val = 0;
#line 1532
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1534
  return;
}
}
#line 1550
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1560
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1561
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1563
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1564
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1565
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1566
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1569
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1573
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) ;
#line 1649 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1651
  return ((struct page *)page->ldv_12107.ldv_12104.private);
}
}
#line 1672 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1674
  page = e->pages;
#line 1675
  goto ldv_42638;
  ldv_42637: 
#line 1676
  tmp = page_count(page);
#line 1676
  if (tmp > 1) {
#line 1677
    return (1);
  } else {

  }
#line 1675
  page = page_chain_next(page);
  ldv_42638: ;
#line 1675
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1675
    tmp___0 = page_chain_next(page);
#line 1675
    __builtin_prefetch((void const   *)tmp___0);
#line 1675
    if (1 != 0) {
#line 1676
      goto ldv_42637;
    } else {
#line 1678
      goto ldv_42639;
    }
  } else {

  }
  ldv_42639: ;
#line 1679
  return (0);
}
}
#line 1683 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1685
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1685
  if (tmp == 0) {
#line 1685
    goto ldv_42643;
  } else {

  }
#line 1685
  tmp___0 = get_current();
#line 1685
  __wait.flags = 0U;
#line 1685
  __wait.private = (void *)tmp___0;
#line 1685
  __wait.func = & autoremove_wake_function;
#line 1685
  __wait.task_list.next = & __wait.task_list;
#line 1685
  __wait.task_list.prev = & __wait.task_list;
  ldv_42646: 
#line 1685
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1685
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1685
  if (tmp___1 == 0) {
#line 1685
    goto ldv_42645;
  } else {

  }
#line 1685
  schedule();
#line 1685
  goto ldv_42646;
  ldv_42645: 
#line 1685
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42643: ;
#line 1688
  return;
}
}
#line 1689 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1691
  clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1692
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1693
  return;
}
}
#line 1726 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1728
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1730
  if (forcedetach == 0) {
#line 1731
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1731
    if (tmp___1 != 0) {
#line 1732
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1732
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1732
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1734
    goto ldv_42669;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1739
  if ((int )mdev->state.ldv_33657.disk > 2) {
#line 1740
    __ns.i = mdev->state.i;
#line 1740
    __ns.ldv_33657.disk = 2U;
#line 1740
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1741
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1741
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1741
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1744
  goto ldv_42669;
  }
  ldv_42669: ;
#line 1747
  return;
}
}
#line 1805 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 


  {
#line 1808
  return ((unsigned long )bdev != (unsigned long )((struct block_device *)0) ? (sector_t )((bdev->bd_inode)->i_size >> 9) : 0UL);
}
}
#line 1894 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1897
  tmp = spinlock_check(& q->q_lock);
#line 1897
  flags = _raw_spin_lock_irqsave(tmp);
#line 1898
  list_add_tail(& w->list, & q->q);
#line 1899
  up(& q->s);
#line 1901
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1902
  return;
}
}
#line 1904 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1906
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1906
  if (tmp != 0) {
#line 1907
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 1908
  return;
}
}
#line 1910 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 1912
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 1913
  wake_asender(mdev);
#line 1914
  return;
}
}
#line 1916 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1920
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 1920
  return (tmp);
}
}
#line 1935 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 1937
  _drbd_thread_stop(thi, 0, 1);
#line 1938
  return;
}
}
#line 1995 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1997
  atomic_inc(& mdev->rs_pending_cnt);
#line 1998
  return;
}
}
#line 2331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_kick_lo(struct drbd_conf *mdev ) 
{ 
  struct request_queue *tmp ;
  int tmp___0 ;

  {
#line 2333
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2333
  if (tmp___0 != 0) {
#line 2334
    tmp = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2334
    drbd_blk_run_queue(tmp);
#line 2335
    put_ldev(mdev);
  } else {

  }
#line 2337
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 274 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 276
  mempool_free((void *)req, drbd_request_mempool);
#line 277
  return;
}
}
#line 294
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 296
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 303
  mdev = req->mdev;
#line 307
  __req_mod(req, what, & m);
#line 308
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 309
    complete_master_bio(mdev, & m);
  } else {

  }
#line 310
  return;
}
}
#line 314 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 317
  mdev = req->mdev;
#line 319
  spin_lock_irq(& mdev->req_lock);
#line 320
  __req_mod(req, what, & m);
#line 321
  spin_unlock_irq(& mdev->req_lock);
#line 323
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 324
    complete_master_bio(mdev, & m);
  } else {

  }
#line 325
  return;
}
}
#line 91 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 125
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 126
  md_io->error = error;
#line 128
  complete(& md_io->event);
#line 129
  return;
}
}
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  char const   *tmp ;
  char const   *tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 136
  flags = 0UL;
#line 137
  mdev = e->mdev;
#line 139
  if (e->block_id == 0ULL) {
#line 139
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 139
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 139
    printk("<3>%s %s: ASSERT( e->block_id != ID_VACANT ) in %s:%d\n", tmp___0, tmp,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           139);
  } else {

  }
#line 141
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 141
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 142
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 143
  list_del(& e->w.list);
#line 144
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 144
  if (tmp___2 != 0) {
#line 145
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 146
  tmp___3 = constant_test_bit(4U, (unsigned long const volatile   *)(& e->flags));
#line 146
  if (tmp___3 != 0) {
#line 147
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_read_sec_final");
  } else {

  }
#line 148
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 150
  drbd_queue_work(& mdev->data.work, & e->w);
#line 151
  put_ldev(mdev);
#line 152
  return;
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int is_failed_barrier(int ee_flags ) 
{ 


  {
#line 156
  return ((ee_flags & 28) == 20);
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
#line 164
  flags = 0UL;
#line 165
  mdev = e->mdev;
#line 173
  tmp___0 = is_failed_barrier((int )e->flags);
#line 173
  if (tmp___0 != 0) {
#line 174
    drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 175
    tmp = spinlock_check(& mdev->req_lock);
#line 175
    flags = _raw_spin_lock_irqsave(tmp);
#line 176
    list_del(& e->w.list);
#line 177
    e->flags = (e->flags & 0xffffffffffffffe7UL) | 8UL;
#line 178
    e->w.cb = & w_e_reissue;
#line 181
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 182
    drbd_queue_work(& mdev->data.work, & e->w);
#line 183
    return;
  } else {

  }
#line 186
  if (e->block_id == 0ULL) {
#line 186
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 186
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 186
    printk("<3>%s %s: ASSERT( e->block_id != ID_VACANT ) in %s:%d\n", tmp___2, tmp___1,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           186);
  } else {

  }
#line 192
  e_sector = e->sector;
#line 193
  do_al_complete_io = (int )e->flags & 1;
#line 194
  is_syncer_req = e->block_id == 0xffffffffffffffffULL;
#line 196
  tmp___3 = spinlock_check(& mdev->req_lock);
#line 196
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 197
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 198
  list_del(& e->w.list);
#line 199
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 206
  if (is_syncer_req != 0) {
#line 206
    tmp___4 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 206
    do_wake = tmp___4;
  } else {
#line 206
    tmp___5 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 206
    do_wake = tmp___5;
  }
#line 210
  tmp___6 = constant_test_bit(4U, (unsigned long const volatile   *)(& e->flags));
#line 210
  if (tmp___6 != 0) {
#line 211
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec_final");
  } else {

  }
#line 212
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 214
  if (is_syncer_req != 0) {
#line 215
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 217
  if (do_wake != 0) {
#line 218
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 220
  if (do_al_complete_io != 0) {
#line 221
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 223
  wake_asender(mdev);
#line 224
  put_ldev(mdev);
#line 225
  return;
}
}
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 232
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 233
  mdev = e->mdev;
#line 234
  uptodate = (int )bio->bi_flags & 1;
#line 235
  is_write = (int )bio->bi_rw & 1;
#line 237
  if (error != 0) {
#line 238
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 238
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 238
    printk("<4>%s %s: %s: error=%d s=%llus\n", tmp___0, tmp, is_write != 0 ? (char *)"write" : (char *)"read",
           error, (unsigned long long )e->sector);
  } else {

  }
#line 241
  if (error == 0 && uptodate == 0) {
#line 242
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 242
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 242
    printk("<4>%s %s: %s: setting error to -EIO s=%llus\n", tmp___2, tmp___1, is_write != 0 ? (char *)"write" : (char *)"read",
           (unsigned long long )e->sector);
#line 248
    error = -5;
  } else {

  }
#line 251
  if (error != 0) {
#line 252
    set_bit(4U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 254
  bio_put(bio);
#line 255
  tmp___3 = atomic_dec_and_test(& e->pending_bios);
#line 255
  if (tmp___3 != 0) {
#line 256
    if (is_write != 0) {
#line 257
      drbd_endio_write_sec_final(e);
    } else {
#line 259
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 260
  return;
}
}
#line 265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  void *tmp___4 ;
  raw_spinlock_t *tmp___5 ;

  {
#line 268
  req = (struct drbd_request *)bio->bi_private;
#line 269
  mdev = req->mdev;
#line 272
  uptodate = (int )bio->bi_flags & 1;
#line 274
  if (error != 0) {
#line 275
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 275
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 275
    printk("<4>%s %s: p %s: error=%d\n", tmp___0, tmp, (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read",
           error);
  } else {

  }
#line 277
  if (error == 0 && uptodate == 0) {
#line 278
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 278
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 278
    printk("<4>%s %s: p %s: setting error to -EIO\n", tmp___2, tmp___1, (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 283
    error = -5;
  } else {

  }
#line 287
  tmp___3 = __builtin_expect(error != 0, 0L);
#line 287
  if (tmp___3 != 0L) {
#line 288
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 3UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 294
    what = completed_ok;
  }
#line 296
  bio_put(req->private_bio);
#line 297
  tmp___4 = ERR_PTR((long )error);
#line 297
  req->private_bio = (struct bio *)tmp___4;
#line 299
  tmp___5 = spinlock_check(& mdev->req_lock);
#line 299
  flags = _raw_spin_lock_irqsave(tmp___5);
#line 300
  __req_mod(req, what, & m);
#line 301
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 303
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 304
    complete_master_bio(mdev, & m);
  } else {

  }
#line 305
  return;
}
}
#line 307 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_io_error(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 309
  __mptr = (struct drbd_work  const  *)w;
#line 309
  req = (struct drbd_request *)__mptr;
#line 316
  drbd_req_free(req);
#line 318
  return (1);
}
}
#line 321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 323
  __mptr = (struct drbd_work  const  *)w;
#line 323
  req = (struct drbd_request *)__mptr;
#line 329
  spin_lock_irq(& mdev->req_lock);
#line 330
  if ((cancel != 0 || (int )mdev->state.ldv_33657.conn <= 9) || (int )mdev->state.ldv_33657.pdsk <= 4) {
#line 333
    _req_mod(req, send_canceled);
#line 334
    spin_unlock_irq(& mdev->req_lock);
#line 335
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 335
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 335
    printk("<1>%s %s: WE ARE LOST. Local IO failure, no peer.\n", tmp___0, tmp);
#line 336
    return (1);
  } else {

  }
#line 338
  spin_unlock_irq(& mdev->req_lock);
#line 340
  tmp___1 = w_send_read_req(mdev, w, 0);
#line 340
  return (tmp___1);
}
}
#line 343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 345
  _b = cancel != 0;
#line 345
  if (_b != 0) {
#line 345
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 345
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 345
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "w_resync_inactive", (char *)"cancel",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           345);
  } else {

  }
#line 345
  if (_b != 0) {
#line 345
    return (1);
  } else {

  }
#line 346
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 346
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 346
  printk("<3>%s %s: resync inactive, but callback triggered??\n", tmp___2, tmp___1);
#line 347
  return (1);
}
}
#line 350 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 354
  page = e->pages;
#line 358
  desc.tfm = tfm;
#line 359
  desc.flags = 0U;
#line 361
  sg_init_table(& sg, 1U);
#line 362
  crypto_hash_init(& desc);
#line 364
  goto ldv_43131;
  ldv_43130: 
#line 366
  sg_set_page(& sg, page, 4096U, 0U);
#line 367
  crypto_hash_update(& desc, & sg, sg.length);
#line 368
  page = tmp;
  ldv_43131: 
#line 364
  tmp = page_chain_next(page);
#line 364
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 365
    goto ldv_43130;
  } else {

  }
#line 371
  len = e->size & 4095U;
#line 372
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 373
  crypto_hash_update(& desc, & sg, sg.length);
#line 374
  crypto_hash_final(& desc, (u8 *)digest);
#line 375
  return;
}
}
#line 377 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 384
  desc.tfm = tfm;
#line 385
  desc.flags = 0U;
#line 387
  sg_init_table(& sg, 1U);
#line 388
  crypto_hash_init(& desc);
#line 390
  bvec = bio->bi_io_vec;
#line 390
  i = 0;
#line 390
  goto ldv_43144;
  ldv_43143: 
#line 391
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 392
  crypto_hash_update(& desc, & sg, sg.length);
#line 390
  bvec = bvec + 1;
#line 390
  i = i + 1;
  ldv_43144: ;
#line 390
  if ((int )bio->bi_vcnt > i) {
#line 391
    goto ldv_43143;
  } else {

  }
#line 394
  crypto_hash_final(& desc, (u8 *)digest);
#line 395
  return;
}
}
#line 397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;
  unsigned int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  long tmp___8 ;

  {
#line 399
  __mptr = (struct drbd_work  const  *)w;
#line 399
  e = (struct drbd_epoch_entry *)__mptr;
#line 404
  if (e->block_id != 2205466966ULL) {
#line 404
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 404
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 404
    printk("<3>%s %s: ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           404);
  } else {

  }
#line 406
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 406
  if (tmp___1 != 0L) {
#line 407
    drbd_free_ee(mdev, e);
#line 408
    return (1);
  } else {

  }
#line 411
  tmp___5 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 411
  if (tmp___5 != 0L) {
#line 412
    tmp___2 = crypto_hash_digestsize(mdev->csums_tfm);
#line 412
    digest_size = (int )tmp___2;
#line 413
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 414
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 415
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 417
      inc_rs_pending(mdev);
#line 418
      ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                   P_CSUM_RS_REQUEST);
#line 424
      kfree((void const   *)digest);
    } else {
#line 426
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 426
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 426
      printk("<3>%s %s: kmalloc() of digest failed.\n", tmp___4, tmp___3);
#line 427
      ok = 0;
    }
  } else {
#line 430
    ok = 1;
  }
#line 432
  drbd_free_ee(mdev, e);
#line 434
  tmp___8 = __builtin_expect(ok == 0, 0L);
#line 434
  if (tmp___8 != 0L) {
#line 435
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 435
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 435
    printk("<3>%s %s: drbd_send_drequest(..., csum) failed\n", tmp___7, tmp___6);
  } else {

  }
#line 436
  return (ok);
}
}
#line 441 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;

  {
#line 445
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 445
  if (tmp == 0) {
#line 446
    return (0);
  } else {

  }
#line 450
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 451
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 452
    goto fail;
  } else {

  }
#line 454
  spin_lock_irq(& mdev->req_lock);
#line 455
  list_add(& e->w.list, & mdev->read_ee);
#line 456
  spin_unlock_irq(& mdev->req_lock);
#line 458
  e->w.cb = & w_e_send_csum;
#line 459
  tmp___0 = drbd_submit_ee(mdev, e, 0U, 3);
#line 459
  if (tmp___0 == 0) {
#line 460
    return (1);
  } else {

  }
#line 462
  drbd_free_ee(mdev, e);
  fail: 
#line 464
  put_ldev(mdev);
#line 465
  return (2);
}
}
#line 468 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  int queue ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
#line 471
  mdev = (struct drbd_conf *)data;
#line 474
  tmp = spinlock_check(& mdev->req_lock);
#line 474
  flags = _raw_spin_lock_irqsave(tmp);
#line 476
  tmp___0 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 476
  tmp___1 = __builtin_expect(tmp___0 == 0, 1L);
#line 476
  if (tmp___1 != 0L) {
#line 477
    queue = 1;
#line 478
    if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 288U) {
#line 479
      mdev->resync_work.cb = & w_make_ov_request;
    } else {
#line 481
      mdev->resync_work.cb = & w_make_resync_request;
    }
  } else {
#line 483
    queue = 0;
#line 484
    mdev->resync_work.cb = & w_resync_inactive;
  }
#line 487
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 490
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 490
  if (tmp___2 != 0 && queue != 0) {
#line 491
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 492
  return;
}
}
#line 494 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int calc_resync_rate(struct drbd_conf *mdev ) 
{ 
  int d ;
  int td ;
  int hd ;
  int cr ;

  {
#line 496
  d = mdev->data_delay / 1000;
#line 497
  td = mdev->sync_conf.throttle_th * 100;
#line 498
  hd = mdev->sync_conf.hold_off_th * 100;
#line 499
  cr = mdev->sync_conf.rate;
#line 501
  return (d > td ? (d < hd ? ((td - d) * cr) / (hd - td) + cr : 0) : cr);
}
}
#line 506 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_segment_size ;
  int number ;
  int i ;
  int size ;
  int pe ;
  int mx ;
  int align ;
  int queued ;
  int sndbuf ;
  long tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  unsigned int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  long tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned long tmp___23 ;

  {
#line 511
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 511
  capacity = tmp;
#line 516
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 516
  if (tmp___0 != 0L) {
#line 517
    return (1);
  } else {

  }
#line 519
  tmp___3 = __builtin_expect((int )mdev->state.ldv_33657.conn <= 9, 0L);
#line 519
  if (tmp___3 != 0L) {
#line 520
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 520
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 520
    printk("<3>%s %s: Confused in w_make_resync_request()! cstate < Connected", tmp___2,
           tmp___1);
#line 521
    return (0);
  } else {

  }
#line 524
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 272U) {
#line 525
    tmp___4 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33657.conn);
#line 525
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 525
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 525
    printk("<3>%s %s: %s in w_make_resync_request\n", tmp___6, tmp___5, tmp___4);
  } else {

  }
#line 528
  tmp___9 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 528
  if (tmp___9 == 0) {
#line 533
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 533
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 533
    printk("<3>%s %s: Disk broke down during resync!\n", tmp___8, tmp___7);
#line 534
    mdev->resync_work.cb = & w_resync_inactive;
#line 535
    return (1);
  } else {

  }
#line 540
  if (mdev->agreed_pro_version <= 93) {
#line 540
    tmp___10 = queue_max_segment_size(mdev->rq_queue);
#line 540
    max_segment_size = (int )tmp___10;
  } else {
#line 540
    max_segment_size = 32768;
  }
#line 543
  mdev->c_sync_rate = calc_resync_rate(mdev);
#line 544
  number = (mdev->c_sync_rate * 25) / 1000;
#line 545
  pe = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 547
  ldv_mutex_lock_41(& mdev->data.mutex);
#line 548
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 549
    mx = (int )((unsigned long )((mdev->data.socket)->sk)->sk_rcvbuf / 32UL);
  } else {
#line 551
    mx = 1;
  }
#line 552
  ldv_mutex_unlock_42(& mdev->data.mutex);
#line 555
  if (number > mx) {
#line 556
    mx = number;
  } else {

  }
#line 559
  if (pe + number > mx) {
#line 560
    number = mx - pe;
  } else {

  }
#line 563
  i = 0;
#line 563
  goto ldv_43208;
  ldv_43207: 
#line 565
  ldv_mutex_lock_43(& mdev->data.mutex);
#line 566
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 567
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 568
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 570
    queued = 1;
#line 571
    sndbuf = 0;
  }
#line 573
  ldv_mutex_unlock_44(& mdev->data.mutex);
#line 574
  if (sndbuf / 2 < queued) {
#line 575
    goto requeue;
  } else {

  }
  next_sector: 
#line 578
  size = 4096;
#line 579
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 581
  if (bit == 0xffffffffffffffffUL) {
#line 582
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 583
    mdev->resync_work.cb = & w_resync_inactive;
#line 584
    put_ldev(mdev);
#line 585
    return (1);
  } else {

  }
#line 588
  sector = bit << 3;
#line 590
  tmp___11 = drbd_try_rs_begin_io(mdev, sector);
#line 590
  if (tmp___11 != 0) {
#line 591
    mdev->bm_resync_fo = bit;
#line 592
    goto requeue;
  } else {

  }
#line 594
  mdev->bm_resync_fo = bit + 1UL;
#line 596
  tmp___12 = drbd_bm_test_bit(mdev, bit);
#line 596
  tmp___13 = __builtin_expect(tmp___12 == 0, 0L);
#line 596
  if (tmp___13 != 0L) {
#line 597
    drbd_rs_complete_io(mdev, sector);
#line 598
    goto next_sector;
  } else {

  }
#line 608
  align = 1;
  ldv_43200: ;
#line 610
  if (size + 4096 > max_segment_size) {
#line 611
    goto ldv_43199;
  } else {

  }
#line 614
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 615
    goto ldv_43199;
  } else {

  }
#line 618
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 619
    goto ldv_43199;
  } else {

  }
#line 625
  tmp___14 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 625
  if (tmp___14 != 1) {
#line 626
    goto ldv_43199;
  } else {

  }
#line 627
  bit = bit + 1UL;
#line 628
  size = size + 4096;
#line 629
  if (4096 << align <= size) {
#line 630
    align = align + 1;
  } else {

  }
#line 631
  i = i + 1;
#line 632
  goto ldv_43200;
  ldv_43199: ;
#line 635
  if (size > 4096) {
#line 636
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 640
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 641
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 642
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 643
    tmp___15 = read_for_csum(mdev, sector, size);
#line 643
    switch (tmp___15) {
    case 0: 
#line 645
    put_ldev(mdev);
#line 646
    return (0);
    case 2: 
#line 648
    drbd_rs_complete_io(mdev, sector);
#line 649
    mdev->bm_resync_fo = sector >> 3;
#line 650
    goto requeue;
    }
  } else {
#line 654
    inc_rs_pending(mdev);
#line 655
    tmp___22 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 655
    if (tmp___22 == 0) {
#line 657
      tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 657
      tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 657
      printk("<3>%s %s: drbd_send_drequest() failed, aborting...\n", tmp___17, tmp___16);
#line 658
      atomic_dec(& mdev->rs_pending_cnt);
#line 658
      tmp___21 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 658
      if (tmp___21 < 0) {
#line 658
        tmp___18 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 658
        tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 658
        tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 658
        printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___20, tmp___19,
               "w_make_resync_request", 658, tmp___18);
      } else {

      }
#line 659
      put_ldev(mdev);
#line 660
      return (0);
    } else {

    }
  }
#line 563
  i = i + 1;
  ldv_43208: ;
#line 563
  if (i < number) {
#line 564
    goto ldv_43207;
  } else {

  }
#line 665
  tmp___23 = drbd_bm_bits(mdev);
#line 665
  if (mdev->bm_resync_fo >= tmp___23) {
#line 672
    mdev->resync_work.cb = & w_resync_inactive;
#line 673
    put_ldev(mdev);
#line 674
    return (1);
  } else {

  }
  requeue: 
#line 678
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 679
  put_ldev(mdev);
#line 680
  return (1);
}
}
#line 683 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 687
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 687
  capacity = tmp;
#line 689
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 689
  if (tmp___0 != 0L) {
#line 690
    return (1);
  } else {

  }
#line 692
  tmp___3 = __builtin_expect((int )mdev->state.ldv_33657.conn <= 9, 0L);
#line 692
  if (tmp___3 != 0L) {
#line 693
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 693
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 693
    printk("<3>%s %s: Confused in w_make_ov_request()! cstate < Connected", tmp___2,
           tmp___1);
#line 694
    return (0);
  } else {

  }
#line 697
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 698
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 698
  if (tmp___4 > number) {
#line 699
    goto requeue;
  } else {

  }
#line 701
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 701
  number = number - tmp___5;
#line 703
  sector = mdev->ov_position;
#line 704
  i = 0;
#line 704
  goto ldv_43226;
  ldv_43225: ;
#line 705
  if (sector >= capacity) {
#line 706
    mdev->resync_work.cb = & w_resync_inactive;
#line 707
    return (1);
  } else {

  }
#line 710
  size = 4096;
#line 712
  tmp___6 = drbd_try_rs_begin_io(mdev, sector);
#line 712
  if (tmp___6 != 0) {
#line 713
    mdev->ov_position = sector;
#line 714
    goto requeue;
  } else {

  }
#line 717
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 718
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 720
  inc_rs_pending(mdev);
#line 721
  tmp___11 = drbd_send_ov_request(mdev, sector, size);
#line 721
  if (tmp___11 == 0) {
#line 722
    atomic_dec(& mdev->rs_pending_cnt);
#line 722
    tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 722
    if (tmp___10 < 0) {
#line 722
      tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 722
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 722
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 722
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___9, tmp___8,
             "w_make_ov_request", 722, tmp___7);
    } else {

    }
#line 723
    return (0);
  } else {

  }
#line 725
  sector = sector + 8UL;
#line 704
  i = i + 1;
  ldv_43226: ;
#line 704
  if (i < number) {
#line 705
    goto ldv_43225;
  } else {

  }
#line 727
  mdev->ov_position = sector;
  requeue: 
#line 730
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 731
  return (1);
}
}
#line 735 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 737
  kfree((void const   *)w);
#line 738
  ov_oos_print(mdev);
#line 739
  drbd_resync_finished(mdev);
#line 741
  return (1);
}
}
#line 744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 746
  kfree((void const   *)w);
#line 748
  drbd_resync_finished(mdev);
#line 750
  return (1);
}
}
#line 753 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int i ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int i___0 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;

  {
#line 759
  khelper_cmd = 0;
#line 764
  tmp___3 = drbd_rs_del_all(mdev);
#line 764
  if (tmp___3 != 0) {
#line 770
    drbd_kick_lo(mdev);
#line 771
    tmp = get_current();
#line 771
    tmp->state = 1L;
#line 772
    schedule_timeout(25L);
#line 773
    tmp___0 = kmalloc___0(24UL, 32U);
#line 773
    w = (struct drbd_work *)tmp___0;
#line 774
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 775
      w->cb = & w_resync_finished;
#line 776
      drbd_queue_work(& mdev->data.work, w);
#line 777
      return (1);
    } else {

    }
#line 779
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 779
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 779
    printk("<3>%s %s: Warn failed to drbd_rs_del_all() and to kmalloc(w).\n", tmp___2,
           tmp___1);
  } else {

  }
#line 782
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 783
  if (dt == 0UL) {
#line 784
    dt = 1UL;
  } else {

  }
#line 785
  db = mdev->rs_total;
#line 786
  dbdt = db / dt << 2;
#line 787
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 789
  tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 789
  if (tmp___4 == 0) {
#line 790
    goto out;
  } else {

  }
#line 792
  spin_lock_irq(& mdev->req_lock);
#line 793
  os = mdev->state;
#line 797
  if ((int )os.ldv_33657.conn <= 10) {
#line 798
    goto out_unlock;
  } else {

  }
#line 800
  ns = os;
#line 801
  ns.ldv_33657.conn = 10U;
#line 803
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 803
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 803
  printk("<6>%s %s: %s done (total %lu sec; paused %lu sec; %lu K/sec)\n", tmp___6,
         tmp___5, (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? (char *)"Online verify " : (char *)"Resync",
         mdev->rs_paused + dt, mdev->rs_paused, dbdt);
#line 808
  n_oos = drbd_bm_total_weight(mdev);
#line 810
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 811
    if (n_oos != 0UL) {
#line 812
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 812
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 812
      printk("<1>%s %s: Online verify found %lu %dk block out of sync!\n", tmp___8,
             tmp___7, n_oos, 4);
#line 814
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 817
      if (mdev->rs_failed != n_oos) {
#line 817
        tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 817
        tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 817
        printk("<3>%s %s: ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n", tmp___10,
               tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
               817);
      } else {

      }
#line 819
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 820
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 822
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 823
        s = mdev->rs_same_csum;
#line 824
        t = mdev->rs_total;
#line 825
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 828
        tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 828
        tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 828
        printk("<6>%s %s: %u %% had equal check sums, eliminated: %luK; transferred %luK total %luK\n",
               tmp___12, tmp___11, ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
               mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 837
  if (mdev->rs_failed != 0UL) {
#line 838
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 838
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 838
    printk("<6>%s %s:             %lu failed blocks\n", tmp___14, tmp___13, mdev->rs_failed);
#line 840
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 841
      ns.ldv_33657.disk = 4U;
#line 842
      ns.ldv_33657.pdsk = 8U;
    } else {
#line 844
      ns.ldv_33657.disk = 8U;
#line 845
      ns.ldv_33657.pdsk = 4U;
    }
  } else {
#line 848
    ns.ldv_33657.disk = 8U;
#line 849
    ns.ldv_33657.pdsk = 8U;
#line 851
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 852
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 854
        i = 1;
#line 854
        goto ldv_43256;
        ldv_43255: 
#line 855
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 854
        i = i + 1;
        ldv_43256: ;
#line 854
        if (i <= 3) {
#line 855
          goto ldv_43255;
        } else {

        }
#line 856
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 857
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 859
        tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 859
        tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 859
        printk("<3>%s %s: mdev->p_uuid is NULL! BUG\n", tmp___16, tmp___15);
      }
    } else {

    }
#line 863
    drbd_uuid_set_bm(mdev, 0ULL);
#line 865
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 869
      i___0 = 0;
#line 869
      goto ldv_43260;
      ldv_43259: 
#line 870
      *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 869
      i___0 = i___0 + 1;
      ldv_43260: ;
#line 869
      if (i___0 <= 3) {
#line 870
        goto ldv_43259;
      } else {

      }

    } else {

    }
  }
#line 874
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 876
  spin_unlock_irq(& mdev->req_lock);
#line 877
  put_ldev(mdev);
  out: 
#line 879
  mdev->rs_total = 0UL;
#line 880
  mdev->rs_failed = 0UL;
#line 881
  mdev->rs_paused = 0UL;
#line 882
  mdev->ov_start_sector = 0UL;
#line 884
  tmp___19 = test_and_clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 884
  if (tmp___19 != 0) {
#line 885
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 885
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 885
    printk("<4>%s %s: Writing the whole bitmap, due to failed kmalloc\n", tmp___18,
           tmp___17);
#line 886
    drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished");
  } else {

  }
#line 889
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 890
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 892
  return (1);
}
}
#line 896 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int tmp ;

  {
#line 898
  tmp = drbd_ee_has_active_page(e);
#line 898
  if (tmp != 0) {
#line 900
    spin_lock_irq(& mdev->req_lock);
#line 901
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 902
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 904
    drbd_free_ee(mdev, e);
  }
#line 905
  return;
}
}
#line 913 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long tmp___14 ;

  {
#line 915
  __mptr = (struct drbd_work  const  *)w;
#line 915
  e = (struct drbd_epoch_entry *)__mptr;
#line 918
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 918
  if (tmp___3 != 0L) {
#line 919
    drbd_free_ee(mdev, e);
#line 920
    atomic_dec(& mdev->unacked_cnt);
#line 920
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 920
    if (tmp___2 < 0) {
#line 920
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 920
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 920
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 920
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_data_req",
             920, tmp);
    } else {

    }
#line 921
    return (1);
  } else {

  }
#line 924
  tmp___7 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 924
  if (tmp___7 != 0L) {
#line 925
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 927
    tmp___6 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 927
    if (tmp___6 != 0) {
#line 928
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 928
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 928
      printk("<3>%s %s: Sending NegDReply. sector=%llus.\n", tmp___5, tmp___4, (unsigned long long )e->sector);
    } else {

    }
#line 931
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 934
  atomic_dec(& mdev->unacked_cnt);
#line 934
  tmp___11 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 934
  if (tmp___11 < 0) {
#line 934
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 934
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 934
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 934
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___10, tmp___9, "w_e_end_data_req",
           934, tmp___8);
  } else {

  }
#line 936
  move_to_net_ee_or_free(mdev, e);
#line 938
  tmp___14 = __builtin_expect(ok == 0, 0L);
#line 938
  if (tmp___14 != 0L) {
#line 939
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 939
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 939
    printk("<3>%s %s: drbd_send_block() failed\n", tmp___13, tmp___12);
  } else {

  }
#line 940
  return (ok);
}
}
#line 949 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  long tmp___12 ;
  int tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  long tmp___19 ;

  {
#line 951
  __mptr = (struct drbd_work  const  *)w;
#line 951
  e = (struct drbd_epoch_entry *)__mptr;
#line 954
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 954
  if (tmp___3 != 0L) {
#line 955
    drbd_free_ee(mdev, e);
#line 956
    atomic_dec(& mdev->unacked_cnt);
#line 956
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 956
    if (tmp___2 < 0) {
#line 956
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 956
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 956
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 956
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_rsdata_req",
             956, tmp);
    } else {

    }
#line 957
    return (1);
  } else {

  }
#line 960
  tmp___4 = _get_ldev_if_state(mdev, D_FAILED);
#line 960
  if (tmp___4 != 0) {
#line 961
    drbd_rs_complete_io(mdev, e->sector);
#line 962
    put_ldev(mdev);
  } else {

  }
#line 965
  tmp___12 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 965
  if (tmp___12 != 0L) {
#line 966
    tmp___8 = __builtin_expect((int )mdev->state.ldv_33657.pdsk > 3, 1L);
#line 966
    if (tmp___8 != 0L) {
#line 967
      inc_rs_pending(mdev);
#line 968
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    } else {
#line 970
      tmp___7 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 970
      if (tmp___7 != 0) {
#line 971
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 971
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 971
        printk("<3>%s %s: Not sending RSDataReply, partner DISKLESS!\n", tmp___6,
               tmp___5);
      } else {

      }
#line 973
      ok = 1;
    }
  } else {
#line 976
    tmp___11 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 976
    if (tmp___11 != 0) {
#line 977
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 977
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 977
      printk("<3>%s %s: Sending NegRSDReply. sector %llus.\n", tmp___10, tmp___9,
             (unsigned long long )e->sector);
    } else {

    }
#line 980
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 983
    drbd_rs_failed_io(mdev, e->sector, (int )e->size);
  }
#line 986
  atomic_dec(& mdev->unacked_cnt);
#line 986
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 986
  if (tmp___16 < 0) {
#line 986
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 986
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 986
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 986
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___15, tmp___14, "w_e_end_rsdata_req",
           986, tmp___13);
  } else {

  }
#line 988
  move_to_net_ee_or_free(mdev, e);
#line 990
  tmp___19 = __builtin_expect(ok == 0, 0L);
#line 990
  if (tmp___19 != 0L) {
#line 991
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 991
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 991
    printk("<3>%s %s: drbd_send_block() failed\n", tmp___18, tmp___17);
  } else {

  }
#line 992
  return (ok);
}
}
#line 995 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  unsigned int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  long tmp___18 ;

  {
#line 997
  __mptr = (struct drbd_work  const  *)w;
#line 997
  e = (struct drbd_epoch_entry *)__mptr;
#line 1000
  digest = 0;
#line 1001
  eq = 0;
#line 1003
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 1003
  if (tmp___3 != 0L) {
#line 1004
    drbd_free_ee(mdev, e);
#line 1005
    atomic_dec(& mdev->unacked_cnt);
#line 1005
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1005
    if (tmp___2 < 0) {
#line 1005
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1005
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1005
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1005
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_csum_rs_req",
             1005, tmp);
    } else {

    }
#line 1006
    return (1);
  } else {

  }
#line 1009
  drbd_rs_complete_io(mdev, e->sector);
#line 1011
  di = (struct digest_info *)e->block_id;
#line 1013
  tmp___11 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1013
  if (tmp___11 != 0L) {
#line 1017
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1018
      tmp___4 = crypto_hash_digestsize(mdev->csums_tfm);
#line 1018
      digest_size = (int )tmp___4;
#line 1019
      if (di->digest_size != digest_size) {
#line 1019
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1019
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1019
        printk("<3>%s %s: ASSERT( digest_size == di->digest_size ) in %s:%d\n", tmp___6,
               tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
               1019);
      } else {

      }
#line 1020
      digest = kmalloc___0((size_t )digest_size, 16U);
    } else {

    }
#line 1022
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1023
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 1024
      tmp___7 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1024
      eq = tmp___7 == 0;
#line 1025
      kfree((void const   *)digest);
    } else {

    }
#line 1028
    if (eq != 0) {
#line 1029
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1029U);
#line 1031
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1032
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1034
      inc_rs_pending(mdev);
#line 1035
      e->block_id = 0xffffffffffffffffULL;
#line 1036
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1039
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1040
    tmp___10 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1040
    if (tmp___10 != 0) {
#line 1041
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1041
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1041
      printk("<3>%s %s: Sending NegDReply. I guess it gets messy.\n", tmp___9, tmp___8);
    } else {

    }
  }
#line 1044
  atomic_dec(& mdev->unacked_cnt);
#line 1044
  tmp___15 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1044
  if (tmp___15 < 0) {
#line 1044
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1044
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1044
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1044
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___14, tmp___13, "w_e_end_csum_rs_req",
           1044, tmp___12);
  } else {

  }
#line 1046
  kfree((void const   *)di);
#line 1048
  move_to_net_ee_or_free(mdev, e);
#line 1050
  tmp___18 = __builtin_expect(ok == 0, 0L);
#line 1050
  if (tmp___18 != 0L) {
#line 1051
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1051
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1051
    printk("<3>%s %s: drbd_send_block/ack() failed\n", tmp___17, tmp___16);
  } else {

  }
#line 1052
  return (ok);
}
}
#line 1055 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;

  {
#line 1057
  __mptr = (struct drbd_work  const  *)w;
#line 1057
  e = (struct drbd_epoch_entry *)__mptr;
#line 1060
  ok = 1;
#line 1062
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1062
  if (tmp != 0L) {
#line 1063
    goto out;
  } else {

  }
#line 1065
  tmp___0 = __builtin_expect((e->flags & 16UL) != 0UL, 0L);
#line 1065
  if (tmp___0 != 0L) {
#line 1066
    goto out;
  } else {

  }
#line 1068
  tmp___1 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1068
  digest_size = (int )tmp___1;
#line 1070
  digest = kmalloc___0((size_t )digest_size, 16U);
#line 1071
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1072
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1073
    inc_rs_pending(mdev);
#line 1074
    ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                 P_OV_REPLY);
#line 1076
    if (ok == 0) {
#line 1077
      atomic_dec(& mdev->rs_pending_cnt);
#line 1077
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1077
      if (tmp___5 < 0) {
#line 1077
        tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1077
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1077
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1077
        printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
               "w_e_end_ov_req", 1077, tmp___2);
      } else {

      }
    } else {

    }
#line 1078
    kfree((void const   *)digest);
  } else {

  }
  out: 
#line 1082
  drbd_free_ee(mdev, e);
#line 1084
  atomic_dec(& mdev->unacked_cnt);
#line 1084
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1084
  if (tmp___9 < 0) {
#line 1084
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1084
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1084
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1084
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___8, tmp___7, "w_e_end_ov_req",
           1084, tmp___6);
  } else {

  }
#line 1086
  return (ok);
}
}
#line 1089 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1091
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1092
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1094
    mdev->ov_last_oos_start = sector;
#line 1095
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1097
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1097U);
#line 1098
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 1099
  return;
}
}
#line 1101 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  unsigned int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;

  {
#line 1103
  __mptr = (struct drbd_work  const  *)w;
#line 1103
  e = (struct drbd_epoch_entry *)__mptr;
#line 1107
  eq = 0;
#line 1109
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 1109
  if (tmp___3 != 0L) {
#line 1110
    drbd_free_ee(mdev, e);
#line 1111
    atomic_dec(& mdev->unacked_cnt);
#line 1111
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1111
    if (tmp___2 < 0) {
#line 1111
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1111
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1111
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1111
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_ov_reply",
             1111, tmp);
    } else {

    }
#line 1112
    return (1);
  } else {

  }
#line 1117
  drbd_rs_complete_io(mdev, e->sector);
#line 1119
  di = (struct digest_info *)e->block_id;
#line 1121
  tmp___11 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1121
  if (tmp___11 != 0L) {
#line 1122
    tmp___4 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1122
    digest_size = (int )tmp___4;
#line 1123
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 1124
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1125
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1127
      if (di->digest_size != digest_size) {
#line 1127
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1127
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1127
        printk("<3>%s %s: ASSERT( digest_size == di->digest_size ) in %s:%d\n", tmp___6,
               tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
               1127);
      } else {

      }
#line 1128
      tmp___7 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1128
      eq = tmp___7 == 0;
#line 1129
      kfree((void const   *)digest);
    } else {

    }
  } else {
#line 1132
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1133
    tmp___10 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_ov_reply");
#line 1133
    if (tmp___10 != 0) {
#line 1134
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1134
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1134
      printk("<3>%s %s: Sending NegDReply. I guess it gets messy.\n", tmp___9, tmp___8);
    } else {

    }
  }
#line 1137
  atomic_dec(& mdev->unacked_cnt);
#line 1137
  tmp___15 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1137
  if (tmp___15 < 0) {
#line 1137
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1137
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1137
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1137
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___14, tmp___13, "w_e_end_ov_reply",
           1137, tmp___12);
  } else {

  }
#line 1139
  kfree((void const   *)di);
#line 1141
  if (eq == 0) {
#line 1142
    drbd_ov_oos_found(mdev, e->sector, (int )e->size);
  } else {
#line 1144
    ov_oos_print(mdev);
  }
#line 1146
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, e->sector, (int )e->size, eq != 0 ? 4711ULL : 4712ULL);
#line 1149
  drbd_free_ee(mdev, e);
#line 1151
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1151
  if (mdev->ov_left == 0UL) {
#line 1152
    ov_oos_print(mdev);
#line 1153
    drbd_resync_finished(mdev);
  } else {

  }
#line 1156
  return (ok);
}
}
#line 1159 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1161
  __mptr = (struct drbd_work  const  *)w;
#line 1161
  b = (struct drbd_wq_barrier *)__mptr;
#line 1162
  complete(& b->done);
#line 1163
  return (1);
}
}
#line 1166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1168
  __mptr = (struct drbd_work  const  *)w;
#line 1168
  b = (struct drbd_tl_epoch *)__mptr;
#line 1169
  p = & mdev->data.sbuf.barrier;
#line 1170
  ok = 1;
#line 1177
  spin_lock_irq(& mdev->req_lock);
#line 1178
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_33657.conn <= 9) {
#line 1179
    cancel = 1;
  } else {

  }
#line 1180
  spin_unlock_irq(& mdev->req_lock);
#line 1181
  if (cancel != 0) {
#line 1182
    return (1);
  } else {

  }
#line 1184
  tmp = drbd_get_data_sock(mdev);
#line 1184
  if (tmp == 0) {
#line 1185
    return (0);
  } else {

  }
#line 1186
  p->barrier = b->br_number;
#line 1190
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header *)p, 16UL,
                      0U);
#line 1192
  drbd_put_data_sock(mdev);
#line 1194
  return (ok);
}
}
#line 1197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1199
  if (cancel != 0) {
#line 1200
    return (1);
  } else {

  }
#line 1201
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1201
  return (tmp);
}
}
#line 1210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1212
  __mptr = (struct drbd_work  const  *)w;
#line 1212
  req = (struct drbd_request *)__mptr;
#line 1215
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1215
  if (tmp != 0L) {
#line 1216
    req_mod(req, send_canceled);
#line 1217
    return (1);
  } else {

  }
#line 1220
  ok = drbd_send_dblock(mdev, req);
#line 1221
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1223
  return (ok);
}
}
#line 1232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1234
  __mptr = (struct drbd_work  const  *)w;
#line 1234
  req = (struct drbd_request *)__mptr;
#line 1237
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1237
  if (tmp != 0L) {
#line 1238
    req_mod(req, send_canceled);
#line 1239
    return (1);
  } else {

  }
#line 1242
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1245
  if (ok == 0) {
#line 1248
    if ((int )mdev->state.ldv_33657.conn > 9) {
#line 1249
      val.i = 0U;
#line 1249
      val.ldv_33657.conn = 5U;
#line 1249
      mask.i = 0U;
#line 1249
      mask.ldv_33657.conn = 31U;
#line 1249
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1251
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1253
  return (ok);
}
}
#line 1256 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1258
  odev = mdev;
  ldv_43414: ;
#line 1261
  if (odev->sync_conf.after == -1) {
#line 1262
    return (1);
  } else {

  }
#line 1263
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1264
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1264
  if (_b != 0) {
#line 1264
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1264
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1264
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_may_sync_now", (char *)"!odev",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1264);
  } else {

  }
#line 1264
  if (_b != 0) {
#line 1264
    return (1);
  } else {

  }
#line 1265
  if (((((int )odev->state.ldv_33657.conn > 15 && (int )odev->state.ldv_33657.conn <= 21) || (unsigned int )*((unsigned char *)odev + 2014UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2014UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2014UL) != 0U) {
#line 1269
    return (0);
  } else {

  }
#line 1270
  goto ldv_43414;
}
}
#line 1279 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1282
  rv = 0;
#line 1284
  i = 0;
#line 1284
  goto ldv_43425;
  ldv_43424: 
#line 1285
  odev = minor_to_mdev((unsigned int )i);
#line 1286
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1287
    goto ldv_43421;
  } else {

  }
#line 1288
  if ((unsigned int )*((unsigned short *)odev + 1006UL) == 0U && (unsigned int )*((unsigned char *)odev + 2013UL) == 0U) {
#line 1289
    goto ldv_43421;
  } else {

  }
#line 1290
  tmp___0 = _drbd_may_sync_now(odev);
#line 1290
  if (tmp___0 == 0) {
#line 1291
    __ns.i = odev->state.i;
#line 1291
    __ns.ldv_33657.aftr_isp = 1U;
#line 1291
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1291
    rv = (tmp != 2) | rv;
  } else {

  }
  ldv_43421: 
#line 1284
  i = i + 1;
  ldv_43425: ;
#line 1284
  if ((unsigned int )i < minor_count) {
#line 1285
    goto ldv_43424;
  } else {

  }

#line 1295
  return (rv);
}
}
#line 1304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1307
  rv = 0;
#line 1309
  i = 0;
#line 1309
  goto ldv_43437;
  ldv_43436: 
#line 1310
  odev = minor_to_mdev((unsigned int )i);
#line 1311
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1312
    goto ldv_43433;
  } else {

  }
#line 1313
  if ((unsigned int )*((unsigned short *)odev + 1006UL) == 0U && (unsigned int )*((unsigned char *)odev + 2013UL) == 0U) {
#line 1314
    goto ldv_43433;
  } else {

  }
#line 1315
  if ((unsigned int )*((unsigned char *)odev + 2014UL) != 0U) {
#line 1316
    tmp___0 = _drbd_may_sync_now(odev);
#line 1316
    if (tmp___0 != 0) {
#line 1317
      __ns.i = odev->state.i;
#line 1317
      __ns.ldv_33657.aftr_isp = 0U;
#line 1317
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1317
      rv = (tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_43433: 
#line 1309
  i = i + 1;
  ldv_43437: ;
#line 1309
  if ((unsigned int )i < minor_count) {
#line 1310
    goto ldv_43436;
  } else {

  }

#line 1322
  return (rv);
}
}
#line 1325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1327
  _raw_write_lock_irq(& global_state_lock);
#line 1328
  _drbd_resume_next(mdev);
#line 1329
  _raw_write_unlock_irq(& global_state_lock);
#line 1330
  return;
}
}
#line 1332 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1334
  _raw_write_lock_irq(& global_state_lock);
#line 1335
  _drbd_pause_after(mdev);
#line 1336
  _raw_write_unlock_irq(& global_state_lock);
#line 1337
  return;
}
}
#line 1339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1343
  if (o_minor == -1) {
#line 1344
    return (101);
  } else {

  }
#line 1345
  if (o_minor < -1) {
#line 1346
    return (132);
  } else {
#line 1345
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1345
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1346
      return (132);
    } else {

    }
  }
#line 1349
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_43450: ;
#line 1351
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1352
    return (133);
  } else {

  }
#line 1355
  if (odev->sync_conf.after == -1) {
#line 1356
    return (101);
  } else {

  }
#line 1359
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1360
  goto ldv_43450;
}
}
#line 1363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1368
  _raw_write_lock_irq(& global_state_lock);
#line 1369
  retcode = sync_after_error(mdev, na);
#line 1370
  if (retcode == 101) {
#line 1371
    mdev->sync_conf.after = na;
    ldv_43457: 
#line 1373
    changes = _drbd_pause_after(mdev);
#line 1374
    tmp = _drbd_resume_next(mdev);
#line 1374
    changes = tmp | changes;
#line 1375
    if (changes != 0) {
#line 1376
      goto ldv_43457;
    } else {

    }

  } else {

  }
#line 1377
  _raw_write_unlock_irq(& global_state_lock);
#line 1378
  return (retcode);
}
}
#line 1381 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1383
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 1384
  request_ping(mdev);
#line 1385
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1385
  if (tmp != 0 || (int )mdev->state.ldv_33657.conn <= 9) {
#line 1385
    goto ldv_43462;
  } else {

  }
#line 1385
  tmp___0 = get_current();
#line 1385
  __wait.flags = 0U;
#line 1385
  __wait.private = (void *)tmp___0;
#line 1385
  __wait.func = & autoremove_wake_function;
#line 1385
  __wait.task_list.next = & __wait.task_list;
#line 1385
  __wait.task_list.prev = & __wait.task_list;
  ldv_43465: 
#line 1385
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1385
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1385
  if (tmp___1 != 0 || (int )mdev->state.ldv_33657.conn <= 9) {
#line 1385
    goto ldv_43464;
  } else {

  }
#line 1385
  schedule();
#line 1385
  goto ldv_43465;
  ldv_43464: 
#line 1385
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43462: ;
#line 1388
  return;
}
}
#line 1397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___3 ;
  u64 uuid ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 1402
  if ((int )mdev->state.ldv_33657.conn > 15) {
#line 1403
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1403
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1403
    printk("<3>%s %s: Resync already running!\n", tmp___0, tmp);
#line 1404
    return;
  } else {

  }
#line 1408
  drbd_rs_cancel_all(mdev);
#line 1410
  if ((unsigned int )side == 17U) {
#line 1414
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1415
    r = (r >> 8) & 255;
#line 1416
    if (r > 0) {
#line 1417
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1417
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1417
      printk("<6>%s %s: before-resync-target handler returned %d, dropping connection.\n",
             tmp___2, tmp___1, r);
#line 1419
      val.i = 0U;
#line 1419
      val.ldv_33657.conn = 1U;
#line 1419
      mask.i = 0U;
#line 1419
      mask.ldv_33657.conn = 31U;
#line 1419
      drbd_force_state(mdev, mask, val);
#line 1420
      return;
    } else {

    }
  } else {

  }
#line 1424
  drbd_state_lock(mdev);
#line 1426
  tmp___3 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1426
  if (tmp___3 == 0) {
#line 1427
    drbd_state_unlock(mdev);
#line 1428
    return;
  } else {

  }
#line 1431
  if ((unsigned int )side == 17U) {
#line 1432
    mdev->bm_resync_fo = 0UL;
  } else {
#line 1436
    get_random_bytes((void *)(& uuid), 8);
#line 1437
    drbd_uuid_set(mdev, 1, uuid);
#line 1438
    drbd_send_sync_uuid(mdev, uuid);
#line 1440
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 16U) {
#line 1440
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1440
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1440
      printk("<3>%s %s: ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n", tmp___5,
             tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
             1440);
    } else {

    }
  }
#line 1443
  _raw_write_lock_irq(& global_state_lock);
#line 1444
  ns = mdev->state;
#line 1446
  tmp___6 = _drbd_may_sync_now(mdev);
#line 1446
  ns.ldv_33657.aftr_isp = tmp___6 == 0;
#line 1448
  ns.ldv_33657.conn = (unsigned char )side;
#line 1450
  if ((unsigned int )side == 17U) {
#line 1451
    ns.ldv_33657.disk = 4U;
  } else {
#line 1453
    ns.ldv_33657.pdsk = 4U;
  }
#line 1455
  r = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1456
  ns = mdev->state;
#line 1458
  if ((int )ns.ldv_33657.conn <= 9) {
#line 1459
    r = 0;
  } else {

  }
#line 1461
  if (r == 1) {
#line 1462
    tmp___7 = drbd_bm_total_weight(mdev);
#line 1462
    mdev->rs_mark_left = tmp___7;
#line 1462
    mdev->rs_total = tmp___7;
#line 1464
    mdev->rs_failed = 0UL;
#line 1465
    mdev->rs_paused = 0UL;
#line 1466
    tmp___8 = jiffies;
#line 1466
    mdev->rs_mark_time = tmp___8;
#line 1466
    mdev->rs_start = tmp___8;
#line 1468
    mdev->rs_same_csum = 0UL;
#line 1469
    _drbd_pause_after(mdev);
  } else {

  }
#line 1471
  _raw_write_unlock_irq(& global_state_lock);
#line 1472
  put_ldev(mdev);
#line 1474
  if (r == 1) {
#line 1475
    tmp___9 = drbd_conn_str((enum drbd_conns )ns.ldv_33657.conn);
#line 1475
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1475
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1475
    printk("<6>%s %s: Began resync as %s (will sync %lu KB [%lu bits set]).\n", tmp___11,
           tmp___10, tmp___9, mdev->rs_total << 2, mdev->rs_total);
#line 1480
    if (mdev->rs_total == 0UL) {
#line 1482
      ping_peer(mdev);
#line 1483
      drbd_resync_finished(mdev);
    } else {

    }
#line 1490
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1491
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1493
    drbd_md_sync(mdev);
  } else {

  }
#line 1495
  drbd_state_unlock(mdev);
#line 1496
  return;
}
}
#line 1498 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  struct task_struct *tmp___4 ;
  int _b ;
  enum drbd_thread_state tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  int _b___0 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___12 ;
  enum drbd_thread_state tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;

  {
#line 1500
  mdev = thi->mdev;
#line 1501
  w = 0;
#line 1502
  work_list.next = & work_list;
#line 1502
  work_list.prev = & work_list;
#line 1503
  intr = 0;
#line 1505
  tmp = mdev_to_minor(mdev);
#line 1505
  tmp___0 = get_current();
#line 1505
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1507
  goto ldv_43488;
  ldv_43498: 
#line 1508
  drbd_thread_current_set_cpu(mdev);
#line 1510
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1510
  if (tmp___1 != 0) {
#line 1511
    ldv_mutex_lock_45(& mdev->data.mutex);
#line 1512
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1513
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1514
    ldv_mutex_unlock_46(& mdev->data.mutex);
#line 1516
    intr = down_interruptible(& mdev->data.work.s);
#line 1518
    ldv_mutex_lock_47(& mdev->data.mutex);
#line 1519
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1520
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1521
    ldv_mutex_unlock_48(& mdev->data.mutex);
  } else {

  }
#line 1524
  if (intr != 0) {
#line 1525
    if (intr != -4) {
#line 1525
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1525
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1525
      printk("<3>%s %s: ASSERT( intr == -EINTR ) in %s:%d\n", tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
             1525);
    } else {

    }
#line 1526
    tmp___4 = get_current();
#line 1526
    flush_signals(tmp___4);
#line 1527
    tmp___5 = get_t_state(thi);
#line 1527
    _b = (unsigned int )tmp___5 == 1U;
#line 1527
    if (_b != 0) {
#line 1527
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1527
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1527
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___7, tmp___6, "drbd_worker", (char *)"get_t_state(thi) == Running",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
             1527);
    } else {

    }
#line 1527
    if (_b != 0) {
#line 1528
      goto ldv_43488;
    } else {

    }
#line 1529
    goto ldv_43489;
  } else {

  }
#line 1532
  tmp___8 = get_t_state(thi);
#line 1532
  if ((unsigned int )tmp___8 != 1U) {
#line 1533
    goto ldv_43489;
  } else {

  }
#line 1538
  w = 0;
#line 1539
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1540
  tmp___9 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1540
  _b___0 = tmp___9 != 0;
#line 1540
  if (_b___0 != 0) {
#line 1540
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1540
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1540
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___11, tmp___10, "drbd_worker", (char *)"list_empty(&mdev->data.work.q)",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1540);
  } else {

  }
#line 1540
  if (_b___0 != 0) {
#line 1552
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1553
    goto ldv_43488;
  } else {

  }
#line 1555
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1555
  w = (struct drbd_work *)__mptr;
#line 1556
  list_del_init(& w->list);
#line 1557
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1559
  tmp___12 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_33657.conn <= 9);
#line 1559
  if (tmp___12 == 0) {
#line 1561
    if ((int )mdev->state.ldv_33657.conn > 9) {
#line 1563
      val.i = 0U;
#line 1563
      val.ldv_33657.conn = 5U;
#line 1563
      mask.i = 0U;
#line 1563
      mask.ldv_33657.conn = 31U;
#line 1563
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_43488: 
#line 1507
  tmp___13 = get_t_state(thi);
#line 1507
  if ((unsigned int )tmp___13 == 1U) {
#line 1508
    goto ldv_43498;
  } else {

  }
  ldv_43489: 
#line 1566
  tmp___16 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1566
  if (tmp___16 == 0) {
#line 1566
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1566
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1566
    printk("<3>%s %s: ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
           tmp___15, tmp___14, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1566);
  } else {

  }
#line 1567
  tmp___19 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1567
  if (tmp___19 == 0) {
#line 1567
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1567
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1567
    printk("<3>%s %s: ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
           tmp___18, tmp___17, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1567);
  } else {

  }
#line 1569
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1570
  i = 0;
#line 1571
  goto ldv_43505;
  ldv_43504: 
#line 1572
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1573
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1575
  goto ldv_43502;
  ldv_43501: 
#line 1576
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1576
  w = (struct drbd_work *)__mptr___0;
#line 1577
  list_del_init(& w->list);
#line 1578
  (*(w->cb))(mdev, w, 1);
#line 1579
  i = i + 1;
  ldv_43502: 
#line 1575
  tmp___20 = list_empty((struct list_head  const  *)(& work_list));
#line 1575
  if (tmp___20 == 0) {
#line 1576
    goto ldv_43501;
  } else {

  }
#line 1582
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_43505: 
#line 1571
  tmp___21 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1571
  if (tmp___21 == 0) {
#line 1572
    goto ldv_43504;
  } else {

  }
#line 1584
  sema_init(& mdev->data.work.s, 0);
#line 1590
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1592
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 0U || (unsigned int )*((unsigned short *)mdev + 1006UL) != 0U) {
#line 1592
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1592
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1592
    printk("<3>%s %s: ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
           tmp___23, tmp___22, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1592);
  } else {

  }
#line 1595
  drbd_thread_stop(& mdev->receiver);
#line 1596
  drbd_mdev_cleanup(mdev);
#line 1598
  tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1598
  tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1598
  printk("<6>%s %s: worker terminated\n", tmp___25, tmp___24);
#line 1600
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1601
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1602
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1604
  return (0);
}
}
#line 1607 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_35(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1612
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1614
  mutex_lock(ldv_func_arg1);
#line 1615
  return;
}
}
#line 1617 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int ldv_mutex_trylock_36(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1622
  tmp = mutex_trylock(ldv_func_arg1);
#line 1622
  ldv_func_res = tmp;
#line 1624
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1624
  return (tmp___0);
#line 1626
  return (ldv_func_res);
}
}
#line 1629 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_37(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1634
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1636
  mutex_unlock(ldv_func_arg1);
#line 1637
  return;
}
}
#line 1639 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_38(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1644
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1646
  mutex_lock(ldv_func_arg1);
#line 1647
  return;
}
}
#line 1649 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_39(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1654
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1656
  mutex_unlock(ldv_func_arg1);
#line 1657
  return;
}
}
#line 1659 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1664
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1666
  mutex_unlock(ldv_func_arg1);
#line 1667
  return;
}
}
#line 1669 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_41(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1674
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1676
  mutex_lock(ldv_func_arg1);
#line 1677
  return;
}
}
#line 1679 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_42(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1684
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1686
  mutex_unlock(ldv_func_arg1);
#line 1687
  return;
}
}
#line 1689 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_43(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1694
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1696
  mutex_lock(ldv_func_arg1);
#line 1697
  return;
}
}
#line 1699 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_44(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1704
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1706
  mutex_unlock(ldv_func_arg1);
#line 1707
  return;
}
}
#line 1709 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_45(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1714
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1716
  mutex_lock(ldv_func_arg1);
#line 1717
  return;
}
}
#line 1719 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1724
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1726
  mutex_unlock(ldv_func_arg1);
#line 1727
  return;
}
}
#line 1729 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1734
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1736
  mutex_lock(ldv_func_arg1);
#line 1737
  return;
}
}
#line 1739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1744
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1746
  mutex_unlock(ldv_func_arg1);
#line 1747
  return;
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 350 "include/linux/kernel.h"
extern void dump_stack(void) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg_64.h"
extern void __cmpxchg_wrong_size(void) ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 151 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 153
  __list_del(list->prev, list->next);
#line 154
  list_add(list, head);
#line 155
  return;
}
}
#line 565 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 567
  h->next = 0;
#line 568
  h->pprev = 0;
#line 569
  return;
}
}
#line 571 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 573
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 576 "include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 578
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
#line 581 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 583
  next = n->next;
#line 584
  pprev = n->pprev;
#line 585
  *pprev = next;
#line 586
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 587
    next->pprev = pprev;
  } else {

  }
#line 588
  return;
}
}
#line 597 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 599
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 599
  if (tmp == 0) {
#line 600
    __hlist_del(n);
#line 601
    INIT_HLIST_NODE(n);
  } else {

  }
#line 603
  return;
}
}
#line 605 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 607
  first = h->first;
#line 608
  n->next = first;
#line 609
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 610
    first->pprev = & n->next;
  } else {

  }
#line 611
  h->first = n;
#line 612
  n->pprev = & h->first;
#line 613
  return;
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_cmpxchg(atomic_t *v , int old , int new ) 
{ 
  int __ret ;
  int __old ;
  int __new ;

  {
#line 215
  __old = old;
#line 215
  __new = new;
#line 215
  switch (4UL) {
  case 1UL: 
#line 215
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgb %b1,%2": "=a" (__ret): "q" (__new),
                       "m" (*((long volatile   *)(& v->counter))), "0" (__old): "memory");
#line 215
  goto ldv_5178;
  case 2UL: 
#line 215
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgw %w1,%2": "=a" (__ret): "r" (__new),
                       "m" (*((long volatile   *)(& v->counter))), "0" (__old): "memory");
#line 215
  goto ldv_5178;
  case 4UL: 
#line 215
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgl %k1,%2": "=a" (__ret): "r" (__new),
                       "m" (*((long volatile   *)(& v->counter))), "0" (__old): "memory");
#line 215
  goto ldv_5178;
  case 8UL: 
#line 215
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgq %1,%2": "=a" (__ret): "r" (__new),
                       "m" (*((long volatile   *)(& v->counter))), "0" (__old): "memory");
#line 215
  goto ldv_5178;
  default: 
#line 215
  __cmpxchg_wrong_size();
  }
  ldv_5178: ;
#line 215
  return (__ret);
}
}
#line 232 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_unless(atomic_t *v , int a , int u ) 
{ 
  int c ;
  int old ;
  long tmp ;
  long tmp___0 ;

  {
#line 235
  c = atomic_read((atomic_t const   *)v);
  ldv_5204: 
#line 237
  tmp = __builtin_expect(c == u, 0L);
#line 237
  if (tmp != 0L) {
#line 238
    goto ldv_5203;
  } else {

  }
#line 239
  old = atomic_cmpxchg(v, c, c + a);
#line 240
  tmp___0 = __builtin_expect(old == c, 1L);
#line 240
  if (tmp___0 != 0L) {
#line 241
    goto ldv_5203;
  } else {

  }
#line 242
  c = old;
#line 243
  goto ldv_5204;
  ldv_5203: ;
#line 244
  return (c != u);
}
}
#line 154 "include/linux/mutex.h"
int ldv_mutex_trylock_64(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_67(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
extern int mutex_lock_interruptible(struct mutex * ) ;
#line 8
int ldv_mutex_lock_interruptible_69(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_66(struct mutex *ldv_func_arg1 ) ;
#line 44
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5858;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5858;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5858;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5858;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5858: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 85 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 87
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 87
  return (tmp);
}
}
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 282 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 284
  _raw_spin_lock(& lock->ldv_5593.rlock);
#line 285
  return;
}
}
#line 322 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 324
  _raw_spin_unlock(& lock->ldv_5593.rlock);
#line 325
  return;
}
}
#line 134 "include/linux/time.h"
extern void do_gettimeofday(struct timeval * ) ;
#line 238 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 329 "include/linux/gfp.h"
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 74 "include/linux/random.h"
extern u32 random32(void) ;
#line 235 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 237
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 239
extern void sock_release(struct socket * ) ;
#line 242
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___1(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0 && ! __warned) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        __warned = 1;
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13516: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13516;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___1(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___1(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___1(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 333 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17270: ;
#line 63
    goto ldv_17270;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17271: ;
#line 65
    goto ldv_17271;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17272: ;
#line 66
    goto ldv_17272;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 2280 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2282
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2282
  return (tmp);
}
}
#line 2306 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2308
  tmp = test_tsk_thread_flag(p, 2);
#line 2308
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2308
  return ((int )tmp___0);
}
}
#line 283 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) ;
#line 486 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 489 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 491
  return;
}
}
#line 519 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 521
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1110 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1112
  return ((struct crypto_hash *)tfm);
}
}
#line 1122 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1125
  type = type & 4294967280U;
#line 1126
  mask = mask & 4294967280U;
#line 1127
  type = type | 8U;
#line 1128
  mask = mask | 14U;
#line 1130
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1130
  tmp___0 = __crypto_hash_cast(tmp);
#line 1130
  return (tmp___0);
}
}
#line 1138 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1140
  tmp = crypto_hash_tfm(tfm);
#line 1140
  crypto_free_tfm(tmp);
#line 1141
  return;
}
}
#line 1205 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(desc->tfm);
#line 1209
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1209
  return (tmp___0);
}
}
#line 1212 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1215
  tmp = crypto_hash_crt(hash);
#line 1215
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1215
  return (tmp___0);
}
}
#line 375 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 377
  disk->part0.nr_sects = size;
#line 378
  return;
}
}
#line 58 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 60
  __might_sleep("include/linux/highmem.h", 60, 0);
#line 61
  tmp = lowmem_page_address(page);
#line 61
  return (tmp);
}
}
#line 64 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 66
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 775 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 228 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[41U] ;

  {
#line 233
  cmdnames[0] = "Data";
#line 233
  cmdnames[1] = "DataReply";
#line 233
  cmdnames[2] = "RSDataReply";
#line 233
  cmdnames[3] = "Barrier";
#line 233
  cmdnames[4] = "ReportBitMap";
#line 233
  cmdnames[5] = "BecomeSyncTarget";
#line 233
  cmdnames[6] = "BecomeSyncSource";
#line 233
  cmdnames[7] = "UnplugRemote";
#line 233
  cmdnames[8] = "DataRequest";
#line 233
  cmdnames[9] = "RSDataRequest";
#line 233
  cmdnames[10] = "SyncParam";
#line 233
  cmdnames[11] = "ReportProtocol";
#line 233
  cmdnames[12] = "ReportUUIDs";
#line 233
  cmdnames[13] = "ReportSizes";
#line 233
  cmdnames[14] = "ReportState";
#line 233
  cmdnames[15] = "ReportSyncUUID";
#line 233
  cmdnames[16] = "AuthChallenge";
#line 233
  cmdnames[17] = "AuthResponse";
#line 233
  cmdnames[18] = "StateChgRequest";
#line 233
  cmdnames[19] = "Ping";
#line 233
  cmdnames[20] = "PingAck";
#line 233
  cmdnames[21] = "RecvAck";
#line 233
  cmdnames[22] = "WriteAck";
#line 233
  cmdnames[23] = "RSWriteAck";
#line 233
  cmdnames[24] = "DiscardAck";
#line 233
  cmdnames[25] = "NegAck";
#line 233
  cmdnames[26] = "NegDReply";
#line 233
  cmdnames[27] = "NegRSDReply";
#line 233
  cmdnames[28] = "BarrierAck";
#line 233
  cmdnames[29] = "StateChgReply";
#line 233
  cmdnames[30] = "OVRequest";
#line 233
  cmdnames[31] = "OVReply";
#line 233
  cmdnames[32] = "OVResult";
#line 233
  cmdnames[33] = "CsumRSRequest";
#line 233
  cmdnames[34] = "CsumRSIsInSync";
#line 233
  cmdnames[35] = "SyncParam89";
#line 233
  cmdnames[36] = "CBitmap";
#line 233
  cmdnames[37] = 0;
#line 233
  cmdnames[38] = 0;
#line 233
  cmdnames[39] = "DelayProbe";
#line 233
  cmdnames[40] = 0;
#line 275
  if ((unsigned int )cmd == 65521U) {
#line 276
    return ("HandShakeM");
  } else {

  }
#line 277
  if ((unsigned int )cmd == 65522U) {
#line 278
    return ("HandShakeS");
  } else {

  }
#line 279
  if ((unsigned int )cmd == 65534U) {
#line 280
    return ("HandShake");
  } else {

  }
#line 281
  if ((unsigned int )cmd > 39U) {
#line 282
    return ("Unknown");
  } else {

  }
#line 283
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 304
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 307 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 317
  c->word_offset = c->bit_offset >> 6;
#line 318
  return;
}
}
#line 561 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 563
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 574 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 576
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 586 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 588
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1134
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) ;
#line 1138
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) ;
#line 1144
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1154
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1156
void tl_clear(struct drbd_conf *mdev ) ;
#line 1158
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1161
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1162
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1165
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1167
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1176
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1178
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1179
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1183
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1185
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) ;
#line 1202
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1204
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) ;
#line 1214
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1225
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1226
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1227
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) ;
#line 1408
mempool_t *drbd_ee_mempool ;
#line 1410
struct page *drbd_pp_pool ;
#line 1411
spinlock_t drbd_pp_lock ;
#line 1412
int drbd_pp_vacant ;
#line 1413
wait_queue_head_t drbd_pp_wait ;
#line 1433
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1435
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1436
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1437
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) ;
#line 1438
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) ;
#line 1440
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1493
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1500
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1502
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1506
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1536 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1538
  val = 1;
#line 1539
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1541
  return;
}
}
#line 1543 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1545
  val = 1;
#line 1546
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1548
  return;
}
}
#line 1559
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1562
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1588
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1672 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1674
  page = e->pages;
#line 1675
  goto ldv_42895;
  ldv_42894: 
#line 1676
  tmp = page_count(page);
#line 1676
  if (tmp > 1) {
#line 1677
    return (1);
  } else {

  }
#line 1675
  page = page_chain_next(page);
  ldv_42895: ;
#line 1675
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1675
    tmp___0 = page_chain_next(page);
#line 1675
    __builtin_prefetch((void const   *)tmp___0);
#line 1675
    if (1 != 0) {
#line 1676
      goto ldv_42894;
    } else {
#line 1678
      goto ldv_42896;
    }
  } else {

  }
  ldv_42896: ;
#line 1679
  return (0);
}
}
#line 1718 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  int tmp ;

  {
#line 1722
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1722
  return (tmp);
}
}
#line 1776 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1778
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1781
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1784
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1819 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1822
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1826
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1826
  if (tmp___1 != 0UL) {
#line 1826
    __min1 = 34359738368UL;
#line 1826
    tmp___0 = drbd_md_first_sector(bdev);
#line 1826
    __min2 = tmp___0;
#line 1826
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1826
    s = 0UL;
  }
#line 1829
  goto ldv_42967;
  case -2: 
#line 1831
  __min1___0 = 34359738368UL;
#line 1831
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1831
  __min2___0 = tmp___2;
#line 1831
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1834
  __min1___1 = s;
#line 1834
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1834
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1837
  goto ldv_42967;
  default: 
#line 1839
  __min1___2 = 8587575296UL;
#line 1839
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1839
  __min2___2 = tmp___3;
#line 1839
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_42967: ;
#line 1842
  return (s);
}
}
#line 1883 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1886
  tmp = spinlock_check(& q->q_lock);
#line 1886
  flags = _raw_spin_lock_irqsave(tmp);
#line 1887
  list_add(& w->list, & q->q);
#line 1888
  up(& q->s);
#line 1890
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1891
  return;
}
}
#line 1923 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1926
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 1926
  return (tmp);
}
}
#line 1929 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1932
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 1932
  return (tmp);
}
}
#line 2014 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2016
  atomic_inc(& mdev->unacked_cnt);
#line 2017
  return;
}
}
#line 2030 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2032
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2032
  if (tmp != 0) {
#line 2033
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2034
  return;
}
}
#line 2042 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2046
  atomic_inc(& mdev->net_cnt);
#line 2047
  have_net_conf = (int )mdev->state.ldv_33657.conn > 1;
#line 2048
  if (have_net_conf == 0) {
#line 2049
    put_net_conf(mdev);
  } else {

  }
#line 2050
  return (have_net_conf);
}
}
#line 2276 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 2278
  mdev->ed_uuid = val;
#line 2279
  return;
}
}
#line 2281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2288
  return ((int )a - (int )b);
}
}
#line 2297 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2300
  spin_lock(& mdev->peer_seq_lock);
#line 2301
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2301
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2302
  mdev->peer_seq = m;
#line 2303
  spin_unlock(& mdev->peer_seq_lock);
#line 2304
  if (m == new_seq) {
#line 2305
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2306
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 66 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 68
  tmp = crypto_tfm_alg_type(tfm);
#line 68
  return ((tmp & 14U) == 8U);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 207
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 207
  if (tmp != 0L) {
#line 207
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (207), "i" (12UL));
    ldv_43228: ;
#line 207
    goto ldv_43228;
  } else {

  }
#line 208
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 216
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 216
  if (tmp != 0L) {
#line 216
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (216), "i" (12UL));
    ldv_43233: ;
#line 216
    goto ldv_43233;
  } else {

  }
#line 217
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 224
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 230 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct hlist_node  const  *__mptr ;

  {
#line 233
  tmp = ar_hash_slot(mdev, sector);
#line 233
  slot = tmp;
#line 237
  n = slot->first;
#line 237
  goto ldv_43251;
  ldv_43250: ;
#line 238
  if ((unsigned long )req == (unsigned long )id) {
#line 239
    if (req->sector != sector) {
#line 239
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 239
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 239
      printk("<3>%s %s: ASSERT( req->sector == sector ) in %s:%d\n", tmp___1, tmp___0,
             (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
             239);
    } else {

    }
#line 240
    return (req);
  } else {

  }
#line 237
  n = n->next;
  ldv_43251: ;
#line 237
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 237
    __builtin_prefetch((void const   *)n->next);
#line 237
    if (1 != 0) {
#line 237
      __mptr = (struct hlist_node  const  *)n;
#line 237
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 237
      if (1 != 0) {
#line 238
        goto ldv_43250;
      } else {
#line 240
        goto ldv_43252;
      }
    } else {
#line 240
      goto ldv_43252;
    }
  } else {

  }
  ldv_43252: ;
#line 243
  return (0);
}
}
#line 279 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 281
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_43298: ;
#line 162
  goto ldv_43298;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 113
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 115
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 116
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch *previous_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  struct drbd_epoch *prev ;
  struct list_head  const  *__mptr ;

  {
#line 121
  spin_lock(& mdev->epoch_lock);
#line 122
  __mptr = (struct list_head  const  *)epoch->list.prev;
#line 122
  prev = (struct drbd_epoch *)__mptr;
#line 123
  if ((unsigned long )prev == (unsigned long )epoch || (unsigned long )mdev->current_epoch == (unsigned long )prev) {
#line 124
    prev = 0;
  } else {

  }
#line 125
  spin_unlock(& mdev->epoch_lock);
#line 126
  return (prev);
}
}
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 145
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 145
  if (tmp___0 != 0L) {
#line 145
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (145), "i" (12UL));
    ldv_43388: ;
#line 145
    goto ldv_43388;
  } else {

  }
#line 146
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 146
  if (tmp___1 != 0L) {
#line 146
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (146), "i" (12UL));
    ldv_43389: ;
#line 146
    goto ldv_43389;
  } else {

  }
#line 148
  page = *head;
#line 150
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 151
    return (0);
  } else {

  }
#line 153
  goto ldv_43392;
  ldv_43391: 
#line 154
  tmp = page_chain_next(page);
#line 155
  n = n - 1;
#line 155
  if (n == 0) {
#line 156
    goto ldv_43390;
  } else {

  }
#line 157
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 159
    return (0);
  } else {

  }
#line 160
  page = tmp;
  ldv_43392: ;
#line 153
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 154
    goto ldv_43391;
  } else {

  }
  ldv_43390: 
#line 164
  page->ldv_12107.ldv_12104.private = 0UL;
#line 166
  page = *head;
#line 167
  *head = tmp;
#line 168
  return (page);
}
}
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 177
  i = 1;
#line 178
  goto ldv_43400;
  ldv_43399: 
#line 179
  i = i + 1;
#line 179
  page = tmp;
  ldv_43400: 
#line 178
  tmp = page_chain_next(page);
#line 178
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 179
    goto ldv_43399;
  } else {

  }

#line 180
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 181
    *len = i;
  } else {

  }
#line 182
  return (page);
}
}
#line 185 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 188
  i = 0;
#line 189
  goto ldv_43409;
  ldv_43408: 
#line 190
  put_page(page);
#line 191
  i = i + 1;
#line 189
  page = tmp;
  ldv_43409: ;
#line 189
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 189
    tmp = page_chain_next(page);
#line 189
    if (1 != 0) {
#line 190
      goto ldv_43408;
    } else {
#line 192
      goto ldv_43410;
    }
  } else {

  }
  ldv_43410: ;
#line 193
  return (i);
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 201
  tmp = page_chain_tail(chain_first, 0);
#line 202
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 202
  if (tmp___0 != 0L) {
#line 202
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (202), "i" (12UL));
    ldv_43417: ;
#line 202
    goto ldv_43417;
  } else {

  }
#line 206
  chain_last->ldv_12107.ldv_12104.private = (unsigned long )*head;
#line 207
  *head = chain_first;
#line 208
  return;
}
}
#line 210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 212
  page = 0;
#line 213
  tmp = 0;
#line 214
  i = 0;
#line 218
  if (drbd_pp_vacant >= number) {
#line 219
    spin_lock(& drbd_pp_lock);
#line 220
    page = page_chain_del(& drbd_pp_pool, number);
#line 221
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 222
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 223
    spin_unlock(& drbd_pp_lock);
#line 224
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 225
      return (page);
    } else {

    }
  } else {

  }
#line 231
  i = 0;
#line 231
  goto ldv_43427;
  ldv_43426: 
#line 232
  tmp = alloc_pages(514U, 0U);
#line 233
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 234
    goto ldv_43425;
  } else {

  }
#line 235
  tmp->ldv_12107.ldv_12104.private = (unsigned long )page;
#line 236
  page = tmp;
#line 231
  i = i + 1;
  ldv_43427: ;
#line 231
  if (i < number) {
#line 232
    goto ldv_43426;
  } else {

  }
  ldv_43425: ;
#line 239
  if (i == number) {
#line 240
    return (page);
  } else {

  }
#line 245
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 246
    tmp = page_chain_tail(page, 0);
#line 247
    spin_lock(& drbd_pp_lock);
#line 248
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 249
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 250
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 252
  return (0);
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void maybe_kick_lo(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 260
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 260
  if (tmp >= (mdev->net_conf)->unplug_watermark) {
#line 261
    drbd_kick_lo(mdev);
  } else {

  }
#line 262
  return;
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 274
  le = mdev->net_ee.next;
#line 274
  tle = le->next;
#line 274
  goto ldv_43442;
  ldv_43441: 
#line 275
  __mptr = (struct list_head  const  *)le;
#line 275
  e = (struct drbd_epoch_entry *)__mptr;
#line 276
  tmp = drbd_ee_has_active_page___0(e);
#line 276
  if (tmp != 0) {
#line 277
    goto ldv_43440;
  } else {

  }
#line 278
  list_move(le, to_be_freed);
#line 274
  le = tle;
#line 274
  tle = le->next;
  ldv_43442: ;
#line 274
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 275
    goto ldv_43441;
  } else {

  }
  ldv_43440: ;
#line 279
  return;
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 284
  reclaimed.next = & reclaimed;
#line 284
  reclaimed.prev = & reclaimed;
#line 287
  maybe_kick_lo(mdev);
#line 288
  spin_lock_irq(& mdev->req_lock);
#line 289
  reclaim_net_ee(mdev, & reclaimed);
#line 290
  spin_unlock_irq(& mdev->req_lock);
#line 292
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 292
  e = (struct drbd_epoch_entry *)__mptr;
#line 292
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 292
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 292
  goto ldv_43456;
  ldv_43455: 
#line 293
  drbd_free_ee(mdev, e);
#line 292
  e = t;
#line 292
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 292
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_43456: ;
#line 292
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 293
    goto ldv_43455;
  } else {

  }

#line 297
  return;
}
}
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;

  {
#line 310
  page = 0;
#line 311
  tmp = get_current();
#line 311
  wait.flags = 0U;
#line 311
  wait.private = (void *)tmp;
#line 311
  wait.func = & autoremove_wake_function;
#line 311
  wait.task_list.next = & wait.task_list;
#line 311
  wait.task_list.prev = & wait.task_list;
#line 315
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 315
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 316
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 318
  goto ldv_43467;
  ldv_43466: 
#line 319
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 321
  drbd_kick_lo_and_reclaim_net(mdev);
#line 323
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 323
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 324
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 325
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 326
      goto ldv_43465;
    } else {

    }
  } else {

  }
#line 329
  if (! retry) {
#line 330
    goto ldv_43465;
  } else {

  }
#line 332
  tmp___4 = get_current();
#line 332
  tmp___5 = signal_pending(tmp___4);
#line 332
  if (tmp___5 != 0) {
#line 333
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 333
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 333
    printk("<4>%s %s: drbd_pp_alloc interrupted!\n", tmp___3, tmp___2);
#line 334
    goto ldv_43465;
  } else {

  }
#line 337
  schedule();
  ldv_43467: ;
#line 318
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 319
    goto ldv_43466;
  } else {

  }
  ldv_43465: 
#line 339
  finish_wait(& drbd_pp_wait, & wait);
#line 341
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 342
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 343
  return (page);
}
}
#line 350 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page ) 
{ 
  int i ;
  struct page *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 353
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 8UL) {
#line 354
    i = page_chain_free(page);
  } else {
#line 357
    tmp = page_chain_tail(page, & i);
#line 358
    spin_lock(& drbd_pp_lock);
#line 359
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 360
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 361
    spin_unlock(& drbd_pp_lock);
  }
#line 363
  atomic_sub(i, & mdev->pp_in_use);
#line 364
  i = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 365
  if (i < 0) {
#line 366
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 366
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 366
    printk("<4>%s %s: ASSERTION FAILED: pp_in_use: %d < 0\n", tmp___1, tmp___0, i);
  } else {

  }
#line 367
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 368
  return;
}
}
#line 385 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 393
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 395
  tmp = drbd_insert_fault(mdev, 8U);
#line 395
  if (tmp != 0) {
#line 396
    return (0);
  } else {

  }
#line 398
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 398
  e = (struct drbd_epoch_entry *)tmp___0;
#line 399
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 400
    if ((gfp_mask & 512U) == 0U) {
#line 401
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 401
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 401
      printk("<3>%s %s: alloc_ee: Allocation of an EE failed\n", tmp___2, tmp___1);
    } else {

    }
#line 402
    return (0);
  } else {

  }
#line 405
  page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 406
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 407
    goto fail;
  } else {

  }
#line 409
  INIT_HLIST_NODE(& e->colision);
#line 410
  e->epoch = 0;
#line 411
  e->mdev = mdev;
#line 412
  e->pages = page;
#line 413
  atomic_set(& e->pending_bios, 0);
#line 414
  e->size = data_size;
#line 415
  e->flags = 0UL;
#line 416
  e->sector = sector;
#line 417
  e->sector = sector;
#line 418
  e->block_id = id;
#line 420
  return (e);
  fail: 
#line 423
  mempool_free((void *)e, drbd_ee_mempool);
#line 424
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
#line 429
  drbd_pp_free(mdev, e->pages);
#line 430
  tmp___1 = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 430
  if (tmp___1 != 0) {
#line 430
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 430
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 430
    printk("<3>%s %s: ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           430);
  } else {

  }
#line 431
  tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 431
  if (tmp___4 == 0) {
#line 431
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 431
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 431
    printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___3,
           tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           431);
  } else {

  }
#line 432
  mempool_free((void *)e, drbd_ee_mempool);
#line 433
  return;
}
}
#line 435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 437
  work_list.next = & work_list;
#line 437
  work_list.prev = & work_list;
#line 439
  count = 0;
#line 441
  spin_lock_irq(& mdev->req_lock);
#line 442
  list_splice_init(list, & work_list);
#line 443
  spin_unlock_irq(& mdev->req_lock);
#line 445
  __mptr = (struct list_head  const  *)work_list.next;
#line 445
  e = (struct drbd_epoch_entry *)__mptr;
#line 445
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 445
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 445
  goto ldv_43504;
  ldv_43503: 
#line 446
  drbd_free_ee(mdev, e);
#line 447
  count = count + 1;
#line 445
  e = t;
#line 445
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 445
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_43504: ;
#line 445
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 446
    goto ldv_43503;
  } else {

  }

#line 449
  return (count);
}
}
#line 462 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 464
  work_list.next = & work_list;
#line 464
  work_list.prev = & work_list;
#line 465
  reclaimed.next = & reclaimed;
#line 465
  reclaimed.prev = & reclaimed;
#line 467
  ok = (int )mdev->state.ldv_33657.conn > 8;
#line 469
  spin_lock_irq(& mdev->req_lock);
#line 470
  reclaim_net_ee(mdev, & reclaimed);
#line 471
  list_splice_init(& mdev->done_ee, & work_list);
#line 472
  spin_unlock_irq(& mdev->req_lock);
#line 474
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 474
  e = (struct drbd_epoch_entry *)__mptr;
#line 474
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 474
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 474
  goto ldv_43521;
  ldv_43520: 
#line 475
  drbd_free_ee(mdev, e);
#line 474
  e = t;
#line 474
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 474
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_43521: ;
#line 474
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 475
    goto ldv_43520;
  } else {

  }
#line 481
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 481
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 481
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 481
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 481
  goto ldv_43530;
  ldv_43529: 
#line 483
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 483
  ok = tmp != 0 && ok != 0;
#line 484
  drbd_free_ee(mdev, e);
#line 481
  e = t;
#line 481
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 481
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_43530: ;
#line 481
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 482
    goto ldv_43529;
  } else {

  }
#line 486
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 488
  return (ok);
}
}
#line 491 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 493
  tmp = get_current();
#line 493
  wait.flags = 0U;
#line 493
  wait.private = (void *)tmp;
#line 493
  wait.func = & autoremove_wake_function;
#line 493
  wait.task_list.next = & wait.task_list;
#line 493
  wait.task_list.prev = & wait.task_list;
#line 497
  goto ldv_43538;
  ldv_43537: 
#line 498
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 499
  spin_unlock_irq(& mdev->req_lock);
#line 500
  drbd_kick_lo(mdev);
#line 501
  schedule();
#line 502
  finish_wait(& mdev->ee_wait, & wait);
#line 503
  spin_lock_irq(& mdev->req_lock);
  ldv_43538: 
#line 497
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 497
  if (tmp___0 == 0) {
#line 498
    goto ldv_43537;
  } else {

  }

#line 502
  return;
}
}
#line 507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 509
  spin_lock_irq(& mdev->req_lock);
#line 510
  _drbd_wait_ee_list_empty(mdev, head);
#line 511
  spin_unlock_irq(& mdev->req_lock);
#line 512
  return;
}
}
#line 516 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 519
  sk = sock->sk;
#line 520
  err = 0;
#line 522
  *what = "listen";
#line 523
  err = (*((sock->ops)->listen))(sock, 5);
#line 524
  if (err < 0) {
#line 525
    goto out;
  } else {

  }
#line 527
  *what = "sock_create_lite";
#line 528
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 530
  if (err < 0) {
#line 531
    goto out;
  } else {

  }
#line 533
  *what = "accept";
#line 534
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 535
  if (err < 0) {
#line 536
    sock_release(*newsock);
#line 537
    *newsock = 0;
#line 538
    goto out;
  } else {

  }
#line 540
  (*newsock)->ops = sock->ops;
  out: ;
#line 543
  return (err);
}
}
#line 546 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 550
  iov.iov_base = buf;
#line 550
  iov.iov_len = size;
#line 554
  msg.msg_name = 0;
#line 554
  msg.msg_namelen = 0;
#line 554
  msg.msg_iov = (struct iovec *)(& iov);
#line 554
  msg.msg_iovlen = 1UL;
#line 554
  msg.msg_control = 0;
#line 554
  msg.msg_controllen = 0UL;
#line 554
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 561
  tmp = current_thread_info___0();
#line 561
  oldfs = tmp->addr_limit;
#line 562
  tmp___0 = current_thread_info___0();
#line 562
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 562
  tmp___0->addr_limit = __constr_expr_0;
#line 563
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 564
  tmp___1 = current_thread_info___0();
#line 564
  tmp___1->addr_limit = oldfs;
#line 566
  return (rv);
}
}
#line 569 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  struct thread_info *tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 572
  iov.iov_base = buf;
#line 572
  iov.iov_len = size;
#line 576
  msg.msg_name = 0;
#line 576
  msg.msg_namelen = 0;
#line 576
  msg.msg_iov = (struct iovec *)(& iov);
#line 576
  msg.msg_iovlen = 1UL;
#line 576
  msg.msg_control = 0;
#line 576
  msg.msg_controllen = 0UL;
#line 576
  msg.msg_flags = 16640U;
#line 583
  tmp = current_thread_info___0();
#line 583
  oldfs = tmp->addr_limit;
#line 584
  tmp___0 = current_thread_info___0();
#line 584
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 584
  tmp___0->addr_limit = __constr_expr_0;
  ldv_43576: 
#line 587
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 588
  if ((size_t )rv == size) {
#line 589
    goto ldv_43575;
  } else {

  }
#line 596
  if (rv < 0) {
#line 597
    if (rv == -104) {
#line 598
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 598
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 598
      printk("<6>%s %s: sock was reset by peer\n", tmp___2, tmp___1);
    } else
#line 599
    if (rv != -512) {
#line 600
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 600
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 600
      printk("<3>%s %s: sock_recvmsg returned %d\n", tmp___4, tmp___3, rv);
    } else {

    }
#line 601
    goto ldv_43575;
  } else
#line 602
  if (rv == 0) {
#line 603
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 603
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 603
    printk("<6>%s %s: sock was shut down by peer\n", tmp___6, tmp___5);
#line 604
    goto ldv_43575;
  } else {
#line 610
    goto ldv_43575;
  }
#line 612
  goto ldv_43576;
  ldv_43575: 
#line 614
  tmp___7 = current_thread_info___0();
#line 614
  tmp___7->addr_limit = oldfs;
#line 616
  if ((size_t )rv != size) {
#line 617
    val.i = 0U;
#line 617
    val.ldv_33657.conn = 4U;
#line 617
    mask.i = 0U;
#line 617
    mask.ldv_33657.conn = 31U;
#line 617
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 619
  return (rv);
}
}
#line 622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 628
  disconnect_on_error = 1;
#line 630
  tmp = get_net_conf(mdev);
#line 630
  if (tmp == 0) {
#line 631
    return (0);
  } else {

  }
#line 633
  what = "sock_create_kern";
#line 634
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 636
  if (err < 0) {
#line 637
    sock = 0;
#line 638
    goto out;
  } else {

  }
#line 641
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 641
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 641
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 651
  __min1 = (mdev->net_conf)->my_addr_len;
#line 651
  __min2 = 28;
#line 651
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 651
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 653
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 654
    src_in6.sin6_port = 0U;
  } else {
#line 656
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 658
  what = "bind before connect";
#line 659
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 662
  if (err < 0) {
#line 663
    goto out;
  } else {

  }
#line 667
  disconnect_on_error = 0;
#line 668
  what = "connect";
#line 669
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 674
  if (err < 0) {
#line 675
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 676
      sock_release(sock);
#line 677
      sock = 0;
    } else {

    }
#line 679
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 686
    disconnect_on_error = 0;
#line 687
    goto ldv_43608;
    default: 
#line 689
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 689
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 689
    printk("<3>%s %s: %s failed, err = %d\n", tmp___2, tmp___1, what, err);
    }
    ldv_43608: ;
#line 691
    if (disconnect_on_error != 0) {
#line 692
      val.i = 0U;
#line 692
      val.ldv_33657.conn = 1U;
#line 692
      mask.i = 0U;
#line 692
      mask.ldv_33657.conn = 31U;
#line 692
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 694
  put_net_conf(mdev);
#line 695
  return (sock);
}
}
#line 698 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 701
  s_estab = 0;
#line 704
  tmp = get_net_conf(mdev);
#line 704
  if (tmp == 0) {
#line 705
    return (0);
  } else {

  }
#line 707
  what = "sock_create_kern";
#line 708
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 710
  if (err != 0) {
#line 711
    s_listen = 0;
#line 712
    goto out;
  } else {

  }
#line 715
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 716
  tmp___0 = random32();
#line 716
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 718
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 719
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 720
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 722
  what = "bind before listen";
#line 723
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 726
  if (err < 0) {
#line 727
    goto out;
  } else {

  }
#line 729
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 732
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 733
    sock_release(s_listen);
  } else {

  }
#line 734
  if (err < 0) {
#line 735
    if ((err != -11 && err != -4) && err != -512) {
#line 736
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 736
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 736
      printk("<3>%s %s: %s failed, err = %d\n", tmp___2, tmp___1, what, err);
#line 737
      val.i = 0U;
#line 737
      val.ldv_33657.conn = 1U;
#line 737
      mask.i = 0U;
#line 737
      mask.ldv_33657.conn = 31U;
#line 737
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 740
  put_net_conf(mdev);
#line 742
  return (s_estab);
}
}
#line 745 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header *h ;
  int tmp ;

  {
#line 748
  h = & mdev->data.sbuf.header;
#line 750
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 750
  return (tmp);
}
}
#line 753 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header *h ;
  int rr ;
  __u16 tmp ;

  {
#line 755
  h = & mdev->data.sbuf.header;
#line 758
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 760
  if (rr == 8 && h->magic == 1728214147U) {
#line 761
    tmp = __fswab16((int )h->command);
#line 761
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 763
  return (65535);
}
}
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 776
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 777
    return (0);
  } else {

  }
#line 779
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 781
  if (rr > 0 || rr == -11) {
#line 782
    return (1);
  } else {
#line 784
    sock_release(*sock);
#line 785
    *sock = 0;
#line 786
    return (0);
  }
}
}
#line 798 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  enum drbd_packets tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  u32 tmp___17 ;
  struct task_struct *tmp___18 ;
  enum drbd_thread_state tmp___19 ;
  struct task_struct *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  long tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___31 ;
  int tmp___32 ;

  {
#line 803
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 803
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 803
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 803
    printk("<3>%s %s: ASSERT( !mdev->data.socket ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           803);
  } else {

  }
#line 805
  tmp___3 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 805
  if (tmp___3 != 0) {
#line 806
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 806
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 806
    printk("<3>%s %s: CREATE_BARRIER flag was set in drbd_connect - now cleared!\n",
           tmp___2, tmp___1);
  } else {

  }
#line 808
  val.i = 0U;
#line 808
  val.ldv_33657.conn = 8U;
#line 808
  mask.i = 0U;
#line 808
  mask.ldv_33657.conn = 31U;
#line 808
  tmp___4 = drbd_request_state(mdev, mask, val);
#line 808
  if (tmp___4 <= 0) {
#line 809
    return (-2);
  } else {

  }
#line 811
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 813
  sock = 0;
#line 814
  msock = 0;
  ldv_43667: 
#line 817
  try = 0;
  ldv_43659: 
#line 819
  s = drbd_try_connect(mdev);
#line 820
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 821
    goto ldv_43658;
  } else {
#line 820
    try = try + 1;
#line 820
    if (try > 2) {
#line 821
      goto ldv_43658;
    } else {

    }
  }
#line 823
  tmp___5 = get_current();
#line 823
  tmp___5->state = 1L;
#line 824
  schedule_timeout(25L);
#line 825
  goto ldv_43659;
  ldv_43658: ;
#line 827
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 828
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 829
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 830
      sock = s;
#line 831
      s = 0;
    } else
#line 832
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 833
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 834
      msock = s;
#line 835
      s = 0;
    } else {
#line 837
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 837
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 837
      printk("<3>%s %s: Logic error in drbd_connect()\n", tmp___7, tmp___6);
#line 838
      goto out_release_sockets;
    }
  } else {

  }
#line 842
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 843
    tmp___8 = get_current();
#line 843
    tmp___8->state = 1L;
#line 844
    schedule_timeout(25L);
#line 845
    ok = drbd_socket_okay(mdev, & sock);
#line 846
    tmp___9 = drbd_socket_okay(mdev, & msock);
#line 846
    ok = tmp___9 != 0 && ok != 0;
#line 847
    if (ok != 0) {
#line 848
      goto ldv_43661;
    } else {

    }
  } else {

  }
  retry: 
#line 852
  s = drbd_wait_for_connect(mdev);
#line 853
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 854
    tmp___10 = drbd_recv_fp(mdev, s);
#line 854
    try = (int )tmp___10;
#line 855
    drbd_socket_okay(mdev, & sock);
#line 856
    drbd_socket_okay(mdev, & msock);
#line 857
    switch (try) {
    case 65522: ;
#line 859
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 860
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 860
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 860
      printk("<4>%s %s: initial packet S crossed\n", tmp___12, tmp___11);
#line 861
      sock_release(sock);
    } else {

    }
#line 863
    sock = s;
#line 864
    goto ldv_43664;
    case 65521: ;
#line 866
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 867
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 867
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 867
      printk("<4>%s %s: initial packet M crossed\n", tmp___14, tmp___13);
#line 868
      sock_release(msock);
    } else {

    }
#line 870
    msock = s;
#line 871
    set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
#line 872
    goto ldv_43664;
    default: 
#line 874
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 874
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 874
    printk("<4>%s %s: Error receiving initial packet\n", tmp___16, tmp___15);
#line 875
    sock_release(s);
#line 876
    tmp___17 = random32();
#line 876
    if ((int )tmp___17 & 1) {
#line 877
      goto retry;
    } else {

    }
    }
    ldv_43664: ;
  } else {

  }
#line 881
  if ((int )mdev->state.ldv_33657.conn <= 1) {
#line 882
    goto out_release_sockets;
  } else {

  }
#line 883
  tmp___20 = get_current();
#line 883
  tmp___21 = signal_pending(tmp___20);
#line 883
  if (tmp___21 != 0) {
#line 884
    tmp___18 = get_current();
#line 884
    flush_signals(tmp___18);
#line 885
    __asm__  volatile   ("": : : "memory");
#line 886
    tmp___19 = get_t_state(& mdev->receiver);
#line 886
    if ((unsigned int )tmp___19 == 2U) {
#line 887
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 890
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 891
    ok = drbd_socket_okay(mdev, & sock);
#line 892
    tmp___22 = drbd_socket_okay(mdev, & msock);
#line 892
    ok = tmp___22 != 0 && ok != 0;
#line 893
    if (ok != 0) {
#line 894
      goto ldv_43661;
    } else {

    }
  } else {

  }
#line 896
  goto ldv_43667;
  ldv_43661: 
#line 898
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 899
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 901
  (sock->sk)->sk_allocation = 16U;
#line 902
  (msock->sk)->sk_allocation = 16U;
#line 904
  (sock->sk)->sk_priority = 4U;
#line 905
  (msock->sk)->sk_priority = 6U;
#line 907
  if ((mdev->net_conf)->sndbuf_size != 0) {
#line 908
    (sock->sk)->sk_sndbuf = (mdev->net_conf)->sndbuf_size;
#line 909
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 912
  if ((mdev->net_conf)->rcvbuf_size != 0) {
#line 913
    (sock->sk)->sk_rcvbuf = (mdev->net_conf)->rcvbuf_size;
#line 914
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 922
  tmp___23 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 922
  (sock->sk)->sk_rcvtimeo = tmp___23;
#line 922
  (sock->sk)->sk_sndtimeo = tmp___23;
#line 925
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 926
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 930
  drbd_tcp_nodelay(sock);
#line 931
  drbd_tcp_nodelay(msock);
#line 933
  mdev->data.socket = sock;
#line 934
  mdev->meta.socket = msock;
#line 935
  mdev->last_received = jiffies;
#line 937
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 937
    tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 937
    tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 937
    printk("<3>%s %s: ASSERT( mdev->asender.task == NULL ) in %s:%d\n", tmp___25,
           tmp___24, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           937);
  } else {

  }
#line 939
  h = drbd_do_handshake(mdev);
#line 940
  if (h <= 0) {
#line 941
    return (h);
  } else {

  }
#line 943
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 945
    tmp___26 = drbd_do_auth(mdev);
#line 945
    switch (tmp___26) {
    case -1: 
#line 947
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 947
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 947
    printk("<3>%s %s: Authentication of peer failed\n", tmp___28, tmp___27);
#line 948
    return (-1);
    case 0: 
#line 950
    tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 950
    tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 950
    printk("<3>%s %s: Authentication of peer failed, trying again.\n", tmp___30, tmp___29);
#line 951
    return (0);
    }
  } else {

  }
#line 955
  val___0.i = 0U;
#line 955
  val___0.ldv_33657.conn = 9U;
#line 955
  mask___0.i = 0U;
#line 955
  mask___0.ldv_33657.conn = 31U;
#line 955
  tmp___31 = drbd_request_state(mdev, mask___0, val___0);
#line 955
  if (tmp___31 <= 0) {
#line 956
    return (0);
  } else {

  }
#line 958
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 959
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 961
  atomic_set(& mdev->packet_seq, 0);
#line 962
  mdev->peer_seq = 0U;
#line 964
  drbd_thread_start(& mdev->asender);
#line 966
  tmp___32 = drbd_send_protocol(mdev);
#line 966
  if (tmp___32 == 0) {
#line 967
    return (-1);
  } else {

  }
#line 968
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 969
  drbd_send_sizes(mdev, 0, 0);
#line 970
  drbd_send_uuids(mdev);
#line 971
  drbd_send_state(mdev);
#line 972
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 973
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 975
  return (1);
  out_release_sockets: ;
#line 978
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 979
    sock_release(sock);
  } else {

  }
#line 980
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 981
    sock_release(msock);
  } else {

  }
#line 982
  return (-1);
}
}
#line 985 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;

  {
#line 989
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 991
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 991
  if (tmp___1 != 0L) {
#line 992
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 992
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 992
    printk("<3>%s %s: short read expecting header on sock: r=%d\n", tmp___0, tmp,
           r);
#line 993
    return (0);
  } else {

  }
#line 995
  tmp___2 = __fswab16((int )h->command);
#line 995
  h->command = tmp___2;
#line 996
  tmp___3 = __fswab16((int )h->length);
#line 996
  h->length = tmp___3;
#line 997
  tmp___7 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 997
  if (tmp___7 != 0L) {
#line 998
    tmp___4 = __fswab32(h->magic);
#line 998
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 998
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 998
    printk("<3>%s %s: magic?? on data m: 0x%lx c: %d l: %d\n", tmp___6, tmp___5, (long )tmp___4,
           (int )h->command, (int )h->length);
#line 1001
    return (0);
  } else {

  }
#line 1003
  mdev->last_received = jiffies;
#line 1005
  return (1);
}
}
#line 1008 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_flush_after_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  enum finish_epoch tmp___2 ;

  {
#line 1012
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 1012
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1012
    if (tmp___1 != 0) {
#line 1013
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0, 1UL);
#line 1015
      if (rv != 0) {
#line 1016
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1016
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1016
        printk("<3>%s %s: local disk flush failed with status %d\n", tmp___0, tmp,
               rv);
#line 1020
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 1022
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1025
  tmp___2 = drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1025
  return (tmp___2);
}
}
#line 1028 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int w_flush(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct flush_work *fw ;
  struct drbd_epoch *epoch ;
  int tmp ;

  {
#line 1030
  fw = (struct flush_work *)w;
#line 1031
  epoch = fw->epoch;
#line 1033
  kfree((void const   *)w);
#line 1035
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& epoch->flags));
#line 1035
  if (tmp == 0) {
#line 1036
    drbd_flush_after_epoch(mdev, epoch);
  } else {

  }
#line 1038
  drbd_may_finish_epoch(mdev, epoch, (int )mdev->state.ldv_33657.conn <= 9 ? EV_CLEANUP : EV_PUT);
#line 1041
  return (1);
}
}
#line 1050 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int finish ;
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  int schedule_flush ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr ;
  struct flush_work *fw ;
  void *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;

  {
#line 1056
  schedule_flush = 0;
#line 1057
  rv = FE_STILL_LIVE;
#line 1059
  spin_lock(& mdev->epoch_lock);
  ldv_43713: 
#line 1061
  next_epoch = 0;
#line 1062
  finish = 0;
#line 1064
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1066
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1068
  atomic_dec(& epoch->active);
#line 1069
  goto ldv_43702;
  case 1U: 
#line 1071
  set_bit(3U, (unsigned long volatile   *)(& epoch->flags));
#line 1075
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1075
  if (((tmp != 0 && epoch_size == 1) && (unsigned int )mdev->write_ordering != 3U) && (unsigned long )mdev->current_epoch == (unsigned long )epoch) {
#line 1078
    clear_bit(2, (unsigned long volatile   *)(& epoch->flags));
  } else {

  }
#line 1079
  goto ldv_43702;
  case 2U: 
#line 1081
  set_bit(1U, (unsigned long volatile   *)(& epoch->flags));
#line 1082
  goto ldv_43702;
  case 3U: ;
#line 1085
  goto ldv_43702;
  }
  ldv_43702: ;
#line 1088
  if (epoch_size != 0) {
#line 1088
    tmp___3 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1088
    if (tmp___3 == 0) {
#line 1088
      tmp___4 = constant_test_bit(3U, (unsigned long const volatile   *)(& epoch->flags));
#line 1088
      if (tmp___4 != 0) {
#line 1088
        if ((unsigned long )epoch->list.prev == (unsigned long )(& (mdev->current_epoch)->list)) {
#line 1088
          tmp___5 = constant_test_bit(4U, (unsigned long const volatile   *)(& epoch->flags));
#line 1088
          if (tmp___5 == 0) {
#line 1094
            tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& epoch->flags));
#line 1094
            if (tmp___1 != 0 || (unsigned int )mdev->write_ordering == 0U) {
#line 1098
              finish = 1;
#line 1099
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else
#line 1094
            if (epoch_size == 1) {
#line 1094
              tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1094
              if (tmp___2 != 0) {
#line 1098
                finish = 1;
#line 1099
                set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
              } else {
#line 1094
                goto _L;
              }
            } else
            _L: /* CIL Label */ 
#line 1094
            if (((unsigned int )ev & 32U) != 0U) {
#line 1098
              finish = 1;
#line 1099
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else {
#line 1100
              tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1100
              if (tmp___0 == 0 && (unsigned int )mdev->write_ordering == 3U) {
#line 1102
                atomic_inc(& epoch->active);
#line 1103
                schedule_flush = 1;
              } else {

              }
            }
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1106
  if (finish != 0) {
#line 1107
    if (((unsigned int )ev & 32U) == 0U) {
#line 1108
      spin_unlock(& mdev->epoch_lock);
#line 1109
      drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1110
      spin_lock(& mdev->epoch_lock);
    } else {

    }
#line 1112
    atomic_dec(& mdev->unacked_cnt);
#line 1112
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1112
    if (tmp___9 < 0) {
#line 1112
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1112
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1112
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1112
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___8, tmp___7, "drbd_may_finish_epoch",
             1112, tmp___6);
    } else {

    }
#line 1114
    if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1115
      __mptr = (struct list_head  const  *)epoch->list.next;
#line 1115
      next_epoch = (struct drbd_epoch *)__mptr;
#line 1116
      list_del(& epoch->list);
#line 1117
      ev = (enum epoch_event )(((unsigned int )ev & 32U) | 3U);
#line 1118
      mdev->epochs = mdev->epochs - 1U;
#line 1119
      kfree((void const   *)epoch);
#line 1121
      if ((unsigned int )rv == 0U) {
#line 1122
        rv = FE_DESTROYED;
      } else {

      }
    } else {
#line 1124
      epoch->flags = 0UL;
#line 1125
      atomic_set(& epoch->epoch_size, 0);
#line 1127
      if ((unsigned int )rv == 0U) {
#line 1128
        rv = FE_RECYCLED;
      } else {

      }
    }
  } else {

  }
#line 1132
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1133
    goto ldv_43712;
  } else {

  }
#line 1135
  epoch = next_epoch;
#line 1136
  goto ldv_43713;
  ldv_43712: 
#line 1138
  spin_unlock(& mdev->epoch_lock);
#line 1140
  if (schedule_flush != 0) {
#line 1142
    tmp___10 = kmalloc___1(32UL, 32U);
#line 1142
    fw = (struct flush_work *)tmp___10;
#line 1143
    if ((unsigned long )fw != (unsigned long )((struct flush_work *)0)) {
#line 1144
      fw->w.cb = & w_flush;
#line 1145
      fw->epoch = epoch;
#line 1146
      drbd_queue_work(& mdev->data.work, & fw->w);
    } else {
#line 1148
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1148
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1148
      printk("<4>%s %s: Could not kmalloc a flush_work obj\n", tmp___12, tmp___11);
#line 1149
      set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1151
      drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1152
      drbd_may_finish_epoch(mdev, epoch, EV_PUT);
    }
  } else {

  }
#line 1156
  return (rv);
}
}
#line 1164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[4U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1167
  write_ordering_str[0] = (char *)"none";
#line 1167
  write_ordering_str[1] = (char *)"drain";
#line 1167
  write_ordering_str[2] = (char *)"flush";
#line 1167
  write_ordering_str[3] = (char *)"barrier";
#line 1174
  pwo = mdev->write_ordering;
#line 1175
  _min1 = pwo;
#line 1175
  _min2 = wo;
#line 1175
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1176
  if ((unsigned int )wo == 3U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1177
    wo = WO_bdev_flush;
  } else {

  }
#line 1178
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1179
    wo = WO_drain_io;
  } else {

  }
#line 1180
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1181
    wo = WO_none;
  } else {

  }
#line 1182
  mdev->write_ordering = wo;
#line 1183
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 3U) {
#line 1184
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1184
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1184
    printk("<6>%s %s: Method to ensure write ordering: %s\n", tmp___0, tmp, write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1185
  return;
}
}
#line 1194 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  long tmp___6 ;
  int tmp___7 ;
  struct page *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;

  {
#line 1197
  bios = 0;
#line 1199
  page = e->pages;
#line 1200
  sector = e->sector;
#line 1201
  ds = e->size;
#line 1202
  n_bios = 0U;
#line 1203
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
#line 1205
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->new_c_uuid));
#line 1205
  if (tmp___3 != 0) {
#line 1206
    tmp = atomic_add_unless(& mdev->new_c_uuid, -1, 1);
#line 1206
    if (tmp != 0) {
#line 1207
      drbd_uuid_new_current(mdev);
#line 1208
      drbd_md_sync(mdev);
#line 1210
      atomic_dec(& mdev->new_c_uuid);
#line 1211
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 1213
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->new_c_uuid));
#line 1213
    if (tmp___0 == 0) {
#line 1213
      goto ldv_43737;
    } else {

    }
#line 1213
    tmp___1 = get_current();
#line 1213
    __wait.flags = 0U;
#line 1213
    __wait.private = (void *)tmp___1;
#line 1213
    __wait.func = & autoremove_wake_function;
#line 1213
    __wait.task_list.next = & __wait.task_list;
#line 1213
    __wait.task_list.prev = & __wait.task_list;
    ldv_43740: 
#line 1213
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1213
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->new_c_uuid));
#line 1213
    if (tmp___2 == 0) {
#line 1213
      goto ldv_43739;
    } else {

    }
#line 1213
    schedule();
#line 1213
    goto ldv_43740;
    ldv_43739: 
#line 1213
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_43737: ;
  } else {

  }
  next_bio: 
#line 1221
  bio = bio_alloc(16U, (int )nr_pages);
#line 1222
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1223
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1223
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1223
    printk("<3>%s %s: submit_ee: Allocation of a bio failed\n", tmp___5, tmp___4);
#line 1224
    goto fail;
  } else {

  }
#line 1227
  bio->bi_sector = sector;
#line 1228
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1231
  bio->bi_rw = (unsigned long )rw;
#line 1232
  bio->bi_private = (void *)e;
#line 1233
  bio->bi_end_io = & drbd_endio_sec;
#line 1235
  bio->bi_next = bios;
#line 1236
  bios = bio;
#line 1237
  n_bios = n_bios + 1U;
#line 1239
  goto ldv_43750;
  ldv_43749: 
#line 1240
  __min1 = ds;
#line 1240
  __min2 = 4096U;
#line 1240
  len = __min1 < __min2 ? __min1 : __min2;
#line 1241
  tmp___7 = bio_add_page(bio, page, len, 0U);
#line 1241
  if (tmp___7 == 0) {
#line 1243
    tmp___6 = __builtin_expect((unsigned int )bio->bi_vcnt == 0U, 0L);
#line 1243
    if (tmp___6 != 0L) {
#line 1243
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1243), "i" (12UL));
      ldv_43748: ;
#line 1243
      goto ldv_43748;
    } else {

    }
#line 1244
    goto next_bio;
  } else {

  }
#line 1246
  ds = ds - len;
#line 1247
  sector = (sector_t )(len >> 9) + sector;
#line 1248
  nr_pages = nr_pages - 1U;
#line 1239
  page = page_chain_next(page);
  ldv_43750: ;
#line 1239
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1239
    tmp___8 = page_chain_next(page);
#line 1239
    __builtin_prefetch((void const   *)tmp___8);
#line 1239
    if (1 != 0) {
#line 1240
      goto ldv_43749;
    } else {
#line 1242
      goto ldv_43751;
    }
  } else {

  }
  ldv_43751: ;
#line 1250
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1250
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1250
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1250
    printk("<3>%s %s: ASSERT( page == NULL ) in %s:%d\n", tmp___10, tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1250);
  } else {

  }
#line 1251
  if (ds != 0U) {
#line 1251
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1251
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1251
    printk("<3>%s %s: ASSERT( ds == 0 ) in %s:%d\n", tmp___12, tmp___11, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1251);
  } else {

  }
#line 1253
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_43752: 
#line 1255
  bio = bios;
#line 1256
  bios = bios->bi_next;
#line 1257
  bio->bi_next = 0;
#line 1260
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1261
    bio->bi_rw = bio->bi_rw & 0xffffffffffffff7fUL;
  } else {

  }
#line 1263
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1267
  if ((unsigned long )bios != (unsigned long )((struct bio *)0) && (unsigned long )bios->bi_next != (unsigned long )((struct bio *)0)) {
#line 1268
    bios->bi_rw = bios->bi_rw & 0xffffffffffffffdfUL;
  } else {

  }
#line 1269
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1270
    goto ldv_43752;
  } else {

  }
#line 1270
  maybe_kick_lo(mdev);
#line 1271
  return (0);
  fail: ;
#line 1274
  goto ldv_43755;
  ldv_43754: 
#line 1275
  bio = bios;
#line 1276
  bios = bios->bi_next;
#line 1277
  bio_put(bio);
  ldv_43755: ;
#line 1274
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1275
    goto ldv_43754;
  } else {

  }

#line 1279
  return (-12);
}
}
#line 1288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct drbd_epoch *tmp___1 ;
  int tmp___2 ;

  {
#line 1290
  e = (struct drbd_epoch_entry *)w;
#line 1301
  tmp___1 = previous_epoch(mdev, e->epoch);
#line 1301
  if ((unsigned long )tmp___1 != (unsigned long )((struct drbd_epoch *)0)) {
#line 1302
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1302
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1302
    printk("<4>%s %s: Write ordering was not enforced (one time event)\n", tmp___0,
           tmp);
  } else {

  }
#line 1307
  e->w.cb = & e_end_block;
#line 1308
  tmp___2 = drbd_submit_ee(mdev, e, 1U, 4);
#line 1308
  if (tmp___2 != 0) {
#line 1312
    e->w.cb = & w_e_reissue;
#line 1313
    drbd_queue_work(& mdev->data.work, & e->w);
  } else {

  }
#line 1315
  return (1);
}
}
#line 1318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int rv ;
  int issue_flush ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  enum finish_epoch tmp___3 ;
  enum finish_epoch tmp___4 ;
  void *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  enum finish_epoch tmp___9 ;
  int tmp___10 ;

  {
#line 1321
  p = (struct p_barrier *)h;
#line 1324
  _b = (unsigned int )h->length != 8U;
#line 1324
  if (_b != 0) {
#line 1324
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1324
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1324
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_Barrier", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1324);
  } else {

  }
#line 1324
  if (_b != 0) {
#line 1324
    return (0);
  } else {

  }
#line 1326
  rv = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 1327
  _b___0 = (int )h->length != rv;
#line 1327
  if (_b___0 != 0) {
#line 1327
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1327
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1327
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "receive_Barrier", (char *)"rv != h->length",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1327);
  } else {

  }
#line 1327
  if (_b___0 != 0) {
#line 1327
    return (0);
  } else {

  }
#line 1329
  inc_unacked(mdev);
#line 1331
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1332
    drbd_kick_lo(mdev);
  } else {

  }
#line 1334
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1335
  tmp___3 = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1335
  rv = (int )tmp___3;
#line 1342
  switch ((unsigned int )mdev->write_ordering) {
  case 3U: ;
  case 0U: ;
#line 1345
  if (rv == 2) {
#line 1346
    return (1);
  } else {

  }
#line 1347
  goto ldv_43778;
  case 2U: ;
  case 1U: ;
#line 1351
  if (rv == 0) {
#line 1352
    set_bit(0U, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1353
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1354
    tmp___4 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1354
    rv = (int )tmp___4;
  } else {

  }
#line 1356
  if (rv == 2) {
#line 1357
    return (1);
  } else {

  }
#line 1362
  goto ldv_43778;
  }
  ldv_43778: 
#line 1367
  tmp___5 = kmalloc___1(40UL, 16U);
#line 1367
  epoch = (struct drbd_epoch *)tmp___5;
#line 1368
  if ((unsigned long )epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1369
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1369
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1369
    printk("<4>%s %s: Allocation of an epoch failed, slowing down\n", tmp___7, tmp___6);
#line 1370
    tmp___8 = test_and_set_bit(0, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1370
    issue_flush = tmp___8 == 0;
#line 1371
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1372
    if (issue_flush != 0) {
#line 1373
      tmp___9 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1373
      rv = (int )tmp___9;
#line 1374
      if (rv == 2) {
#line 1375
        return (1);
      } else {

      }
    } else {

    }
#line 1378
    drbd_wait_ee_list_empty(mdev, & mdev->done_ee);
#line 1380
    return (1);
  } else {

  }
#line 1383
  epoch->flags = 0UL;
#line 1384
  atomic_set(& epoch->epoch_size, 0);
#line 1385
  atomic_set(& epoch->active, 0);
#line 1387
  spin_lock(& mdev->epoch_lock);
#line 1388
  tmp___10 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1388
  if (tmp___10 != 0) {
#line 1389
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1390
    mdev->current_epoch = epoch;
#line 1391
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1394
    kfree((void const   *)epoch);
  }
#line 1396
  spin_unlock(& mdev->epoch_lock);
#line 1398
  return (1);
}
}
#line 1404 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _b ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int _b___0 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  struct page *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int tmp___18 ;

  {
#line 1406
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1406
  capacity = tmp;
#line 1410
  dig_in = mdev->int_dig_in;
#line 1411
  dig_vv = mdev->int_dig_vv;
#line 1414
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1414
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1414
    dgs = (int )tmp___0;
  } else {
#line 1414
    dgs = 0;
  }
#line 1417
  if (dgs != 0) {
#line 1418
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1419
    if (rr != dgs) {
#line 1420
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1420
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1420
      printk("<4>%s %s: short read receiving data digest: read %d expected %d\n",
             tmp___2, tmp___1, rr, dgs);
#line 1422
      return (0);
    } else {

    }
  } else {

  }
#line 1426
  data_size = data_size - dgs;
#line 1428
  _b = (data_size & 511) != 0;
#line 1428
  if (_b != 0) {
#line 1428
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1428
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1428
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "read_in_block", (char *)"data_size & 0x1ff",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1428);
  } else {

  }
#line 1428
  if (_b != 0) {
#line 1428
    return (0);
  } else {

  }
#line 1429
  _b___0 = (unsigned int )data_size > 32768U;
#line 1429
  if (_b___0 != 0) {
#line 1429
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1429
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1429
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___6, tmp___5, "read_in_block", (char *)"data_size > DRBD_MAX_SEGMENT_SIZE",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1429);
  } else {

  }
#line 1429
  if (_b___0 != 0) {
#line 1429
    return (0);
  } else {

  }
#line 1433
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1434
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1434
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1434
    printk("<3>%s %s: capacity: %llus < sector: %llus + size: %u\n", tmp___8, tmp___7,
           (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1437
    return (0);
  } else {

  }
#line 1443
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1444
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1445
    return (0);
  } else {

  }
#line 1447
  ds = data_size;
#line 1448
  page = e->pages;
#line 1449
  goto ldv_43807;
  ldv_43806: 
#line 1450
  __min1 = ds;
#line 1450
  __min2 = 4096;
#line 1450
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1451
  tmp___9 = kmap(page);
#line 1451
  data = (unsigned long *)tmp___9;
#line 1452
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1453
  tmp___12 = drbd_insert_fault(mdev, 9U);
#line 1453
  if (tmp___12 != 0) {
#line 1454
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1454
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1454
    printk("<3>%s %s: Fault injection: Corrupting data on receive\n", tmp___11, tmp___10);
#line 1455
    *data = ~ *data;
  } else {

  }
#line 1457
  kunmap(page);
#line 1458
  if ((unsigned int )rr != len) {
#line 1459
    drbd_free_ee(mdev, e);
#line 1460
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1460
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1460
    printk("<4>%s %s: short read receiving data: read %d expected %d\n", tmp___14,
           tmp___13, rr, len);
#line 1462
    return (0);
  } else {

  }
#line 1464
  ds = ds - rr;
#line 1449
  page = page_chain_next(page);
  ldv_43807: ;
#line 1449
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1449
    tmp___15 = page_chain_next(page);
#line 1449
    __builtin_prefetch((void const   *)tmp___15);
#line 1449
    if (1 != 0) {
#line 1450
      goto ldv_43806;
    } else {
#line 1452
      goto ldv_43808;
    }
  } else {

  }
  ldv_43808: ;
#line 1467
  if (dgs != 0) {
#line 1468
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1469
    tmp___18 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1469
    if (tmp___18 != 0) {
#line 1470
      tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1470
      tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1470
      printk("<3>%s %s: Digest integrity check FAILED.\n", tmp___17, tmp___16);
#line 1471
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1473
      drbd_free_ee(mdev, e);
#line 1474
      return (0);
    } else {

    }
  } else {

  }
#line 1477
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1478
  return (e);
}
}
#line 1484 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1487
  rv = 1;
#line 1490
  if (data_size == 0) {
#line 1491
    return (1);
  } else {

  }
#line 1493
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1495
  data = kmap(page);
#line 1496
  goto ldv_43828;
  ldv_43827: 
#line 1497
  __min1 = data_size;
#line 1497
  __min2 = 4096;
#line 1497
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1498
  __min1___1 = data_size;
#line 1498
  __min2___1 = 4096;
#line 1498
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1499
    rv = 0;
#line 1500
    __min1___0 = data_size;
#line 1500
    __min2___0 = 4096;
#line 1500
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1500
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1500
    printk("<4>%s %s: short read receiving data: read %d expected %d\n", tmp___0,
           tmp, rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1502
    goto ldv_43826;
  } else {

  }
#line 1504
  data_size = data_size - rr;
  ldv_43828: ;
#line 1496
  if (data_size != 0) {
#line 1497
    goto ldv_43827;
  } else {

  }
  ldv_43826: 
#line 1506
  kunmap(page);
#line 1507
  drbd_pp_free(mdev, page);
#line 1508
  return (rv);
}
}
#line 1511 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int __min1 ;
  int __min2 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 1517
  dig_in = mdev->int_dig_in;
#line 1518
  dig_vv = mdev->int_dig_vv;
#line 1520
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1520
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1520
    dgs = (int )tmp;
  } else {
#line 1520
    dgs = 0;
  }
#line 1523
  if (dgs != 0) {
#line 1524
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1525
    if (rr != dgs) {
#line 1526
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1526
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1526
      printk("<4>%s %s: short read receiving data reply digest: read %d expected %d\n",
             tmp___1, tmp___0, rr, dgs);
#line 1528
      return (0);
    } else {

    }
  } else {

  }
#line 1532
  data_size = data_size - dgs;
#line 1536
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1538
  bio = req->master_bio;
#line 1539
  if (bio->bi_sector != sector) {
#line 1539
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1539
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1539
    printk("<3>%s %s: ASSERT( sector == bio->bi_sector ) in %s:%d\n", tmp___3, tmp___2,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1539);
  } else {

  }
#line 1541
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1541
  i = (int )bio->bi_idx;
#line 1541
  goto ldv_43847;
  ldv_43846: 
#line 1542
  __min1 = data_size;
#line 1542
  __min2 = (int )bvec->bv_len;
#line 1542
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1543
  tmp___4 = kmap(bvec->bv_page);
#line 1543
  rr = drbd_recv(mdev, tmp___4 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1546
  kunmap(bvec->bv_page);
#line 1547
  if (rr != expect) {
#line 1548
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1548
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1548
    printk("<4>%s %s: short read receiving data reply: read %d expected %d\n", tmp___6,
           tmp___5, rr, expect);
#line 1551
    return (0);
  } else {

  }
#line 1553
  data_size = data_size - rr;
#line 1541
  bvec = bvec + 1;
#line 1541
  i = i + 1;
  ldv_43847: ;
#line 1541
  if ((int )bio->bi_vcnt > i) {
#line 1542
    goto ldv_43846;
  } else {

  }

#line 1556
  if (dgs != 0) {
#line 1557
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1558
    tmp___9 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1558
    if (tmp___9 != 0) {
#line 1559
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1559
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1559
      printk("<3>%s %s: Digest integrity check FAILED. Broken NICs?\n", tmp___8, tmp___7);
#line 1560
      return (0);
    } else {

    }
  } else {

  }
#line 1564
  if (data_size != 0) {
#line 1564
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1564
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1564
    printk("<3>%s %s: ASSERT( data_size == 0 ) in %s:%d\n", tmp___11, tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1564);
  } else {

  }
#line 1565
  return (1);
}
}
#line 1570 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 1572
  e = (struct drbd_epoch_entry *)w;
#line 1573
  sector = e->sector;
#line 1576
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1576
  if (tmp___1 == 0) {
#line 1576
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1576
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1576
    printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1576);
  } else {

  }
#line 1578
  tmp___2 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1578
  if (tmp___2 != 0L) {
#line 1579
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1579U);
#line 1580
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1583
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1585
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1587
  atomic_dec(& mdev->unacked_cnt);
#line 1587
  tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1587
  if (tmp___6 < 0) {
#line 1587
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1587
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1587
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1587
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___5, tmp___4, "e_end_resync_block",
           1587, tmp___3);
  } else {

  }
#line 1589
  return (ok);
}
}
#line 1592 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1596
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1597
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1598
    goto fail;
  } else {

  }
#line 1600
  atomic_dec(& mdev->rs_pending_cnt);
#line 1600
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1600
  if (tmp___2 < 0) {
#line 1600
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1600
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1600
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1600
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___1, tmp___0, "recv_resync_read",
           1600, tmp);
  } else {

  }
#line 1602
  inc_unacked(mdev);
#line 1606
  e->w.cb = & e_end_resync_block;
#line 1608
  spin_lock_irq(& mdev->req_lock);
#line 1609
  list_add(& e->w.list, & mdev->sync_ee);
#line 1610
  spin_unlock_irq(& mdev->req_lock);
#line 1612
  tmp___3 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1612
  if (tmp___3 == 0) {
#line 1613
    return (1);
  } else {

  }
#line 1615
  drbd_free_ee(mdev, e);
  fail: 
#line 1617
  put_ldev(mdev);
#line 1618
  return (0);
}
}
#line 1621 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;

  {
#line 1627
  p = (struct p_data *)h;
#line 1629
  header_size = 24U;
#line 1630
  data_size = (unsigned int )h->length - header_size;
#line 1632
  _b = data_size == 0U;
#line 1632
  if (_b != 0) {
#line 1632
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1632
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1632
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_DataReply", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1632);
  } else {

  }
#line 1632
  if (_b != 0) {
#line 1632
    return (0);
  } else {

  }
#line 1634
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1634
  if ((unsigned int )tmp___1 != header_size) {
#line 1635
    return (0);
  } else {

  }
#line 1637
  tmp___2 = __fswab64(p->sector);
#line 1637
  sector = (sector_t )tmp___2;
#line 1639
  spin_lock_irq(& mdev->req_lock);
#line 1640
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1641
  spin_unlock_irq(& mdev->req_lock);
#line 1642
  tmp___5 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1642
  if (tmp___5 != 0L) {
#line 1643
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1643
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1643
    printk("<3>%s %s: Got a corrupt block_id/sector pair(1).\n", tmp___4, tmp___3);
#line 1644
    return (0);
  } else {

  }
#line 1650
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1652
  if (ok != 0) {
#line 1653
    req_mod(req, data_received);
  } else {

  }
#line 1658
  return (ok);
}
}
#line 1661 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1666
  p = (struct p_data *)h;
#line 1668
  header_size = 24U;
#line 1669
  data_size = (unsigned int )h->length - header_size;
#line 1671
  _b = data_size == 0U;
#line 1671
  if (_b != 0) {
#line 1671
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1671
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1671
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_RSDataReply", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1671);
  } else {

  }
#line 1671
  if (_b != 0) {
#line 1671
    return (0);
  } else {

  }
#line 1673
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1673
  if ((unsigned int )tmp___1 != header_size) {
#line 1674
    return (0);
  } else {

  }
#line 1676
  tmp___2 = __fswab64(p->sector);
#line 1676
  sector = (sector_t )tmp___2;
#line 1677
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1677
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1677
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1677
    printk("<3>%s %s: ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n", tmp___4, tmp___3,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1677);
  } else {

  }
#line 1679
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1679
  if (tmp___8 != 0) {
#line 1683
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1685
    tmp___7 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1685
    if (tmp___7 != 0) {
#line 1686
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1686
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1686
      printk("<3>%s %s: Can not write resync data to local disk.\n", tmp___6, tmp___5);
    } else {

    }
#line 1688
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1690
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
  }
#line 1693
  return (ok);
}
}
#line 1699 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  struct drbd_epoch *epoch ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;

  {
#line 1701
  e = (struct drbd_epoch_entry *)w;
#line 1702
  sector = e->sector;
#line 1704
  ok = 1;
#line 1706
  if ((e->flags & 4UL) != 0UL) {
#line 1707
    epoch = previous_epoch(mdev, e->epoch);
#line 1708
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1709
      drbd_may_finish_epoch(mdev, epoch, cancel != 0 ? 34 : EV_BARRIER_DONE);
    } else {

    }
  } else {

  }
#line 1712
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1713
    tmp___0 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1713
    if (tmp___0 != 0L) {
#line 1714
      pcmd = ((int )mdev->state.ldv_33657.conn > 15 && (int )mdev->state.ldv_33657.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1718
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1718
      ok = tmp & ok;
#line 1719
      if (pcmd == 23) {
#line 1720
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1720U);
      } else {

      }
    } else {
#line 1722
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1726
    atomic_dec(& mdev->unacked_cnt);
#line 1726
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1726
    if (tmp___4 < 0) {
#line 1726
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1726
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1726
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1726
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___3, tmp___2, "e_end_block",
             1726, tmp___1);
    } else {

    }
  } else {

  }
#line 1730
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1731
    spin_lock_irq(& mdev->req_lock);
#line 1732
    tmp___7 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1732
    if (tmp___7 != 0) {
#line 1732
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1732
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1732
      printk("<3>%s %s: ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___6,
             tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             1732);
    } else {

    }
#line 1733
    hlist_del_init(& e->colision);
#line 1734
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1736
    tmp___10 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1736
    if (tmp___10 == 0) {
#line 1736
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1736
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1736
      printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___9,
             tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             1736);
    } else {

    }
  }
#line 1739
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1741
  return (ok);
}
}
#line 1744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 1746
  e = (struct drbd_epoch_entry *)w;
#line 1747
  ok = 1;
#line 1749
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1749
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1749
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1749
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1749);
  } else {

  }
#line 1750
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1752
  spin_lock_irq(& mdev->req_lock);
#line 1753
  tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1753
  if (tmp___3 != 0) {
#line 1753
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1753
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1753
    printk("<3>%s %s: ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1753);
  } else {

  }
#line 1754
  hlist_del_init(& e->colision);
#line 1755
  spin_unlock_irq(& mdev->req_lock);
#line 1757
  atomic_dec(& mdev->unacked_cnt);
#line 1757
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1757
  if (tmp___7 < 0) {
#line 1757
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1757
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1757
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1757
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___6, tmp___5, "e_send_discard_ack",
           1757, tmp___4);
  } else {

  }
#line 1759
  return (ok);
}
}
#line 1783 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 1785
  tmp = get_current();
#line 1785
  wait.flags = 0U;
#line 1785
  wait.private = (void *)tmp;
#line 1785
  wait.func = & autoremove_wake_function;
#line 1785
  wait.task_list.next = & wait.task_list;
#line 1785
  wait.task_list.prev = & wait.task_list;
#line 1788
  ret = 0;
#line 1789
  spin_lock(& mdev->peer_seq_lock);
  ldv_43931: 
#line 1791
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1792
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1792
  if (tmp___0 <= 0) {
#line 1793
    goto ldv_43930;
  } else {

  }
#line 1794
  tmp___1 = get_current();
#line 1794
  tmp___2 = signal_pending(tmp___1);
#line 1794
  if (tmp___2 != 0) {
#line 1795
    ret = -512;
#line 1796
    goto ldv_43930;
  } else {

  }
#line 1798
  p_seq = mdev->peer_seq;
#line 1799
  spin_unlock(& mdev->peer_seq_lock);
#line 1800
  timeout = schedule_timeout(7500L);
#line 1801
  spin_lock(& mdev->peer_seq_lock);
#line 1802
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1803
    ret = -110;
#line 1804
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1804
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1804
    printk("<3>%s %s: ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n",
           tmp___4, tmp___3);
#line 1805
    goto ldv_43930;
  } else {

  }
#line 1807
  goto ldv_43931;
  ldv_43930: 
#line 1808
  finish_wait(& mdev->seq_wait, & wait);
#line 1809
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1810
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1811
  spin_unlock(& mdev->peer_seq_lock);
#line 1812
  return (ret);
}
}
#line 1816 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int header_size ;
  int data_size ;
  int rw ;
  u32 dp_flags ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  __u64 tmp___8 ;
  struct drbd_epoch *epoch ;
  struct list_head  const  *__mptr ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  __u32 tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int size ;
  int discard ;
  int tmp___15 ;
  wait_queue_t wait ;
  struct task_struct *tmp___16 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  long tmp___19 ;
  long tmp___20 ;
  __u32 tmp___21 ;
  int tmp___22 ;
  struct hlist_head *tmp___23 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___24 ;
  struct task_struct *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  int tmp___28 ;
  struct hlist_node  const  *__mptr___0 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  struct task_struct *tmp___31 ;
  int tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  char const   *tmp___36 ;
  int tmp___37 ;

  {
#line 1820
  p = (struct p_data *)h;
#line 1822
  rw = 1;
#line 1825
  header_size = 24;
#line 1826
  data_size = (int )h->length - header_size;
#line 1828
  _b = data_size == 0;
#line 1828
  if (_b != 0) {
#line 1828
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1828
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1828
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_Data", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1828);
  } else {

  }
#line 1828
  if (_b != 0) {
#line 1828
    return (0);
  } else {

  }
#line 1830
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1830
  if (tmp___1 != header_size) {
#line 1831
    return (0);
  } else {

  }
#line 1833
  tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1833
  if (tmp___7 == 0) {
#line 1834
    tmp___4 = ___ratelimit(& drbd_ratelimit_state, "receive_Data");
#line 1834
    if (tmp___4 != 0) {
#line 1835
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1835
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1835
      printk("<3>%s %s: Can not write mirrored data block to local disk.\n", tmp___3,
             tmp___2);
    } else {

    }
#line 1837
    spin_lock(& mdev->peer_seq_lock);
#line 1838
    tmp___5 = __fswab32(p->seq_num);
#line 1838
    if (mdev->peer_seq + 1U == tmp___5) {
#line 1839
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1840
    spin_unlock(& mdev->peer_seq_lock);
#line 1842
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
#line 1843
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1844
    tmp___6 = drbd_drain_block(mdev, data_size);
#line 1844
    return (tmp___6);
  } else {

  }
#line 1852
  tmp___8 = __fswab64(p->sector);
#line 1852
  sector = (sector_t )tmp___8;
#line 1853
  e = read_in_block(mdev, p->block_id, sector, data_size);
#line 1854
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1855
    put_ldev(mdev);
#line 1856
    return (0);
  } else {

  }
#line 1859
  e->w.cb = & e_end_block;
#line 1861
  spin_lock(& mdev->epoch_lock);
#line 1862
  e->epoch = mdev->current_epoch;
#line 1863
  atomic_inc(& (e->epoch)->epoch_size);
#line 1864
  atomic_inc(& (e->epoch)->active);
#line 1866
  if ((unsigned int )mdev->write_ordering == 3U) {
#line 1866
    tmp___11 = atomic_read((atomic_t const   *)(& (e->epoch)->epoch_size));
#line 1866
    if (tmp___11 == 1) {
#line 1871
      __mptr = (struct list_head  const  *)(e->epoch)->list.prev;
#line 1871
      epoch = (struct drbd_epoch *)__mptr;
#line 1872
      if ((unsigned long )e->epoch == (unsigned long )epoch) {
#line 1873
        set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1874
        rw = rw | 32;
#line 1875
        e->flags = e->flags | 4UL;
      } else {
#line 1877
        tmp___9 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1877
        if (tmp___9 > 1) {
#line 1879
          set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1880
          set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1881
          rw = rw | 32;
#line 1882
          e->flags = e->flags | 4UL;
        } else {
#line 1877
          tmp___10 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1877
          if (tmp___10 == 0) {
#line 1879
            set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1880
            set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1881
            rw = rw | 32;
#line 1882
            e->flags = e->flags | 4UL;
          } else {

          }
        }
      }
    } else {

    }
  } else {

  }
#line 1886
  spin_unlock(& mdev->epoch_lock);
#line 1888
  tmp___12 = __fswab32(p->dp_flags);
#line 1888
  dp_flags = tmp___12;
#line 1889
  if ((int )dp_flags & 1) {
#line 1890
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1890
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1890
    printk("<3>%s %s: ASSERT FAILED would have submitted barrier request\n", tmp___14,
           tmp___13);
  } else {

  }
#line 1893
  if ((dp_flags & 2U) != 0U) {
#line 1894
    rw = rw | 192;
  } else {

  }
#line 1895
  if ((dp_flags & 4U) != 0U) {
#line 1896
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1899
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1900
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1904
    size = (int const   )e->size;
#line 1905
    tmp___15 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 1905
    discard = tmp___15;
#line 1906
    tmp___16 = get_current();
#line 1906
    wait.flags = 0U;
#line 1906
    wait.private = (void *)tmp___16;
#line 1906
    wait.func = & autoremove_wake_function;
#line 1906
    wait.task_list.next = & wait.task_list;
#line 1906
    wait.task_list.prev = & wait.task_list;
#line 1912
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1912
      tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1912
      tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1912
      printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
             tmp___18, tmp___17, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             1912);
    } else {

    }
#line 1913
    tmp___19 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1913
    if (tmp___19 != 0L) {
#line 1913
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1913), "i" (12UL));
      ldv_43956: ;
#line 1913
      goto ldv_43956;
    } else {

    }
#line 1914
    tmp___20 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1914
    if (tmp___20 != 0L) {
#line 1914
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1914), "i" (12UL));
      ldv_43957: ;
#line 1914
      goto ldv_43957;
    } else {

    }
#line 1950
    tmp___21 = __fswab32(p->seq_num);
#line 1950
    tmp___22 = drbd_wait_peer_seq(mdev, tmp___21);
#line 1950
    if (tmp___22 != 0) {
#line 1951
      goto out_interrupted;
    } else {

    }
#line 1953
    spin_lock_irq(& mdev->req_lock);
#line 1955
    tmp___23 = ee_hash_slot(mdev, sector);
#line 1955
    hlist_add_head(& e->colision, tmp___23);
#line 1958
    slot = tl_hash_slot(mdev, sector);
#line 1959
    first = 1;
    ldv_43969: 
#line 1961
    have_unacked = 0;
#line 1962
    have_conflict = 0;
#line 1963
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1965
    n = slot->first;
#line 1965
    goto ldv_43966;
    ldv_43965: 
#line 1966
    tmp___28 = overlaps(i->sector, (int )i->size, sector, size);
#line 1966
    if (tmp___28 != 0) {
#line 1969
      if (first != 0) {
#line 1970
        tmp___24 = get_current();
#line 1970
        tmp___25 = get_current();
#line 1970
        tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1970
        tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1970
        printk("<1>%s %s: %s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
               tmp___27, tmp___26, (char *)(& tmp___25->comm), tmp___24->pid, (unsigned long long )sector,
               size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1975
      if ((i->rq_state & 8UL) != 0UL) {
#line 1976
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1977
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1965
    n = n->next;
    ldv_43966: ;
#line 1965
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1965
      __builtin_prefetch((void const   *)n->next);
#line 1965
      if (1 != 0) {
#line 1965
        __mptr___0 = (struct hlist_node  const  *)n;
#line 1965
        i = (struct drbd_request *)__mptr___0 + 0xffffffffffffffd8UL;
#line 1965
        if (1 != 0) {
#line 1966
          goto ldv_43965;
        } else {
#line 1968
          goto ldv_43967;
        }
      } else {
#line 1968
        goto ldv_43967;
      }
    } else {

    }
    ldv_43967: ;
#line 1981
    if (have_conflict == 0) {
#line 1982
      goto ldv_43968;
    } else {

    }
#line 1985
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1986
      tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1986
      tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1986
      printk("<1>%s %s: Concurrent write! [DISCARD BY FLAG] sec=%llus\n", tmp___30,
             tmp___29, (unsigned long long )sector);
#line 1988
      inc_unacked(mdev);
#line 1989
      e->w.cb = & e_send_discard_ack;
#line 1990
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1992
      spin_unlock_irq(& mdev->req_lock);
#line 1997
      put_ldev(mdev);
#line 1998
      wake_asender(mdev);
#line 1999
      finish_wait(& mdev->misc_wait, & wait);
#line 2000
      return (1);
    } else {

    }
#line 2003
    tmp___31 = get_current();
#line 2003
    tmp___32 = signal_pending(tmp___31);
#line 2003
    if (tmp___32 != 0) {
#line 2004
      hlist_del_init(& e->colision);
#line 2006
      spin_unlock_irq(& mdev->req_lock);
#line 2008
      finish_wait(& mdev->misc_wait, & wait);
#line 2009
      goto out_interrupted;
    } else {

    }
#line 2012
    spin_unlock_irq(& mdev->req_lock);
#line 2013
    if (first != 0) {
#line 2014
      first = 0;
#line 2015
      tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2015
      tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2015
      printk("<1>%s %s: Concurrent write! [W AFTERWARDS] sec=%llus\n", tmp___34, tmp___33,
             (unsigned long long )sector);
    } else
#line 2017
    if (discard != 0) {
#line 2020
      if (have_unacked != 0) {
#line 2020
        tmp___35 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2020
        tmp___36 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2020
        printk("<3>%s %s: ASSERT( have_unacked == 0 ) in %s:%d\n", tmp___36, tmp___35,
               (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
               2020);
      } else {

      }
    } else {

    }
#line 2022
    schedule();
#line 2023
    spin_lock_irq(& mdev->req_lock);
#line 2024
    goto ldv_43969;
    ldv_43968: 
#line 2025
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 2028
  list_add(& e->w.list, & mdev->active_ee);
#line 2029
  spin_unlock_irq(& mdev->req_lock);
#line 2031
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 2033
  inc_unacked(mdev);
#line 2036
  goto ldv_43971;
  case 2: 
#line 2040
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 2041
  goto ldv_43971;
  case 1: ;
#line 2044
  goto ldv_43971;
  }
  ldv_43971: ;
#line 2047
  if (*((unsigned int *)mdev + 503UL) == 0U) {
#line 2049
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           2049U);
#line 2050
    e->flags = e->flags | 1UL;
#line 2051
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 2054
  tmp___37 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 2054
  if (tmp___37 == 0) {
#line 2055
    return (1);
  } else {

  }
  out_interrupted: 
#line 2061
  put_ldev(mdev);
#line 2062
  drbd_free_ee(mdev, e);
#line 2063
  return (0);
}
}
#line 2066 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int digest_size ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  int brps ;
  int tmp___0 ;
  __u64 tmp___1 ;
  __u32 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct task_struct *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  void *tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  struct task_struct *tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  char const   *tmp___36 ;
  struct task_struct *tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;
  int tmp___43 ;

  {
#line 2069
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 2069
  capacity = tmp;
#line 2071
  di = 0;
#line 2074
  p = (struct p_block_req *)h;
#line 2076
  brps = 24;
#line 2078
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )brps);
#line 2078
  if (tmp___0 != brps) {
#line 2079
    return (0);
  } else {

  }
#line 2081
  tmp___1 = __fswab64(p->sector);
#line 2081
  sector = (sector_t )tmp___1;
#line 2082
  tmp___2 = __fswab32(p->blksize);
#line 2082
  size = (int )tmp___2;
#line 2084
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 2085
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2085
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2085
    printk("<3>%s %s: %s:%d: sector: %llus, size: %u\n", tmp___4, tmp___3, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           2086, (unsigned long long )sector, size);
#line 2087
    return (0);
  } else {

  }
#line 2089
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2090
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2090
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2090
    printk("<3>%s %s: %s:%d: sector: %llus, size: %u\n", tmp___6, tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           2091, (unsigned long long )sector, size);
#line 2092
    return (0);
  } else {

  }
#line 2095
  tmp___11 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2095
  if (tmp___11 == 0) {
#line 2096
    tmp___9 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2096
    if (tmp___9 != 0) {
#line 2097
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2097
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2097
      printk("<3>%s %s: Can not satisfy peer\'s read request, no local data.\n", tmp___8,
             tmp___7);
    } else {

    }
#line 2099
    drbd_send_ack_rp(mdev, (unsigned int )h->command == 8U ? P_NEG_DREPLY : P_NEG_RS_DREPLY,
                     p);
#line 2101
    tmp___10 = drbd_drain_block(mdev, (int )h->length - brps);
#line 2101
    return (tmp___10);
  } else {

  }
#line 2107
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2108
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2109
    put_ldev(mdev);
#line 2110
    return (0);
  } else {

  }
#line 2113
  switch ((int )h->command) {
  case 8: 
#line 2115
  e->w.cb = & w_e_end_data_req;
#line 2116
  fault_type = 5U;
#line 2117
  goto ldv_43989;
  case 9: 
#line 2119
  e->w.cb = & w_e_end_rsdata_req;
#line 2120
  fault_type = 3U;
#line 2126
  tmp___16 = drbd_rs_begin_io(mdev, sector);
#line 2126
  if (tmp___16 == 0) {
#line 2129
    tmp___14 = get_current();
#line 2129
    tmp___15 = signal_pending(tmp___14);
#line 2129
    if (tmp___15 == 0) {
#line 2129
      tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2129
      tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2129
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___13, tmp___12,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2129);
    } else {

    }
#line 2130
    goto out_free_e;
  } else {

  }
#line 2132
  goto ldv_43989;
  case 31: ;
  case 33: 
#line 2136
  fault_type = 3U;
#line 2137
  digest_size = (int )h->length - brps;
#line 2138
  tmp___17 = kmalloc___1((unsigned long )digest_size + 16UL, 16U);
#line 2138
  di = (struct digest_info *)tmp___17;
#line 2139
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2140
    goto out_free_e;
  } else {

  }
#line 2142
  di->digest_size = digest_size;
#line 2143
  di->digest = (void *)di + 16U;
#line 2145
  tmp___18 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2145
  if (tmp___18 != digest_size) {
#line 2146
    goto out_free_e;
  } else {

  }
#line 2148
  e->block_id = (unsigned long long )di;
#line 2149
  if ((unsigned int )h->command == 33U) {
#line 2150
    if (mdev->agreed_pro_version <= 88) {
#line 2150
      tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2150
      tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2150
      printk("<3>%s %s: ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n", tmp___20,
             tmp___19, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2150);
    } else {

    }
#line 2151
    e->w.cb = & w_e_end_csum_rs_req;
  } else
#line 2152
  if ((unsigned int )h->command == 31U) {
#line 2153
    e->w.cb = & w_e_end_ov_reply;
#line 2154
    atomic_dec(& mdev->rs_pending_cnt);
#line 2154
    tmp___24 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2154
    if (tmp___24 < 0) {
#line 2154
      tmp___21 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2154
      tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2154
      tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2154
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___23, tmp___22,
             "receive_DataRequest", 2154, tmp___21);
    } else {

    }
#line 2155
    goto ldv_43989;
  } else {

  }
#line 2158
  tmp___29 = drbd_rs_begin_io(mdev, sector);
#line 2158
  if (tmp___29 == 0) {
#line 2160
    tmp___27 = get_current();
#line 2160
    tmp___28 = signal_pending(tmp___27);
#line 2160
    if (tmp___28 == 0) {
#line 2160
      tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2160
      tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2160
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___26, tmp___25,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2160);
    } else {

    }
#line 2161
    goto out_free_e;
  } else {

  }
#line 2163
  goto ldv_43989;
  case 30: ;
#line 2166
  if ((int )mdev->state.ldv_33657.conn > 9 && (unsigned int )*((unsigned short *)mdev + 1006UL) != 304U) {
#line 2168
    tmp___30 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33657.conn);
#line 2168
    tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2168
    tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2168
    printk("<4>%s %s: ASSERT FAILED: got P_OV_REQUEST while being %s\n", tmp___32,
           tmp___31, tmp___30);
  } else {

  }
#line 2170
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2172
    mdev->ov_start_sector = sector;
#line 2173
    mdev->ov_position = sector;
#line 2174
    mdev->ov_left = mdev->rs_total - (sector >> 3);
#line 2175
    tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2175
    tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2175
    printk("<6>%s %s: Online Verify start sector: %llu\n", tmp___34, tmp___33, (unsigned long long )sector);
  } else {

  }
#line 2178
  e->w.cb = & w_e_end_ov_req;
#line 2179
  fault_type = 3U;
#line 2185
  tmp___39 = drbd_rs_begin_io(mdev, sector);
#line 2185
  if (tmp___39 == 0) {
#line 2188
    tmp___37 = get_current();
#line 2188
    tmp___38 = signal_pending(tmp___37);
#line 2188
    if (tmp___38 == 0) {
#line 2188
      tmp___35 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2188
      tmp___36 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2188
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___36, tmp___35,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2188);
    } else {

    }
#line 2189
    goto out_free_e;
  } else {

  }
#line 2191
  goto ldv_43989;
  default: 
#line 2195
  tmp___40 = cmdname((enum drbd_packets )h->command);
#line 2195
  tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2195
  tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2195
  printk("<3>%s %s: unexpected command (%s) in receive_DataRequest\n", tmp___42, tmp___41,
         tmp___40);
#line 2197
  fault_type = 10U;
  }
  ldv_43989: 
#line 2200
  spin_lock_irq(& mdev->req_lock);
#line 2201
  list_add(& e->w.list, & mdev->read_ee);
#line 2202
  spin_unlock_irq(& mdev->req_lock);
#line 2204
  inc_unacked(mdev);
#line 2206
  tmp___43 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2206
  if (tmp___43 == 0) {
#line 2207
    return (1);
  } else {

  }
  out_free_e: 
#line 2210
  kfree((void const   *)di);
#line 2211
  put_ldev(mdev);
#line 2212
  drbd_free_ee(mdev, e);
#line 2213
  return (0);
}
}
#line 2216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2218
  rv = -100;
#line 2221
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2222
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2224
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2225
  ch_self = mdev->comm_bm_set;
#line 2227
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2231
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2231
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2231
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2232
  goto ldv_44010;
  case 0: ;
#line 2234
  goto ldv_44010;
  case 1: ;
#line 2236
  if (self == 0 && peer == 1) {
#line 2237
    rv = -1;
#line 2238
    goto ldv_44010;
  } else {

  }
#line 2240
  if (self == 1 && peer == 0) {
#line 2241
    rv = 1;
#line 2242
    goto ldv_44010;
  } else {

  }
  case 2: ;
#line 2246
  if (self == 0 && peer == 1) {
#line 2247
    rv = 1;
#line 2248
    goto ldv_44010;
  } else {

  }
#line 2250
  if (self == 1 && peer == 0) {
#line 2251
    rv = -1;
#line 2252
    goto ldv_44010;
  } else {

  }
#line 2255
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2255
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2255
  printk("<4>%s %s: Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n",
         tmp___2, tmp___1);
  case 3: ;
#line 2258
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2259
    tmp___3 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2259
    rv = tmp___3 != 0 ? -1 : 1;
#line 2261
    goto ldv_44010;
  } else {
#line 2263
    if (ch_peer == 0UL) {
#line 2263
      rv = 1;
#line 2263
      goto ldv_44010;
    } else {

    }
#line 2264
    if (ch_self == 0UL) {
#line 2264
      rv = -1;
#line 2264
      goto ldv_44010;
    } else {

    }
  }
#line 2266
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2267
    goto ldv_44010;
  } else {

  }
  case 4: ;
#line 2269
  if (ch_self < ch_peer) {
#line 2270
    rv = -1;
  } else
#line 2271
  if (ch_self > ch_peer) {
#line 2272
    rv = 1;
  } else {
#line 2275
    tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2275
    rv = tmp___4 != 0 ? -1 : 1;
  }
#line 2277
  goto ldv_44010;
  case 5: 
#line 2279
  rv = -1;
#line 2280
  goto ldv_44010;
  case 6: 
#line 2282
  rv = 1;
  }
  ldv_44010: ;
#line 2285
  return (rv);
}
}
#line 2288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2290
  rv = -100;
#line 2292
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2293
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2295
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2301
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2301
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2301
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2302
  goto ldv_44030;
  case 0: ;
#line 2304
  goto ldv_44030;
  case 7: 
#line 2306
  hg = drbd_asb_recover_0p(mdev);
#line 2307
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 2U) {
#line 2308
    rv = hg;
  } else {

  }
#line 2309
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 2310
    rv = hg;
  } else {

  }
#line 2311
  goto ldv_44030;
  case 10: 
#line 2313
  rv = drbd_asb_recover_0p(mdev);
#line 2314
  goto ldv_44030;
  case 8: ;
#line 2316
  return ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U ? 1 : -1);
  case 9: 
#line 2318
  hg = drbd_asb_recover_0p(mdev);
#line 2319
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 2320
    self = drbd_set_role(mdev, R_SECONDARY, 0);
#line 2324
    val.i = 0U;
#line 2324
    val.ldv_33657.role = 2U;
#line 2324
    mask.i = 0U;
#line 2324
    mask.ldv_33657.role = 3U;
#line 2324
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2325
    if (self != 1) {
#line 2326
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2328
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2328
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2328
      printk("<4>%s %s: Successfully gave up primary role.\n", tmp___2, tmp___1);
#line 2329
      rv = hg;
    }
  } else {
#line 2332
    rv = hg;
  }
  }
  ldv_44030: ;
#line 2335
  return (rv);
}
}
#line 2338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2340
  rv = -100;
#line 2342
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2343
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2345
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2353
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2353
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2353
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2354
  goto ldv_44054;
  case 10: 
#line 2356
  rv = drbd_asb_recover_0p(mdev);
#line 2357
  goto ldv_44054;
  case 0: ;
#line 2359
  goto ldv_44054;
  case 9: 
#line 2361
  hg = drbd_asb_recover_0p(mdev);
#line 2362
  if (hg == -1) {
#line 2366
    val.i = 0U;
#line 2366
    val.ldv_33657.role = 2U;
#line 2366
    mask.i = 0U;
#line 2366
    mask.ldv_33657.role = 3U;
#line 2366
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2367
    if (self != 1) {
#line 2368
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2370
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2370
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2370
      printk("<4>%s %s: Successfully gave up primary role.\n", tmp___2, tmp___1);
#line 2371
      rv = hg;
    }
  } else {
#line 2374
    rv = hg;
  }
  }
  ldv_44054: ;
#line 2377
  return (rv);
}
}
#line 2380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2383
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2384
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2384
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2384
    printk("<6>%s %s: %s uuid info vanished while I was looking!\n", tmp___0, tmp,
           text);
#line 2385
    return;
  } else {

  }
#line 2387
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2387
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2387
  printk("<6>%s %s: %s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n", tmp___2,
         tmp___1, text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits,
         flags);
#line 2388
  return;
}
}
#line 2407 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  unsigned long tmp___12 ;
  u64 tmp___13 ;

  {
#line 2412
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2413
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2415
  *rule_nr = 10;
#line 2416
  if (self == 4ULL && peer == 4ULL) {
#line 2417
    return (0);
  } else {

  }
#line 2419
  *rule_nr = 20;
#line 2420
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2422
    return (-2);
  } else {

  }
#line 2424
  *rule_nr = 30;
#line 2425
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2427
    return (2);
  } else {

  }
#line 2429
  if (self == peer) {
#line 2432
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2434
      if (mdev->agreed_pro_version <= 90) {
#line 2435
        return (-1001);
      } else {

      }
#line 2437
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2439
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2439
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2439
        printk("<6>%s %s: was SyncSource, missed the resync finished event, corrected myself:\n",
               tmp___0, tmp);
#line 2440
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2442
        if ((int )mdev->state.ldv_33657.disk > 2) {
#line 2442
          tmp___1 = drbd_bm_total_weight(mdev);
#line 2442
          tmp___2 = (u64 )tmp___1;
        } else {
#line 2442
          tmp___2 = 0ULL;
        }
#line 2442
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___2,
                       0ULL);
#line 2444
        *rule_nr = 34;
      } else {
#line 2446
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2446
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2446
        printk("<6>%s %s: was SyncSource (peer failed to write sync_uuid)\n", tmp___4,
               tmp___3);
#line 2447
        *rule_nr = 36;
      }
#line 2450
      return (1);
    } else {

    }
#line 2453
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2455
      if (mdev->agreed_pro_version <= 90) {
#line 2456
        return (-1001);
      } else {

      }
#line 2458
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2460
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2460
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2460
        printk("<6>%s %s: was SyncTarget, peer missed the resync finished event, corrected peer:\n",
               tmp___6, tmp___5);
#line 2462
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2463
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2464
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2466
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2467
        *rule_nr = 35;
      } else {
#line 2469
        tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2469
        tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2469
        printk("<6>%s %s: was SyncTarget (failed to write sync_uuid)\n", tmp___8,
               tmp___7);
#line 2470
        *rule_nr = 37;
      }
#line 2473
      return (-1);
    } else {

    }
#line 2477
    tmp___9 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 2477
    rct = (int )((tmp___9 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2481
    *rule_nr = 40;
#line 2483
    switch (rct) {
    case 0: ;
#line 2484
    return (0);
    case 1: ;
#line 2485
    return (1);
    case 2: ;
#line 2486
    return (-1);
    case 3: 
#line 2488
    dc = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2489
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2493
  *rule_nr = 50;
#line 2494
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2495
  if (self == peer) {
#line 2496
    return (-1);
  } else {

  }
#line 2498
  *rule_nr = 51;
#line 2499
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2500
  if (self == peer) {
#line 2501
    self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2502
    peer = *(mdev->p_uuid + 3UL) & 0xfffffffffffffffeULL;
#line 2503
    if (self == peer) {
#line 2507
      if (mdev->agreed_pro_version <= 90) {
#line 2508
        return (-1001);
      } else {

      }
#line 2510
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2511
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2512
      return (-1);
    } else {

    }
  } else {

  }
#line 2516
  *rule_nr = 60;
#line 2517
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2518
  i = 2;
#line 2518
  goto ldv_44084;
  ldv_44083: 
#line 2519
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2520
  if (self == peer) {
#line 2521
    return (-2);
  } else {

  }
#line 2518
  i = i + 1;
  ldv_44084: ;
#line 2518
  if (i <= 3) {
#line 2519
    goto ldv_44083;
  } else {

  }
#line 2524
  *rule_nr = 70;
#line 2525
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2526
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2527
  if (self == peer) {
#line 2528
    return (1);
  } else {

  }
#line 2530
  *rule_nr = 71;
#line 2531
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2532
  if (self == peer) {
#line 2533
    self = (mdev->ldev)->md.uuid[3] & 0xfffffffffffffffeULL;
#line 2534
    peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2535
    if (self == peer) {
#line 2539
      if (mdev->agreed_pro_version <= 90) {
#line 2540
        return (-1001);
      } else {

      }
#line 2542
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2543
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2545
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2545
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2545
      printk("<6>%s %s: Undid last start of resync:\n", tmp___11, tmp___10);
#line 2547
      if ((int )mdev->state.ldv_33657.disk > 2) {
#line 2547
        tmp___12 = drbd_bm_total_weight(mdev);
#line 2547
        tmp___13 = (u64 )tmp___12;
      } else {
#line 2547
        tmp___13 = 0ULL;
      }
#line 2547
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___13,
                     0ULL);
#line 2550
      return (1);
    } else {

    }
  } else {

  }
#line 2555
  *rule_nr = 80;
#line 2556
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2557
  i = 2;
#line 2557
  goto ldv_44087;
  ldv_44086: 
#line 2558
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2559
  if (self == peer) {
#line 2560
    return (2);
  } else {

  }
#line 2557
  i = i + 1;
  ldv_44087: ;
#line 2557
  if (i <= 3) {
#line 2558
    goto ldv_44086;
  } else {

  }
#line 2563
  *rule_nr = 90;
#line 2564
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2565
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2566
  if (self == peer && self != 0ULL) {
#line 2567
    return (100);
  } else {

  }
#line 2569
  *rule_nr = 100;
#line 2570
  i = 2;
#line 2570
  goto ldv_44093;
  ldv_44092: 
#line 2571
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2572
  j = 2;
#line 2572
  goto ldv_44090;
  ldv_44089: 
#line 2573
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2574
  if (self == peer) {
#line 2575
    return (-100);
  } else {

  }
#line 2572
  j = j + 1;
  ldv_44090: ;
#line 2572
  if (j <= 3) {
#line 2573
    goto ldv_44089;
  } else {

  }
#line 2570
  i = i + 1;
  ldv_44093: ;
#line 2570
  if (i <= 3) {
#line 2571
    goto ldv_44092;
  } else {

  }

#line 2579
  return (-1000);
}
}
#line 2585 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int f ;
  long __x ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  long __x___0 ;
  int pcount ;
  int forced ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long __x___1 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  long __x___2 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  long __x___3 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  int tmp___32 ;
  long __x___4 ;
  unsigned long tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  unsigned long tmp___36 ;

  {
#line 2589
  rv = C_MASK;
#line 2592
  mydisk = (enum drbd_disk_state )mdev->state.ldv_33657.disk;
#line 2593
  if ((unsigned int )mydisk == 3U) {
#line 2594
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_33657.disk;
  } else {

  }
#line 2596
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2596
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2596
  printk("<6>%s %s: drbd_sync_handshake:\n", tmp___0, tmp);
#line 2597
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2598
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2601
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2603
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2603
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2603
  printk("<6>%s %s: uuid_compare()=%d by rule %d\n", tmp___2, tmp___1, hg, rule_nr);
#line 2605
  if (hg == -1000) {
#line 2606
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2606
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2606
    printk("<1>%s %s: Unrelated data, aborting!\n", tmp___4, tmp___3);
#line 2607
    return (C_MASK);
  } else {

  }
#line 2609
  if (hg == -1001) {
#line 2610
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2610
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2610
    printk("<1>%s %s: To resolve this both sides have to support at least protocol\n",
           tmp___6, tmp___5);
#line 2611
    return (C_MASK);
  } else {

  }
#line 2614
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2616
    if (hg == -100) {
#line 2616
      tmp___7 = 1;
    } else {
#line 2616
      __x = (long )hg;
#line 2616
      if ((__x < 0L ? - __x : __x) == 2L) {
#line 2616
        tmp___7 = 1;
      } else {
#line 2616
        tmp___7 = 0;
      }
    }
#line 2616
    f = tmp___7;
#line 2617
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2618
    if (f != 0) {
#line 2619
      hg = hg * 2;
    } else {

    }
#line 2620
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2620
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2620
    printk("<6>%s %s: Becoming sync %s due to disk states.\n", tmp___9, tmp___8, hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2624
  __x___0 = (long )hg;
#line 2624
  if ((__x___0 < 0L ? - __x___0 : __x___0) == 100L) {
#line 2625
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2627
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U)) {
#line 2628
    pcount = ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2630
    forced = hg == -100;
#line 2632
    switch (pcount) {
    case 0: 
#line 2634
    hg = drbd_asb_recover_0p(mdev);
#line 2635
    goto ldv_44112;
    case 1: 
#line 2637
    hg = drbd_asb_recover_1p(mdev);
#line 2638
    goto ldv_44112;
    case 2: 
#line 2640
    hg = drbd_asb_recover_2p(mdev);
#line 2641
    goto ldv_44112;
    }
    ldv_44112: 
#line 2643
    __x___1 = (long )hg;
#line 2643
    if ((__x___1 < 0L ? - __x___1 : __x___1) <= 99L) {
#line 2644
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2644
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2644
      printk("<4>%s %s: Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
             tmp___11, tmp___10, pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2647
      if (forced != 0) {
#line 2648
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2648
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2648
        printk("<4>%s %s: Doing a full sync, since UUIDs where ambiguous.\n", tmp___13,
               tmp___12);
#line 2650
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2655
  if (hg == -100) {
#line 2656
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2657
      hg = -1;
    } else {

    }
#line 2658
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2659
      hg = 1;
    } else {

    }
#line 2661
    __x___2 = (long )hg;
#line 2661
    if ((__x___2 < 0L ? - __x___2 : __x___2) <= 99L) {
#line 2662
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2662
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2662
      printk("<4>%s %s: Split-Brain detected, manually solved. Sync from %s node\n",
             tmp___15, tmp___14, hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2667
  if (hg == -100) {
#line 2672
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2672
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2672
    printk("<1>%s %s: Split-Brain detected but unresolved, dropping connection!\n",
           tmp___17, tmp___16);
#line 2673
    drbd_khelper(mdev, (char *)"split-brain");
#line 2674
    return (C_MASK);
  } else {

  }
#line 2677
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2678
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2678
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2678
    printk("<3>%s %s: I shall become SyncSource, but I am inconsistent!\n", tmp___19,
           tmp___18);
#line 2679
    return (C_MASK);
  } else {

  }
#line 2682
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) && (int )mdev->state.ldv_33657.disk > 6) {
#line 2684
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2686
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2689
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2689
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2689
    printk("<3>%s %s: I shall become SyncTarget, but I am primary!\n", tmp___21, tmp___20);
#line 2690
    return (C_MASK);
    case 10: 
#line 2692
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2692
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2692
    printk("<4>%s %s: Becoming SyncTarget, violating the stable-dataassumption\n",
           tmp___23, tmp___22);
    }
  } else {

  }
#line 2697
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2697
    goto _L;
  } else {
#line 2697
    tmp___29 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2697
    if (tmp___29 != 0) {
      _L: /* CIL Label */ 
#line 2698
      if (hg == 0) {
#line 2699
        tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2699
        tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2699
        printk("<6>%s %s: dry-run connect: No resync, would become Connected immediately.\n",
               tmp___25, tmp___24);
      } else {
#line 2701
        __x___3 = (long )hg;
#line 2701
        tmp___26 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2701
        tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2701
        tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2701
        printk("<6>%s %s: dry-run connect: Would become %s, doing a %s resync.", tmp___28,
               tmp___27, tmp___26, (__x___3 < 0L ? - __x___3 : __x___3) > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2704
      return (C_MASK);
    } else {

    }
  }
#line 2707
  __x___4 = (long )hg;
#line 2707
  if ((__x___4 < 0L ? - __x___4 : __x___4) > 1L) {
#line 2708
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2708
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2708
    printk("<6>%s %s: Writing the whole bitmap, full sync required after drbd_sync_handshake.\n",
           tmp___31, tmp___30);
#line 2709
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake");
#line 2709
    if (tmp___32 != 0) {
#line 2710
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2713
  if (hg > 0) {
#line 2714
    rv = C_WF_BITMAP_S;
  } else
#line 2715
  if (hg < 0) {
#line 2716
    rv = C_WF_BITMAP_T;
  } else {
#line 2718
    rv = C_CONNECTED;
#line 2719
    tmp___36 = drbd_bm_total_weight(mdev);
#line 2719
    if (tmp___36 != 0UL) {
#line 2720
      tmp___33 = drbd_bm_total_weight(mdev);
#line 2720
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2720
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2720
      printk("<6>%s %s: No resync, but %lu bits in bitmap!\n", tmp___35, tmp___34,
             tmp___33);
    } else {

    }
  }
#line 2725
  return (rv);
}
}
#line 2729 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2732
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2734
    return (0);
  } else {

  }
#line 2737
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2739
    return (1);
  } else {

  }
#line 2742
  if ((unsigned int )peer == (unsigned int )self) {
#line 2743
    return (0);
  } else {

  }
#line 2746
  return (1);
}
}
#line 2749 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_protocol *p ;
  int header_size ;
  int data_size ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  unsigned char *my_alg ;
  int tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  int tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2751
  p = (struct p_protocol *)h;
#line 2755
  p_integrity_alg[0] = '\000';
#line 2755
  tmp = 1U;
#line 2755
  while (1) {
#line 2755
    if (tmp >= 64U) {
#line 2755
      break;
    } else {

    }
#line 2755
    p_integrity_alg[tmp] = (char)0;
#line 2755
    tmp = tmp + 1U;
  }
#line 2757
  header_size = 24;
#line 2758
  data_size = (int )h->length - header_size;
#line 2760
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2760
  if (tmp___0 != header_size) {
#line 2761
    return (0);
  } else {

  }
#line 2763
  tmp___1 = __fswab32(p->protocol);
#line 2763
  p_proto = (int )tmp___1;
#line 2764
  tmp___2 = __fswab32(p->after_sb_0p);
#line 2764
  p_after_sb_0p = (int )tmp___2;
#line 2765
  tmp___3 = __fswab32(p->after_sb_1p);
#line 2765
  p_after_sb_1p = (int )tmp___3;
#line 2766
  tmp___4 = __fswab32(p->after_sb_2p);
#line 2766
  p_after_sb_2p = (int )tmp___4;
#line 2767
  tmp___5 = __fswab32(p->two_primaries);
#line 2767
  p_two_primaries = (int )tmp___5;
#line 2768
  tmp___6 = __fswab32(p->conn_flags);
#line 2768
  cf = (int )tmp___6;
#line 2769
  p_want_lose = cf & 1;
#line 2771
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2773
  if ((cf & 2) != 0) {
#line 2774
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2776
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2777
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2777
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2777
    printk("<3>%s %s: incompatible communication protocols\n", tmp___8, tmp___7);
#line 2778
    goto disconnect;
  } else {

  }
#line 2781
  tmp___11 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2781
  if (tmp___11 != 0) {
#line 2782
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2782
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2782
    printk("<3>%s %s: incompatible after-sb-0pri settings\n", tmp___10, tmp___9);
#line 2783
    goto disconnect;
  } else {

  }
#line 2786
  tmp___14 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2786
  if (tmp___14 != 0) {
#line 2787
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2787
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2787
    printk("<3>%s %s: incompatible after-sb-1pri settings\n", tmp___13, tmp___12);
#line 2788
    goto disconnect;
  } else {

  }
#line 2791
  tmp___17 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2791
  if (tmp___17 != 0) {
#line 2792
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2792
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2792
    printk("<3>%s %s: incompatible after-sb-2pri settings\n", tmp___16, tmp___15);
#line 2793
    goto disconnect;
  } else {

  }
#line 2796
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2797
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2797
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2797
    printk("<3>%s %s: both sides have the \'want_lose\' flag set\n", tmp___19, tmp___18);
#line 2798
    goto disconnect;
  } else {

  }
#line 2801
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2802
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2802
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2802
    printk("<3>%s %s: incompatible setting of the two-primaries options\n", tmp___21,
           tmp___20);
#line 2803
    goto disconnect;
  } else {

  }
#line 2806
  if (mdev->agreed_pro_version > 86) {
#line 2807
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2809
    tmp___22 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2809
    if (tmp___22 != data_size) {
#line 2810
      return (0);
    } else {

    }
#line 2812
    p_integrity_alg[63] = 0;
#line 2813
    tmp___25 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2813
    if (tmp___25 != 0) {
#line 2814
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2814
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2814
      printk("<3>%s %s: incompatible setting of the data-integrity-alg\n", tmp___24,
             tmp___23);
#line 2815
      goto disconnect;
    } else {

    }
#line 2817
    tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2817
    tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2817
    printk("<6>%s %s: data-integrity-alg: %s\n", tmp___27, tmp___26, (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2821
  return (1);
  disconnect: 
#line 2824
  val.i = 0U;
#line 2824
  val.ldv_33657.conn = 1U;
#line 2824
  mask.i = 0U;
#line 2824
  mask.ldv_33657.conn = 31U;
#line 2824
  drbd_force_state(mdev, mask, val);
#line 2825
  return (0);
}
}
#line 2833 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  void *tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;

  {
#line 2838
  if ((int )((signed char )*alg) == 0) {
#line 2839
    return (0);
  } else {

  }
#line 2841
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2842
  tmp___2 = IS_ERR((void const   *)tfm);
#line 2842
  if (tmp___2 != 0L) {
#line 2843
    tmp = PTR_ERR((void const   *)tfm);
#line 2843
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2843
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2843
    printk("<3>%s %s: Can not allocate \"%s\" as %s (reason: %ld)\n", tmp___1, tmp___0,
           alg, name, tmp);
#line 2845
    return (tfm);
  } else {

  }
#line 2847
  tmp___6 = crypto_hash_tfm(tfm);
#line 2847
  tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 2847
  if (tmp___7 == 0) {
#line 2848
    crypto_free_hash(tfm);
#line 2849
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2849
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2849
    printk("<3>%s %s: \"%s\" is not a digest (%s)\n", tmp___4, tmp___3, alg, name);
#line 2850
    tmp___5 = ERR_PTR(-22L);
#line 2850
    return ((struct crypto_hash *)tmp___5);
  } else {

  }
#line 2852
  return (tfm);
}
}
#line 2855 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int ok ;
  struct p_rs_param_89 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  long tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  long tmp___20 ;
  int tmp___21 ;
  size_t tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  size_t tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2857
  ok = 1;
#line 2858
  p = (struct p_rs_param_89 *)h;
#line 2860
  verify_tfm = 0;
#line 2861
  csums_tfm = 0;
#line 2862
  apv = mdev->agreed_pro_version;
#line 2864
  exp_max_sz = apv > 87 ? (apv == 88 ? 76U : 140U) : 12U;
#line 2869
  if ((unsigned int )h->length > exp_max_sz) {
#line 2870
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2870
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2870
    printk("<3>%s %s: SyncParam packet too long: received %u, expected <= %u bytes\n",
           tmp___0, tmp, (int )h->length, exp_max_sz);
#line 2872
    return (0);
  } else {

  }
#line 2875
  if (apv <= 88) {
#line 2876
    header_size = 4U;
#line 2877
    data_size = (unsigned int )h->length - header_size;
  } else {
#line 2879
    header_size = 132U;
#line 2880
    data_size = (unsigned int )h->length - header_size;
#line 2881
    if (data_size != 0U) {
#line 2881
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2881
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2881
      printk("<3>%s %s: ASSERT( data_size == 0 ) in %s:%d\n", tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2881);
    } else {

    }
  }
#line 2885
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2887
  tmp___3 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2887
  if ((unsigned int )tmp___3 != header_size) {
#line 2888
    return (0);
  } else {

  }
#line 2890
  tmp___4 = __fswab32(p->rate);
#line 2890
  mdev->sync_conf.rate = (int )tmp___4;
#line 2892
  if (apv > 87) {
#line 2893
    if (apv == 88) {
#line 2894
      if (data_size > 64U) {
#line 2895
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2895
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2895
        printk("<3>%s %s: verify-alg too long, peer wants %u, accepting only %u byte\n",
               tmp___6, tmp___5, data_size, 64);
#line 2898
        return (0);
      } else {

      }
#line 2901
      tmp___7 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2901
      if ((unsigned int )tmp___7 != data_size) {
#line 2902
        return (0);
      } else {

      }
#line 2906
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2906
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2906
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2906
        printk("<3>%s %s: ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n", tmp___9,
               tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
               2906);
      } else {

      }
#line 2907
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2912
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2912
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2912
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2912
        printk("<3>%s %s: ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
               tmp___11, tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
               2912);
      } else {

      }
#line 2913
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2913
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2913
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2913
        printk("<3>%s %s: ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
               tmp___13, tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
               2913);
      } else {

      }
#line 2914
      p->verify_alg[63] = 0;
#line 2915
      p->csums_alg[63] = 0;
    }
#line 2918
    tmp___17 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2918
    if (tmp___17 != 0) {
#line 2919
      if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 144U) {
#line 2920
        tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2920
        tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2920
        printk("<3>%s %s: Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
               tmp___15, tmp___14, (unsigned char *)(& mdev->sync_conf.verify_alg),
               (char *)(& p->verify_alg));
#line 2922
        goto disconnect;
      } else {

      }
#line 2924
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2926
      tmp___16 = IS_ERR((void const   *)verify_tfm);
#line 2926
      if (tmp___16 != 0L) {
#line 2927
        verify_tfm = 0;
#line 2928
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2932
    if (apv > 88) {
#line 2932
      tmp___21 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2932
      if (tmp___21 != 0) {
#line 2933
        if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 144U) {
#line 2934
          tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2934
          tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2934
          printk("<3>%s %s: Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                 tmp___19, tmp___18, (unsigned char *)(& mdev->sync_conf.csums_alg),
                 (char *)(& p->csums_alg));
#line 2936
          goto disconnect;
        } else {

        }
#line 2938
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2940
        tmp___20 = IS_ERR((void const   *)csums_tfm);
#line 2940
        if (tmp___20 != 0L) {
#line 2941
          csums_tfm = 0;
#line 2942
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2947
    spin_lock(& mdev->peer_seq_lock);
#line 2949
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2950
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2951
      tmp___22 = strlen((char const   *)(& p->verify_alg));
#line 2951
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___22 + 1U);
#line 2952
      crypto_free_hash(mdev->verify_tfm);
#line 2953
      mdev->verify_tfm = verify_tfm;
#line 2954
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2954
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2954
      printk("<6>%s %s: using verify-alg: \"%s\"\n", tmp___24, tmp___23, (char *)(& p->verify_alg));
    } else {

    }
#line 2956
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2957
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2958
      tmp___25 = strlen((char const   *)(& p->csums_alg));
#line 2958
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___25 + 1U);
#line 2959
      crypto_free_hash(mdev->csums_tfm);
#line 2960
      mdev->csums_tfm = csums_tfm;
#line 2961
      tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2961
      tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2961
      printk("<6>%s %s: using csums-alg: \"%s\"\n", tmp___27, tmp___26, (char *)(& p->csums_alg));
    } else {

    }
#line 2963
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2966
  return (ok);
  disconnect: 
#line 2970
  crypto_free_hash(csums_tfm);
#line 2972
  crypto_free_hash(verify_tfm);
#line 2973
  val.i = 0U;
#line 2973
  val.ldv_33657.conn = 1U;
#line 2973
  mask.i = 0U;
#line 2973
  mask.ldv_33657.conn = 31U;
#line 2973
  drbd_force_state(mdev, mask, val);
#line 2974
  return (0);
}
}
#line 2977 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setup_order_type(struct drbd_conf *mdev , int peer ) 
{ 


  {
#line 2979
  return;
}
}
#line 2984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 2988
  if (a == 0UL || b == 0UL) {
#line 2989
    return;
  } else {

  }
#line 2990
  d = a > b ? a - b : b - a;
#line 2991
  if (a >> 3 < d || b >> 3 < d) {
#line 2992
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2992
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2992
    printk("<4>%s %s: Considerable difference in %s: %llus vs. %llus\n", tmp___0,
           tmp, s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2993
  return;
}
}
#line 2996 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  unsigned int max_seg_s ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___6 ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  __u16 tmp___15 ;
  int tmp___16 ;
  sector_t tmp___17 ;
  __u32 tmp___18 ;
  unsigned int tmp___19 ;
  __u16 tmp___20 ;
  int tmp___21 ;
  __u64 tmp___22 ;
  sector_t tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;

  {
#line 2998
  p = (struct p_sizes *)h;
#line 2999
  dd = 0;
#line 3002
  ldsc = 0;
#line 3005
  _b = (unsigned int )h->length != 32U;
#line 3005
  if (_b != 0) {
#line 3005
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3005
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3005
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_sizes", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3005);
  } else {

  }
#line 3005
  if (_b != 0) {
#line 3005
    return (0);
  } else {

  }
#line 3006
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3006
  if (tmp___1 != (int )h->length) {
#line 3007
    return (0);
  } else {

  }
#line 3009
  tmp___2 = __fswab64(p->d_size);
#line 3009
  p_size = (sector_t )tmp___2;
#line 3010
  tmp___3 = __fswab64(p->u_size);
#line 3010
  p_usize = (sector_t )tmp___3;
#line 3012
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 2013UL) == 0U) {
#line 3013
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3013
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3013
    printk("<3>%s %s: some backing storage is needed\n", tmp___5, tmp___4);
#line 3014
    val.i = 0U;
#line 3014
    val.ldv_33657.conn = 1U;
#line 3014
    mask.i = 0U;
#line 3014
    mask.ldv_33657.conn = 31U;
#line 3014
    drbd_force_state(mdev, mask, val);
#line 3015
    return (0);
  } else {

  }
#line 3020
  mdev->p_size = p_size;
#line 3023
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3023
  if (tmp___14 != 0) {
#line 3024
    tmp___6 = drbd_get_max_capacity(mdev->ldev);
#line 3024
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___6);
#line 3026
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 3031
    if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 144U) {
#line 3032
      if ((unsigned long )(mdev->ldev)->dc.disk_size != 0UL) {
#line 3032
        if (p_usize == 0UL) {
#line 3032
          tmp___7 = (unsigned long )(mdev->ldev)->dc.disk_size;
        } else {
#line 3032
          _min1 = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 3032
          _min2 = p_usize;
#line 3032
          tmp___7 = _min1 < _min2 ? _min1 : _min2;
        }
#line 3032
        p_usize = tmp___7;
      } else {
#line 3032
        p_usize = p_usize;
      }
    } else {

    }
#line 3035
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 3037
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 3038
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 3039
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3039
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3039
      printk("<6>%s %s: Peer sets u_size to %lu sectors\n", tmp___9, tmp___8, (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 3045
    tmp___12 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 3045
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3045
    if ((tmp___12 < tmp___13 && (int )mdev->state.ldv_33657.disk > 4) && (int )mdev->state.ldv_33657.conn <= 9) {
#line 3049
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3049
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3049
      printk("<3>%s %s: The peer\'s disk size is too small!\n", tmp___11, tmp___10);
#line 3050
      val___0.i = 0U;
#line 3050
      val___0.ldv_33657.conn = 1U;
#line 3050
      mask___0.i = 0U;
#line 3050
      mask___0.ldv_33657.conn = 31U;
#line 3050
      drbd_force_state(mdev, mask___0, val___0);
#line 3051
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 3052
      put_ldev(mdev);
#line 3053
      return (0);
    } else {

    }
#line 3055
    put_ldev(mdev);
  } else {

  }
#line 3059
  tmp___15 = __fswab16((int )p->dds_flags);
#line 3059
  ddsf = (enum dds_flags )tmp___15;
#line 3060
  tmp___16 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3060
  if (tmp___16 != 0) {
#line 3061
    dd = drbd_determin_dev_size(mdev, ddsf);
#line 3062
    put_ldev(mdev);
#line 3063
    if ((int )dd == -1) {
#line 3064
      return (0);
    } else {

    }
#line 3065
    drbd_md_sync(mdev);
  } else {
#line 3068
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3071
  tmp___21 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3071
  if (tmp___21 != 0) {
#line 3072
    tmp___17 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3072
    if ((mdev->ldev)->known_size != tmp___17) {
#line 3073
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3074
      ldsc = 1;
    } else {

    }
#line 3077
    if (mdev->agreed_pro_version <= 93) {
#line 3078
      tmp___18 = __fswab32(p->max_segment_size);
#line 3078
      max_seg_s = tmp___18;
    } else {
#line 3080
      max_seg_s = 32768U;
    }
#line 3082
    tmp___19 = queue_max_segment_size(mdev->rq_queue);
#line 3082
    if (tmp___19 != max_seg_s) {
#line 3083
      drbd_setup_queue_param(mdev, max_seg_s);
    } else {

    }
#line 3085
    tmp___20 = __fswab16((int )p->queue_order_type);
#line 3085
    drbd_setup_order_type(mdev, (int )tmp___20);
#line 3086
    put_ldev(mdev);
  } else {

  }
#line 3089
  if ((int )mdev->state.ldv_33657.conn > 9) {
#line 3090
    tmp___22 = __fswab64(p->c_size);
#line 3090
    tmp___23 = drbd_get_capacity(mdev->this_bdev);
#line 3090
    if (tmp___22 != (unsigned long long )tmp___23 || ldsc != 0) {
#line 3094
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3096
    tmp___26 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3096
    if (tmp___26 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 1006UL) == 160U)) {
#line 3098
      if ((int )mdev->state.ldv_33657.pdsk > 3 && (int )mdev->state.ldv_33657.disk > 3) {
#line 3100
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3101
          tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3101
          tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3101
          printk("<6>%s %s: Resync of new storage suppressed with --assume-clean\n",
                 tmp___25, tmp___24);
        } else {
#line 3103
          resync_after_online_grow(mdev);
        }
      } else {
#line 3105
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3109
  return (1);
}
}
#line 3112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  union drbd_state __ns ;
  int tmp___8 ;
  int tmp___9 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___10 ;
  int tmp___11 ;

  {
#line 3114
  p = (struct p_uuids *)h;
#line 3118
  _b = (unsigned int )h->length != 48U;
#line 3118
  if (_b != 0) {
#line 3118
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3118
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3118
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_uuids", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3118);
  } else {

  }
#line 3118
  if (_b != 0) {
#line 3118
    return (0);
  } else {

  }
#line 3119
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3119
  if (tmp___1 != (int )h->length) {
#line 3120
    return (0);
  } else {

  }
#line 3122
  tmp___2 = kmalloc___1(48UL, 16U);
#line 3122
  p_uuid = (u64 *)tmp___2;
#line 3124
  i = 0;
#line 3124
  goto ldv_44222;
  ldv_44221: 
#line 3125
  tmp___3 = __fswab64(p->uuid[i]);
#line 3125
  *(p_uuid + (unsigned long )i) = tmp___3;
#line 3124
  i = i + 1;
  ldv_44222: ;
#line 3124
  if (i <= 5) {
#line 3125
    goto ldv_44221;
  } else {

  }
#line 3127
  kfree((void const   *)mdev->p_uuid);
#line 3128
  mdev->p_uuid = p_uuid;
#line 3130
  if ((((int )mdev->state.ldv_33657.conn <= 9 && (int )mdev->state.ldv_33657.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3134
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3134
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3134
    printk("<3>%s %s: Can only connect to data with current UUID=%016llX\n", tmp___5,
           tmp___4, mdev->ed_uuid);
#line 3136
    val.i = 0U;
#line 3136
    val.ldv_33657.conn = 1U;
#line 3136
    mask.i = 0U;
#line 3136
    mask.ldv_33657.conn = 31U;
#line 3136
    drbd_force_state(mdev, mask, val);
#line 3137
    return (0);
  } else {

  }
#line 3140
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3140
  if (tmp___8 != 0) {
#line 3141
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3146
    if (skip_initial_sync != 0) {
#line 3147
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3147
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3147
      printk("<6>%s %s: Accepted new current UUID, preparing to skip initial sync\n",
             tmp___7, tmp___6);
#line 3148
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids");
#line 3150
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3151
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3152
      __ns.i = mdev->state.i;
#line 3152
      __ns.ldv_33657.disk = 8U;
#line 3152
      __ns.ldv_33657.pdsk = 8U;
#line 3152
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3154
      drbd_md_sync(mdev);
    } else {

    }
#line 3156
    put_ldev(mdev);
  } else {

  }
#line 3163
  tmp___9 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3163
  if (tmp___9 == 0) {
#line 3163
    goto ldv_44231;
  } else {

  }
#line 3163
  tmp___10 = get_current();
#line 3163
  __wait.flags = 0U;
#line 3163
  __wait.private = (void *)tmp___10;
#line 3163
  __wait.func = & autoremove_wake_function;
#line 3163
  __wait.task_list.next = & __wait.task_list;
#line 3163
  __wait.task_list.prev = & __wait.task_list;
  ldv_44234: 
#line 3163
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3163
  tmp___11 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3163
  if (tmp___11 == 0) {
#line 3163
    goto ldv_44233;
  } else {

  }
#line 3163
  schedule();
#line 3163
  goto ldv_44234;
  ldv_44233: 
#line 3163
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44231: ;
#line 3164
  if ((int )mdev->state.ldv_33657.conn > 9 && (int )mdev->state.ldv_33657.disk <= 3) {
#line 3165
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3167
  return (1);
}
}
#line 3174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3178
  c_tab[0] = 0;
#line 3178
  c_tab[1] = C_TEAR_DOWN;
#line 3178
  c_tab[2] = 0;
#line 3178
  c_tab[3] = 0;
#line 3178
  c_tab[4] = 0;
#line 3178
  c_tab[5] = 0;
#line 3178
  c_tab[6] = 0;
#line 3178
  c_tab[7] = 0;
#line 3178
  c_tab[8] = 0;
#line 3178
  c_tab[9] = 0;
#line 3178
  c_tab[10] = C_CONNECTED;
#line 3178
  c_tab[11] = C_STARTING_SYNC_T;
#line 3178
  c_tab[12] = C_STARTING_SYNC_S;
#line 3178
  c_tab[13] = 0;
#line 3178
  c_tab[14] = 0;
#line 3178
  c_tab[15] = 0;
#line 3178
  c_tab[16] = 0;
#line 3178
  c_tab[17] = 0;
#line 3178
  c_tab[18] = C_VERIFY_T;
#line 3178
  c_tab[19] = 0;
#line 3178
  c_tab[20] = 0;
#line 3178
  c_tab[21] = 0;
#line 3178
  c_tab[22] = 0;
#line 3178
  c_tab[23] = 0;
#line 3178
  c_tab[24] = 0;
#line 3178
  c_tab[25] = 0;
#line 3178
  c_tab[26] = 0;
#line 3178
  c_tab[27] = 0;
#line 3178
  c_tab[28] = 0;
#line 3178
  c_tab[29] = 0;
#line 3178
  c_tab[30] = 0;
#line 3178
  c_tab[31] = C_MASK;
#line 3188
  ms.i = ps.i;
#line 3190
  ms.ldv_33657.conn = (unsigned char )c_tab[(int )ps.ldv_33657.conn];
#line 3191
  ms.ldv_33657.peer = ps.ldv_33657.role;
#line 3192
  ms.ldv_33657.role = ps.ldv_33657.peer;
#line 3193
  ms.ldv_33657.pdsk = ps.ldv_33657.disk;
#line 3194
  ms.ldv_33657.disk = ps.ldv_33657.pdsk;
#line 3195
  ms.ldv_33657.peer_isp = (unsigned char )((int )ps.ldv_33657.aftr_isp | (int )ps.ldv_33657.user_isp);
#line 3197
  return (ms);
}
}
#line 3200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  int rv ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3202
  p = (struct p_req_state *)h;
#line 3206
  _b = (unsigned int )h->length != 8U;
#line 3206
  if (_b != 0) {
#line 3206
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3206
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3206
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_req_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3206);
  } else {

  }
#line 3206
  if (_b != 0) {
#line 3206
    return (0);
  } else {

  }
#line 3207
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3207
  if (tmp___1 != (int )h->length) {
#line 3208
    return (0);
  } else {

  }
#line 3210
  tmp___2 = __fswab32(p->mask);
#line 3210
  mask.i = tmp___2;
#line 3211
  tmp___3 = __fswab32(p->val);
#line 3211
  val.i = tmp___3;
#line 3213
  tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3213
  if (tmp___4 != 0) {
#line 3213
    tmp___5 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3213
    if (tmp___5 != 0) {
#line 3215
      drbd_send_sr_reply(mdev, -19);
#line 3216
      return (1);
    } else {

    }
  } else {

  }
#line 3219
  mask = convert_state(mask);
#line 3220
  val = convert_state(val);
#line 3222
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3224
  drbd_send_sr_reply(mdev, rv);
#line 3225
  drbd_md_sync(mdev);
#line 3227
  return (1);
}
}
#line 3230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_state *p ;
  enum drbd_conns nconn ;
  enum drbd_conns oconn ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  int rv ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int cr ;
  int tmp___6 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___12 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 3232
  p = (struct p_state *)h;
#line 3238
  _b = (unsigned int )h->length != 4U;
#line 3238
  if (_b != 0) {
#line 3238
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3238
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3238
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3238);
  } else {

  }
#line 3238
  if (_b != 0) {
#line 3239
    return (0);
  } else {

  }
#line 3241
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3241
  if (tmp___1 != (int )h->length) {
#line 3242
    return (0);
  } else {

  }
#line 3244
  tmp___2 = __fswab32(p->state);
#line 3244
  peer_state.i = tmp___2;
#line 3246
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_33657.disk;
#line 3247
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3248
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3249
    tmp___3 = drbd_disk_str(real_peer_disk);
#line 3249
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3249
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3249
    printk("<6>%s %s: real peer disk state = %s\n", tmp___5, tmp___4, tmp___3);
  } else {

  }
#line 3252
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3254
  nconn = (enum drbd_conns )mdev->state.ldv_33657.conn;
#line 3254
  oconn = nconn;
#line 3255
  spin_unlock_irq(& mdev->req_lock);
#line 3257
  if ((unsigned int )nconn == 9U) {
#line 3258
    nconn = C_CONNECTED;
  } else {

  }
#line 3260
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_33657.disk > 2) {
#line 3260
    tmp___12 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3260
    if (tmp___12 != 0) {
#line 3265
      cr = (unsigned int )oconn <= 9U;
#line 3268
      cr = ((unsigned int )oconn == 10U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)mdev + 2013UL) == 6U)) | cr;
#line 3273
      tmp___6 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 3273
      cr = tmp___6 | cr;
#line 3276
      cr = ((unsigned int )oconn == 10U && ((int )peer_state.ldv_33657.conn > 10 && (int )peer_state.ldv_33657.conn <= 14)) | cr;
#line 3280
      if (cr != 0) {
#line 3281
        nconn = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_33657.role,
                                    real_peer_disk);
      } else {

      }
#line 3283
      put_ldev(mdev);
#line 3284
      if ((unsigned int )nconn == 31U) {
#line 3285
        nconn = C_CONNECTED;
#line 3286
        if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 6U) {
#line 3287
          val.i = 0U;
#line 3287
          val.ldv_33657.disk = 0U;
#line 3287
          mask.i = 0U;
#line 3287
          mask.ldv_33657.disk = 15U;
#line 3287
          drbd_force_state(mdev, mask, val);
        } else
#line 3288
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3289
          tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3289
          tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3289
          printk("<3>%s %s: Disk attach process on the peer node was aborted.\n",
                 tmp___8, tmp___7);
#line 3290
          peer_state.ldv_33657.disk = 0U;
#line 3291
          real_peer_disk = D_DISKLESS;
        } else {
#line 3293
          tmp___9 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3293
          if (tmp___9 != 0) {
#line 3294
            return (0);
          } else {

          }
#line 3295
          if ((unsigned int )oconn != 9U) {
#line 3295
            tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3295
            tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3295
            printk("<3>%s %s: ASSERT( oconn == C_WF_REPORT_PARAMS ) in %s:%d\n", tmp___11,
                   tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                   3295);
          } else {

          }
#line 3296
          val___0.i = 0U;
#line 3296
          val___0.ldv_33657.conn = 1U;
#line 3296
          mask___0.i = 0U;
#line 3296
          mask___0.ldv_33657.conn = 31U;
#line 3296
          drbd_force_state(mdev, mask___0, val___0);
#line 3297
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3302
  spin_lock_irq(& mdev->req_lock);
#line 3303
  if ((unsigned int )mdev->state.ldv_33657.conn != (unsigned int )oconn) {
#line 3304
    goto retry;
  } else {

  }
#line 3305
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 3306
  ns.i = mdev->state.i;
#line 3307
  ns.ldv_33657.conn = (unsigned char )nconn;
#line 3308
  ns.ldv_33657.peer = peer_state.ldv_33657.role;
#line 3309
  ns.ldv_33657.pdsk = (unsigned char )real_peer_disk;
#line 3310
  ns.ldv_33657.peer_isp = (unsigned char )((int )peer_state.ldv_33657.aftr_isp | (int )peer_state.ldv_33657.user_isp);
#line 3311
  if (((unsigned int )nconn == 10U || (unsigned int )nconn == 13U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3312
    ns.ldv_33657.disk = mdev->new_state_tmp.ldv_33657.disk;
  } else {

  }
#line 3314
  rv = _drbd_set_state(mdev, ns, 3, 0);
#line 3315
  ns = mdev->state;
#line 3316
  spin_unlock_irq(& mdev->req_lock);
#line 3318
  if (rv <= 0) {
#line 3319
    val___1.i = 0U;
#line 3319
    val___1.ldv_33657.conn = 1U;
#line 3319
    mask___1.i = 0U;
#line 3319
    mask___1.ldv_33657.conn = 31U;
#line 3319
    drbd_force_state(mdev, mask___1, val___1);
#line 3320
    return (0);
  } else {

  }
#line 3323
  if ((unsigned int )oconn > 9U) {
#line 3324
    if (((unsigned int )nconn > 10U && (int )peer_state.ldv_33657.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3329
      drbd_send_uuids(mdev);
#line 3330
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3334
  (mdev->net_conf)->want_lose = 0U;
#line 3336
  drbd_md_sync(mdev);
#line 3338
  return (1);
}
}
#line 3341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int _b ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 3343
  p = (struct p_rs_uuid *)h;
#line 3345
  if (((unsigned int )*((unsigned short *)mdev + 1006UL) == 240U || (int )mdev->state.ldv_33657.conn <= 9) || (int )mdev->state.ldv_33657.disk <= 2) {
#line 3345
    goto ldv_44284;
  } else {

  }
#line 3345
  tmp = get_current();
#line 3345
  __wait.flags = 0U;
#line 3345
  __wait.private = (void *)tmp;
#line 3345
  __wait.func = & autoremove_wake_function;
#line 3345
  __wait.task_list.next = & __wait.task_list;
#line 3345
  __wait.task_list.prev = & __wait.task_list;
  ldv_44287: 
#line 3345
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3345
  if (((unsigned int )*((unsigned short *)mdev + 1006UL) == 240U || (int )mdev->state.ldv_33657.conn <= 9) || (int )mdev->state.ldv_33657.disk <= 2) {
#line 3345
    goto ldv_44286;
  } else {

  }
#line 3345
  schedule();
#line 3345
  goto ldv_44287;
  ldv_44286: 
#line 3345
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44284: 
#line 3352
  _b = (unsigned int )h->length != 8U;
#line 3352
  if (_b != 0) {
#line 3352
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3352
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3352
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "receive_sync_uuid",
           (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3352);
  } else {

  }
#line 3352
  if (_b != 0) {
#line 3352
    return (0);
  } else {

  }
#line 3353
  tmp___2 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3353
  if (tmp___2 != (int )h->length) {
#line 3354
    return (0);
  } else {

  }
#line 3358
  tmp___6 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3358
  if (tmp___6 != 0) {
#line 3359
    tmp___3 = __fswab64(p->uuid);
#line 3359
    _drbd_uuid_set(mdev, 0, tmp___3);
#line 3360
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3362
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3364
    put_ldev(mdev);
  } else {
#line 3366
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3366
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3366
    printk("<3>%s %s: Ignoring SyncUUID packet!\n", tmp___5, tmp___4);
  }
#line 3368
  return (1);
}
}
#line 3374 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret receive_bitmap_plain(struct drbd_conf *mdev , struct p_header *h ,
                                                    unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3377
  __min1 = 511UL;
#line 3377
  __min2 = c->bm_words - c->word_offset;
#line 3377
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3378
  want = num_words * 8U;
#line 3380
  if ((unsigned int )h->length != want) {
#line 3381
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3381
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3381
    printk("<3>%s %s: %s:want (%u) != h->length (%u)\n", tmp___0, tmp, "receive_bitmap_plain",
           want, (int )h->length);
#line 3382
    return (FAILED);
  } else {

  }
#line 3384
  if (want == 0U) {
#line 3385
    return (DONE);
  } else {

  }
#line 3386
  tmp___1 = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3386
  if ((unsigned int )tmp___1 != want) {
#line 3387
    return (FAILED);
  } else {

  }
#line 3389
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3391
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3392
  c->bit_offset = c->word_offset * 64UL;
#line 3393
  if (c->bit_offset > c->bm_bits) {
#line 3394
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3396
  return (OK);
}
}
#line 3400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                                struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  int toggle ;
  int tmp___0 ;
  int have ;
  int bits ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 3408
  s = c->bit_offset;
#line 3410
  len = (int )((unsigned int )p->head.length - 1U);
#line 3411
  tmp___0 = DCBP_get_start(p);
#line 3411
  toggle = tmp___0;
#line 3415
  tmp___1 = DCBP_get_pad_bits(p);
#line 3415
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___1);
#line 3417
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3418
  if (bits < 0) {
#line 3419
    return (FAILED);
  } else {

  }
#line 3421
  have = bits;
#line 3421
  goto ldv_44323;
  ldv_44322: 
#line 3422
  bits = vli_decode_bits(& rl, look_ahead);
#line 3423
  if (bits <= 0) {
#line 3424
    return (FAILED);
  } else {

  }
#line 3426
  if (toggle != 0) {
#line 3427
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3428
    if (c->bm_bits <= e) {
#line 3429
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3429
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3429
      printk("<3>%s %s: bitmap overflow (e:%lu) while decoding bm RLE packet\n", tmp___3,
             tmp___2, e);
#line 3430
      return (FAILED);
    } else {

    }
#line 3432
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3435
  if (have < bits) {
#line 3436
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3436
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3436
    printk("<3>%s %s: bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n", tmp___5,
           tmp___4, have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
           (unsigned int )bs.buf_len);
#line 3440
    return (FAILED);
  } else {

  }
#line 3442
  look_ahead = look_ahead >> bits;
#line 3443
  have = have - bits;
#line 3445
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3446
  if (bits < 0) {
#line 3447
    return (FAILED);
  } else {

  }
#line 3448
  look_ahead = (tmp << have) | look_ahead;
#line 3449
  have = have + bits;
#line 3421
  s = (unsigned long )((unsigned long long )s + rl);
#line 3421
  toggle = toggle == 0;
  ldv_44323: ;
#line 3421
  if (have > 0) {
#line 3422
    goto ldv_44322;
  } else {

  }
#line 3452
  c->bit_offset = s;
#line 3453
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3455
  return (c->bm_bits == s);
}
}
#line 3459 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                               struct bm_xfer_ctx *c ) 
{ 
  enum receive_bitmap_ret tmp ;
  enum drbd_bitmap_code tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3463
  tmp___0 = DCBP_get_code(p);
#line 3463
  if ((unsigned int )tmp___0 == 2U) {
#line 3464
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3464
    return (tmp);
  } else {

  }
#line 3470
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3470
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3470
  printk("<3>%s %s: receive_bitmap_c: unknown encoding %u\n", tmp___2, tmp___1, (int )p->encoding);
#line 3471
  val.i = 0U;
#line 3471
  val.ldv_33657.conn = 6U;
#line 3471
  mask.i = 0U;
#line 3471
  mask.ldv_33657.conn = 31U;
#line 3471
  drbd_force_state(mdev, mask, val);
#line 3472
  return (FAILED);
}
}
#line 3475 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3479
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3482
  total = c->bytes[0] + c->bytes[1];
#line 3486
  if (total == 0U) {
#line 3487
    return;
  } else {

  }
#line 3490
  if (total >= plain) {
#line 3491
    return;
  } else {

  }
#line 3494
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3497
  if (r > 1000U) {
#line 3498
    r = 1000U;
  } else {

  }
#line 3500
  r = 1000U - r;
#line 3501
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3501
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3501
  printk("<6>%s %s: %s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
         tmp___0, tmp, direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0],
         total, r / 10U, r % 10U);
#line 3502
  return;
}
}
#line 3517 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  enum receive_bitmap_ret ret ;
  int ok ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___5 ;
  size_t tmp___6 ;
  struct p_compressed_bm *p ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  size_t __len ;
  void *__ret ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;

  {
#line 3522
  ok = 0;
#line 3524
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3524
  if (tmp == 0) {
#line 3524
    goto ldv_44350;
  } else {

  }
#line 3524
  tmp___0 = get_current();
#line 3524
  __wait.flags = 0U;
#line 3524
  __wait.private = (void *)tmp___0;
#line 3524
  __wait.func = & autoremove_wake_function;
#line 3524
  __wait.task_list.next = & __wait.task_list;
#line 3524
  __wait.task_list.prev = & __wait.task_list;
  ldv_44353: 
#line 3524
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3524
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3524
  if (tmp___1 == 0) {
#line 3524
    goto ldv_44352;
  } else {

  }
#line 3524
  schedule();
#line 3524
  goto ldv_44353;
  ldv_44352: 
#line 3524
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44350: 
#line 3526
  drbd_bm_lock(mdev, (char *)"receive bitmap");
#line 3530
  tmp___2 = __get_free_pages(16U, 0U);
#line 3530
  buffer = (void *)tmp___2;
#line 3531
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3532
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3532
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3532
    printk("<3>%s %s: failed to allocate one page buffer in %s\n", tmp___4, tmp___3,
           "receive_bitmap");
#line 3533
    goto out;
  } else {

  }
#line 3536
  tmp___5 = drbd_bm_bits(mdev);
#line 3536
  tmp___6 = drbd_bm_words(mdev);
#line 3536
  __constr_expr_0.bm_bits = tmp___5;
#line 3536
  __constr_expr_0.bm_words = tmp___6;
#line 3536
  __constr_expr_0.bit_offset = 0UL;
#line 3536
  __constr_expr_0.word_offset = 0UL;
#line 3536
  __constr_expr_0.packets[0] = 0U;
#line 3536
  __constr_expr_0.packets[1] = 0U;
#line 3536
  __constr_expr_0.bytes[0] = 0U;
#line 3536
  __constr_expr_0.bytes[1] = 0U;
#line 3536
  c = __constr_expr_0;
  ldv_44362: ;
#line 3542
  if ((unsigned int )h->command == 4U) {
#line 3543
    ret = receive_bitmap_plain(mdev, h, (unsigned long *)buffer, & c);
  } else
#line 3544
  if ((unsigned int )h->command == 36U) {
#line 3549
    if ((unsigned int )h->length > 4088U) {
#line 3550
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3550
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3550
      printk("<3>%s %s: ReportCBitmap packet too large\n", tmp___8, tmp___7);
#line 3551
      goto out;
    } else {

    }
#line 3554
    p = (struct p_compressed_bm *)buffer;
#line 3555
    __len = 8UL;
#line 3555
    if (__len > 63UL) {
#line 3555
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3555
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3556
    tmp___9 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )h->length);
#line 3556
    if (tmp___9 != (int )h->length) {
#line 3557
      goto out;
    } else {

    }
#line 3558
    if ((unsigned int )p->head.length <= 1U) {
#line 3559
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3559
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3559
      printk("<3>%s %s: ReportCBitmap packet too small (l:%u)\n", tmp___11, tmp___10,
             (int )p->head.length);
#line 3560
      return (2);
    } else {

    }
#line 3562
    ret = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3564
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3564
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3564
    printk("<4>%s %s: receive_bitmap: h->command neither ReportBitMap nor ReportCBitMap (is 0x%x)",
           tmp___13, tmp___12, (int )h->command);
#line 3565
    goto out;
  }
#line 3568
  c.packets[(unsigned int )h->command == 4U] = c.packets[(unsigned int )h->command == 4U] + 1U;
#line 3569
  c.bytes[(unsigned int )h->command == 4U] = (c.bytes[(unsigned int )h->command == 4U] + (unsigned int )h->length) + 8U;
#line 3571
  if ((unsigned int )ret != 0U) {
#line 3572
    goto ldv_44361;
  } else {

  }
#line 3574
  tmp___14 = drbd_recv_header(mdev, h);
#line 3574
  if (tmp___14 == 0) {
#line 3575
    goto out;
  } else {

  }
#line 3576
  if ((unsigned int )ret == 0U) {
#line 3577
    goto ldv_44362;
  } else {

  }
  ldv_44361: ;
#line 3577
  if ((unsigned int )ret == 2U) {
#line 3578
    goto out;
  } else {

  }
#line 3580
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3582
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 224U) {
#line 3583
    tmp___15 = drbd_send_bitmap(mdev);
#line 3583
    ok = tmp___15 == 0;
#line 3584
    if (ok == 0) {
#line 3585
      goto out;
    } else {

    }
#line 3587
    val.i = 0U;
#line 3587
    val.ldv_33657.conn = 15U;
#line 3587
    mask.i = 0U;
#line 3587
    mask.ldv_33657.conn = 31U;
#line 3587
    ok = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3588
    if (ok != 1) {
#line 3588
      tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3588
      tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3588
      printk("<3>%s %s: ASSERT( ok == SS_SUCCESS ) in %s:%d\n", tmp___17, tmp___16,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             3588);
    } else {

    }
  } else
#line 3589
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 208U) {
#line 3592
    tmp___18 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33657.conn);
#line 3592
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3592
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3592
    printk("<6>%s %s: unexpected cstate (%s) in receive_bitmap\n", tmp___20, tmp___19,
           tmp___18);
  } else {

  }
#line 3596
  ok = 1;
  out: 
#line 3598
  drbd_bm_unlock(mdev);
#line 3599
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 1006UL) == 208U) {
#line 3600
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3601
  free_pages((unsigned long )buffer, 0U);
#line 3602
  return (ok);
}
}
#line 3605 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int __min1 ;
  int __min2 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 3611
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3611
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3611
  printk("<4>%s %s: skipping unknown optional packet type %d, l: %d!\n", tmp___0,
         tmp, (int )h->command, (int )h->length);
#line 3614
  size = (int )h->length;
#line 3615
  goto ldv_44383;
  ldv_44382: 
#line 3616
  __min1 = size;
#line 3616
  __min2 = 128;
#line 3616
  want = __min1 < __min2 ? __min1 : __min2;
#line 3617
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3618
  _b = r <= 0;
#line 3618
  if (_b != 0) {
#line 3618
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3618
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3618
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "receive_skip", (char *)"r <= 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3618);
  } else {

  }
#line 3618
  if (_b != 0) {
#line 3618
    goto ldv_44381;
  } else {

  }
#line 3619
  size = size - r;
  ldv_44383: ;
#line 3615
  if (size > 0) {
#line 3616
    goto ldv_44382;
  } else {

  }
  ldv_44381: ;
#line 3621
  return (size == 0);
}
}
#line 3624 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , struct p_header *h ) 
{ 


  {
#line 3626
  if ((int )mdev->state.ldv_33657.disk > 3) {
#line 3627
    drbd_kick_lo(mdev);
  } else {

  }
#line 3631
  drbd_tcp_quickack(mdev->data.socket);
#line 3633
  return (1);
}
}
#line 3636 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void timeval_sub_us(struct timeval *tv , unsigned int us ) 
{ 


  {
#line 3638
  tv->tv_sec = tv->tv_sec - (__kernel_time_t )(us / 1000000U);
#line 3639
  us = us % 1000000U;
#line 3640
  if (tv->tv_usec > (__kernel_suseconds_t )us) {
#line 3641
    tv->tv_usec = tv->tv_usec + 1000000L;
#line 3642
    tv->tv_sec = tv->tv_sec - (__kernel_time_t )1;
  } else {

  }
#line 3644
  tv->tv_usec = tv->tv_usec - (__kernel_suseconds_t )us;
#line 3645
  return;
}
}
#line 3647 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void got_delay_probe(struct drbd_conf *mdev , int from , struct p_delay_probe *p ) 
{ 
  struct delay_probe *dp ;
  struct list_head *le ;
  struct timeval now ;
  int seq_num ;
  int offset ;
  int data_delay ;
  __u32 tmp ;
  __u32 tmp___0 ;
  struct list_head  const  *__mptr ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 3656
  tmp = __fswab32(p->seq_num);
#line 3656
  seq_num = (int )tmp;
#line 3657
  tmp___0 = __fswab32(p->offset);
#line 3657
  offset = (int )tmp___0;
#line 3659
  spin_lock(& mdev->peer_seq_lock);
#line 3660
  tmp___3 = list_empty((struct list_head  const  *)(& mdev->delay_probes));
#line 3660
  if (tmp___3 == 0) {
#line 3661
    if (from == 1) {
#line 3662
      le = mdev->delay_probes.next;
    } else {
#line 3664
      le = mdev->delay_probes.prev;
    }
#line 3666
    __mptr = (struct list_head  const  *)le;
#line 3666
    dp = (struct delay_probe *)__mptr;
#line 3668
    if (dp->seq_num == (unsigned int )seq_num) {
#line 3669
      list_del(le);
#line 3670
      spin_unlock(& mdev->peer_seq_lock);
#line 3671
      do_gettimeofday(& now);
#line 3672
      timeval_sub_us(& now, (unsigned int )offset);
#line 3673
      data_delay = (int )(((unsigned int )now.tv_usec - (unsigned int )dp->time.tv_usec) + (unsigned int )(now.tv_sec - dp->time.tv_sec) * 1000000U);
#line 3677
      if (data_delay > 0) {
#line 3678
        mdev->data_delay = data_delay;
      } else {

      }
#line 3680
      kfree((void const   *)dp);
#line 3681
      return;
    } else {

    }
#line 3684
    if (dp->seq_num > (unsigned int )seq_num) {
#line 3685
      spin_unlock(& mdev->peer_seq_lock);
#line 3686
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3686
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3686
      printk("<4>%s %s: Previous allocation failure of struct delay_probe?\n", tmp___2,
             tmp___1);
#line 3687
      return;
    } else {

    }
  } else {

  }
#line 3690
  spin_unlock(& mdev->peer_seq_lock);
#line 3692
  tmp___4 = kmalloc___1(40UL, 16U);
#line 3692
  dp = (struct delay_probe *)tmp___4;
#line 3693
  if ((unsigned long )dp == (unsigned long )((struct delay_probe *)0)) {
#line 3694
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3694
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3694
    printk("<4>%s %s: Failed to allocate a struct delay_probe, do not worry.\n", tmp___6,
           tmp___5);
#line 3695
    return;
  } else {

  }
#line 3698
  dp->seq_num = (unsigned int )seq_num;
#line 3699
  do_gettimeofday(& dp->time);
#line 3700
  timeval_sub_us(& dp->time, (unsigned int )offset);
#line 3702
  spin_lock(& mdev->peer_seq_lock);
#line 3703
  if (from == 1) {
#line 3704
    list_add(& dp->list, & mdev->delay_probes);
  } else {
#line 3706
    list_add_tail(& dp->list, & mdev->delay_probes);
  }
#line 3707
  spin_unlock(& mdev->peer_seq_lock);
#line 3708
  return;
}
}
#line 3710 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_delay_probe(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_delay_probe *p ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3712
  p = (struct p_delay_probe *)h;
#line 3714
  _b = (unsigned int )h->length != 8U;
#line 3714
  if (_b != 0) {
#line 3714
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3714
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3714
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_delay_probe", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3714);
  } else {

  }
#line 3714
  if (_b != 0) {
#line 3714
    return (0);
  } else {

  }
#line 3715
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3715
  if (tmp___1 != (int )h->length) {
#line 3716
    return (0);
  } else {

  }
#line 3718
  got_delay_probe(mdev, 1, p);
#line 3719
  return (1);
}
}
#line 3724 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f drbd_default_handler[41U]  = 
#line 3724
  {      & receive_Data,      & receive_DataReply,      & receive_RSDataReply,      & receive_Barrier, 
        & receive_bitmap,      0,      0,      & receive_UnplugRemote, 
        & receive_DataRequest,      & receive_DataRequest,      & receive_SyncParam,      & receive_protocol, 
        & receive_uuids,      & receive_sizes,      & receive_state,      & receive_sync_uuid, 
        0,      0,      & receive_req_state,      0, 
        0,      0,      0,      0, 
        0,      0,      0,      0, 
        0,      0,      & receive_DataRequest,      & receive_DataRequest, 
        0,      & receive_DataRequest,      0,      & receive_SyncParam, 
        & receive_bitmap,      0,      0,      & receive_delay_probe, 
        0};
#line 3751 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_cmd_handler)(struct drbd_conf * , struct p_header * )  =    (drbd_cmd_handler_f (**)(struct drbd_conf * ,
                            struct p_header * ))(& drbd_default_handler);
#line 3752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_opt_cmd_handler)(struct drbd_conf * , struct p_header * )  ;
#line 3754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  int (*handler)(struct drbd_conf * , struct p_header * ) ;
  struct p_header *header ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;

  {
#line 3757
  header = & mdev->data.rbuf.header;
#line 3759
  goto ldv_44438;
  ldv_44437: 
#line 3760
  drbd_thread_current_set_cpu(mdev);
#line 3761
  tmp = drbd_recv_header(mdev, header);
#line 3761
  if (tmp == 0) {
#line 3762
    val.i = 0U;
#line 3762
    val.ldv_33657.conn = 6U;
#line 3762
    mask.i = 0U;
#line 3762
    mask.ldv_33657.conn = 31U;
#line 3762
    drbd_force_state(mdev, mask, val);
#line 3763
    goto ldv_44428;
  } else {

  }
#line 3766
  if ((unsigned int )header->command <= 39U) {
#line 3767
    handler = *(drbd_cmd_handler + (unsigned long )header->command);
  } else
#line 3768
  if ((unsigned int )header->command > 256U && (unsigned int )header->command <= 256U) {
#line 3770
    handler = *(drbd_opt_cmd_handler + ((unsigned long )header->command + 0xffffffffffffff00UL));
  } else
#line 3771
  if ((unsigned int )header->command > 257U) {
#line 3772
    handler = & receive_skip;
  } else {
#line 3774
    handler = 0;
  }
#line 3776
  tmp___2 = __builtin_expect((unsigned long )handler == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                  struct p_header * ))0),
                             0L);
#line 3776
  if (tmp___2 != 0L) {
#line 3777
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3777
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3777
    printk("<3>%s %s: unknown packet type %d, l: %d!\n", tmp___1, tmp___0, (int )header->command,
           (int )header->length);
#line 3779
    val___0.i = 0U;
#line 3779
    val___0.ldv_33657.conn = 6U;
#line 3779
    mask___0.i = 0U;
#line 3779
    mask___0.ldv_33657.conn = 31U;
#line 3779
    drbd_force_state(mdev, mask___0, val___0);
#line 3780
    goto ldv_44428;
  } else {

  }
#line 3782
  tmp___6 = (*handler)(mdev, header);
#line 3782
  tmp___7 = __builtin_expect(tmp___6 == 0, 0L);
#line 3782
  if (tmp___7 != 0L) {
#line 3783
    tmp___3 = cmdname((enum drbd_packets )header->command);
#line 3783
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3783
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3783
    printk("<3>%s %s: error receiving %s, l: %d!\n", tmp___5, tmp___4, tmp___3, (int )header->length);
#line 3785
    val___1.i = 0U;
#line 3785
    val___1.ldv_33657.conn = 6U;
#line 3785
    mask___1.i = 0U;
#line 3785
    mask___1.ldv_33657.conn = 31U;
#line 3785
    drbd_force_state(mdev, mask___1, val___1);
#line 3786
    goto ldv_44428;
  } else {

  }
  ldv_44438: 
#line 3759
  tmp___8 = get_t_state(& mdev->receiver);
#line 3759
  if ((unsigned int )tmp___8 == 1U) {
#line 3760
    goto ldv_44437;
  } else {

  }
  ldv_44428: ;
#line 3764
  return;
}
}
#line 3791 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_fail_pending_reads(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *slot ;
  struct hlist_node *pos ;
  struct hlist_node *tmp ;
  struct drbd_request *req ;
  int i ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  struct hlist_node  const  *__mptr ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;

  {
#line 3802
  spin_lock_irq(& mdev->req_lock);
#line 3803
  i = 0;
#line 3803
  goto ldv_44455;
  ldv_44454: 
#line 3804
  slot = mdev->app_reads_hash + (unsigned long )i;
#line 3805
  pos = slot->first;
#line 3805
  goto ldv_44452;
  ldv_44451: 
#line 3811
  tmp___2 = list_empty((struct list_head  const  *)(& req->w.list));
#line 3811
  if (tmp___2 == 0) {
#line 3811
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3811
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3811
    printk("<3>%s %s: ASSERT( list_empty(&req->w.list) ) in %s:%d\n", tmp___1, tmp___0,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3811);
  } else {

  }
#line 3814
  _req_mod(req, connection_lost_while_pending);
#line 3805
  pos = tmp;
  ldv_44452: ;
#line 3805
  if ((unsigned long )pos != (unsigned long )((struct hlist_node *)0)) {
#line 3805
    tmp = pos->next;
#line 3805
    if (1 != 0) {
#line 3805
      __mptr = (struct hlist_node  const  *)pos;
#line 3805
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 3805
      if (1 != 0) {
#line 3806
        goto ldv_44451;
      } else {
#line 3808
        goto ldv_44453;
      }
    } else {
#line 3808
      goto ldv_44453;
    }
  } else {

  }
  ldv_44453: 
#line 3803
  i = i + 1;
  ldv_44455: ;
#line 3803
  if (i <= 14) {
#line 3804
    goto ldv_44454;
  } else {

  }
#line 3817
  i = 0;
#line 3817
  goto ldv_44458;
  ldv_44457: 
#line 3818
  tmp___5 = hlist_empty((struct hlist_head  const  *)mdev->app_reads_hash + (unsigned long )i);
#line 3818
  if (tmp___5 == 0) {
#line 3819
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3819
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3819
    printk("<4>%s %s: ASSERT FAILED: app_reads_hash[%d].first: %p, should be NULL\n",
           tmp___4, tmp___3, i, (mdev->app_reads_hash + (unsigned long )i)->first);
  } else {

  }
#line 3817
  i = i + 1;
  ldv_44458: ;
#line 3817
  if (i <= 14) {
#line 3818
    goto ldv_44457;
  } else {

  }
#line 3822
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 3823
  spin_unlock_irq(& mdev->req_lock);
#line 3824
  return;
}
}
#line 3826 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3830
  barr.w.cb = & w_prev_work_done;
#line 3831
  init_completion(& barr.done);
#line 3832
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3833
  wait_for_completion(& barr.done);
#line 3834
  return;
}
}
#line 3836 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  enum drbd_disk_state nps ;
  enum drbd_disk_state tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  struct hlist_head *h ;
  int tmp___6 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  int tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  int tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  int tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  int tmp___36 ;

  {
#line 3840
  rv = 0;
#line 3843
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 0U) {
#line 3844
    return;
  } else {

  }
#line 3845
  if ((int )mdev->state.ldv_33657.conn > 7) {
#line 3846
    tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33657.conn);
#line 3846
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3846
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3846
    printk("<3>%s %s: ASSERT FAILED cstate = %s, expected < WFConnection\n", tmp___1,
           tmp___0, tmp);
  } else {

  }
#line 3850
  drbd_thread_stop(& mdev->asender);
#line 3851
  drbd_free_sock(mdev);
#line 3853
  spin_lock_irq(& mdev->req_lock);
#line 3854
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3855
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3856
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3857
  spin_unlock_irq(& mdev->req_lock);
#line 3869
  drbd_rs_cancel_all(mdev);
#line 3870
  mdev->rs_total = 0UL;
#line 3871
  mdev->rs_failed = 0UL;
#line 3872
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3873
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3876
  del_timer_sync(& mdev->resync_timer);
#line 3877
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 3878
  resync_timer_fn((unsigned long )mdev);
#line 3883
  drbd_flush_workqueue(mdev);
#line 3887
  drbd_process_done_ee(mdev);
#line 3889
  kfree((void const   *)mdev->p_uuid);
#line 3890
  mdev->p_uuid = 0;
#line 3892
  if ((unsigned int )*((unsigned char *)mdev + 2014UL) == 0U) {
#line 3893
    tl_clear(mdev);
  } else {

  }
#line 3895
  drbd_fail_pending_reads(mdev);
#line 3897
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3897
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3897
  printk("<6>%s %s: Connection closed\n", tmp___3, tmp___2);
#line 3899
  drbd_md_sync(mdev);
#line 3901
  fp = FP_DONT_CARE;
#line 3902
  tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3902
  if (tmp___4 != 0) {
#line 3903
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3904
    put_ldev(mdev);
  } else {

  }
#line 3907
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 3908
    if ((unsigned int )fp != 0U && (int )mdev->state.ldv_33657.pdsk > 5) {
#line 3909
      tmp___5 = drbd_try_outdate_peer(mdev);
#line 3909
      nps = tmp___5;
#line 3910
      val.i = 0U;
#line 3910
      val.ldv_33657.pdsk = (unsigned char )nps;
#line 3910
      mask.i = 0U;
#line 3910
      mask.ldv_33657.pdsk = 15U;
#line 3910
      drbd_request_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 3914
  spin_lock_irq(& mdev->req_lock);
#line 3915
  os = mdev->state;
#line 3916
  if ((int )os.ldv_33657.conn > 1) {
#line 3918
    ns = os;
#line 3919
    ns.ldv_33657.conn = 2U;
#line 3920
    rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 3922
  spin_unlock_irq(& mdev->req_lock);
#line 3924
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3926
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3926
    if (tmp___6 == 0) {
#line 3926
      goto ldv_44478;
    } else {

    }
#line 3926
    tmp___7 = get_current();
#line 3926
    __wait.flags = 0U;
#line 3926
    __wait.private = (void *)tmp___7;
#line 3926
    __wait.func = & autoremove_wake_function;
#line 3926
    __wait.task_list.next = & __wait.task_list;
#line 3926
    __wait.task_list.prev = & __wait.task_list;
    ldv_44481: 
#line 3926
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3926
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3926
    if (tmp___8 == 0) {
#line 3926
      goto ldv_44480;
    } else {

    }
#line 3926
    schedule();
#line 3926
    goto ldv_44481;
    ldv_44480: 
#line 3926
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_44478: 
#line 3930
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3930
    if (tmp___9 == 0) {
#line 3930
      goto ldv_44482;
    } else {

    }
#line 3930
    tmp___10 = get_current();
#line 3930
    __wait___0.flags = 0U;
#line 3930
    __wait___0.private = (void *)tmp___10;
#line 3930
    __wait___0.func = & autoremove_wake_function;
#line 3930
    __wait___0.task_list.next = & __wait___0.task_list;
#line 3930
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_44485: 
#line 3930
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3930
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3930
    if (tmp___11 == 0) {
#line 3930
      goto ldv_44484;
    } else {

    }
#line 3930
    schedule();
#line 3930
    goto ldv_44485;
    ldv_44484: 
#line 3930
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_44482: 
#line 3932
    spin_lock_irq(& mdev->req_lock);
#line 3934
    h = mdev->ee_hash;
#line 3934
    goto ldv_44487;
    ldv_44486: ;
#line 3935
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3936
      tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3936
      tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3936
      printk("<3>%s %s: ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n", tmp___13,
             tmp___12, (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
    } else {

    }
#line 3934
    h = h + 1;
    ldv_44487: ;
#line 3934
    if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3935
      goto ldv_44486;
    } else {

    }
#line 3938
    kfree((void const   *)mdev->ee_hash);
#line 3939
    mdev->ee_hash = 0;
#line 3940
    mdev->ee_hash_s = 0U;
#line 3943
    h = mdev->tl_hash;
#line 3943
    goto ldv_44490;
    ldv_44489: ;
#line 3944
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3945
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3945
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3945
      printk("<3>%s %s: ASSERT FAILED tl_hash[%u] == %p, expected NULL\n", tmp___15,
             tmp___14, (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
    } else {

    }
#line 3943
    h = h + 1;
    ldv_44490: ;
#line 3943
    if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3944
      goto ldv_44489;
    } else {

    }
#line 3947
    kfree((void const   *)mdev->tl_hash);
#line 3948
    mdev->tl_hash = 0;
#line 3949
    mdev->tl_hash_s = 0U;
#line 3950
    spin_unlock_irq(& mdev->req_lock);
#line 3952
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3953
    mdev->cram_hmac_tfm = 0;
#line 3955
    kfree((void const   *)mdev->net_conf);
#line 3956
    mdev->net_conf = 0;
#line 3957
    val___0.i = 0U;
#line 3957
    val___0.ldv_33657.conn = 0U;
#line 3957
    mask___0.i = 0U;
#line 3957
    mask___0.ldv_33657.conn = 31U;
#line 3957
    drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 3967
  tmp___16 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3967
  i = (unsigned int )tmp___16;
#line 3968
  if (i != 0U) {
#line 3969
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3969
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3969
    printk("<6>%s %s: net_ee not empty, killed %u entries\n", tmp___18, tmp___17,
           i);
  } else {

  }
#line 3970
  tmp___19 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3970
  i = (unsigned int )tmp___19;
#line 3971
  if (i != 0U) {
#line 3972
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3972
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3972
    printk("<6>%s %s: pp_in_use = %d, expected 0\n", tmp___21, tmp___20, i);
  } else {

  }
#line 3974
  tmp___24 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3974
  if (tmp___24 == 0) {
#line 3974
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3974
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3974
    printk("<3>%s %s: ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n", tmp___23,
           tmp___22, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3974);
  } else {

  }
#line 3975
  tmp___27 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3975
  if (tmp___27 == 0) {
#line 3975
    tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3975
    tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3975
    printk("<3>%s %s: ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n", tmp___26,
           tmp___25, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3975);
  } else {

  }
#line 3976
  tmp___30 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3976
  if (tmp___30 == 0) {
#line 3976
    tmp___28 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3976
    tmp___29 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3976
    printk("<3>%s %s: ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n", tmp___29,
           tmp___28, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3976);
  } else {

  }
#line 3977
  tmp___33 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3977
  if (tmp___33 == 0) {
#line 3977
    tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3977
    tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3977
    printk("<3>%s %s: ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n", tmp___32,
           tmp___31, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3977);
  } else {

  }
#line 3980
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3981
  tmp___36 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3981
  if (tmp___36 == 0) {
#line 3981
    tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3981
    tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3981
    printk("<3>%s %s: ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
           tmp___35, tmp___34, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3981);
  } else {

  }
#line 3982
  return;
}
}
#line 3993 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3996
  p = & mdev->data.sbuf.handshake;
#line 3999
  tmp___1 = ldv_mutex_lock_interruptible_69(& mdev->data.mutex);
#line 3999
  if (tmp___1 != 0) {
#line 4000
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4000
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4000
    printk("<3>%s %s: interrupted during initial handshake\n", tmp___0, tmp);
#line 4001
    return (0);
  } else {

  }
#line 4004
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 4005
    ldv_mutex_unlock_70(& mdev->data.mutex);
#line 4006
    return (0);
  } else {

  }
#line 4009
  memset((void *)p, 0, 80UL);
#line 4010
  p->protocol_min = 1442840576U;
#line 4011
  p->protocol_max = 1577058304U;
#line 4012
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header *)p,
                      80UL, 0U);
#line 4014
  ldv_mutex_unlock_71(& mdev->data.mutex);
#line 4015
  return (ok);
}
}
#line 4025 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 4028
  p = & mdev->data.rbuf.handshake;
#line 4029
  expect = 72;
#line 4033
  rv = drbd_send_handshake(mdev);
#line 4034
  if (rv == 0) {
#line 4035
    return (0);
  } else {

  }
#line 4037
  rv = drbd_recv_header(mdev, & p->head);
#line 4038
  if (rv == 0) {
#line 4039
    return (0);
  } else {

  }
#line 4041
  if ((unsigned int )p->head.command != 65534U) {
#line 4042
    tmp = cmdname((enum drbd_packets )p->head.command);
#line 4042
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4042
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4042
    printk("<3>%s %s: expected HandShake packet, received: %s (0x%04x)\n", tmp___1,
           tmp___0, tmp, (int )p->head.command);
#line 4044
    return (-1);
  } else {

  }
#line 4047
  if ((int )p->head.length != expect) {
#line 4048
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4048
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4048
    printk("<3>%s %s: expected HandShake length: %u, received: %u\n", tmp___3, tmp___2,
           expect, (int )p->head.length);
#line 4050
    return (-1);
  } else {

  }
#line 4053
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 4055
  if (rv != expect) {
#line 4056
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4056
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4056
    printk("<3>%s %s: short read receiving handshake packet: l=%u\n", tmp___5, tmp___4,
           rv);
#line 4057
    return (0);
  } else {

  }
#line 4060
  tmp___6 = __fswab32(p->protocol_min);
#line 4060
  p->protocol_min = tmp___6;
#line 4061
  tmp___7 = __fswab32(p->protocol_max);
#line 4061
  p->protocol_max = tmp___7;
#line 4062
  if (p->protocol_max == 0U) {
#line 4063
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 4065
  if (p->protocol_min > 94U || p->protocol_max <= 85U) {
#line 4067
    goto incompat;
  } else {

  }
#line 4069
  __min1 = 94;
#line 4069
  __min2 = (int )p->protocol_max;
#line 4069
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 4071
  tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4071
  tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4071
  printk("<6>%s %s: Handshake successful: Agreed network protocol version %d\n", tmp___9,
         tmp___8, mdev->agreed_pro_version);
#line 4074
  return (1);
  incompat: 
#line 4077
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4077
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4077
  printk("<3>%s %s: incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
         tmp___11, tmp___10, 86, 94, p->protocol_min, p->protocol_max);
#line 4081
  return (-1);
}
}
#line 4100 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  struct p_header p ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  int rv ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  void *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  void *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  void *tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;

  {
#line 4104
  response = 0;
#line 4105
  right_response = 0;
#line 4106
  peers_ch = 0;
#line 4108
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4108
  key_len = (unsigned int )tmp;
#line 4113
  desc.tfm = mdev->cram_hmac_tfm;
#line 4114
  desc.flags = 0U;
#line 4116
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4118
  if (rv != 0) {
#line 4119
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4119
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4119
    printk("<3>%s %s: crypto_hash_setkey() failed with %d\n", tmp___1, tmp___0, rv);
#line 4120
    rv = -1;
#line 4121
    goto fail;
  } else {

  }
#line 4124
  get_random_bytes((void *)(& my_challenge), 64);
#line 4126
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4127
  if (rv == 0) {
#line 4128
    goto fail;
  } else {

  }
#line 4130
  rv = drbd_recv_header(mdev, & p);
#line 4131
  if (rv == 0) {
#line 4132
    goto fail;
  } else {

  }
#line 4134
  if ((unsigned int )p.command != 16U) {
#line 4135
    tmp___2 = cmdname((enum drbd_packets )p.command);
#line 4135
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4135
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4135
    printk("<3>%s %s: expected AuthChallenge packet, received: %s (0x%04x)\n", tmp___4,
           tmp___3, tmp___2, (int )p.command);
#line 4137
    rv = 0;
#line 4138
    goto fail;
  } else {

  }
#line 4141
  if ((unsigned int )p.length > 128U) {
#line 4142
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4142
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4142
    printk("<3>%s %s: expected AuthChallenge payload too big.\n", tmp___6, tmp___5);
#line 4143
    rv = -1;
#line 4144
    goto fail;
  } else {

  }
#line 4147
  tmp___7 = kmalloc___1((size_t )p.length, 16U);
#line 4147
  peers_ch = (char *)tmp___7;
#line 4148
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4149
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4149
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4149
    printk("<3>%s %s: kmalloc of peers_ch failed\n", tmp___9, tmp___8);
#line 4150
    rv = -1;
#line 4151
    goto fail;
  } else {

  }
#line 4154
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )p.length);
#line 4156
  if ((int )p.length != rv) {
#line 4157
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4157
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4157
    printk("<3>%s %s: short read AuthChallenge: l=%u\n", tmp___11, tmp___10, rv);
#line 4158
    rv = 0;
#line 4159
    goto fail;
  } else {

  }
#line 4162
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4163
  tmp___12 = kmalloc___1((size_t )resp_size, 16U);
#line 4163
  response = (char *)tmp___12;
#line 4164
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4165
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4165
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4165
    printk("<3>%s %s: kmalloc of response failed\n", tmp___14, tmp___13);
#line 4166
    rv = -1;
#line 4167
    goto fail;
  } else {

  }
#line 4170
  sg_init_table(& sg, 1U);
#line 4171
  sg_set_buf(& sg, (void const   *)peers_ch, (unsigned int )p.length);
#line 4173
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4174
  if (rv != 0) {
#line 4175
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4175
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4175
    printk("<3>%s %s: crypto_hash_digest() failed with %d\n", tmp___16, tmp___15,
           rv);
#line 4176
    rv = -1;
#line 4177
    goto fail;
  } else {

  }
#line 4180
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4181
  if (rv == 0) {
#line 4182
    goto fail;
  } else {

  }
#line 4184
  rv = drbd_recv_header(mdev, & p);
#line 4185
  if (rv == 0) {
#line 4186
    goto fail;
  } else {

  }
#line 4188
  if ((unsigned int )p.command != 17U) {
#line 4189
    tmp___17 = cmdname((enum drbd_packets )p.command);
#line 4189
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4189
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4189
    printk("<3>%s %s: expected AuthResponse packet, received: %s (0x%04x)\n", tmp___19,
           tmp___18, tmp___17, (int )p.command);
#line 4191
    rv = 0;
#line 4192
    goto fail;
  } else {

  }
#line 4195
  if ((unsigned int )p.length != resp_size) {
#line 4196
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4196
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4196
    printk("<3>%s %s: expected AuthResponse payload of wrong size\n", tmp___21, tmp___20);
#line 4197
    rv = 0;
#line 4198
    goto fail;
  } else {

  }
#line 4201
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4203
  if ((unsigned int )rv != resp_size) {
#line 4204
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4204
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4204
    printk("<3>%s %s: short read receiving AuthResponse: l=%u\n", tmp___23, tmp___22,
           rv);
#line 4205
    rv = 0;
#line 4206
    goto fail;
  } else {

  }
#line 4209
  tmp___24 = kmalloc___1((size_t )resp_size, 16U);
#line 4209
  right_response = (char *)tmp___24;
#line 4210
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4211
    tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4211
    tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4211
    printk("<3>%s %s: kmalloc of right_response failed\n", tmp___26, tmp___25);
#line 4212
    rv = -1;
#line 4213
    goto fail;
  } else {

  }
#line 4216
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4218
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4219
  if (rv != 0) {
#line 4220
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4220
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4220
    printk("<3>%s %s: crypto_hash_digest() failed with %d\n", tmp___28, tmp___27,
           rv);
#line 4221
    rv = -1;
#line 4222
    goto fail;
  } else {

  }
#line 4225
  tmp___29 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4225
  rv = tmp___29 == 0;
#line 4227
  if (rv != 0) {
#line 4228
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4228
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4228
    printk("<6>%s %s: Peer authenticated using %d bytes of \'%s\' HMAC\n", tmp___31,
           tmp___30, resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4231
    rv = -1;
  }
  fail: 
#line 4234
  kfree((void const   *)peers_ch);
#line 4235
  kfree((void const   *)response);
#line 4236
  kfree((void const   *)right_response);
#line 4238
  return (rv);
}
}
#line 4242 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;

  {
#line 4244
  mdev = thi->mdev;
#line 4245
  tmp = mdev_to_minor(mdev);
#line 4245
  minor = tmp;
#line 4248
  tmp___0 = get_current();
#line 4248
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4250
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4250
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4250
  printk("<6>%s %s: receiver (re)started\n", tmp___2, tmp___1);
  ldv_44535: 
#line 4253
  h = drbd_connect(mdev);
#line 4254
  if (h == 0) {
#line 4255
    drbd_disconnect(mdev);
#line 4256
    tmp___3 = get_current();
#line 4256
    tmp___3->state = 1L;
#line 4257
    schedule_timeout(250L);
  } else {

  }
#line 4259
  if (h == -1) {
#line 4260
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4260
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4260
    printk("<4>%s %s: Discarding network configuration.\n", tmp___5, tmp___4);
#line 4261
    val.i = 0U;
#line 4261
    val.ldv_33657.conn = 1U;
#line 4261
    mask.i = 0U;
#line 4261
    mask.ldv_33657.conn = 31U;
#line 4261
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4263
  if (h == 0) {
#line 4264
    goto ldv_44535;
  } else {

  }

#line 4265
  if (h > 0) {
#line 4266
    tmp___6 = get_net_conf(mdev);
#line 4266
    if (tmp___6 != 0) {
#line 4267
      drbdd(mdev);
#line 4268
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4272
  drbd_disconnect(mdev);
#line 4274
  tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4274
  tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4274
  printk("<6>%s %s: receiver terminated\n", tmp___8, tmp___7);
#line 4275
  return (0);
}
}
#line 4280 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 4282
  p = (struct p_req_state_reply *)h;
#line 4284
  tmp = __fswab32(p->retcode);
#line 4284
  retcode = (int )tmp;
#line 4286
  if (retcode > 0) {
#line 4287
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4289
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 4290
    tmp___0 = drbd_set_st_err_str((enum drbd_state_ret_codes )retcode);
#line 4290
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4290
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4290
    printk("<3>%s %s: Requested state change failed by peer: %s (%d)\n", tmp___2,
           tmp___1, tmp___0, retcode);
  }
#line 4293
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4295
  return (1);
}
}
#line 4298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4300
  tmp = drbd_send_ping_ack(mdev);
#line 4300
  return (tmp);
}
}
#line 4304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4307
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4308
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4308
  if (tmp == 0) {
#line 4309
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4311
  return (1);
}
}
#line 4314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 4316
  p = (struct p_block_ack *)h;
#line 4317
  tmp = __fswab64(p->sector);
#line 4317
  sector = (sector_t )tmp;
#line 4318
  tmp___0 = __fswab32(p->blksize);
#line 4318
  blksize = (int )tmp___0;
#line 4320
  if (mdev->agreed_pro_version <= 88) {
#line 4320
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4320
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4320
    printk("<3>%s %s: ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4320);
  } else {

  }
#line 4322
  tmp___3 = __fswab32(p->seq_num);
#line 4322
  update_peer_seq(mdev, tmp___3);
#line 4324
  drbd_rs_complete_io(mdev, sector);
#line 4325
  __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                     4325U);
#line 4327
  mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4328
  atomic_dec(& mdev->rs_pending_cnt);
#line 4328
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4328
  if (tmp___7 < 0) {
#line 4328
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4328
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4328
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4328
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___6, tmp___5, "got_IsInSync",
           4328, tmp___4);
  } else {

  }
#line 4330
  return (1);
}
}
#line 4335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct hlist_node  const  *__mptr ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 4338
  tmp = tl_hash_slot(mdev, sector);
#line 4338
  slot = tmp;
#line 4342
  n = slot->first;
#line 4342
  goto ldv_44576;
  ldv_44575: ;
#line 4343
  if ((unsigned long )req == (unsigned long )id) {
#line 4344
    if (req->sector != sector) {
#line 4345
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4345
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4345
      printk("<3>%s %s: _ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
             tmp___1, tmp___0, req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4349
      goto ldv_44574;
    } else {

    }
#line 4351
    return (req);
  } else {

  }
#line 4342
  n = n->next;
  ldv_44576: ;
#line 4342
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4342
    __builtin_prefetch((void const   *)n->next);
#line 4342
    if (1 != 0) {
#line 4342
      __mptr = (struct hlist_node  const  *)n;
#line 4342
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4342
      if (1 != 0) {
#line 4343
        goto ldv_44575;
      } else {
#line 4345
        goto ldv_44574;
      }
    } else {
#line 4345
      goto ldv_44574;
    }
  } else {

  }
  ldv_44574: 
#line 4354
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4354
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4354
  printk("<3>%s %s: _ack_id_to_req: failed to find req %p, sector %llus in list\n",
         tmp___3, tmp___2, (void *)id, (unsigned long long )sector);
#line 4356
  return (0);
}
}
#line 4362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;

  {
#line 4369
  spin_lock_irq(& mdev->req_lock);
#line 4370
  req = (*validator)(mdev, id, sector);
#line 4371
  tmp___1 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 4371
  if (tmp___1 != 0L) {
#line 4372
    spin_unlock_irq(& mdev->req_lock);
#line 4373
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4373
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4373
    printk("<3>%s %s: %s: got a corrupt block_id/sector pair\n", tmp___0, tmp, func);
#line 4374
    return (0);
  } else {

  }
#line 4376
  __req_mod(req, what, & m);
#line 4377
  spin_unlock_irq(& mdev->req_lock);
#line 4379
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4380
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4381
  return (1);
}
}
#line 4384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  __u16 tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;

  {
#line 4386
  p = (struct p_block_ack *)h;
#line 4387
  tmp = __fswab64(p->sector);
#line 4387
  sector = (sector_t )tmp;
#line 4388
  tmp___0 = __fswab32(p->blksize);
#line 4388
  blksize = (int )tmp___0;
#line 4391
  tmp___1 = __fswab32(p->seq_num);
#line 4391
  update_peer_seq(mdev, tmp___1);
#line 4393
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4394
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4394U);
#line 4395
    atomic_dec(& mdev->rs_pending_cnt);
#line 4395
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4395
    if (tmp___5 < 0) {
#line 4395
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4395
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4395
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4395
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
             "got_BlockAck", 4395, tmp___2);
    } else {

    }
#line 4396
    return (1);
  } else {

  }
#line 4398
  tmp___6 = __fswab16((int )h->command);
#line 4398
  switch ((int )tmp___6) {
  case 23: ;
#line 4400
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4400
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4400
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4400
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4400);
  } else {

  }
#line 4401
  what = write_acked_by_peer_and_sis;
#line 4402
  goto ldv_44604;
  case 22: ;
#line 4404
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4404
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4404
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4404
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___10, tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4404);
  } else {

  }
#line 4405
  what = write_acked_by_peer;
#line 4406
  goto ldv_44604;
  case 21: ;
#line 4408
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4408
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4408
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4408
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
           tmp___12, tmp___11, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4408);
  } else {

  }
#line 4409
  what = recv_acked_by_peer;
#line 4410
  goto ldv_44604;
  case 24: ;
#line 4412
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4412
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4412
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4412
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___14, tmp___13, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4412);
  } else {

  }
#line 4413
  what = conflict_discarded_by_peer;
#line 4414
  goto ldv_44604;
  default: 
#line 4416
  tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4416
  tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4416
  printk("<3>%s %s: ASSERT( 0 ) in %s:%d\n", tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
         4416);
#line 4417
  return (0);
  }
  ldv_44604: 
#line 4420
  tmp___17 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                           "got_BlockAck", what);
#line 4420
  return (tmp___17);
}
}
#line 4424 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  __u32 tmp___3 ;
  int size ;
  __u32 tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 4426
  p = (struct p_block_ack *)h;
#line 4427
  tmp = __fswab64(p->sector);
#line 4427
  sector = (sector_t )tmp;
#line 4429
  tmp___2 = ___ratelimit(& drbd_ratelimit_state, "got_NegAck");
#line 4429
  if (tmp___2 != 0) {
#line 4430
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4430
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4430
    printk("<4>%s %s: Got NegAck packet. Peer is in troubles?\n", tmp___1, tmp___0);
  } else {

  }
#line 4432
  tmp___3 = __fswab32(p->seq_num);
#line 4432
  update_peer_seq(mdev, tmp___3);
#line 4434
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4435
    tmp___4 = __fswab32(p->blksize);
#line 4435
    size = (int )tmp___4;
#line 4436
    atomic_dec(& mdev->rs_pending_cnt);
#line 4436
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4436
    if (tmp___8 < 0) {
#line 4436
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4436
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4436
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4436
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___7, tmp___6,
             "got_NegAck", 4436, tmp___5);
    } else {

    }
#line 4437
    drbd_rs_failed_io(mdev, sector, size);
#line 4438
    return (1);
  } else {

  }
#line 4440
  tmp___9 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_NegAck", neg_acked);
#line 4440
  return (tmp___9);
}
}
#line 4444 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
#line 4446
  p = (struct p_block_ack *)h;
#line 4447
  tmp = __fswab64(p->sector);
#line 4447
  sector = (sector_t )tmp;
#line 4449
  tmp___0 = __fswab32(p->seq_num);
#line 4449
  update_peer_seq(mdev, tmp___0);
#line 4450
  tmp___1 = __fswab32(p->blksize);
#line 4450
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4450
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4450
  printk("<3>%s %s: Got NegDReply; Sector %llus, len %u; Fail original request.\n",
         tmp___3, tmp___2, (unsigned long long )sector, tmp___1);
#line 4453
  tmp___4 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4453
  return (tmp___4);
}
}
#line 4457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
#line 4461
  p = (struct p_block_ack *)h;
#line 4463
  tmp = __fswab64(p->sector);
#line 4463
  sector = (sector_t )tmp;
#line 4464
  tmp___0 = __fswab32(p->blksize);
#line 4464
  size = (int )tmp___0;
#line 4466
  tmp___1 = __fswab32(p->seq_num);
#line 4466
  update_peer_seq(mdev, tmp___1);
#line 4468
  atomic_dec(& mdev->rs_pending_cnt);
#line 4468
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4468
  if (tmp___5 < 0) {
#line 4468
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4468
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4468
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4468
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3, "got_NegRSDReply",
           4468, tmp___2);
  } else {

  }
#line 4470
  tmp___6 = _get_ldev_if_state(mdev, D_FAILED);
#line 4470
  if (tmp___6 != 0) {
#line 4471
    drbd_rs_complete_io(mdev, sector);
#line 4472
    drbd_rs_failed_io(mdev, sector, size);
#line 4473
    put_ldev(mdev);
  } else {

  }
#line 4476
  return (1);
}
}
#line 4479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;

  {
#line 4481
  p = (struct p_barrier_ack *)h;
#line 4483
  tmp = __fswab32(p->set_size);
#line 4483
  tl_release(mdev, p->barrier, tmp);
#line 4485
  return (1);
}
}
#line 4488 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 4490
  p = (struct p_block_ack *)h;
#line 4495
  tmp = __fswab64(p->sector);
#line 4495
  sector = (sector_t )tmp;
#line 4496
  tmp___0 = __fswab32(p->blksize);
#line 4496
  size = (int )tmp___0;
#line 4498
  tmp___1 = __fswab32(p->seq_num);
#line 4498
  update_peer_seq(mdev, tmp___1);
#line 4500
  tmp___2 = __fswab64(p->block_id);
#line 4500
  if (tmp___2 == 4712ULL) {
#line 4501
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4503
    ov_oos_print(mdev);
  }
#line 4505
  drbd_rs_complete_io(mdev, sector);
#line 4506
  atomic_dec(& mdev->rs_pending_cnt);
#line 4506
  tmp___6 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4506
  if (tmp___6 < 0) {
#line 4506
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4506
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4506
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4506
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___5, tmp___4, "got_OVResult",
           4506, tmp___3);
  } else {

  }
#line 4508
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4508
  if (mdev->ov_left == 0UL) {
#line 4509
    tmp___7 = kmalloc___1(24UL, 16U);
#line 4509
    w = (struct drbd_work *)tmp___7;
#line 4510
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4511
      w->cb = & w_ov_finished;
#line 4512
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4514
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4514
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4514
      printk("<3>%s %s: kmalloc(w) failed.", tmp___9, tmp___8);
#line 4515
      ov_oos_print(mdev);
#line 4516
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4519
  return (1);
}
}
#line 4522 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_delay_probe_m(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_delay_probe *p ;

  {
#line 4524
  p = (struct p_delay_probe *)h;
#line 4526
  got_delay_probe(mdev, 0, p);
#line 4527
  return (1);
}
}
#line 4535 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[41U] ;

  {
#line 4537
  asender_tbl[0].pkt_size = 0UL;
#line 4537
  asender_tbl[0].process = 0;
#line 4537
  asender_tbl[1].pkt_size = 0UL;
#line 4537
  asender_tbl[1].process = 0;
#line 4537
  asender_tbl[2].pkt_size = 0UL;
#line 4537
  asender_tbl[2].process = 0;
#line 4537
  asender_tbl[3].pkt_size = 0UL;
#line 4537
  asender_tbl[3].process = 0;
#line 4537
  asender_tbl[4].pkt_size = 0UL;
#line 4537
  asender_tbl[4].process = 0;
#line 4537
  asender_tbl[5].pkt_size = 0UL;
#line 4537
  asender_tbl[5].process = 0;
#line 4537
  asender_tbl[6].pkt_size = 0UL;
#line 4537
  asender_tbl[6].process = 0;
#line 4537
  asender_tbl[7].pkt_size = 0UL;
#line 4537
  asender_tbl[7].process = 0;
#line 4537
  asender_tbl[8].pkt_size = 0UL;
#line 4537
  asender_tbl[8].process = 0;
#line 4537
  asender_tbl[9].pkt_size = 0UL;
#line 4537
  asender_tbl[9].process = 0;
#line 4537
  asender_tbl[10].pkt_size = 0UL;
#line 4537
  asender_tbl[10].process = 0;
#line 4537
  asender_tbl[11].pkt_size = 0UL;
#line 4537
  asender_tbl[11].process = 0;
#line 4537
  asender_tbl[12].pkt_size = 0UL;
#line 4537
  asender_tbl[12].process = 0;
#line 4537
  asender_tbl[13].pkt_size = 0UL;
#line 4537
  asender_tbl[13].process = 0;
#line 4537
  asender_tbl[14].pkt_size = 0UL;
#line 4537
  asender_tbl[14].process = 0;
#line 4537
  asender_tbl[15].pkt_size = 0UL;
#line 4537
  asender_tbl[15].process = 0;
#line 4537
  asender_tbl[16].pkt_size = 0UL;
#line 4537
  asender_tbl[16].process = 0;
#line 4537
  asender_tbl[17].pkt_size = 0UL;
#line 4537
  asender_tbl[17].process = 0;
#line 4537
  asender_tbl[18].pkt_size = 0UL;
#line 4537
  asender_tbl[18].process = 0;
#line 4537
  asender_tbl[19].pkt_size = 8UL;
#line 4537
  asender_tbl[19].process = & got_Ping;
#line 4537
  asender_tbl[20].pkt_size = 8UL;
#line 4537
  asender_tbl[20].process = & got_PingAck;
#line 4537
  asender_tbl[21].pkt_size = 32UL;
#line 4537
  asender_tbl[21].process = & got_BlockAck;
#line 4537
  asender_tbl[22].pkt_size = 32UL;
#line 4537
  asender_tbl[22].process = & got_BlockAck;
#line 4537
  asender_tbl[23].pkt_size = 32UL;
#line 4537
  asender_tbl[23].process = & got_BlockAck;
#line 4537
  asender_tbl[24].pkt_size = 32UL;
#line 4537
  asender_tbl[24].process = & got_BlockAck;
#line 4537
  asender_tbl[25].pkt_size = 32UL;
#line 4537
  asender_tbl[25].process = & got_NegAck;
#line 4537
  asender_tbl[26].pkt_size = 32UL;
#line 4537
  asender_tbl[26].process = & got_NegDReply;
#line 4537
  asender_tbl[27].pkt_size = 32UL;
#line 4537
  asender_tbl[27].process = & got_NegRSDReply;
#line 4537
  asender_tbl[28].pkt_size = 16UL;
#line 4537
  asender_tbl[28].process = & got_BarrierAck;
#line 4537
  asender_tbl[29].pkt_size = 12UL;
#line 4537
  asender_tbl[29].process = & got_RqSReply;
#line 4537
  asender_tbl[30].pkt_size = 0UL;
#line 4537
  asender_tbl[30].process = 0;
#line 4537
  asender_tbl[31].pkt_size = 0UL;
#line 4537
  asender_tbl[31].process = 0;
#line 4537
  asender_tbl[32].pkt_size = 32UL;
#line 4537
  asender_tbl[32].process = & got_OVResult;
#line 4537
  asender_tbl[33].pkt_size = 0UL;
#line 4537
  asender_tbl[33].process = 0;
#line 4537
  asender_tbl[34].pkt_size = 32UL;
#line 4537
  asender_tbl[34].process = & got_IsInSync;
#line 4537
  asender_tbl[35].pkt_size = 0UL;
#line 4537
  asender_tbl[35].process = 0;
#line 4537
  asender_tbl[36].pkt_size = 0UL;
#line 4537
  asender_tbl[36].process = 0;
#line 4537
  asender_tbl[37].pkt_size = 0UL;
#line 4537
  asender_tbl[37].process = 0;
#line 4537
  asender_tbl[38].pkt_size = 0UL;
#line 4537
  asender_tbl[38].process = 0;
#line 4537
  asender_tbl[39].pkt_size = 16UL;
#line 4537
  asender_tbl[39].process = & got_delay_probe_m;
#line 4537
  asender_tbl[40].pkt_size = 0UL;
#line 4537
  asender_tbl[40].process = 0;
#line 4557
  if (cmd > 40 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header * ))0)) {
#line 4558
    return (0);
  } else {

  }
#line 4559
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4562 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  struct task_struct *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  long tmp___21 ;
  __u32 tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  long tmp___25 ;
  __u16 tmp___26 ;
  __u16 tmp___27 ;
  __u32 tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  long tmp___31 ;
  int _b___0 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  int tmp___36 ;
  enum drbd_thread_state tmp___37 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  char const   *tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;

  {
#line 4564
  mdev = thi->mdev;
#line 4565
  h = & mdev->meta.rbuf.header;
#line 4566
  cmd = 0;
#line 4569
  buf = (void *)h;
#line 4570
  received = 0;
#line 4571
  expect = 8;
#line 4574
  tmp = mdev_to_minor(mdev);
#line 4574
  tmp___0 = get_current();
#line 4574
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4576
  tmp___1 = get_current();
#line 4576
  tmp___1->policy = 2U;
#line 4577
  tmp___2 = get_current();
#line 4577
  tmp___2->rt_priority = 2U;
#line 4579
  goto ldv_44687;
  ldv_44691: 
#line 4580
  drbd_thread_current_set_cpu(mdev);
#line 4581
  tmp___6 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4581
  if (tmp___6 != 0) {
#line 4582
    tmp___3 = drbd_send_ping(mdev);
#line 4582
    _b = tmp___3 == 0;
#line 4582
    if (_b != 0) {
#line 4582
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4582
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4582
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "drbd_asender", (char *)"!drbd_send_ping(mdev)",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             4582);
    } else {

    }
#line 4582
    if (_b != 0) {
#line 4582
      goto reconnect;
    } else {

    }
#line 4583
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
  } else {

  }
#line 4589
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4589
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4589
    if (tmp___7 > 3) {
#line 4591
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_44686: 
#line 4593
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4594
  tmp___8 = get_current();
#line 4594
  flush_signals(tmp___8);
#line 4595
  tmp___11 = drbd_process_done_ee(mdev);
#line 4595
  if (tmp___11 == 0) {
#line 4596
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4596
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4596
    printk("<3>%s %s: process_done_ee() = NOT_OK\n", tmp___10, tmp___9);
#line 4597
    goto reconnect;
  } else {

  }
#line 4600
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4601
  spin_lock_irq(& mdev->req_lock);
#line 4602
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4603
  spin_unlock_irq(& mdev->req_lock);
#line 4607
  if (empty != 0) {
#line 4608
    goto ldv_44685;
  } else {

  }
#line 4609
  goto ldv_44686;
  ldv_44685: ;
#line 4611
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4612
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4615
  tmp___12 = get_current();
#line 4615
  tmp___13 = signal_pending(tmp___12);
#line 4615
  if (tmp___13 != 0) {
#line 4616
    goto ldv_44687;
  } else {

  }
#line 4618
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4620
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4622
  tmp___14 = get_current();
#line 4622
  flush_signals(tmp___14);
#line 4634
  tmp___21 = __builtin_expect(rv > 0, 1L);
#line 4634
  if (tmp___21 != 0L) {
#line 4635
    received = received + rv;
#line 4636
    buf = buf + (unsigned long )rv;
  } else
#line 4637
  if (rv == 0) {
#line 4638
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4638
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4638
    printk("<3>%s %s: meta connection shut down by peer.\n", tmp___16, tmp___15);
#line 4639
    goto reconnect;
  } else
#line 4640
  if (rv == -11) {
#line 4641
    if (((mdev->meta.socket)->sk)->sk_rcvtimeo == (long )(((mdev->net_conf)->ping_timeo * 250) / 10)) {
#line 4643
      tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4643
      tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4643
      printk("<3>%s %s: PingAck did not arrive in time.\n", tmp___18, tmp___17);
#line 4644
      goto reconnect;
    } else {

    }
#line 4646
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4647
    goto ldv_44687;
  } else
#line 4648
  if (rv == -4) {
#line 4649
    goto ldv_44687;
  } else {
#line 4651
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4651
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4651
    printk("<3>%s %s: sock_recvmsg returned %d\n", tmp___20, tmp___19, rv);
#line 4652
    goto reconnect;
  }
#line 4655
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4656
    tmp___25 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4656
    if (tmp___25 != 0L) {
#line 4657
      tmp___22 = __fswab32(h->magic);
#line 4657
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4657
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4657
      printk("<3>%s %s: magic?? on meta m: 0x%lx c: %d l: %d\n", tmp___24, tmp___23,
             (long )tmp___22, (int )h->command, (int )h->length);
#line 4660
      goto reconnect;
    } else {

    }
#line 4662
    tmp___26 = __fswab16((int )h->command);
#line 4662
    cmd = get_asender_cmd((int )tmp___26);
#line 4663
    tmp___27 = __fswab16((int )h->length);
#line 4663
    len = (int )tmp___27;
#line 4664
    tmp___31 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4664
    if (tmp___31 != 0L) {
#line 4665
      tmp___28 = __fswab32(h->magic);
#line 4665
      tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4665
      tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4665
      printk("<3>%s %s: unknown command?? on meta m: 0x%lx c: %d l: %d\n", tmp___30,
             tmp___29, (long )tmp___28, (int )h->command, (int )h->length);
#line 4668
      goto disconnect;
    } else {

    }
#line 4670
    expect = (int )cmd->pkt_size;
#line 4671
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4671
    if (_b___0 != 0) {
#line 4671
      tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4671
      tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4671
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___33, tmp___32, "drbd_asender",
             (char *)"len != expect-sizeof(struct p_header)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             4671);
    } else {

    }
#line 4671
    if (_b___0 != 0) {
#line 4672
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4674
  if (received == expect) {
#line 4675
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4675
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4675
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4675
      printk("<3>%s %s: ASSERT( cmd != NULL ) in %s:%d\n", tmp___35, tmp___34, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             4675);
    } else {

    }
#line 4676
    tmp___36 = (*(cmd->process))(mdev, h);
#line 4676
    if (tmp___36 == 0) {
#line 4677
      goto reconnect;
    } else {

    }
#line 4679
    buf = (void *)h;
#line 4680
    received = 0;
#line 4681
    expect = 8;
#line 4682
    cmd = 0;
  } else {

  }
  ldv_44687: 
#line 4579
  tmp___37 = get_t_state(thi);
#line 4579
  if ((unsigned int )tmp___37 == 1U) {
#line 4580
    goto ldv_44691;
  } else {

  }

#line 4686
  if (0) {
    reconnect: 
#line 4688
    val.i = 0U;
#line 4688
    val.ldv_33657.conn = 5U;
#line 4688
    mask.i = 0U;
#line 4688
    mask.ldv_33657.conn = 31U;
#line 4688
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4690
  if (0) {
    disconnect: 
#line 4692
    val___0.i = 0U;
#line 4692
    val___0.ldv_33657.conn = 1U;
#line 4692
    mask___0.i = 0U;
#line 4692
    mask___0.ldv_33657.conn = 31U;
#line 4692
    drbd_force_state(mdev, mask___0, val___0);
  } else {

  }
#line 4694
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4696
  if ((int )mdev->state.ldv_33657.conn > 9) {
#line 4696
    tmp___38 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4696
    tmp___39 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4696
    printk("<3>%s %s: ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n", tmp___39,
           tmp___38, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4696);
  } else {

  }
#line 4697
  tmp___40 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4697
  tmp___41 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4697
  printk("<6>%s %s: asender terminated\n", tmp___41, tmp___40);
#line 4699
  return (0);
}
}
#line 4739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4751
  LDV_IN_INTERRUPT = 1;
#line 4760
  ldv_initialize();
#line 4762
  goto ldv_44720;
  ldv_44719: 
#line 4765
  tmp = nondet_int();
#line 4765
  switch (tmp) {
  default: ;
#line 4767
  goto ldv_44718;
  }
  ldv_44718: ;
  ldv_44720: 
#line 4762
  tmp___0 = nondet_int();
#line 4762
  if (tmp___0 != 0) {
#line 4763
    goto ldv_44719;
  } else {

  }


#line 4776
  ldv_check_final_state();
#line 4779
  return;
}
}
#line 4783 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4788
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4790
  mutex_lock(ldv_func_arg1);
#line 4791
  return;
}
}
#line 4793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_trylock_64(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4798
  tmp = mutex_trylock(ldv_func_arg1);
#line 4798
  ldv_func_res = tmp;
#line 4800
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4800
  return (tmp___0);
#line 4802
  return (ldv_func_res);
}
}
#line 4805 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4810
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4812
  mutex_unlock(ldv_func_arg1);
#line 4813
  return;
}
}
#line 4815 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_66(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4820
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4822
  mutex_lock(ldv_func_arg1);
#line 4823
  return;
}
}
#line 4825 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_67(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4830
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4832
  mutex_unlock(ldv_func_arg1);
#line 4833
  return;
}
}
#line 4835 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4840
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4842
  mutex_unlock(ldv_func_arg1);
#line 4843
  return;
}
}
#line 4845 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_lock_interruptible_69(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4850
  tmp = mutex_lock_interruptible(ldv_func_arg1);
#line 4850
  ldv_func_res = tmp;
#line 4852
  tmp___0 = ldv_mutex_lock_interruptible_mutex_of_drbd_socket(ldv_func_arg1);
#line 4852
  return (tmp___0);
#line 4854
  return (ldv_func_res);
}
}
#line 4857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4862
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4864
  mutex_unlock(ldv_func_arg1);
#line 4865
  return;
}
}
#line 4867 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4872
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4874
  mutex_unlock(ldv_func_arg1);
#line 4875
  return;
}
}
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 590 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 592
  __hlist_del(n);
#line 593
  n->next = 0xdead000000100100UL;
#line 594
  n->pprev = 0xdead000000200200UL;
#line 595
  return;
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 182
  __i = i;
#line 183
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 186
  return (i + __i);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 207
  tmp = atomic_add_return(- i, v);
#line 207
  return (tmp);
}
}
#line 304 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 308
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 154 "include/linux/mutex.h"
int ldv_mutex_trylock_82(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_83(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_81(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_84(struct mutex *ldv_func_arg1 ) ;
#line 169 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 92 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_lock_map ;
#line 310 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 312
  rcu_read_lock_sched_notrace();
#line 314
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 316
  return;
}
}
#line 332 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 334
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 336
  rcu_read_lock_sched_notrace();
#line 337
  return;
}
}
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___2(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0 && ! __warned) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        __warned = 1;
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_11667: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_11667;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___2(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___2(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___2(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 173 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 175
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 175
  if (tmp != 0L) {
#line 176
    if (part->partno != 0) {
#line 177
      __mptr = (struct device  const  *)part->__dev.parent;
#line 177
      return ((struct gendisk *)__mptr + 0xffffffffffffffa0UL);
    } else {
#line 179
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 179
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffffa0UL);
    }
  } else {

  }
#line 181
  return (0);
}
}
#line 326 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 328
  part->in_flight[rw] = part->in_flight[rw] + 1;
#line 329
  if (part->partno != 0) {
#line 330
    tmp = part_to_disk(part);
#line 330
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] + 1;
  } else {

  }
#line 331
  return;
}
}
#line 333 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 335
  part->in_flight[rw] = part->in_flight[rw] - 1;
#line 336
  if (part->partno != 0) {
#line 337
    tmp = part_to_disk(part);
#line 337
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] - 1;
  } else {

  }
#line 338
  return;
}
}
#line 346
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 186 "include/linux/bio.h"
__inline static bool bio_rw_flagged(struct bio *bio , enum bio_rw_flags flag ) 
{ 


  {
#line 188
  return ((bio->bi_rw & (unsigned long )(1 << (int )flag)) != 0UL);
}
}
#line 354
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 355
extern void bio_pair_release(struct bio_pair * ) ;
#line 371
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 793 "include/linux/blkdev.h"
extern void blk_plug_device(struct request_queue * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1157
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1423
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) ;
#line 1425
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1726 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____1(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1728
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1730
  if (forcedetach == 0) {
#line 1731
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1731
    if (tmp___1 != 0) {
#line 1732
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1732
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1732
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1734
    goto ldv_41964;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1739
  if ((int )mdev->state.ldv_33657.disk > 2) {
#line 1740
    __ns.i = mdev->state.i;
#line 1740
    __ns.ldv_33657.disk = 2U;
#line 1740
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1741
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1741
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1741
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1744
  goto ldv_41964;
  }
  ldv_41964: ;
#line 1747
  return;
}
}
#line 1972 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1974
  atomic_inc(& mdev->ap_pending_cnt);
#line 1975
  return;
}
}
#line 2126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2128
  mxb = 1000000;
#line 2129
  tmp = get_net_conf(mdev);
#line 2129
  if (tmp != 0) {
#line 2130
    mxb = (mdev->net_conf)->max_buffers;
#line 2131
    put_net_conf(mdev);
  } else {

  }
#line 2133
  return (mxb);
}
}
#line 2136 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(union drbd_state s ) 
{ 


  {
#line 2142
  switch ((unsigned int )s.ldv_33657.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2155
  goto ldv_42123;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2174
  return (0);
  }
  ldv_42123: ;
#line 2177
  switch ((unsigned int )s.ldv_33657.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2184
  goto ldv_42143;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2193
  return (0);
  }
  ldv_42143: ;
#line 2196
  return (1);
}
}
#line 2199 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2201
  tmp = drbd_get_max_buffers(mdev);
#line 2201
  mxb = tmp;
#line 2203
  if ((unsigned int )*((unsigned char *)mdev + 2014UL) != 0U) {
#line 2204
    return (0);
  } else {

  }
#line 2205
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2205
  if (tmp___0 != 0) {
#line 2206
    return (0);
  } else {

  }
#line 2213
  tmp___1 = drbd_state_is_stable(mdev->state);
#line 2213
  if (tmp___1 == 0) {
#line 2214
    return (0);
  } else {

  }
#line 2218
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2218
  if (tmp___2 > mxb) {
#line 2219
    return (0);
  } else {

  }
#line 2220
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2220
  if (tmp___3 != 0) {
#line 2221
    return (0);
  } else {

  }
#line 2222
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->new_c_uuid));
#line 2222
  if (tmp___4 != 0) {
#line 2223
    return (0);
  } else {

  }
#line 2224
  return (1);
}
}
#line 2230 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2234
  tmp = get_current();
#line 2234
  wait.flags = 0U;
#line 2234
  wait.private = (void *)tmp;
#line 2234
  wait.func = & autoremove_wake_function;
#line 2234
  wait.task_list.next = & wait.task_list;
#line 2234
  wait.task_list.prev = & wait.task_list;
#line 2244
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->new_c_uuid));
#line 2244
  if (tmp___0 != 0) {
#line 2244
    tmp___1 = atomic_add_unless(& mdev->new_c_uuid, -1, 1);
#line 2244
    if (tmp___1 != 0) {
#line 2245
      drbd_queue_work_front(& mdev->data.work, & mdev->uuid_work);
    } else {

    }
  } else {

  }
#line 2247
  spin_lock_irq(& mdev->req_lock);
#line 2248
  goto ldv_42159;
  ldv_42158: 
#line 2249
  prepare_to_wait(& mdev->misc_wait, & wait, 2);
#line 2250
  spin_unlock_irq(& mdev->req_lock);
#line 2251
  schedule();
#line 2252
  finish_wait(& mdev->misc_wait, & wait);
#line 2253
  spin_lock_irq(& mdev->req_lock);
  ldv_42159: 
#line 2248
  tmp___2 = __inc_ap_bio_cond(mdev);
#line 2248
  if (tmp___2 == 0) {
#line 2249
    goto ldv_42158;
  } else {

  }
#line 2255
  atomic_add(count, & mdev->ap_bio_cnt);
#line 2256
  spin_unlock_irq(& mdev->req_lock);
#line 2257
  return;
}
}
#line 2259 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2261
  tmp = drbd_get_max_buffers(mdev);
#line 2261
  mxb = tmp;
#line 2262
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2262
  ap_bio = tmp___0;
#line 2264
  if (ap_bio < 0) {
#line 2264
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2264
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2264
    printk("<3>%s %s: ASSERT( ap_bio >= 0 ) in %s:%d\n", tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
           2264);
  } else {

  }
#line 2268
  if (ap_bio < mxb) {
#line 2269
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2270
  if (ap_bio == 0) {
#line 2270
    tmp___4 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2270
    if (tmp___4 != 0) {
#line 2271
      tmp___3 = test_and_set_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 2271
      if (tmp___3 == 0) {
#line 2272
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2273
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_plug_device(struct drbd_conf *mdev ) 
{ 
  struct request_queue *q ;
  int tmp ;

  {
#line 51
  q = bdev_get_queue(mdev->this_bdev);
#line 53
  spin_lock_irq(q->queue_lock);
#line 58
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& q->queue_flags));
#line 58
  if (tmp == 0) {
#line 59
    blk_plug_device(q);
#line 60
    del_timer(& q->unplug_timer);
  } else {

  }
#line 63
  spin_unlock_irq(q->queue_lock);
#line 64
  return;
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 207
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 207
  if (tmp != 0L) {
#line 207
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (207), "i" (12UL));
    ldv_42266: ;
#line 207
    goto ldv_42266;
  } else {

  }
#line 208
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 216
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 216
  if (tmp != 0L) {
#line 216
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (216), "i" (12UL));
    ldv_42271: ;
#line 216
    goto ldv_42271;
  } else {

  }
#line 217
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 224
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct bio *bio ;
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 250
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 250
  req = (struct drbd_request *)tmp;
#line 252
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 252
  if (tmp___0 != 0L) {
#line 253
    bio = bio_clone(bio_src, 16U);
#line 255
    req->rq_state = 0UL;
#line 256
    req->mdev = mdev;
#line 257
    req->master_bio = bio_src;
#line 258
    req->private_bio = bio;
#line 259
    req->epoch = 0U;
#line 260
    req->sector = bio->bi_sector;
#line 261
    req->size = bio->bi_size;
#line 262
    req->start_time = jiffies;
#line 263
    INIT_HLIST_NODE(& req->colision);
#line 264
    INIT_LIST_HEAD(& req->tl_requests);
#line 265
    INIT_LIST_HEAD(& req->w.list);
#line 267
    bio->bi_private = (void *)req;
#line 268
    bio->bi_end_io = & drbd_endio_pri;
#line 269
    bio->bi_next = 0;
  } else {

  }
#line 271
  return (req);
}
}
#line 292
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 84
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 86
  rcu_read_lock();
#line 86
  switch (4UL) {
  case 1UL: 
#line 86
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 86
  goto ldv_42340;
  case 2UL: 
#line 86
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 86
  goto ldv_42340;
  case 4UL: 
#line 86
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 86
  goto ldv_42340;
  case 8UL: 
#line 86
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 86
  goto ldv_42340;
  default: 
#line 86
  __bad_percpu_size();
  }
  ldv_42340: 
#line 86
  cpu = pfo_ret__;
#line 87
  __vpp_verify = 0;
#line 87
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 87
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 87
  if ((mdev->vdisk)->part0.partno != 0) {
#line 87
    __vpp_verify___0 = 0;
#line 87
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 87
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 87
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 88
  __vpp_verify___1 = 0;
#line 88
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 88
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 88
  if ((mdev->vdisk)->part0.partno != 0) {
#line 88
    __vpp_verify___2 = 0;
#line 88
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 88
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 88
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 89
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 90
  rcu_read_unlock();
#line 91
  return;
}
}
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 96
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 97
  duration = (unsigned long )jiffies - req->start_time;
#line 99
  rcu_read_lock();
#line 99
  switch (4UL) {
  case 1UL: 
#line 99
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 99
  goto ldv_42373;
  case 2UL: 
#line 99
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 99
  goto ldv_42373;
  case 4UL: 
#line 99
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 99
  goto ldv_42373;
  case 8UL: 
#line 99
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 99
  goto ldv_42373;
  default: 
#line 99
  __bad_percpu_size();
  }
  ldv_42373: 
#line 99
  cpu = pfo_ret__;
#line 100
  __vpp_verify = 0;
#line 100
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 100
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 100
  if ((mdev->vdisk)->part0.partno != 0) {
#line 100
    __vpp_verify___0 = 0;
#line 100
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 100
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 100
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 101
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 102
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 103
  rcu_read_unlock();
#line 104
  return;
}
}
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 108
  s = req->rq_state;
#line 112
  if ((int )rw == 1) {
#line 119
    list_del(& req->tl_requests);
#line 124
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 125
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                             125U);
    } else {

    }
#line 127
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 128
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         128U);
    } else {

    }
#line 140
    if ((s & 7UL) != 0UL) {
#line 141
      tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 141
      if (tmp___2 != 0) {
#line 142
        drbd_al_complete_io(mdev, req->sector);
#line 143
        put_ldev(mdev);
      } else {
#line 144
        tmp___1 = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 144
        if (tmp___1 != 0) {
#line 145
          tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 145
          tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 145
          printk("<4>%s %s: Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                 tmp___0, tmp, (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 163
  if ((int )rw == 1 && ((s & 7UL) != 0UL && (s & 4UL) == 0UL)) {
#line 165
    if ((unsigned long )((void *)req->w.list.next) != 0xdead000000100100UL) {
#line 165
      tmp___7 = list_empty((struct list_head  const  *)(& req->w.list));
#line 165
      if (tmp___7 == 0) {
#line 169
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 169
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 169
        printk("<3>%s %s: req->w.list.next = %p\n", tmp___4, tmp___3, req->w.list.next);
#line 170
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 170
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 170
        printk("<3>%s %s: req->w.list.prev = %p\n", tmp___6, tmp___5, req->w.list.prev);
      } else {

      }
    } else {

    }
#line 172
    req->w.cb = & w_io_error;
#line 173
    drbd_queue_work(& mdev->data.work, & req->w);
  } else {
#line 176
    drbd_req_free(req);
  }
#line 177
  return;
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 189
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 189
  if (tmp != 0) {
#line 190
    return;
  } else {

  }
#line 192
  b = mdev->newest_tle;
#line 193
  b->w.cb = & w_send_barrier;
#line 198
  inc_ap_pending(mdev);
#line 199
  drbd_queue_work(& mdev->data.work, & b->w);
#line 200
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 201
  return;
}
}
#line 203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct hlist_node  const  *__mptr ;
  int tmp___2 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 206
  s = req->rq_state;
#line 214
  if ((int )mdev->state.ldv_33657.conn > 9 && req->epoch == (mdev->newest_tle)->br_number) {
#line 216
    queue_barrier(mdev);
  } else {

  }
#line 221
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 222
    sector = req->sector;
#line 223
    size = (int const   )req->size;
#line 229
    slot = tl_hash_slot___0(mdev, sector);
#line 230
    n = slot->first;
#line 230
    goto ldv_42416;
    ldv_42415: 
#line 231
    tmp___1 = overlaps(sector, size, i->sector, (int )i->size);
#line 231
    if (tmp___1 != 0) {
#line 232
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 232
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 232
      printk("<1>%s %s: LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
             tmp___0, tmp, req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
             i->size);
    } else {

    }
#line 230
    n = n->next;
    ldv_42416: ;
#line 230
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 230
      __builtin_prefetch((void const   *)n->next);
#line 230
      if (1 != 0) {
#line 230
        __mptr = (struct hlist_node  const  *)n;
#line 230
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 230
        if (1 != 0) {
#line 231
          goto ldv_42415;
        } else {
#line 233
          goto ldv_42417;
        }
      } else {
#line 233
        goto ldv_42417;
      }
    } else {

    }
    ldv_42417: 
#line 253
    slot = ee_hash_slot___0(mdev, req->sector);
#line 254
    n = slot->first;
#line 254
    goto ldv_42424;
    ldv_42423: 
#line 255
    tmp___2 = overlaps(sector, size, e->sector, (int )e->size);
#line 255
    if (tmp___2 != 0) {
#line 256
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 257
      goto ldv_42422;
    } else {

    }
#line 254
    n = n->next;
    ldv_42424: ;
#line 254
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 254
      __builtin_prefetch((void const   *)n->next);
#line 254
      if (1 != 0) {
#line 254
        __mptr___0 = (struct hlist_node  const  *)n;
#line 254
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 254
        if (1 != 0) {
#line 255
          goto ldv_42423;
        } else {
#line 257
          goto ldv_42422;
        }
      } else {
#line 257
        goto ldv_42422;
      }
    } else {

    }
    ldv_42422: ;
  } else {

  }
#line 260
  return;
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 267
  bio_endio(m->bio, m->error);
#line 268
  dec_ap_bio(mdev);
#line 269
  return;
}
}
#line 277 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 279
  s = req->rq_state;
#line 280
  mdev = req->mdev;
#line 282
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 293
  if ((s & 16UL) != 0UL) {
#line 294
    return;
  } else {

  }
#line 295
  if ((s & 8UL) != 0UL) {
#line 296
    return;
  } else {

  }
#line 297
  if ((int )s & 1) {
#line 298
    return;
  } else {

  }
#line 300
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 322
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 323
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 323
    error = (int )tmp;
#line 327
    tmp___2 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 327
    if (tmp___2 == 0) {
#line 328
      hlist_del(& req->colision);
    } else
#line 330
    if ((s & 504UL) != 0UL) {
#line 330
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 330
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 330
      printk("<3>%s %s: ASSERT( (s & RQ_NET_MASK) == 0 ) in %s:%d\n", tmp___1, tmp___0,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
             330);
    } else {

    }
#line 333
    if (rw == 1) {
#line 334
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 337
    _drbd_end_io_acct(mdev, req);
#line 339
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 340
    m->bio = req->master_bio;
#line 341
    req->master_bio = 0;
  } else {

  }
#line 344
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 349
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 350
  return;
}
}
#line 378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int _b ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  struct hlist_node  const  *__mptr ;
  long tmp___11 ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 380
  mdev = req->mdev;
#line 381
  sector = req->sector;
#line 382
  size = (int const   )req->size;
#line 388
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 388
  if (tmp___1 == 0) {
#line 388
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 388
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 388
    printk("<3>%s %s: ASSERT( hlist_unhashed(&req->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           388);
  } else {

  }
#line 390
  tmp___2 = get_net_conf(mdev);
#line 390
  if (tmp___2 == 0) {
#line 391
    return (0);
  } else {

  }
#line 394
  _b = mdev->tl_hash_s == 0U;
#line 394
  if (_b != 0) {
#line 394
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 394
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 394
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "_req_conflicts", (char *)"mdev->tl_hash_s == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           394);
  } else {

  }
#line 394
  if (_b != 0) {
#line 395
    goto out_no_conflict;
  } else {

  }
#line 396
  tmp___5 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 396
  if (tmp___5 != 0L) {
#line 396
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (396), "i" (12UL));
    ldv_42452: ;
#line 396
    goto ldv_42452;
  } else {

  }
#line 399
  slot = tl_hash_slot___0(mdev, sector);
#line 400
  n = slot->first;
#line 400
  goto ldv_42459;
  ldv_42458: 
#line 401
  tmp___10 = overlaps(i->sector, (int )i->size, sector, size);
#line 401
  if (tmp___10 != 0) {
#line 402
    tmp___6 = get_current();
#line 402
    tmp___7 = get_current();
#line 402
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 402
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 402
    printk("<1>%s %s: %s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
           tmp___9, tmp___8, (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
           size, (unsigned long long )i->sector, i->size);
#line 408
    goto out_conflict;
  } else {

  }
#line 400
  n = n->next;
  ldv_42459: ;
#line 400
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 400
    __builtin_prefetch((void const   *)n->next);
#line 400
    if (1 != 0) {
#line 400
      __mptr = (struct hlist_node  const  *)n;
#line 400
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 400
      if (1 != 0) {
#line 401
        goto ldv_42458;
      } else {
#line 403
        goto ldv_42460;
      }
    } else {
#line 403
      goto ldv_42460;
    }
  } else {

  }
  ldv_42460: ;
#line 412
  if (mdev->ee_hash_s != 0U) {
#line 414
    tmp___11 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 414
    if (tmp___11 != 0L) {
#line 414
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (414), "i" (12UL));
      ldv_42461: ;
#line 414
      goto ldv_42461;
    } else {

    }
#line 417
    slot = ee_hash_slot___0(mdev, sector);
#line 418
    n = slot->first;
#line 418
    goto ldv_42467;
    ldv_42466: 
#line 419
    tmp___16 = overlaps(e->sector, (int )e->size, sector, size);
#line 419
    if (tmp___16 != 0) {
#line 420
      tmp___12 = get_current();
#line 420
      tmp___13 = get_current();
#line 420
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 420
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 420
      printk("<1>%s %s: %s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
             tmp___15, tmp___14, (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
             size, (unsigned long long )e->sector, e->size);
#line 426
      goto out_conflict;
    } else {

    }
#line 418
    n = n->next;
    ldv_42467: ;
#line 418
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 418
      __builtin_prefetch((void const   *)n->next);
#line 418
      if (1 != 0) {
#line 418
        __mptr___0 = (struct hlist_node  const  *)n;
#line 418
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 418
        if (1 != 0) {
#line 419
          goto ldv_42466;
        } else {
#line 421
          goto ldv_42468;
        }
      } else {
#line 421
        goto ldv_42468;
      }
    } else {

    }
    ldv_42468: ;
  } else {

  }
  out_no_conflict: 
#line 435
  put_net_conf(mdev);
#line 436
  return (0);
  out_conflict: 
#line 439
  put_net_conf(mdev);
#line 440
  return (1);
}
}
#line 455 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  struct hlist_head *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct hlist_head *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;
  int tmp___43 ;
  char const   *tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  char const   *tmp___47 ;
  char const   *tmp___48 ;
  char const   *tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  char const   *tmp___52 ;
  char const   *tmp___53 ;
  int tmp___54 ;

  {
#line 458
  mdev = req->mdev;
#line 459
  m->bio = 0;
#line 461
  switch ((unsigned int )what) {
  default: 
#line 463
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 463
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 463
  printk("<3>%s %s: LOGIC BUG in %s:%u\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
         463);
#line 464
  goto ldv_42476;
  case 1U: ;
#line 475
  if ((req->rq_state & 504UL) != 0UL) {
#line 475
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 475
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 475
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           475);
  } else {

  }
#line 476
  req->rq_state = req->rq_state | 8UL;
#line 477
  inc_ap_pending(mdev);
#line 478
  goto ldv_42476;
  case 2U: ;
#line 482
  if ((req->rq_state & 7UL) != 0UL) {
#line 482
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 482
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 482
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n", tmp___4,
           tmp___3, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           482);
  } else {

  }
#line 483
  req->rq_state = req->rq_state | 1UL;
#line 484
  goto ldv_42476;
  case 19U: ;
#line 487
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 488
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 490
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 492
  req->rq_state = req->rq_state | 6UL;
#line 493
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 495
  _req_may_be_done(req, m);
#line 496
  put_ldev(mdev);
#line 497
  goto ldv_42476;
  case 18U: 
#line 500
  req->rq_state = req->rq_state | 2UL;
#line 501
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 503
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 503
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 503
  printk("<1>%s %s: Local WRITE failed sec=%llus size=%u\n", tmp___6, tmp___5, (unsigned long long )req->sector,
         req->size);
#line 506
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 507
  _req_may_be_done(req, m);
#line 508
  put_ldev(mdev);
#line 509
  goto ldv_42476;
  case 17U: 
#line 513
  req->rq_state = req->rq_state | 2UL;
#line 514
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 515
  _req_may_be_done(req, m);
#line 516
  put_ldev(mdev);
#line 517
  goto ldv_42476;
  case 16U: 
#line 520
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         520U);
#line 522
  req->rq_state = req->rq_state | 2UL;
#line 523
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 525
  tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 525
  tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 525
  printk("<1>%s %s: Local READ failed sec=%llus size=%u\n", tmp___8, tmp___7, (unsigned long long )req->sector,
         req->size);
#line 528
  if ((req->rq_state & 504UL) != 0UL) {
#line 528
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 528
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 528
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n", tmp___10,
           tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           528);
  } else {

  }
#line 529
  req->rq_state = req->rq_state | 8UL;
#line 530
  inc_ap_pending(mdev);
#line 532
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 533
  put_ldev(mdev);
  case 4U: 
#line 553
  tmp___11 = ar_hash_slot___0(mdev, req->sector);
#line 553
  hlist_add_head(& req->colision, tmp___11);
#line 555
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 557
  if ((req->rq_state & 8UL) == 0UL) {
#line 557
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 557
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 557
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___13,
           tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           557);
  } else {

  }
#line 558
  req->rq_state = req->rq_state | 16UL;
#line 559
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 562
  drbd_queue_work(& mdev->data.work, & req->w);
#line 563
  goto ldv_42476;
  case 3U: 
#line 569
  tmp___14 = tl_hash_slot___0(mdev, req->sector);
#line 569
  hlist_add_head(& req->colision, tmp___14);
#line 589
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 593
  tmp___17 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 593
  if (tmp___17 != 0) {
#line 593
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 593
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 593
    printk("<3>%s %s: ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
           tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           593);
  } else {

  }
#line 595
  req->epoch = (mdev->newest_tle)->br_number;
#line 596
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 600
  (mdev->newest_tle)->n_req = (mdev->newest_tle)->n_req + 1;
#line 603
  if ((req->rq_state & 8UL) == 0UL) {
#line 603
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 603
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 603
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___19,
           tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           603);
  } else {

  }
#line 604
  req->rq_state = req->rq_state | 16UL;
#line 605
  req->w.cb = & w_send_dblock;
#line 606
  drbd_queue_work(& mdev->data.work, & req->w);
#line 609
  if ((mdev->newest_tle)->n_req >= (mdev->net_conf)->max_epoch_size) {
#line 610
    queue_barrier(mdev);
  } else {

  }
#line 612
  goto ldv_42476;
  case 5U: ;
  case 6U: 
#line 619
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 622
  _req_may_be_done(req, m);
#line 623
  goto ldv_42476;
  case 7U: ;
#line 627
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 631
    if ((req->rq_state & 8UL) != 0UL) {
#line 632
      tmp___20 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 632
      if (tmp___20 != 0) {
#line 632
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 632
      tmp___24 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 632
      if (tmp___24 < 0) {
#line 632
        tmp___21 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 632
        tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 632
        tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 632
        printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___23, tmp___22,
               "__req_mod", 632, tmp___21);
      } else {

      }
#line 633
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 634
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 640
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 641
  req->rq_state = req->rq_state | 32UL;
#line 647
  _req_may_be_done(req, m);
#line 648
  goto ldv_42476;
  case 8U: ;
#line 653
  if ((req->rq_state & 8UL) != 0UL) {
#line 654
    tmp___25 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 654
    if (tmp___25 != 0) {
#line 654
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 654
    tmp___29 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 654
    if (tmp___29 < 0) {
#line 654
      tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 654
      tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 654
      tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 654
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___28, tmp___27,
             "__req_mod", 654, tmp___26);
    } else {

    }
  } else {

  }
#line 655
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 656
  req->rq_state = req->rq_state | 64UL;
#line 659
  if ((req->rq_state & 16UL) == 0UL) {
#line 660
    _req_may_be_done(req, m);
  } else {

  }
#line 661
  goto ldv_42476;
  case 11U: 
#line 664
  req->rq_state = req->rq_state | 256UL;
  case 12U: ;
#line 669
  if ((unsigned int )what == 12U) {
#line 670
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 670
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 670
    printk("<1>%s %s: Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
           tmp___31, tmp___30, (unsigned long long )req->sector, req->size);
  } else {

  }
#line 673
  req->rq_state = req->rq_state | 64UL;
  case 10U: ;
  case 9U: 
#line 691
  req->rq_state = req->rq_state | 128UL;
#line 692
  if ((req->rq_state & 8UL) == 0UL) {
#line 692
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 692
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 692
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___33,
           tmp___32, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           692);
  } else {

  }
#line 693
  tmp___34 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 693
  if (tmp___34 != 0) {
#line 693
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 693
  tmp___38 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 693
  if (tmp___38 < 0) {
#line 693
    tmp___35 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 693
    tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 693
    tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 693
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___37, tmp___36,
           "__req_mod", 693, tmp___35);
  } else {

  }
#line 694
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 695
  _req_may_be_done(req, m);
#line 696
  goto ldv_42476;
  case 13U: ;
#line 700
  if ((req->rq_state & 8UL) != 0UL) {
#line 701
    tmp___39 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 701
    if (tmp___39 != 0) {
#line 701
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 701
    tmp___43 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 701
    if (tmp___43 < 0) {
#line 701
      tmp___40 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 701
      tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 701
      tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 701
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___42, tmp___41,
             "__req_mod", 701, tmp___40);
    } else {

    }
  } else {

  }
#line 702
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 704
  req->rq_state = req->rq_state | 64UL;
#line 705
  _req_may_be_done(req, m);
#line 707
  goto ldv_42476;
  case 14U: ;
#line 710
  if ((req->rq_state & 8UL) != 0UL) {
#line 714
    tmp___44 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 714
    tmp___45 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 714
    printk("<3>%s %s: FIXME (barrier_acked but pending)\n", tmp___45, tmp___44);
#line 715
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 717
  if ((req->rq_state & 32UL) == 0UL) {
#line 717
    tmp___46 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 717
    tmp___47 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 717
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_SENT ) in %s:%d\n", tmp___47,
           tmp___46, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           717);
  } else {

  }
#line 718
  req->rq_state = req->rq_state | 64UL;
#line 719
  _req_may_be_done(req, m);
#line 720
  goto ldv_42476;
  case 15U: ;
#line 723
  if ((req->rq_state & 8UL) == 0UL) {
#line 723
    tmp___48 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 723
    tmp___49 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 723
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___49,
           tmp___48, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           723);
  } else {

  }
#line 724
  tmp___50 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 724
  if (tmp___50 != 0) {
#line 724
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 724
  tmp___54 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 724
  if (tmp___54 < 0) {
#line 724
    tmp___51 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 724
    tmp___52 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 724
    tmp___53 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 724
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___53, tmp___52,
           "__req_mod", 724, tmp___51);
  } else {

  }
#line 725
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 726
  req->rq_state = req->rq_state | 192UL;
#line 727
  _req_may_be_done(req, m);
#line 728
  goto ldv_42476;
  }
  ldv_42476: ;
#line 730
  return;
}
}
#line 739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 744
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 16U) {
#line 745
    return (1);
  } else {

  }
#line 746
  if ((int )mdev->state.ldv_33657.disk > 4) {
#line 747
    return (0);
  } else {

  }
#line 748
  if ((int )mdev->state.ldv_33657.disk <= 3) {
#line 749
    return (0);
  } else {

  }
#line 751
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 752
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 754
  if (sector >= nr_sectors) {
#line 754
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 754
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 754
    printk("<3>%s %s: ASSERT( sector < nr_sectors ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           754);
  } else {

  }
#line 755
  if (esector >= nr_sectors) {
#line 755
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 755
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 755
    printk("<3>%s %s: ASSERT( esector < nr_sectors ) in %s:%d\n", tmp___2, tmp___1,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           755);
  } else {

  }
#line 757
  sbnr = sector >> 3;
#line 758
  ebnr = esector >> 3;
#line 760
  tmp___3 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 760
  return (tmp___3 == 0);
}
}
#line 763 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int err ;
  int ret ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;

  {
#line 765
  rw = (int const   )bio->bi_rw & (int const   )3;
#line 766
  size = (int const   )bio->bi_size;
#line 767
  sector = bio->bi_sector;
#line 768
  b = 0;
#line 771
  err = -5;
#line 772
  ret = 0;
#line 775
  req = drbd_req_new(mdev, bio);
#line 776
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 777
    dec_ap_bio(mdev);
#line 780
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 780
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 780
    printk("<3>%s %s: could not kmalloc() req\n", tmp___0, tmp);
#line 781
    bio_endio(bio, -12);
#line 782
    return (0);
  } else {

  }
#line 785
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 786
  if (local == 0) {
#line 787
    bio_put(req->private_bio);
#line 788
    req->private_bio = 0;
  } else {

  }
#line 790
  if (rw == 1) {
#line 791
    remote = 1;
  } else {
#line 794
    if (local != 0) {
#line 795
      tmp___1 = drbd_may_do_local_read(mdev, sector, size);
#line 795
      if (tmp___1 == 0) {
#line 801
        local = 0;
#line 802
        bio_put(req->private_bio);
#line 803
        req->private_bio = 0;
#line 804
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 807
    remote = local == 0 && (int )mdev->state.ldv_33657.pdsk > 7;
  }
#line 818
  if ((rw == 2 && (int )mdev->state.ldv_33657.disk > 3) && local == 0) {
#line 819
    err = -11;
#line 820
    goto fail_and_free_req;
  } else {

  }
#line 828
  if (rw == 1 && local != 0) {
#line 829
    drbd_al_begin_io(mdev, sector);
  } else {

  }
#line 831
  remote = remote != 0 && (*((unsigned int *)mdev + 503UL) == 65536U || (*((unsigned int *)mdev + 503UL) == 32768U && (int )mdev->state.ldv_33657.conn > 9));
#line 835
  if ((local == 0 && remote == 0) && (unsigned int )*((unsigned char *)mdev + 2014UL) == 0U) {
#line 836
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 836
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 836
    printk("<3>%s %s: IO ERROR: neither local nor remote disk\n", tmp___3, tmp___2);
#line 837
    goto fail_free_complete;
  } else {

  }
#line 846
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 846
    tmp___7 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 846
    if (tmp___7 != 0) {
      allocate_barrier: 
#line 850
      tmp___4 = kmalloc___2(56UL, 16U);
#line 850
      b = (struct drbd_tl_epoch *)tmp___4;
#line 851
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 852
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 852
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 852
        printk("<3>%s %s: Failed to alloc barrier.\n", tmp___6, tmp___5);
#line 853
        err = -12;
#line 854
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 859
  spin_lock_irq(& mdev->req_lock);
#line 861
  if ((unsigned int )*((unsigned char *)mdev + 2014UL) != 0U) {
#line 866
    ret = 1;
#line 867
    spin_unlock_irq(& mdev->req_lock);
#line 868
    goto fail_free_complete;
  } else {

  }
#line 871
  if (remote != 0) {
#line 872
    remote = *((unsigned int *)mdev + 503UL) == 65536U || (*((unsigned int *)mdev + 503UL) == 32768U && (int )mdev->state.ldv_33657.conn > 9);
#line 875
    if (remote == 0) {
#line 876
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 876
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 876
      printk("<4>%s %s: lost connection while grabbing the req_lock!\n", tmp___9,
             tmp___8);
    } else {

    }
#line 877
    if (local == 0 && remote == 0) {
#line 878
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 878
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 878
      printk("<3>%s %s: IO ERROR: neither local nor remote disk\n", tmp___11, tmp___10);
#line 879
      spin_unlock_irq(& mdev->req_lock);
#line 880
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 884
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 885
    mdev->unused_spare_tle = b;
#line 886
    b = 0;
  } else {

  }
#line 888
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 888
    tmp___12 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 888
    if (tmp___12 != 0) {
#line 893
      spin_unlock_irq(& mdev->req_lock);
#line 894
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 899
  _drbd_start_io_acct(mdev, req, bio);
#line 911
  if (remote != 0 && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 911
    tmp___16 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 911
    if (tmp___16 != 0) {
#line 913
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 914
      mdev->unused_spare_tle = 0;
    } else {
#line 911
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 916
  if (remote != 0 && rw == 1) {
#line 916
    tmp___15 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 916
    if (tmp___15 != 0) {
#line 916
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 916
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 916
      printk("<3>%s %s: ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
             tmp___14, tmp___13, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
             917);
    } else {

    }
  } else {

  }
#line 935
  if (remote != 0) {
#line 936
    _req_mod(req, to_be_send);
  } else {

  }
#line 937
  if (local != 0) {
#line 938
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 943
  if (rw == 1) {
#line 943
    tmp___22 = _req_conflicts(req);
#line 943
    if (tmp___22 != 0) {
#line 950
      if (local != 0) {
#line 951
        bio_put(req->private_bio);
#line 952
        req->private_bio = 0;
#line 953
        drbd_al_complete_io(mdev, req->sector);
#line 954
        put_ldev(mdev);
#line 955
        local = 0;
      } else {

      }
#line 957
      if (remote != 0) {
#line 958
        tmp___17 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 958
        if (tmp___17 != 0) {
#line 958
          __wake_up(& mdev->misc_wait, 3U, 1, 0);
        } else {

        }
#line 958
        tmp___21 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 958
        if (tmp___21 < 0) {
#line 958
          tmp___18 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 958
          tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 958
          tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 958
          printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___20, tmp___19,
                 "drbd_make_request_common", 958, tmp___18);
        } else {

        }
      } else {

      }
#line 959
      _drbd_end_io_acct(mdev, req);
#line 961
      bio_endio(req->master_bio, 0);
#line 962
      req->master_bio = 0;
#line 963
      dec_ap_bio(mdev);
#line 964
      drbd_req_free(req);
#line 965
      remote = 0;
    } else {

    }
  } else {

  }
#line 970
  if (remote != 0) {
#line 975
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 979
  spin_unlock_irq(& mdev->req_lock);
#line 980
  kfree((void const   *)b);
#line 982
  if (local != 0) {
#line 983
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 985
    tmp___23 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 985
    if (tmp___23 != 0) {
#line 988
      bio_endio(req->private_bio, -5);
    } else {
#line 990
      generic_make_request(req->private_bio);
    }
  } else {

  }
#line 995
  drbd_plug_device(mdev);
#line 997
  return (0);
  fail_free_complete: ;
#line 1000
  if (rw == 1 && local != 0) {
#line 1001
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 1003
  if (local != 0) {
#line 1004
    bio_put(req->private_bio);
#line 1005
    req->private_bio = 0;
#line 1006
    put_ldev(mdev);
  } else {

  }
#line 1008
  if (ret == 0) {
#line 1009
    bio_endio(bio, err);
  } else {

  }
#line 1011
  drbd_req_free(req);
#line 1012
  dec_ap_bio(mdev);
#line 1013
  kfree((void const   *)b);
#line 1015
  return (ret);
}
}
#line 1023 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 1025
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 1027
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1027
    if (tmp___3 != 0) {
#line 1028
      tmp = get_current();
#line 1028
      tmp___0 = get_current();
#line 1028
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1028
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1028
      printk("<3>%s %s: Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
             tmp___2, tmp___1, (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1034
    return (1);
  } else {

  }
#line 1046
  if ((int )mdev->state.ldv_33657.disk <= 7 && (int )mdev->state.ldv_33657.pdsk <= 7) {
#line 1047
    tmp___6 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1047
    if (tmp___6 != 0) {
#line 1048
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1048
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1048
      printk("<3>%s %s: Sorry, I have no access to good data anymore.\n", tmp___5,
             tmp___4);
    } else {

    }
#line 1049
    return (1);
  } else {

  }
#line 1052
  return (0);
}
}
#line 1055 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  int tmp ;
  bool tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;

  {
#line 1058
  mdev = (struct drbd_conf *)q->queuedata;
#line 1060
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1060
  if (tmp != 0) {
#line 1061
    bio_endio(bio, -1);
#line 1062
    return (0);
  } else {

  }
#line 1073
  tmp___0 = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 1073
  tmp___1 = __builtin_expect((long )tmp___0, 0L);
#line 1073
  if (tmp___1 != 0L) {
#line 1073
    tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 1073
    tmp___3 = __builtin_expect(tmp___2 != 0, 0L);
#line 1073
    if (tmp___3 != 0L) {
#line 1075
      bio_endio(bio, -95);
#line 1076
      return (0);
    } else {

    }
  } else {

  }
#line 1082
  if (bio->bi_size == 0U) {
#line 1082
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1082
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1082
    printk("<3>%s %s: ASSERT( bio->bi_size > 0 ) in %s:%d\n", tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           1082);
  } else {

  }
#line 1083
  if ((bio->bi_size & 511U) != 0U) {
#line 1083
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1083
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1083
    printk("<3>%s %s: ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n", tmp___7,
           tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           1083);
  } else {

  }
#line 1084
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1084
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1084
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1084
    printk("<3>%s %s: ASSERT( bio->bi_idx == 0 ) in %s:%d\n", tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           1084);
  } else {

  }
#line 1088
  s_enr = (unsigned int )(bio->bi_sector >> 6);
#line 1089
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 6);
#line 1091
  tmp___11 = __builtin_expect(s_enr == e_enr, 1L);
#line 1091
  if (tmp___11 != 0L) {
#line 1092
    inc_ap_bio(mdev, 1);
#line 1093
    tmp___10 = drbd_make_request_common(mdev, bio);
#line 1093
    return (tmp___10);
  } else {

  }
#line 1098
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 32768U) {
#line 1100
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1100
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1100
    printk("<3>%s %s: bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
           tmp___13, tmp___12, (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size,
           (unsigned long long )bio->bi_sector);
#line 1104
    bio_endio(bio, -22);
  } else {
#line 1116
    sect = bio->bi_sector;
#line 1117
    sps = 64;
#line 1118
    mask = sps + -1;
#line 1119
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1120
    bp = bio_split(bio, (int )first_sectors);
#line 1131
    inc_ap_bio(mdev, 3);
#line 1133
    if (s_enr + 1U != e_enr) {
#line 1133
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1133
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1133
      printk("<3>%s %s: ASSERT( e_enr == s_enr + 1 ) in %s:%d\n", tmp___15, tmp___14,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
             1133);
    } else {

    }
#line 1135
    goto ldv_42559;
    ldv_42558: 
#line 1136
    inc_ap_bio(mdev, 1);
    ldv_42559: 
#line 1135
    tmp___16 = drbd_make_request_common(mdev, & bp->bio1);
#line 1135
    if (tmp___16 != 0) {
#line 1136
      goto ldv_42558;
    } else {

    }

#line 1138
    goto ldv_42562;
    ldv_42561: 
#line 1139
    inc_ap_bio(mdev, 1);
    ldv_42562: 
#line 1138
    tmp___17 = drbd_make_request_common(mdev, & bp->bio2);
#line 1138
    if (tmp___17 != 0) {
#line 1139
      goto ldv_42561;
    } else {

    }
#line 1141
    dec_ap_bio(mdev);
#line 1143
    bio_pair_release(bp);
  }
#line 1145
  return (0);
}
}
#line 1161 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1163
  mdev = (struct drbd_conf *)q->queuedata;
#line 1164
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1166
  bio_size = bvm->bi_size;
#line 1169
  limit = (int )(32768U - ((bio_offset & 32767U) + bio_size));
#line 1171
  if (limit < 0) {
#line 1172
    limit = 0;
  } else {

  }
#line 1173
  if (bio_size == 0U) {
#line 1174
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1175
      limit = (int )bvec->bv_len;
    } else
#line 1176
    if (limit != 0) {
#line 1176
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1176
      if (tmp != 0) {
#line 1177
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1179
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1180
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1181
          _min1 = limit;
#line 1181
          _min2 = backing_limit;
#line 1181
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1183
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1185
  return (limit);
}
}
#line 1188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_81(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1193
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1195
  mutex_lock(ldv_func_arg1);
#line 1196
  return;
}
}
#line 1198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int ldv_mutex_trylock_82(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = mutex_trylock(ldv_func_arg1);
#line 1203
  ldv_func_res = tmp;
#line 1205
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1205
  return (tmp___0);
#line 1207
  return (ldv_func_res);
}
}
#line 1210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_83(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1215
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1217
  mutex_unlock(ldv_func_arg1);
#line 1218
  return;
}
}
#line 1220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_84(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1225
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1227
  mutex_lock(ldv_func_arg1);
#line 1228
  return;
}
}
#line 1230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1235
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1237
  mutex_unlock(ldv_func_arg1);
#line 1238
  return;
}
}
#line 1240 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1245
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1247
  mutex_unlock(ldv_func_arg1);
#line 1248
  return;
}
}
#line 116 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 118
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 118
  return (tmp != 1);
}
}
#line 122
__inline static int ldv_mutex_is_locked_99(struct mutex *lock ) ;
#line 154
int ldv_mutex_trylock_94(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_98(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_103(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_105(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_106(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_93(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_96(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_102(struct mutex *ldv_func_arg1 ) ;
#line 38
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___3(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0 && ! __warned) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        __warned = 1;
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_10675: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_10675;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___3(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___3((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___3(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___3(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___3((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc___0(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc___3(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 311 "include/linux/mm.h"
__inline static void get_page(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 313
  page = compound_head(page);
#line 314
  tmp = atomic_read((atomic_t const   *)(& page->_count));
#line 314
  tmp___0 = __builtin_expect(tmp == 0, 0L);
#line 314
  if (tmp___0 != 0L) {
#line 314
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                         "i" (314), "i" (12UL));
    ldv_15753: ;
#line 314
    goto ldv_15753;
  } else {

  }
#line 315
  atomic_inc(& page->_count);
#line 316
  return;
}
}
#line 1069 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 1071
  retval = 512;
#line 1073
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 1074
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 1076
  return ((unsigned short )retval);
}
}
#line 1079 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 1081
  tmp = bdev_get_queue(bdev);
#line 1081
  tmp___0 = queue_logical_block_size(tmp);
#line 1081
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 249
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1568 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1577
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1578
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) ;
#line 1579
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1587
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 1726 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____2(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1728
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1730
  if (forcedetach == 0) {
#line 1731
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1731
    if (tmp___1 != 0) {
#line 1732
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1732
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1732
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1734
    goto ldv_41997;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1739
  if ((int )mdev->state.ldv_33657.disk > 2) {
#line 1740
    __ns.i = mdev->state.i;
#line 1740
    __ns.ldv_33657.disk = 2U;
#line 1740
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1741
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1741
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1741
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1744
  goto ldv_41997;
  }
  ldv_41997: ;
#line 1747
  return;
}
}
#line 1757 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1760
  if (error != 0) {
#line 1762
    tmp = spinlock_check(& mdev->req_lock);
#line 1762
    flags = _raw_spin_lock_irqsave(tmp);
#line 1763
    __drbd_chk_io_error____2(mdev, forcedetach, where);
#line 1764
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1766
  return;
}
}
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  bool tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;

  {
#line 124
  md_io.mdev = mdev;
#line 125
  init_completion(& md_io.event);
#line 126
  md_io.error = 0;
#line 128
  if (rw & 1) {
#line 128
    tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 128
    if (tmp == 0) {
#line 129
      rw = rw | 32;
    } else {

    }
  } else {

  }
#line 130
  rw = rw | 192;
  retry: 
#line 133
  bio = bio_alloc(16U, 1);
#line 134
  bio->bi_bdev = bdev->md_bdev;
#line 135
  bio->bi_sector = sector;
#line 136
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 136
  ok = tmp___0 == size;
#line 137
  if (ok == 0) {
#line 138
    goto out;
  } else {

  }
#line 139
  bio->bi_private = (void *)(& md_io);
#line 140
  bio->bi_end_io = & drbd_md_io_complete;
#line 141
  bio->bi_rw = (unsigned long )rw;
#line 143
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 143
  if (tmp___1 != 0) {
#line 144
    bio_endio(bio, -5);
  } else {
#line 146
    submit_bio(rw, bio);
  }
#line 147
  wait_for_completion(& md_io.event);
#line 148
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
#line 153
  tmp___4 = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 153
  tmp___5 = __builtin_expect((long )tmp___4, 0L);
#line 153
  if (tmp___5 != 0L) {
#line 153
    tmp___6 = __builtin_expect(ok == 0, 0L);
#line 153
    if (tmp___6 != 0L) {
#line 155
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 155
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 155
      printk("<4>%s %s: Barriers not supported on meta data device - disabling\n",
             tmp___3, tmp___2);
#line 156
      set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 157
      rw = rw & -33;
#line 158
      bio_put(bio);
#line 159
      goto retry;
    } else {

    }
  } else {

  }
  out: 
#line 162
  bio_put(bio);
#line 163
  return (ok);
}
}
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  unsigned short tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  void *p ;
  void *tmp___8 ;
  void *hp ;
  void *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  long tmp___12 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___13 ;
  struct task_struct *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  sector_t tmp___17 ;
  sector_t tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  long tmp___21 ;
  void *p___0 ;
  void *tmp___22 ;
  void *hp___0 ;
  void *tmp___23 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 170
  offset = 0;
#line 171
  iop = mdev->md_io_page;
#line 173
  tmp___1 = ldv_mutex_is_locked_99(& mdev->md_io_mutex);
#line 173
  if (tmp___1 == 0) {
#line 173
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 173
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 173
    printk("<3>%s %s: ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           173);
  } else {

  }
#line 175
  tmp___2 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 175
  if (tmp___2 != 0L) {
#line 175
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (175), "i" (12UL));
    ldv_42312: ;
#line 175
    goto ldv_42312;
  } else {

  }
#line 177
  tmp___3 = bdev_logical_block_size(bdev->md_bdev);
#line 177
  logical_block_size = (int )tmp___3;
#line 178
  if (logical_block_size == 0) {
#line 179
    logical_block_size = 512;
  } else {

  }
#line 182
  if (logical_block_size != 512) {
#line 183
    mask = logical_block_size / 512 + -1;
#line 184
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 184
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 184
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 184
      printk("<3>%s %s: ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
             tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             184);
    } else {

    }
#line 185
    if ((mask + 1) * 512 != logical_block_size) {
#line 185
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 185
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 185
      printk("<3>%s %s: ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
             tmp___7, tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             185);
    } else {

    }
#line 186
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 187
    sector = (sector_t )(~ mask) & sector;
#line 188
    iop = mdev->md_io_tmpp;
#line 190
    if (rw & 1) {
#line 193
      tmp___8 = lowmem_page_address(mdev->md_io_page);
#line 193
      p = tmp___8;
#line 194
      tmp___9 = lowmem_page_address(mdev->md_io_tmpp);
#line 194
      hp = tmp___9;
#line 196
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 199
      tmp___12 = __builtin_expect(ok == 0, 0L);
#line 199
      if (tmp___12 != 0L) {
#line 200
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 200
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 200
        printk("<3>%s %s: drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
               tmp___11, tmp___10, (unsigned long long )sector);
#line 203
        return (0);
      } else {

      }
#line 206
      __len = 512UL;
#line 206
      if (__len > 63UL) {
#line 206
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 206
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 210
  tmp___17 = drbd_md_first_sector(bdev);
#line 210
  if (tmp___17 > sector) {
#line 212
    tmp___13 = get_current();
#line 212
    tmp___14 = get_current();
#line 212
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 212
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 212
    printk("<1>%s %s: %s [%d]:%s(,%llus,%s) out of range md access!\n", tmp___16,
           tmp___15, (char *)(& tmp___14->comm), tmp___13->pid, "drbd_md_sync_page_io",
           (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 210
    tmp___18 = drbd_md_last_sector(bdev);
#line 210
    if (tmp___18 < sector) {
#line 212
      tmp___13 = get_current();
#line 212
      tmp___14 = get_current();
#line 212
      tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 212
      tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 212
      printk("<1>%s %s: %s [%d]:%s(,%llus,%s) out of range md access!\n", tmp___16,
             tmp___15, (char *)(& tmp___14->comm), tmp___13->pid, "drbd_md_sync_page_io",
             (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 216
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 217
  tmp___21 = __builtin_expect(ok == 0, 0L);
#line 217
  if (tmp___21 != 0L) {
#line 218
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 218
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 218
    printk("<3>%s %s: drbd_md_sync_page_io(,%llus,%s) failed!\n", tmp___20, tmp___19,
           (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 220
    return (0);
  } else {

  }
#line 223
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 224
    tmp___22 = lowmem_page_address(mdev->md_io_page);
#line 224
    p___0 = tmp___22;
#line 225
    tmp___23 = lowmem_page_address(mdev->md_io_tmpp);
#line 225
    hp___0 = tmp___23;
#line 227
    __len___0 = 512UL;
#line 227
    if (__len___0 > 63UL) {
#line 227
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 227
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 230
  return (ok);
}
}
#line 233 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 237
  al_flags = 0UL;
#line 239
  spin_lock_irq(& mdev->al_lock);
#line 240
  tmp = lc_find(mdev->resync, enr / 4U);
#line 241
  tmp___1 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 241
  if (tmp___1 != 0L) {
#line 242
    __mptr = (struct lc_element  const  *)tmp;
#line 242
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 243
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 243
    if (tmp___0 != 0) {
#line 244
      spin_unlock_irq(& mdev->al_lock);
#line 245
      return (0);
    } else {

    }
  } else {

  }
#line 248
  al_ext = lc_get(mdev->act_log, enr);
#line 249
  al_flags = (mdev->act_log)->flags;
#line 250
  spin_unlock_irq(& mdev->al_lock);
#line 261
  return (al_ext);
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;

  {
#line 266
  enr = (unsigned int )(sector >> 13);
#line 270
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 270
  if (tmp___1 <= 0) {
#line 270
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 270
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 270
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           270);
  } else {

  }
#line 272
  al_ext = _al_get(mdev, enr);
#line 272
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 272
    goto ldv_42341;
  } else {

  }
#line 272
  tmp___2 = get_current();
#line 272
  __wait.flags = 0U;
#line 272
  __wait.private = (void *)tmp___2;
#line 272
  __wait.func = & autoremove_wake_function;
#line 272
  __wait.task_list.next = & __wait.task_list;
#line 272
  __wait.task_list.prev = & __wait.task_list;
  ldv_42344: 
#line 272
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 272
  al_ext = _al_get(mdev, enr);
#line 272
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 272
    goto ldv_42343;
  } else {

  }
#line 272
  schedule();
#line 272
  goto ldv_42344;
  ldv_42343: 
#line 272
  finish_wait(& mdev->al_wait, & __wait);
  ldv_42341: ;
#line 274
  if (al_ext->lc_number != enr) {
#line 281
    init_completion(& al_work.event);
#line 282
    al_work.al_ext = al_ext;
#line 283
    al_work.enr = enr;
#line 284
    al_work.old_enr = al_ext->lc_number;
#line 285
    al_work.w.cb = & w_al_write_transaction;
#line 286
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 287
    wait_for_completion(& al_work.event);
#line 289
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 291
    spin_lock_irq(& mdev->al_lock);
#line 292
    lc_changed(mdev->act_log, al_ext);
#line 293
    spin_unlock_irq(& mdev->al_lock);
#line 294
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 296
  return;
}
}
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 300
  enr = (unsigned int )(sector >> 13);
#line 304
  tmp = spinlock_check(& mdev->al_lock);
#line 304
  flags = _raw_spin_lock_irqsave(tmp);
#line 306
  extent = lc_find(mdev->act_log, enr);
#line 308
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 309
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 310
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 310
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 310
    printk("<3>%s %s: al_complete_io() called on inactive extent %u\n", tmp___1, tmp___0,
           enr);
#line 311
    return;
  } else {

  }
#line 314
  tmp___2 = lc_put(mdev->act_log, extent);
#line 314
  if (tmp___2 == 0U) {
#line 315
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 317
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 318
  return;
}
}
#line 321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  __u32 tmp___3 ;
  unsigned int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 323
  __mptr = (struct drbd_work  const  *)w;
#line 323
  aw = (struct update_al_work *)__mptr;
#line 324
  updated = aw->al_ext;
#line 325
  new_enr = aw->enr;
#line 326
  evicted = aw->old_enr;
#line 331
  xor_sum = 0U;
#line 333
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 333
  if (tmp___1 == 0) {
#line 334
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 334
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 334
    printk("<3>%s %s: get_ldev() failed in w_al_write_transaction\n", tmp___0, tmp);
#line 335
    complete(& ((struct update_al_work *)w)->event);
#line 336
    return (1);
  } else {

  }
#line 342
  if ((int )mdev->state.ldv_33657.conn <= 9 && evicted != 4294967295U) {
#line 343
    drbd_bm_write_sect(mdev, (unsigned long )(evicted / 4U));
  } else {

  }
#line 345
  ldv_mutex_lock_100(& mdev->md_io_mutex);
#line 346
  tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 346
  buffer = (struct al_transaction *)tmp___2;
#line 348
  buffer->magic = 1728214147U;
#line 349
  tmp___3 = __fswab32(mdev->al_tr_number);
#line 349
  buffer->tr_number = tmp___3;
#line 351
  tmp___4 = lc_index_of(mdev->act_log, updated);
#line 351
  n = (int )tmp___4;
#line 353
  tmp___5 = __fswab32((__u32 )n);
#line 353
  buffer->updates[0].pos = tmp___5;
#line 354
  tmp___6 = __fswab32(new_enr);
#line 354
  buffer->updates[0].extent = tmp___6;
#line 356
  xor_sum = xor_sum ^ new_enr;
#line 358
  __min1 = 61;
#line 358
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 358
  mx = __min1 < __min2 ? __min1 : __min2;
#line 360
  i = 0;
#line 360
  goto ldv_42378;
  ldv_42377: 
#line 361
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 362
  tmp___7 = lc_element_by_index(mdev->act_log, idx);
#line 362
  extent_nr = tmp___7->lc_number;
#line 363
  tmp___8 = __fswab32(idx);
#line 363
  buffer->updates[i + 1].pos = tmp___8;
#line 364
  tmp___9 = __fswab32(extent_nr);
#line 364
  buffer->updates[i + 1].extent = tmp___9;
#line 365
  xor_sum = xor_sum ^ extent_nr;
#line 360
  i = i + 1;
  ldv_42378: ;
#line 360
  if (i < mx) {
#line 361
    goto ldv_42377;
  } else {

  }

#line 367
  goto ldv_42381;
  ldv_42380: 
#line 368
  buffer->updates[i + 1].pos = 4294967295U;
#line 369
  buffer->updates[i + 1].extent = 4294967295U;
#line 370
  xor_sum = ~ xor_sum;
#line 367
  i = i + 1;
  ldv_42381: ;
#line 367
  if (i <= 60) {
#line 368
    goto ldv_42380;
  } else {

  }
#line 372
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 373
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 374
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 376
  tmp___10 = __fswab32(xor_sum);
#line 376
  buffer->xor_sum = tmp___10;
#line 378
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 381
  tmp___11 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 381
  if (tmp___11 == 0) {
#line 382
    drbd_chk_io_error____0(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 384
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 384
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 386
    mdev->al_tr_pos = 0;
  } else {

  }
#line 388
  if (mdev->al_tr_pos > 63) {
#line 388
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 388
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 388
    printk("<3>%s %s: ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n", tmp___13,
           tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           388);
  } else {

  }
#line 389
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 391
  ldv_mutex_unlock_101(& mdev->md_io_mutex);
#line 393
  complete(& ((struct update_al_work *)w)->event);
#line 394
  put_ldev(mdev);
#line 396
  return (1);
}
}
#line 408 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 415
  xor_sum = 0U;
#line 417
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 421
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 421
  if (tmp == 0) {
#line 422
    return (-1);
  } else {

  }
#line 424
  tmp___0 = __fswab32(b->magic);
#line 424
  rv = tmp___0 == 2205418087U;
#line 426
  i = 0;
#line 426
  goto ldv_42395;
  ldv_42394: 
#line 427
  tmp___1 = __fswab32(b->updates[i].extent);
#line 427
  xor_sum = tmp___1 ^ xor_sum;
#line 426
  i = i + 1;
  ldv_42395: ;
#line 426
  if (i <= 61) {
#line 427
    goto ldv_42394;
  } else {

  }
#line 428
  tmp___2 = __fswab32(b->xor_sum);
#line 428
  rv = (tmp___2 == xor_sum) & rv;
#line 430
  return (rv);
}
}
#line 440 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 446
  active_extents = 0;
#line 447
  transactions = 0;
#line 448
  found_valid = 0;
#line 449
  from = 0;
#line 450
  to = 0;
#line 451
  from_tnr = 0U;
#line 452
  to_tnr = 0U;
#line 455
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 460
  ldv_mutex_lock_102(& mdev->md_io_mutex);
#line 461
  tmp = lowmem_page_address(mdev->md_io_page);
#line 461
  buffer = (struct al_transaction *)tmp;
#line 464
  i = 0;
#line 464
  goto ldv_42415;
  ldv_42414: 
#line 465
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 466
  if (rv == 0) {
#line 467
    goto ldv_42413;
  } else {

  }
#line 468
  if (rv == -1) {
#line 469
    ldv_mutex_unlock_103(& mdev->md_io_mutex);
#line 470
    return (0);
  } else {

  }
#line 472
  tmp___0 = __fswab32(buffer->tr_number);
#line 472
  cnr = tmp___0;
#line 474
  found_valid = found_valid + 1;
#line 474
  if (found_valid == 1) {
#line 475
    from = i;
#line 476
    to = i;
#line 477
    from_tnr = cnr;
#line 478
    to_tnr = cnr;
#line 479
    goto ldv_42413;
  } else {

  }
#line 481
  if ((int )cnr - (int )from_tnr < 0) {
#line 482
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 482
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 482
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 482
      printk("<3>%s %s: ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n", tmp___2,
             tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             482);
    } else {

    }
#line 483
    from = i;
#line 484
    from_tnr = cnr;
  } else {

  }
#line 486
  if ((int )cnr - (int )to_tnr > 0) {
#line 487
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 487
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 487
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 487
      printk("<3>%s %s: ASSERT( cnr - to_tnr == i - to ) in %s:%d\n", tmp___4, tmp___3,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             487);
    } else {

    }
#line 488
    to = i;
#line 489
    to_tnr = cnr;
  } else {

  }
  ldv_42413: 
#line 464
  i = i + 1;
  ldv_42415: ;
#line 464
  if (i <= mx) {
#line 465
    goto ldv_42414;
  } else {

  }

#line 493
  if (found_valid == 0) {
#line 494
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 494
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 494
    printk("<4>%s %s: No usable activity log found.\n", tmp___6, tmp___5);
#line 495
    ldv_mutex_unlock_104(& mdev->md_io_mutex);
#line 496
    return (1);
  } else {

  }
#line 501
  i = from;
  ldv_42430: 
#line 507
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 508
  _b = rv == 0;
#line 508
  if (_b != 0) {
#line 508
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 508
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 508
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___8, tmp___7, "drbd_al_read_log",
           (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           508);
  } else {

  }
#line 508
  if (_b != 0) {
#line 508
    goto cancel;
  } else {

  }
#line 509
  if (rv == -1) {
#line 510
    ldv_mutex_unlock_105(& mdev->md_io_mutex);
#line 511
    return (0);
  } else {

  }
#line 514
  tmp___9 = __fswab32(buffer->tr_number);
#line 514
  trn = tmp___9;
#line 516
  spin_lock_irq(& mdev->al_lock);
#line 522
  j = 61;
#line 522
  goto ldv_42427;
  ldv_42426: 
#line 523
  tmp___10 = __fswab32(buffer->updates[j].pos);
#line 523
  pos = (int )tmp___10;
#line 524
  tmp___11 = __fswab32(buffer->updates[j].extent);
#line 524
  extent_nr = tmp___11;
#line 526
  if (extent_nr == 4294967295U) {
#line 527
    goto ldv_42425;
  } else {

  }
#line 529
  lc_set(mdev->act_log, extent_nr, pos);
#line 530
  active_extents = active_extents + 1;
  ldv_42425: 
#line 522
  j = j - 1;
  ldv_42427: ;
#line 522
  if (j >= 0) {
#line 523
    goto ldv_42426;
  } else {

  }
#line 532
  spin_unlock_irq(& mdev->al_lock);
#line 534
  transactions = transactions + 1;
  cancel: ;
#line 537
  if (i == to) {
#line 538
    goto ldv_42429;
  } else {

  }
#line 539
  i = i + 1;
#line 540
  if (i > mx) {
#line 541
    i = 0;
  } else {

  }
#line 542
  goto ldv_42430;
  ldv_42429: 
#line 544
  mdev->al_tr_number = to_tnr + 1U;
#line 545
  mdev->al_tr_pos = to;
#line 546
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 546
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 548
    mdev->al_tr_pos = 0;
  } else {

  }
#line 551
  ldv_mutex_unlock_106(& mdev->md_io_mutex);
#line 553
  tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 553
  tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 553
  printk("<6>%s %s: Found %d transactions (%d active extents) in activity log.\n",
         tmp___13, tmp___12, transactions, active_extents);
#line 556
  return (1);
}
}
#line 559 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void atodb_endio(struct bio *bio , int error ) 
{ 
  struct drbd_atodb_wait *wc ;
  struct drbd_conf *mdev ;
  struct page *page ;
  int uptodate ;
  int tmp ;

  {
#line 561
  wc = (struct drbd_atodb_wait *)bio->bi_private;
#line 562
  mdev = wc->mdev;
#line 564
  uptodate = (int )bio->bi_flags & 1;
#line 569
  if (error == 0 && uptodate == 0) {
#line 570
    error = -5;
  } else {

  }
#line 572
  drbd_chk_io_error____0(mdev, error, 1, "atodb_endio");
#line 573
  if (error != 0 && wc->error == 0) {
#line 574
    wc->error = error;
  } else {

  }
#line 576
  tmp = atomic_dec_and_test(& wc->count);
#line 576
  if (tmp != 0) {
#line 577
    complete(& wc->io_done);
  } else {

  }
#line 579
  page = (bio->bi_io_vec)->bv_page;
#line 580
  put_page(page);
#line 581
  bio_put(bio);
#line 582
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 583
  put_ldev(mdev);
#line 584
  return;
}
}
#line 591 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int atodb_prepare_unless_covered(struct drbd_conf *mdev , struct bio **bios ,
                                        unsigned int enr , struct drbd_atodb_wait *wc ) 
{ 
  struct bio *bio ;
  struct page *page ;
  sector_t on_disk_sector ;
  unsigned int page_offset___0 ;
  int offset ;
  int i ;
  int err ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct bio_vec  const  *prev_bv ;
  void *tmp___1 ;
  size_t __min1 ;
  size_t __min2 ;
  size_t tmp___2 ;
  int tmp___3 ;

  {
#line 599
  page_offset___0 = 4096U;
#line 601
  i = 0;
#line 602
  err = -12;
#line 606
  enr = enr & 4294967288U;
#line 607
  on_disk_sector = (sector_t )(((u64 )enr + (mdev->ldev)->md.md_offset) + (u64 )(mdev->ldev)->md.bm_offset);
#line 610
  if ((on_disk_sector & 7UL) != 0UL) {
#line 610
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 610
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 610
    printk("<3>%s %s: ASSERT( !(on_disk_sector & 7U) ) in %s:%d\n", tmp___0, tmp,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           610);
  } else {

  }
#line 619
  goto ldv_42454;
  ldv_42453: ;
#line 620
  if (bio->bi_sector == on_disk_sector) {
#line 621
    return (0);
  } else {

  }
#line 622
  i = i + 1;
  ldv_42454: 
#line 619
  bio = *(bios + (unsigned long )i);
#line 619
  if ((unsigned long )bio != (unsigned long )((struct bio *)0)) {
#line 620
    goto ldv_42453;
  } else {

  }
#line 627
  bio = bio_alloc(208U, 1);
#line 628
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 629
    return (-12);
  } else {

  }
#line 631
  if (i > 0) {
#line 632
    prev_bv = (struct bio_vec  const  *)(*(bios + ((unsigned long )i + 0xffffffffffffffffUL)))->bi_io_vec;
#line 633
    page_offset___0 = (unsigned int )prev_bv->bv_offset + (unsigned int )prev_bv->bv_len;
#line 634
    page = prev_bv->bv_page;
  } else {

  }
#line 636
  if (page_offset___0 == 4096U) {
#line 637
    page = alloc_pages(2U, 0U);
#line 638
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 639
      goto out_bio_put;
    } else {

    }
#line 640
    page_offset___0 = 0U;
  } else {
#line 642
    get_page(page);
  }
#line 645
  offset = (int )(enr << 6);
#line 646
  tmp___1 = kmap(page);
#line 647
  __min1 = 512UL;
#line 647
  tmp___2 = drbd_bm_words(mdev);
#line 647
  __min2 = tmp___2 - (size_t )offset;
#line 647
  drbd_bm_get_lel(mdev, (size_t )offset, __min1 < __min2 ? __min1 : __min2, (unsigned long *)tmp___1 + (unsigned long )page_offset___0);
#line 649
  kunmap(page);
#line 651
  bio->bi_private = (void *)wc;
#line 652
  bio->bi_end_io = & atodb_endio;
#line 653
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 654
  bio->bi_sector = on_disk_sector;
#line 656
  tmp___3 = bio_add_page(bio, page, 4096U, page_offset___0);
#line 656
  if (tmp___3 != 4096) {
#line 657
    goto out_put_page;
  } else {

  }
#line 659
  atomic_inc(& wc->count);
#line 665
  atomic_inc(& mdev->local_cnt);
#line 667
  *(bios + (unsigned long )i) = bio;
#line 669
  return (0);
  out_put_page: 
#line 672
  err = -22;
#line 673
  put_page(page);
  out_bio_put: 
#line 675
  bio_put(bio);
#line 676
  return (err);
}
}
#line 686 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) 
{ 
  int i ;
  int nr_elements ;
  unsigned int enr ;
  struct bio **bios ;
  struct drbd_atodb_wait wc ;
  int _b ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;
  struct lc_element *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  struct request_queue *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  struct lc_element *tmp___13 ;

  {
#line 693
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 693
  _b = tmp == 0;
#line 693
  if (_b != 0) {
#line 693
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 693
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 693
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "drbd_al_to_on_disk_bm",
           (char *)"!get_ldev_if_state(mdev, D_ATTACHING)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           693);
  } else {

  }
#line 693
  if (_b != 0) {
#line 694
    return;
  } else {

  }
#line 696
  tmp___2 = lc_try_lock(mdev->act_log);
#line 696
  if (tmp___2 != 0) {
#line 696
    goto ldv_42473;
  } else {

  }
#line 696
  tmp___3 = get_current();
#line 696
  __wait.flags = 0U;
#line 696
  __wait.private = (void *)tmp___3;
#line 696
  __wait.func = & autoremove_wake_function;
#line 696
  __wait.task_list.next = & __wait.task_list;
#line 696
  __wait.task_list.prev = & __wait.task_list;
  ldv_42476: 
#line 696
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 696
  tmp___4 = lc_try_lock(mdev->act_log);
#line 696
  if (tmp___4 != 0) {
#line 696
    goto ldv_42475;
  } else {

  }
#line 696
  schedule();
#line 696
  goto ldv_42476;
  ldv_42475: 
#line 696
  finish_wait(& mdev->al_wait, & __wait);
  ldv_42473: 
#line 698
  nr_elements = (int )(mdev->act_log)->nr_elements;
#line 701
  tmp___5 = kzalloc___0((unsigned long )nr_elements * 8UL, 208U);
#line 701
  bios = (struct bio **)tmp___5;
#line 702
  if ((unsigned long )bios == (unsigned long )((struct bio **)0)) {
#line 703
    goto submit_one_by_one;
  } else {

  }
#line 705
  atomic_set(& wc.count, 0);
#line 706
  init_completion(& wc.io_done);
#line 707
  wc.mdev = mdev;
#line 708
  wc.error = 0;
#line 710
  i = 0;
#line 710
  goto ldv_42481;
  ldv_42480: 
#line 711
  tmp___6 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 711
  enr = tmp___6->lc_number;
#line 712
  if (enr == 4294967295U) {
#line 713
    goto ldv_42478;
  } else {

  }
#line 715
  tmp___7 = atodb_prepare_unless_covered(mdev, bios, enr / 4U, & wc);
#line 715
  if (tmp___7 != 0) {
#line 718
    goto free_bios_submit_one_by_one;
  } else {

  }
  ldv_42478: 
#line 710
  i = i + 1;
  ldv_42481: ;
#line 710
  if (i < nr_elements) {
#line 711
    goto ldv_42480;
  } else {

  }
#line 722
  lc_unlock(mdev->act_log);
#line 723
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 726
  i = 0;
#line 726
  goto ldv_42485;
  ldv_42484: ;
#line 727
  if ((unsigned long )*(bios + (unsigned long )i) == (unsigned long )((struct bio *)0)) {
#line 728
    goto ldv_42483;
  } else {

  }
#line 729
  tmp___8 = drbd_insert_fault(mdev, 0U);
#line 729
  if (tmp___8 != 0) {
#line 730
    (*(bios + (unsigned long )i))->bi_rw = 1UL;
#line 731
    bio_endio(*(bios + (unsigned long )i), -5);
  } else {
#line 733
    submit_bio(1, *(bios + (unsigned long )i));
  }
#line 726
  i = i + 1;
  ldv_42485: ;
#line 726
  if (i < nr_elements) {
#line 727
    goto ldv_42484;
  } else {

  }
  ldv_42483: 
#line 737
  tmp___9 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 737
  drbd_blk_run_queue(tmp___9);
#line 740
  drbd_md_flush(mdev);
#line 748
  tmp___10 = atomic_read((atomic_t const   *)(& wc.count));
#line 748
  if (tmp___10 != 0) {
#line 749
    wait_for_completion(& wc.io_done);
  } else {

  }
#line 751
  put_ldev(mdev);
#line 753
  kfree((void const   *)bios);
#line 754
  return;
  free_bios_submit_one_by_one: 
#line 758
  i = 0;
#line 758
  goto ldv_42487;
  ldv_42486: 
#line 759
  bio_endio(*(bios + (unsigned long )i), 0);
#line 758
  i = i + 1;
  ldv_42487: ;
#line 758
  if (i < nr_elements && (unsigned long )*(bios + (unsigned long )i) != (unsigned long )((struct bio *)0)) {
#line 759
    goto ldv_42486;
  } else {

  }
#line 761
  kfree((void const   *)bios);
  submit_one_by_one: 
#line 764
  tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 764
  tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 764
  printk("<4>%s %s: Using the slow drbd_al_to_on_disk_bm()\n", tmp___12, tmp___11);
#line 766
  i = 0;
#line 766
  goto ldv_42491;
  ldv_42490: 
#line 767
  tmp___13 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 767
  enr = tmp___13->lc_number;
#line 768
  if (enr == 4294967295U) {
#line 769
    goto ldv_42489;
  } else {

  }
#line 772
  drbd_bm_write_sect(mdev, (unsigned long )(enr / 4U));
  ldv_42489: 
#line 766
  i = i + 1;
  ldv_42491: ;
#line 766
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 767
    goto ldv_42490;
  } else {

  }
#line 775
  lc_unlock(mdev->act_log);
#line 776
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 777
  put_ldev(mdev);
#line 778
  return;
}
}
#line 784 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct lc_element *tmp___2 ;
  unsigned long tmp___3 ;
  char *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 787
  add = 0UL;
#line 791
  tmp = lc_try_lock(mdev->act_log);
#line 791
  if (tmp != 0) {
#line 791
    goto ldv_42500;
  } else {

  }
#line 791
  tmp___0 = get_current();
#line 791
  __wait.flags = 0U;
#line 791
  __wait.private = (void *)tmp___0;
#line 791
  __wait.func = & autoremove_wake_function;
#line 791
  __wait.task_list.next = & __wait.task_list;
#line 791
  __wait.task_list.prev = & __wait.task_list;
  ldv_42503: 
#line 791
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 791
  tmp___1 = lc_try_lock(mdev->act_log);
#line 791
  if (tmp___1 != 0) {
#line 791
    goto ldv_42502;
  } else {

  }
#line 791
  schedule();
#line 791
  goto ldv_42503;
  ldv_42502: 
#line 791
  finish_wait(& mdev->al_wait, & __wait);
  ldv_42500: 
#line 793
  i = 0;
#line 793
  goto ldv_42506;
  ldv_42505: 
#line 794
  tmp___2 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 794
  enr = tmp___2->lc_number;
#line 795
  if (enr == 4294967295U) {
#line 796
    goto ldv_42504;
  } else {

  }
#line 797
  tmp___3 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 797
  add = tmp___3 + add;
  ldv_42504: 
#line 793
  i = i + 1;
  ldv_42506: ;
#line 793
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 794
    goto ldv_42505;
  } else {

  }
#line 800
  lc_unlock(mdev->act_log);
#line 801
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 803
  tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 803
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 803
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 803
  printk("<6>%s %s: Marked additional %s as out-of-sync based on AL.\n", tmp___6,
         tmp___5, tmp___4);
#line 804
  return;
}
}
#line 807 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 811
  spin_lock_irq(& mdev->al_lock);
#line 812
  rv = al_ext->refcnt == 0U;
#line 813
  tmp = __builtin_expect(rv != 0, 1L);
#line 813
  if (tmp != 0L) {
#line 814
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 815
  spin_unlock_irq(& mdev->al_lock);
#line 817
  return (rv);
}
}
#line 829 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 834
  tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 834
  if (tmp___1 == 0) {
#line 834
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 834
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 834
    printk("<3>%s %s: ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           834);
  } else {

  }
#line 836
  i = 0;
#line 836
  goto ldv_42524;
  ldv_42523: 
#line 837
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 838
  if (al_ext->lc_number == 4294967295U) {
#line 839
    goto ldv_42518;
  } else {

  }
#line 840
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 840
  if (tmp___2 != 0) {
#line 840
    goto ldv_42519;
  } else {

  }
#line 840
  tmp___3 = get_current();
#line 840
  __wait.flags = 0U;
#line 840
  __wait.private = (void *)tmp___3;
#line 840
  __wait.func = & autoremove_wake_function;
#line 840
  __wait.task_list.next = & __wait.task_list;
#line 840
  __wait.task_list.prev = & __wait.task_list;
  ldv_42522: 
#line 840
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 840
  tmp___4 = _try_lc_del(mdev, al_ext);
#line 840
  if (tmp___4 != 0) {
#line 840
    goto ldv_42521;
  } else {

  }
#line 840
  schedule();
#line 840
  goto ldv_42522;
  ldv_42521: 
#line 840
  finish_wait(& mdev->al_wait, & __wait);
  ldv_42519: ;
  ldv_42518: 
#line 836
  i = i + 1;
  ldv_42524: ;
#line 836
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 837
    goto ldv_42523;
  } else {

  }
#line 843
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 844
  return;
}
}
#line 846 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned long tmp___3 ;

  {
#line 848
  __mptr = (struct drbd_work  const  *)w;
#line 848
  udw = (struct update_odbm_work *)__mptr;
#line 850
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 850
  if (tmp___2 == 0) {
#line 851
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 851
    if (tmp___1 != 0) {
#line 852
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 852
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 852
      printk("<4>%s %s: Can not update on disk bitmap, local IO disabled.\n", tmp___0,
             tmp);
    } else {

    }
#line 853
    kfree((void const   *)udw);
#line 854
    return (1);
  } else {

  }
#line 857
  drbd_bm_write_sect(mdev, (unsigned long )udw->enr);
#line 858
  put_ldev(mdev);
#line 860
  kfree((void const   *)udw);
#line 862
  tmp___3 = drbd_bm_total_weight(mdev);
#line 862
  if (tmp___3 <= mdev->rs_failed) {
#line 863
    switch ((int )mdev->state.ldv_33657.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 866
    drbd_resync_finished(mdev);
    default: ;
#line 869
    goto ldv_42540;
    }
    ldv_42540: ;
  } else {

  }
#line 872
  drbd_bcast_sync_progress(mdev);
#line 874
  return (1);
}
}
#line 884 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  void *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 892
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 892
  if (tmp___1 == 0) {
#line 892
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 892
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 892
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           892);
  } else {

  }
#line 896
  enr = (unsigned int )(sector >> 15);
#line 898
  e = lc_get(mdev->resync, enr);
#line 899
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 900
    __mptr = (struct lc_element  const  *)e;
#line 900
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 901
    if (ext->lce.lc_number == enr) {
#line 902
      if (success != 0) {
#line 903
        ext->rs_left = ext->rs_left - count;
      } else {
#line 905
        ext->rs_failed = ext->rs_failed + count;
      }
#line 906
      if (ext->rs_left < ext->rs_failed) {
#line 907
        tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 907
        tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 907
        printk("<3>%s %s: BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
               tmp___3, tmp___2, (unsigned long long )sector, ext->lce.lc_number,
               ext->rs_left, ext->rs_failed, count);
#line 912
        dump_stack();
#line 914
        lc_put(mdev->resync, & ext->lce);
#line 915
        val.i = 0U;
#line 915
        val.ldv_33657.conn = 1U;
#line 915
        mask.i = 0U;
#line 915
        mask.ldv_33657.conn = 31U;
#line 915
        drbd_force_state(mdev, mask, val);
#line 916
        return;
      } else {

      }
    } else {
#line 925
      tmp___4 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 925
      rs_left = tmp___4;
#line 926
      if (ext->flags != 0UL) {
#line 927
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 927
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 927
        printk("<4>%s %s: changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n", tmp___6,
               tmp___5, ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 931
        ext->flags = 0UL;
      } else {

      }
#line 933
      if (ext->rs_failed != 0) {
#line 934
        tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 934
        tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 934
        printk("<4>%s %s: Kicking resync_lru element enr=%u out with rs_failed=%d\n",
               tmp___8, tmp___7, ext->lce.lc_number, ext->rs_failed);
#line 937
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 939
      ext->rs_left = rs_left;
#line 940
      ext->rs_failed = success == 0 ? count : 0;
#line 941
      lc_changed(mdev->resync, & ext->lce);
    }
#line 943
    lc_put(mdev->resync, & ext->lce);
#line 946
    if (ext->rs_left == ext->rs_failed) {
#line 947
      ext->rs_failed = 0;
#line 949
      tmp___9 = kmalloc___3(32UL, 32U);
#line 949
      udw = (struct update_odbm_work *)tmp___9;
#line 950
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 951
        udw->enr = ext->lce.lc_number;
#line 952
        udw->w.cb = & w_update_odbm;
#line 953
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 955
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 955
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 955
        printk("<4>%s %s: Could not kmalloc an udw\n", tmp___11, tmp___10);
#line 956
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {
#line 960
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 960
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 960
    printk("<3>%s %s: lc_get() failed! locked=%d/%d flags=%lu\n", tmp___13, tmp___12,
           mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 961
  return;
}
}
#line 974 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _b___0 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  raw_spinlock_t *tmp___7 ;
  int tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;

  {
#line 979
  count = 0UL;
#line 981
  wake_up = 0;
#line 984
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 985
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 985
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 985
    printk("<3>%s %s: drbd_set_in_sync: sector=%llus size=%d nonsense!\n", tmp___0,
           tmp, (unsigned long long )sector, size);
#line 987
    return;
  } else {

  }
#line 989
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 990
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 992
  _b = sector >= nr_sectors;
#line 992
  if (_b != 0) {
#line 992
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 992
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 992
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "__drbd_set_in_sync",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           992);
  } else {

  }
#line 992
  if (_b != 0) {
#line 992
    return;
  } else {

  }
#line 993
  _b___0 = esector >= nr_sectors;
#line 993
  if (_b___0 != 0) {
#line 993
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 993
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 993
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "__drbd_set_in_sync",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           993);
  } else {

  }
#line 993
  if (_b___0 != 0) {
#line 993
    esector = nr_sectors - 1UL;
  } else {

  }
#line 995
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1000
  tmp___5 = __builtin_expect(esector <= 6UL, 0L);
#line 1000
  if (tmp___5 != 0L) {
#line 1001
    return;
  } else {

  }
#line 1002
  tmp___6 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1002
  if (tmp___6 != 0L) {
#line 1003
    ebnr = lbnr;
  } else {
#line 1005
    ebnr = (esector - 7UL) >> 3;
  }
#line 1006
  sbnr = (sector + 7UL) >> 3;
#line 1008
  if (sbnr > ebnr) {
#line 1009
    return;
  } else {

  }
#line 1015
  tmp___7 = spinlock_check(& mdev->al_lock);
#line 1015
  flags = _raw_spin_lock_irqsave(tmp___7);
#line 1016
  tmp___8 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 1016
  count = (unsigned long )tmp___8;
#line 1017
  if (count != 0UL) {
#line 1019
    if ((unsigned long )jiffies - mdev->rs_mark_time > 2500UL) {
#line 1022
      tmp___9 = drbd_bm_total_weight(mdev);
#line 1022
      if ((mdev->rs_mark_left != tmp___9 && (unsigned int )*((unsigned short *)mdev + 1006UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 1006UL) != 320U) {
#line 1025
        mdev->rs_mark_time = jiffies;
#line 1026
        mdev->rs_mark_left = drbd_bm_total_weight(mdev);
      } else {

      }
    } else {

    }
#line 1029
    tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1029
    if (tmp___10 != 0) {
#line 1030
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 1031
      put_ldev(mdev);
    } else {

    }
#line 1035
    wake_up = 1;
  } else {

  }
#line 1037
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1038
  if (wake_up != 0) {
#line 1039
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1040
  return;
}
}
#line 1050 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int _b ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b___0 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  int tmp___7 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 1058
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1059
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1059
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1059
    printk("<3>%s %s: sector: %llus, size: %d\n", tmp___0, tmp, (unsigned long long )sector,
           size);
#line 1061
    return;
  } else {

  }
#line 1064
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1064
  if (tmp___1 == 0) {
#line 1065
    return;
  } else {

  }
#line 1067
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1068
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1070
  _b = sector >= nr_sectors;
#line 1070
  if (_b != 0) {
#line 1070
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1070
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1070
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___3, tmp___2, "__drbd_set_out_of_sync",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           1070);
  } else {

  }
#line 1070
  if (_b != 0) {
#line 1071
    goto out;
  } else {

  }
#line 1072
  _b___0 = esector >= nr_sectors;
#line 1072
  if (_b___0 != 0) {
#line 1072
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1072
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1072
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "__drbd_set_out_of_sync",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           1072);
  } else {

  }
#line 1072
  if (_b___0 != 0) {
#line 1073
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1075
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1079
  sbnr = sector >> 3;
#line 1080
  ebnr = esector >> 3;
#line 1084
  tmp___6 = spinlock_check(& mdev->al_lock);
#line 1084
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1085
  tmp___7 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 1085
  count = (unsigned int )tmp___7;
#line 1087
  enr = (unsigned int )(sector >> 15);
#line 1088
  e = lc_find(mdev->resync, enr);
#line 1089
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1090
    __mptr = (struct lc_element  const  *)e;
#line 1090
    __mptr___0 = (struct lc_element  const  *)e;
#line 1090
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 1091
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 1094
  put_ldev(mdev);
#line 1095
  return;
}
}
#line 1098 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;

  {
#line 1102
  wakeup = 0;
#line 1105
  spin_lock_irq(& mdev->al_lock);
#line 1106
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 1107
    spin_unlock_irq(& mdev->al_lock);
#line 1108
    return (0);
  } else {

  }
#line 1110
  e = lc_get(mdev->resync, enr);
#line 1111
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1111
    __mptr = (struct lc_element  const  *)e;
#line 1111
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1111
    bm_ext = 0;
  }
#line 1112
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1113
    if (bm_ext->lce.lc_number != enr) {
#line 1114
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1115
      bm_ext->rs_failed = 0;
#line 1116
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1117
      wakeup = 1;
    } else {

    }
#line 1119
    if (bm_ext->lce.refcnt == 1U) {
#line 1120
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1121
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1123
  rs_flags = (mdev->resync)->flags;
#line 1124
  spin_unlock_irq(& mdev->al_lock);
#line 1125
  if (wakeup != 0) {
#line 1126
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1128
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1129
    if ((rs_flags & 4UL) != 0UL) {
#line 1130
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1130
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1130
      printk("<4>%s %s: Have to wait for element (resync LRU too small?)\n", tmp___0,
             tmp);
    } else {

    }
#line 1132
    tmp___1 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1132
    if (tmp___1 != 0L) {
#line 1132
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1132), "i" (12UL));
      ldv_42618: ;
#line 1132
      goto ldv_42618;
    } else {

    }
  } else {

  }
#line 1135
  return (bm_ext);
}
}
#line 1138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1141
  rv = 0;
#line 1143
  spin_lock_irq(& mdev->al_lock);
#line 1144
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1144
  if (tmp != 0L) {
#line 1145
    rv = 1;
  } else {
#line 1147
    al_ext = lc_find(mdev->act_log, enr);
#line 1148
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1149
      if (al_ext->refcnt != 0U) {
#line 1150
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1153
  spin_unlock_irq(& mdev->al_lock);
#line 1160
  return (rv);
}
}
#line 1170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned int tmp___8 ;

  {
#line 1172
  enr = (unsigned int )(sector >> 15);
#line 1176
  __ret = 0;
#line 1176
  bm_ext = _bme_get(mdev, enr);
#line 1176
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1176
    tmp = get_current();
#line 1176
    __wait.flags = 0U;
#line 1176
    __wait.private = (void *)tmp;
#line 1176
    __wait.func = & autoremove_wake_function;
#line 1176
    __wait.task_list.next = & __wait.task_list;
#line 1176
    __wait.task_list.prev = & __wait.task_list;
    ldv_42637: 
#line 1176
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1176
    bm_ext = _bme_get(mdev, enr);
#line 1176
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1176
      goto ldv_42635;
    } else {

    }
#line 1176
    tmp___0 = get_current();
#line 1176
    tmp___1 = signal_pending(tmp___0);
#line 1176
    if (tmp___1 == 0) {
#line 1176
      schedule();
#line 1176
      goto ldv_42636;
    } else {

    }
#line 1176
    __ret = -512;
#line 1176
    goto ldv_42635;
    ldv_42636: ;
#line 1176
    goto ldv_42637;
    ldv_42635: 
#line 1176
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1176
  sig = __ret;
#line 1178
  if (sig != 0) {
#line 1179
    return (0);
  } else {

  }
#line 1181
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1181
  if (tmp___2 != 0) {
#line 1182
    return (1);
  } else {

  }
#line 1184
  i = 0;
#line 1184
  goto ldv_42646;
  ldv_42645: 
#line 1185
  __ret___0 = 0;
#line 1185
  tmp___7 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1185
  if (tmp___7 != 0) {
#line 1185
    tmp___3 = get_current();
#line 1185
    __wait___0.flags = 0U;
#line 1185
    __wait___0.private = (void *)tmp___3;
#line 1185
    __wait___0.func = & autoremove_wake_function;
#line 1185
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1185
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_42643: 
#line 1185
    prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1185
    tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1185
    if (tmp___4 == 0) {
#line 1185
      goto ldv_42641;
    } else {

    }
#line 1185
    tmp___5 = get_current();
#line 1185
    tmp___6 = signal_pending(tmp___5);
#line 1185
    if (tmp___6 == 0) {
#line 1185
      schedule();
#line 1185
      goto ldv_42642;
    } else {

    }
#line 1185
    __ret___0 = -512;
#line 1185
    goto ldv_42641;
    ldv_42642: ;
#line 1185
    goto ldv_42643;
    ldv_42641: 
#line 1185
    finish_wait(& mdev->al_wait, & __wait___0);
  } else {

  }
#line 1185
  sig = __ret___0;
#line 1187
  if (sig != 0) {
#line 1188
    spin_lock_irq(& mdev->al_lock);
#line 1189
    tmp___8 = lc_put(mdev->resync, & bm_ext->lce);
#line 1189
    if (tmp___8 == 0U) {
#line 1190
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1191
      mdev->resync_locked = mdev->resync_locked - 1U;
#line 1192
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {

    }
#line 1194
    spin_unlock_irq(& mdev->al_lock);
#line 1195
    return (0);
  } else {

  }
#line 1184
  i = i + 1;
  ldv_42646: ;
#line 1184
  if (i <= 3) {
#line 1185
    goto ldv_42645;
  } else {

  }
#line 1199
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1201
  return (1);
}
}
#line 1213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  long tmp___20 ;
  int tmp___21 ;

  {
#line 1215
  enr = (unsigned int )(sector >> 15);
#line 1216
  al_enr = enr * 4U;
#line 1221
  spin_lock_irq(& mdev->al_lock);
#line 1222
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1236
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1237
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1237
      __mptr = (struct lc_element  const  *)e;
#line 1237
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1237
      bm_ext = 0;
    }
#line 1238
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1239
      tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1239
      if (tmp___1 != 0) {
#line 1239
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1239
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1239
        printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
               tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1239);
      } else {

      }
#line 1240
      tmp___4 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1240
      if (tmp___4 == 0) {
#line 1240
        tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1240
        tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1240
        printk("<3>%s %s: ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
               tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1240);
      } else {

      }
#line 1241
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1242
      mdev->resync_wenr = 4294967295U;
#line 1243
      tmp___5 = lc_put(mdev->resync, & bm_ext->lce);
#line 1243
      if (tmp___5 == 0U) {
#line 1244
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1245
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1247
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1247
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1247
      printk("<1>%s %s: LOGIC BUG\n", tmp___7, tmp___6);
    }
  } else {

  }
#line 1251
  e = lc_try_get(mdev->resync, enr);
#line 1252
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1252
    __mptr___0 = (struct lc_element  const  *)e;
#line 1252
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1252
    bm_ext = 0;
  }
#line 1253
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1254
    tmp___8 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1254
    if (tmp___8 != 0) {
#line 1255
      goto proceed;
    } else {

    }
#line 1256
    tmp___11 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1256
    if (tmp___11 == 0) {
#line 1257
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1263
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1264
      if (bm_ext->lce.refcnt == 0U) {
#line 1264
        tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1264
        tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1264
        printk("<3>%s %s: ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n", tmp___10,
               tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1264);
      } else {

      }
    }
#line 1266
    goto check_al;
  } else {
#line 1269
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1270
      goto try_again;
    } else {

    }
#line 1272
    e = lc_get(mdev->resync, enr);
#line 1273
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1273
      __mptr___1 = (struct lc_element  const  *)e;
#line 1273
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1273
      bm_ext = 0;
    }
#line 1274
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1275
      rs_flags = (mdev->resync)->flags;
#line 1276
      if ((rs_flags & 4UL) != 0UL) {
#line 1277
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1277
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1277
        printk("<4>%s %s: Have to wait for element (resync LRU too small?)\n", tmp___13,
               tmp___12);
      } else {

      }
#line 1279
      tmp___14 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1279
      if (tmp___14 != 0L) {
#line 1279
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1279), "i" (12UL));
        ldv_42667: ;
#line 1279
        goto ldv_42667;
      } else {

      }
#line 1280
      goto try_again;
    } else {

    }
#line 1282
    if (bm_ext->lce.lc_number != enr) {
#line 1283
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1284
      bm_ext->rs_failed = 0;
#line 1285
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1286
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1287
      tmp___17 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1287
      if (tmp___17 != 0) {
#line 1287
        tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1287
        tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1287
        printk("<3>%s %s: ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
               tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1287);
      } else {

      }
    } else {

    }
#line 1289
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1290
    if (bm_ext->lce.refcnt != 1U) {
#line 1290
      tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1290
      tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1290
      printk("<3>%s %s: ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n", tmp___19, tmp___18,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             1290);
    } else {

    }
#line 1291
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1292
    goto check_al;
  }
  check_al: 
#line 1295
  i = 0;
#line 1295
  goto ldv_42669;
  ldv_42668: 
#line 1296
  tmp___20 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                              0L);
#line 1296
  if (tmp___20 != 0L) {
#line 1297
    goto try_again;
  } else {

  }
#line 1298
  tmp___21 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1298
  if (tmp___21 != 0) {
#line 1299
    goto try_again;
  } else {

  }
#line 1295
  i = i + 1;
  ldv_42669: ;
#line 1295
  if (i <= 3) {
#line 1296
    goto ldv_42668;
  } else {

  }
#line 1301
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1303
  mdev->resync_wenr = 4294967295U;
#line 1304
  spin_unlock_irq(& mdev->al_lock);
#line 1305
  return (0);
  try_again: ;
#line 1308
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1309
    mdev->resync_wenr = enr;
  } else {

  }
#line 1310
  spin_unlock_irq(& mdev->al_lock);
#line 1311
  return (-11);
}
}
#line 1314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  unsigned int tmp___5 ;

  {
#line 1316
  enr = (unsigned int )(sector >> 15);
#line 1321
  tmp = spinlock_check(& mdev->al_lock);
#line 1321
  flags = _raw_spin_lock_irqsave(tmp);
#line 1322
  e = lc_find(mdev->resync, enr);
#line 1323
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1323
    __mptr = (struct lc_element  const  *)e;
#line 1323
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1323
    bm_ext = 0;
  }
#line 1324
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1325
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1326
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1326
    if (tmp___2 != 0) {
#line 1327
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1327
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1327
      printk("<3>%s %s: drbd_rs_complete_io() called, but extent not found\n", tmp___1,
             tmp___0);
    } else {

    }
#line 1328
    return;
  } else {

  }
#line 1331
  if (bm_ext->lce.refcnt == 0U) {
#line 1332
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1333
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1333
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1333
    printk("<3>%s %s: drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
           tmp___4, tmp___3, (unsigned long long )sector, enr);
#line 1336
    return;
  } else {

  }
#line 1339
  tmp___5 = lc_put(mdev->resync, & bm_ext->lce);
#line 1339
  if (tmp___5 == 0U) {
#line 1340
    clear_bit(1, (unsigned long volatile   *)(& bm_ext->flags));
#line 1341
    clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1342
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1343
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1346
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1347
  return;
}
}
#line 1353 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1355
  spin_lock_irq(& mdev->al_lock);
#line 1357
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1357
  if (tmp != 0) {
#line 1358
    lc_reset(mdev->resync);
#line 1359
    put_ldev(mdev);
  } else {

  }
#line 1361
  mdev->resync_locked = 0U;
#line 1362
  mdev->resync_wenr = 4294967295U;
#line 1363
  spin_unlock_irq(& mdev->al_lock);
#line 1364
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1365
  return;
}
}
#line 1374 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;

  {
#line 1380
  spin_lock_irq(& mdev->al_lock);
#line 1382
  tmp___17 = _get_ldev_if_state(mdev, D_FAILED);
#line 1382
  if (tmp___17 != 0) {
#line 1384
    i = 0;
#line 1384
    goto ldv_42698;
    ldv_42697: 
#line 1385
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1386
    __mptr = (struct lc_element  const  *)e;
#line 1386
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1387
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1388
      goto ldv_42696;
    } else {

    }
#line 1389
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1390
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1390
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1390
      printk("<6>%s %s: dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
             tmp___0, tmp, mdev->resync_wenr);
#line 1393
      tmp___3 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1393
      if (tmp___3 != 0) {
#line 1393
        tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1393
        tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1393
        printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
               tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1393);
      } else {

      }
#line 1394
      tmp___6 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1394
      if (tmp___6 == 0) {
#line 1394
        tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1394
        tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1394
        printk("<3>%s %s: ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
               tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1394);
      } else {

      }
#line 1395
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1396
      mdev->resync_wenr = 4294967295U;
#line 1397
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1399
    if (bm_ext->lce.refcnt != 0U) {
#line 1400
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1400
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1400
      printk("<6>%s %s: Retrying drbd_rs_del_all() later. refcnt=%d\n", tmp___8, tmp___7,
             bm_ext->lce.refcnt);
#line 1402
      put_ldev(mdev);
#line 1403
      spin_unlock_irq(& mdev->al_lock);
#line 1404
      return (-11);
    } else {

    }
#line 1406
    tmp___11 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1406
    if (tmp___11 != 0) {
#line 1406
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1406
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1406
      printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
             tmp___10, tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             1406);
    } else {

    }
#line 1407
    tmp___14 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1407
    if (tmp___14 != 0) {
#line 1407
      tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1407
      tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1407
      printk("<3>%s %s: ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
             tmp___13, tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             1407);
    } else {

    }
#line 1408
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_42696: 
#line 1384
    i = i + 1;
    ldv_42698: ;
#line 1384
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1385
      goto ldv_42697;
    } else {

    }

#line 1410
    if ((mdev->resync)->used != 0U) {
#line 1410
      tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1410
      tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1410
      printk("<3>%s %s: ASSERT( mdev->resync->used == 0 ) in %s:%d\n", tmp___16, tmp___15,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             1410);
    } else {

    }
#line 1411
    put_ldev(mdev);
  } else {

  }
#line 1413
  spin_unlock_irq(& mdev->al_lock);
#line 1415
  return (0);
}
}
#line 1424 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _b___0 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1430
  wake_up = 0;
#line 1432
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1433
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1433
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1433
    printk("<3>%s %s: drbd_rs_failed_io: sector=%llus size=%d nonsense!\n", tmp___0,
           tmp, (unsigned long long )sector, size);
#line 1435
    return;
  } else {

  }
#line 1437
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1438
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1440
  _b = sector >= nr_sectors;
#line 1440
  if (_b != 0) {
#line 1440
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1440
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1440
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_rs_failed_io",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           1440);
  } else {

  }
#line 1440
  if (_b != 0) {
#line 1440
    return;
  } else {

  }
#line 1441
  _b___0 = esector >= nr_sectors;
#line 1441
  if (_b___0 != 0) {
#line 1441
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1441
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1441
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "drbd_rs_failed_io",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           1441);
  } else {

  }
#line 1441
  if (_b___0 != 0) {
#line 1441
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1443
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1448
  tmp___5 = __builtin_expect(esector <= 6UL, 0L);
#line 1448
  if (tmp___5 != 0L) {
#line 1449
    return;
  } else {

  }
#line 1450
  tmp___6 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1450
  if (tmp___6 != 0L) {
#line 1451
    ebnr = lbnr;
  } else {
#line 1453
    ebnr = (esector - 7UL) >> 3;
  }
#line 1454
  sbnr = (sector + 7UL) >> 3;
#line 1456
  if (sbnr > ebnr) {
#line 1457
    return;
  } else {

  }
#line 1463
  spin_lock_irq(& mdev->al_lock);
#line 1464
  tmp___7 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1464
  count = (unsigned long )tmp___7;
#line 1465
  if (count != 0UL) {
#line 1466
    mdev->rs_failed = mdev->rs_failed + count;
#line 1468
    tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1468
    if (tmp___8 != 0) {
#line 1469
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1470
      put_ldev(mdev);
    } else {

    }
#line 1475
    wake_up = 1;
  } else {

  }
#line 1477
  spin_unlock_irq(& mdev->al_lock);
#line 1478
  if (wake_up != 0) {
#line 1479
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1480
  return;
}
}
#line 1482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_93(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1487
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1489
  mutex_lock(ldv_func_arg1);
#line 1490
  return;
}
}
#line 1492 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int ldv_mutex_trylock_94(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1497
  tmp = mutex_trylock(ldv_func_arg1);
#line 1497
  ldv_func_res = tmp;
#line 1499
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1499
  return (tmp___0);
#line 1501
  return (ldv_func_res);
}
}
#line 1504 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1509
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1511
  mutex_unlock(ldv_func_arg1);
#line 1512
  return;
}
}
#line 1514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_96(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1519
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1521
  mutex_lock(ldv_func_arg1);
#line 1522
  return;
}
}
#line 1524 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1529
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1531
  mutex_unlock(ldv_func_arg1);
#line 1532
  return;
}
}
#line 1534 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_98(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1539
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1541
  mutex_unlock(ldv_func_arg1);
#line 1542
  return;
}
}
#line 1544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
__inline static int ldv_mutex_is_locked_99(struct mutex *lock ) 
{ 
  ldv_func_ret_type___5 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1549
  tmp = mutex_is_locked(lock);
#line 1549
  ldv_func_res = tmp;
#line 1551
  tmp___0 = ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(lock);
#line 1551
  return (tmp___0);
#line 1553
  return (ldv_func_res);
}
}
#line 1556 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1561
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1563
  mutex_lock(ldv_func_arg1);
#line 1564
  return;
}
}
#line 1566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1571
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1573
  mutex_unlock(ldv_func_arg1);
#line 1574
  return;
}
}
#line 1576 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_102(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1581
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1583
  mutex_lock(ldv_func_arg1);
#line 1584
  return;
}
}
#line 1586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_103(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1591
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1593
  mutex_unlock(ldv_func_arg1);
#line 1594
  return;
}
}
#line 1596 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1601
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1603
  mutex_unlock(ldv_func_arg1);
#line 1604
  return;
}
}
#line 1606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_105(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1611
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1613
  mutex_unlock(ldv_func_arg1);
#line 1614
  return;
}
}
#line 1616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_106(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1621
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1623
  mutex_unlock(ldv_func_arg1);
#line 1624
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 112 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 164 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 166
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 168
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 169
  memset((void *)dst, 255, (size_t )len);
#line 171
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 172
  return;
}
}
#line 271 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 275
  tmp___0 = __bitmap_weight(src, nbits);
#line 275
  return (tmp___0);
}
}
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_online_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 612
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 614
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 154 "include/linux/mutex.h"
int ldv_mutex_trylock_122(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_131(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_132(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) ;
#line 195
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) ;
#line 199
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) ;
#line 203
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) ;
#line 207
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) ;
#line 211
void ldv_mutex_unlock_148(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_130(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_133(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) ;
#line 46
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) ;
#line 50
void ldv_mutex_lock_143(struct mutex *ldv_func_arg1 ) ;
#line 54
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) ;
#line 58
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) ;
#line 95
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 99
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___1(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5934;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5934;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5934;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5934;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5934: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 65 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 229 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 84 "include/trace/events/module.h"
extern struct tracepoint __tracepoint_module_get ;
#line 84 "include/trace/events/module.h"
__inline static void trace_module_get(struct module *mod , unsigned long ip ) 
{ 
  void **it_func ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 79
  tmp___1 = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 79
  if (tmp___1 != 0L) {
#line 79
    rcu_read_lock_sched_notrace();
#line 79
    tmp = debug_lockdep_rcu_enabled();
#line 79
    if (tmp != 0 && ! __warned) {
#line 79
      tmp___0 = rcu_read_lock_sched_held();
#line 79
      if (tmp___0 == 0) {
#line 79
        __warned = 1;
#line 79
        lockdep_rcu_dereference("include/trace/events/module.h", 84);
      } else {

      }
    } else {

    }
#line 79
    _________p1 = *((void ** volatile  *)(& __tracepoint_module_get.funcs));
#line 79
    it_func = _________p1;
#line 79
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_11282: 
#line 79
      (*((void (*)(struct module * , unsigned long  ))*it_func))(mod, ip);
#line 79
      it_func = it_func + 1;
#line 79
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 80
        goto ldv_11282;
      } else {

      }

    } else {

    }
#line 79
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 81
  return;
}
}
#line 391 "include/linux/module.h"
__inline static int module_is_live(struct module *mod ) 
{ 


  {
#line 393
  return ((unsigned int )mod->state != 2U);
}
}
#line 473 "include/linux/module.h"
__inline static int try_module_get(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 475
  ret = 1;
#line 477
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 480
    tmp = module_is_live(module);
#line 480
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 480
    if (tmp___0 != 0L) {
#line 481
      __vpp_verify = 0;
#line 481
      switch (4UL) {
      case 1UL: 
#line 481
      pao_ID__ = 1;
#line 481
      switch (4UL) {
      case 1UL: ;
#line 481
      if (pao_ID__ == 1) {
#line 481
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID__ == -1) {
#line 481
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 481
      goto ldv_11604;
      case 2UL: ;
#line 481
      if (pao_ID__ == 1) {
#line 481
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID__ == -1) {
#line 481
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11604;
      case 4UL: ;
#line 481
      if (pao_ID__ == 1) {
#line 481
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID__ == -1) {
#line 481
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11604;
      case 8UL: ;
#line 481
      if (pao_ID__ == 1) {
#line 481
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID__ == -1) {
#line 481
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 481
      goto ldv_11604;
      default: 
#line 481
      __bad_percpu_size();
      }
      ldv_11604: ;
#line 481
      goto ldv_11609;
      case 2UL: 
#line 481
      pao_ID_____0 = 1;
#line 481
      switch (4UL) {
      case 1UL: ;
#line 481
      if (pao_ID_____0 == 1) {
#line 481
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____0 == -1) {
#line 481
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 481
      goto ldv_11615;
      case 2UL: ;
#line 481
      if (pao_ID_____0 == 1) {
#line 481
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____0 == -1) {
#line 481
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11615;
      case 4UL: ;
#line 481
      if (pao_ID_____0 == 1) {
#line 481
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____0 == -1) {
#line 481
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11615;
      case 8UL: ;
#line 481
      if (pao_ID_____0 == 1) {
#line 481
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____0 == -1) {
#line 481
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 481
      goto ldv_11615;
      default: 
#line 481
      __bad_percpu_size();
      }
      ldv_11615: ;
#line 481
      goto ldv_11609;
      case 4UL: 
#line 481
      pao_ID_____1 = 1;
#line 481
      switch (4UL) {
      case 1UL: ;
#line 481
      if (pao_ID_____1 == 1) {
#line 481
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____1 == -1) {
#line 481
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 481
      goto ldv_11625;
      case 2UL: ;
#line 481
      if (pao_ID_____1 == 1) {
#line 481
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____1 == -1) {
#line 481
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11625;
      case 4UL: ;
#line 481
      if (pao_ID_____1 == 1) {
#line 481
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____1 == -1) {
#line 481
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11625;
      case 8UL: ;
#line 481
      if (pao_ID_____1 == 1) {
#line 481
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____1 == -1) {
#line 481
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 481
      goto ldv_11625;
      default: 
#line 481
      __bad_percpu_size();
      }
      ldv_11625: ;
#line 481
      goto ldv_11609;
      case 8UL: 
#line 481
      pao_ID_____2 = 1;
#line 481
      switch (4UL) {
      case 1UL: ;
#line 481
      if (pao_ID_____2 == 1) {
#line 481
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____2 == -1) {
#line 481
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 481
      goto ldv_11635;
      case 2UL: ;
#line 481
      if (pao_ID_____2 == 1) {
#line 481
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____2 == -1) {
#line 481
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11635;
      case 4UL: ;
#line 481
      if (pao_ID_____2 == 1) {
#line 481
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____2 == -1) {
#line 481
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11635;
      case 8UL: ;
#line 481
      if (pao_ID_____2 == 1) {
#line 481
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____2 == -1) {
#line 481
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 481
      goto ldv_11635;
      default: 
#line 481
      __bad_percpu_size();
      }
      ldv_11635: ;
#line 481
      goto ldv_11609;
      default: 
#line 481
      __bad_size_call_parameter();
#line 481
      goto ldv_11609;
      }
      ldv_11609: ;
#line 482
      trace_module_get(module, (unsigned long )((void *)0));
    } else {
#line 484
      ret = 0;
    }
  } else {

  }
#line 488
  return (ret);
}
}
#line 491
extern void module_put(struct module * ) ;
#line 252 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 276
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___4(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0 && ! __warned) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        __warned = 1;
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13444: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13444;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___4(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___4(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___4(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc___1(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc___4(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 208 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 208
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 208
  return (tmp);
}
}
#line 1943 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 1944
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 1945
extern struct block_device *bdget(dev_t  ) ;
#line 1949
extern void bdput(struct block_device * ) ;
#line 1984
extern void bd_release(struct block_device * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 1771 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 1990
extern int wake_up_process(struct task_struct * ) ;
#line 15 "include/linux/file.h"
extern void fput(struct file * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create(int (*)(void * ) , void * , char const   * 
                                          , ...) ;
#line 350 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 356
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 541
extern struct gendisk *alloc_disk(int  ) ;
#line 543
extern void put_disk(struct gendisk * ) ;
#line 259 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 261
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 262
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 262
    return (tmp);
  } else {

  }
#line 263
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 795 "include/linux/blkdev.h"
extern int blk_remove_plug(struct request_queue * ) ;
#line 930
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 931
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 932
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 935
extern void blk_queue_max_segment_size(struct request_queue * , unsigned int  ) ;
#line 962
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 981
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 164 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 567 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 569
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 569
  if (tmp != 0L) {
#line 569
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (569), "i" (12UL));
    ldv_41757: ;
#line 569
    goto ldv_41757;
  } else {

  }
#line 570
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 571
  return;
}
}
#line 580 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 582
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 583
  return;
}
}
#line 592 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 594
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 594
  if (tmp != 0L) {
#line 594
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (594), "i" (12UL));
    ldv_41772: ;
#line 594
    goto ldv_41772;
  } else {

  }
#line 595
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 596
  return;
}
}
#line 1097 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock___0(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1099
  ldv_mutex_lock_124(& mdev->data.mutex);
#line 1102
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1102
  if (tmp != 0L) {
#line 1103
    ldv_mutex_unlock_125(& mdev->data.mutex);
#line 1104
    return (0);
  } else {

  }
#line 1106
  return (1);
}
}
#line 1109 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock___0(struct drbd_conf *mdev ) 
{ 


  {
#line 1111
  ldv_mutex_unlock_126(& mdev->data.mutex);
#line 1112
  return;
}
}
#line 1133
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1142
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) ;
#line 1148
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1153
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1159
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1163
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1203
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1205
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1210
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1217
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1218
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1219
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1220
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1403 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1405 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1406 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1407 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1408 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1410 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1411 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1412 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1413 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1417
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1418
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1420 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1430
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1431
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1584
void drbd_nl_cleanup(void) ;
#line 1585
int drbd_nl_init(void) ;
#line 1586
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1683 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1685
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1685
  if (tmp == 0) {
#line 1685
    goto ldv_42795;
  } else {

  }
#line 1685
  tmp___0 = get_current();
#line 1685
  __wait.flags = 0U;
#line 1685
  __wait.private = (void *)tmp___0;
#line 1685
  __wait.func = & autoremove_wake_function;
#line 1685
  __wait.task_list.next = & __wait.task_list;
#line 1685
  __wait.task_list.prev = & __wait.task_list;
  ldv_42798: 
#line 1685
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1685
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1685
  if (tmp___1 == 0) {
#line 1685
    goto ldv_42797;
  } else {

  }
#line 1685
  schedule();
#line 1685
  goto ldv_42798;
  ldv_42797: 
#line 1685
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42795: ;
#line 1688
  return;
}
}
#line 1726 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1728
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1730
  if (forcedetach == 0) {
#line 1731
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1731
    if (tmp___1 != 0) {
#line 1732
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1732
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1732
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1734
    goto ldv_42821;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1739
  if ((int )mdev->state.ldv_33657.disk > 2) {
#line 1740
    __ns.i = mdev->state.i;
#line 1740
    __ns.ldv_33657.disk = 2U;
#line 1740
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1741
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1741
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1741
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1744
  goto ldv_42821;
  }
  ldv_42821: ;
#line 1747
  return;
}
}
#line 1757 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1760
  if (error != 0) {
#line 1762
    tmp = spinlock_check(& mdev->req_lock);
#line 1762
    flags = _raw_spin_lock_irqsave(tmp);
#line 1763
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1764
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1766
  return;
}
}
#line 1819 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1822
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1826
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1826
  if (tmp___1 != 0UL) {
#line 1826
    __min1 = 34359738368UL;
#line 1826
    tmp___0 = drbd_md_first_sector(bdev);
#line 1826
    __min2 = tmp___0;
#line 1826
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1826
    s = 0UL;
  }
#line 1829
  goto ldv_42862;
  case -2: 
#line 1831
  __min1___0 = 34359738368UL;
#line 1831
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1831
  __min2___0 = tmp___2;
#line 1831
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1834
  __min1___1 = s;
#line 1834
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1834
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1837
  goto ldv_42862;
  default: 
#line 1839
  __min1___2 = 8587575296UL;
#line 1839
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1839
  __min2___2 = tmp___3;
#line 1839
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_42862: ;
#line 1842
  return (s);
}
}
#line 1850 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  sector_t tmp___2 ;

  {
#line 1853
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1855
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1861
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1862
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1862
    if (tmp___1 != 0) {
#line 1863
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1863
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1863
      printk("<3>%s %s: bdev->backing_bdev==NULL\n", tmp___0, tmp);
#line 1864
      dump_stack();
    } else {

    }
#line 1866
    return (0UL);
  } else {

  }
#line 1868
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1868
  return ((sector_t )(((unsigned long long )tmp___2 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1871
  return (0UL);
  }
}
}
#line 1940 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1942
  _drbd_thread_stop(thi, 0, 0);
#line 1943
  return;
}
}
#line 1945 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1947
  _drbd_thread_stop(thi, 1, 0);
#line 1948
  return;
}
}
#line 2136 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(union drbd_state s ) 
{ 


  {
#line 2142
  switch ((unsigned int )s.ldv_33657.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2155
  goto ldv_42980;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2174
  return (0);
  }
  ldv_42980: ;
#line 2177
  switch ((unsigned int )s.ldv_33657.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2184
  goto ldv_43000;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2193
  return (0);
  }
  ldv_43000: ;
#line 2196
  return (1);
}
}
#line 2199 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2201
  tmp = drbd_get_max_buffers(mdev);
#line 2201
  mxb = tmp;
#line 2203
  if ((unsigned int )*((unsigned char *)mdev + 2014UL) != 0U) {
#line 2204
    return (0);
  } else {

  }
#line 2205
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2205
  if (tmp___0 != 0) {
#line 2206
    return (0);
  } else {

  }
#line 2213
  tmp___1 = drbd_state_is_stable___0(mdev->state);
#line 2213
  if (tmp___1 == 0) {
#line 2214
    return (0);
  } else {

  }
#line 2218
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2218
  if (tmp___2 > mxb) {
#line 2219
    return (0);
  } else {

  }
#line 2220
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2220
  if (tmp___3 != 0) {
#line 2221
    return (0);
  } else {

  }
#line 2222
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->new_c_uuid));
#line 2222
  if (tmp___4 != 0) {
#line 2223
    return (0);
  } else {

  }
#line 2224
  return (1);
}
}
#line 2308 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2310
  sk = (mdev->data.socket)->sk;
#line 2311
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2312
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2313
  return;
}
}
#line 2315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2322
  return (0);
}
}
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_43226;
  ldv_43225: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_43226: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_43225;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) ;
#line 120
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 121
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 122
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 123
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 125
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 126
static void md_sync_timer_fn(unsigned long data ) ;
#line 127
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 172
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 199 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}}}, 1250, 5,
    0, 0, 0UL};
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 201
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 243
  tmp = kmalloc___4(56UL, 208U);
#line 243
  b = (struct drbd_tl_epoch *)tmp;
#line 244
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 245
    return (0);
  } else {

  }
#line 246
  INIT_LIST_HEAD(& b->requests);
#line 247
  INIT_LIST_HEAD(& b->w.list);
#line 248
  b->next = 0;
#line 249
  b->br_number = 4711U;
#line 250
  b->n_req = 0;
#line 251
  b->w.cb = 0;
#line 253
  mdev->oldest_tle = b;
#line 254
  mdev->newest_tle = b;
#line 255
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 257
  mdev->tl_hash = 0;
#line 258
  mdev->tl_hash_s = 0U;
#line 260
  return (1);
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 265
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 265
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 265
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 265
    printk("<3>%s %s: ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           265);
  } else {

  }
#line 266
  tmp___3 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 266
  if (tmp___3 == 0) {
#line 266
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 266
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 266
    printk("<3>%s %s: ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
           tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           266);
  } else {

  }
#line 267
  kfree((void const   *)mdev->oldest_tle);
#line 268
  mdev->oldest_tle = 0;
#line 269
  kfree((void const   *)mdev->unused_spare_tle);
#line 270
  mdev->unused_spare_tle = 0;
#line 271
  kfree((void const   *)mdev->tl_hash);
#line 272
  mdev->tl_hash = 0;
#line 273
  mdev->tl_hash_s = 0U;
#line 274
  return;
}
}
#line 283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 287
  INIT_LIST_HEAD(& new->requests);
#line 288
  INIT_LIST_HEAD(& new->w.list);
#line 289
  new->w.cb = 0;
#line 290
  new->next = 0;
#line 291
  new->n_req = 0;
#line 293
  newest_before = mdev->newest_tle;
#line 296
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 297
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 298
    (mdev->newest_tle)->next = new;
#line 299
    mdev->newest_tle = new;
  } else {

  }
#line 301
  return;
}
}
#line 313 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  struct list_head  const  *__mptr ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 320
  spin_lock_irq(& mdev->req_lock);
#line 322
  b = mdev->oldest_tle;
#line 325
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 326
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 326
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 326
    printk("<3>%s %s: BAD! BarrierAck #%u received, but no epoch in tl!?\n", tmp___0,
           tmp, barrier_nr);
#line 328
    goto bail;
  } else {

  }
#line 330
  if (b->br_number != barrier_nr) {
#line 331
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 331
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 331
    printk("<3>%s %s: BAD! BarrierAck #%u received, expected #%u!\n", tmp___2, tmp___1,
           barrier_nr, b->br_number);
#line 333
    goto bail;
  } else {

  }
#line 335
  if ((unsigned int )b->n_req != set_size) {
#line 336
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 336
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 336
    printk("<3>%s %s: BAD! BarrierAck #%u received with n_req=%u, expected n_req=%u!\n",
           tmp___4, tmp___3, barrier_nr, set_size, b->n_req);
#line 338
    goto bail;
  } else {

  }
#line 342
  le = b->requests.next;
#line 342
  tle = le->next;
#line 342
  goto ldv_43448;
  ldv_43447: 
#line 343
  __mptr = (struct list_head  const  *)le;
#line 343
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 344
  _req_mod(r, barrier_acked);
#line 342
  le = tle;
#line 342
  tle = le->next;
  ldv_43448: ;
#line 342
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 343
    goto ldv_43447;
  } else {

  }
#line 359
  list_del_init(& b->requests);
#line 361
  nob = b->next;
#line 362
  tmp___7 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 362
  if (tmp___7 != 0) {
#line 363
    _tl_add_barrier(mdev, b);
#line 364
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 365
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 369
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 369
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 369
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 369
      printk("<3>%s %s: ASSERT( nob != NULL ) in %s:%d\n", tmp___6, tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             369);
    } else {

    }
#line 370
    mdev->oldest_tle = nob;
#line 371
    kfree((void const   *)b);
  }
#line 374
  spin_unlock_irq(& mdev->req_lock);
#line 375
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 375
  if (tmp___8 != 0) {
#line 375
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 375
  tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 375
  if (tmp___12 < 0) {
#line 375
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 375
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 375
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 375
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___11, tmp___10,
           "tl_release", 375, tmp___9);
  } else {

  }
#line 377
  return;
  bail: 
#line 380
  spin_unlock_irq(& mdev->req_lock);
#line 381
  val.i = 0U;
#line 381
  val.ldv_33657.conn = 6U;
#line 381
  mask.i = 0U;
#line 381
  mask.ldv_33657.conn = 31U;
#line 381
  drbd_force_state(mdev, mask, val);
#line 383
  return;
}
}
#line 393 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int new_initial_bnr ;
  u32 tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 398
  tmp___0 = random32();
#line 398
  new_initial_bnr = (int )tmp___0;
#line 400
  spin_lock_irq(& mdev->req_lock);
#line 402
  b = mdev->oldest_tle;
#line 403
  goto ldv_43478;
  ldv_43477: 
#line 404
  le = b->requests.next;
#line 404
  tle = le->next;
#line 404
  goto ldv_43470;
  ldv_43469: 
#line 405
  __mptr = (struct list_head  const  *)le;
#line 405
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 408
  _req_mod(r, connection_lost_while_pending);
#line 404
  le = tle;
#line 404
  tle = le->next;
  ldv_43470: ;
#line 404
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 405
    goto ldv_43469;
  } else {

  }
#line 410
  tmp = b->next;
#line 414
  list_del(& b->requests);
#line 419
  if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * , struct drbd_work * ,
                                                           int  ))0)) {
#line 420
    tmp___1 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 420
    if (tmp___1 != 0) {
#line 420
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 420
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 420
    if (tmp___5 < 0) {
#line 420
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 420
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 420
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 420
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
             "tl_clear", 420, tmp___2);
    } else {

    }
  } else {

  }
#line 422
  if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 424
    if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 424
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 424
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 424
      printk("<3>%s %s: ASSERT( tmp == NULL ) in %s:%d\n", tmp___7, tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             424);
    } else {

    }
#line 425
    INIT_LIST_HEAD(& b->requests);
#line 426
    INIT_LIST_HEAD(& b->w.list);
#line 427
    b->w.cb = 0;
#line 428
    b->br_number = (unsigned int )new_initial_bnr;
#line 429
    b->n_req = 0;
#line 431
    mdev->oldest_tle = b;
#line 432
    goto ldv_43476;
  } else {

  }
#line 434
  kfree((void const   *)b);
#line 435
  b = tmp;
  ldv_43478: ;
#line 403
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 404
    goto ldv_43477;
  } else {

  }
  ldv_43476: 
#line 439
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 439
  if (tmp___10 == 0) {
#line 439
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 439
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 439
    printk("<3>%s %s: ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
           tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           439);
  } else {

  }
#line 442
  le = mdev->out_of_sequence_requests.next;
#line 442
  tle = le->next;
#line 442
  goto ldv_43482;
  ldv_43481: 
#line 443
  __mptr___0 = (struct list_head  const  *)le;
#line 443
  r = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 446
  _req_mod(r, connection_lost_while_pending);
#line 442
  le = tle;
#line 442
  tle = le->next;
  ldv_43482: ;
#line 442
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 443
    goto ldv_43481;
  } else {

  }
#line 450
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 452
  spin_unlock_irq(& mdev->req_lock);
#line 453
  return;
}
}
#line 461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 464
  return (((((int )os.ldv_33657.conn > 9 && (int )ns.ldv_33657.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_33657.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 480
  tmp = spinlock_check(& mdev->req_lock);
#line 480
  flags = _raw_spin_lock_irqsave(tmp);
#line 481
  os = mdev->state;
#line 482
  ns.i = (os.i & ~ mask.i) | val.i;
#line 483
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 484
  ns = mdev->state;
#line 485
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 487
  return (rv);
}
}
#line 496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 499
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 500
  return;
}
}
#line 502
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 503
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) ;
#line 505
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) ;
#line 507
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 510 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_ret_codes _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                              union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  int rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 517
  tmp = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 517
  if (tmp != 0) {
#line 518
    return (SS_CW_SUCCESS);
  } else {

  }
#line 520
  tmp___0 = test_and_clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 520
  if (tmp___0 != 0) {
#line 521
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 523
  rv = 0;
#line 524
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 524
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 525
  os = mdev->state;
#line 526
  ns.i = (os.i & ~ mask.i) | val.i;
#line 527
  ns = sanitize_state(mdev, os, ns, 0);
#line 529
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 529
  if (tmp___2 == 0) {
#line 530
    rv = 4;
  } else {

  }
#line 531
  if (rv == 0) {
#line 532
    rv = is_valid_state(mdev, ns);
#line 533
    if (rv == 1) {
#line 534
      rv = is_valid_state_transition(mdev, ns, os);
#line 535
      if (rv == 1) {
#line 536
        rv = 0;
      } else {

      }
    } else {

    }
  } else {

  }
#line 539
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 541
  return ((enum drbd_state_ret_codes )rv);
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_req_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                          enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  enum drbd_state_ret_codes tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  enum drbd_state_ret_codes tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 563
  init_completion(& done);
#line 565
  if (((unsigned int )f & 8U) != 0U) {
#line 566
    ldv_mutex_lock_127(& mdev->state_mutex);
  } else {

  }
#line 568
  tmp = spinlock_check(& mdev->req_lock);
#line 568
  flags = _raw_spin_lock_irqsave(tmp);
#line 569
  os = mdev->state;
#line 570
  ns.i = (os.i & ~ mask.i) | val.i;
#line 571
  ns = sanitize_state(mdev, os, ns, 0);
#line 573
  tmp___5 = cl_wide_st_chg(mdev, os, ns);
#line 573
  if (tmp___5 != 0) {
#line 574
    rv = is_valid_state(mdev, ns);
#line 575
    if (rv == 1) {
#line 576
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 577
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 579
    if (rv <= 0) {
#line 580
      if (((unsigned int )f & 2U) != 0U) {
#line 581
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 582
      goto abort;
    } else {

    }
#line 585
    drbd_state_lock___0(mdev);
#line 586
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 586
    if (tmp___0 == 0) {
#line 587
      drbd_state_unlock(mdev);
#line 588
      rv = -10;
#line 589
      if (((unsigned int )f & 2U) != 0U) {
#line 590
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 591
      goto abort;
    } else {

    }
#line 594
    tmp___1 = _req_st_cond(mdev, mask, val);
#line 594
    rv = (int )tmp___1;
#line 594
    if (rv != 0) {
#line 594
      goto ldv_43550;
    } else {

    }
#line 594
    tmp___2 = get_current();
#line 594
    __wait.flags = 0U;
#line 594
    __wait.private = (void *)tmp___2;
#line 594
    __wait.func = & autoremove_wake_function;
#line 594
    __wait.task_list.next = & __wait.task_list;
#line 594
    __wait.task_list.prev = & __wait.task_list;
    ldv_43553: 
#line 594
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 594
    tmp___3 = _req_st_cond(mdev, mask, val);
#line 594
    rv = (int )tmp___3;
#line 594
    if (rv != 0) {
#line 594
      goto ldv_43552;
    } else {

    }
#line 594
    schedule();
#line 594
    goto ldv_43553;
    ldv_43552: 
#line 594
    finish_wait(& mdev->state_wait, & __wait);
    ldv_43550: ;
#line 597
    if (rv <= 0) {
#line 598
      drbd_state_unlock(mdev);
#line 599
      if (((unsigned int )f & 2U) != 0U) {
#line 600
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 601
      goto abort;
    } else {

    }
#line 603
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 603
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 604
    os = mdev->state;
#line 605
    ns.i = (os.i & ~ mask.i) | val.i;
#line 606
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 607
    drbd_state_unlock(mdev);
  } else {
#line 609
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 612
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 614
  if (((unsigned int )f & 4U) != 0U && rv == 1) {
#line 615
    tmp___8 = get_current();
#line 615
    if ((unsigned long )tmp___8 == (unsigned long )mdev->worker.task) {
#line 615
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 615
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 615
      printk("<3>%s %s: ASSERT( current != mdev->worker.task ) in %s:%d\n", tmp___7,
             tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             615);
    } else {

    }
#line 616
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 620
  if (((unsigned int )f & 8U) != 0U) {
#line 621
    ldv_mutex_unlock_128(& mdev->state_mutex);
  } else {

  }
#line 623
  return (rv);
}
}
#line 636 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) 
{ 
  int rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 641
  rv = drbd_req_state(mdev, mask, val, f);
#line 641
  if (rv != -18) {
#line 641
    goto ldv_43564;
  } else {

  }
#line 641
  tmp = get_current();
#line 641
  __wait.flags = 0U;
#line 641
  __wait.private = (void *)tmp;
#line 641
  __wait.func = & autoremove_wake_function;
#line 641
  __wait.task_list.next = & __wait.task_list;
#line 641
  __wait.task_list.prev = & __wait.task_list;
  ldv_43567: 
#line 641
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 641
  rv = drbd_req_state(mdev, mask, val, f);
#line 641
  if (rv != -18) {
#line 641
    goto ldv_43566;
  } else {

  }
#line 641
  schedule();
#line 641
  goto ldv_43567;
  ldv_43566: 
#line 641
  finish_wait(& mdev->state_wait, & __wait);
  ldv_43564: ;
#line 644
  return (rv);
}
}
#line 647 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 649
  tmp = drbd_disk_str((enum drbd_disk_state )ns.ldv_33657.pdsk);
#line 649
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_33657.disk);
#line 649
  tmp___1 = drbd_role_str((enum drbd_role )ns.ldv_33657.peer);
#line 649
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_33657.role);
#line 649
  tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_33657.conn);
#line 649
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 649
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 649
  printk("<3>%s %s:  %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n", tmp___5, tmp___4,
         name, tmp___3, tmp___2, tmp___1, tmp___0, tmp, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 115 : 114,
         (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
         (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 650
  return;
}
}
#line 663 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 666
  if (err == -18) {
#line 667
    return;
  } else {

  }
#line 668
  tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )err);
#line 668
  tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 668
  tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 668
  printk("<3>%s %s: State change failed: %s\n", tmp___1, tmp___0, tmp);
#line 669
  print_st(mdev, (char *)" state", os);
#line 670
  print_st(mdev, (char *)"wanted", ns);
#line 671
  return;
}
}
#line 694 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 699
  rv = 1;
#line 701
  fp = FP_DONT_CARE;
#line 702
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 702
  if (tmp != 0) {
#line 703
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 704
    put_ldev(mdev);
  } else {

  }
#line 707
  tmp___0 = get_net_conf(mdev);
#line 707
  if (tmp___0 != 0) {
#line 708
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 710
      rv = -1;
    } else {

    }
#line 711
    put_net_conf(mdev);
  } else {

  }
#line 714
  if (rv <= 0) {

  } else
#line 716
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 717
    rv = -12;
  } else
#line 719
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33657.conn <= 9) && (int )ns.ldv_33657.disk <= 7) {
#line 720
    rv = -2;
  } else
#line 722
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_33657.conn <= 9) && (int )ns.ldv_33657.pdsk > 5) {
#line 724
    rv = -7;
  } else
#line 726
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33657.disk <= 4) && (int )ns.ldv_33657.pdsk <= 4) {
#line 727
    rv = -2;
  } else
#line 729
  if ((int )ns.ldv_33657.conn > 10 && (int )ns.ldv_33657.disk <= 3) {
#line 730
    rv = -4;
  } else
#line 732
  if ((int )ns.ldv_33657.conn > 10 && (int )ns.ldv_33657.pdsk <= 3) {
#line 733
    rv = -5;
  } else
#line 735
  if (((int )ns.ldv_33657.conn > 10 && (int )ns.ldv_33657.disk <= 7) && (int )ns.ldv_33657.pdsk <= 7) {
#line 736
    rv = -2;
  } else
#line 738
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 743
    rv = -6;
  } else
#line 745
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 747
    rv = -14;
  } else
#line 749
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 751
    rv = -17;
  } else {

  }
#line 753
  return (rv);
}
}
#line 762 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) 
{ 
  int rv ;

  {
#line 765
  rv = 1;
#line 767
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_33657.conn > 10) {
#line 769
    rv = -8;
  } else {

  }
#line 771
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 772
    rv = -9;
  } else {

  }
#line 774
  if ((int )ns.ldv_33657.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 775
    rv = -11;
  } else {

  }
#line 777
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_33657.conn <= 1) {
#line 778
    rv = -13;
  } else {

  }
#line 780
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_33657.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 781
    rv = -16;
  } else {

  }
#line 783
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 784
    rv = -18;
  } else {

  }
#line 786
  if ((int )ns.ldv_33657.conn == (int )os.ldv_33657.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 787
    rv = -18;
  } else {

  }
#line 789
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_33657.conn <= 9) {
#line 790
    rv = -15;
  } else {

  }
#line 792
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_33657.conn != (int )os.ldv_33657.conn) && (int )os.ldv_33657.conn > 10) {
#line 794
    rv = -8;
  } else {

  }
#line 796
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_33657.conn <= 9) {
#line 798
    rv = -15;
  } else {

  }
#line 800
  return (rv);
}
}
#line 813 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;

  {
#line 818
  fp = FP_DONT_CARE;
#line 819
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 819
  if (tmp != 0) {
#line 820
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 821
    put_ldev(mdev);
  } else {

  }
#line 825
  if (((int )ns.ldv_33657.conn > 2 && (int )ns.ldv_33657.conn <= 7) && (int )os.ldv_33657.conn <= 1) {
#line 827
    ns.ldv_33657.conn = os.ldv_33657.conn;
  } else {

  }
#line 830
  if ((((int )os.ldv_33657.conn > 2 && (int )os.ldv_33657.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) {
#line 832
    ns.ldv_33657.conn = os.ldv_33657.conn;
  } else {

  }
#line 835
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 836
    ns.ldv_33657.conn = os.ldv_33657.conn;
  } else {

  }
#line 838
  if ((int )ns.ldv_33657.conn <= 9) {
#line 839
    ns.ldv_33657.peer_isp = 0U;
#line 840
    ns.ldv_33657.peer = 0U;
#line 841
    if ((int )ns.ldv_33657.pdsk > 6 || (int )ns.ldv_33657.pdsk <= 3) {
#line 842
      ns.ldv_33657.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 846
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 847
    ns.ldv_33657.aftr_isp = 0U;
  } else {

  }
#line 849
  if ((int )ns.ldv_33657.conn <= 1 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 850
    ns.ldv_33657.pdsk = 6U;
  } else {

  }
#line 853
  if (((int )os.ldv_33657.conn > 10 && (int )ns.ldv_33657.conn > 10) && ((int )ns.ldv_33657.disk <= 2 || (int )ns.ldv_33657.pdsk <= 2)) {
#line 855
    if ((unsigned long )warn_sync_abort != (unsigned long )((int *)0)) {
#line 856
      *warn_sync_abort = 1;
    } else {

    }
#line 857
    ns.ldv_33657.conn = 10U;
  } else {

  }
#line 860
  if ((int )ns.ldv_33657.conn > 9 && (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) || ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 224U))) {
#line 863
    switch ((int )ns.ldv_33657.conn) {
    case 14: ;
    case 21: 
#line 866
    ns.ldv_33657.disk = 5U;
#line 867
    goto ldv_43600;
    case 10: ;
    case 13: ;
    case 16: ;
    case 20: 
#line 872
    ns.ldv_33657.disk = 8U;
#line 873
    goto ldv_43600;
    case 17: 
#line 875
    ns.ldv_33657.disk = 4U;
#line 876
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 876
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 876
    printk("<4>%s %s: Implicitly set disk state Inconsistent!\n", tmp___1, tmp___0);
#line 877
    goto ldv_43600;
    }
    ldv_43600: ;
#line 879
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 10U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 16U) {
#line 880
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 880
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 880
      printk("<4>%s %s: Implicitly set disk from Outdated to UpToDate\n", tmp___3,
             tmp___2);
    } else {

    }
  } else {

  }
#line 883
  if ((int )ns.ldv_33657.conn > 9 && (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 885
    switch ((int )ns.ldv_33657.conn) {
    case 10: ;
    case 14: ;
    case 21: ;
    case 17: 
#line 890
    ns.ldv_33657.pdsk = 8U;
#line 891
    goto ldv_43610;
    case 13: ;
    case 20: 
#line 897
    ns.ldv_33657.pdsk = (int )os.ldv_33657.pdsk > 0 && (int )os.ldv_33657.pdsk <= 4 ? os.ldv_33657.pdsk : 5U;
#line 900
    goto ldv_43610;
    case 16: 
#line 902
    ns.ldv_33657.pdsk = 4U;
#line 903
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 903
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 903
    printk("<4>%s %s: Implicitly set pdsk Inconsistent!\n", tmp___5, tmp___4);
#line 904
    goto ldv_43610;
    }
    ldv_43610: ;
#line 906
    if (*((unsigned int *)(& os) + 0UL) == 40960U && *((unsigned int *)(& ns) + 0UL) == 65536U) {
#line 907
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 907
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 907
      printk("<4>%s %s: Implicitly set pdsk from Outdated to UpToDate\n", tmp___7,
             tmp___6);
    } else {

    }
  } else {

  }
#line 911
  if ((int )ns.ldv_33657.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 911
    tmp___10 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 911
    if (tmp___10 != 0) {
#line 913
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 914
        ns.ldv_33657.disk = mdev->new_state_tmp.ldv_33657.disk;
#line 915
        ns.ldv_33657.pdsk = mdev->new_state_tmp.ldv_33657.pdsk;
      } else {
#line 917
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 917
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 917
        printk("<1>%s %s: Connection lost while negotiating, no data!\n", tmp___9,
               tmp___8);
#line 918
        ns.ldv_33657.disk = 0U;
#line 919
        ns.ldv_33657.pdsk = 6U;
      }
#line 921
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 924
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33657.conn <= 9) && (int )ns.ldv_33657.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_33657.conn > 9) || (int )os.ldv_33657.pdsk <= 5)) {
#line 927
    ns.ldv_33657.susp = 1U;
  } else {

  }
#line 929
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 930
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 931
      ns.ldv_33657.conn = 20U;
    } else {

    }
#line 932
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 933
      ns.ldv_33657.conn = 21U;
    } else {

    }
  } else {
#line 935
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 936
      ns.ldv_33657.conn = 16U;
    } else {

    }
#line 937
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 938
      ns.ldv_33657.conn = 17U;
    } else {

    }
  }
#line 941
  return (ns);
}
}
#line 945 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 947
  if ((unsigned int )cs == 19U) {
#line 953
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 955
    bit = mdev->ov_start_sector >> 3;
#line 956
    if (mdev->rs_total <= bit) {
#line 957
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
    } else {

    }
#line 959
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 961
  return;
}
}
#line 972 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) 
{ 
  union drbd_state os ;
  int rv ;
  int warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  int tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  int tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  unsigned long tmp___34 ;
  unsigned long tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  u32 mdf ;
  int tmp___38 ;
  int tmp___39 ;
  void *tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;

  {
#line 977
  rv = 1;
#line 978
  warn_sync_abort = 0;
#line 981
  os = mdev->state;
#line 983
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 985
  if (ns.i == os.i) {
#line 986
    return (2);
  } else {

  }
#line 988
  if (((unsigned int )flags & 1U) == 0U) {
#line 992
    rv = is_valid_state(mdev, ns);
#line 993
    if (rv <= 0) {
#line 997
      tmp___2 = is_valid_state(mdev, os);
#line 997
      if (tmp___2 == rv) {
#line 998
        tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )rv);
#line 998
        tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 998
        tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 998
        printk("<3>%s %s: Considering state change from bad state. Error would be: \'%s\'\n",
               tmp___1, tmp___0, tmp);
#line 1001
        print_st(mdev, (char *)"old", os);
#line 1002
        print_st(mdev, (char *)"new", ns);
#line 1003
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1006
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1009
  if (rv <= 0) {
#line 1010
    if (((unsigned int )flags & 2U) != 0U) {
#line 1011
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1012
    return (rv);
  } else {

  }
#line 1015
  if (warn_sync_abort != 0) {
#line 1016
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1016
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1016
    printk("<4>%s %s: Resync aborted.\n", tmp___4, tmp___3);
  } else {

  }
#line 1020
  pbp = (char *)(& pb);
#line 1021
  *pbp = 0;
#line 1022
  if ((int )ns.ldv_33657.role != (int )os.ldv_33657.role) {
#line 1022
    tmp___5 = drbd_role_str((enum drbd_role )ns.ldv_33657.role);
#line 1022
    tmp___6 = drbd_role_str((enum drbd_role )os.ldv_33657.role);
#line 1022
    tmp___7 = sprintf(pbp, "role( %s -> %s ) ", tmp___6, tmp___5);
#line 1022
    pbp = pbp + (unsigned long )tmp___7;
  } else {

  }
#line 1023
  if ((int )ns.ldv_33657.peer != (int )os.ldv_33657.peer) {
#line 1023
    tmp___8 = drbd_role_str((enum drbd_role )ns.ldv_33657.peer);
#line 1023
    tmp___9 = drbd_role_str((enum drbd_role )os.ldv_33657.peer);
#line 1023
    tmp___10 = sprintf(pbp, "peer( %s -> %s ) ", tmp___9, tmp___8);
#line 1023
    pbp = pbp + (unsigned long )tmp___10;
  } else {

  }
#line 1024
  if ((int )ns.ldv_33657.conn != (int )os.ldv_33657.conn) {
#line 1024
    tmp___11 = drbd_conn_str((enum drbd_conns )ns.ldv_33657.conn);
#line 1024
    tmp___12 = drbd_conn_str((enum drbd_conns )os.ldv_33657.conn);
#line 1024
    tmp___13 = sprintf(pbp, "conn( %s -> %s ) ", tmp___12, tmp___11);
#line 1024
    pbp = pbp + (unsigned long )tmp___13;
  } else {

  }
#line 1025
  if ((int )ns.ldv_33657.disk != (int )os.ldv_33657.disk) {
#line 1025
    tmp___14 = drbd_disk_str((enum drbd_disk_state )ns.ldv_33657.disk);
#line 1025
    tmp___15 = drbd_disk_str((enum drbd_disk_state )os.ldv_33657.disk);
#line 1025
    tmp___16 = sprintf(pbp, "disk( %s -> %s ) ", tmp___15, tmp___14);
#line 1025
    pbp = pbp + (unsigned long )tmp___16;
  } else {

  }
#line 1026
  if ((int )ns.ldv_33657.pdsk != (int )os.ldv_33657.pdsk) {
#line 1026
    tmp___17 = drbd_disk_str((enum drbd_disk_state )ns.ldv_33657.pdsk);
#line 1026
    tmp___18 = drbd_disk_str((enum drbd_disk_state )os.ldv_33657.pdsk);
#line 1026
    tmp___19 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___18, tmp___17);
#line 1026
    pbp = pbp + (unsigned long )tmp___19;
  } else {

  }
#line 1027
  if ((int )ns.ldv_33657.susp != (int )os.ldv_33657.susp) {
#line 1027
    tmp___20 = sprintf(pbp, "susp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1027
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1028
  if ((int )ns.ldv_33657.aftr_isp != (int )os.ldv_33657.aftr_isp) {
#line 1028
    tmp___21 = sprintf(pbp, "aftr_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1028
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1029
  if ((int )ns.ldv_33657.peer_isp != (int )os.ldv_33657.peer_isp) {
#line 1029
    tmp___22 = sprintf(pbp, "peer_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1029
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1030
  if ((int )ns.ldv_33657.user_isp != (int )os.ldv_33657.user_isp) {
#line 1030
    tmp___23 = sprintf(pbp, "user_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1030
    pbp = pbp + (unsigned long )tmp___23;
  } else {

  }
#line 1031
  tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1031
  tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1031
  printk("<6>%s %s: %s\n", tmp___25, tmp___24, (char *)(& pb));
#line 1042
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1042
    tmp___26 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1042
    if (tmp___26 == 0) {
#line 1046
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1048
  mdev->state.i = ns.i;
#line 1049
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1050
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1053
  if ((int )os.ldv_33657.conn > 15 && (int )ns.ldv_33657.conn <= 10) {
#line 1054
    set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 1055
    mod_timer(& mdev->resync_timer, jiffies);
  } else {

  }
#line 1059
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_33657.conn <= 9) {
#line 1061
    mdev->ov_start_sector = (mdev->rs_total - mdev->ov_left) << 3;
#line 1063
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1063
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1063
    printk("<6>%s %s: Online Verify reached sector %llu\n", tmp___28, tmp___27, (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1067
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1069
    tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1069
    tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1069
    printk("<6>%s %s: Syncer continues.\n", tmp___30, tmp___29);
#line 1070
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time);
#line 1071
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1072
      tmp___31 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 1072
      if (tmp___31 == 0) {
#line 1073
        mod_timer(& mdev->resync_timer, jiffies);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1081
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1083
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1083
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1083
    printk("<6>%s %s: Resync suspended\n", tmp___33, tmp___32);
#line 1084
    mdev->rs_mark_time = jiffies;
#line 1085
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1086
      set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1089
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1091
    mdev->ov_position = 0UL;
#line 1092
    tmp___34 = drbd_bm_bits(mdev);
#line 1092
    mdev->rs_mark_left = tmp___34;
#line 1092
    mdev->rs_total = tmp___34;
#line 1094
    if (mdev->agreed_pro_version > 89) {
#line 1095
      set_ov_position(mdev, (enum drbd_conns )ns.ldv_33657.conn);
    } else {
#line 1097
      mdev->ov_start_sector = 0UL;
    }
#line 1098
    mdev->ov_left = mdev->rs_total - (mdev->ov_position >> 3);
#line 1100
    tmp___35 = jiffies;
#line 1100
    mdev->rs_mark_time = tmp___35;
#line 1100
    mdev->rs_start = tmp___35;
#line 1102
    mdev->ov_last_oos_size = 0UL;
#line 1103
    mdev->ov_last_oos_start = 0UL;
#line 1105
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1106
      tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1106
      tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1106
      printk("<6>%s %s: Starting Online Verify from sector %llu\n", tmp___37, tmp___36,
             (unsigned long long )mdev->ov_position);
#line 1108
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1112
  tmp___39 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1112
  if (tmp___39 != 0) {
#line 1113
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1117
    tmp___38 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1117
    if (tmp___38 != 0) {
#line 1118
      mdf = mdf | 64U;
    } else {

    }
#line 1119
    if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U || ((int )mdev->state.ldv_33657.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 4U)) {
#line 1121
      mdf = mdf | 2U;
    } else {

    }
#line 1122
    if ((int )mdev->state.ldv_33657.conn > 9) {
#line 1123
      mdf = mdf | 4U;
    } else {

    }
#line 1124
    if ((int )mdev->state.ldv_33657.disk > 4) {
#line 1125
      mdf = mdf | 1U;
    } else {

    }
#line 1126
    if ((int )mdev->state.ldv_33657.disk > 5) {
#line 1127
      mdf = mdf | 16U;
    } else {

    }
#line 1128
    if ((int )mdev->state.ldv_33657.pdsk <= 5 && (int )mdev->state.ldv_33657.pdsk > 3) {
#line 1129
      mdf = mdf | 32U;
    } else {

    }
#line 1130
    if ((mdev->ldev)->md.flags != mdf) {
#line 1131
      (mdev->ldev)->md.flags = mdf;
#line 1132
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1134
    if ((int )os.ldv_33657.disk <= 6 && (int )ns.ldv_33657.disk > 6) {
#line 1135
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1136
    put_ldev(mdev);
  } else {

  }
#line 1140
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1142
    set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1145
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1146
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1149
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1150
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1153
  if (((int )os.ldv_33657.conn > 7 && (int )ns.ldv_33657.conn <= 7) && (int )ns.ldv_33657.conn > 2) {
#line 1155
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1157
  tmp___40 = kmalloc___4(48UL, 32U);
#line 1157
  ascw = (struct after_state_chg_work *)tmp___40;
#line 1158
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1159
    ascw->os = os;
#line 1160
    ascw->ns = ns;
#line 1161
    ascw->flags = flags;
#line 1162
    ascw->w.cb = & w_after_state_ch;
#line 1163
    ascw->done = done;
#line 1164
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1166
    tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1166
    tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1166
    printk("<4>%s %s: Could not kmalloc an ascw\n", tmp___42, tmp___41);
  }
#line 1169
  return (rv);
}
}
#line 1172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1175
  __mptr = (struct drbd_work  const  *)w;
#line 1175
  ascw = (struct after_state_chg_work *)__mptr;
#line 1176
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1177
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1178
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1178
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1178
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1178
      printk("<3>%s %s: ASSERT( ascw->done != NULL ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             1178);
    } else {

    }
#line 1179
    complete(ascw->done);
  } else {

  }
#line 1181
  kfree((void const   *)ascw);
#line 1183
  return (1);
}
}
#line 1186 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1188
  if (rv != 0) {
#line 1189
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1189
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1189
    printk("<3>%s %s: Writing the bitmap failed not starting resync.\n", tmp___0,
           tmp);
#line 1190
    val.i = 0U;
#line 1190
    val.ldv_33657.conn = 10U;
#line 1190
    mask.i = 0U;
#line 1190
    mask.ldv_33657.conn = 31U;
#line 1190
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1191
    return;
  } else {

  }
#line 1194
  switch ((int )mdev->state.ldv_33657.conn) {
  case 12: 
#line 1196
  val___0.i = 0U;
#line 1196
  val___0.ldv_33657.conn = 15U;
#line 1196
  mask___0.i = 0U;
#line 1196
  mask___0.ldv_33657.conn = 31U;
#line 1196
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1197
  goto ldv_43653;
  case 11: 
#line 1199
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1200
  goto ldv_43653;
  }
  ldv_43653: ;
#line 1203
  return;
}
}
#line 1211 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state __ns ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_io_error_p eh ;
  int tmp___4 ;
  int tmp___5 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  union drbd_state __ns___0 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;

  {
#line 1216
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1217
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 1218
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1219
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1222
  fp = FP_DONT_CARE;
#line 1223
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1223
  if (tmp != 0) {
#line 1224
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1225
    put_ldev(mdev);
  } else {

  }
#line 1229
  drbd_bcast_state(mdev, ns);
#line 1231
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_33657.disk > 7) || (int )os.ldv_33657.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33657.disk <= 7) && (int )ns.ldv_33657.pdsk <= 7)) {
#line 1233
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1238
  if ((unsigned int )fp == 2U && (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1241
    if (((int )os.ldv_33657.pdsk > 5 && (int )ns.ldv_33657.pdsk <= 5) || ((int )os.ldv_33657.conn <= 9 && (int )ns.ldv_33657.conn > 9)) {
#line 1243
      tl_clear(mdev);
#line 1244
      spin_lock_irq(& mdev->req_lock);
#line 1245
      __ns.i = mdev->state.i;
#line 1245
      __ns.ldv_33657.susp = 0U;
#line 1245
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1246
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1250
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_33657.pdsk > 0) {
#line 1251
    drbd_send_uuids(mdev);
#line 1252
    drbd_send_state(mdev);
  } else {

  }
#line 1254
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) {
#line 1255
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)");
  } else {

  }
#line 1258
  if ((((int )os.ldv_33657.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_33657.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1264
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1264
    if (tmp___1 != 0) {
#line 1265
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_33657.disk > 7) {
#line 1265
        tmp___0 = atomic_read((atomic_t const   *)(& mdev->new_c_uuid));
#line 1265
        if (tmp___0 == 0) {
#line 1268
          atomic_set(& mdev->new_c_uuid, 2);
        } else {

        }
      } else {

      }
#line 1269
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1273
  if ((int )ns.ldv_33657.pdsk <= 3) {
#line 1273
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1273
    if (tmp___3 != 0) {
#line 1275
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1275
        tmp___2 = atomic_read((atomic_t const   *)(& mdev->new_c_uuid));
#line 1275
        if (tmp___2 == 0) {
#line 1277
          atomic_set(& mdev->new_c_uuid, 2);
        } else {

        }
      } else {

      }
#line 1280
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1281
        drbd_al_to_on_disk_bm(mdev);
      } else {

      }
#line 1282
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1286
  if (((int )ns.ldv_33657.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1288
    kfree((void const   *)mdev->p_uuid);
#line 1289
    mdev->p_uuid = 0;
#line 1290
    drbd_send_sizes(mdev, 0, 0);
#line 1291
    drbd_send_uuids(mdev);
#line 1292
    drbd_send_state(mdev);
  } else {

  }
#line 1296
  if ((int )ns.ldv_33657.conn > 9 && ((int )os.ldv_33657.aftr_isp != (int )ns.ldv_33657.aftr_isp || (int )os.ldv_33657.user_isp != (int )ns.ldv_33657.user_isp)) {
#line 1299
    drbd_send_state(mdev);
  } else {

  }
#line 1302
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1304
    suspend_other_sg(mdev);
  } else {

  }
#line 1308
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_33657.conn > 9) {
#line 1309
    drbd_send_state(mdev);
  } else {

  }
#line 1312
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1314
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync");
  } else {

  }
#line 1317
  if ((((int )os.ldv_33657.conn <= 9 && (int )ns.ldv_33657.conn <= 9) && (int )os.ldv_33657.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1319
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate");
  } else {

  }
#line 1321
  if ((int )os.ldv_33657.disk > 2 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1324
    eh = EP_PASS_ON;
#line 1325
    tmp___4 = _get_ldev_if_state(mdev, D_FAILED);
#line 1325
    if (tmp___4 != 0) {
#line 1326
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1327
      put_ldev(mdev);
    } else {

    }
#line 1330
    drbd_rs_cancel_all(mdev);
#line 1334
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1334
    if (tmp___5 == 0) {
#line 1334
      goto ldv_43665;
    } else {

    }
#line 1334
    tmp___6 = get_current();
#line 1334
    __wait.flags = 0U;
#line 1334
    __wait.private = (void *)tmp___6;
#line 1334
    __wait.func = & autoremove_wake_function;
#line 1334
    __wait.task_list.next = & __wait.task_list;
#line 1334
    __wait.task_list.prev = & __wait.task_list;
    ldv_43668: 
#line 1334
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1334
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1334
    if (tmp___7 == 0) {
#line 1334
      goto ldv_43667;
    } else {

    }
#line 1334
    schedule();
#line 1334
    goto ldv_43668;
    ldv_43667: 
#line 1334
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_43665: 
#line 1335
    mdev->rs_total = 0UL;
#line 1336
    mdev->rs_failed = 0UL;
#line 1337
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1339
    spin_lock_irq(& mdev->req_lock);
#line 1340
    __ns___0.i = mdev->state.i;
#line 1340
    __ns___0.ldv_33657.disk = 0U;
#line 1340
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1341
    spin_unlock_irq(& mdev->req_lock);
#line 1343
    if ((unsigned int )eh == 1U) {
#line 1344
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1347
  if ((int )os.ldv_33657.disk > 0 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1349
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 4U) {
#line 1350
      tmp___12 = drbd_send_state(mdev);
#line 1350
      if (tmp___12 != 0) {
#line 1351
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1351
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1351
        printk("<4>%s %s: Notified peer that my disk is broken.\n", tmp___9, tmp___8);
      } else {
#line 1353
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1353
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1353
        printk("<3>%s %s: Sending state in drbd_io_error() failed\n", tmp___11, tmp___10);
      }
    } else {

    }
#line 1356
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1356
    if (tmp___13 == 0) {
#line 1356
      goto ldv_43671;
    } else {

    }
#line 1356
    tmp___14 = get_current();
#line 1356
    __wait___0.flags = 0U;
#line 1356
    __wait___0.private = (void *)tmp___14;
#line 1356
    __wait___0.func = & autoremove_wake_function;
#line 1356
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1356
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_43674: 
#line 1356
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1356
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1356
    if (tmp___15 == 0) {
#line 1356
      goto ldv_43673;
    } else {

    }
#line 1356
    schedule();
#line 1356
    goto ldv_43674;
    ldv_43673: 
#line 1356
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_43671: 
#line 1357
    lc_destroy(mdev->resync);
#line 1358
    mdev->resync = 0;
#line 1359
    lc_destroy(mdev->act_log);
#line 1360
    mdev->act_log = 0;
#line 1361
    drbd_free_bc(mdev->ldev);
#line 1361
    mdev->ldev = 0;
#line 1365
    if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 1366
      __free_pages(mdev->md_io_tmpp, 0U);
    } else {

    }
  } else {

  }
#line 1370
  if ((int )ns.ldv_33657.disk > 3 && (int )ns.ldv_33657.pdsk > 3) {
#line 1370
    tmp___16 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1370
    if (tmp___16 != 0) {
#line 1372
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1373
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1377
  if ((((int )os.ldv_33657.conn > 10 && (int )ns.ldv_33657.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1380
    resume_next_sg(mdev);
  } else {

  }
#line 1383
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1384
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1388
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1391
    if ((int )os.ldv_33657.aftr_isp != (int )ns.ldv_33657.aftr_isp) {
#line 1392
      resume_next_sg(mdev);
    } else {

    }
#line 1394
    tmp___17 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1394
    if (tmp___17 != 0) {
#line 1395
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1398
  drbd_md_sync(mdev);
#line 1399
  return;
}
}
#line 1401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_new_current_uuid(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 1403
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1403
  if (tmp___0 != 0) {
#line 1404
    if ((mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1405
      drbd_uuid_new_current(mdev);
#line 1406
      tmp = get_net_conf(mdev);
#line 1406
      if (tmp != 0) {
#line 1407
        drbd_send_uuids(mdev);
#line 1408
        put_net_conf(mdev);
      } else {

      }
#line 1410
      drbd_md_sync(mdev);
    } else {

    }
#line 1412
    put_ldev(mdev);
  } else {

  }
#line 1414
  atomic_dec(& mdev->new_c_uuid);
#line 1415
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1417
  return (1);
}
}
#line 1420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 1422
  thi = (struct drbd_thread *)arg;
#line 1423
  mdev = thi->mdev;
  restart: 
#line 1428
  retval = (*(thi->function))(thi);
#line 1430
  tmp = spinlock_check(& thi->t_lock);
#line 1430
  flags = _raw_spin_lock_irqsave(tmp);
#line 1442
  if ((unsigned int )thi->t_state == 3U) {
#line 1443
    tmp___0 = get_current();
#line 1443
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1443
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1443
    printk("<6>%s %s: Restarting %s\n", tmp___2, tmp___1, (char *)(& tmp___0->comm));
#line 1444
    thi->t_state = Running;
#line 1445
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1446
    goto restart;
  } else {

  }
#line 1449
  thi->task = 0;
#line 1450
  thi->t_state = None;
#line 1451
  __asm__  volatile   ("mfence": : : "memory");
#line 1452
  complete(& thi->stop);
#line 1453
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1455
  tmp___3 = get_current();
#line 1455
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1455
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1455
  printk("<6>%s %s: Terminating %s\n", tmp___5, tmp___4, (char *)(& tmp___3->comm));
#line 1458
  module_put(& __this_module);
#line 1459
  return (retval);
}
}
#line 1462 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1465
  spinlock_check(& thi->t_lock);
#line 1465
  __raw_spin_lock_init(& thi->t_lock.ldv_5593.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1466
  thi->task = 0;
#line 1467
  thi->t_state = None;
#line 1468
  thi->function = func;
#line 1469
  thi->mdev = mdev;
#line 1470
  return;
}
}
#line 1472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  struct task_struct *tmp___9 ;
  unsigned int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  long tmp___13 ;
  raw_spinlock_t *tmp___14 ;
  struct task_struct *tmp___15 ;
  struct task_struct *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;

  {
#line 1474
  mdev = thi->mdev;
#line 1478
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1485
  tmp = spinlock_check(& thi->t_lock);
#line 1485
  flags = _raw_spin_lock_irqsave(tmp);
#line 1487
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1489
  tmp___0 = get_current();
#line 1489
  tmp___1 = get_current();
#line 1489
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1489
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1489
  printk("<6>%s %s: Starting %s thread (from %s [%d])\n", tmp___3, tmp___2, me, (char *)(& tmp___1->comm),
         tmp___0->pid);
#line 1493
  tmp___6 = try_module_get(& __this_module);
#line 1493
  if (tmp___6 == 0) {
#line 1494
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1494
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1494
    printk("<3>%s %s: Failed to get module reference in drbd_thread_start\n", tmp___5,
           tmp___4);
#line 1495
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1496
    return (0);
  } else {

  }
#line 1499
  init_completion(& thi->stop);
#line 1500
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1500
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1500
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1500
    printk("<3>%s %s: ASSERT( thi->task == NULL ) in %s:%d\n", tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           1500);
  } else {

  }
#line 1501
  thi->reset_cpu_mask = 1;
#line 1502
  thi->t_state = Running;
#line 1503
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1504
  tmp___9 = get_current();
#line 1504
  flush_signals(tmp___9);
#line 1506
  tmp___10 = mdev_to_minor(mdev);
#line 1506
  nt = kthread_create(& drbd_thread_setup, (void *)thi, "drbd%d_%s", tmp___10, me);
#line 1509
  tmp___13 = IS_ERR((void const   *)nt);
#line 1509
  if (tmp___13 != 0L) {
#line 1510
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1510
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1510
    printk("<3>%s %s: Couldn\'t start thread\n", tmp___12, tmp___11);
#line 1512
    module_put(& __this_module);
#line 1513
    return (0);
  } else {

  }
#line 1515
  tmp___14 = spinlock_check(& thi->t_lock);
#line 1515
  flags = _raw_spin_lock_irqsave(tmp___14);
#line 1516
  thi->task = nt;
#line 1517
  thi->t_state = Running;
#line 1518
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1519
  wake_up_process(nt);
#line 1520
  goto ldv_43712;
  case 2U: 
#line 1522
  thi->t_state = Restarting;
#line 1523
  tmp___15 = get_current();
#line 1523
  tmp___16 = get_current();
#line 1523
  tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1523
  tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1523
  printk("<6>%s %s: Restarting %s thread (from %s [%d])\n", tmp___18, tmp___17, me,
         (char *)(& tmp___16->comm), tmp___15->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1529
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1530
  goto ldv_43712;
  }
  ldv_43712: ;
#line 1533
  return (1);
}
}
#line 1537 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1541
  ns = restart != 0 ? Restarting : Exiting;
#line 1544
  tmp = spinlock_check(& thi->t_lock);
#line 1544
  flags = _raw_spin_lock_irqsave(tmp);
#line 1546
  if ((unsigned int )thi->t_state == 0U) {
#line 1547
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1548
    if (restart != 0) {
#line 1549
      drbd_thread_start(thi);
    } else {

    }
#line 1550
    return;
  } else {

  }
#line 1553
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1554
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1555
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1556
      return;
    } else {

    }
#line 1559
    thi->t_state = ns;
#line 1560
    __asm__  volatile   ("mfence": : : "memory");
#line 1561
    init_completion(& thi->stop);
#line 1562
    tmp___0 = get_current();
#line 1562
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1563
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1567
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1569
  if (wait != 0) {
#line 1570
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1571
  return;
}
}
#line 1581 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1586
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1586
  if (tmp != 0U) {
#line 1587
    return;
  } else {

  }
#line 1589
  tmp___0 = mdev_to_minor(mdev);
#line 1589
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1589
  ord = (int )(tmp___0 % tmp___1);
#line 1590
  cpu = -1;
#line 1590
  goto ldv_43733;
  ldv_43732: 
#line 1591
  tmp___2 = ord;
#line 1591
  ord = ord - 1;
#line 1591
  if (tmp___2 == 0) {
#line 1592
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1593
    return;
  } else {

  }
  ldv_43733: 
#line 1590
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1590
  cpu = (int )tmp___3;
#line 1590
  if (cpu < nr_cpu_ids) {
#line 1591
    goto ldv_43732;
  } else {

  }
#line 1597
  cpumask_setall(mdev->cpu_mask);
#line 1598
  return;
}
}
#line 1607 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 1609
  tmp = get_current();
#line 1609
  p = tmp;
#line 1610
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1615
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1615
  if (_b != 0) {
#line 1615
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1615
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1615
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "drbd_thread_current_set_cpu",
           (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           1615);
  } else {

  }
#line 1615
  if (_b != 0) {
#line 1616
    return;
  } else {

  }
#line 1617
  if (thi->reset_cpu_mask == 0) {
#line 1618
    return;
  } else {

  }
#line 1619
  thi->reset_cpu_mask = 0;
#line 1620
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1621
  return;
}
}
#line 1625 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 1631
  _b = (unsigned long )h == (unsigned long )((struct p_header *)0);
#line 1631
  if (_b != 0) {
#line 1631
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1631
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1631
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_send_cmd", (char *)"!h",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           1631);
  } else {

  }
#line 1631
  if (_b != 0) {
#line 1631
    return (0);
  } else {

  }
#line 1632
  _b___0 = size == 0UL;
#line 1632
  if (_b___0 != 0) {
#line 1632
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1632
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1632
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "_drbd_send_cmd", (char *)"!size",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           1632);
  } else {

  }
#line 1632
  if (_b___0 != 0) {
#line 1632
    return (0);
  } else {

  }
#line 1634
  h->magic = 1728214147U;
#line 1635
  tmp___3 = __fswab16((int )((__u16 )cmd));
#line 1635
  h->command = tmp___3;
#line 1636
  tmp___4 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1636
  h->length = tmp___4;
#line 1638
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1640
  ok = (size_t )sent == size;
#line 1641
  if (ok == 0) {
#line 1642
    tmp___5 = cmdname(cmd);
#line 1642
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1642
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1642
    printk("<3>%s %s: short sent %s size=%d sent=%d\n", tmp___7, tmp___6, tmp___5,
           (int )size, sent);
  } else {

  }
#line 1644
  return (ok);
}
}
#line 1650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1653
  ok = 0;
#line 1656
  if (use_data_socket != 0) {
#line 1657
    ldv_mutex_lock_129(& mdev->data.mutex);
#line 1658
    sock = mdev->data.socket;
  } else {
#line 1660
    ldv_mutex_lock_130(& mdev->meta.mutex);
#line 1661
    sock = mdev->meta.socket;
  }
#line 1666
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1666
  if (tmp != 0L) {
#line 1667
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1669
  if (use_data_socket != 0) {
#line 1670
    ldv_mutex_unlock_131(& mdev->data.mutex);
  } else {
#line 1672
    ldv_mutex_unlock_132(& mdev->meta.mutex);
  }
#line 1673
  return (ok);
}
}
#line 1676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1682
  h.magic = 1728214147U;
#line 1683
  tmp = __fswab16((int )((__u16 )cmd));
#line 1683
  h.command = tmp;
#line 1684
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1684
  h.length = tmp___0;
#line 1686
  tmp___1 = drbd_get_data_sock___0(mdev);
#line 1686
  if (tmp___1 == 0) {
#line 1687
    return (0);
  } else {

  }
#line 1689
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1689
  ok = tmp___2 == 8;
#line 1691
  if (ok != 0) {
#line 1691
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1691
    if ((size_t )tmp___3 == size) {
#line 1691
      tmp___4 = 1;
    } else {
#line 1691
      tmp___4 = 0;
    }
  } else {
#line 1691
    tmp___4 = 0;
  }
#line 1691
  ok = tmp___4;
#line 1694
  drbd_put_data_sock___0(mdev);
#line 1696
  return (ok);
}
}
#line 1699 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_89 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  long tmp___2 ;

  {
#line 1704
  apv = mdev->agreed_pro_version;
#line 1706
  if (apv > 87) {
#line 1706
    if (apv == 88) {
#line 1706
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1706
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1706
      tmp___0 = 140;
    }
#line 1706
    size = tmp___0;
  } else {
#line 1706
    size = 12;
  }
#line 1714
  ldv_mutex_lock_133(& mdev->data.mutex);
#line 1715
  sock = mdev->data.socket;
#line 1717
  tmp___2 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1717
  if (tmp___2 != 0L) {
#line 1718
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1720
    p = & mdev->data.sbuf.rs_param_89;
#line 1723
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1725
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1725
    p->rate = tmp___1;
#line 1727
    if (apv > 87) {
#line 1728
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1729
    if (apv > 88) {
#line 1730
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1732
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1734
    rv = 0;
  }
#line 1736
  ldv_mutex_unlock_134(& mdev->data.mutex);
#line 1738
  return (rv);
}
}
#line 1741 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  __u32 tmp___8 ;

  {
#line 1746
  size = 32;
#line 1748
  if (mdev->agreed_pro_version > 86) {
#line 1749
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1749
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1753
  tmp___0 = kmalloc___4((size_t )size, 16U);
#line 1753
  p = (struct p_protocol *)tmp___0;
#line 1754
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1755
    return (0);
  } else {

  }
#line 1757
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1757
  p->protocol = tmp___1;
#line 1758
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1758
  p->after_sb_0p = tmp___2;
#line 1759
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1759
  p->after_sb_1p = tmp___3;
#line 1760
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1760
  p->after_sb_2p = tmp___4;
#line 1761
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1761
  p->two_primaries = tmp___5;
#line 1763
  cf = 0;
#line 1764
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1765
    cf = cf | 1;
  } else {

  }
#line 1766
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1767
    if (mdev->agreed_pro_version > 91) {
#line 1768
      cf = cf | 2;
    } else {
#line 1770
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1770
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1770
      printk("<3>%s %s: --dry-run is not supported by peer", tmp___7, tmp___6);
#line 1771
      kfree((void const   *)p);
#line 1772
      return (0);
    }
  } else {

  }
#line 1775
  tmp___8 = __fswab32((__u32 )cf);
#line 1775
  p->conn_flags = tmp___8;
#line 1777
  if (mdev->agreed_pro_version > 86) {
#line 1778
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 1780
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header *)p, (size_t )size);
#line 1782
  kfree((void const   *)p);
#line 1783
  return (rv);
}
}
#line 1786 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 1791
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1791
  if (tmp == 0) {
#line 1792
    return (1);
  } else {

  }
#line 1794
  i = 0;
#line 1794
  goto ldv_43799;
  ldv_43798: ;
#line 1795
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1795
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 1795
    p.uuid[i] = tmp___0;
  } else {
#line 1795
    p.uuid[i] = 0ULL;
  }
#line 1794
  i = i + 1;
  ldv_43799: ;
#line 1794
  if (i <= 3) {
#line 1795
    goto ldv_43798;
  } else {

  }
#line 1797
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 1798
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 1798
  p.uuid[4] = tmp___1;
#line 1799
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 1800
  tmp___2 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1800
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 1801
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 2009UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 1802
  tmp___3 = __fswab64(uuid_flags);
#line 1802
  p.uuid[5] = tmp___3;
#line 1804
  put_ldev(mdev);
#line 1806
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header *)(& p), 56UL);
#line 1806
  return (tmp___4);
}
}
#line 1810 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1812
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 1812
  return (tmp);
}
}
#line 1815 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1817
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 1817
  return (tmp);
}
}
#line 1821 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  struct p_rs_uuid p ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 1825
  tmp = __fswab64(val);
#line 1825
  p.uuid = tmp;
#line 1827
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header *)(& p), 16UL);
#line 1827
  return (tmp___0);
}
}
#line 1831 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u64 tmp___3 ;
  sector_t tmp___4 ;
  __u64 tmp___5 ;
  __u64 tmp___6 ;
  unsigned int tmp___7 ;
  __u32 tmp___8 ;
  __u16 tmp___9 ;
  __u16 tmp___10 ;

  {
#line 1838
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1838
  if (tmp___1 != 0) {
#line 1839
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1839
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1839
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1839
      printk("<3>%s %s: ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n", tmp___0, tmp,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             1839);
    } else {

    }
#line 1840
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 1841
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 1842
    q_order_type = drbd_queue_order_type(mdev);
#line 1843
    put_ldev(mdev);
  } else {
#line 1845
    d_size = 0UL;
#line 1846
    u_size = 0UL;
#line 1847
    q_order_type = 0;
  }
#line 1850
  tmp___2 = __fswab64((__u64 )d_size);
#line 1850
  p.d_size = tmp___2;
#line 1851
  tmp___3 = __fswab64((__u64 )u_size);
#line 1851
  p.u_size = tmp___3;
#line 1852
  if (trigger_reply == 0) {
#line 1852
    tmp___4 = drbd_get_capacity(mdev->this_bdev);
#line 1852
    tmp___5 = (__u64 )tmp___4;
  } else {
#line 1852
    tmp___5 = 0ULL;
  }
#line 1852
  tmp___6 = __fswab64(tmp___5);
#line 1852
  p.c_size = tmp___6;
#line 1853
  tmp___7 = queue_max_segment_size(mdev->rq_queue);
#line 1853
  tmp___8 = __fswab32(tmp___7);
#line 1853
  p.max_segment_size = tmp___8;
#line 1854
  tmp___9 = __fswab16((int )((__u16 )q_order_type));
#line 1854
  p.queue_order_type = tmp___9;
#line 1855
  tmp___10 = __fswab16((int )((__u16 )flags));
#line 1855
  p.dds_flags = tmp___10;
#line 1857
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header *)(& p), 40UL);
#line 1859
  return (ok);
}
}
#line 1866 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 1870
  ok = 0;
#line 1874
  drbd_state_lock___0(mdev);
#line 1876
  ldv_mutex_lock_135(& mdev->data.mutex);
#line 1878
  tmp = __fswab32(mdev->state.i);
#line 1878
  p.state = tmp;
#line 1879
  sock = mdev->data.socket;
#line 1881
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1881
  if (tmp___0 != 0L) {
#line 1882
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header *)(& p), 12UL, 0U);
  } else {

  }
#line 1886
  ldv_mutex_unlock_136(& mdev->data.mutex);
#line 1888
  drbd_state_unlock(mdev);
#line 1889
  return (ok);
}
}
#line 1892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 1897
  tmp = __fswab32(mask.i);
#line 1897
  p.mask = tmp;
#line 1898
  tmp___0 = __fswab32(val.i);
#line 1898
  p.val = tmp___0;
#line 1900
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header *)(& p), 16UL);
#line 1900
  return (tmp___1);
}
}
#line 1904 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 1908
  tmp = __fswab32((__u32 )retcode);
#line 1908
  p.retcode = tmp;
#line 1910
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header *)(& p), 12UL);
#line 1910
  return (tmp___0);
}
}
#line 1914 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 1927
  if ((unsigned int )*((unsigned char *)mdev + 216UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 1929
    return (0);
  } else {

  }
#line 1931
  if (c->bit_offset >= c->bm_bits) {
#line 1932
    return (0);
  } else {

  }
#line 1935
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 1936
  memset((void *)(& p->code), 0, 4087UL);
#line 1938
  plain_bits = 0UL;
#line 1943
  toggle = 2U;
  ldv_43853: ;
#line 1948
  if (toggle == 0U) {
#line 1948
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 1948
    tmp = tmp___0;
  } else {
#line 1948
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 1948
    tmp = tmp___1;
  }
#line 1950
  if (tmp == 0xffffffffffffffffUL) {
#line 1951
    tmp = c->bm_bits;
  } else {

  }
#line 1952
  rl = tmp - c->bit_offset;
#line 1954
  if (toggle == 2U) {
#line 1955
    if (rl == 0UL) {
#line 1958
      DCBP_set_start(p, 1);
#line 1960
      toggle = toggle == 0U;
#line 1961
      goto ldv_43851;
    } else {

    }
#line 1963
    DCBP_set_start(p, 0);
  } else {

  }
#line 1968
  if (rl == 0UL) {
#line 1969
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1969
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1969
    printk("<3>%s %s: unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
           tmp___3, tmp___2, toggle, c->bit_offset);
#line 1971
    return (-1);
  } else {

  }
#line 1974
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 1975
  if (bits == -105) {
#line 1976
    goto ldv_43852;
  } else {

  }
#line 1977
  if (bits <= 0) {
#line 1978
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1978
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1978
    printk("<3>%s %s: error while encoding bitmap: %d\n", tmp___5, tmp___4, bits);
#line 1979
    return (0);
  } else {

  }
#line 1982
  toggle = toggle == 0U;
#line 1983
  plain_bits = plain_bits + rl;
#line 1984
  c->bit_offset = tmp;
  ldv_43851: ;
#line 1985
  if (c->bit_offset < c->bm_bits) {
#line 1986
    goto ldv_43853;
  } else {

  }
  ldv_43852: 
#line 1987
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 1989
  if ((unsigned long )(len << 3) > plain_bits) {
#line 1992
    c->bit_offset = c->bit_offset - plain_bits;
#line 1993
    bm_xfer_ctx_bit_to_word_offset(c);
#line 1994
    c->bit_offset = c->word_offset * 64UL;
#line 1995
    return (0);
  } else {

  }
#line 2000
  bm_xfer_ctx_bit_to_word_offset(c);
#line 2003
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 2005
  return ((int )len);
}
}
#line 2009 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_29639 send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header *h ,
                                        struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2012
  p = (struct p_compressed_bm *)h;
#line 2017
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2019
  if (len < 0) {
#line 2020
    return (FAILED);
  } else {

  }
#line 2022
  if (len != 0) {
#line 2023
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2024
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2027
    c->packets[0] = c->packets[0] + 1U;
#line 2028
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2030
    if (c->bit_offset >= c->bm_bits) {
#line 2031
      len = 0;
    } else {

    }
  } else {
#line 2035
    __min1 = 511UL;
#line 2035
    __min2 = c->bm_words - c->word_offset;
#line 2035
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2036
    len = (int )((unsigned int )num_words * 8U);
#line 2037
    if (len != 0) {
#line 2038
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2039
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2041
    c->word_offset = c->word_offset + num_words;
#line 2042
    c->bit_offset = c->word_offset * 64UL;
#line 2044
    c->packets[1] = c->packets[1] + 1U;
#line 2045
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2047
    if (c->bit_offset > c->bm_bits) {
#line 2048
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2050
  ok = ok != 0 ? (len == 0 ? 2 : 0) : 1;
#line 2052
  if (ok == 2) {
#line 2053
    INFO_bm_xfer_stats(mdev, "send", c);
  } else {

  }
#line 2054
  return ((enum ldv_29639 )ok);
}
}
#line 2058 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header *p ;
  int ret ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___11 ;
  size_t tmp___12 ;
  enum ldv_29639 tmp___13 ;

  {
#line 2064
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2064
  if (_b != 0) {
#line 2064
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2064
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2064
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_send_bitmap", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2064);
  } else {

  }
#line 2064
  if (_b != 0) {
#line 2064
    return (0);
  } else {

  }
#line 2068
  tmp___1 = __get_free_pages(16U, 0U);
#line 2068
  p = (struct p_header *)tmp___1;
#line 2069
  if ((unsigned long )p == (unsigned long )((struct p_header *)0)) {
#line 2070
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2070
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2070
    printk("<3>%s %s: failed to allocate one page buffer in %s\n", tmp___3, tmp___2,
           "_drbd_send_bitmap");
#line 2071
    return (0);
  } else {

  }
#line 2074
  tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2074
  if (tmp___10 != 0) {
#line 2075
    tmp___9 = drbd_md_test_flag(mdev->ldev, 8);
#line 2075
    if (tmp___9 != 0) {
#line 2076
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2076
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2076
      printk("<6>%s %s: Writing the whole bitmap, MDF_FullSync was set.\n", tmp___5,
             tmp___4);
#line 2077
      drbd_bm_set_all(mdev);
#line 2078
      tmp___8 = drbd_bm_write(mdev);
#line 2078
      if (tmp___8 != 0) {
#line 2082
        tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2082
        tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2082
        printk("<3>%s %s: Failed to write bitmap to disk!\n", tmp___7, tmp___6);
      } else {
#line 2084
        drbd_md_clear_flag(mdev, 8);
#line 2085
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2088
    put_ldev(mdev);
  } else {

  }
#line 2091
  tmp___11 = drbd_bm_bits(mdev);
#line 2091
  tmp___12 = drbd_bm_words(mdev);
#line 2091
  __constr_expr_0.bm_bits = tmp___11;
#line 2091
  __constr_expr_0.bm_words = tmp___12;
#line 2091
  __constr_expr_0.bit_offset = 0UL;
#line 2091
  __constr_expr_0.word_offset = 0UL;
#line 2091
  __constr_expr_0.packets[0] = 0U;
#line 2091
  __constr_expr_0.packets[1] = 0U;
#line 2091
  __constr_expr_0.bytes[0] = 0U;
#line 2091
  __constr_expr_0.bytes[1] = 0U;
#line 2091
  c = __constr_expr_0;
  ldv_43880: 
#line 2097
  tmp___13 = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2097
  ret = (int )tmp___13;
#line 2098
  if (ret == 0) {
#line 2099
    goto ldv_43880;
  } else {

  }
#line 2100
  free_pages((unsigned long )p, 0U);
#line 2101
  return (ret == 2);
}
}
#line 2104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2108
  tmp = drbd_get_data_sock___0(mdev);
#line 2108
  if (tmp == 0) {
#line 2109
    return (-1);
  } else {

  }
#line 2110
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2110
  err = tmp___0 == 0;
#line 2111
  drbd_put_data_sock___0(mdev);
#line 2112
  return (err);
}
}
#line 2115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2120
  p.barrier = barrier_nr;
#line 2121
  tmp = __fswab32(set_size);
#line 2121
  p.set_size = tmp;
#line 2123
  if ((int )mdev->state.ldv_33657.conn <= 9) {
#line 2124
    return (0);
  } else {

  }
#line 2125
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header *)(& p), 16UL);
#line 2127
  return (ok);
}
}
#line 2138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2146
  p.sector = sector;
#line 2147
  p.block_id = block_id;
#line 2148
  p.blksize = blksize;
#line 2149
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2149
  tmp___0 = __fswab32((__u32 )tmp);
#line 2149
  p.seq_num = tmp___0;
#line 2151
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_33657.conn <= 9) {
#line 2152
    return (0);
  } else {

  }
#line 2153
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header *)(& p), 32UL);
#line 2155
  return (ok);
}
}
#line 2158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) 
{ 
  int header_size ;
  int data_size ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2161
  header_size = 24;
#line 2163
  data_size = (int )((struct p_header *)dp)->length - header_size;
#line 2165
  tmp = __fswab32((__u32 )data_size);
#line 2165
  tmp___0 = _drbd_send_ack(mdev, cmd, dp->sector, tmp, dp->block_id);
#line 2165
  return (tmp___0);
}
}
#line 2169 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2172
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2172
  return (tmp);
}
}
#line 2181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2184
  tmp = __fswab32(e->size);
#line 2184
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2184
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->block_id);
#line 2184
  return (tmp___1);
}
}
#line 2192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2195
  tmp = __fswab64(block_id);
#line 2195
  tmp___0 = __fswab32((__u32 )blksize);
#line 2195
  tmp___1 = __fswab64((__u64 )sector);
#line 2195
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2195
  return (tmp___2);
}
}
#line 2201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2207
  tmp = __fswab64((__u64 )sector);
#line 2207
  p.sector = tmp;
#line 2208
  p.block_id = block_id;
#line 2209
  tmp___0 = __fswab32((__u32 )size);
#line 2209
  p.blksize = tmp___0;
#line 2211
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header *)(& p), 32UL);
#line 2213
  return (ok);
}
}
#line 2216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2224
  tmp = __fswab64((__u64 )sector);
#line 2224
  p.sector = tmp;
#line 2225
  p.block_id = 1728263026ULL;
#line 2226
  tmp___0 = __fswab32((__u32 )size);
#line 2226
  p.blksize = tmp___0;
#line 2228
  p.head.magic = 1728214147U;
#line 2229
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2229
  p.head.command = tmp___1;
#line 2230
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2230
  p.head.length = tmp___2;
#line 2232
  ldv_mutex_lock_137(& mdev->data.mutex);
#line 2234
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2234
  ok = tmp___3 == 32;
#line 2235
  if (ok != 0) {
#line 2235
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2235
    if (tmp___4 == digest_size) {
#line 2235
      tmp___5 = 1;
    } else {
#line 2235
      tmp___5 = 0;
    }
  } else {
#line 2235
    tmp___5 = 0;
  }
#line 2235
  ok = tmp___5;
#line 2237
  ldv_mutex_unlock_138(& mdev->data.mutex);
#line 2239
  return (ok);
}
}
#line 2242 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2247
  tmp = __fswab64((__u64 )sector);
#line 2247
  p.sector = tmp;
#line 2248
  p.block_id = 1728261953ULL;
#line 2249
  tmp___0 = __fswab32((__u32 )size);
#line 2249
  p.blksize = tmp___0;
#line 2251
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header *)(& p), 32UL);
#line 2253
  return (ok);
}
}
#line 2256 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_send_delay_probe(struct drbd_conf *mdev , struct drbd_socket *ds ) 
{ 
  struct p_delay_probe dp ;
  int offset ;
  int ok ;
  struct timeval now ;
  __u32 tmp ;
  __u32 tmp___0 ;
  long tmp___1 ;

  {
#line 2259
  ok = 0;
#line 2262
  ldv_mutex_lock_139(& ds->mutex);
#line 2263
  tmp___1 = __builtin_expect((unsigned long )ds->socket != (unsigned long )((struct socket *)0),
                             1L);
#line 2263
  if (tmp___1 != 0L) {
#line 2264
    do_gettimeofday(& now);
#line 2265
    offset = (int )(((unsigned int )now.tv_usec - (unsigned int )mdev->dps_time.tv_usec) + (unsigned int )(now.tv_sec - mdev->dps_time.tv_sec) * 1000000U);
#line 2267
    tmp = __fswab32(mdev->delay_seq);
#line 2267
    dp.seq_num = tmp;
#line 2268
    tmp___0 = __fswab32((__u32 )offset);
#line 2268
    dp.offset = tmp___0;
#line 2270
    ok = _drbd_send_cmd(mdev, ds->socket, P_DELAY_PROBE, (struct p_header *)(& dp),
                        16UL, 0U);
  } else {

  }
#line 2273
  ldv_mutex_unlock_140(& ds->mutex);
#line 2275
  return (ok);
}
}
#line 2278 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_send_delay_probes(struct drbd_conf *mdev ) 
{ 
  int ok ;
  int tmp ;
  int tmp___0 ;

  {
#line 2282
  mdev->delay_seq = mdev->delay_seq + 1U;
#line 2283
  do_gettimeofday(& mdev->dps_time);
#line 2284
  ok = drbd_send_delay_probe(mdev, & mdev->meta);
#line 2285
  if (ok != 0) {
#line 2285
    tmp = drbd_send_delay_probe(mdev, & mdev->data);
#line 2285
    if (tmp != 0) {
#line 2285
      tmp___0 = 1;
    } else {
#line 2285
      tmp___0 = 0;
    }
  } else {
#line 2285
    tmp___0 = 0;
  }
#line 2285
  ok = tmp___0;
#line 2287
  mdev->dp_volume_last = mdev->send_cnt;
#line 2288
  mod_timer(& mdev->delay_probe_timer, (unsigned long )((mdev->sync_conf.dp_interval * 250) / 10) + (unsigned long )jiffies);
#line 2290
  return (ok);
}
}
#line 2297 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 2302
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2302
    tmp___0 = 1;
  } else {
#line 2302
    tmp = get_t_state(& mdev->asender);
#line 2302
    if ((unsigned int )tmp != 1U) {
#line 2302
      tmp___0 = 1;
    } else
#line 2302
    if ((int )mdev->state.ldv_33657.conn <= 9) {
#line 2302
      tmp___0 = 1;
    } else {
#line 2302
      tmp___0 = 0;
    }
  }
#line 2302
  drop_it = tmp___0;
#line 2307
  if (drop_it != 0) {
#line 2308
    return (1);
  } else {

  }
#line 2310
  mdev->ko_count = mdev->ko_count - 1U;
#line 2310
  drop_it = mdev->ko_count == 0U;
#line 2311
  if (drop_it == 0) {
#line 2312
    tmp___1 = get_current();
#line 2312
    tmp___2 = get_current();
#line 2312
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2312
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2312
    printk("<3>%s %s: [%s/%d] sock_sendmsg time expired, ko = %u\n", tmp___4, tmp___3,
           (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2314
    request_ping(mdev);
  } else {

  }
#line 2317
  return (drop_it);
}
}
#line 2341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2344
  tmp = kmap(page);
#line 2344
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      0U);
#line 2344
  sent = tmp___0;
#line 2345
  kunmap(page);
#line 2346
  if ((size_t )sent == size) {
#line 2347
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2348
  return ((size_t )sent == size);
}
}
#line 2351 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct thread_info *tmp___8 ;
  long tmp___9 ;

  {
#line 2354
  tmp = current_thread_info___1();
#line 2354
  oldfs = tmp->addr_limit;
#line 2356
  len = (int )size;
#line 2364
  if (disable_sendpage != 0) {
#line 2365
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2365
    return (tmp___0);
  } else {
#line 2364
    tmp___1 = page_count(page);
#line 2364
    if (tmp___1 <= 0) {
#line 2365
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2365
      return (tmp___0);
    } else {
#line 2364
      tmp___2 = PageSlab(page);
#line 2364
      if (tmp___2 != 0) {
#line 2365
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2365
        return (tmp___0);
      } else {

      }
    }
  }
#line 2367
  drbd_update_congested(mdev);
#line 2368
  tmp___3 = current_thread_info___1();
#line 2368
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2368
  tmp___3->addr_limit = __constr_expr_0;
  ldv_43990: 
#line 2370
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, 16384);
#line 2370
  sent = (int )tmp___4;
#line 2373
  if (sent == -11) {
#line 2374
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2374
    if (tmp___5 != 0) {
#line 2376
      goto ldv_43987;
    } else {
#line 2378
      goto ldv_43988;
    }
  } else {

  }
#line 2380
  if (sent <= 0) {
#line 2381
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2381
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2381
    printk("<4>%s %s: %s: size=%d len=%d sent=%d\n", tmp___7, tmp___6, "_drbd_send_page",
           (int )size, len, sent);
#line 2383
    goto ldv_43987;
  } else {

  }
#line 2385
  len = len - sent;
#line 2386
  offset = offset + sent;
  ldv_43988: ;
#line 2387
  if (len > 0) {
#line 2388
    goto ldv_43990;
  } else {

  }
  ldv_43987: 
#line 2388
  tmp___8 = current_thread_info___1();
#line 2388
  tmp___8->addr_limit = oldfs;
#line 2389
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2391
  ok = len == 0;
#line 2392
  tmp___9 = __builtin_expect(ok != 0, 1L);
#line 2392
  if (tmp___9 != 0L) {
#line 2393
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2394
  return (ok);
}
}
#line 2397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2401
  bvec = bio->bi_io_vec;
#line 2401
  i = 0;
#line 2401
  goto ldv_43998;
  ldv_43997: 
#line 2402
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len);
#line 2402
  if (tmp == 0) {
#line 2404
    return (0);
  } else {

  }
#line 2401
  bvec = bvec + 1;
#line 2401
  i = i + 1;
  ldv_43998: ;
#line 2401
  if ((int )bio->bi_vcnt > i) {
#line 2402
    goto ldv_43997;
  } else {

  }

#line 2406
  return (1);
}
}
#line 2409 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2413
  bvec = bio->bi_io_vec;
#line 2413
  i = 0;
#line 2413
  goto ldv_44007;
  ldv_44006: 
#line 2414
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len);
#line 2414
  if (tmp == 0) {
#line 2416
    return (0);
  } else {

  }
#line 2413
  bvec = bvec + 1;
#line 2413
  i = i + 1;
  ldv_44007: ;
#line 2413
  if ((int )bio->bi_vcnt > i) {
#line 2414
    goto ldv_44006;
  } else {

  }

#line 2419
  return (1);
}
}
#line 2422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 2424
  page = e->pages;
#line 2425
  len = e->size;
#line 2426
  goto ldv_44021;
  ldv_44020: 
#line 2427
  __min1 = len;
#line 2427
  __min2 = 4096U;
#line 2427
  l = __min1 < __min2 ? __min1 : __min2;
#line 2428
  tmp = _drbd_send_page(mdev, page, 0, (size_t )l);
#line 2428
  if (tmp == 0) {
#line 2429
    return (0);
  } else {

  }
#line 2430
  len = len - l;
#line 2426
  page = page_chain_next(page);
  ldv_44021: ;
#line 2426
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2426
    tmp___0 = page_chain_next(page);
#line 2426
    __builtin_prefetch((void const   *)tmp___0);
#line 2426
    if (1 != 0) {
#line 2427
      goto ldv_44020;
    } else {
#line 2429
      goto ldv_44022;
    }
  } else {

  }
  ldv_44022: ;
#line 2432
  return (1);
}
}
#line 2435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void consider_delay_probes(struct drbd_conf *mdev ) 
{ 


  {
#line 2437
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 256U || mdev->agreed_pro_version <= 92) {
#line 2438
    return;
  } else {

  }
#line 2440
  if (mdev->dp_volume_last + (unsigned int )(mdev->sync_conf.dp_volume * 2) < mdev->send_cnt) {
#line 2441
    drbd_send_delay_probes(mdev);
  } else {

  }
#line 2442
  return;
}
}
#line 2444 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_delay_probes(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 2446
  if (cancel == 0 && (unsigned int )*((unsigned short *)mdev + 1006UL) == 256U) {
#line 2447
    drbd_send_delay_probes(mdev);
  } else {

  }
#line 2449
  return (1);
}
}
#line 2452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void delay_probe_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 2454
  mdev = (struct drbd_conf *)data;
#line 2456
  tmp = list_empty((struct list_head  const  *)(& mdev->delay_probe_work.list));
#line 2456
  if (tmp != 0) {
#line 2457
    drbd_queue_work(& mdev->data.work, & mdev->delay_probe_work);
  } else {

  }
#line 2458
  return;
}
}
#line 2463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  bool tmp___7 ;
  bool tmp___8 ;
  bool tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;

  {
#line 2465
  ok = 1;
#line 2467
  dp_flags = 0U;
#line 2471
  tmp = drbd_get_data_sock___0(mdev);
#line 2471
  if (tmp == 0) {
#line 2472
    return (0);
  } else {

  }
#line 2474
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2474
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2474
    dgs = (int )tmp___0;
  } else {
#line 2474
    dgs = 0;
  }
#line 2477
  p.head.magic = 1728214147U;
#line 2478
  p.head.command = 0U;
#line 2479
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2479
  p.head.length = tmp___1;
#line 2482
  tmp___2 = __fswab64((__u64 )req->sector);
#line 2482
  p.sector = tmp___2;
#line 2483
  p.block_id = (u64 )req;
#line 2484
  tmp___3 = atomic_add_return(1, & mdev->packet_seq);
#line 2484
  req->seq_num = tmp___3;
#line 2484
  tmp___4 = __fswab32((__u32 )tmp___3);
#line 2484
  p.seq_num = tmp___4;
#line 2486
  dp_flags = 0U;
#line 2491
  tmp___7 = bio_rw_flagged(req->master_bio, BIO_RW_BARRIER);
#line 2491
  if ((int )tmp___7) {
#line 2492
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2492
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2492
    printk("<3>%s %s: ASSERT FAILED would have set DP_HARDBARRIER\n", tmp___6, tmp___5);
  } else {

  }
#line 2495
  tmp___8 = bio_rw_flagged(req->master_bio, BIO_RW_SYNCIO);
#line 2495
  if ((int )tmp___8) {
#line 2496
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2499
  tmp___9 = bio_rw_flagged(req->master_bio, BIO_RW_UNPLUG);
#line 2499
  if ((int )tmp___9) {
#line 2500
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2501
  if ((int )mdev->state.ldv_33657.conn > 15 && (int )mdev->state.ldv_33657.conn <= 21) {
#line 2503
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2505
  tmp___10 = __fswab32(dp_flags);
#line 2505
  p.dp_flags = tmp___10;
#line 2506
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 2507
  tmp___11 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 32768U);
#line 2507
  ok = tmp___11 == 32;
#line 2509
  if (ok != 0 && dgs != 0) {
#line 2510
    dgb = mdev->int_dig_out;
#line 2511
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2512
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 32768U);
  } else {

  }
#line 2514
  if (ok != 0) {
#line 2515
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 2516
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2518
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
  } else {

  }
#line 2521
  drbd_put_data_sock___0(mdev);
#line 2523
  if (ok != 0) {
#line 2524
    consider_delay_probes(mdev);
  } else {

  }
#line 2526
  return (ok);
}
}
#line 2533 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2541
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2541
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2541
    dgs = (int )tmp;
  } else {
#line 2541
    dgs = 0;
  }
#line 2544
  p.head.magic = 1728214147U;
#line 2545
  tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2545
  p.head.command = tmp___0;
#line 2546
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2546
  p.head.length = tmp___1;
#line 2549
  tmp___2 = __fswab64((__u64 )e->sector);
#line 2549
  p.sector = tmp___2;
#line 2550
  p.block_id = e->block_id;
#line 2557
  tmp___3 = drbd_get_data_sock___0(mdev);
#line 2557
  if (tmp___3 == 0) {
#line 2558
    return (0);
  } else {

  }
#line 2560
  tmp___4 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 32768U);
#line 2560
  ok = tmp___4 == 32;
#line 2562
  if (ok != 0 && dgs != 0) {
#line 2563
    dgb = mdev->int_dig_out;
#line 2564
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 2565
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 32768U);
  } else {

  }
#line 2567
  if (ok != 0) {
#line 2568
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 2570
  drbd_put_data_sock___0(mdev);
#line 2572
  if (ok != 0) {
#line 2573
    consider_delay_probes(mdev);
  } else {

  }
#line 2575
  return (ok);
}
}
#line 2594 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2599
  sent = 0;
#line 2601
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2602
    return (-1000);
  } else {

  }
#line 2606
  iov.iov_base = buf;
#line 2607
  iov.iov_len = size;
#line 2609
  msg.msg_name = 0;
#line 2610
  msg.msg_namelen = 0;
#line 2611
  msg.msg_control = 0;
#line 2612
  msg.msg_controllen = 0UL;
#line 2613
  msg.msg_flags = msg_flags | 16384U;
#line 2615
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2616
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2617
    drbd_update_congested(mdev);
  } else {

  }
  ldv_44066: 
#line 2629
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2630
  if (rv == -11) {
#line 2631
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2631
    if (tmp != 0) {
#line 2632
      goto ldv_44064;
    } else {
#line 2634
      goto ldv_44065;
    }
  } else {

  }
#line 2636
  if (rv == 0) {
#line 2636
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2636
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2636
    printk("<3>%s %s: ASSERT( rv != 0 ) in %s:%d\n", tmp___1, tmp___0, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2636);
  } else {

  }
#line 2637
  if (rv == -4) {
#line 2638
    tmp___2 = get_current();
#line 2638
    flush_signals(tmp___2);
#line 2639
    rv = 0;
  } else {

  }
#line 2641
  if (rv < 0) {
#line 2642
    goto ldv_44064;
  } else {

  }
#line 2643
  sent = sent + rv;
#line 2644
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2645
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_44065: ;
#line 2646
  if ((size_t )sent < size) {
#line 2647
    goto ldv_44066;
  } else {

  }
  ldv_44064: ;
#line 2648
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2649
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2651
  if (rv <= 0) {
#line 2652
    if (rv != -11) {
#line 2653
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2653
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2653
      printk("<3>%s %s: %s_sendmsg returned %d\n", tmp___4, tmp___3, (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
             rv);
#line 2656
      val.i = 0U;
#line 2656
      val.ldv_33657.conn = 4U;
#line 2656
      mask.i = 0U;
#line 2656
      mask.ldv_33657.conn = 31U;
#line 2656
      drbd_force_state(mdev, mask, val);
    } else {
#line 2658
      val___0.i = 0U;
#line 2658
      val___0.ldv_33657.conn = 3U;
#line 2658
      mask___0.i = 0U;
#line 2658
      mask___0.ldv_33657.conn = 31U;
#line 2658
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2661
  return (sent);
}
}
#line 2664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2666
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2668
  rv = 0;
#line 2670
  tmp = spinlock_check(& mdev->req_lock);
#line 2670
  flags = _raw_spin_lock_irqsave(tmp);
#line 2674
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U) {
#line 2675
    if ((mode & 2U) != 0U) {
#line 2676
      rv = -30;
    } else
#line 2677
    if (allow_oos == 0) {
#line 2678
      rv = -124;
    } else {

    }
  } else {

  }
#line 2681
  if (rv == 0) {
#line 2682
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2683
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2685
  return (rv);
}
}
#line 2688 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2690
  mdev = (struct drbd_conf *)gd->private_data;
#line 2691
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2692
  return (0);
}
}
#line 2695 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_unplug_fn(struct request_queue *q ) 
{ 
  struct drbd_conf *mdev ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2697
  mdev = (struct drbd_conf *)q->queuedata;
#line 2700
  spin_lock_irq(q->queue_lock);
#line 2701
  blk_remove_plug(q);
#line 2702
  spin_unlock_irq(q->queue_lock);
#line 2705
  spin_lock_irq(& mdev->req_lock);
#line 2706
  if ((int )mdev->state.ldv_33657.pdsk > 3 && (int )mdev->state.ldv_33657.conn > 9) {
#line 2707
    if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U) {
#line 2707
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2707
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2707
      printk("<3>%s %s: ASSERT( mdev->state.role == R_PRIMARY ) in %s:%d\n", tmp___0,
             tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             2707);
    } else {

    }
#line 2708
    tmp___2 = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 2708
    if (tmp___2 != 0) {
#line 2713
      tmp___1 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2713
      if (tmp___1 != 0) {
#line 2714
        drbd_queue_work(& mdev->data.work, & mdev->unplug_work);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2718
  spin_unlock_irq(& mdev->req_lock);
#line 2720
  if ((int )mdev->state.ldv_33657.disk > 3) {
#line 2721
    drbd_kick_lo(mdev);
  } else {

  }
#line 2722
  return;
}
}
#line 2724 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  union drbd_state __constr_expr_0 ;

  {
#line 2726
  mdev->sync_conf.after = -1;
#line 2727
  mdev->sync_conf.rate = 250;
#line 2728
  mdev->sync_conf.al_extents = 127;
#line 2729
  __constr_expr_0.ldv_33657.role = 2U;
#line 2729
  __constr_expr_0.ldv_33657.peer = 0U;
#line 2729
  __constr_expr_0.ldv_33657.conn = 0U;
#line 2729
  __constr_expr_0.ldv_33657.disk = 0U;
#line 2729
  __constr_expr_0.ldv_33657.pdsk = 6U;
#line 2729
  __constr_expr_0.ldv_33657.susp = 0U;
#line 2729
  __constr_expr_0.ldv_33657.aftr_isp = (unsigned char)0;
#line 2729
  __constr_expr_0.ldv_33657.peer_isp = (unsigned char)0;
#line 2729
  __constr_expr_0.ldv_33657.user_isp = (unsigned char)0;
#line 2729
  __constr_expr_0.ldv_33657._pad = (unsigned short)0;
#line 2729
  mdev->state = __constr_expr_0;
#line 2730
  return;
}
}
#line 2739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;

  {
#line 2744
  drbd_set_defaults(mdev);
#line 2749
  set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2751
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2752
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2753
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2754
  atomic_set(& mdev->unacked_cnt, 0);
#line 2755
  atomic_set(& mdev->local_cnt, 0);
#line 2756
  atomic_set(& mdev->net_cnt, 0);
#line 2757
  atomic_set(& mdev->packet_seq, 0);
#line 2758
  atomic_set(& mdev->pp_in_use, 0);
#line 2759
  atomic_set(& mdev->new_c_uuid, 0);
#line 2761
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 2762
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 2763
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 2764
  sema_init(& mdev->data.work.s, 0);
#line 2765
  sema_init(& mdev->meta.work.s, 0);
#line 2766
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 2768
  spinlock_check(& mdev->data.work.q_lock);
#line 2768
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5593.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 2769
  spinlock_check(& mdev->meta.work.q_lock);
#line 2769
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5593.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 2771
  spinlock_check(& mdev->al_lock);
#line 2771
  __raw_spin_lock_init(& mdev->al_lock.ldv_5593.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 2772
  spinlock_check(& mdev->req_lock);
#line 2772
  __raw_spin_lock_init(& mdev->req_lock.ldv_5593.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 2773
  spinlock_check(& mdev->peer_seq_lock);
#line 2773
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5593.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 2774
  spinlock_check(& mdev->epoch_lock);
#line 2774
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5593.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 2776
  INIT_LIST_HEAD(& mdev->active_ee);
#line 2777
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 2778
  INIT_LIST_HEAD(& mdev->done_ee);
#line 2779
  INIT_LIST_HEAD(& mdev->read_ee);
#line 2780
  INIT_LIST_HEAD(& mdev->net_ee);
#line 2781
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 2782
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 2783
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 2784
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 2785
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 2786
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 2787
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 2788
  INIT_LIST_HEAD(& mdev->delay_probes);
#line 2789
  INIT_LIST_HEAD(& mdev->delay_probe_work.list);
#line 2790
  INIT_LIST_HEAD(& mdev->uuid_work.list);
#line 2792
  mdev->resync_work.cb = & w_resync_inactive;
#line 2793
  mdev->unplug_work.cb = & w_send_write_hint;
#line 2794
  mdev->md_sync_work.cb = & w_md_sync;
#line 2795
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 2796
  mdev->delay_probe_work.cb = & w_delay_probes;
#line 2797
  mdev->uuid_work.cb = & w_new_current_uuid;
#line 2798
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 2799
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 2800
  init_timer_key(& mdev->delay_probe_timer, "&mdev->delay_probe_timer", & __key___11);
#line 2801
  mdev->resync_timer.function = & resync_timer_fn;
#line 2802
  mdev->resync_timer.data = (unsigned long )mdev;
#line 2803
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 2804
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 2805
  mdev->delay_probe_timer.function = & delay_probe_timer_fn;
#line 2806
  mdev->delay_probe_timer.data = (unsigned long )mdev;
#line 2809
  __init_waitqueue_head(& mdev->misc_wait, & __key___12);
#line 2810
  __init_waitqueue_head(& mdev->state_wait, & __key___13);
#line 2811
  __init_waitqueue_head(& mdev->ee_wait, & __key___14);
#line 2812
  __init_waitqueue_head(& mdev->al_wait, & __key___15);
#line 2813
  __init_waitqueue_head(& mdev->seq_wait, & __key___16);
#line 2815
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 2816
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 2817
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 2819
  mdev->agreed_pro_version = 94;
#line 2820
  mdev->write_ordering = WO_bio_barrier;
#line 2821
  mdev->resync_wenr = 4294967295U;
#line 2822
  return;
}
}
#line 2824 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;
  unsigned int tmp___7 ;
  unsigned int tmp___8 ;
  unsigned int tmp___9 ;
  sector_t tmp___10 ;
  unsigned long tmp___11 ;
  unsigned long tmp___12 ;
  unsigned long tmp___13 ;
  unsigned long tmp___14 ;
  unsigned long tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  int tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  int tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  int tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  int tmp___41 ;
  char const   *tmp___42 ;
  char const   *tmp___43 ;
  int tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  int tmp___47 ;

  {
#line 2826
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 2827
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2827
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2827
    printk("<3>%s %s: ASSERT FAILED: receiver t_state == %d expected 0.\n", tmp___0,
           tmp, (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 2831
  tmp___4 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2831
  if (tmp___4 != 0) {
#line 2832
    tmp___1 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2832
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2832
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2832
    printk("<3>%s %s: epoch_size:%d\n", tmp___3, tmp___2, tmp___1);
  } else {

  }
#line 2833
  tmp___15 = 0UL;
#line 2833
  mdev->rs_mark_time = tmp___15;
#line 2833
  tmp___14 = tmp___15;
#line 2833
  mdev->rs_mark_left = tmp___14;
#line 2833
  tmp___13 = tmp___14;
#line 2833
  mdev->rs_failed = tmp___13;
#line 2833
  tmp___12 = tmp___13;
#line 2833
  mdev->rs_total = tmp___12;
#line 2833
  tmp___11 = tmp___12;
#line 2833
  mdev->rs_start = tmp___11;
#line 2833
  tmp___10 = tmp___11;
#line 2833
  mdev->p_size = tmp___10;
#line 2833
  tmp___9 = (unsigned int )tmp___10;
#line 2833
  mdev->writ_cnt = tmp___9;
#line 2833
  tmp___8 = tmp___9;
#line 2833
  mdev->send_cnt = tmp___8;
#line 2833
  tmp___7 = tmp___8;
#line 2833
  mdev->recv_cnt = tmp___7;
#line 2833
  tmp___6 = tmp___7;
#line 2833
  mdev->read_cnt = tmp___6;
#line 2833
  tmp___5 = tmp___6;
#line 2833
  mdev->bm_writ_cnt = tmp___5;
#line 2833
  mdev->al_writ_cnt = tmp___5;
#line 2845
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 2845
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2845
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2845
    printk("<3>%s %s: ASSERT( mdev->net_conf == NULL ) in %s:%d\n", tmp___17, tmp___16,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2845);
  } else {

  }
#line 2847
  drbd_set_my_capacity(mdev, 0UL);
#line 2848
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 2850
    drbd_bm_resize(mdev, 0UL, 1);
#line 2851
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 2854
  drbd_free_resources(mdev);
#line 2860
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 2860
  if (tmp___20 == 0) {
#line 2860
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2860
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2860
    printk("<3>%s %s: ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n", tmp___19,
           tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2860);
  } else {

  }
#line 2861
  tmp___23 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 2861
  if (tmp___23 == 0) {
#line 2861
    tmp___21 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2861
    tmp___22 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2861
    printk("<3>%s %s: ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n", tmp___22,
           tmp___21, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2861);
  } else {

  }
#line 2862
  tmp___26 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 2862
  if (tmp___26 == 0) {
#line 2862
    tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2862
    tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2862
    printk("<3>%s %s: ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n", tmp___25,
           tmp___24, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2862);
  } else {

  }
#line 2863
  tmp___29 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 2863
  if (tmp___29 == 0) {
#line 2863
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2863
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2863
    printk("<3>%s %s: ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n", tmp___28,
           tmp___27, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2863);
  } else {

  }
#line 2864
  tmp___32 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 2864
  if (tmp___32 == 0) {
#line 2864
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2864
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2864
    printk("<3>%s %s: ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n", tmp___31, tmp___30,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2864);
  } else {

  }
#line 2865
  tmp___35 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 2865
  if (tmp___35 == 0) {
#line 2865
    tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2865
    tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2865
    printk("<3>%s %s: ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n", tmp___34,
           tmp___33, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2865);
  } else {

  }
#line 2866
  tmp___38 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2866
  if (tmp___38 == 0) {
#line 2866
    tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2866
    tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2866
    printk("<3>%s %s: ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n", tmp___37,
           tmp___36, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2866);
  } else {

  }
#line 2867
  tmp___41 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 2867
  if (tmp___41 == 0) {
#line 2867
    tmp___39 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2867
    tmp___40 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2867
    printk("<3>%s %s: ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n", tmp___40,
           tmp___39, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2867);
  } else {

  }
#line 2868
  tmp___44 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 2868
  if (tmp___44 == 0) {
#line 2868
    tmp___42 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2868
    tmp___43 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2868
    printk("<3>%s %s: ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n", tmp___43,
           tmp___42, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2868);
  } else {

  }
#line 2869
  tmp___47 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2869
  if (tmp___47 == 0) {
#line 2869
    tmp___45 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2869
    tmp___46 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2869
    printk("<3>%s %s: ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n", tmp___46,
           tmp___45, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2869);
  } else {

  }
#line 2870
  return;
}
}
#line 2874 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 2878
  goto ldv_44127;
  ldv_44126: 
#line 2879
  page = drbd_pp_pool;
#line 2880
  drbd_pp_pool = (struct page *)page->ldv_12107.ldv_12104.private;
#line 2881
  __free_pages(page, 0U);
#line 2882
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_44127: ;
#line 2878
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 2879
    goto ldv_44126;
  } else {

  }

#line 2887
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 2888
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 2889
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 2890
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 2891
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2892
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 2893
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2894
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 2895
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2896
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 2897
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2898
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 2900
  drbd_ee_mempool = 0;
#line 2901
  drbd_request_mempool = 0;
#line 2902
  drbd_ee_cache = 0;
#line 2903
  drbd_request_cache = 0;
#line 2904
  drbd_bm_ext_cache = 0;
#line 2905
  drbd_al_ext_cache = 0;
#line 2907
  return;
}
}
#line 2910 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 2913
  number = (int const   )(minor_count * 8U);
#line 2917
  drbd_request_mempool = 0;
#line 2918
  drbd_ee_cache = 0;
#line 2919
  drbd_request_cache = 0;
#line 2920
  drbd_bm_ext_cache = 0;
#line 2921
  drbd_al_ext_cache = 0;
#line 2922
  drbd_pp_pool = 0;
#line 2925
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 2927
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2928
    goto Enomem;
  } else {

  }
#line 2930
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 2932
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2933
    goto Enomem;
  } else {

  }
#line 2935
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 2937
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2938
    goto Enomem;
  } else {

  }
#line 2940
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 2942
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2943
    goto Enomem;
  } else {

  }
#line 2946
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 2948
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2949
    goto Enomem;
  } else {

  }
#line 2951
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 2953
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2954
    goto Enomem;
  } else {

  }
#line 2957
  spinlock_check(& drbd_pp_lock);
#line 2957
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5593.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 2959
  i = 0;
#line 2959
  goto ldv_44138;
  ldv_44137: 
#line 2960
  page = alloc_pages(131282U, 0U);
#line 2961
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 2962
    goto Enomem;
  } else {

  }
#line 2963
  page->ldv_12107.ldv_12104.private = (unsigned long )drbd_pp_pool;
#line 2964
  drbd_pp_pool = page;
#line 2959
  i = i + 1;
  ldv_44138: ;
#line 2959
  if (i < number) {
#line 2960
    goto ldv_44137;
  } else {

  }
#line 2966
  drbd_pp_vacant = number;
#line 2968
  return (0);
  Enomem: 
#line 2971
  drbd_destroy_mempools();
#line 2972
  return (-12);
}
}
#line 2975 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 2982
  return (0);
}
}
#line 2985 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 2989 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;

  {
#line 2993
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 2994
  if (rr != 0) {
#line 2995
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2995
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2995
    printk("<3>%s %s: %d EEs in active list found!\n", tmp___0, tmp, rr);
  } else {

  }
#line 2997
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 2998
  if (rr != 0) {
#line 2999
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2999
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2999
    printk("<3>%s %s: %d EEs in sync list found!\n", tmp___2, tmp___1, rr);
  } else {

  }
#line 3001
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 3002
  if (rr != 0) {
#line 3003
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3003
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3003
    printk("<3>%s %s: %d EEs in read list found!\n", tmp___4, tmp___3, rr);
  } else {

  }
#line 3005
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 3006
  if (rr != 0) {
#line 3007
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3007
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3007
    printk("<3>%s %s: %d EEs in done list found!\n", tmp___6, tmp___5, rr);
  } else {

  }
#line 3009
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 3010
  if (rr != 0) {
#line 3011
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3011
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3011
    printk("<3>%s %s: %d EEs in net list found!\n", tmp___8, tmp___7, rr);
  } else {

  }
#line 3012
  return;
}
}
#line 3016 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct list_head *lp ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 3018
  tmp = minor_to_mdev(minor);
#line 3018
  mdev = tmp;
#line 3020
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3021
    return;
  } else {

  }
#line 3024
  if (mdev->open_cnt != 0) {
#line 3025
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3025
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3025
    printk("<3>%s %s: open_cnt = %d in %s:%u", tmp___1, tmp___0, mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3026);
  } else {

  }
#line 3028
  tmp___4 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3028
  _b = tmp___4 == 0;
#line 3028
  if (_b != 0) {
#line 3028
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3028
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3028
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___6, tmp___5, "drbd_delete_device",
           (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3028);
  } else {

  }
#line 3028
  if (_b != 0) {
#line 3030
    lp = mdev->data.work.q.next;
#line 3030
    goto ldv_44159;
    ldv_44158: 
#line 3031
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3031
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3031
    printk("<3>%s %s: lp = %p\n", tmp___3, tmp___2, lp);
#line 3030
    lp = lp->next;
    ldv_44159: 
#line 3030
    __builtin_prefetch((void const   *)lp->next);
#line 3030
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 3031
      goto ldv_44158;
    } else {

    }

  } else {

  }
#line 3036
  del_gendisk(mdev->vdisk);
#line 3041
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 3042
    bdput(mdev->this_bdev);
  } else {

  }
#line 3044
  drbd_free_resources(mdev);
#line 3046
  drbd_release_ee_lists(mdev);
#line 3049
  kfree((void const   *)mdev->ee_hash);
#line 3055
  lc_destroy(mdev->act_log);
#line 3056
  lc_destroy(mdev->resync);
#line 3058
  kfree((void const   *)mdev->p_uuid);
#line 3061
  kfree((void const   *)mdev->int_dig_out);
#line 3062
  kfree((void const   *)mdev->int_dig_in);
#line 3063
  kfree((void const   *)mdev->int_dig_vv);
#line 3068
  drbd_free_mdev(mdev);
#line 3069
  return;
}
}
#line 3071 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3075
  unregister_reboot_notifier(& drbd_notifier);
#line 3077
  drbd_nl_cleanup();
#line 3079
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3080
    if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3081
      remove_proc_entry("drbd", 0);
    } else {

    }
#line 3082
    i = minor_count;
#line 3083
    goto ldv_44166;
    ldv_44165: 
#line 3084
    drbd_delete_device(i);
    ldv_44166: 
#line 3083
    tmp = i;
#line 3083
    i = i - 1U;
#line 3083
    if (tmp != 0U) {
#line 3084
      goto ldv_44165;
    } else {

    }
#line 3085
    drbd_destroy_mempools();
  } else {

  }
#line 3088
  kfree((void const   *)minor_table);
#line 3090
  unregister_blkdev(147U, "drbd");
#line 3092
  printk("<6>drbd: module cleanup done.\n");
#line 3093
  return;
}
}
#line 3102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 3104
  mdev = (struct drbd_conf *)congested_data;
#line 3106
  reason = 45;
#line 3107
  r = 0;
#line 3109
  tmp = __inc_ap_bio_cond___0(mdev);
#line 3109
  if (tmp == 0) {
#line 3111
    r = bdi_bits;
#line 3112
    reason = 100;
#line 3113
    goto out;
  } else {

  }
#line 3116
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3116
  if (tmp___0 != 0) {
#line 3117
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3118
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3119
    put_ldev(mdev);
#line 3120
    if (r != 0) {
#line 3121
      reason = 98;
    } else {

    }
  } else {

  }
#line 3124
  if ((bdi_bits & 4) != 0) {
#line 3124
    tmp___1 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3124
    if (tmp___1 != 0) {
#line 3125
      r = r | 4;
#line 3126
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3130
  mdev->congestion_reason = reason;
#line 3131
  return (r);
}
}
#line 3134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3141
  tmp = kzalloc___1(4216UL, 208U);
#line 3141
  mdev = (struct drbd_conf *)tmp;
#line 3142
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3143
    return (0);
  } else {

  }
#line 3144
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3144
  if (tmp___0) {
#line 3144
    tmp___1 = 0;
  } else {
#line 3144
    tmp___1 = 1;
  }
#line 3144
  if (tmp___1) {
#line 3145
    goto out_no_cpumask;
  } else {

  }
#line 3147
  mdev->minor = minor;
#line 3149
  drbd_init_set_defaults(mdev);
#line 3151
  q = blk_alloc_queue(208U);
#line 3152
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3153
    goto out_no_q;
  } else {

  }
#line 3154
  mdev->rq_queue = q;
#line 3155
  q->queuedata = (void *)mdev;
#line 3157
  disk = alloc_disk(1);
#line 3158
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3159
    goto out_no_disk;
  } else {

  }
#line 3160
  mdev->vdisk = disk;
#line 3162
  set_disk_ro(disk, 1);
#line 3164
  disk->queue = q;
#line 3165
  disk->major = 147;
#line 3166
  disk->first_minor = (int )minor;
#line 3167
  disk->fops = & drbd_ops;
#line 3168
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3169
  disk->private_data = (void *)mdev;
#line 3171
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3173
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3175
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3176
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3178
  blk_queue_make_request(q, & drbd_make_request_26);
#line 3179
  blk_queue_max_segment_size(q, 32768U);
#line 3180
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3181
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3182
  q->queue_lock = & mdev->req_lock;
#line 3184
  q->unplug_fn = & drbd_unplug_fn;
#line 3186
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3187
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3188
    goto out_no_io_page;
  } else {

  }
#line 3190
  tmp___2 = drbd_bm_init(mdev);
#line 3190
  if (tmp___2 != 0) {
#line 3191
    goto out_no_bitmap;
  } else {

  }
#line 3193
  tmp___3 = tl_init(mdev);
#line 3193
  if (tmp___3 == 0) {
#line 3194
    goto out_no_tl;
  } else {

  }
#line 3196
  tmp___4 = kzalloc___1(120UL, 208U);
#line 3196
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3197
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3198
    goto out_no_app_reads;
  } else {

  }
#line 3200
  tmp___5 = kzalloc___1(40UL, 208U);
#line 3200
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3201
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3202
    goto out_no_epoch;
  } else {

  }
#line 3204
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3205
  mdev->epochs = 1U;
#line 3207
  return (mdev);
  out_no_epoch: 
#line 3212
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3214
  tl_cleanup(mdev);
  out_no_tl: 
#line 3216
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3218
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3220
  put_disk(disk);
  out_no_disk: 
#line 3222
  blk_cleanup_queue(q);
  out_no_q: 
#line 3224
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3226
  kfree((void const   *)mdev);
#line 3227
  return (0);
}
}
#line 3232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3234
  kfree((void const   *)mdev->current_epoch);
#line 3235
  kfree((void const   *)mdev->app_reads_hash);
#line 3236
  tl_cleanup(mdev);
#line 3237
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3238
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3239
  __free_pages(mdev->md_io_page, 0U);
#line 3240
  put_disk(mdev->vdisk);
#line 3241
  blk_cleanup_queue(mdev->rq_queue);
#line 3242
  free_cpumask_var(mdev->cpu_mask);
#line 3243
  kfree((void const   *)mdev);
#line 3244
  return;
}
}
#line 3247 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3258
  if (minor_count == 0U || minor_count > 255U) {
#line 3259
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3262
    return (-22);
  } else {

  }
#line 3268
  err = drbd_nl_init();
#line 3269
  if (err != 0) {
#line 3270
    return (err);
  } else {

  }
#line 3272
  err = register_blkdev(147U, "drbd");
#line 3273
  if (err != 0) {
#line 3274
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3277
    return (err);
  } else {

  }
#line 3280
  register_reboot_notifier(& drbd_notifier);
#line 3285
  err = -12;
#line 3287
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3289
  drbd_proc = 0;
#line 3290
  tmp = kzalloc___1((unsigned long )minor_count * 8UL, 208U);
#line 3290
  minor_table = (struct drbd_conf **)tmp;
#line 3292
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3293
    goto Enomem;
  } else {

  }
#line 3295
  err = drbd_create_mempools();
#line 3296
  if (err != 0) {
#line 3297
    goto Enomem;
  } else {

  }
#line 3299
  drbd_proc = proc_create_data("drbd", 33060U, 0, & drbd_proc_fops, 0);
#line 3300
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3301
    printk("<3>drbd: unable to register proc file\n");
#line 3302
    goto Enomem;
  } else {

  }
#line 3305
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3307
  printk("<6>drbd: initialized. Version: 8.3.8rc1 (api:%d/proto:%d-%d)\n", 88, 86,
         94);
#line 3310
  tmp___0 = drbd_buildtag();
#line 3310
  printk("<6>drbd: %s\n", tmp___0);
#line 3311
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3313
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3315
  return (0);
  Enomem: 
#line 3318
  drbd_cleanup();
#line 3319
  if (err == -12) {
#line 3321
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3323
    printk("<3>drbd: initialization failure\n");
  }
#line 3324
  return (err);
}
}
#line 3327 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3329
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3330
    return;
  } else {

  }
#line 3332
  bd_release(ldev->backing_bdev);
#line 3333
  bd_release(ldev->md_bdev);
#line 3335
  fput(ldev->lo_file);
#line 3336
  fput(ldev->md_file);
#line 3338
  kfree((void const   *)ldev);
#line 3339
  return;
}
}
#line 3341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3343
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3344
    ldv_mutex_lock_141(& mdev->data.mutex);
#line 3345
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3346
    sock_release(mdev->data.socket);
#line 3347
    mdev->data.socket = 0;
#line 3348
    ldv_mutex_unlock_142(& mdev->data.mutex);
  } else {

  }
#line 3350
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3351
    ldv_mutex_lock_143(& mdev->meta.mutex);
#line 3352
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3353
    sock_release(mdev->meta.socket);
#line 3354
    mdev->meta.socket = 0;
#line 3355
    ldv_mutex_unlock_144(& mdev->meta.mutex);
  } else {

  }
#line 3357
  return;
}
}
#line 3360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3362
  crypto_free_hash(mdev->csums_tfm);
#line 3363
  mdev->csums_tfm = 0;
#line 3364
  crypto_free_hash(mdev->verify_tfm);
#line 3365
  mdev->verify_tfm = 0;
#line 3366
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3367
  mdev->cram_hmac_tfm = 0;
#line 3368
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3369
  mdev->integrity_w_tfm = 0;
#line 3370
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3371
  mdev->integrity_r_tfm = 0;
#line 3373
  drbd_free_sock(mdev);
#line 3375
  drbd_free_bc(mdev->ldev);
#line 3375
  mdev->ldev = 0;
#line 3376
  return;
}
}
#line 3403 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  sector_t tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  sector_t tmp___17 ;

  {
#line 3409
  tmp = test_and_clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 3409
  if (tmp == 0) {
#line 3410
    return;
  } else {

  }
#line 3411
  del_timer(& mdev->md_sync_timer);
#line 3415
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3415
  if (tmp___0 == 0) {
#line 3416
    return;
  } else {

  }
#line 3418
  ldv_mutex_lock_145(& mdev->md_io_mutex);
#line 3419
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3419
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3420
  memset((void *)buffer, 0, 512UL);
#line 3422
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3422
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3422
  buffer->la_size = tmp___3;
#line 3423
  i = 0;
#line 3423
  goto ldv_44230;
  ldv_44229: 
#line 3424
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3424
  buffer->uuid[i] = tmp___4;
#line 3423
  i = i + 1;
  ldv_44230: ;
#line 3423
  if (i <= 3) {
#line 3424
    goto ldv_44229;
  } else {

  }
#line 3425
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3425
  buffer->flags = tmp___5;
#line 3426
  buffer->magic = 1795323011U;
#line 3428
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3428
  buffer->md_size_sect = tmp___6;
#line 3429
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3429
  buffer->al_offset = tmp___7;
#line 3430
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3430
  buffer->al_nr_extents = tmp___8;
#line 3431
  buffer->bm_bytes_per_bit = 1048576U;
#line 3432
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3432
  buffer->device_uuid = tmp___9;
#line 3434
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3434
  buffer->bm_offset = tmp___10;
#line 3436
  tmp___13 = drbd_md_ss__(mdev, mdev->ldev);
#line 3436
  if ((unsigned long long )tmp___13 != (mdev->ldev)->md.md_offset) {
#line 3436
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3436
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3436
    printk("<3>%s %s: ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
           tmp___12, tmp___11, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3436);
  } else {

  }
#line 3437
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3439
  tmp___16 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3439
  if (tmp___16 != 0) {
#line 3440
    clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 3443
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3443
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3443
    printk("<3>%s %s: meta data update failed!\n", tmp___15, tmp___14);
#line 3445
    drbd_chk_io_error____1(mdev, 1, 1, "drbd_md_sync");
  }
#line 3450
  tmp___17 = drbd_get_capacity(mdev->this_bdev);
#line 3450
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___17;
#line 3452
  ldv_mutex_unlock_146(& mdev->md_io_mutex);
#line 3453
  put_ldev(mdev);
#line 3454
  return;
}
}
#line 3464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  __u32 tmp___14 ;
  __u32 tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  __u32 tmp___18 ;
  __u32 tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  __u32 tmp___22 ;
  __u64 tmp___23 ;
  __u64 tmp___24 ;
  __u32 tmp___25 ;
  __u32 tmp___26 ;
  __u64 tmp___27 ;

  {
#line 3467
  rv = 101;
#line 3469
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3469
  if (tmp == 0) {
#line 3470
    return (118);
  } else {

  }
#line 3472
  ldv_mutex_lock_147(& mdev->md_io_mutex);
#line 3473
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3473
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3475
  tmp___3 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3475
  if (tmp___3 == 0) {
#line 3478
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3478
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3478
    printk("<3>%s %s: Error while reading metadata.\n", tmp___2, tmp___1);
#line 3479
    rv = 118;
#line 3480
    goto err;
  } else {

  }
#line 3483
  tmp___6 = __fswab32(buffer->magic);
#line 3483
  if (tmp___6 != 2205418091U) {
#line 3484
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3484
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3484
    printk("<3>%s %s: Error while reading metadata, magic not found.\n", tmp___5,
           tmp___4);
#line 3485
    rv = 119;
#line 3486
    goto err;
  } else {

  }
#line 3488
  tmp___10 = __fswab32(buffer->al_offset);
#line 3488
  if (tmp___10 != (unsigned int )bdev->md.al_offset) {
#line 3489
    tmp___7 = __fswab32(buffer->al_offset);
#line 3489
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3489
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3489
    printk("<3>%s %s: unexpected al_offset: %d (expected %d)\n", tmp___9, tmp___8,
           tmp___7, bdev->md.al_offset);
#line 3491
    rv = 119;
#line 3492
    goto err;
  } else {

  }
#line 3494
  tmp___14 = __fswab32(buffer->bm_offset);
#line 3494
  if (tmp___14 != (unsigned int )bdev->md.bm_offset) {
#line 3495
    tmp___11 = __fswab32(buffer->bm_offset);
#line 3495
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3495
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3495
    printk("<3>%s %s: unexpected bm_offset: %d (expected %d)\n", tmp___13, tmp___12,
           tmp___11, bdev->md.bm_offset);
#line 3497
    rv = 119;
#line 3498
    goto err;
  } else {

  }
#line 3500
  tmp___18 = __fswab32(buffer->md_size_sect);
#line 3500
  if (tmp___18 != bdev->md.md_size_sect) {
#line 3501
    tmp___15 = __fswab32(buffer->md_size_sect);
#line 3501
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3501
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3501
    printk("<3>%s %s: unexpected md_size: %u (expected %u)\n", tmp___17, tmp___16,
           tmp___15, bdev->md.md_size_sect);
#line 3503
    rv = 119;
#line 3504
    goto err;
  } else {

  }
#line 3507
  tmp___22 = __fswab32(buffer->bm_bytes_per_bit);
#line 3507
  if (tmp___22 != 4096U) {
#line 3508
    tmp___19 = __fswab32(buffer->bm_bytes_per_bit);
#line 3508
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3508
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3508
    printk("<3>%s %s: unexpected bm_bytes_per_bit: %u (expected %u)\n", tmp___21,
           tmp___20, tmp___19, 4096);
#line 3510
    rv = 119;
#line 3511
    goto err;
  } else {

  }
#line 3514
  tmp___23 = __fswab64(buffer->la_size);
#line 3514
  bdev->md.la_size_sect = tmp___23;
#line 3515
  i = 0;
#line 3515
  goto ldv_44242;
  ldv_44241: 
#line 3516
  tmp___24 = __fswab64(buffer->uuid[i]);
#line 3516
  bdev->md.uuid[i] = tmp___24;
#line 3515
  i = i + 1;
  ldv_44242: ;
#line 3515
  if (i <= 3) {
#line 3516
    goto ldv_44241;
  } else {

  }
#line 3517
  tmp___25 = __fswab32(buffer->flags);
#line 3517
  bdev->md.flags = tmp___25;
#line 3518
  tmp___26 = __fswab32(buffer->al_nr_extents);
#line 3518
  mdev->sync_conf.al_extents = (int )tmp___26;
#line 3519
  tmp___27 = __fswab64(buffer->device_uuid);
#line 3519
  bdev->md.device_uuid = tmp___27;
#line 3521
  if (mdev->sync_conf.al_extents <= 6) {
#line 3522
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3525
  ldv_mutex_unlock_148(& mdev->md_io_mutex);
#line 3526
  put_ldev(mdev);
#line 3528
  return (rv);
}
}
#line 3539 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 


  {
#line 3541
  set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 3542
  mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
#line 3543
  return;
}
}
#line 3546 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3550
  i = 2;
#line 3550
  goto ldv_44252;
  ldv_44251: 
#line 3551
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3550
  i = i + 1;
  ldv_44252: ;
#line 3550
  if (i <= 2) {
#line 3551
    goto ldv_44251;
  } else {

  }

#line 3555
  return;
}
}
#line 3554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3556
  if (idx == 0) {
#line 3557
    if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 3558
      val = val | 1ULL;
    } else {
#line 3560
      val = val & 0xfffffffffffffffeULL;
    }
#line 3562
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3565
  (mdev->ldev)->md.uuid[idx] = val;
#line 3566
  drbd_md_mark_dirty(mdev);
#line 3567
  return;
}
}
#line 3570 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3572
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3573
    drbd_uuid_move_history(mdev);
#line 3574
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 3576
  _drbd_uuid_set(mdev, idx, val);
#line 3577
  return;
}
}
#line 3586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 3590
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3590
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3590
  printk("<6>%s %s: Creating new current UUID\n", tmp___0, tmp);
#line 3591
  if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3591
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3591
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3591
    printk("<3>%s %s: ASSERT( mdev->ldev->md.uuid[UI_BITMAP] == 0 ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3591);
  } else {

  }
#line 3592
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3594
  get_random_bytes((void *)(& val), 8);
#line 3595
  _drbd_uuid_set(mdev, 0, val);
#line 3596
  return;
}
}
#line 3598 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3600
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3601
    return;
  } else {

  }
#line 3603
  if (val == 0ULL) {
#line 3604
    drbd_uuid_move_history(mdev);
#line 3605
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3606
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 3608
    if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3609
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3609
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3609
      printk("<4>%s %s: bm UUID already set", tmp___0, tmp);
    } else {

    }
#line 3611
    (mdev->ldev)->md.uuid[1] = val;
#line 3612
    (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
  }
#line 3615
  drbd_md_mark_dirty(mdev);
#line 3616
  return;
}
}
#line 3624 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3626
  rv = -5;
#line 3628
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3628
  if (tmp != 0) {
#line 3629
    drbd_md_set_flag(mdev, 8);
#line 3630
    drbd_md_sync(mdev);
#line 3631
    drbd_bm_set_all(mdev);
#line 3633
    rv = drbd_bm_write(mdev);
#line 3635
    if (rv == 0) {
#line 3636
      drbd_md_clear_flag(mdev, 8);
#line 3637
      drbd_md_sync(mdev);
    } else {

    }
#line 3640
    put_ldev(mdev);
  } else {

  }
#line 3643
  return (rv);
}
}
#line 3652 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3654
  rv = -5;
#line 3656
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3656
  if (tmp != 0) {
#line 3657
    drbd_bm_clear_all(mdev);
#line 3658
    rv = drbd_bm_write(mdev);
#line 3659
    put_ldev(mdev);
  } else {

  }
#line 3662
  return (rv);
}
}
#line 3665 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3667
  __mptr = (struct drbd_work  const  *)w;
#line 3667
  work = (struct bm_io_work *)__mptr;
#line 3670
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3670
  if (tmp___1 != 0) {
#line 3670
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3670
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3670
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3670);
  } else {

  }
#line 3672
  drbd_bm_lock(mdev, work->why);
#line 3673
  rv = (*(work->io_fn))(mdev);
#line 3674
  drbd_bm_unlock(mdev);
#line 3676
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3677
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3679
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3680
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3682
  clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 3683
  work->why = 0;
#line 3685
  return (1);
}
}
#line 3700 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  struct task_struct *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 3705
  tmp___1 = get_current();
#line 3705
  if ((unsigned long )tmp___1 != (unsigned long )mdev->worker.task) {
#line 3705
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3705
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3705
    printk("<3>%s %s: ASSERT( current == mdev->worker.task ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3705);
  } else {

  }
#line 3707
  tmp___4 = constant_test_bit(19U, (unsigned long const volatile   *)(& mdev->flags));
#line 3707
  if (tmp___4 != 0) {
#line 3707
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3707
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3707
    printk("<3>%s %s: ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
           tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3707);
  } else {

  }
#line 3708
  tmp___7 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 3708
  if (tmp___7 != 0) {
#line 3708
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3708
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3708
    printk("<3>%s %s: ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n", tmp___6,
           tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3708);
  } else {

  }
#line 3709
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3709
  if (tmp___10 == 0) {
#line 3709
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3709
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3709
    printk("<3>%s %s: ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
           tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3709);
  } else {

  }
#line 3710
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 3711
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3711
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3711
    printk("<3>%s %s: FIXME going to queue \'%s\' but \'%s\' still pending?\n", tmp___12,
           tmp___11, why, mdev->bm_io_work.why);
  } else {

  }
#line 3714
  mdev->bm_io_work.io_fn = io_fn;
#line 3715
  mdev->bm_io_work.done = done;
#line 3716
  mdev->bm_io_work.why = why;
#line 3718
  set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
#line 3719
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3719
  if (tmp___16 == 0) {
#line 3720
    tmp___15 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3720
    if (tmp___15 != 0) {
#line 3721
      set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 3722
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {
#line 3724
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3724
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3724
      printk("<3>%s %s: FIXME avoided double queuing bm_io_work\n", tmp___14, tmp___13);
    }
  } else {

  }
#line 3725
  return;
}
}
#line 3737 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) 
{ 
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 3741
  tmp___1 = get_current();
#line 3741
  if ((unsigned long )tmp___1 == (unsigned long )mdev->worker.task) {
#line 3741
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3741
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3741
    printk("<3>%s %s: ASSERT( current != mdev->worker.task ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3741);
  } else {

  }
#line 3743
  drbd_suspend_io(mdev);
#line 3745
  drbd_bm_lock(mdev, why);
#line 3746
  rv = (*io_fn)(mdev);
#line 3747
  drbd_bm_unlock(mdev);
#line 3749
  drbd_resume_io(mdev);
#line 3751
  return (rv);
}
}
#line 3754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3756
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 3757
    drbd_md_mark_dirty(mdev);
#line 3758
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 3760
  return;
}
}
#line 3762 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3764
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 3765
    drbd_md_mark_dirty(mdev);
#line 3766
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 3768
  return;
}
}
#line 3769 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 3771
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 3774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3776
  mdev = (struct drbd_conf *)data;
#line 3778
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 3779
  return;
}
}
#line 3781 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3783
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3783
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3783
  printk("<4>%s %s: md_sync_timer expired! Worker calls drbd_md_sync().\n", tmp___0,
         tmp);
#line 3784
  drbd_md_sync(mdev);
#line 3786
  return (1);
}
}
#line 3806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 3810
  tmp = rsp->count;
#line 3810
  rsp->count = rsp->count - 1UL;
#line 3810
  if (tmp == 0UL) {
#line 3811
    get_random_bytes((void *)(& refresh), 8);
#line 3812
    rsp->state = rsp->state + (unsigned long )refresh;
#line 3813
    rsp->count = 10000UL;
  } else {

  }
#line 3815
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 3816
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 3816
  return ((unsigned long )tmp___0);
}
}
#line 3820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 3821
  _faults[0] = (char *)"Meta-data write";
#line 3821
  _faults[1] = (char *)"Meta-data read";
#line 3821
  _faults[2] = (char *)"Resync write";
#line 3821
  _faults[3] = (char *)"Resync read";
#line 3821
  _faults[4] = (char *)"Data write";
#line 3821
  _faults[5] = (char *)"Data read";
#line 3821
  _faults[6] = (char *)"Data read ahead";
#line 3821
  _faults[7] = (char *)"BM allocation";
#line 3821
  _faults[8] = (char *)"EE allocation";
#line 3821
  _faults[9] = (char *)"receive data corruption";
#line 3834
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 3838 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;

  {
#line 3840
  rrs.state = 0UL;
#line 3840
  rrs.count = 0UL;
#line 3842
  if (fault_devs == 0) {
#line 3842
    goto _L;
  } else {
#line 3842
    tmp = mdev_to_minor(mdev);
#line 3842
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 3842
      tmp___0 = _drbd_fault_random(& rrs);
#line 3842
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 3842
        tmp___1 = 1;
      } else {
#line 3842
        tmp___1 = 0;
      }
    } else {
#line 3842
      tmp___1 = 0;
    }
  }
#line 3842
  ret = (unsigned int )tmp___1;
#line 3847
  if (ret != 0U) {
#line 3848
    fault_count = fault_count + 1;
#line 3850
    tmp___5 = __printk_ratelimit("_drbd_insert_fault");
#line 3850
    if (tmp___5 != 0) {
#line 3851
      tmp___2 = _drbd_fault_str(type);
#line 3851
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3851
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3851
      printk("<4>%s %s: ***Simulating %s failure\n", tmp___4, tmp___3, tmp___2);
    } else {

    }
  } else {

  }
#line 3855
  return (ret);
}
}
#line 3859 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 3864
  buildtag[0] = '\000';
#line 3864
  tmp = 1U;
#line 3864
  while (1) {
#line 3864
    if (tmp >= 38U) {
#line 3864
      break;
    } else {

    }
#line 3864
    buildtag[tmp] = (char)0;
#line 3864
    tmp = tmp + 1U;
  }
#line 3866
  if ((int )((signed char )buildtag[0]) == 0) {
#line 3868
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 3869
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 3872
      buildtag[0] = 98;
    }
  } else {

  }
#line 3875
  return ((char const   *)(& buildtag));
}
}
#line 3923 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_67_p1 ;
  int res_drbd_open_67 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_68_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_75_p1 ;
  void *var_drbd_notify_sys_75_p2 ;
  unsigned long var_md_sync_timer_fn_100_p0 ;
  unsigned long var_delay_probe_timer_fn_63_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4184
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4136
  LDV_IN_INTERRUPT = 1;
#line 4145
  ldv_initialize();
#line 4172
  ldv_handler_precall();
#line 4173
  tmp = drbd_init();
#line 4173
  if (tmp != 0) {
#line 4174
    goto ldv_final;
  } else {

  }
#line 4191
  goto ldv_44415;
  ldv_44414: 
#line 4195
  tmp___0 = nondet_int();
#line 4195
  switch (tmp___0) {
  case 0: ;
#line 4200
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4226
    ldv_handler_precall();
#line 4227
    res_drbd_open_67 = drbd_open(var_group1, var_drbd_open_67_p1);
#line 4228
    ldv_check_return_value(res_drbd_open_67);
#line 4229
    if (res_drbd_open_67 != 0) {
#line 4230
      goto ldv_module_exit;
    } else {

    }
#line 4243
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4249
  goto ldv_44408;
  case 1: ;
#line 4253
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4279
    ldv_handler_precall();
#line 4280
    drbd_release(var_group2, var_drbd_release_68_p1);
#line 4293
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4299
  goto ldv_44408;
  case 2: 
#line 4329
  ldv_handler_precall();
#line 4330
  drbd_notify_sys(var_group3, var_drbd_notify_sys_75_p1, var_drbd_notify_sys_75_p2);
#line 4349
  goto ldv_44408;
  case 3: 
#line 4382
  ldv_handler_precall();
#line 4383
  md_sync_timer_fn(var_md_sync_timer_fn_100_p0);
#line 4399
  goto ldv_44408;
  case 4: 
#line 4429
  ldv_handler_precall();
#line 4430
  delay_probe_timer_fn(var_delay_probe_timer_fn_63_p0);
#line 4449
  goto ldv_44408;
  default: ;
#line 4450
  goto ldv_44408;
  }
  ldv_44408: ;
  ldv_44415: 
#line 4191
  tmp___1 = nondet_int();
#line 4191
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4193
    goto ldv_44414;
  } else {

  }

  ldv_module_exit: 
#line 4483
  ldv_handler_precall();
#line 4484
  drbd_cleanup();
  ldv_final: 
#line 4499
  ldv_check_final_state();
#line 4502
  return;
}
}
#line 4506 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_121(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4511
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4513
  mutex_lock(ldv_func_arg1);
#line 4514
  return;
}
}
#line 4516 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_mutex_trylock_122(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4521
  tmp = mutex_trylock(ldv_func_arg1);
#line 4521
  ldv_func_res = tmp;
#line 4523
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4523
  return (tmp___0);
#line 4525
  return (ldv_func_res);
}
}
#line 4528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_123(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4533
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4535
  mutex_unlock(ldv_func_arg1);
#line 4536
  return;
}
}
#line 4538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_124(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4543
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4545
  mutex_lock(ldv_func_arg1);
#line 4546
  return;
}
}
#line 4548 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_125(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4553
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4555
  mutex_unlock(ldv_func_arg1);
#line 4556
  return;
}
}
#line 4558 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4563
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4565
  mutex_unlock(ldv_func_arg1);
#line 4566
  return;
}
}
#line 4568 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4573
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4575
  mutex_lock(ldv_func_arg1);
#line 4576
  return;
}
}
#line 4578 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_128(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4583
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4585
  mutex_unlock(ldv_func_arg1);
#line 4586
  return;
}
}
#line 4588 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_129(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4593
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4595
  mutex_lock(ldv_func_arg1);
#line 4596
  return;
}
}
#line 4598 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_130(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4603
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4605
  mutex_lock(ldv_func_arg1);
#line 4606
  return;
}
}
#line 4608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_131(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4613
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4615
  mutex_unlock(ldv_func_arg1);
#line 4616
  return;
}
}
#line 4618 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_132(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4623
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4625
  mutex_unlock(ldv_func_arg1);
#line 4626
  return;
}
}
#line 4628 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_133(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4633
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4635
  mutex_lock(ldv_func_arg1);
#line 4636
  return;
}
}
#line 4638 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4643
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4645
  mutex_unlock(ldv_func_arg1);
#line 4646
  return;
}
}
#line 4648 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_135(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4653
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4655
  mutex_lock(ldv_func_arg1);
#line 4656
  return;
}
}
#line 4658 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4663
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4665
  mutex_unlock(ldv_func_arg1);
#line 4666
  return;
}
}
#line 4668 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4673
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4675
  mutex_lock(ldv_func_arg1);
#line 4676
  return;
}
}
#line 4678 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4683
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4685
  mutex_unlock(ldv_func_arg1);
#line 4686
  return;
}
}
#line 4688 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4693
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4695
  mutex_lock(ldv_func_arg1);
#line 4696
  return;
}
}
#line 4698 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_140(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4703
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4705
  mutex_unlock(ldv_func_arg1);
#line 4706
  return;
}
}
#line 4708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_141(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4713
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4715
  mutex_lock(ldv_func_arg1);
#line 4716
  return;
}
}
#line 4718 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4723
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4725
  mutex_unlock(ldv_func_arg1);
#line 4726
  return;
}
}
#line 4728 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_143(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4733
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4735
  mutex_lock(ldv_func_arg1);
#line 4736
  return;
}
}
#line 4738 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4743
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4745
  mutex_unlock(ldv_func_arg1);
#line 4746
  return;
}
}
#line 4748 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4753
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4755
  mutex_lock(ldv_func_arg1);
#line 4756
  return;
}
}
#line 4758 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4763
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4765
  mutex_unlock(ldv_func_arg1);
#line 4766
  return;
}
}
#line 4768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4773
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4775
  mutex_lock(ldv_func_arg1);
#line 4776
  return;
}
}
#line 4778 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_148(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4783
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4785
  mutex_unlock(ldv_func_arg1);
#line 4786
  return;
}
}
#line 154 "include/linux/mutex.h"
int ldv_mutex_trylock_178(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_179(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_177(struct mutex *ldv_func_arg1 ) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[22U]  = 
#line 75
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT"};
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 106
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 118
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 142
  return ((unsigned int )s <= 21U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 147
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 152
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) 
{ 


  {
#line 157
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_177(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 167
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 169
  mutex_lock(ldv_func_arg1);
#line 170
  return;
}
}
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
int ldv_mutex_trylock_178(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 177
  tmp = mutex_trylock(ldv_func_arg1);
#line 177
  ldv_func_res = tmp;
#line 179
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 179
  return (tmp___0);
#line 181
  return (ldv_func_res);
}
}
#line 184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_179(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 189
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 191
  mutex_unlock(ldv_func_arg1);
#line 192
  return;
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 197 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 92 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 124
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 174 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 180
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 181
  __len = (size_t )len;
#line 181
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 184
  return;
}
}
#line 228 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 234
  tmp = __bitmap_equal(src1, src2, nbits);
#line 234
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 154 "include/linux/mutex.h"
int ldv_mutex_trylock_184(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_185(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_187(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_188(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_190(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_192(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_183(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_186(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_189(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_191(struct mutex *ldv_func_arg1 ) ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___2(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5862;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5862;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5862;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5862;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5862: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 51 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 69
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 76 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 79
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 81
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 82
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 83
    return (-12);
  } else {

  }
#line 84
  tmp = call_usermodehelper_exec(info, wait);
#line 84
  return (tmp);
}
}
#line 240 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 84 "include/trace/events/module.h"
__inline static void trace_module_get___0(struct module *mod , unsigned long ip ) 
{ 
  void **it_func ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 79
  tmp___1 = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 79
  if (tmp___1 != 0L) {
#line 79
    rcu_read_lock_sched_notrace();
#line 79
    tmp = debug_lockdep_rcu_enabled();
#line 79
    if (tmp != 0 && ! __warned) {
#line 79
      tmp___0 = rcu_read_lock_sched_held();
#line 79
      if (tmp___0 == 0) {
#line 79
        __warned = 1;
#line 79
        lockdep_rcu_dereference("include/trace/events/module.h", 84);
      } else {

      }
    } else {

    }
#line 79
    _________p1 = *((void ** volatile  *)(& __tracepoint_module_get.funcs));
#line 79
    it_func = _________p1;
#line 79
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_11210: 
#line 79
      (*((void (*)(struct module * , unsigned long  ))*it_func))(mod, ip);
#line 79
      it_func = it_func + 1;
#line 79
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 80
        goto ldv_11210;
      } else {

      }

    } else {

    }
#line 79
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 81
  return;
}
}
#line 473 "include/linux/module.h"
__inline static int try_module_get___0(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 475
  ret = 1;
#line 477
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 480
    tmp = module_is_live(module);
#line 480
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 480
    if (tmp___0 != 0L) {
#line 481
      __vpp_verify = 0;
#line 481
      switch (4UL) {
      case 1UL: 
#line 481
      pao_ID__ = 1;
#line 481
      switch (4UL) {
      case 1UL: ;
#line 481
      if (pao_ID__ == 1) {
#line 481
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID__ == -1) {
#line 481
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 481
      goto ldv_11532;
      case 2UL: ;
#line 481
      if (pao_ID__ == 1) {
#line 481
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID__ == -1) {
#line 481
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11532;
      case 4UL: ;
#line 481
      if (pao_ID__ == 1) {
#line 481
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID__ == -1) {
#line 481
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11532;
      case 8UL: ;
#line 481
      if (pao_ID__ == 1) {
#line 481
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID__ == -1) {
#line 481
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 481
      goto ldv_11532;
      default: 
#line 481
      __bad_percpu_size();
      }
      ldv_11532: ;
#line 481
      goto ldv_11537;
      case 2UL: 
#line 481
      pao_ID_____0 = 1;
#line 481
      switch (4UL) {
      case 1UL: ;
#line 481
      if (pao_ID_____0 == 1) {
#line 481
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____0 == -1) {
#line 481
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 481
      goto ldv_11543;
      case 2UL: ;
#line 481
      if (pao_ID_____0 == 1) {
#line 481
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____0 == -1) {
#line 481
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11543;
      case 4UL: ;
#line 481
      if (pao_ID_____0 == 1) {
#line 481
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____0 == -1) {
#line 481
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11543;
      case 8UL: ;
#line 481
      if (pao_ID_____0 == 1) {
#line 481
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____0 == -1) {
#line 481
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 481
      goto ldv_11543;
      default: 
#line 481
      __bad_percpu_size();
      }
      ldv_11543: ;
#line 481
      goto ldv_11537;
      case 4UL: 
#line 481
      pao_ID_____1 = 1;
#line 481
      switch (4UL) {
      case 1UL: ;
#line 481
      if (pao_ID_____1 == 1) {
#line 481
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____1 == -1) {
#line 481
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 481
      goto ldv_11553;
      case 2UL: ;
#line 481
      if (pao_ID_____1 == 1) {
#line 481
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____1 == -1) {
#line 481
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11553;
      case 4UL: ;
#line 481
      if (pao_ID_____1 == 1) {
#line 481
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____1 == -1) {
#line 481
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11553;
      case 8UL: ;
#line 481
      if (pao_ID_____1 == 1) {
#line 481
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____1 == -1) {
#line 481
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 481
      goto ldv_11553;
      default: 
#line 481
      __bad_percpu_size();
      }
      ldv_11553: ;
#line 481
      goto ldv_11537;
      case 8UL: 
#line 481
      pao_ID_____2 = 1;
#line 481
      switch (4UL) {
      case 1UL: ;
#line 481
      if (pao_ID_____2 == 1) {
#line 481
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____2 == -1) {
#line 481
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 481
      goto ldv_11563;
      case 2UL: ;
#line 481
      if (pao_ID_____2 == 1) {
#line 481
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____2 == -1) {
#line 481
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11563;
      case 4UL: ;
#line 481
      if (pao_ID_____2 == 1) {
#line 481
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____2 == -1) {
#line 481
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 481
      goto ldv_11563;
      case 8UL: ;
#line 481
      if (pao_ID_____2 == 1) {
#line 481
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 481
      if (pao_ID_____2 == -1) {
#line 481
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 481
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 481
      goto ldv_11563;
      default: 
#line 481
      __bad_percpu_size();
      }
      ldv_11563: ;
#line 481
      goto ldv_11537;
      default: 
#line 481
      __bad_size_call_parameter();
#line 481
      goto ldv_11537;
      }
      ldv_11537: ;
#line 482
      trace_module_get___0(module, (unsigned long )((void *)0));
    } else {
#line 484
      ret = 0;
    }
  } else {

  }
#line 488
  return (ret);
}
}
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___5(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0 && ! __warned) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        __warned = 1;
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13372: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13372;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___5(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___5((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___5(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___5(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___5((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc___2(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc___5(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 1917 "include/linux/fs.h"
extern struct file *filp_open(char const   * , int  , int  ) ;
#line 1983
extern int bd_claim(struct block_device * , void * ) ;
#line 137 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char * , void (*)(struct cn_msg * , struct netlink_skb_parms * ) ) ;
#line 138
extern void cn_del_callback(struct cb_id * ) ;
#line 139
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info___2();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info___2();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 349 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 68 "include/linux/highmem.h"
__inline static void *kmap_atomic___0(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 70
  pagefault_disable___0();
#line 71
  tmp = lowmem_page_address(page);
#line 71
  return (tmp);
}
}
#line 933 "include/linux/blkdev.h"
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 934
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 938
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 947
extern int blk_stack_limits(struct queue_limits * , struct queue_limits * , sector_t  ) ;
#line 960
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 1049 "include/linux/blkdev.h"
__inline static unsigned int queue_max_sectors(struct request_queue *q ) 
{ 


  {
#line 1051
  return (q->limits.max_sectors);
}
}
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1819 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1822
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1826
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1826
  if (tmp___1 != 0UL) {
#line 1826
    __min1 = 34359738368UL;
#line 1826
    tmp___0 = drbd_md_first_sector(bdev);
#line 1826
    __min2 = tmp___0;
#line 1826
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1826
    s = 0UL;
  }
#line 1829
  goto ldv_42066;
  case -2: 
#line 1831
  __min1___0 = 34359738368UL;
#line 1831
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1831
  __min2___0 = tmp___2;
#line 1831
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1834
  __min1___1 = s;
#line 1834
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1834
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1837
  goto ldv_42066;
  default: 
#line 1839
  __min1___2 = 8587575296UL;
#line 1839
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1839
  __min2___2 = tmp___3;
#line 1839
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_42066: ;
#line 1842
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 75 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[75U]  = 
#line 75 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {"dp_volume", 0, 4}, 
        {"dp_interval", 0, 4}, 
        {"throttle_th", 0, 4}, 
        {"hold_off_th", 0, 4}};
#line 88 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 89
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 90
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 93 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 14
  goto ldv_42640;
  ldv_42639: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_42637;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 14
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 14
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_42637: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_42640: 
#line 14
  tmp___3 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 14
  tag = (int )tmp___4;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_42639;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned short *tmp___11 ;
  u16 tmp___12 ;

  {
#line 20
  goto ldv_42701;
  ldv_42700: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_42669;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___2,
           tmp___1, (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_42669;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___4,
           tmp___3, (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_42669;
  case 5: 
#line 20
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___5;
#line 20
  goto ldv_42669;
  case 6: 
#line 20
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___6;
#line 20
  goto ldv_42669;
  case 7: 
#line 20
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___7;
#line 20
  goto ldv_42669;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42669;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42669;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42669;
  case 56: 
#line 20
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___8;
#line 20
  goto ldv_42669;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42669;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42669;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: Unknown tag: %d\n", tmp___10, tmp___9, tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_42669: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_42701: 
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___12 = get_unaligned_le16((void const   *)tmp___11);
#line 20
  tag = (int )tmp___12;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_42700;
  } else {

  }

#line 20
  return (1);
}
}
#line 67
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 67 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  u32 tmp___19 ;
  u32 tmp___20 ;
  u32 tmp___21 ;
  u32 tmp___22 ;
  u32 tmp___23 ;
  u32 tmp___24 ;
  u32 tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  unsigned short *tmp___28 ;
  u16 tmp___29 ;

  {
#line 38
  goto ldv_42804;
  ldv_42803: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___2,
           tmp___1, (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_42739;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___4,
           tmp___3, (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_42739;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___6,
           tmp___5, (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_42739;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___8,
           tmp___7, (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_42739;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___10,
           tmp___9, (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_42739;
  case 14: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___11;
#line 38
  goto ldv_42739;
  case 15: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___12;
#line 38
  goto ldv_42739;
  case 16: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___13;
#line 38
  goto ldv_42739;
  case 17: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___14;
#line 38
  goto ldv_42739;
  case 18: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___15;
#line 38
  goto ldv_42739;
  case 19: 
#line 38
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___16;
#line 38
  goto ldv_42739;
  case 20: 
#line 38
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___17;
#line 38
  goto ldv_42739;
  case 21: 
#line 38
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___18;
#line 38
  goto ldv_42739;
  case 22: 
#line 38
  tmp___19 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___19;
#line 38
  goto ldv_42739;
  case 24: 
#line 38
  tmp___20 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___20;
#line 38
  goto ldv_42739;
  case 25: 
#line 38
  tmp___21 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___21;
#line 38
  goto ldv_42739;
  case 26: 
#line 38
  tmp___22 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___22;
#line 38
  goto ldv_42739;
  case 39: 
#line 38
  tmp___23 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___23;
#line 38
  goto ldv_42739;
  case 40: 
#line 38
  tmp___24 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___24;
#line 38
  goto ldv_42739;
  case 67: 
#line 38
  tmp___25 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___25;
#line 38
  goto ldv_42739;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42739;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42739;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42739;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42739;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42739;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42739;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42739;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: Unknown tag: %d\n", tmp___27, tmp___26, tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_42739: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_42804: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___29 = get_unaligned_le16((void const   *)tmp___28);
#line 38
  tag = (int )tmp___29;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_42803;
  } else {

  }

#line 38
  return (1);
}
}
#line 75
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 75 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 71
  goto ldv_42838;
  ldv_42837: 
#line 71
  tmp = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 71
  dlen = (int )tmp___0;
#line 71
  switch (tag & 8191) {
  case 29: 
#line 71
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 71
  goto ldv_42833;
  case 68: 
#line 71
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_42833;
  case 69: 
#line 71
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_42833;
  default: ;
#line 71
  if ((tag & 8192) != 0) {
#line 71
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 71
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 71
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 71
    return (0);
  } else {

  }
  }
  ldv_42833: 
#line 71
  tags = tags + (unsigned long )dlen;
  ldv_42838: 
#line 71
  tmp___3 = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 71
  tag = (int )tmp___4;
#line 71
  if (tag != 0) {
#line 72
    goto ldv_42837;
  } else {

  }

#line 71
  return (1);
}
}
#line 89
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 89 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  unsigned short *tmp___16 ;
  u16 tmp___17 ;

  {
#line 77
  goto ldv_42892;
  ldv_42891: 
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 77
  dlen = (int )tmp___0;
#line 77
  switch (tag & 8191) {
  case 30: 
#line 77
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->rate = (int )tmp___1;
#line 77
  goto ldv_42852;
  case 31: 
#line 77
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->after = (int )tmp___2;
#line 77
  goto ldv_42852;
  case 32: 
#line 77
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->al_extents = (int )tmp___3;
#line 77
  goto ldv_42852;
  case 71: 
#line 77
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->dp_volume = (int )tmp___4;
#line 77
  goto ldv_42852;
  case 72: 
#line 77
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->dp_interval = (int )tmp___5;
#line 77
  goto ldv_42852;
  case 73: 
#line 77
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->throttle_th = (int )tmp___6;
#line 77
  goto ldv_42852;
  case 74: 
#line 77
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->hold_off_th = (int )tmp___7;
#line 77
  goto ldv_42852;
  case 52: ;
#line 77
  if (dlen > 64) {
#line 77
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___9,
           tmp___8, (char *)"verify_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->verify_alg_len = dlen;
#line 77
  __min1 = (size_t )dlen;
#line 77
  __min2 = 64UL;
#line 77
  __len = __min1 < __min2 ? __min1 : __min2;
#line 77
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 77
  goto ldv_42852;
  case 51: ;
#line 77
  if (dlen > 32) {
#line 77
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___11,
           tmp___10, (char *)"cpu_mask", dlen, 32U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->cpu_mask_len = dlen;
#line 77
  __min1___0 = (size_t )dlen;
#line 77
  __min2___0 = 32UL;
#line 77
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 77
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 77
  goto ldv_42852;
  case 64: ;
#line 77
  if (dlen > 64) {
#line 77
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___13,
           tmp___12, (char *)"csums_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->csums_alg_len = dlen;
#line 77
  __min1___1 = (size_t )dlen;
#line 77
  __min2___1 = 64UL;
#line 77
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 77
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 77
  goto ldv_42852;
  case 65: 
#line 77
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 77
  goto ldv_42852;
  default: ;
#line 77
  if ((tag & 8192) != 0) {
#line 77
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 77
    printk("<3>%s %s: Unknown tag: %d\n", tmp___15, tmp___14, tag & 8191);
#line 77
    return (0);
  } else {

  }
  }
  ldv_42852: 
#line 77
  tags = tags + (unsigned long )dlen;
  ldv_42892: 
#line 77
  tmp___16 = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___17 = get_unaligned_le16((void const   *)tmp___16);
#line 77
  tag = (int )tmp___17;
#line 77
  if (tag != 0) {
#line 78
    goto ldv_42891;
  } else {

  }

#line 77
  return (1);
}
}
#line 133
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 133 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 131
  goto ldv_43191;
  ldv_43190: 
#line 131
  tmp = tags;
#line 131
  tags = tags + 1;
#line 131
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 131
  dlen = (int )tmp___0;
#line 131
  switch (tag & 8191) {
  case 66: 
#line 131
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 131
  goto ldv_43188;
  default: ;
#line 131
  if ((tag & 8192) != 0) {
#line 131
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 131
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 131
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 131
    return (0);
  } else {

  }
  }
  ldv_43188: 
#line 131
  tags = tags + (unsigned long )dlen;
  ldv_43191: 
#line 131
  tmp___3 = tags;
#line 131
  tags = tags + 1;
#line 131
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 131
  tag = (int )tmp___4;
#line 131
  if (tag != 0) {
#line 132
    goto ldv_43190;
  } else {

  }

#line 131
  return (1);
}
}
#line 137
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 137 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 135
  goto ldv_43208;
  ldv_43207: 
#line 135
  tmp = tags;
#line 135
  tags = tags + 1;
#line 135
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 135
  dlen = (int )tmp___0;
#line 135
  switch (tag & 8191) {
  case 63: 
#line 135
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 135
  goto ldv_43205;
  default: ;
#line 135
  if ((tag & 8192) != 0) {
#line 135
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 135
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 135
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 135
    return (0);
  } else {

  }
  }
  ldv_43205: 
#line 135
  tags = tags + (unsigned long )dlen;
  ldv_43208: 
#line 135
  tmp___3 = tags;
#line 135
  tags = tags + 1;
#line 135
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 135
  tag = (int )tmp___4;
#line 135
  if (tag != 0) {
#line 136
    goto ldv_43207;
  } else {

  }

#line 135
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_43253;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_43253;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_43253;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_43253;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43253;
  }
  ldv_43253: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_43260;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_43260;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_43260;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_43260;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43260;
  }
  ldv_43260: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_43267;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_43267;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_43267;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_43267;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43267;
  }
  ldv_43267: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_43274;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_43274;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_43274;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_43274;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43274;
  }
  ldv_43274: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_43281;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_43281;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_43281;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_43281;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43281;
  }
  ldv_43281: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_43291;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_43291;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_43291;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_43291;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43291;
  }
  ldv_43291: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_43298;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_43298;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_43298;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_43298;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43298;
  }
  ldv_43298: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_43308;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_43308;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_43308;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_43308;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43308;
  }
  ldv_43308: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_43315;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_43315;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_43315;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_43315;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43315;
  }
  ldv_43315: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_43322;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_43322;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_43322;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_43322;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43322;
  }
  ldv_43322: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_43329;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_43329;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_43329;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_43329;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43329;
  }
  ldv_43329: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_43336;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_43336;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_43336;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_43336;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43336;
  }
  ldv_43336: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_43343;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_43343;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_43343;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_43343;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43343;
  }
  ldv_43343: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_43350;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_43350;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_43350;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_43350;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43350;
  }
  ldv_43350: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_43357;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_43357;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_43357;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_43357;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43357;
  }
  ldv_43357: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_43364;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_43364;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_43364;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_43364;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43364;
  }
  ldv_43364: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_43371;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_43371;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_43371;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_43371;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43371;
  }
  ldv_43371: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_43378;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_43378;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_43378;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_43378;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43378;
  }
  ldv_43378: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_43385;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_43385;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_43385;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_43385;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43385;
  }
  ldv_43385: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_43392;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_43392;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_43392;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_43392;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43392;
  }
  ldv_43392: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_43399;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_43399;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_43399;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_43399;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43399;
  }
  ldv_43399: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_43406;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_43406;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_43406;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_43406;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43406;
  }
  ldv_43406: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_43413;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_43413;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_43413;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_43413;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43413;
  }
  ldv_43413: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_43420;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_43420;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_43420;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_43420;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43420;
  }
  ldv_43420: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_43427;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_43427;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_43427;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_43427;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43427;
  }
  ldv_43427: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_43434;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_43434;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_43434;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_43434;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43434;
  }
  ldv_43434: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_43441;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_43441;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_43441;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_43441;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43441;
  }
  ldv_43441: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_43448;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_43448;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_43448;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_43448;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43448;
  }
  ldv_43448: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_43455;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_43455;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_43455;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_43455;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43455;
  }
  ldv_43455: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 67
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 67 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  unsigned short *tmp___41 ;
  void *__gu_p___57 ;
  unsigned short *tmp___42 ;
  void *__gu_p___58 ;
  unsigned short *tmp___43 ;
  void *__gu_p___59 ;
  unsigned short *tmp___44 ;
  void *__gu_p___60 ;
  unsigned short *tmp___45 ;
  void *__gu_p___61 ;
  unsigned short *tmp___46 ;
  void *__gu_p___62 ;
  unsigned short *tmp___47 ;
  void *__gu_p___63 ;
  unsigned short *tmp___48 ;
  void *__gu_p___64 ;
  unsigned short *tmp___49 ;
  void *__gu_p___65 ;
  unsigned short *tmp___50 ;
  void *__gu_p___66 ;
  unsigned short *tmp___51 ;
  void *__gu_p___67 ;
  unsigned short *tmp___52 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_43480;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_43480;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_43480;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_43480;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43480;
  }
  ldv_43480: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_43487;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_43487;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_43487;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_43487;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43487;
  }
  ldv_43487: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_43497;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_43497;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_43497;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_43497;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43497;
  }
  ldv_43497: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_43504;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_43504;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_43504;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_43504;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43504;
  }
  ldv_43504: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_43514;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_43514;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_43514;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_43514;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43514;
  }
  ldv_43514: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_43521;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_43521;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_43521;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_43521;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43521;
  }
  ldv_43521: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_43531;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_43531;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_43531;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_43531;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43531;
  }
  ldv_43531: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_43538;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_43538;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_43538;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_43538;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43538;
  }
  ldv_43538: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_43548;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_43548;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_43548;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_43548;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43548;
  }
  ldv_43548: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_43555;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_43555;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_43555;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_43555;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43555;
  }
  ldv_43555: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_43565;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_43565;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_43565;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_43565;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43565;
  }
  ldv_43565: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_43572;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_43572;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_43572;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_43572;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43572;
  }
  ldv_43572: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_43579;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_43579;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_43579;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_43579;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43579;
  }
  ldv_43579: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_43586;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_43586;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_43586;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_43586;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43586;
  }
  ldv_43586: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_43593;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_43593;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_43593;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_43593;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43593;
  }
  ldv_43593: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_43600;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_43600;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_43600;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_43600;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43600;
  }
  ldv_43600: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_43607;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_43607;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_43607;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_43607;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43607;
  }
  ldv_43607: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_43614;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_43614;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_43614;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_43614;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43614;
  }
  ldv_43614: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_43621;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_43621;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_43621;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_43621;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43621;
  }
  ldv_43621: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_43628;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_43628;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_43628;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_43628;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43628;
  }
  ldv_43628: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_43635;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_43635;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_43635;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_43635;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43635;
  }
  ldv_43635: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_43642;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_43642;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_43642;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_43642;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43642;
  }
  ldv_43642: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_43649;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_43649;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_43649;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_43649;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43649;
  }
  ldv_43649: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_43656;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_43656;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_43656;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_43656;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43656;
  }
  ldv_43656: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_43663;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_43663;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_43663;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_43663;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43663;
  }
  ldv_43663: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_43670;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_43670;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_43670;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_43670;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43670;
  }
  ldv_43670: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_43677;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_43677;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_43677;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_43677;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43677;
  }
  ldv_43677: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_43684;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_43684;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_43684;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_43684;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43684;
  }
  ldv_43684: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_43691;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_43691;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_43691;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_43691;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43691;
  }
  ldv_43691: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_43698;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_43698;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_43698;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_43698;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43698;
  }
  ldv_43698: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_43705;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_43705;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_43705;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_43705;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43705;
  }
  ldv_43705: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_43712;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_43712;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_43712;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_43712;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43712;
  }
  ldv_43712: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_43719;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_43719;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_43719;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_43719;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43719;
  }
  ldv_43719: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_43726;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_43726;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_43726;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_43726;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43726;
  }
  ldv_43726: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_43733;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_43733;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_43733;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_43733;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43733;
  }
  ldv_43733: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_43740;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_43740;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_43740;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_43740;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43740;
  }
  ldv_43740: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_43747;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_43747;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_43747;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_43747;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43747;
  }
  ldv_43747: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_43754;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_43754;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_43754;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_43754;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43754;
  }
  ldv_43754: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_43761;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_43761;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_43761;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_43761;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43761;
  }
  ldv_43761: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_43768;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_43768;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_43768;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_43768;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43768;
  }
  ldv_43768: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_43775;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_43775;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_43775;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_43775;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43775;
  }
  ldv_43775: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_43782;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_43782;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_43782;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_43782;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43782;
  }
  ldv_43782: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_43789;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_43789;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_43789;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_43789;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43789;
  }
  ldv_43789: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_43796;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_43796;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_43796;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_43796;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43796;
  }
  ldv_43796: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_43803;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_43803;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_43803;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_43803;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43803;
  }
  ldv_43803: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_43810;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_43810;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_43810;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_43810;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43810;
  }
  ldv_43810: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_43817;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_43817;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_43817;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_43817;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43817;
  }
  ldv_43817: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_43824;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_43824;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_43824;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_43824;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43824;
  }
  ldv_43824: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_43831;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_43831;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_43831;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_43831;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43831;
  }
  ldv_43831: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_43838;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_43838;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_43838;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_43838;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43838;
  }
  ldv_43838: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_43845;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_43845;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_43845;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_43845;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43845;
  }
  ldv_43845: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_43852;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_43852;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_43852;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_43852;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43852;
  }
  ldv_43852: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_43859;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_43859;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_43859;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_43859;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43859;
  }
  ldv_43859: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_43866;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_43866;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_43866;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_43866;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43866;
  }
  ldv_43866: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_43873;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_43873;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_43873;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_43873;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43873;
  }
  ldv_43873: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 60U;
#line 38
  goto ldv_43880;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___54);
#line 38
  goto ldv_43880;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___54);
#line 38
  goto ldv_43880;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___54);
#line 38
  goto ldv_43880;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43880;
  }
  ldv_43880: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 1U;
#line 38
  goto ldv_43887;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___55);
#line 38
  goto ldv_43887;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___55);
#line 38
  goto ldv_43887;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___55);
#line 38
  goto ldv_43887;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43887;
  }
  ldv_43887: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___56 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = 27U;
#line 38
  goto ldv_43894;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___56);
#line 38
  goto ldv_43894;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___56);
#line 38
  goto ldv_43894;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___56);
#line 38
  goto ldv_43894;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43894;
  }
  ldv_43894: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 1U;
#line 38
  goto ldv_43901;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___57);
#line 38
  goto ldv_43901;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___57);
#line 38
  goto ldv_43901;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___57);
#line 38
  goto ldv_43901;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43901;
  }
  ldv_43901: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 28U;
#line 38
  goto ldv_43908;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___58);
#line 38
  goto ldv_43908;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___58);
#line 38
  goto ldv_43908;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___58);
#line 38
  goto ldv_43908;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43908;
  }
  ldv_43908: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___59 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = 1U;
#line 38
  goto ldv_43915;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___59);
#line 38
  goto ldv_43915;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___59);
#line 38
  goto ldv_43915;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___59);
#line 38
  goto ldv_43915;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43915;
  }
  ldv_43915: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 41U;
#line 38
  goto ldv_43922;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___60);
#line 38
  goto ldv_43922;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___60);
#line 38
  goto ldv_43922;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___60);
#line 38
  goto ldv_43922;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43922;
  }
  ldv_43922: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 1U;
#line 38
  goto ldv_43929;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___61);
#line 38
  goto ldv_43929;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___61);
#line 38
  goto ldv_43929;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___61);
#line 38
  goto ldv_43929;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43929;
  }
  ldv_43929: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___62 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = 61U;
#line 38
  goto ldv_43936;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___62);
#line 38
  goto ldv_43936;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___62);
#line 38
  goto ldv_43936;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___62);
#line 38
  goto ldv_43936;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43936;
  }
  ldv_43936: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 1U;
#line 38
  goto ldv_43943;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___63);
#line 38
  goto ldv_43943;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___63);
#line 38
  goto ldv_43943;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___63);
#line 38
  goto ldv_43943;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43943;
  }
  ldv_43943: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 62U;
#line 38
  goto ldv_43950;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___64);
#line 38
  goto ldv_43950;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___64);
#line 38
  goto ldv_43950;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___64);
#line 38
  goto ldv_43950;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43950;
  }
  ldv_43950: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 1U;
#line 38
  goto ldv_43957;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___65);
#line 38
  goto ldv_43957;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___65);
#line 38
  goto ldv_43957;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___65);
#line 38
  goto ldv_43957;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43957;
  }
  ldv_43957: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 70U;
#line 38
  goto ldv_43964;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___66);
#line 38
  goto ldv_43964;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___66);
#line 38
  goto ldv_43964;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___66);
#line 38
  goto ldv_43964;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43964;
  }
  ldv_43964: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 1U;
#line 38
  goto ldv_43971;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___67);
#line 38
  goto ldv_43971;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___67);
#line 38
  goto ldv_43971;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___67);
#line 38
  goto ldv_43971;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43971;
  }
  ldv_43971: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 89
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 89 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  void *__gu_p___10 ;
  void *__gu_p___11 ;
  unsigned short *tmp___7 ;
  void *__gu_p___12 ;
  unsigned short *tmp___8 ;
  void *__gu_p___13 ;
  void *__gu_p___14 ;
  unsigned short *tmp___9 ;
  void *__gu_p___15 ;
  unsigned short *tmp___10 ;
  void *__gu_p___16 ;
  void *__gu_p___17 ;
  unsigned short *tmp___11 ;
  void *__gu_p___18 ;
  unsigned short *tmp___12 ;
  void *__gu_p___19 ;
  void *__gu_p___20 ;
  unsigned short *tmp___13 ;
  void *__gu_p___21 ;
  unsigned short *tmp___14 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___22 ;
  unsigned short *tmp___15 ;
  void *__gu_p___23 ;
  unsigned short *tmp___16 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___24 ;
  unsigned short *tmp___17 ;
  void *__gu_p___25 ;
  unsigned short *tmp___18 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___26 ;
  unsigned short *tmp___19 ;
  void *__gu_p___27 ;
  unsigned short *tmp___20 ;

  {
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p = (void *)tmp;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p) = 30U;
#line 77
  goto ldv_44054;
  case 2UL: 
#line 77
  put_unaligned_le16(30, __gu_p);
#line 77
  goto ldv_44054;
  case 4UL: 
#line 77
  put_unaligned_le32(30U, __gu_p);
#line 77
  goto ldv_44054;
  case 8UL: 
#line 77
  put_unaligned_le64(30ULL, __gu_p);
#line 77
  goto ldv_44054;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44054;
  }
  ldv_44054: 
#line 77
  tmp___0 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___0 = (void *)tmp___0;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___0) = 4U;
#line 77
  goto ldv_44061;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___0);
#line 77
  goto ldv_44061;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___0);
#line 77
  goto ldv_44061;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___0);
#line 77
  goto ldv_44061;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44061;
  }
  ldv_44061: 
#line 77
  __gu_p___1 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 77
  goto ldv_44068;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 77
  goto ldv_44068;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 77
  goto ldv_44068;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 77
  goto ldv_44068;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44068;
  }
  ldv_44068: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___1 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___2 = (void *)tmp___1;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___2) = 31U;
#line 77
  goto ldv_44075;
  case 2UL: 
#line 77
  put_unaligned_le16(31, __gu_p___2);
#line 77
  goto ldv_44075;
  case 4UL: 
#line 77
  put_unaligned_le32(31U, __gu_p___2);
#line 77
  goto ldv_44075;
  case 8UL: 
#line 77
  put_unaligned_le64(31ULL, __gu_p___2);
#line 77
  goto ldv_44075;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44075;
  }
  ldv_44075: 
#line 77
  tmp___2 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___3 = (void *)tmp___2;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___3) = 4U;
#line 77
  goto ldv_44082;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___3);
#line 77
  goto ldv_44082;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___3);
#line 77
  goto ldv_44082;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___3);
#line 77
  goto ldv_44082;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44082;
  }
  ldv_44082: 
#line 77
  __gu_p___4 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 77
  goto ldv_44089;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 77
  goto ldv_44089;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 77
  goto ldv_44089;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 77
  goto ldv_44089;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44089;
  }
  ldv_44089: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___3 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___5 = (void *)tmp___3;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___5) = 32U;
#line 77
  goto ldv_44096;
  case 2UL: 
#line 77
  put_unaligned_le16(32, __gu_p___5);
#line 77
  goto ldv_44096;
  case 4UL: 
#line 77
  put_unaligned_le32(32U, __gu_p___5);
#line 77
  goto ldv_44096;
  case 8UL: 
#line 77
  put_unaligned_le64(32ULL, __gu_p___5);
#line 77
  goto ldv_44096;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44096;
  }
  ldv_44096: 
#line 77
  tmp___4 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___6 = (void *)tmp___4;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___6) = 4U;
#line 77
  goto ldv_44103;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___6);
#line 77
  goto ldv_44103;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___6);
#line 77
  goto ldv_44103;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___6);
#line 77
  goto ldv_44103;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44103;
  }
  ldv_44103: 
#line 77
  __gu_p___7 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 77
  goto ldv_44110;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 77
  goto ldv_44110;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_44110;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_44110;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44110;
  }
  ldv_44110: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___5 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___8 = (void *)tmp___5;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___8) = 71U;
#line 77
  goto ldv_44117;
  case 2UL: 
#line 77
  put_unaligned_le16(71, __gu_p___8);
#line 77
  goto ldv_44117;
  case 4UL: 
#line 77
  put_unaligned_le32(71U, __gu_p___8);
#line 77
  goto ldv_44117;
  case 8UL: 
#line 77
  put_unaligned_le64(71ULL, __gu_p___8);
#line 77
  goto ldv_44117;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44117;
  }
  ldv_44117: 
#line 77
  tmp___6 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___9 = (void *)tmp___6;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___9) = 4U;
#line 77
  goto ldv_44124;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___9);
#line 77
  goto ldv_44124;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___9);
#line 77
  goto ldv_44124;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___9);
#line 77
  goto ldv_44124;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44124;
  }
  ldv_44124: 
#line 77
  __gu_p___10 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___10) = (unsigned char )arg->dp_volume;
#line 77
  goto ldv_44131;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->dp_volume), __gu_p___10);
#line 77
  goto ldv_44131;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->dp_volume, __gu_p___10);
#line 77
  goto ldv_44131;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->dp_volume, __gu_p___10);
#line 77
  goto ldv_44131;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44131;
  }
  ldv_44131: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___7 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___11 = (void *)tmp___7;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___11) = 72U;
#line 77
  goto ldv_44138;
  case 2UL: 
#line 77
  put_unaligned_le16(72, __gu_p___11);
#line 77
  goto ldv_44138;
  case 4UL: 
#line 77
  put_unaligned_le32(72U, __gu_p___11);
#line 77
  goto ldv_44138;
  case 8UL: 
#line 77
  put_unaligned_le64(72ULL, __gu_p___11);
#line 77
  goto ldv_44138;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44138;
  }
  ldv_44138: 
#line 77
  tmp___8 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___12 = (void *)tmp___8;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___12) = 4U;
#line 77
  goto ldv_44145;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___12);
#line 77
  goto ldv_44145;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___12);
#line 77
  goto ldv_44145;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___12);
#line 77
  goto ldv_44145;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44145;
  }
  ldv_44145: 
#line 77
  __gu_p___13 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___13) = (unsigned char )arg->dp_interval;
#line 77
  goto ldv_44152;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->dp_interval), __gu_p___13);
#line 77
  goto ldv_44152;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->dp_interval, __gu_p___13);
#line 77
  goto ldv_44152;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->dp_interval, __gu_p___13);
#line 77
  goto ldv_44152;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44152;
  }
  ldv_44152: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___9 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___14 = (void *)tmp___9;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___14) = 73U;
#line 77
  goto ldv_44159;
  case 2UL: 
#line 77
  put_unaligned_le16(73, __gu_p___14);
#line 77
  goto ldv_44159;
  case 4UL: 
#line 77
  put_unaligned_le32(73U, __gu_p___14);
#line 77
  goto ldv_44159;
  case 8UL: 
#line 77
  put_unaligned_le64(73ULL, __gu_p___14);
#line 77
  goto ldv_44159;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44159;
  }
  ldv_44159: 
#line 77
  tmp___10 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___15 = (void *)tmp___10;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___15) = 4U;
#line 77
  goto ldv_44166;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___15);
#line 77
  goto ldv_44166;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___15);
#line 77
  goto ldv_44166;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___15);
#line 77
  goto ldv_44166;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44166;
  }
  ldv_44166: 
#line 77
  __gu_p___16 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___16) = (unsigned char )arg->throttle_th;
#line 77
  goto ldv_44173;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->throttle_th), __gu_p___16);
#line 77
  goto ldv_44173;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->throttle_th, __gu_p___16);
#line 77
  goto ldv_44173;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->throttle_th, __gu_p___16);
#line 77
  goto ldv_44173;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44173;
  }
  ldv_44173: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___11 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___17 = (void *)tmp___11;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___17) = 74U;
#line 77
  goto ldv_44180;
  case 2UL: 
#line 77
  put_unaligned_le16(74, __gu_p___17);
#line 77
  goto ldv_44180;
  case 4UL: 
#line 77
  put_unaligned_le32(74U, __gu_p___17);
#line 77
  goto ldv_44180;
  case 8UL: 
#line 77
  put_unaligned_le64(74ULL, __gu_p___17);
#line 77
  goto ldv_44180;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44180;
  }
  ldv_44180: 
#line 77
  tmp___12 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___18 = (void *)tmp___12;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___18) = 4U;
#line 77
  goto ldv_44187;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___18);
#line 77
  goto ldv_44187;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___18);
#line 77
  goto ldv_44187;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___18);
#line 77
  goto ldv_44187;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44187;
  }
  ldv_44187: 
#line 77
  __gu_p___19 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___19) = (unsigned char )arg->hold_off_th;
#line 77
  goto ldv_44194;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->hold_off_th), __gu_p___19);
#line 77
  goto ldv_44194;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->hold_off_th, __gu_p___19);
#line 77
  goto ldv_44194;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->hold_off_th, __gu_p___19);
#line 77
  goto ldv_44194;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44194;
  }
  ldv_44194: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___13 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___20 = (void *)tmp___13;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___20) = 52U;
#line 77
  goto ldv_44201;
  case 2UL: 
#line 77
  put_unaligned_le16(49204, __gu_p___20);
#line 77
  goto ldv_44201;
  case 4UL: 
#line 77
  put_unaligned_le32(49204U, __gu_p___20);
#line 77
  goto ldv_44201;
  case 8UL: 
#line 77
  put_unaligned_le64(49204ULL, __gu_p___20);
#line 77
  goto ldv_44201;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44201;
  }
  ldv_44201: 
#line 77
  tmp___14 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___21 = (void *)tmp___14;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___21) = (unsigned char )arg->verify_alg_len;
#line 77
  goto ldv_44208;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___21);
#line 77
  goto ldv_44208;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___21);
#line 77
  goto ldv_44208;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___21);
#line 77
  goto ldv_44208;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44208;
  }
  ldv_44208: 
#line 77
  __len = (size_t )arg->verify_alg_len;
#line 77
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 77
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 77
  tmp___15 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___22 = (void *)tmp___15;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___22) = 51U;
#line 77
  goto ldv_44218;
  case 2UL: 
#line 77
  put_unaligned_le16(49203, __gu_p___22);
#line 77
  goto ldv_44218;
  case 4UL: 
#line 77
  put_unaligned_le32(49203U, __gu_p___22);
#line 77
  goto ldv_44218;
  case 8UL: 
#line 77
  put_unaligned_le64(49203ULL, __gu_p___22);
#line 77
  goto ldv_44218;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44218;
  }
  ldv_44218: 
#line 77
  tmp___16 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___23 = (void *)tmp___16;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___23) = (unsigned char )arg->cpu_mask_len;
#line 77
  goto ldv_44225;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___23);
#line 77
  goto ldv_44225;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___23);
#line 77
  goto ldv_44225;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___23);
#line 77
  goto ldv_44225;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44225;
  }
  ldv_44225: 
#line 77
  __len___0 = (size_t )arg->cpu_mask_len;
#line 77
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 77
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 77
  tmp___17 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___24 = (void *)tmp___17;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___24) = 64U;
#line 77
  goto ldv_44235;
  case 2UL: 
#line 77
  put_unaligned_le16(49216, __gu_p___24);
#line 77
  goto ldv_44235;
  case 4UL: 
#line 77
  put_unaligned_le32(49216U, __gu_p___24);
#line 77
  goto ldv_44235;
  case 8UL: 
#line 77
  put_unaligned_le64(49216ULL, __gu_p___24);
#line 77
  goto ldv_44235;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44235;
  }
  ldv_44235: 
#line 77
  tmp___18 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___25 = (void *)tmp___18;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___25) = (unsigned char )arg->csums_alg_len;
#line 77
  goto ldv_44242;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___25);
#line 77
  goto ldv_44242;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___25);
#line 77
  goto ldv_44242;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___25);
#line 77
  goto ldv_44242;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44242;
  }
  ldv_44242: 
#line 77
  __len___1 = (size_t )arg->csums_alg_len;
#line 77
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 77
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 77
  tmp___19 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___26 = (void *)tmp___19;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___26) = 65U;
#line 77
  goto ldv_44252;
  case 2UL: 
#line 77
  put_unaligned_le16(32833, __gu_p___26);
#line 77
  goto ldv_44252;
  case 4UL: 
#line 77
  put_unaligned_le32(32833U, __gu_p___26);
#line 77
  goto ldv_44252;
  case 8UL: 
#line 77
  put_unaligned_le64(32833ULL, __gu_p___26);
#line 77
  goto ldv_44252;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44252;
  }
  ldv_44252: 
#line 77
  tmp___20 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___27 = (void *)tmp___20;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___27) = 1U;
#line 77
  goto ldv_44259;
  case 2UL: 
#line 77
  put_unaligned_le16(1, __gu_p___27);
#line 77
  goto ldv_44259;
  case 4UL: 
#line 77
  put_unaligned_le32(1U, __gu_p___27);
#line 77
  goto ldv_44259;
  case 8UL: 
#line 77
  put_unaligned_le64(1ULL, __gu_p___27);
#line 77
  goto ldv_44259;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_44259;
  }
  ldv_44259: 
#line 77
  *((char *)tags) = (char )arg->use_rle;
#line 77
  tags = tags + 1U;
#line 77
  return (tags);
}
}
#line 101
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 101 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 99
  tmp = tags;
#line 99
  tags = tags + 1;
#line 99
  __gu_p = (void *)tmp;
#line 99
  switch (2UL) {
  case 1UL: 
#line 99
  *((u8 *)__gu_p) = 33U;
#line 99
  goto ldv_44347;
  case 2UL: 
#line 99
  put_unaligned_le16(33, __gu_p);
#line 99
  goto ldv_44347;
  case 4UL: 
#line 99
  put_unaligned_le32(33U, __gu_p);
#line 99
  goto ldv_44347;
  case 8UL: 
#line 99
  put_unaligned_le64(33ULL, __gu_p);
#line 99
  goto ldv_44347;
  default: 
#line 99
  __bad_unaligned_access_size();
#line 99
  goto ldv_44347;
  }
  ldv_44347: 
#line 99
  tmp___0 = tags;
#line 99
  tags = tags + 1;
#line 99
  __gu_p___0 = (void *)tmp___0;
#line 99
  switch (2UL) {
  case 1UL: 
#line 99
  *((u8 *)__gu_p___0) = 4U;
#line 99
  goto ldv_44354;
  case 2UL: 
#line 99
  put_unaligned_le16(4, __gu_p___0);
#line 99
  goto ldv_44354;
  case 4UL: 
#line 99
  put_unaligned_le32(4U, __gu_p___0);
#line 99
  goto ldv_44354;
  case 8UL: 
#line 99
  put_unaligned_le64(4ULL, __gu_p___0);
#line 99
  goto ldv_44354;
  default: 
#line 99
  __bad_unaligned_access_size();
#line 99
  goto ldv_44354;
  }
  ldv_44354: 
#line 99
  __gu_p___1 = (void *)tags;
#line 99
  switch (4UL) {
  case 1UL: 
#line 99
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 99
  goto ldv_44361;
  case 2UL: 
#line 99
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 99
  goto ldv_44361;
  case 4UL: 
#line 99
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 99
  goto ldv_44361;
  case 8UL: 
#line 99
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 99
  goto ldv_44361;
  default: 
#line 99
  __bad_unaligned_access_size();
#line 99
  goto ldv_44361;
  }
  ldv_44361: 
#line 99
  tags = tags + 4U;
#line 99
  return (tags);
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 179
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 183
  envp[0] = (char *)"HOME=/";
#line 183
  envp[1] = (char *)"TERM=linux";
#line 183
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 183
  envp[3] = 0;
#line 183
  envp[4] = 0;
#line 183
  envp[5] = 0;
#line 191
  argv[0] = (char *)(& usermode_helper);
#line 191
  argv[1] = cmd;
#line 191
  argv[2] = (char *)(& mb);
#line 191
  argv[3] = 0;
#line 194
  tmp = mdev_to_minor(mdev);
#line 194
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 196
  tmp___0 = get_net_conf(mdev);
#line 196
  if (tmp___0 != 0) {
#line 197
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 199
    afs = (char *)"ipv6";
#line 200
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 202
    goto ldv_44682;
    case 2: 
#line 204
    afs = (char *)"ipv4";
#line 205
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 207
    goto ldv_44682;
    default: 
#line 209
    afs = (char *)"ssocks";
#line 210
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_44682: 
#line 213
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 214
    envp[3] = (char *)(& af);
#line 215
    envp[4] = (char *)(& ad);
#line 216
    put_net_conf(mdev);
  } else {

  }
#line 219
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 219
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 219
  printk("<6>%s %s: helper command: %s %s %s\n", tmp___2, tmp___1, (char *)(& usermode_helper),
         cmd, (char *)(& mb));
#line 221
  drbd_bcast_ev_helper(mdev, cmd);
#line 222
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 223
  if (ret != 0) {
#line 224
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 224
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 224
    printk("<4>%s %s: helper command: %s %s %s exit code %u (0x%x)\n", tmp___4, tmp___3,
           (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 228
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 228
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 228
    printk("<6>%s %s: helper command: %s %s %s exit code %u (0x%x)\n", tmp___6, tmp___5,
           (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  }
#line 232
  if (ret < 0) {
#line 233
    ret = 0;
  } else {

  }
#line 235
  return (ret);
}
}
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 245
  if (*((unsigned int *)mdev + 503UL) != 49152U) {
#line 245
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 245
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 245
    printk("<3>%s %s: ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           245);
  } else {

  }
#line 247
  tmp___3 = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 247
  if (tmp___3 != 0) {
#line 248
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 249
    put_ldev(mdev);
  } else {
#line 251
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 251
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 251
    printk("<4>%s %s: Not fencing peer, I\'m not even Consistent myself.\n", tmp___2,
           tmp___1);
#line 252
    return ((enum drbd_disk_state )mdev->state.ldv_33657.pdsk);
  }
#line 255
  if ((unsigned int )fp == 2U) {
#line 256
    val.i = 0U;
#line 256
    val.ldv_33657.susp = 1U;
#line 256
    mask.i = 0U;
#line 256
    mask.ldv_33657.susp = 1U;
#line 256
    _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
  } else {

  }
#line 258
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 260
  switch ((r >> 8) & 255) {
  case 3: 
#line 262
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 263
  nps = D_INCONSISTENT;
#line 264
  goto ldv_44697;
  case 4: 
#line 266
  ex_to_string = (char *)"peer was fenced";
#line 267
  nps = D_OUTDATED;
#line 268
  goto ldv_44697;
  case 5: ;
#line 270
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 16U) {
#line 272
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 273
    nps = D_OUTDATED;
  } else {
#line 275
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 276
    nps = (enum drbd_disk_state )mdev->state.ldv_33657.pdsk;
  }
#line 278
  goto ldv_44697;
  case 6: 
#line 282
  ex_to_string = (char *)"peer is active";
#line 283
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 283
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 283
  printk("<4>%s %s: Peer is primary, outdating myself.\n", tmp___5, tmp___4);
#line 284
  nps = D_UNKNOWN;
#line 285
  val___0.i = 0U;
#line 285
  val___0.ldv_33657.disk = 5U;
#line 285
  mask___0.i = 0U;
#line 285
  mask___0.ldv_33657.disk = 15U;
#line 285
  _drbd_request_state(mdev, mask___0, val___0, CS_WAIT_COMPLETE);
#line 286
  goto ldv_44697;
  case 7: ;
#line 288
  if ((unsigned int )fp != 2U) {
#line 289
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 289
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 289
    printk("<3>%s %s: fence-peer() = 7 && fencing != Stonith !!!\n", tmp___7, tmp___6);
  } else {

  }
#line 290
  ex_to_string = (char *)"peer was stonithed";
#line 291
  nps = D_OUTDATED;
#line 292
  goto ldv_44697;
  default: 
#line 295
  nps = D_UNKNOWN;
#line 296
  tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 296
  tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 296
  printk("<3>%s %s: fence-peer helper broken, returned %d\n", tmp___9, tmp___8, (r >> 8) & 255);
#line 297
  return (nps);
  }
  ldv_44697: 
#line 300
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 300
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 300
  printk("<6>%s %s: fence-peer helper returned %d (%s)\n", tmp___11, tmp___10, (r >> 8) & 255,
         ex_to_string);
#line 302
  return (nps);
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) 
{ 
  int max_tries ;
  int r ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;

  {
#line 308
  max_tries = 4;
#line 309
  r = 0;
#line 310
  try = 0;
#line 311
  forced = 0;
#line 315
  if ((unsigned int )new_role == 1U) {
#line 316
    request_ping(mdev);
  } else {

  }
#line 318
  ldv_mutex_lock_189(& mdev->state_mutex);
#line 320
  mask.i = 0U;
#line 320
  mask.ldv_33657.role = 3U;
#line 321
  val.i = 0U;
#line 321
  val.ldv_33657.role = (unsigned char )new_role;
#line 323
  goto ldv_44719;
  ldv_44722: 
#line 324
  r = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 328
  if (r == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 329
    val.ldv_33657.pdsk = 0U;
#line 330
    mask.ldv_33657.pdsk = 0U;
#line 331
    goto ldv_44719;
  } else {

  }
#line 334
  if ((r == -2 && force != 0) && ((int )mdev->state.ldv_33657.disk <= 7 && (int )mdev->state.ldv_33657.disk > 3)) {
#line 337
    mask.ldv_33657.disk = 15U;
#line 338
    val.ldv_33657.disk = 8U;
#line 339
    forced = 1;
#line 340
    goto ldv_44719;
  } else {

  }
#line 343
  if ((r == -2 && (unsigned int )*((unsigned char *)mdev + 2013UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 345
    if (*((unsigned int *)mdev + 503UL) != 49152U) {
#line 345
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 345
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 345
      printk("<3>%s %s: ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n", tmp___0,
             tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
             345);
    } else {

    }
#line 346
    nps = drbd_try_outdate_peer(mdev);
#line 348
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 349
      val.ldv_33657.disk = 8U;
#line 350
      mask.ldv_33657.disk = 15U;
    } else {

    }
#line 353
    val.ldv_33657.pdsk = (unsigned char )nps;
#line 354
    mask.ldv_33657.pdsk = 15U;
#line 356
    goto ldv_44719;
  } else {

  }
#line 359
  if (r == 2) {
#line 360
    goto fail;
  } else {

  }
#line 361
  if (r == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 362
    nps = drbd_try_outdate_peer(mdev);
#line 364
    if (force != 0 && (unsigned int )nps > 5U) {
#line 365
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 365
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 365
      printk("<4>%s %s: Forced into split brain situation!\n", tmp___2, tmp___1);
#line 366
      nps = D_OUTDATED;
    } else {

    }
#line 369
    mask.ldv_33657.pdsk = 15U;
#line 370
    val.ldv_33657.pdsk = (unsigned char )nps;
#line 372
    goto ldv_44719;
  } else {

  }
#line 374
  if (r == -1) {
#line 377
    tmp___3 = get_current();
#line 377
    tmp___3->state = 1L;
#line 378
    schedule_timeout((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 379
    if (try < max_tries) {
#line 380
      try = max_tries + -1;
    } else {

    }
#line 381
    goto ldv_44719;
  } else {

  }
#line 383
  if (r <= 0) {
#line 384
    r = _drbd_request_state(mdev, mask, val, 6);
#line 386
    if (r <= 0) {
#line 387
      goto fail;
    } else {

    }
  } else {

  }
#line 389
  goto ldv_44721;
  ldv_44719: 
#line 323
  tmp___4 = try;
#line 323
  try = try + 1;
#line 323
  if (tmp___4 < max_tries) {
#line 324
    goto ldv_44722;
  } else {

  }
  ldv_44721: ;
#line 392
  if (r <= 0) {
#line 393
    goto fail;
  } else {

  }
#line 395
  if (forced != 0) {
#line 396
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 396
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 396
    printk("<4>%s %s: Forced to consider local data as UpToDate!\n", tmp___6, tmp___5);
  } else {

  }
#line 399
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 399
  if (tmp___7 == 0) {
#line 399
    goto ldv_44723;
  } else {

  }
#line 399
  tmp___8 = get_current();
#line 399
  __wait.flags = 0U;
#line 399
  __wait.private = (void *)tmp___8;
#line 399
  __wait.func = & autoremove_wake_function;
#line 399
  __wait.task_list.next = & __wait.task_list;
#line 399
  __wait.task_list.prev = & __wait.task_list;
  ldv_44726: 
#line 399
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 399
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 399
  if (tmp___9 == 0) {
#line 399
    goto ldv_44725;
  } else {

  }
#line 399
  schedule();
#line 399
  goto ldv_44726;
  ldv_44725: 
#line 399
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44723: ;
#line 401
  if ((unsigned int )new_role == 2U) {
#line 402
    set_disk_ro(mdev->vdisk, 1);
#line 403
    tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 403
    if (tmp___10 != 0) {
#line 404
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 405
      put_ldev(mdev);
    } else {

    }
  } else {
#line 408
    tmp___11 = get_net_conf(mdev);
#line 408
    if (tmp___11 != 0) {
#line 409
      (mdev->net_conf)->want_lose = 0U;
#line 410
      put_net_conf(mdev);
    } else {

    }
#line 412
    set_disk_ro(mdev->vdisk, 0);
#line 413
    tmp___12 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 413
    if (tmp___12 != 0) {
#line 414
      if ((((int )mdev->state.ldv_33657.conn <= 9 || (int )mdev->state.ldv_33657.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 417
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 419
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 420
      put_ldev(mdev);
    } else {

    }
  }
#line 424
  if ((unsigned int )new_role == 2U) {
#line 424
    tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 424
    if (tmp___13 != 0) {
#line 425
      drbd_al_to_on_disk_bm(mdev);
#line 426
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 429
  if ((int )mdev->state.ldv_33657.conn > 8) {
#line 431
    if (forced != 0) {
#line 432
      drbd_send_uuids(mdev);
    } else {

    }
#line 433
    drbd_send_state(mdev);
  } else {

  }
#line 436
  drbd_md_sync(mdev);
#line 438
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 440
  ldv_mutex_unlock_190(& mdev->state_mutex);
#line 441
  return (r);
}
}
#line 445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;

  {
#line 450
  memset((void *)(& primary_args), 0, 4UL);
#line 451
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 451
  if (tmp == 0) {
#line 452
    reply->ret_code = 126;
#line 453
    return (0);
  } else {

  }
#line 456
  reply->ret_code = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 459
  return (0);
}
}
#line 462 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 


  {
#line 465
  reply->ret_code = drbd_set_role(mdev, R_SECONDARY, 0);
#line 467
  return (0);
}
}
#line 472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 475
  md_size_sect = 0UL;
#line 476
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 479
  bdev->md.md_size_sect = 262144U;
#line 480
  tmp = drbd_md_ss__(mdev, bdev);
#line 480
  bdev->md.md_offset = (u64 )tmp;
#line 481
  bdev->md.al_offset = 8;
#line 482
  bdev->md.bm_offset = 72;
#line 483
  goto ldv_44744;
  case -2: 
#line 486
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 486
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 487
  bdev->md.md_offset = 0ULL;
#line 488
  bdev->md.al_offset = 8;
#line 489
  bdev->md.bm_offset = 72;
#line 490
  goto ldv_44744;
  case -1: ;
  case -3: 
#line 493
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 493
  bdev->md.md_offset = (u64 )tmp___1;
#line 495
  bdev->md.al_offset = -64;
#line 497
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 498
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 499
  md_size_sect = md_size_sect >> 15;
#line 500
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 504
  md_size_sect = md_size_sect + 72UL;
#line 506
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 508
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 509
  goto ldv_44744;
  }
  ldv_44744: ;
#line 512
  return;
}
}
#line 513 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 516
  units[0] = 75;
#line 516
  units[1] = 77;
#line 516
  units[2] = 71;
#line 516
  units[3] = 84;
#line 516
  units[4] = 80;
#line 516
  units[5] = 69;
#line 517
  base = 0;
#line 518
  goto ldv_44755;
  ldv_44754: 
#line 520
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 521
  base = base + 1;
  ldv_44755: ;
#line 518
  if (size > 9999ULL) {
#line 519
    goto ldv_44754;
  } else {

  }
#line 523
  sprintf(buf, "%lu %cB", (long )size, (int )units[base]);
#line 525
  return (buf);
}
}
#line 541 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 543
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 544
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 544
  if (tmp == 0) {
#line 544
    goto ldv_44760;
  } else {

  }
#line 544
  tmp___0 = get_current();
#line 544
  __wait.flags = 0U;
#line 544
  __wait.private = (void *)tmp___0;
#line 544
  __wait.func = & autoremove_wake_function;
#line 544
  __wait.task_list.next = & __wait.task_list;
#line 544
  __wait.task_list.prev = & __wait.task_list;
  ldv_44763: 
#line 544
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 544
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 544
  if (tmp___1 == 0) {
#line 544
    goto ldv_44762;
  } else {

  }
#line 544
  schedule();
#line 544
  goto ldv_44763;
  ldv_44762: 
#line 544
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44760: ;
#line 547
  return;
}
}
#line 547 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 549
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 550
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 551
  return;
}
}
#line 560 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  char *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;

  {
#line 568
  rv = 0;
#line 579
  drbd_suspend_io(mdev);
#line 582
  tmp = lc_try_lock(mdev->act_log);
#line 582
  if (tmp != 0) {
#line 582
    goto ldv_44779;
  } else {

  }
#line 582
  tmp___0 = get_current();
#line 582
  __wait.flags = 0U;
#line 582
  __wait.private = (void *)tmp___0;
#line 582
  __wait.func = & autoremove_wake_function;
#line 582
  __wait.task_list.next = & __wait.task_list;
#line 582
  __wait.task_list.prev = & __wait.task_list;
  ldv_44782: 
#line 582
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 582
  tmp___1 = lc_try_lock(mdev->act_log);
#line 582
  if (tmp___1 != 0) {
#line 582
    goto ldv_44781;
  } else {

  }
#line 582
  schedule();
#line 582
  goto ldv_44782;
  ldv_44781: 
#line 582
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44779: 
#line 584
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 585
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 586
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 589
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 591
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 593
  tmp___11 = drbd_get_capacity(mdev->this_bdev);
#line 593
  if (tmp___11 != size) {
#line 593
    goto _L;
  } else {
#line 593
    tmp___12 = drbd_bm_capacity(mdev);
#line 593
    if (tmp___12 != size) {
      _L: /* CIL Label */ 
#line 596
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 597
      tmp___7 = __builtin_expect(err != 0, 0L);
#line 597
      if (tmp___7 != 0L) {
#line 599
        tmp___2 = drbd_bm_capacity(mdev);
#line 599
        size = tmp___2 >> 1;
#line 600
        if (size == 0UL) {
#line 601
          tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 601
          tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 601
          printk("<3>%s %s: OUT OF MEMORY! Could not allocate bitmap!\n", tmp___4,
                 tmp___3);
        } else {
#line 604
          tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 604
          tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 604
          printk("<3>%s %s: BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                 tmp___6, tmp___5, size);
        }
#line 608
        rv = dev_size_error;
      } else {

      }
#line 611
      drbd_set_my_capacity(mdev, size);
#line 612
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 613
      tmp___8 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 613
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 613
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 613
      printk("<6>%s %s: size = %s (%llu KB)\n", tmp___10, tmp___9, tmp___8, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 616
  if ((int )rv == -1) {
#line 617
    goto out;
  } else {

  }
#line 619
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 621
  tmp___13 = drbd_md_first_sector(mdev->ldev);
#line 621
  md_moved = tmp___13 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 624
  if (la_size_changed != 0 || md_moved != 0) {
#line 625
    drbd_al_shrink(mdev);
#line 626
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 626
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 626
    printk("<6>%s %s: Writing the whole bitmap, %s\n", tmp___15, tmp___14, la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 629
    tmp___16 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed");
#line 629
    rv = (enum determine_dev_size )tmp___16;
#line 630
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 633
  if (size > la_size) {
#line 634
    rv = grew;
  } else {

  }
#line 635
  if (size < la_size) {
#line 636
    rv = shrunk;
  } else {

  }
  out: 
#line 638
  lc_unlock(mdev->act_log);
#line 639
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 640
  drbd_resume_io(mdev);
#line 642
  return (rv);
}
}
#line 646 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  char const   *tmp ;
  char const   *tmp___0 ;
  sector_t __min1 ;
  sector_t __min2 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 648
  p_size = mdev->p_size;
#line 649
  la_size = (sector_t )bdev->md.la_size_sect;
#line 651
  u_size = (sector_t )bdev->dc.disk_size;
#line 652
  size = 0UL;
#line 654
  m_size = drbd_get_max_capacity___1(bdev);
#line 656
  if ((int )mdev->state.ldv_33657.conn <= 9 && assume_peer_has_space != 0) {
#line 657
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 657
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 657
    printk("<4>%s %s: Resize while not connected was forced by the user!\n", tmp___0,
           tmp);
#line 658
    p_size = m_size;
  } else {

  }
#line 661
  if (p_size != 0UL && m_size != 0UL) {
#line 662
    __min1 = p_size;
#line 662
    __min2 = m_size;
#line 662
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 664
  if (la_size != 0UL) {
#line 665
    size = la_size;
#line 666
    if (m_size != 0UL && m_size < size) {
#line 667
      size = m_size;
    } else {

    }
#line 668
    if (p_size != 0UL && p_size < size) {
#line 669
      size = p_size;
    } else {

    }
  } else {
#line 671
    if (m_size != 0UL) {
#line 672
      size = m_size;
    } else {

    }
#line 673
    if (p_size != 0UL) {
#line 674
      size = p_size;
    } else {

    }
  }
#line 678
  if (size == 0UL) {
#line 679
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 679
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 679
    printk("<3>%s %s: Both nodes diskless!\n", tmp___2, tmp___1);
  } else {

  }
#line 681
  if (u_size != 0UL) {
#line 682
    if (u_size > size) {
#line 683
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 683
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 683
      printk("<3>%s %s: Requested disk size is too big (%lu > %lu)\n", tmp___4, tmp___3,
             u_size >> 1, size >> 1);
    } else {
#line 686
      size = u_size;
    }
  } else {

  }
#line 689
  return (size);
}
}
#line 700 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 707
  _b = mdev->sync_conf.al_extents <= 6;
#line 707
  if (_b != 0) {
#line 707
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 707
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 707
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           707);
  } else {

  }
#line 707
  if (_b != 0) {
#line 708
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 710
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 712
    return (0);
  } else {

  }
#line 714
  in_use = 0U;
#line 715
  t = mdev->act_log;
#line 716
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 719
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 720
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 720
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 720
    printk("<3>%s %s: Cannot allocate act_log lru!\n", tmp___2, tmp___1);
#line 721
    return (-12);
  } else {

  }
#line 723
  spin_lock_irq(& mdev->al_lock);
#line 724
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 725
    i = 0;
#line 725
    goto ldv_44810;
    ldv_44809: 
#line 726
    e = lc_element_by_index(t, (unsigned int )i);
#line 727
    if (e->refcnt != 0U) {
#line 728
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 728
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 728
      printk("<3>%s %s: refcnt(%d)==%d\n", tmp___4, tmp___3, e->lc_number, e->refcnt);
    } else {

    }
#line 730
    in_use = e->refcnt + in_use;
#line 725
    i = i + 1;
    ldv_44810: ;
#line 725
    if ((unsigned int )i < t->nr_elements) {
#line 726
      goto ldv_44809;
    } else {

    }

  } else {

  }
#line 733
  if (in_use == 0U) {
#line 734
    mdev->act_log = n;
  } else {

  }
#line 735
  spin_unlock_irq(& mdev->al_lock);
#line 736
  if (in_use != 0U) {
#line 737
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 737
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 737
    printk("<3>%s %s: Activity log still in use!\n", tmp___6, tmp___5);
#line 738
    lc_destroy(n);
#line 739
    return (-16);
  } else
#line 741
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 742
    lc_destroy(t);
  } else {

  }
#line 744
  drbd_md_mark_dirty(mdev);
#line 745
  return (0);
}
}
#line 748 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) 
{ 
  struct request_queue *q ;
  struct request_queue *b ;
  int max_segments ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned short tmp___0 ;
  unsigned int _min2 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 750
  q = mdev->rq_queue;
#line 751
  b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 752
  max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 754
  tmp = queue_max_sectors(b);
#line 754
  tmp___0 = queue_logical_block_size(b);
#line 754
  _min1 = tmp * (unsigned int )tmp___0;
#line 754
  _min2 = max_seg_s;
#line 754
  max_seg_s = _min1 < _min2 ? _min1 : _min2;
#line 756
  blk_queue_max_hw_sectors(q, max_seg_s >> 9);
#line 757
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 758
  blk_queue_max_segment_size(q, max_seg_s);
#line 759
  blk_queue_logical_block_size(q, 512);
#line 760
  blk_queue_segment_boundary(q, 4095UL);
#line 761
  blk_stack_limits(& q->limits, & b->limits, 0UL);
#line 763
  if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 764
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 764
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 764
    printk("<4>%s %s: Backing device\'s merge_bvec_fn() = %p\n", tmp___2, tmp___1,
           b->merge_bvec_fn);
  } else {

  }
#line 766
  tmp___3 = queue_max_segment_size(q);
#line 766
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 766
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 766
  printk("<6>%s %s: max_segment_size ( = BIO size ) = %u\n", tmp___5, tmp___4, tmp___3);
#line 768
  if (q->backing_dev_info.ra_pages != b->backing_dev_info.ra_pages) {
#line 769
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 769
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 769
    printk("<6>%s %s: Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
           tmp___7, tmp___6, q->backing_dev_info.ra_pages, b->backing_dev_info.ra_pages);
#line 772
    q->backing_dev_info.ra_pages = b->backing_dev_info.ra_pages;
  } else {

  }
#line 774
  return;
}
}
#line 782 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 784
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 784
  if (tmp == 0) {
#line 784
    goto ldv_44825;
  } else {

  }
#line 784
  tmp___0 = get_current();
#line 784
  __wait.flags = 0U;
#line 784
  __wait.private = (void *)tmp___0;
#line 784
  __wait.func = & autoremove_wake_function;
#line 784
  __wait.task_list.next = & __wait.task_list;
#line 784
  __wait.task_list.prev = & __wait.task_list;
  ldv_44828: 
#line 784
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 784
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 784
  if (tmp___1 == 0) {
#line 784
    goto ldv_44827;
  } else {

  }
#line 784
  schedule();
#line 784
  goto ldv_44828;
  ldv_44827: 
#line 784
  finish_wait(& mdev->state_wait, & __wait);
  ldv_44825: 
#line 785
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 785
  if (tmp___2 == 0) {
#line 785
    goto ldv_44829;
  } else {

  }
#line 785
  tmp___3 = get_current();
#line 785
  __wait___0.flags = 0U;
#line 785
  __wait___0.private = (void *)tmp___3;
#line 785
  __wait___0.func = & autoremove_wake_function;
#line 785
  __wait___0.task_list.next = & __wait___0.task_list;
#line 785
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_44832: 
#line 785
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 785
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 785
  if (tmp___4 == 0) {
#line 785
    goto ldv_44831;
  } else {

  }
#line 785
  schedule();
#line 785
  goto ldv_44832;
  ldv_44831: 
#line 785
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_44829: 
#line 786
  drbd_thread_start(& mdev->worker);
#line 787
  return;
}
}
#line 792 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 794
  spin_lock_irq(& mdev->req_lock);
#line 795
  if (((unsigned int )*((unsigned char *)mdev + 2013UL) == 0U && (unsigned int )*((unsigned short *)mdev + 1006UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2012UL) == 2U) {
#line 798
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 799
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 801
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 802
  spin_unlock_irq(& mdev->req_lock);
#line 803
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 804
  return;
}
}
#line 808 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_codes retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct inode *inode ;
  struct inode *inode2 ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  int rv ;
  int cp_discovered ;
  int logical_block_size ;
  void *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  sector_t tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  sector_t tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  sector_t tmp___17 ;
  sector_t tmp___18 ;
  sector_t tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___25 ;
  int tmp___26 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___27 ;
  int tmp___28 ;
  unsigned short tmp___29 ;
  struct page *page ;
  struct page *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  char const   *tmp___37 ;
  char const   *tmp___38 ;
  int tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;
  int tmp___42 ;
  sector_t tmp___43 ;
  int tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  char const   *tmp___51 ;
  char const   *tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 815
  nbc = 0;
#line 817
  resync_lru = 0;
#line 820
  cp_discovered = 0;
#line 823
  drbd_reconfig_start(mdev);
#line 826
  if ((int )mdev->state.ldv_33657.disk > 0) {
#line 827
    retcode = ERR_DISK_CONFIGURED;
#line 828
    goto fail;
  } else {

  }
#line 832
  tmp = kzalloc___2(408UL, 208U);
#line 832
  nbc = (struct drbd_backing_dev *)tmp;
#line 833
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 834
    retcode = ERR_NOMEM;
#line 835
    goto fail;
  } else {

  }
#line 838
  nbc->dc.disk_size = 0ULL;
#line 839
  nbc->dc.on_io_error = 0;
#line 840
  nbc->dc.fencing = 0;
#line 841
  nbc->dc.max_bio_bvecs = 0;
#line 843
  tmp___0 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 843
  if (tmp___0 == 0) {
#line 844
    retcode = ERR_MANDATORY_TAG;
#line 845
    goto fail;
  } else {

  }
#line 848
  if (nbc->dc.meta_dev_idx < -3) {
#line 849
    retcode = ERR_MD_IDX_INVALID;
#line 850
    goto fail;
  } else {

  }
#line 853
  nbc->lo_file = filp_open((char const   *)(& nbc->dc.backing_dev), 2, 0);
#line 854
  tmp___4 = IS_ERR((void const   *)nbc->lo_file);
#line 854
  if (tmp___4 != 0L) {
#line 855
    tmp___1 = PTR_ERR((void const   *)nbc->lo_file);
#line 855
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 855
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 855
    printk("<3>%s %s: open(\"%s\") failed with %ld\n", tmp___3, tmp___2, (unsigned char *)(& nbc->dc.backing_dev),
           tmp___1);
#line 857
    nbc->lo_file = 0;
#line 858
    retcode = ERR_OPEN_DISK;
#line 859
    goto fail;
  } else {

  }
#line 862
  inode = ((nbc->lo_file)->f_path.dentry)->d_inode;
#line 864
  if (((int )inode->i_mode & 61440) != 24576) {
#line 865
    retcode = ERR_DISK_NOT_BDEV;
#line 866
    goto fail;
  } else {

  }
#line 869
  nbc->md_file = filp_open((char const   *)(& nbc->dc.meta_dev), 2, 0);
#line 870
  tmp___8 = IS_ERR((void const   *)nbc->md_file);
#line 870
  if (tmp___8 != 0L) {
#line 871
    tmp___5 = PTR_ERR((void const   *)nbc->md_file);
#line 871
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 871
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 871
    printk("<3>%s %s: open(\"%s\") failed with %ld\n", tmp___7, tmp___6, (unsigned char *)(& nbc->dc.meta_dev),
           tmp___5);
#line 873
    nbc->md_file = 0;
#line 874
    retcode = ERR_OPEN_MD_DISK;
#line 875
    goto fail;
  } else {

  }
#line 878
  inode2 = ((nbc->md_file)->f_path.dentry)->d_inode;
#line 880
  if (((int )inode2->i_mode & 61440) != 24576) {
#line 881
    retcode = ERR_MD_NOT_BDEV;
#line 882
    goto fail;
  } else {

  }
#line 885
  nbc->backing_bdev = inode->ldv_22287.i_bdev;
#line 886
  tmp___9 = bd_claim(nbc->backing_bdev, (void *)mdev);
#line 886
  if (tmp___9 != 0) {
#line 887
    printk("<3>drbd: bd_claim(%p,%p); failed [%p;%p;%u]\n", nbc->backing_bdev, mdev,
           (nbc->backing_bdev)->bd_holder, ((nbc->backing_bdev)->bd_contains)->bd_holder,
           (nbc->backing_bdev)->bd_holders);
#line 892
    retcode = ERR_BDCLAIM_DISK;
#line 893
    goto fail;
  } else {

  }
#line 896
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 899
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 900
    retcode = ERR_NOMEM;
#line 901
    goto release_bdev_fail;
  } else {

  }
#line 911
  nbc->md_bdev = inode2->ldv_22287.i_bdev;
#line 912
  tmp___10 = bd_claim(nbc->md_bdev, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 912
  if (tmp___10 != 0) {
#line 914
    retcode = ERR_BDCLAIM_MD_DISK;
#line 915
    goto release_bdev_fail;
  } else {

  }
#line 918
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 921
    retcode = ERR_MD_IDX_INVALID;
#line 922
    goto release_bdev2_fail;
  } else {

  }
#line 926
  drbd_md_set_sector_offsets(mdev, nbc);
#line 928
  tmp___14 = drbd_get_max_capacity___1(nbc);
#line 928
  if ((unsigned long long )tmp___14 < nbc->dc.disk_size) {
#line 929
    tmp___11 = drbd_get_max_capacity___1(nbc);
#line 929
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 929
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 929
    printk("<3>%s %s: max capacity %llu smaller than disk size %llu\n", tmp___13,
           tmp___12, (unsigned long long )tmp___11, nbc->dc.disk_size);
#line 932
    retcode = ERR_DISK_TO_SMALL;
#line 933
    goto release_bdev2_fail;
  } else {

  }
#line 936
  if (nbc->dc.meta_dev_idx < 0) {
#line 937
    max_possible_sectors = 34359738368UL;
#line 939
    min_md_device_sectors = 2048UL;
  } else {
#line 941
    max_possible_sectors = 8587575296UL;
#line 942
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 945
  tmp___17 = drbd_get_capacity(nbc->md_bdev);
#line 945
  if (tmp___17 < min_md_device_sectors) {
#line 946
    retcode = ERR_MD_DISK_TO_SMALL;
#line 947
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 947
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 947
    printk("<4>%s %s: refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
           tmp___16, tmp___15, (unsigned long long )min_md_device_sectors);
#line 950
    goto release_bdev2_fail;
  } else {

  }
#line 955
  tmp___18 = drbd_get_max_capacity___1(nbc);
#line 955
  tmp___19 = drbd_get_capacity(mdev->this_bdev);
#line 955
  if (tmp___18 < tmp___19) {
#line 957
    retcode = ERR_DISK_TO_SMALL;
#line 958
    goto release_bdev2_fail;
  } else {

  }
#line 961
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 963
  if (nbc->known_size > max_possible_sectors) {
#line 964
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 964
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 964
    printk("<4>%s %s: ==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
           tmp___21, tmp___20, (unsigned long long )max_possible_sectors);
#line 967
    if (nbc->dc.meta_dev_idx >= 0) {
#line 968
      tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 968
      tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 968
      printk("<4>%s %s: ==>> using internal or flexible meta data may help <<==\n",
             tmp___23, tmp___22);
    } else {

    }
  } else {

  }
#line 972
  drbd_suspend_io(mdev);
#line 974
  tmp___24 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 974
  if (tmp___24 == 0) {
#line 974
    goto ldv_44857;
  } else {

  }
#line 974
  tmp___25 = get_current();
#line 974
  __wait.flags = 0U;
#line 974
  __wait.private = (void *)tmp___25;
#line 974
  __wait.func = & autoremove_wake_function;
#line 974
  __wait.task_list.next = & __wait.task_list;
#line 974
  __wait.task_list.prev = & __wait.task_list;
  ldv_44860: 
#line 974
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 974
  tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 974
  if (tmp___26 == 0) {
#line 974
    goto ldv_44859;
  } else {

  }
#line 974
  schedule();
#line 974
  goto ldv_44860;
  ldv_44859: 
#line 974
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44857: 
#line 976
  drbd_flush_workqueue(mdev);
#line 978
  val.i = 0U;
#line 978
  val.ldv_33657.disk = 1U;
#line 978
  mask.i = 0U;
#line 978
  mask.ldv_33657.disk = 15U;
#line 978
  tmp___27 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 978
  retcode = (enum drbd_ret_codes )tmp___27;
#line 979
  drbd_resume_io(mdev);
#line 980
  if ((unsigned int )retcode == 0U) {
#line 981
    goto release_bdev2_fail;
  } else {

  }
#line 983
  tmp___28 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 983
  if (tmp___28 == 0) {
#line 984
    goto force_diskless;
  } else {

  }
#line 986
  drbd_md_set_sector_offsets(mdev, nbc);
#line 989
  tmp___29 = bdev_logical_block_size(nbc->md_bdev);
#line 989
  logical_block_size = (int )tmp___29;
#line 990
  if (logical_block_size == 0) {
#line 991
    logical_block_size = 512;
  } else {

  }
#line 993
  if (logical_block_size != 512) {
#line 994
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 995
      tmp___30 = alloc_pages(16U, 0U);
#line 995
      page = tmp___30;
#line 996
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 997
        goto force_diskless_dec;
      } else {

      }
#line 999
      tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 999
      tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 999
      printk("<4>%s %s: Meta data\'s bdev logical_block_size = %d != %d\n", tmp___32,
             tmp___31, logical_block_size, 512);
#line 1001
      tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1001
      tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1001
      printk("<4>%s %s: Workaround engaged (has performance impact).\n", tmp___34,
             tmp___33);
#line 1003
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1007
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1008
    tmp___35 = drbd_bm_init(mdev);
#line 1008
    if (tmp___35 != 0) {
#line 1009
      retcode = ERR_NOMEM;
#line 1010
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1014
  tmp___36 = drbd_md_read(mdev, nbc);
#line 1014
  retcode = (enum drbd_ret_codes )tmp___36;
#line 1015
  if ((unsigned int )retcode != 101U) {
#line 1016
    goto force_diskless_dec;
  } else {

  }
#line 1018
  if (((int )mdev->state.ldv_33657.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1021
    tmp___37 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1021
    tmp___38 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1021
    printk("<3>%s %s: Can only attach to data with current UUID=%016llX\n", tmp___38,
           tmp___37, mdev->ed_uuid);
#line 1023
    retcode = ERR_DATA_NOT_CURRENT;
#line 1024
    goto force_diskless_dec;
  } else {

  }
#line 1028
  tmp___39 = drbd_check_al_size(mdev);
#line 1028
  if (tmp___39 != 0) {
#line 1029
    retcode = ERR_NOMEM;
#line 1030
    goto force_diskless_dec;
  } else {

  }
#line 1034
  tmp___42 = drbd_md_test_flag(nbc, 1);
#line 1034
  if (tmp___42 != 0) {
#line 1034
    tmp___43 = drbd_new_dev_size(mdev, nbc, 0);
#line 1034
    if ((unsigned long long )tmp___43 < nbc->md.la_size_sect) {
#line 1036
      tmp___40 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1036
      tmp___41 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1036
      printk("<4>%s %s: refusing to truncate a consistent device\n", tmp___41, tmp___40);
#line 1037
      retcode = ERR_DISK_TO_SMALL;
#line 1038
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1041
  tmp___44 = drbd_al_read_log(mdev, nbc);
#line 1041
  if (tmp___44 == 0) {
#line 1042
    retcode = ERR_IO_MD_DISK;
#line 1043
    goto force_diskless_dec;
  } else {

  }
#line 1048
  if ((unsigned int )*((unsigned char *)nbc + 388UL) != 0U) {
#line 1049
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1051
    clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1057
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1057
    tmp___45 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1057
    tmp___46 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1057
    printk("<3>%s %s: ASSERT( mdev->ldev == NULL ) in %s:%d\n", tmp___46, tmp___45,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           1057);
  } else {

  }
#line 1058
  mdev->ldev = nbc;
#line 1059
  mdev->resync = resync_lru;
#line 1060
  nbc = 0;
#line 1061
  resync_lru = 0;
#line 1063
  mdev->write_ordering = WO_bio_barrier;
#line 1064
  drbd_bump_write_ordering(mdev, WO_bio_barrier);
#line 1066
  tmp___47 = drbd_md_test_flag(mdev->ldev, 64);
#line 1066
  if (tmp___47 != 0) {
#line 1067
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1069
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1071
  tmp___48 = drbd_md_test_flag(mdev->ldev, 2);
#line 1071
  if (tmp___48 != 0) {
#line 1072
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1073
    cp_discovered = 1;
  } else {

  }
#line 1076
  mdev->send_cnt = 0U;
#line 1077
  mdev->recv_cnt = 0U;
#line 1078
  mdev->read_cnt = 0U;
#line 1079
  mdev->writ_cnt = 0U;
#line 1081
  drbd_setup_queue_param(mdev, 32768U);
#line 1097
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1098
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U) {
#line 1098
    tmp___49 = drbd_md_test_flag(mdev->ldev, 2);
#line 1098
    if (tmp___49 != 0) {
#line 1098
      tmp___50 = drbd_md_test_flag(mdev->ldev, 4);
#line 1098
      if (tmp___50 == 0) {
#line 1101
        set_bit(8U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1103
  dd = drbd_determin_dev_size(mdev, 0);
#line 1104
  if ((int )dd == -1) {
#line 1105
    retcode = ERR_NOMEM_BITMAP;
#line 1106
    goto force_diskless_dec;
  } else
#line 1107
  if ((int )dd == 2) {
#line 1108
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1110
  tmp___55 = drbd_md_test_flag(mdev->ldev, 8);
#line 1110
  if (tmp___55 != 0) {
#line 1111
    tmp___51 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1111
    tmp___52 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1111
    printk("<6>%s %s: Assuming that all blocks are out of sync (aka FullSync)\n",
           tmp___52, tmp___51);
#line 1113
    tmp___53 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching");
#line 1113
    if (tmp___53 != 0) {
#line 1114
      retcode = ERR_IO_MD_DISK;
#line 1115
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1118
    tmp___54 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching");
#line 1118
    if (tmp___54 < 0) {
#line 1119
      retcode = ERR_IO_MD_DISK;
#line 1120
      goto force_diskless_dec;
    } else {

    }
  }
#line 1124
  if (cp_discovered != 0) {
#line 1125
    drbd_al_apply_to_bm(mdev);
#line 1126
    drbd_al_to_on_disk_bm(mdev);
  } else {

  }
#line 1129
  spin_lock_irq(& mdev->req_lock);
#line 1130
  os = mdev->state;
#line 1131
  ns.i = os.i;
#line 1137
  tmp___57 = drbd_md_test_flag(mdev->ldev, 1);
#line 1137
  if (tmp___57 != 0) {
#line 1138
    tmp___56 = drbd_md_test_flag(mdev->ldev, 16);
#line 1138
    if (tmp___56 != 0) {
#line 1139
      ns.ldv_33657.disk = 7U;
    } else {
#line 1141
      ns.ldv_33657.disk = 5U;
    }
  } else {
#line 1143
    ns.ldv_33657.disk = 4U;
  }
#line 1146
  tmp___58 = drbd_md_test_flag(mdev->ldev, 32);
#line 1146
  if (tmp___58 != 0) {
#line 1147
    ns.ldv_33657.pdsk = 5U;
  } else {

  }
#line 1149
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1151
    ns.ldv_33657.disk = 8U;
  } else {

  }
#line 1160
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U) {
#line 1161
    mdev->new_state_tmp.i = ns.i;
#line 1162
    ns.i = os.i;
#line 1163
    ns.ldv_33657.disk = 3U;
  } else {

  }
#line 1166
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1167
  ns = mdev->state;
#line 1168
  spin_unlock_irq(& mdev->req_lock);
#line 1170
  if (rv <= 0) {
#line 1171
    goto force_diskless_dec;
  } else {

  }
#line 1173
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 1174
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1176
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1178
  drbd_md_mark_dirty(mdev);
#line 1179
  drbd_md_sync(mdev);
#line 1181
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1182
  put_ldev(mdev);
#line 1183
  reply->ret_code = (int )retcode;
#line 1184
  drbd_reconfig_done(mdev);
#line 1185
  return (0);
  force_diskless_dec: 
#line 1188
  put_ldev(mdev);
  force_diskless: 
#line 1190
  val___0.i = 0U;
#line 1190
  val___0.ldv_33657.disk = 0U;
#line 1190
  mask___0.i = 0U;
#line 1190
  mask___0.ldv_33657.disk = 15U;
#line 1190
  drbd_force_state(mdev, mask___0, val___0);
#line 1191
  drbd_md_sync(mdev);
  release_bdev2_fail: ;
#line 1193
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1194
    bd_release(nbc->md_bdev);
  } else {

  }
  release_bdev_fail: ;
#line 1196
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1197
    bd_release(nbc->backing_bdev);
  } else {

  }
  fail: ;
#line 1199
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1200
    if ((unsigned long )nbc->lo_file != (unsigned long )((struct file *)0)) {
#line 1201
      fput(nbc->lo_file);
    } else {

    }
#line 1202
    if ((unsigned long )nbc->md_file != (unsigned long )((struct file *)0)) {
#line 1203
      fput(nbc->md_file);
    } else {

    }
#line 1204
    kfree((void const   *)nbc);
  } else {

  }
#line 1206
  lc_destroy(resync_lru);
#line 1208
  reply->ret_code = (int )retcode;
#line 1209
  drbd_reconfig_done(mdev);
#line 1210
  return (0);
}
}
#line 1213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1216
  val.i = 0U;
#line 1216
  val.ldv_33657.disk = 0U;
#line 1216
  mask.i = 0U;
#line 1216
  mask.ldv_33657.disk = 15U;
#line 1216
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1217
  return (0);
}
}
#line 1220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_codes retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  struct crypto_tfm *tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  unsigned int tmp___13 ;
  int tmp___14 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___15 ;

  {
#line 1225
  new_conf = 0;
#line 1226
  tfm = 0;
#line 1227
  integrity_w_tfm = 0;
#line 1228
  integrity_r_tfm = 0;
#line 1229
  new_tl_hash = 0;
#line 1230
  new_ee_hash = 0;
#line 1233
  int_dig_out = 0;
#line 1234
  int_dig_in = 0;
#line 1235
  int_dig_vv = 0;
#line 1238
  drbd_reconfig_start(mdev);
#line 1240
  if ((int )mdev->state.ldv_33657.conn > 0) {
#line 1241
    retcode = ERR_NET_CONFIGURED;
#line 1242
    goto fail;
  } else {

  }
#line 1246
  tmp = kzalloc___2(532UL, 208U);
#line 1246
  new_conf = (struct net_conf *)tmp;
#line 1247
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1248
    retcode = ERR_NOMEM;
#line 1249
    goto fail;
  } else {

  }
#line 1252
  new_conf->timeout = 60;
#line 1253
  new_conf->try_connect_int = 10;
#line 1254
  new_conf->ping_int = 10;
#line 1255
  new_conf->max_epoch_size = 2048;
#line 1256
  new_conf->max_buffers = 2048;
#line 1257
  new_conf->unplug_watermark = 128;
#line 1258
  new_conf->sndbuf_size = 0;
#line 1259
  new_conf->rcvbuf_size = 0;
#line 1260
  new_conf->ko_count = 0;
#line 1261
  new_conf->after_sb_0p = 0;
#line 1262
  new_conf->after_sb_1p = 0;
#line 1263
  new_conf->after_sb_2p = 0;
#line 1264
  new_conf->want_lose = 0U;
#line 1265
  new_conf->two_primaries = 0U;
#line 1266
  new_conf->wire_protocol = 3;
#line 1267
  new_conf->ping_timeo = 5;
#line 1268
  new_conf->rr_conflict = 0;
#line 1270
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1270
  if (tmp___0 == 0) {
#line 1271
    retcode = ERR_MANDATORY_TAG;
#line 1272
    goto fail;
  } else {

  }
#line 1275
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && new_conf->wire_protocol != 3) {
#line 1277
    retcode = ERR_NOT_PROTO_C;
#line 1278
    goto fail;
  } else {

  }
#line 1281
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 528UL) != 0U) {
#line 1282
    retcode = ERR_DISCARD;
#line 1283
    goto fail;
  } else {

  }
#line 1286
  retcode = NO_ERROR;
#line 1288
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1289
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1290
  i = 0;
#line 1290
  goto ldv_44906;
  ldv_44905: 
#line 1291
  odev = minor_to_mdev((unsigned int )i);
#line 1292
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1293
    goto ldv_44904;
  } else {

  }
#line 1294
  tmp___3 = get_net_conf(odev);
#line 1294
  if (tmp___3 != 0) {
#line 1295
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1296
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1296
      tmp___1 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1296
      if (tmp___1 == 0) {
#line 1298
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1300
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1301
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1301
      tmp___2 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1301
      if (tmp___2 == 0) {
#line 1303
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1305
    put_net_conf(odev);
#line 1306
    if ((unsigned int )retcode != 101U) {
#line 1307
      goto fail;
    } else {

    }
  } else {

  }
  ldv_44904: 
#line 1290
  i = i + 1;
  ldv_44906: ;
#line 1290
  if ((unsigned int )i < minor_count) {
#line 1291
    goto ldv_44905;
  } else {

  }

#line 1311
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1312
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1314
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1315
    tmp___4 = IS_ERR((void const   *)tfm);
#line 1315
    if (tmp___4 != 0L) {
#line 1316
      tfm = 0;
#line 1317
      retcode = ERR_AUTH_ALG;
#line 1318
      goto fail;
    } else {

    }
#line 1321
    tmp___5 = crypto_hash_tfm(tfm);
#line 1321
    tmp___6 = drbd_crypto_is_hash(tmp___5);
#line 1321
    if (tmp___6 == 0) {
#line 1322
      retcode = ERR_AUTH_ALG_ND;
#line 1323
      goto fail;
    } else {

    }
  } else {

  }
#line 1327
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1328
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1329
    tmp___7 = IS_ERR((void const   *)integrity_w_tfm);
#line 1329
    if (tmp___7 != 0L) {
#line 1330
      integrity_w_tfm = 0;
#line 1331
      retcode = ERR_INTEGRITY_ALG;
#line 1332
      goto fail;
    } else {

    }
#line 1335
    tmp___8 = crypto_hash_tfm(integrity_w_tfm);
#line 1335
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1335
    if (tmp___9 == 0) {
#line 1336
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1337
      goto fail;
    } else {

    }
#line 1340
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1341
    tmp___10 = IS_ERR((void const   *)integrity_r_tfm);
#line 1341
    if (tmp___10 != 0L) {
#line 1342
      integrity_r_tfm = 0;
#line 1343
      retcode = ERR_INTEGRITY_ALG;
#line 1344
      goto fail;
    } else {

    }
  } else {

  }
#line 1348
  ns = new_conf->max_epoch_size / 8;
#line 1349
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1350
    tmp___11 = kzalloc___2((unsigned long )ns * 8UL, 208U);
#line 1350
    new_tl_hash = (struct hlist_head *)tmp___11;
#line 1351
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1352
      retcode = ERR_NOMEM;
#line 1353
      goto fail;
    } else {

    }
  } else {

  }
#line 1357
  ns = new_conf->max_buffers / 8;
#line 1358
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1359
    tmp___12 = kzalloc___2((unsigned long )ns * 8UL, 208U);
#line 1359
    new_ee_hash = (struct hlist_head *)tmp___12;
#line 1360
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1361
      retcode = ERR_NOMEM;
#line 1362
      goto fail;
    } else {

    }
  } else {

  }
#line 1366
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1368
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1369
    tmp___13 = crypto_hash_digestsize(integrity_w_tfm);
#line 1369
    i = (int )tmp___13;
#line 1370
    int_dig_out = kmalloc___5((size_t )i, 208U);
#line 1371
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1372
      retcode = ERR_NOMEM;
#line 1373
      goto fail;
    } else {

    }
#line 1375
    int_dig_in = kmalloc___5((size_t )i, 208U);
#line 1376
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1377
      retcode = ERR_NOMEM;
#line 1378
      goto fail;
    } else {

    }
#line 1380
    int_dig_vv = kmalloc___5((size_t )i, 208U);
#line 1381
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1382
      retcode = ERR_NOMEM;
#line 1383
      goto fail;
    } else {

    }
  } else {

  }
#line 1387
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1388
    tmp___14 = drbd_bm_init(mdev);
#line 1388
    if (tmp___14 != 0) {
#line 1389
      retcode = ERR_NOMEM;
#line 1390
      goto fail;
    } else {

    }
  } else {

  }
#line 1394
  spin_lock_irq(& mdev->req_lock);
#line 1395
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1396
    retcode = ERR_NET_CONFIGURED;
#line 1397
    spin_unlock_irq(& mdev->req_lock);
#line 1398
    goto fail;
  } else {

  }
#line 1400
  mdev->net_conf = new_conf;
#line 1402
  mdev->send_cnt = 0U;
#line 1403
  mdev->recv_cnt = 0U;
#line 1405
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1406
    kfree((void const   *)mdev->tl_hash);
#line 1407
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1408
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1411
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1412
    kfree((void const   *)mdev->ee_hash);
#line 1413
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1414
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1417
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1418
  mdev->cram_hmac_tfm = tfm;
#line 1420
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1421
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1423
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1424
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1426
  kfree((void const   *)mdev->int_dig_out);
#line 1427
  kfree((void const   *)mdev->int_dig_in);
#line 1428
  kfree((void const   *)mdev->int_dig_vv);
#line 1429
  mdev->int_dig_out = int_dig_out;
#line 1430
  mdev->int_dig_in = int_dig_in;
#line 1431
  mdev->int_dig_vv = int_dig_vv;
#line 1432
  spin_unlock_irq(& mdev->req_lock);
#line 1434
  val.i = 0U;
#line 1434
  val.ldv_33657.conn = 2U;
#line 1434
  mask.i = 0U;
#line 1434
  mask.ldv_33657.conn = 31U;
#line 1434
  tmp___15 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1434
  retcode = (enum drbd_ret_codes )tmp___15;
#line 1436
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1437
  reply->ret_code = (int )retcode;
#line 1438
  drbd_reconfig_done(mdev);
#line 1439
  return (0);
  fail: 
#line 1442
  kfree((void const   *)int_dig_out);
#line 1443
  kfree((void const   *)int_dig_in);
#line 1444
  kfree((void const   *)int_dig_vv);
#line 1445
  crypto_free_hash(tfm);
#line 1446
  crypto_free_hash(integrity_w_tfm);
#line 1447
  crypto_free_hash(integrity_r_tfm);
#line 1448
  kfree((void const   *)new_tl_hash);
#line 1449
  kfree((void const   *)new_ee_hash);
#line 1450
  kfree((void const   *)new_conf);
#line 1452
  reply->ret_code = (int )retcode;
#line 1453
  drbd_reconfig_done(mdev);
#line 1454
  return (0);
}
}
#line 1457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1462
  val.i = 0U;
#line 1462
  val.ldv_33657.conn = 1U;
#line 1462
  mask.i = 0U;
#line 1462
  mask.ldv_33657.conn = 31U;
#line 1462
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1464
  if (retcode == 2) {
#line 1465
    goto done;
  } else
#line 1466
  if (retcode == -9) {
#line 1467
    goto done;
  } else
#line 1468
  if (retcode == -7) {
#line 1471
    val___0.i = 0U;
#line 1471
    val___0.ldv_33657.conn = 1U;
#line 1471
    val___0.ldv_33657.pdsk = 5U;
#line 1470
    mask___0.i = 0U;
#line 1470
    mask___0.ldv_33657.conn = 31U;
#line 1471
    mask___0.ldv_33657.pdsk = 15U;
#line 1471
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1472
  if (retcode == -10) {
#line 1475
    val___1.i = 0U;
#line 1475
    val___1.ldv_33657.conn = 1U;
#line 1475
    val___1.ldv_33657.disk = 5U;
#line 1474
    mask___1.i = 0U;
#line 1474
    mask___1.ldv_33657.conn = 31U;
#line 1475
    mask___1.ldv_33657.disk = 15U;
#line 1475
    retcode = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1477
    if (retcode == -11 || retcode == -16) {
#line 1478
      val___2.i = 0U;
#line 1478
      val___2.ldv_33657.conn = 1U;
#line 1478
      mask___2.i = 0U;
#line 1478
      mask___2.ldv_33657.conn = 31U;
#line 1478
      drbd_force_state(mdev, mask___2, val___2);
#line 1479
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1483
  if (retcode <= 0) {
#line 1484
    goto fail;
  } else {

  }
#line 1486
  __ret = 0;
#line 1486
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 16U) {
#line 1486
    tmp = get_current();
#line 1486
    __wait.flags = 0U;
#line 1486
    __wait.private = (void *)tmp;
#line 1486
    __wait.func = & autoremove_wake_function;
#line 1486
    __wait.task_list.next = & __wait.task_list;
#line 1486
    __wait.task_list.prev = & __wait.task_list;
    ldv_44940: 
#line 1486
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1486
    if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 16U) {
#line 1486
      goto ldv_44938;
    } else {

    }
#line 1486
    tmp___0 = get_current();
#line 1486
    tmp___1 = signal_pending(tmp___0);
#line 1486
    if (tmp___1 == 0) {
#line 1486
      schedule();
#line 1486
      goto ldv_44939;
    } else {

    }
#line 1486
    __ret = -512;
#line 1486
    goto ldv_44938;
    ldv_44939: ;
#line 1486
    goto ldv_44940;
    ldv_44938: 
#line 1486
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1486
  if (__ret != 0) {
#line 1490
    retcode = 129;
#line 1491
    goto fail;
  } else {

  }
  done: 
#line 1495
  retcode = 101;
  fail: 
#line 1497
  drbd_md_sync(mdev);
#line 1498
  reply->ret_code = retcode;
#line 1499
  return (0);
}
}
#line 1502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1506
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1506
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1506
  printk("<6>%s %s: Resync of new storage after online grow\n", tmp___0, tmp);
#line 1507
  if ((int )mdev->state.ldv_33657.role != (int )mdev->state.ldv_33657.peer) {
#line 1508
    iass = (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U;
  } else {
#line 1510
    iass = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1512
  if (iass != 0) {
#line 1513
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1515
    val.i = 0U;
#line 1515
    val.ldv_33657.conn = 15U;
#line 1515
    mask.i = 0U;
#line 1515
    mask.ldv_33657.conn = 31U;
#line 1515
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1517
  return;
}
}
#line 1518 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1522
  retcode = 101;
#line 1526
  memset((void *)(& rs), 0, 16UL);
#line 1527
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1527
  if (tmp == 0) {
#line 1528
    retcode = 126;
#line 1529
    goto fail;
  } else {

  }
#line 1532
  if ((int )mdev->state.ldv_33657.conn > 10) {
#line 1533
    retcode = 130;
#line 1534
    goto fail;
  } else {

  }
#line 1537
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 2U && (unsigned int )*((unsigned char *)mdev + 2012UL) == 8U) {
#line 1539
    retcode = 131;
#line 1540
    goto fail;
  } else {

  }
#line 1543
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1543
  if (tmp___0 == 0) {
#line 1544
    retcode = 138;
#line 1545
    goto fail;
  } else {

  }
#line 1548
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1549
    retcode = 153;
#line 1550
    goto fail;
  } else {

  }
#line 1553
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1553
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1554
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1556
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1557
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1558
  dd = drbd_determin_dev_size(mdev, ddsf);
#line 1559
  drbd_md_sync(mdev);
#line 1560
  put_ldev(mdev);
#line 1561
  if ((int )dd == -1) {
#line 1562
    retcode = 140;
#line 1563
    goto fail;
  } else {

  }
#line 1566
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U) {
#line 1567
    if ((int )dd == 2) {
#line 1568
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1570
    drbd_send_uuids(mdev);
#line 1571
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1575
  reply->ret_code = retcode;
#line 1576
  return (0);
}
}
#line 1579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int _b ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int _b___0 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int tmp___18 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  bool tmp___22 ;
  int tmp___23 ;

  {
#line 1582
  retcode = 101;
#line 1586
  verify_tfm = 0;
#line 1587
  csums_tfm = 0;
#line 1591
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1591
  if (tmp) {
#line 1591
    tmp___0 = 0;
  } else {
#line 1591
    tmp___0 = 1;
  }
#line 1591
  if (tmp___0) {
#line 1592
    retcode = 122;
#line 1593
    goto fail;
  } else {

  }
#line 1596
  if ((nlp->flags & 2) != 0) {
#line 1597
    memset((void *)(& sc), 0, 204UL);
#line 1598
    sc.rate = 250;
#line 1599
    sc.after = -1;
#line 1600
    sc.al_extents = 127;
#line 1601
    sc.dp_volume = 16384;
#line 1602
    sc.dp_interval = 5;
#line 1603
    sc.throttle_th = 20;
#line 1604
    sc.hold_off_th = 100;
  } else {
#line 1606
    __len = 204UL;
#line 1606
    if (__len > 63UL) {
#line 1606
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1606
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1608
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1608
  if (tmp___1 == 0) {
#line 1609
    retcode = 126;
#line 1610
    goto fail;
  } else {

  }
#line 1614
  rsr = (((unsigned int )*((unsigned short *)mdev + 1006UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1006UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 1006UL) == 336U;
#line 1619
  if (rsr != 0) {
#line 1619
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1619
    if (tmp___2 != 0) {
#line 1620
      retcode = 148;
#line 1621
      goto fail;
    } else {

    }
  } else {

  }
#line 1624
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1625
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1626
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1626
    if (tmp___3 != 0L) {
#line 1627
      csums_tfm = 0;
#line 1628
      retcode = 144;
#line 1629
      goto fail;
    } else {

    }
#line 1632
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1632
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1632
    if (tmp___5 == 0) {
#line 1633
      retcode = 145;
#line 1634
      goto fail;
    } else {

    }
  } else {

  }
#line 1639
  ovr = (unsigned int )*((unsigned short *)mdev + 1006UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 304U;
#line 1641
  if (ovr != 0) {
#line 1642
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1642
    if (tmp___6 != 0) {
#line 1643
      retcode = 149;
#line 1644
      goto fail;
    } else {

    }
  } else {

  }
#line 1648
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1649
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1650
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1650
    if (tmp___7 != 0L) {
#line 1651
      verify_tfm = 0;
#line 1652
      retcode = 146;
#line 1653
      goto fail;
    } else {

    }
#line 1656
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1656
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1656
    if (tmp___9 == 0) {
#line 1657
      retcode = 147;
#line 1658
      goto fail;
    } else {

    }
  } else {

  }
#line 1663
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1664
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1666
    if (err != 0) {
#line 1667
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1667
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1667
      printk("<4>%s %s: __bitmap_parse() failed with %d\n", tmp___11, tmp___10, err);
#line 1668
      retcode = 143;
#line 1669
      goto fail;
    } else {

    }
  } else {

  }
#line 1673
  _b = sc.rate <= 0;
#line 1673
  if (_b != 0) {
#line 1673
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1673
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1673
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___13, tmp___12, "drbd_nl_syncer_conf",
           (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           1673);
  } else {

  }
#line 1673
  if (_b != 0) {
#line 1673
    sc.rate = 1;
  } else {

  }
#line 1674
  _b___0 = sc.al_extents <= 6;
#line 1674
  if (_b___0 != 0) {
#line 1674
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1674
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1674
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___15, tmp___14, "drbd_nl_syncer_conf",
           (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           1674);
  } else {

  }
#line 1674
  if (_b___0 != 0) {
#line 1674
    sc.al_extents = 127;
  } else {

  }
#line 1676
  if (sc.al_extents > 3843) {
#line 1677
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1677
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1677
    printk("<3>%s %s: sc.al_extents > %d\n", tmp___17, tmp___16, 3843);
#line 1678
    sc.al_extents = 3843;
  } else {

  }
#line 1685
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1686
  if (retcode != 101) {
#line 1687
    goto fail;
  } else {

  }
#line 1691
  spin_lock(& mdev->peer_seq_lock);
#line 1692
  mdev->sync_conf = sc;
#line 1694
  if (rsr == 0) {
#line 1695
    crypto_free_hash(mdev->csums_tfm);
#line 1696
    mdev->csums_tfm = csums_tfm;
#line 1697
    csums_tfm = 0;
  } else {

  }
#line 1700
  if (ovr == 0) {
#line 1701
    crypto_free_hash(mdev->verify_tfm);
#line 1702
    mdev->verify_tfm = verify_tfm;
#line 1703
    verify_tfm = 0;
  } else {

  }
#line 1705
  spin_unlock(& mdev->peer_seq_lock);
#line 1707
  tmp___21 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1707
  if (tmp___21 != 0) {
#line 1708
    tmp___18 = lc_try_lock(mdev->act_log);
#line 1708
    if (tmp___18 != 0) {
#line 1708
      goto ldv_44982;
    } else {

    }
#line 1708
    tmp___19 = get_current();
#line 1708
    __wait.flags = 0U;
#line 1708
    __wait.private = (void *)tmp___19;
#line 1708
    __wait.func = & autoremove_wake_function;
#line 1708
    __wait.task_list.next = & __wait.task_list;
#line 1708
    __wait.task_list.prev = & __wait.task_list;
    ldv_44985: 
#line 1708
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1708
    tmp___20 = lc_try_lock(mdev->act_log);
#line 1708
    if (tmp___20 != 0) {
#line 1708
      goto ldv_44984;
    } else {

    }
#line 1708
    schedule();
#line 1708
    goto ldv_44985;
    ldv_44984: 
#line 1708
    finish_wait(& mdev->al_wait, & __wait);
    ldv_44982: 
#line 1709
    drbd_al_shrink(mdev);
#line 1710
    err = drbd_check_al_size(mdev);
#line 1711
    lc_unlock(mdev->act_log);
#line 1712
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1714
    put_ldev(mdev);
#line 1715
    drbd_md_sync(mdev);
#line 1717
    if (err != 0) {
#line 1718
      retcode = 122;
#line 1719
      goto fail;
    } else {

    }
  } else {

  }
#line 1723
  if ((int )mdev->state.ldv_33657.conn > 9) {
#line 1724
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1726
  tmp___22 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1726
  if (tmp___22) {
#line 1726
    tmp___23 = 0;
  } else {
#line 1726
    tmp___23 = 1;
  }
#line 1726
  if (tmp___23) {
#line 1727
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1728
    drbd_calc_cpu_mask(mdev);
#line 1729
    mdev->receiver.reset_cpu_mask = 1;
#line 1730
    mdev->asender.reset_cpu_mask = 1;
#line 1731
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1734
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1736
  free_cpumask_var(new_cpu_mask);
#line 1737
  crypto_free_hash(csums_tfm);
#line 1738
  crypto_free_hash(verify_tfm);
#line 1739
  reply->ret_code = retcode;
#line 1740
  return (0);
}
}
#line 1743 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1748
  val.i = 0U;
#line 1748
  val.ldv_33657.conn = 12U;
#line 1748
  mask.i = 0U;
#line 1748
  mask.ldv_33657.conn = 31U;
#line 1748
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1750
  if (retcode <= 0 && retcode != -15) {
#line 1751
    val___0.i = 0U;
#line 1751
    val___0.ldv_33657.conn = 12U;
#line 1751
    mask___0.i = 0U;
#line 1751
    mask___0.ldv_33657.conn = 31U;
#line 1751
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1753
  goto ldv_45008;
  ldv_45007: 
#line 1754
  spin_lock_irq(& mdev->req_lock);
#line 1755
  if ((int )mdev->state.ldv_33657.conn <= 9) {
#line 1756
    __ns.i = mdev->state.i;
#line 1756
    __ns.ldv_33657.disk = 4U;
#line 1756
    retcode = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
  } else {

  }
#line 1757
  spin_unlock_irq(& mdev->req_lock);
#line 1759
  if (retcode != -15) {
#line 1760
    goto ldv_45002;
  } else {

  }
#line 1762
  val___1.i = 0U;
#line 1762
  val___1.ldv_33657.conn = 12U;
#line 1762
  mask___1.i = 0U;
#line 1762
  mask___1.ldv_33657.conn = 31U;
#line 1762
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_45008: ;
#line 1753
  if (retcode == -15) {
#line 1754
    goto ldv_45007;
  } else {

  }
  ldv_45002: 
#line 1765
  reply->ret_code = retcode;
#line 1766
  return (0);
}
}
#line 1769 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1773
  val.i = 0U;
#line 1773
  val.ldv_33657.conn = 11U;
#line 1773
  mask.i = 0U;
#line 1773
  mask.ldv_33657.conn = 31U;
#line 1773
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1775
  return (0);
}
}
#line 1778 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1781
  retcode = 101;
#line 1783
  val.i = 0U;
#line 1783
  val.ldv_33657.user_isp = 1U;
#line 1783
  mask.i = 0U;
#line 1783
  mask.ldv_33657.user_isp = 1U;
#line 1783
  tmp = drbd_request_state(mdev, mask, val);
#line 1783
  if (tmp == 2) {
#line 1784
    retcode = 134;
  } else {

  }
#line 1786
  reply->ret_code = retcode;
#line 1787
  return (0);
}
}
#line 1790 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1793
  retcode = 101;
#line 1795
  val.i = 0U;
#line 1795
  val.ldv_33657.user_isp = 0U;
#line 1795
  mask.i = 0U;
#line 1795
  mask.ldv_33657.user_isp = 1U;
#line 1795
  tmp = drbd_request_state(mdev, mask, val);
#line 1795
  if (tmp == 2) {
#line 1796
    retcode = 135;
  } else {

  }
#line 1798
  reply->ret_code = retcode;
#line 1799
  return (0);
}
}
#line 1802 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1805
  val.i = 0U;
#line 1805
  val.ldv_33657.susp = 1U;
#line 1805
  mask.i = 0U;
#line 1805
  mask.ldv_33657.susp = 1U;
#line 1805
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1807
  return (0);
}
}
#line 1810 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1813
  val.i = 0U;
#line 1813
  val.ldv_33657.susp = 0U;
#line 1813
  mask.i = 0U;
#line 1813
  mask.ldv_33657.susp = 1U;
#line 1813
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1814
  return (0);
}
}
#line 1817 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1820
  val.i = 0U;
#line 1820
  val.ldv_33657.disk = 5U;
#line 1820
  mask.i = 0U;
#line 1820
  mask.ldv_33657.disk = 15U;
#line 1820
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1821
  return (0);
}
}
#line 1824 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 1829
  tl = (unsigned short *)(& reply->tag_list);
#line 1831
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1831
  if (tmp != 0) {
#line 1832
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 1833
    put_ldev(mdev);
  } else {

  }
#line 1836
  tmp___0 = get_net_conf(mdev);
#line 1836
  if (tmp___0 != 0) {
#line 1837
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 1838
    put_net_conf(mdev);
  } else {

  }
#line 1840
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 1842
  tmp___1 = tl;
#line 1842
  tl = tl + 1;
#line 1842
  __gu_p = (void *)tmp___1;
#line 1842
  switch (2UL) {
  case 1UL: 
#line 1842
  *((u8 *)__gu_p) = 0U;
#line 1842
  goto ldv_45073;
  case 2UL: 
#line 1842
  put_unaligned_le16(0, __gu_p);
#line 1842
  goto ldv_45073;
  case 4UL: 
#line 1842
  put_unaligned_le32(0U, __gu_p);
#line 1842
  goto ldv_45073;
  case 8UL: 
#line 1842
  put_unaligned_le64(0ULL, __gu_p);
#line 1842
  goto ldv_45073;
  default: 
#line 1842
  __bad_unaligned_access_size();
#line 1842
  goto ldv_45073;
  }
  ldv_45073: ;
#line 1844
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1847 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1850
  tl = (unsigned short *)(& reply->tag_list);
#line 1851
  s = mdev->state;
#line 1855
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 1858
  if ((int )s.ldv_33657.conn > 15 && (int )s.ldv_33657.conn <= 21) {
#line 1859
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1859
    if (tmp != 0) {
#line 1860
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 1861
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 1862
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1865
  tmp___0 = tl;
#line 1865
  tl = tl + 1;
#line 1865
  __gu_p = (void *)tmp___0;
#line 1865
  switch (2UL) {
  case 1UL: 
#line 1865
  *((u8 *)__gu_p) = 0U;
#line 1865
  goto ldv_45089;
  case 2UL: 
#line 1865
  put_unaligned_le16(0, __gu_p);
#line 1865
  goto ldv_45089;
  case 4UL: 
#line 1865
  put_unaligned_le32(0U, __gu_p);
#line 1865
  goto ldv_45089;
  case 8UL: 
#line 1865
  put_unaligned_le64(0ULL, __gu_p);
#line 1865
  goto ldv_45089;
  default: 
#line 1865
  __bad_unaligned_access_size();
#line 1865
  goto ldv_45089;
  }
  ldv_45089: ;
#line 1867
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1870 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1875
  tl = (unsigned short *)(& reply->tag_list);
#line 1877
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1877
  if (tmp != 0) {
#line 1878
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 1879
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 1880
    put_ldev(mdev);
  } else {

  }
#line 1882
  tmp___0 = tl;
#line 1882
  tl = tl + 1;
#line 1882
  __gu_p = (void *)tmp___0;
#line 1882
  switch (2UL) {
  case 1UL: 
#line 1882
  *((u8 *)__gu_p) = 0U;
#line 1882
  goto ldv_45102;
  case 2UL: 
#line 1882
  put_unaligned_le16(0, __gu_p);
#line 1882
  goto ldv_45102;
  case 4UL: 
#line 1882
  put_unaligned_le32(0U, __gu_p);
#line 1882
  goto ldv_45102;
  case 8UL: 
#line 1882
  put_unaligned_le64(0ULL, __gu_p);
#line 1882
  goto ldv_45102;
  default: 
#line 1882
  __bad_unaligned_access_size();
#line 1882
  goto ldv_45102;
  }
  ldv_45102: ;
#line 1884
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1893 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1899
  tl = (unsigned short *)(& reply->tag_list);
#line 1901
  if (*((unsigned int *)mdev + 503UL) != 40960U) {
#line 1901
    tmp = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 1901
    rv = tmp != 0;
  } else {
#line 1901
    rv = 2;
  }
#line 1904
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 1905
  tmp___0 = tl;
#line 1905
  tl = tl + 1;
#line 1905
  __gu_p = (void *)tmp___0;
#line 1905
  switch (2UL) {
  case 1UL: 
#line 1905
  *((u8 *)__gu_p) = 0U;
#line 1905
  goto ldv_45116;
  case 2UL: 
#line 1905
  put_unaligned_le16(0, __gu_p);
#line 1905
  goto ldv_45116;
  case 4UL: 
#line 1905
  put_unaligned_le32(0U, __gu_p);
#line 1905
  goto ldv_45116;
  case 8UL: 
#line 1905
  put_unaligned_le64(0ULL, __gu_p);
#line 1905
  goto ldv_45116;
  default: 
#line 1905
  __bad_unaligned_access_size();
#line 1905
  goto ldv_45116;
  }
  ldv_45116: ;
#line 1907
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1910 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1914
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 1917
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1917
  if (tmp == 0) {
#line 1918
    reply->ret_code = 126;
#line 1919
    return (0);
  } else {

  }
#line 1922
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 1923
  val.i = 0U;
#line 1923
  val.ldv_33657.conn = 18U;
#line 1923
  mask.i = 0U;
#line 1923
  mask.ldv_33657.conn = 31U;
#line 1923
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1924
  return (0);
}
}
#line 1928 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  union drbd_state __ns ;

  {
#line 1931
  retcode = 101;
#line 1932
  skip_initial_sync = 0;
#line 1937
  memset((void *)(& args), 0, 4UL);
#line 1938
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1938
  if (tmp == 0) {
#line 1939
    reply->ret_code = 126;
#line 1940
    return (0);
  } else {

  }
#line 1943
  ldv_mutex_lock_191(& mdev->state_mutex);
#line 1945
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1945
  if (tmp___0 == 0) {
#line 1946
    retcode = 138;
#line 1947
    goto out;
  } else {

  }
#line 1951
  if ((((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1953
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1953
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1953
    printk("<6>%s %s: Preparing to skip initial sync\n", tmp___2, tmp___1);
#line 1954
    skip_initial_sync = 1;
  } else
#line 1955
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 0U) {
#line 1956
    retcode = 151;
#line 1957
    goto out_dec;
  } else {

  }
#line 1960
  drbd_uuid_set(mdev, 1, 0ULL);
#line 1961
  drbd_uuid_new_current(mdev);
#line 1963
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1964
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid");
#line 1965
    if (err != 0) {
#line 1966
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1966
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1966
      printk("<3>%s %s: Writing bitmap failed with %d\n", tmp___4, tmp___3, err);
#line 1967
      retcode = 118;
    } else {

    }
#line 1969
    if (skip_initial_sync != 0) {
#line 1970
      drbd_send_uuids_skip_initial_sync(mdev);
#line 1971
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 1972
      spin_lock_irq(& mdev->req_lock);
#line 1973
      __ns.i = mdev->state.i;
#line 1973
      __ns.ldv_33657.disk = 8U;
#line 1973
      __ns.ldv_33657.pdsk = 8U;
#line 1973
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1975
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1979
  drbd_md_sync(mdev);
  out_dec: 
#line 1981
  put_ldev(mdev);
  out: 
#line 1983
  ldv_mutex_unlock_192(& mdev->state_mutex);
#line 1985
  reply->ret_code = retcode;
#line 1986
  return (0);
}
}
#line 1989 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(struct drbd_nl_cfg_req *nlp ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 1993
  if (nlp->drbd_minor >= minor_count) {
#line 1994
    return (0);
  } else {

  }
#line 1996
  mdev = minor_to_mdev(nlp->drbd_minor);
#line 1998
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && nlp->flags & 1) {
#line 1999
    disk = 0;
#line 2000
    mdev = drbd_new_device(nlp->drbd_minor);
#line 2002
    spin_lock_irq(& drbd_pp_lock);
#line 2003
    if ((unsigned long )*(minor_table + (unsigned long )nlp->drbd_minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 2004
      *(minor_table + (unsigned long )nlp->drbd_minor) = mdev;
#line 2005
      disk = mdev->vdisk;
#line 2006
      mdev = 0;
    } else {

    }
#line 2008
    spin_unlock_irq(& drbd_pp_lock);
#line 2010
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 2013
      add_disk(disk);
    } else {
#line 2015
      drbd_free_mdev(mdev);
    }
#line 2017
    mdev = minor_to_mdev(nlp->drbd_minor);
  } else {

  }
#line 2020
  return (mdev);
}
}
#line 2030 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2030
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1272}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2061 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  void *tmp___0 ;

  {
#line 2063
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2069
  reply_size = 34;
#line 2073
  tmp = try_module_get___0(& __this_module);
#line 2073
  if (tmp == 0) {
#line 2074
    printk("<3>drbd: try_module_get() failed!\n");
#line 2075
    return;
  } else {

  }
#line 2078
  if ((nsp->eff_cap.cap[0] & 2097152U) == 0U) {
#line 2079
    retcode = 152;
#line 2080
    goto fail;
  } else {

  }
#line 2083
  mdev = ensure_mdev(nlp);
#line 2084
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2085
    retcode = 127;
#line 2086
    goto fail;
  } else {

  }
#line 2089
  if (nlp->packet_type > 26) {
#line 2090
    retcode = 137;
#line 2091
    goto fail;
  } else {

  }
#line 2094
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2097
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2098
    retcode = 137;
#line 2099
    goto fail;
  } else {

  }
#line 2102
  reply_size = cm->reply_body_size + reply_size;
#line 2105
  tmp___0 = kmalloc___5((size_t )reply_size, 208U);
#line 2105
  cn_reply = (struct cn_msg *)tmp___0;
#line 2106
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2107
    retcode = 122;
#line 2108
    goto fail;
  } else {

  }
#line 2110
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2112
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2114
  reply->minor = nlp->drbd_minor;
#line 2115
  reply->ret_code = 101;
#line 2118
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2120
  cn_reply->id = req->id;
#line 2121
  cn_reply->seq = req->seq;
#line 2122
  cn_reply->ack = req->ack + 1U;
#line 2123
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2124
  cn_reply->flags = 0U;
#line 2126
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2127
  if (rr != 0 && rr != -3) {
#line 2128
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2130
  kfree((void const   *)cn_reply);
#line 2131
  module_put(& __this_module);
#line 2132
  return;
  fail: 
#line 2134
  drbd_nl_send_reply(req, retcode);
#line 2135
  module_put(& __this_module);
#line 2136
  return;
}
}
#line 2138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2144
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2145
  len = (int )len < (int )l ? len : l;
#line 2146
  tmp = tl;
#line 2146
  tl = tl + 1;
#line 2146
  __gu_p = (void *)tmp;
#line 2146
  switch (2UL) {
  case 1UL: 
#line 2146
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2146
  goto ldv_45180;
  case 2UL: 
#line 2146
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2146
  goto ldv_45180;
  case 4UL: 
#line 2146
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2146
  goto ldv_45180;
  case 8UL: 
#line 2146
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2146
  goto ldv_45180;
  default: 
#line 2146
  __bad_unaligned_access_size();
#line 2146
  goto ldv_45180;
  }
  ldv_45180: 
#line 2147
  tmp___0 = tl;
#line 2147
  tl = tl + 1;
#line 2147
  __gu_p___0 = (void *)tmp___0;
#line 2147
  switch (2UL) {
  case 1UL: 
#line 2147
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2147
  goto ldv_45187;
  case 2UL: 
#line 2147
  put_unaligned_le16((int )len, __gu_p___0);
#line 2147
  goto ldv_45187;
  case 4UL: 
#line 2147
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2147
  goto ldv_45187;
  case 8UL: 
#line 2147
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2147
  goto ldv_45187;
  default: 
#line 2147
  __bad_unaligned_access_size();
#line 2147
  goto ldv_45187;
  }
  ldv_45187: 
#line 2148
  __len = (size_t )len;
#line 2148
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2149
  tl = tl + (unsigned long )len;
#line 2150
  if (nul_terminated != 0) {
#line 2151
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2152
  return (tl);
}
}
#line 2156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2158
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2158
  return (tmp);
}
}
#line 2162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2164
  tmp = strlen(str);
#line 2164
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2164
  return (tmp___0);
}
}
#line 2168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2170
  tmp = tl;
#line 2170
  tl = tl + 1;
#line 2170
  __gu_p = (void *)tmp;
#line 2170
  switch (2UL) {
  case 1UL: 
#line 2170
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2170
  goto ldv_45213;
  case 2UL: 
#line 2170
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2170
  goto ldv_45213;
  case 4UL: 
#line 2170
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2170
  goto ldv_45213;
  case 8UL: 
#line 2170
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2170
  goto ldv_45213;
  default: 
#line 2170
  __bad_unaligned_access_size();
#line 2170
  goto ldv_45213;
  }
  ldv_45213: ;
#line 2171
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2173
  tmp___0 = tl;
#line 2173
  tl = tl + 1;
#line 2173
  __gu_p___0 = (void *)tmp___0;
#line 2173
  switch (2UL) {
  case 1UL: 
#line 2173
  *((u8 *)__gu_p___0) = 4U;
#line 2173
  goto ldv_45221;
  case 2UL: 
#line 2173
  put_unaligned_le16(4, __gu_p___0);
#line 2173
  goto ldv_45221;
  case 4UL: 
#line 2173
  put_unaligned_le32(4U, __gu_p___0);
#line 2173
  goto ldv_45221;
  case 8UL: 
#line 2173
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2173
  goto ldv_45221;
  default: 
#line 2173
  __bad_unaligned_access_size();
#line 2173
  goto ldv_45221;
  }
  ldv_45221: 
#line 2174
  __gu_p___1 = (void *)tl;
#line 2174
  switch (4UL) {
  case 1UL: 
#line 2174
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2174
  goto ldv_45228;
  case 2UL: 
#line 2174
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2174
  goto ldv_45228;
  case 4UL: 
#line 2174
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2174
  goto ldv_45228;
  case 8UL: 
#line 2174
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2174
  goto ldv_45228;
  default: 
#line 2174
  __bad_unaligned_access_size();
#line 2174
  goto ldv_45228;
  }
  ldv_45228: 
#line 2175
  tl = tl + 4U;
#line 2176
  goto ldv_45233;
  case 16384U: 
#line 2178
  tmp___1 = tl;
#line 2178
  tl = tl + 1;
#line 2178
  __gu_p___2 = (void *)tmp___1;
#line 2178
  switch (2UL) {
  case 1UL: 
#line 2178
  *((u8 *)__gu_p___2) = 8U;
#line 2178
  goto ldv_45237;
  case 2UL: 
#line 2178
  put_unaligned_le16(8, __gu_p___2);
#line 2178
  goto ldv_45237;
  case 4UL: 
#line 2178
  put_unaligned_le32(8U, __gu_p___2);
#line 2178
  goto ldv_45237;
  case 8UL: 
#line 2178
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2178
  goto ldv_45237;
  default: 
#line 2178
  __bad_unaligned_access_size();
#line 2178
  goto ldv_45237;
  }
  ldv_45237: 
#line 2179
  __gu_p___3 = (void *)tl;
#line 2179
  switch (8UL) {
  case 1UL: 
#line 2179
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2179
  goto ldv_45244;
  case 2UL: 
#line 2179
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2179
  goto ldv_45244;
  case 4UL: 
#line 2179
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2179
  goto ldv_45244;
  case 8UL: 
#line 2179
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2179
  goto ldv_45244;
  default: 
#line 2179
  __bad_unaligned_access_size();
#line 2179
  goto ldv_45244;
  }
  ldv_45244: 
#line 2180
  tl = tl + 8U;
#line 2181
  goto ldv_45233;
  default: ;
  }
  ldv_45233: ;
#line 2186
  return (tl);
}
}
#line 2189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2195
  cn_reply = (struct cn_msg *)(& buffer);
#line 2196
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2198
  tl = (unsigned short *)(& reply->tag_list);
#line 2202
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2204
  tmp = tl;
#line 2204
  tl = tl + 1;
#line 2204
  __gu_p = (void *)tmp;
#line 2204
  switch (2UL) {
  case 1UL: 
#line 2204
  *((u8 *)__gu_p) = 0U;
#line 2204
  goto ldv_45260;
  case 2UL: 
#line 2204
  put_unaligned_le16(0, __gu_p);
#line 2204
  goto ldv_45260;
  case 4UL: 
#line 2204
  put_unaligned_le32(0U, __gu_p);
#line 2204
  goto ldv_45260;
  case 8UL: 
#line 2204
  put_unaligned_le64(0ULL, __gu_p);
#line 2204
  goto ldv_45260;
  default: 
#line 2204
  __bad_unaligned_access_size();
#line 2204
  goto ldv_45260;
  }
  ldv_45260: 
#line 2206
  cn_reply->id.idx = 8U;
#line 2207
  cn_reply->id.val = 1U;
#line 2209
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2209
  cn_reply->seq = (__u32 )tmp___0;
#line 2210
  cn_reply->ack = 0U;
#line 2211
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2213
  cn_reply->flags = 0U;
#line 2215
  reply->packet_type = 17;
#line 2216
  reply->minor = mdev_to_minor(mdev);
#line 2217
  reply->ret_code = 101;
#line 2219
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2220
  return;
}
}
#line 2222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2228
  cn_reply = (struct cn_msg *)(& buffer);
#line 2229
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2231
  tl = (unsigned short *)(& reply->tag_list);
#line 2235
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2236
  tmp = tl;
#line 2236
  tl = tl + 1;
#line 2236
  __gu_p = (void *)tmp;
#line 2236
  switch (2UL) {
  case 1UL: 
#line 2236
  *((u8 *)__gu_p) = 0U;
#line 2236
  goto ldv_45275;
  case 2UL: 
#line 2236
  put_unaligned_le16(0, __gu_p);
#line 2236
  goto ldv_45275;
  case 4UL: 
#line 2236
  put_unaligned_le32(0U, __gu_p);
#line 2236
  goto ldv_45275;
  case 8UL: 
#line 2236
  put_unaligned_le64(0ULL, __gu_p);
#line 2236
  goto ldv_45275;
  default: 
#line 2236
  __bad_unaligned_access_size();
#line 2236
  goto ldv_45275;
  }
  ldv_45275: 
#line 2238
  cn_reply->id.idx = 8U;
#line 2239
  cn_reply->id.val = 1U;
#line 2241
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2241
  cn_reply->seq = (__u32 )tmp___0;
#line 2242
  cn_reply->ack = 0U;
#line 2243
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2245
  cn_reply->flags = 0U;
#line 2247
  reply->packet_type = 20;
#line 2248
  reply->minor = mdev_to_minor(mdev);
#line 2249
  reply->ret_code = 101;
#line 2251
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2252
  return;
}
}
#line 2254 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  void *__gu_p ;
  unsigned short *tmp___2 ;
  void *__gu_p___0 ;
  unsigned short *tmp___3 ;
  void *d ;
  void *tmp___4 ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___5 ;
  void *__gu_p___1 ;
  unsigned short *tmp___6 ;
  int tmp___7 ;

  {
#line 2265
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2266
    return;
  } else {

  }
#line 2267
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2268
    return;
  } else {

  }
#line 2276
  tmp = kmalloc___5(33026UL, 16U);
#line 2276
  cn_reply = (struct cn_msg *)tmp;
#line 2283
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2284
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2284
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2284
    printk("<3>%s %s: could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
           tmp___1, tmp___0, (unsigned long long )e->sector, e->size);
#line 2286
    return;
  } else {

  }
#line 2289
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2290
  tl = (unsigned short *)(& reply->tag_list);
#line 2292
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2293
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2294
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2295
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2296
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->block_id));
#line 2298
  tmp___2 = tl;
#line 2298
  tl = tl + 1;
#line 2298
  __gu_p = (void *)tmp___2;
#line 2298
  switch (2UL) {
  case 1UL: 
#line 2298
  *((u8 *)__gu_p) = 50U;
#line 2298
  goto ldv_45295;
  case 2UL: 
#line 2298
  put_unaligned_le16(49202, __gu_p);
#line 2298
  goto ldv_45295;
  case 4UL: 
#line 2298
  put_unaligned_le32(49202U, __gu_p);
#line 2298
  goto ldv_45295;
  case 8UL: 
#line 2298
  put_unaligned_le64(49202ULL, __gu_p);
#line 2298
  goto ldv_45295;
  default: 
#line 2298
  __bad_unaligned_access_size();
#line 2298
  goto ldv_45295;
  }
  ldv_45295: 
#line 2299
  tmp___3 = tl;
#line 2299
  tl = tl + 1;
#line 2299
  __gu_p___0 = (void *)tmp___3;
#line 2299
  switch (2UL) {
  case 1UL: 
#line 2299
  *((u8 *)__gu_p___0) = (unsigned char )e->size;
#line 2299
  goto ldv_45302;
  case 2UL: 
#line 2299
  put_unaligned_le16((int )((unsigned short )e->size), __gu_p___0);
#line 2299
  goto ldv_45302;
  case 4UL: 
#line 2299
  put_unaligned_le32(e->size, __gu_p___0);
#line 2299
  goto ldv_45302;
  case 8UL: 
#line 2299
  put_unaligned_le64((unsigned long long )e->size, __gu_p___0);
#line 2299
  goto ldv_45302;
  default: 
#line 2299
  __bad_unaligned_access_size();
#line 2299
  goto ldv_45302;
  }
  ldv_45302: 
#line 2301
  len = e->size;
#line 2302
  page = e->pages;
#line 2303
  goto ldv_45317;
  ldv_45316: 
#line 2304
  tmp___4 = kmap_atomic___0(page, KM_USER0);
#line 2304
  d = tmp___4;
#line 2305
  __min1 = len;
#line 2305
  __min2 = 4096U;
#line 2305
  l = __min1 < __min2 ? __min1 : __min2;
#line 2306
  __len = (size_t )l;
#line 2306
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2307
  pagefault_enable___0();
#line 2308
  tl = tl + (unsigned long )l;
#line 2309
  len = len - l;
#line 2303
  page = page_chain_next(page);
  ldv_45317: ;
#line 2303
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2303
    tmp___5 = page_chain_next(page);
#line 2303
    __builtin_prefetch((void const   *)tmp___5);
#line 2303
    if (1 != 0) {
#line 2304
      goto ldv_45316;
    } else {
#line 2306
      goto ldv_45318;
    }
  } else {

  }
  ldv_45318: 
#line 2311
  tmp___6 = tl;
#line 2311
  tl = tl + 1;
#line 2311
  __gu_p___1 = (void *)tmp___6;
#line 2311
  switch (2UL) {
  case 1UL: 
#line 2311
  *((u8 *)__gu_p___1) = 0U;
#line 2311
  goto ldv_45321;
  case 2UL: 
#line 2311
  put_unaligned_le16(0, __gu_p___1);
#line 2311
  goto ldv_45321;
  case 4UL: 
#line 2311
  put_unaligned_le32(0U, __gu_p___1);
#line 2311
  goto ldv_45321;
  case 8UL: 
#line 2311
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2311
  goto ldv_45321;
  default: 
#line 2311
  __bad_unaligned_access_size();
#line 2311
  goto ldv_45321;
  }
  ldv_45321: 
#line 2313
  cn_reply->id.idx = 8U;
#line 2314
  cn_reply->id.val = 1U;
#line 2316
  tmp___7 = atomic_add_return(1, & drbd_nl_seq);
#line 2316
  cn_reply->seq = (__u32 )tmp___7;
#line 2317
  cn_reply->ack = 0U;
#line 2318
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2320
  cn_reply->flags = 0U;
#line 2322
  reply->packet_type = 24;
#line 2323
  reply->minor = mdev_to_minor(mdev);
#line 2324
  reply->ret_code = 101;
#line 2326
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2327
  kfree((void const   *)cn_reply);
#line 2328
  return;
}
}
#line 2330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2336
  cn_reply = (struct cn_msg *)(& buffer);
#line 2337
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2339
  tl = (unsigned short *)(& reply->tag_list);
#line 2344
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2344
  if (tmp == 0) {
#line 2345
    return;
  } else {

  }
#line 2346
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2347
  put_ldev(mdev);
#line 2349
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2350
  tmp___0 = tl;
#line 2350
  tl = tl + 1;
#line 2350
  __gu_p = (void *)tmp___0;
#line 2350
  switch (2UL) {
  case 1UL: 
#line 2350
  *((u8 *)__gu_p) = 0U;
#line 2350
  goto ldv_45337;
  case 2UL: 
#line 2350
  put_unaligned_le16(0, __gu_p);
#line 2350
  goto ldv_45337;
  case 4UL: 
#line 2350
  put_unaligned_le32(0U, __gu_p);
#line 2350
  goto ldv_45337;
  case 8UL: 
#line 2350
  put_unaligned_le64(0ULL, __gu_p);
#line 2350
  goto ldv_45337;
  default: 
#line 2350
  __bad_unaligned_access_size();
#line 2350
  goto ldv_45337;
  }
  ldv_45337: 
#line 2352
  cn_reply->id.idx = 8U;
#line 2353
  cn_reply->id.val = 1U;
#line 2355
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2355
  cn_reply->seq = (__u32 )tmp___1;
#line 2356
  cn_reply->ack = 0U;
#line 2357
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2359
  cn_reply->flags = 0U;
#line 2361
  reply->packet_type = 23;
#line 2362
  reply->minor = mdev_to_minor(mdev);
#line 2363
  reply->ret_code = 101;
#line 2365
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2366
  return;
}
}
#line 2368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2371
  try = 10;
#line 2373
  cn_id_drbd.val = 1U;
  ldv_45349: 
#line 2375
  cn_id_drbd.idx = cn_idx;
#line 2376
  err = cn_add_callback(& cn_id_drbd, (char *)"cn_drbd", & drbd_connector_callback);
#line 2377
  if (err == 0) {
#line 2378
    goto ldv_45348;
  } else {

  }
#line 2379
  cn_idx = cn_idx + 6977U;
#line 2380
  tmp = try;
#line 2380
  try = try - 1;
#line 2380
  if (tmp != 0) {
#line 2381
    goto ldv_45349;
  } else {

  }
  ldv_45348: ;
#line 2382
  if (err != 0) {
#line 2383
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2384
    return (err);
  } else {

  }
#line 2387
  return (0);
}
}
#line 2390 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2394
  cn_id_drbd.idx = cn_idx;
#line 2395
  cn_id_drbd.val = 1U;
#line 2397
  cn_del_callback(& cn_id_drbd);
#line 2398
  return;
}
}
#line 2400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2403
  cn_reply = (struct cn_msg *)(& buffer);
#line 2404
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2408
  cn_reply->id = req->id;
#line 2410
  cn_reply->seq = req->seq;
#line 2411
  cn_reply->ack = req->ack + 1U;
#line 2412
  cn_reply->len = 12U;
#line 2413
  cn_reply->flags = 0U;
#line 2415
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2416
  reply->ret_code = ret_code;
#line 2418
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2419
  if (rr != 0 && rr != -3) {
#line 2420
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2421
  return;
}
}
#line 2423 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_183(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2428
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 2430
  mutex_lock(ldv_func_arg1);
#line 2431
  return;
}
}
#line 2433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int ldv_mutex_trylock_184(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2438
  tmp = mutex_trylock(ldv_func_arg1);
#line 2438
  ldv_func_res = tmp;
#line 2440
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 2440
  return (tmp___0);
#line 2442
  return (ldv_func_res);
}
}
#line 2445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_185(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2450
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 2452
  mutex_unlock(ldv_func_arg1);
#line 2453
  return;
}
}
#line 2455 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_186(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2460
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2462
  mutex_lock(ldv_func_arg1);
#line 2463
  return;
}
}
#line 2465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_187(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2470
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2472
  mutex_unlock(ldv_func_arg1);
#line 2473
  return;
}
}
#line 2475 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_188(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2480
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2482
  mutex_unlock(ldv_func_arg1);
#line 2483
  return;
}
}
#line 2485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_189(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2490
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2492
  mutex_lock(ldv_func_arg1);
#line 2493
  return;
}
}
#line 2495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_190(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2500
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2502
  mutex_unlock(ldv_func_arg1);
#line 2503
  return;
}
}
#line 2505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_191(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2510
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2512
  mutex_lock(ldv_func_arg1);
#line 2513
  return;
}
}
#line 2515 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_192(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2520
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2522
  mutex_unlock(ldv_func_arg1);
#line 2523
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_bm_change_of_drbd_bitmap  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_bm_change_of_drbd_bitmap(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_bm_change_of_drbd_bitmap == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_md_io_mutex_of_drbd_conf  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_md_io_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_mutex_of_device = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_mutex_of_device = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_mutex_of_device = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_mutex_of_device = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_mutex_of_device = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_mutex_of_device == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_mutex_of_device = 1;
#line 462
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_drbd_socket  ;
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 472
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 472
    ldv_error();
  }
#line 475
  nondetermined = ldv_undef_int();
#line 478
  if (nondetermined) {
#line 481
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 483
    return (0);
  } else {
#line 488
    return (-4);
  }
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 498
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 498
    ldv_error();
  }
#line 501
  nondetermined = ldv_undef_int();
#line 504
  if (nondetermined) {
#line 507
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 509
    return (0);
  } else {
#line 514
    return (-4);
  }
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 522
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 522
    ldv_error();
  }
#line 524
  ldv_mutex_mutex_of_drbd_socket = 2;
#line 525
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 533
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 533
    ldv_error();
  }
#line 536
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 539
  if (is_mutex_held_by_another_thread) {
#line 542
    return (0);
  } else {
#line 547
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 549
    return (1);
  }
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_drbd_socket(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 559
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 559
    ldv_error();
  }
#line 562
  atomic_value_after_dec = ldv_undef_int();
#line 565
  if (atomic_value_after_dec == 0) {
#line 568
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 570
    return (1);
  } else {

  }
#line 574
  return (0);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 583
  if (ldv_mutex_mutex_of_drbd_socket == 1) {
#line 586
    nondetermined = ldv_undef_int();
#line 589
    if (nondetermined) {
#line 592
      return (0);
    } else {
#line 597
      return (1);
    }
  } else {
#line 603
    return (1);
  }
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 611
  if (ldv_mutex_mutex_of_drbd_socket == 2) {

  } else {
#line 611
    ldv_error();
  }
#line 613
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 614
  return;
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_state_mutex_of_drbd_conf  ;
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 624
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 624
    ldv_error();
  }
#line 627
  nondetermined = ldv_undef_int();
#line 630
  if (nondetermined) {
#line 633
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 635
    return (0);
  } else {
#line 640
    return (-4);
  }
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 650
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 650
    ldv_error();
  }
#line 653
  nondetermined = ldv_undef_int();
#line 656
  if (nondetermined) {
#line 659
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 661
    return (0);
  } else {
#line 666
    return (-4);
  }
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 674
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 674
    ldv_error();
  }
#line 676
  ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 677
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 685
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 685
    ldv_error();
  }
#line 688
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 691
  if (is_mutex_held_by_another_thread) {
#line 694
    return (0);
  } else {
#line 699
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 701
    return (1);
  }
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_state_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 711
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 711
    ldv_error();
  }
#line 714
  atomic_value_after_dec = ldv_undef_int();
#line 717
  if (atomic_value_after_dec == 0) {
#line 720
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 722
    return (1);
  } else {

  }
#line 726
  return (0);
}
}
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 735
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {
#line 738
    nondetermined = ldv_undef_int();
#line 741
    if (nondetermined) {
#line 744
      return (0);
    } else {
#line 749
      return (1);
    }
  } else {
#line 755
    return (1);
  }
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 763
  if (ldv_mutex_state_mutex_of_drbd_conf == 2) {

  } else {
#line 763
    ldv_error();
  }
#line 765
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 766
  return;
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 773
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 775
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 777
  ldv_mutex_mutex_of_device = 1;
#line 779
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 781
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 782
  return;
}
}
#line 785 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 788
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 788
    ldv_error();
  }
#line 790
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 790
    ldv_error();
  }
#line 792
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 792
    ldv_error();
  }
#line 794
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 794
    ldv_error();
  }
#line 796
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 796
    ldv_error();
  }
#line 797
  return;
}
}
