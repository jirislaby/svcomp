/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/uapi/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 15 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 16 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 18 "include/asm-generic/int-ll64.h"
typedef short s16;
#line 19 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 21 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 22 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 24 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 25 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 86 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_off_t;
#line 87 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 33 "include/uapi/linux/types.h"
typedef __u16 __be16;
#line 35 "include/uapi/linux/types.h"
typedef __u32 __be32;
#line 40 "include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 12 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 15 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 18 "include/linux/types.h"
typedef unsigned short umode_t;
#line 19 "include/linux/types.h"
typedef __u32 nlink_t;
#line 20 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 21 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 26 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29 "include/linux/types.h"
typedef _Bool bool;
#line 31 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 32 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 45 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 54 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 59 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 69 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 102 "include/linux/types.h"
typedef __s32 int32_t;
#line 106 "include/linux/types.h"
typedef __u8 uint8_t;
#line 108 "include/linux/types.h"
typedef __u32 uint32_t;
#line 111 "include/linux/types.h"
typedef __u64 uint64_t;
#line 133 "include/linux/types.h"
typedef unsigned long sector_t;
#line 134 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 146 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 157 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 158 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 176 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 176 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 181 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 181 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 182 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 187
struct hlist_node;
#line 187 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 191 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 202 "include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 157 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 310 "include/linux/printk.h"
struct file_operations;
#line 325 "include/linux/printk.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned char flags ;
};
#line 48 "include/linux/dynamic_debug.h"
struct device;
#line 54
struct net_device;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/sysinfo.h"
struct completion;
#line 24
struct pt_regs;
#line 351 "include/linux/kernel.h"
struct pid;
#line 710 "include/linux/kernel.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 96 "include/linux/bug.h"
struct timespec;
#line 97
struct compat_timespec;
#line 98 "include/linux/bug.h"
struct __anonstruct_futex_9 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 98 "include/linux/bug.h"
struct __anonstruct_nanosleep_10 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 98
struct pollfd;
#line 98 "include/linux/bug.h"
struct __anonstruct_poll_11 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 98 "include/linux/bug.h"
union __anonunion_ldv_2106_8 {
   struct __anonstruct_futex_9 futex ;
   struct __anonstruct_nanosleep_10 nanosleep ;
   struct __anonstruct_poll_11 poll ;
};
#line 98 "include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_2106_8 ldv_2106 ;
};
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct page;
#line 26 "include/asm-generic/getorder.h"
struct task_struct;
#line 27
struct exec_domain;
#line 28
struct mm_struct;
#line 270 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2240_13 {
   unsigned int a ;
   unsigned int b ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2255_14 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2256_12 {
   struct __anonstruct_ldv_2240_13 ldv_2240 ;
   struct __anonstruct_ldv_2255_14 ldv_2255 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2256_12 ldv_2256 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_16 {
   pgdval_t pgd ;
};
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_16 pgd_t;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 290
struct file;
#line 305
struct seq_file;
#line 335
struct thread_struct;
#line 337
struct cpumask;
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2859_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2859_19 ldv_2859 ;
};
#line 306 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 14 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 648 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 26 "include/linux/personality.h"
struct map_segment;
#line 26 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 166 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5167_24 {
   u64 rip ;
   u64 rdp ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5173_25 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5174_23 {
   struct __anonstruct_ldv_5167_24 ldv_5167 ;
   struct __anonstruct_ldv_5173_25 ldv_5173 ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5183_26 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5174_23 ldv_5174 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5183_26 ldv_5183 ;
};
#line 352 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 373 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 378 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 384 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 390 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 398 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 445
struct kmem_cache;
#line 446
struct perf_event;
#line 447 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 588 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_28 {
   unsigned long seg ;
};
#line 588 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_28 mm_segment_t;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   unsigned char sig_on_uaccess_error : 1 ;
   unsigned char uaccess_err : 1 ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_5911_29 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_5911_29 ldv_5911 ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct __anonstruct_ldv_5918_31 {
   u32 read ;
   s32 write ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_30 {
   s64 lock ;
   struct __anonstruct_ldv_5918_31 ldv_5918 ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_30 arch_rwlock_t;
#line 34
struct lockdep_map;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 574 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_6134_33 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_6135_32 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_6134_33 ldv_6134 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_6135_32 ldv_6135 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_34 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_34 rwlock_t;
#line 36 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_35 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 36 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_35 seqlock_t;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 254 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 83 "include/linux/highuid.h"
struct user_namespace;
#line 46 "include/linux/uidgid.h"
typedef uid_t kuid_t;
#line 47 "include/linux/uidgid.h"
typedef gid_t kgid_t;
#line 197 "include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 11 "include/linux/wait.h"
struct __wait_queue;
#line 11 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 14 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 32 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 37 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
#line 721 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 171
struct rw_semaphore;
#line 172 "include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 128 "include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 189 "include/linux/rcupdate.h"
struct notifier_block;
#line 313 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 334
struct tvec_base;
#line 335 "include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 254 "include/linux/timer.h"
struct hrtimer;
#line 255
enum hrtimer_restart;
#line 267
struct work_struct;
#line 50 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 96 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   int cpu ;
};
#line 269 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 60 "include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 855 "include/linux/mmzone.h"
struct ctl_table;
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 289
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 296
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 304
struct wakeup_source;
#line 494 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 499
struct dev_pm_qos_request;
#line 499
struct pm_qos_constraints;
#line 499 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   bool early_init ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   bool syscore ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct dev_pm_qos_request *pq_req ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
#line 558 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 18 "include/asm-generic/pci_iomap.h"
struct vm_area_struct;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/xen/hypervisor.h"
struct bio_vec;
#line 18 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 389 "include/linux/gfp.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 40 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 835 "include/uapi/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837
struct ctl_table_header;
#line 838
struct ctl_dir;
#line 39 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 59 "include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 98 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};
#line 119 "include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 124 "include/linux/sysctl.h"
struct __anonstruct_ldv_12753_129 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 124 "include/linux/sysctl.h"
union __anonunion_ldv_12755_128 {
   struct __anonstruct_ldv_12753_129 ldv_12753 ;
   struct callback_head rcu ;
};
#line 124
struct ctl_table_set;
#line 124 "include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_ldv_12755_128 ldv_12755 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};
#line 145 "include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 151 "include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set * ) ;
   struct ctl_dir dir ;
};
#line 156 "include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 37 "include/linux/kmod.h"
struct cred;
#line 15 "include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 16 "include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 20 "include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 21 "include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 190 "include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 198 "include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 44 "include/linux/elf.h"
struct sock;
#line 45
struct kobject;
#line 46
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 52 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 63 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 110 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 129
struct sysfs_dirent;
#line 194 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 215
struct kernel_param;
#line 216 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string;
#line 49
struct kparam_array;
#line 49 "include/linux/moduleparam.h"
union __anonunion_ldv_13535_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 49 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_13535_134 ldv_13535 ;
};
#line 61 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 67 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 459 "include/linux/moduleparam.h"
struct static_key {
   atomic_t enabled ;
};
#line 210 "include/linux/jump_label.h"
struct tracepoint;
#line 211 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct mod_arch_specific {

};
#line 37 "include/linux/module.h"
struct module_param_attrs;
#line 37 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 46 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 72
struct exception_table_entry;
#line 201
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 207 "include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 222
struct module_sect_attrs;
#line 222
struct module_notes_attrs;
#line 222
struct ftrace_event_call;
#line 222 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 345 "include/linux/irq.h"
struct proc_dir_entry;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smap.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_node;
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 85 "include/linux/list_nulls.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 64 "include/linux/miscdevice.h"
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 42 "include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "include/linux/ratelimit.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24
struct iommu_ops;
#line 25
struct iommu_group;
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 53 "include/linux/device.h"
struct device_attribute;
#line 53
struct driver_attribute;
#line 53 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 127
struct device_type;
#line 184
struct of_device_id;
#line 184 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 247 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 301
struct class_attribute;
#line 301 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 396 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 449 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 476 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 568 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 578
struct dma_coherent_mem;
#line 578 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
};
#line 703 "include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
#line 1076 "include/linux/device.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};
#line 35 "include/linux/pm_qos.h"
struct dev_pm_qos_request {
   struct plist_node node ;
   struct device *dev ;
};
#line 40
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 46 "include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 457 "include/linux/rculist.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 43 "include/linux/uio.h"
struct inode;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 48 "include/linux/uprobes.h"
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
#line 55
struct uprobe;
#line 55 "include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
#line 69 "include/linux/uprobes.h"
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
#line 88 "include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 112
struct address_space;
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16313_137 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_16323_141 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16325_140 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_16323_141 ldv_16323 ;
   int units ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_16327_139 {
   union __anonunion_ldv_16325_140 ldv_16325 ;
   atomic_t _count ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16328_138 {
   unsigned long counters ;
   struct __anonstruct_ldv_16327_139 ldv_16327 ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_16329_136 {
   union __anonunion_ldv_16313_137 ldv_16313 ;
   union __anonunion_ldv_16328_138 ldv_16328 ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_16336_143 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 113
struct slab;
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_16342_144 {
   struct kmem_cache *slab_cache ;
   struct slab *slab_page ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16343_142 {
   struct list_head lru ;
   struct __anonstruct_ldv_16336_143 ldv_16336 ;
   struct list_head list ;
   struct __anonstruct_ldv_16342_144 ldv_16342 ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_16348_145 {
   unsigned long private ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 113 "include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_16329_136 ldv_16329 ;
   union __anonunion_ldv_16343_142 ldv_16343 ;
   union __anonunion_ldv_16348_145 ldv_16348 ;
   unsigned long debug_flags ;
};
#line 170 "include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 218 "include/linux/mm_types.h"
struct __anonstruct_linear_147 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 218 "include/linux/mm_types.h"
union __anonunion_shared_146 {
   struct __anonstruct_linear_147 linear ;
   struct list_head nonlinear ;
};
#line 218
struct anon_vma;
#line 218
struct vm_operations_struct;
#line 218
struct mempolicy;
#line 218 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_146 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 278 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 284 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 297 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 310
struct linux_binfmt;
#line 310
struct mmu_notifier_mm;
#line 310 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   struct uprobes_state uprobes_state ;
};
#line 93 "include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
#line 14 "include/linux/shrinker.h"
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
#line 43
struct file_ra_state;
#line 44
struct user_struct;
#line 45
struct writeback_control;
#line 157 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 181 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
#line 1689 "include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 17 "include/asm-generic/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 37 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 1024 "include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 23 "include/linux/sem.h"
struct sem_undo_list;
#line 23 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 11 "include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;
#line 12 "include/uapi/linux/socket.h"
struct __kernel_sockaddr_storage {
   __kernel_sa_family_t ss_family ;
   char __data[126U] ;
};
#line 23 "include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 24 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 38 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_149 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_149 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_150 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_150 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_151 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_151 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_152 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_152 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_153 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_153 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_154 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_154 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_155 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_155 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_156 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_156 ifs_ifsu ;
};
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_157 {
   char ifrn_name[16U] ;
};
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_158 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_157 ifr_ifrn ;
   union __anonunion_ifr_ifru_158 ifr_ifru ;
};
#line 91 "include/linux/kdev_t.h"
struct hlist_bl_node;
#line 91 "include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct __anonstruct_ldv_20010_161 {
   u32 hash ;
   u32 len ;
};
#line 117 "include/linux/rculist_bl.h"
union __anonunion_ldv_20012_160 {
   struct __anonstruct_ldv_20010_161 ldv_20010 ;
   u64 hash_len ;
};
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   union __anonunion_ldv_20012_160 ldv_20012 ;
   unsigned char const   *name ;
};
#line 87 "include/linux/dcache.h"
struct dentry_operations;
#line 87
struct super_block;
#line 87 "include/linux/dcache.h"
union __anonunion_d_u_162 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 87 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_162 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 138 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 419 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 58 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 58 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 380
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 387
struct pid_namespace;
#line 387 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 22 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 25 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/fiemap.h"
struct percpu_rw_semaphore {
   unsigned int *counters ;
   bool locked ;
   struct mutex mtx ;
};
#line 82 "include/linux/percpu-rwsem.h"
struct bio_set;
#line 83
struct bio;
#line 84
struct bio_integrity_payload;
#line 85
struct block_device;
#line 86
struct io_context;
#line 87
struct cgroup_subsys_state;
#line 19 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 21 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 30 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct io_context *bi_ioc ;
   struct cgroup_subsys_state *bi_css ;
   struct bio_integrity_payload *bi_integrity ;
   unsigned int bi_max_vecs ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 56 "include/uapi/linux/fs.h"
struct export_operations;
#line 57
struct hd_geometry;
#line 58
struct kiocb;
#line 59
struct pipe_inode_info;
#line 60
struct poll_table_struct;
#line 61
struct kstatfs;
#line 62
struct swap_info_struct;
#line 64 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 240 "include/linux/fs.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 19 "include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 36 "include/linux/projid.h"
typedef projid_t kprojid_t;
#line 119 "include/uapi/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
#line 60 "include/linux/quota.h"
typedef long long qsize_t;
#line 61 "include/linux/quota.h"
union __anonunion_ldv_21171_164 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 61 "include/linux/quota.h"
struct kqid {
   union __anonunion_ldv_21171_164 ldv_21171 ;
   enum quota_type type ;
};
#line 178 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 200
struct quota_format_type;
#line 201 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 291 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 302 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 316 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 332 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 378 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 339 "include/linux/fs.h"
union __anonunion_arg_166 {
   char *buf ;
   void *data ;
};
#line 339 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_165 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_166 arg ;
   int error ;
};
#line 339 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_165 read_descriptor_t;
#line 342 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
#line 401
struct backing_dev_info;
#line 402 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 423
struct request_queue;
#line 424
struct hd_struct;
#line 424
struct gendisk;
#line 424 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
   struct percpu_rw_semaphore bd_block_size_semaphore ;
};
#line 498
struct posix_acl;
#line 499
struct inode_operations;
#line 499 "include/linux/fs.h"
union __anonunion_ldv_21606_167 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 499 "include/linux/fs.h"
union __anonunion_ldv_21626_168 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 499
struct file_lock;
#line 499
struct cdev;
#line 499 "include/linux/fs.h"
union __anonunion_ldv_21642_169 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 499 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_21606_167 ldv_21606 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_21626_168 ldv_21626 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_21642_169 ldv_21642 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 727 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 735 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 758 "include/linux/fs.h"
union __anonunion_f_u_170 {
   struct list_head fu_list ;
   struct callback_head fu_rcuhead ;
};
#line 758 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_170 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 901
struct files_struct;
#line 901 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 902 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 907 "include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 919
struct net;
#line 924
struct nlm_lockowner;
#line 925 "include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19
struct fasync_struct;
#line 19 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_172 {
   struct list_head link ;
   int state ;
};
#line 19 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_171 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_172 afs ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_171 fl_u ;
};
#line 1011 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1217 "include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
#line 1233
struct file_system_type;
#line 1233
struct super_operations;
#line 1233
struct xattr_handler;
#line 1233
struct mtd_info;
#line 1233 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
#line 1474 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1512
struct block_device_operations;
#line 1513 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
};
#line 1548 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
};
#line 1595 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 1808 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 15
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_173 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_173 sigset_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 130 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 177 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_175 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_176 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_177 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_178 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_179 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_180 {
   long _band ;
   int _fd ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_181 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_174 {
   int _pad[28U] ;
   struct __anonstruct__kill_175 _kill ;
   struct __anonstruct__timer_176 _timer ;
   struct __anonstruct__rt_177 _rt ;
   struct __anonstruct__sigchld_178 _sigchld ;
   struct __anonstruct__sigfault_179 _sigfault ;
   struct __anonstruct__sigpoll_180 _sigpoll ;
   struct __anonstruct__sigsys_181 _sigsys ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_174 _sifields ;
};
#line 109 "include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 21 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 46 "include/uapi/linux/seccomp.h"
struct seccomp_filter;
#line 47 "include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/uapi/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 11 "include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 460 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 30 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 33 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 34
struct key;
#line 35
struct signal_struct;
#line 36
struct key_type;
#line 38
struct keyring_list;
#line 116 "include/linux/key.h"
union __anonunion_ldv_24458_184 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 116
struct key_user;
#line 116 "include/linux/key.h"
union __anonunion_ldv_24467_185 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 116 "include/linux/key.h"
union __anonunion_type_data_186 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 116 "include/linux/key.h"
union __anonunion_payload_187 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 116 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_24458_184 ldv_24458 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_24467_185 ldv_24467 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_186 type_data ;
   union __anonunion_payload_187 payload ;
};
#line 322
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct callback_head rcu ;
};
#line 92 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 358
struct llist_node;
#line 64 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 185
struct futex_pi_state;
#line 186
struct robust_list_head;
#line 187
struct bio_list;
#line 188
struct fs_struct;
#line 189
struct perf_event_context;
#line 190
struct blk_plug;
#line 111 "include/linux/sched.h"
struct cfs_rq;
#line 112
struct task_group;
#line 347
struct kioctx;
#line 348 "include/linux/sched.h"
union __anonunion_ki_obj_188 {
   void *user ;
   struct task_struct *tsk ;
};
#line 348
struct eventfd_ctx;
#line 348 "include/linux/sched.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_188 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct list_head ki_batch ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 181 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct callback_head callback_head ;
};
#line 368 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 420 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 428 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 435 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 452 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 488
struct autogroup;
#line 489
struct tty_struct;
#line 489
struct taskstats;
#line 489
struct tty_audit_buf;
#line 489 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 664 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 708
struct reclaim_state;
#line 709 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 724 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1024
struct uts_namespace;
#line 1025
struct rq;
#line 1026 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1092 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1097 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1132 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1158
struct rt_rq;
#line 1158 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1181
struct mem_cgroup;
#line 1181 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1544
struct css_set;
#line 1544
struct compat_robust_list_head;
#line 1544
struct ftrace_ret_stack;
#line 1544 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
};
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 220 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 224 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 74 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/archrandom.h"
enum ldv_22313 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 53 "include/uapi/linux/net.h"
typedef enum ldv_22313 socket_state;
#line 70 "include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};
#line 93 "include/linux/net.h"
struct proto_ops;
#line 93 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 119 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
   void (*set_peek_off)(struct sock * , int  ) ;
};
#line 88 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 54 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 75 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 133 "include/net/checksum.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 69 "include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 76 "include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 15 "include/linux/netdev_features.h"
typedef u64 netdev_features_t;
#line 56 "include/linux/netdev_features.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 116 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   unsigned int mask ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned long data[4U] ;
};
#line 126 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 315 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 316
struct sec_path;
#line 316 "include/linux/skbuff.h"
struct __anonstruct_ldv_28879_206 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 316 "include/linux/skbuff.h"
union __anonunion_ldv_28880_205 {
   __wsum csum ;
   struct __anonstruct_ldv_28879_206 ldv_28879 ;
};
#line 316 "include/linux/skbuff.h"
union __anonunion_ldv_28918_207 {
   __u32 mark ;
   __u32 dropcount ;
   __u32 avail_size ;
};
#line 316 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_28880_205 ldv_28880 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u32 rxhash ;
   __u16 vlan_tci ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char pfmemalloc : 1 ;
   unsigned char ooo_okay : 1 ;
   unsigned char l4_rxhash : 1 ;
   unsigned char wifi_acked_valid : 1 ;
   unsigned char wifi_acked : 1 ;
   unsigned char no_fcs : 1 ;
   unsigned char head_frag : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_28918_207 ldv_28918 ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 528
struct dst_entry;
#line 563
struct rtable;
#line 2658 "include/linux/skbuff.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 35 "include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 65 "include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 105 "include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 120 "include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 128 "include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 137 "include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 166 "include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 183 "include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 281 "include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 303 "include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 331 "include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 382 "include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 404 "include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 425 "include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 458 "include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 474 "include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 494 "include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[60U] ;
};
#line 505 "include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 511 "include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 536 "include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 670 "include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 678 "include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 754 "include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 44 "include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 79 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   u32 (*get_rxfh_indir_size)(struct net_device * ) ;
   int (*get_rxfh_indir)(struct net_device * , u32 * ) ;
   int (*set_rxfh_indir)(struct net_device * , u32 const   * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_ts_info)(struct net_device * , struct ethtool_ts_info * ) ;
   int (*get_module_info)(struct net_device * , struct ethtool_modinfo * ) ;
   int (*get_module_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_eee)(struct net_device * , struct ethtool_eee * ) ;
   int (*set_eee)(struct net_device * , struct ethtool_eee * ) ;
};
#line 249
struct prot_inuse;
#line 250 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[27U] ;
};
#line 67 "include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 72 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 79 "include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[5U] ;
};
#line 83 "include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 89 "include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 93 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 100 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 106 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[92U] ;
};
#line 112 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 118 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[1U] ;
   struct ipstats_mib *ip_statistics[1U] ;
   struct linux_mib *net_statistics[1U] ;
   struct udp_mib *udp_statistics[1U] ;
   struct udp_mib *udplite_statistics[1U] ;
   struct icmp_mib *icmp_statistics[1U] ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[1U] ;
   struct udp_mib *udplite_stats_in6[1U] ;
   struct ipstats_mib *ipv6_statistics[1U] ;
   struct icmpv6_mib *icmpv6_statistics[1U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics[1U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 74 "include/net/inet_frag.h"
struct tcpm_hash_bucket;
#line 75
struct ipv4_devconf;
#line 76
struct fib_rules_ops;
#line 77
struct fib_table;
#line 78
struct inet_peer_base;
#line 78
struct xt_table;
#line 78 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct inet_peer_base *peers ;
   struct tcpm_hash_bucket *tcp_metrics_hash ;
   unsigned int tcp_metrics_hash_log ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   kgid_t sysctl_ping_group_range[2U] ;
   long sysctl_tcp_mem[3U] ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 77 "include/net/netns/ipv4.h"
struct neighbour;
#line 77 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , struct sock * , struct sk_buff * , u32  ) ;
   void (*redirect)(struct dst_entry * , struct sock * , struct sk_buff * ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , struct sk_buff * ,
                                     void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 73 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 31 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 31
struct rt6_info;
#line 31
struct rt6_statistics;
#line 31
struct fib6_table;
#line 31 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 72 "include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};
#line 80
struct sctp_mib;
#line 81 "include/net/netns/ipv6.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics[1U] ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 130 "include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 104 "include/linux/in.h"
union __anonunion_in6_u_210 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 104 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_210 in6_u ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   umode_t mode ;
   nlink_t nlink ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
   spinlock_t pde_unload_lock ;
   u8 namelen ;
   char name[] ;
};
#line 326 "include/linux/netfilter.h"
struct nlattr;
#line 341
struct ebt_table;
#line 342 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 32 "include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};
#line 23 "include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 28 "include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};
#line 42 "include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};
#line 47 "include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 52 "include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};
#line 63
struct ip_conntrack_stat;
#line 63
struct nf_ct_event_notifier;
#line 63
struct nf_exp_event_notifier;
#line 63 "include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   struct nf_ip_net nf_ct_proto ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
};
#line 486 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63
struct netns_ipvs;
#line 64 "include/net/netns/xfrm.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct sock *diag_nlsk ;
   atomic_t rt_genid ;
};
#line 115 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   void *private ;
};
#line 34 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 330 "include/net/net_namespace.h"
struct dsa_chip_data {
   struct device *mii_bus ;
   int sw_addr ;
   char *port_names[12U] ;
   s8 *rtable ;
};
#line 46 "include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 61
struct dsa_switch;
#line 61 "include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   __be16 tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};
#line 94
struct dsa_switch_driver;
#line 94
struct mii_bus;
#line 94 "include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct mii_bus *master_mii_bus ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};
#line 146 "include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   __be16 tag_protocol ;
   int priv_size ;
   char *(*probe)(struct mii_bus * , int  ) ;
   int (*setup)(struct dsa_switch * ) ;
   int (*set_addr)(struct dsa_switch * , u8 * ) ;
   int (*phy_read)(struct dsa_switch * , int  , int  ) ;
   int (*phy_write)(struct dsa_switch * , int  , int  , u16  ) ;
   void (*poll_link)(struct dsa_switch * ) ;
   void (*get_strings)(struct dsa_switch * , int  , uint8_t * ) ;
   void (*get_ethtool_stats)(struct dsa_switch * , int  , uint64_t * ) ;
   int (*get_sset_count)(struct dsa_switch * ) ;
};
#line 200 "include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 80 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 100 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 123 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 138 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 167 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 41 "include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_setmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   int (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   int (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 103 "include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct idr_layer {
   unsigned long bitmap ;
   struct idr_layer *ary[64U] ;
   int count ;
   int layer ;
   struct callback_head callback_head ;
};
#line 58 "include/linux/idr.h"
struct idr {
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   spinlock_t lock ;
};
#line 154 "include/linux/idr.h"
struct xattr_handler {
   char const   *prefix ;
   int flags ;
   size_t (*list)(struct dentry * , char * , size_t  , char const   * , size_t  ,
                  int  ) ;
   int (*get)(struct dentry * , char const   * , void * , size_t  , int  ) ;
   int (*set)(struct dentry * , char const   * , void const   * , size_t  , int  ,
              int  ) ;
};
#line 53 "include/linux/xattr.h"
struct simple_xattrs {
   struct list_head head ;
   spinlock_t lock ;
};
#line 98
struct cgroupfs_root;
#line 99
struct cgroup_subsys;
#line 100
struct cgroup;
#line 101
struct css_id;
#line 62 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
   struct work_struct dput_work ;
};
#line 147 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head files ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head allcg_node ;
   struct list_head cft_q_node ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct callback_head callback_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct simple_xattrs xattrs ;
};
#line 220 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct callback_head callback_head ;
};
#line 264 "include/linux/cgroup.h"
struct cgroup_map_cb {
   int (*fill)(struct cgroup_map_cb * , char const   * , u64  ) ;
   void *state ;
};
#line 274 "include/linux/cgroup.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct simple_xattrs xattrs ;
   int (*open)(struct inode * , struct file * ) ;
   ssize_t (*read)(struct cgroup * , struct cftype * , struct file * , char * , size_t  ,
                   loff_t * ) ;
   u64 (*read_u64)(struct cgroup * , struct cftype * ) ;
   s64 (*read_s64)(struct cgroup * , struct cftype * ) ;
   int (*read_map)(struct cgroup * , struct cftype * , struct cgroup_map_cb * ) ;
   int (*read_seq_string)(struct cgroup * , struct cftype * , struct seq_file * ) ;
   ssize_t (*write)(struct cgroup * , struct cftype * , struct file * , char const   * ,
                    size_t  , loff_t * ) ;
   int (*write_u64)(struct cgroup * , struct cftype * , u64  ) ;
   int (*write_s64)(struct cgroup * , struct cftype * , s64  ) ;
   int (*write_string)(struct cgroup * , struct cftype * , char const   * ) ;
   int (*trigger)(struct cgroup * , unsigned int  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*register_event)(struct cgroup * , struct cftype * , struct eventfd_ctx * ,
                         char const   * ) ;
   void (*unregister_event)(struct cgroup * , struct cftype * , struct eventfd_ctx * ) ;
};
#line 391 "include/linux/cgroup.h"
struct cftype_set {
   struct list_head node ;
   struct cftype *cfts ;
};
#line 440
struct cgroup_taskset;
#line 450 "include/linux/cgroup.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*create)(struct cgroup * ) ;
   int (*pre_destroy)(struct cgroup * ) ;
   void (*destroy)(struct cgroup * ) ;
   int (*can_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*cancel_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*fork)(struct task_struct * ) ;
   void (*exit)(struct cgroup * , struct cgroup * , struct task_struct * ) ;
   void (*post_clone)(struct cgroup * ) ;
   void (*bind)(struct cgroup * ) ;
   int subsys_id ;
   int active ;
   int disabled ;
   int early_init ;
   bool use_id ;
   bool __DEPRECATED_clear_css_refs ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   char const   *name ;
   struct cgroupfs_root *root ;
   struct list_head sibling ;
   struct idr idr ;
   spinlock_t id_lock ;
   struct list_head cftsets ;
   struct cftype *base_cftypes ;
   struct cftype_set base_cftset ;
   struct module *module ;
};
#line 642 "include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 99 "include/linux/security.h"
struct xfrm_policy;
#line 100
struct xfrm_state;
#line 120
struct request_sock;
#line 3031
struct mnt_namespace;
#line 3032
struct ipc_namespace;
#line 3033 "include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns ;
   struct net *net_ns ;
};
#line 40 "include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 117 "include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 77 "include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr  const  *nlh ;
   int (*dump)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};
#line 137 "include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 39 "include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 423 "include/uapi/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
   __u32 spoofchk ;
};
#line 26 "include/linux/if_link.h"
struct netpoll_info;
#line 27
struct phy_device;
#line 28
struct wireless_dev;
#line 29
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 111 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 130 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 193
struct neigh_parms;
#line 213 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 218 "include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 247 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 339
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 387 "include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 388 "include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 496
struct Qdisc;
#line 496 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
};
#line 560 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 572 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 584 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 636 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 646 "include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 659 "include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 670 "include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 681 "include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 697 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * , gfp_t  ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device * , struct netdev_fcoe_hbainfo * ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   netdev_features_t (*ndo_fix_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_set_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_neigh_construct)(struct neighbour * ) ;
   void (*ndo_neigh_destroy)(struct neighbour * ) ;
   int (*ndo_fdb_add)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ,
                      u16  ) ;
   int (*ndo_fdb_del)(struct ndmsg * , struct net_device * , unsigned char const   * ) ;
   int (*ndo_fdb_dump)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
                       int  ) ;
};
#line 1013
struct iw_handler_def;
#line 1013
struct iw_public_data;
#line 1013
struct vlan_info;
#line 1013
struct in_device;
#line 1013
struct dn_dev;
#line 1013
struct inet6_dev;
#line 1013
struct cpu_rmap;
#line 1013
struct pcpu_lstats;
#line 1013
struct pcpu_tstats;
#line 1013
struct pcpu_dstats;
#line 1013 "include/linux/netdevice.h"
union __anonunion_ldv_36122_219 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1013
struct garp_port;
#line 1013
struct rtnl_link_ops;
#line 1013 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char neigh_priv_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   struct net_device *master ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct cpu_rmap *rx_cpu_rmap ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned char reg_state ;
   bool dismantle ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion_ldv_36122_219 ldv_36122 ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
   int group ;
   struct pm_qos_request pm_qos_req ;
};
#line 402 "include/linux/memcontrol.h"
struct res_counter {
   unsigned long long usage ;
   unsigned long long max_usage ;
   unsigned long long limit ;
   unsigned long long soft_limit ;
   unsigned long long failcnt ;
   spinlock_t lock ;
   struct res_counter *parent ;
};
#line 228 "include/linux/res_counter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 19 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   unsigned int (*bpf_func)(struct sk_buff  const  * , struct sock_filter  const  * ) ;
   struct callback_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 32 "include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long _key ;
};
#line 89 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 27 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
};
#line 133
struct neigh_table;
#line 133 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len_bytes ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 119 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   int (*connected_output)(struct neighbour * , struct sk_buff * ) ;
};
#line 127 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 137 "include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 150 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32 * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 406 "include/net/neighbour.h"
union __anonunion_ldv_38967_224 {
   unsigned long expires ;
   struct dst_entry *from ;
};
#line 406
struct dn_route;
#line 406 "include/net/neighbour.h"
union __anonunion_ldv_38992_225 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 406 "include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   union __anonunion_ldv_38967_224 ldv_38967 ;
   struct dst_entry *path ;
   void *__pad0 ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_38992_225 ldv_38992 ;
};
#line 123 "include/net/sock.h"
struct __anonstruct_socket_lock_t_226 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 123 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_226 socket_lock_t;
#line 123
struct proto;
#line 124 "include/net/sock.h"
union __anonunion_ldv_39207_227 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 124 "include/net/sock.h"
union __anonunion_ldv_39215_228 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 124 "include/net/sock.h"
union __anonunion_ldv_39222_229 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 124 "include/net/sock.h"
struct sock_common {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
   union __anonunion_ldv_39207_227 ldv_39207 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_39215_228 ldv_39215 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_ldv_39222_229 ldv_39222 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 190
struct cg_proto;
#line 191 "include/net/sock.h"
struct __anonstruct_sk_backlog_230 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 191 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_230 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct sk_buff_head sk_async_wait_queue ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 840
struct request_sock_ops;
#line 841
struct timewait_sock_ops;
#line 842
struct inet_hashinfo;
#line 843
struct raw_hashinfo;
#line 844
struct udp_table;
#line 844 "include/net/sock.h"
union __anonunion_h_231 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 844 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*release_cb)(struct sock * ) ;
   void (*mtu_reduced)(struct sock * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_231 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup * , struct cgroup_subsys * ) ;
   void (*destroy_cgroup)(struct mem_cgroup * ) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup * ) ;
};
#line 970 "include/net/sock.h"
struct cg_proto {
   void (*enter_memory_pressure)(struct sock * ) ;
   struct res_counter *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};
#line 55 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 183
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_AHEAD = 22,
    C_BEHIND = 23,
    C_MASK = 31
} ;
#line 211
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 224 "include/linux/drbd.h"
struct __anonstruct_ldv_40604_232 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   unsigned short _pad : 9 ;
};
#line 224 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_40604_232 ldv_40604 ;
   unsigned int i ;
};
#line 296
enum drbd_state_rv {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_O_VOL_PEER_PRI = -20,
    SS_AFTER_LAST_ERROR = -21
} ;
#line 346
struct crypto_ablkcipher;
#line 347
struct crypto_async_request;
#line 348
struct crypto_aead;
#line 349
struct crypto_blkcipher;
#line 350
struct crypto_hash;
#line 351
struct crypto_rng;
#line 352
struct crypto_tfm;
#line 353
struct crypto_type;
#line 354
struct aead_givcrypt_request;
#line 355
struct skcipher_givcrypt_request;
#line 129 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 138 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 151 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 177 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 191 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 196 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 215 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 230 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 247 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 256 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 262 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 271 "include/linux/crypto.h"
union __anonunion_cra_u_233 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 271 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_233 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 325 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 345 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 360 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 369 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 377 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 389 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 396 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 404 "include/linux/crypto.h"
union __anonunion_crt_u_234 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 404 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_234 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 433 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 437 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 453 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 457 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 169 "include/linux/jhash.h"
struct request_values {

};
#line 172 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 371 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 80 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 89 "include/linux/genhd.h"
struct partition_meta_info {
   u8 uuid[16U] ;
   u8 volname[64U] ;
};
#line 97 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   atomic_t in_flight[2U] ;
   struct disk_stats *dkstats ;
   atomic_t ref ;
   struct callback_head callback_head ;
};
#line 151 "include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 158
struct disk_events;
#line 159
struct timer_rand_state;
#line 159
struct blk_integrity;
#line 159 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , umode_t * ) ;
   unsigned int events ;
   unsigned int async_events ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 71 "include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 11 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 54 "include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char tagged_writepages : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
};
#line 81
struct bdi_writeback;
#line 39 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 48 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   spinlock_t list_lock ;
};
#line 65 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct percpu_counter bdi_stat[4U] ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 77 "include/linux/mempool.h"
union __anonunion_ldv_44034_241 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 77 "include/linux/mempool.h"
union __anonunion_ldv_44038_242 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 77 "include/linux/mempool.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_ldv_44034_241 ldv_44034 ;
   union __anonunion_ldv_44038_242 ldv_44038 ;
   unsigned int flags ;
};
#line 92 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 91 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 296 "include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t *bio_pool ;
   mempool_t *bio_integrity_pool ;
   mempool_t *bvec_pool ;
};
#line 415 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/uapi/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 22 "include/linux/bsg.h"
struct elevator_queue;
#line 24
struct blk_trace;
#line 25
struct request;
#line 27
struct bsg_job;
#line 28
struct blkcg_gq;
#line 47 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 48 "include/linux/blkdev.h"
struct request_list {
   struct request_queue *q ;
   struct blkcg_gq *blkg ;
   int count[2U] ;
   int starved[2U] ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
   unsigned int flags ;
};
#line 67
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 79 "include/linux/blkdev.h"
union __anonunion_ldv_44485_243 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 79 "include/linux/blkdev.h"
struct __anonstruct_elv_245 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 79 "include/linux/blkdev.h"
struct __anonstruct_flush_246 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 79 "include/linux/blkdev.h"
union __anonunion_ldv_44496_244 {
   struct __anonstruct_elv_245 elv ;
   struct __anonstruct_flush_246 flush ;
};
#line 79 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_44485_243 ldv_44485 ;
   union __anonunion_ldv_44496_244 ldv_44496 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   struct request_list *rl ;
   unsigned long long start_time_ns ;
   unsigned long long io_start_time_ns ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 10 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 15 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 17 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 19 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 22 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 24 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 27 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 29 "include/linux/elevator.h"
typedef void elevator_init_icq_fn(struct io_cq * );
#line 30 "include/linux/elevator.h"
typedef void elevator_exit_icq_fn(struct io_cq * );
#line 31 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , struct bio * ,
                                gfp_t  );
#line 33 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 34 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 35 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 37 "include/linux/elevator.h"
typedef int elevator_init_fn(struct request_queue * );
#line 38 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 39 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_init_icq_fn *elevator_init_icq_fn ;
   elevator_exit_icq_fn *elevator_exit_icq_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
};
#line 69 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 77 "include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
   char icq_cache_name[21U] ;
   struct list_head list ;
};
#line 98 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 217 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 218 "include/linux/blkdev.h"
typedef void make_request_fn(struct request_queue * , struct bio * );
#line 219 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 220 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 221 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 229 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 231 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 232 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 233 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 234 "include/linux/blkdev.h"
typedef int bsg_job_fn(struct bsg_job * );
#line 235
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 242 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 248 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 257 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char cluster ;
   unsigned char discard_zeroes_data ;
};
#line 286
struct throtl_data;
#line 286 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   int nr_rqs[2U] ;
   int nr_rqs_elvpriv ;
   struct request_list root_rl ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct delayed_work delay_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   unsigned int flush_flags ;
   unsigned char flush_not_queueable : 1 ;
   unsigned char flush_queue_delayed : 1 ;
   unsigned char flush_pending_idx : 1 ;
   unsigned char flush_running_idx : 1 ;
   unsigned long flush_pending_since ;
   struct list_head flush_queue[2U] ;
   struct list_head flush_data_in_flight ;
   struct request flush_rq ;
   struct mutex sysfs_lock ;
   int bypass_depth ;
   bsg_job_fn *bsg_job_fn ;
   int bsg_job_size ;
   struct bsg_class_device bsg_dev ;
   struct list_head all_q_node ;
   struct throtl_data *td ;
};
#line 952 "include/linux/blkdev.h"
struct blk_plug {
   unsigned long magic ;
   struct list_head list ;
   struct list_head cb_list ;
   unsigned int should_sort ;
};
#line 1299 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1331 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1332 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1333 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1334 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1335 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1394 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   unsigned int (*check_events)(struct gendisk * , unsigned int  ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 160 "include/uapi/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 97 "include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 106 "include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 138 "include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   spinlock_t aca_lock ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};
#line 150 "include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6[1U] ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 161 "include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct neigh_parms *nd_parms ;
   struct inet6_dev *next ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 732 "include/net/ipv6.h"
union __anonunion_ldv_47152_253 {
   __be32 a4 ;
   __be32 a6[4U] ;
};
#line 732 "include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_ldv_47152_253 ldv_47152 ;
};
#line 24 "include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_47167_254 {
   struct list_head gc_list ;
   struct callback_head gc_rcu ;
};
#line 29 "include/net/inetpeer.h"
struct __anonstruct_ldv_47172_256 {
   atomic_t rid ;
   atomic_t ip_id_count ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_47175_255 {
   struct __anonstruct_ldv_47172_256 ldv_47172 ;
   struct callback_head rcu ;
   struct inet_peer *gc_next ;
};
#line 29 "include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[14U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   union __anonunion_ldv_47167_254 ldv_47167 ;
   union __anonunion_ldv_47175_255 ldv_47175 ;
   __u32 dtime ;
   atomic_t refcnt ;
};
#line 61 "include/net/inetpeer.h"
struct inet_peer_base {
   struct inet_peer *root ;
   seqlock_t lock ;
   u32 flush_seq ;
   int total ;
};
#line 50 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   __be32 rt_gateway ;
   u32 rt_pmtu ;
   struct list_head rt_uncached ;
};
#line 316 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1716 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
   unsigned int lc_new_number ;
};
#line 175 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct list_head to_be_changed ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int max_pending_changes ;
   unsigned int pending_changes ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long locked ;
   unsigned long changed ;
   unsigned long flags ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 99 "include/linux/drbd_genl.h"
struct disk_conf {
   char backing_dev[128U] ;
   __u32 backing_dev_len ;
   char meta_dev[128U] ;
   __u32 meta_dev_len ;
   __s32 meta_dev_idx ;
   __u64 disk_size ;
   __u32 max_bio_bvecs ;
   __u32 on_io_error ;
   __u32 fencing ;
   __u32 resync_rate ;
   __s32 resync_after ;
   __u32 al_extents ;
   __u32 c_plan_ahead ;
   __u32 c_delay_target ;
   __u32 c_fill_target ;
   __u32 c_max_rate ;
   __u32 c_min_rate ;
   char disk_barrier ;
   char disk_flushes ;
   char disk_drain ;
   char md_flushes ;
   __u32 disk_timeout ;
   __u32 read_balancing ;
   char al_updates ;
};
#line 106 "include/linux/drbd_genl.h"
struct res_opts {
   char cpu_mask[32U] ;
   __u32 cpu_mask_len ;
   __u32 on_no_data ;
};
#line 139 "include/linux/drbd_genl.h"
struct net_conf {
   char shared_secret[64U] ;
   __u32 shared_secret_len ;
   char cram_hmac_alg[64U] ;
   __u32 cram_hmac_alg_len ;
   char integrity_alg[64U] ;
   __u32 integrity_alg_len ;
   char verify_alg[64U] ;
   __u32 verify_alg_len ;
   char csums_alg[64U] ;
   __u32 csums_alg_len ;
   __u32 wire_protocol ;
   __u32 connect_int ;
   __u32 timeout ;
   __u32 ping_int ;
   __u32 ping_timeo ;
   __u32 sndbuf_size ;
   __u32 rcvbuf_size ;
   __u32 ko_count ;
   __u32 max_buffers ;
   __u32 max_epoch_size ;
   __u32 unplug_watermark ;
   __u32 after_sb_0p ;
   __u32 after_sb_1p ;
   __u32 after_sb_2p ;
   __u32 rr_conflict ;
   __u32 on_congestion ;
   __u32 cong_fill ;
   __u32 cong_extents ;
   char two_primaries ;
   char discard_my_data ;
   char tcp_cork ;
   char always_asbp ;
   char tentative ;
   char use_rle ;
};
#line 375
struct drbd_conf;
#line 376
struct drbd_tconn;
#line 377
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12,
    CS_LOCAL_ONLY = 16,
    CS_DC_ROLE = 32,
    CS_DC_PEER = 64,
    CS_DC_CONN = 128,
    CS_DC_DISK = 256,
    CS_DC_PDSK = 512,
    CS_DC_SUSP = 1024,
    CS_DC_MASK = 992,
    CS_IGN_OUTD_FAIL = 2048
} ;
#line 394 "include/linux/drbd_genl.h"
struct __anonstruct_ldv_50103_260 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char _unused : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned short _pad : 11 ;
};
#line 394 "include/linux/drbd_genl.h"
union drbd_dev_state {
   struct __anonstruct_ldv_50103_260 ldv_50103 ;
   unsigned int i ;
};
#line 499 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_thread_state {
    NONE = 0,
    RUNNING = 1,
    EXITING = 2,
    RESTARTING = 3
} ;
#line 506 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_tconn *tconn ;
   int reset_cpu_mask ;
   char name[9U] ;
};
#line 534 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_50388_261 {
   struct drbd_conf *mdev ;
   struct drbd_tconn *tconn ;
};
#line 534 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_work * , int  ) ;
   union __anonunion_ldv_50388_261 ldv_50388 ;
};
#line 580 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct drbd_tconn *tconn ;
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 662
struct drbd_bitmap;
#line 663
enum bm_flag {
    BM_P_VMALLOCED = 65536,
    BM_LOCKED_MASK = 15,
    BM_DONT_CLEAR = 1,
    BM_DONT_SET = 2,
    BM_DONT_TEST = 4,
    BM_IS_LOCKED = 8,
    BM_LOCKED_TEST_ALLOWED = 11,
    BM_LOCKED_SET_ALLOWED = 9,
    BM_LOCKED_CHANGE_ALLOWED = 8
} ;
#line 675 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   spinlock_t q_lock ;
   wait_queue_head_t q_wait ;
};
#line 736 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct mutex mutex ;
   struct socket *socket ;
   void *sbuf ;
   void *rbuf ;
};
#line 745 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   spinlock_t uuid_lock ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 759 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct drbd_md md ;
   struct disk_conf *disk_conf ;
   sector_t known_size ;
};
#line 772 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   unsigned int done ;
   int error ;
};
#line 777 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   enum bm_flag flags ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 785
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2
} ;
#line 791 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct fifo_buffer {
   unsigned int head_index ;
   unsigned int size ;
   int total ;
   int values[0U] ;
};
#line 815 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct __anonstruct_send_263 {
   bool seen_any_write_yet ;
   int current_epoch_nr ;
   unsigned int current_epoch_writes ;
};
#line 815 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tconn {
   char *name ;
   struct list_head all_tconn ;
   struct kref kref ;
   struct idr volumes ;
   enum drbd_conns cstate ;
   unsigned char susp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   struct mutex cstate_mutex ;
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct mutex conf_update ;
   wait_queue_head_t ping_wait ;
   struct res_opts res_opts ;
   struct __kernel_sockaddr_storage my_addr ;
   int my_addr_len ;
   struct __kernel_sockaddr_storage peer_addr ;
   int peer_addr_len ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   spinlock_t req_lock ;
   struct list_head transfer_log ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_tfm ;
   struct crypto_hash *peer_integrity_tfm ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   void *int_dig_in ;
   void *int_dig_vv ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   atomic_t current_tle_nr ;
   unsigned int current_tle_writes ;
   unsigned long last_reconnect_jif ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   cpumask_var_t cpu_mask ;
   struct drbd_work_queue sender_work ;
   struct __anonstruct_send_263 send ;
};
#line 893 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   struct drbd_tconn *tconn ;
   int vnr ;
   struct kref kref ;
   unsigned long flags ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   unsigned long last_reattach_jif ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work go_diskless ;
   struct drbd_work md_sync_work ;
   struct drbd_work start_resync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   struct timer_list start_resync_timer ;
   struct timer_list request_timer ;
   union drbd_state new_state_tmp ;
   union drbd_dev_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   struct rb_root read_requests ;
   struct rb_root write_requests ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_same_csum ;
   unsigned long rs_mark_left[8U] ;
   unsigned long rs_mark_time[8U] ;
   int rs_last_mark ;
   unsigned long rs_last_bcast ;
   sector_t ov_start_sector ;
   sector_t ov_stop_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   int next_barrier_nr ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   atomic_t pp_in_use_by_net ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct drbd_md_io md_io ;
   atomic_t md_io_in_use ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex own_state_mutex ;
   struct mutex *state_mutex ;
   char congestion_reason ;
   atomic_t rs_sect_in ;
   atomic_t rs_sect_ev ;
   int rs_last_sect_ev ;
   int rs_last_events ;
   int c_sync_rate ;
   struct fifo_buffer *rs_plan_s ;
   int rs_in_flight ;
   atomic_t ap_in_flight ;
   unsigned int peer_max_bio_size ;
   unsigned int local_max_bio_size ;
};
#line 1666
enum drbd_force_detach_flags {
    DRBD_READ_ERROR = 0,
    DRBD_WRITE_ERROR = 1,
    DRBD_META_IO_ERROR = 2,
    DRBD_FORCE_DETACH = 3
} ;
#line 2335 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   wait_queue_head_t bm_io_wait ;
   enum bm_flag bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 925 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct bm_aio_ctx {
   struct drbd_conf *mdev ;
   atomic_t in_flight ;
   unsigned int done ;
   unsigned int flags ;
   int error ;
   struct kref kref ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 241 "include/linux/proc_fs.h"
struct proc_ns_operations {
   char const   *name ;
   int type ;
   void *(*get)(struct task_struct * ) ;
   void (*put)(void * ) ;
   int (*install)(struct nsproxy * , void * ) ;
};
#line 254 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct dentry * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 260 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   void *ns ;
   struct proc_ns_operations  const  *ns_ops ;
   struct inode vfs_inode ;
};
#line 176 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 1153 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 113 "include/linux/drbd.h"
enum drbd_ret_code {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TOO_SMALL = 111,
    ERR_MD_DISK_TOO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD_IMPOSSIBLE = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_RESYNC_AFTER = 132,
    ERR_RESYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    ERR_STONITH_AND_PROT_A = 154,
    ERR_CONG_NOT_PROTO_A = 155,
    ERR_PIC_AFTER_DEP = 156,
    ERR_PIC_PEER_DEP = 157,
    ERR_RES_NOT_KNOWN = 158,
    ERR_RES_IN_USE = 159,
    ERR_MINOR_CONFIGURED = 160,
    ERR_MINOR_EXISTS = 161,
    ERR_INVALID_REQUEST = 162,
    ERR_NEED_APV_100 = 163,
    ERR_NEED_ALLOW_TWO_PRI = 164,
    ERR_MD_UNCLEAN = 165,
    AFTER_LAST_ERR_CODE = 166
} ;
#line 169 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packet {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_SUPERSEDED = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_OUT_OF_SYNC = 40,
    P_RS_CANCEL = 41,
    P_CONN_ST_CHG_REQ = 42,
    P_CONN_ST_CHG_REPLY = 43,
    P_RETRY_WRITE = 44,
    P_PROTOCOL_UPDATE = 45,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_INITIAL_META = 65521,
    P_INITIAL_DATA = 65522,
    P_CONNECTION_FEATURES = 65534
} ;
#line 376 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   u32 barrier ;
   u32 pad ;
};
#line 543 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_interval {
   struct rb_node rb ;
   sector_t sector ;
   unsigned int size ;
   sector_t end ;
   signed char local : 1 ;
   signed char waiting : 1 ;
};
#line 547 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct bio *private_bio ;
   struct drbd_interval i ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long start_time ;
   atomic_t completion_ref ;
   struct kref kref ;
   unsigned int rq_state ;
};
#line 600 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 606 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 611 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_50490_262 {
   u64 block_id ;
   struct digest_info *digest ;
};
#line 611 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_peer_request {
   struct drbd_work w ;
   struct drbd_epoch *epoch ;
   struct page *pages ;
   atomic_t pending_bios ;
   struct drbd_interval i ;
   unsigned long flags ;
   union __anonunion_ldv_50490_262 ldv_50490 ;
};
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    CREATED = 0,
    TO_BE_SENT = 1,
    TO_BE_SUBMITTED = 2,
    QUEUE_FOR_NET_WRITE = 3,
    QUEUE_FOR_NET_READ = 4,
    QUEUE_FOR_SEND_OOS = 5,
    SEND_CANCELED = 6,
    SEND_FAILED = 7,
    HANDED_OVER_TO_NETWORK = 8,
    OOS_HANDED_TO_NETWORK = 9,
    CONNECTION_LOST_WHILE_PENDING = 10,
    READ_RETRY_REMOTE_CANCELED = 11,
    RECV_ACKED_BY_PEER = 12,
    WRITE_ACKED_BY_PEER = 13,
    WRITE_ACKED_BY_PEER_AND_SIS = 14,
    CONFLICT_RESOLVED = 15,
    POSTPONE_WRITE = 16,
    NEG_ACKED = 17,
    BARRIER_ACKED = 18,
    DATA_RECEIVED = 19,
    READ_COMPLETED_WITH_ERROR = 20,
    READ_AHEAD_COMPLETED_WITH_ERROR = 21,
    WRITE_COMPLETED_WITH_ERROR = 22,
    ABORT_DISK_IO = 23,
    COMPLETED_OK = 24,
    RESEND = 25,
    FAIL_FROZEN_DISK_IO = 26,
    RESTART_FROZEN_DISK_IO = 27,
    NOTHING = 28
} ;
#line 261 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 182 "include/uapi/linux/in.h"
struct sockaddr_in {
   __kernel_sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 37 "include/uapi/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 74 "include/linux/drbd.h"
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 237 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 271 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header80 {
   u32 magic ;
   u16 command ;
   u16 length ;
};
#line 297 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header95 {
   u16 magic ;
   u16 command ;
   u32 length ;
};
#line 304 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header100 {
   u32 magic ;
   u16 volume ;
   u16 command ;
   u32 length ;
   u32 pad ;
};
#line 314 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 332 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 347 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 354 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_connection_features {
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserved[7U] ;
};
#line 381 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   u32 barrier ;
   u32 set_size ;
};
#line 400 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_95 {
   u32 resync_rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
   u32 c_plan_ahead ;
   u32 c_delay_target ;
   u32 c_fill_target ;
   u32 c_max_rate ;
};
#line 415 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 427 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   u64 uuid[6U] ;
};
#line 432 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   u64 uuid ;
};
#line 436 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_bio_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 445 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   u32 state ;
};
#line 449 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   u32 mask ;
   u32 val ;
};
#line 454 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   u32 retcode ;
};
#line 468 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_desc {
   u64 sector ;
   u32 blksize ;
   u32 pad ;
};
#line 474
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 478 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   u8 encoding ;
   u8 code[0U] ;
};
#line 593
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BECAME_LAST = 2,
    EV_CLEANUP = 32
} ;
#line 1051
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1434
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct packet_info {
   enum drbd_packet cmd ;
   unsigned int size ;
   unsigned int vnr ;
   void *data ;
};
#line 65 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 661 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct accept_wait_data {
   struct drbd_tconn *tconn ;
   struct socket *s_listen ;
   struct completion door_bell ;
   void (*original_sk_state_change)(struct sock * ) ;
};
#line 4338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct data_cmd {
   int expect_payload ;
   size_t pkt_size ;
   int (*fn)(struct drbd_tconn * , struct packet_info * ) ;
};
#line 5215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*fn)(struct drbd_tconn * , struct packet_info * ) ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 93 "include/linux/drbd.h"
enum drbd_on_congestion {
    OC_BLOCK = 0,
    OC_PULL_AHEAD = 1,
    OC_DISCONNECT = 2
} ;
#line 99
enum drbd_read_balancing {
    RB_PREFER_LOCAL = 0,
    RB_PREFER_REMOTE = 1,
    RB_ROUND_ROBIN = 2,
    RB_LEAST_PENDING = 3,
    RB_CONGESTED_REMOTE = 4,
    RB_32K_STRIPING = 5,
    RB_64K_STRIPING = 6,
    RB_128K_STRIPING = 7,
    RB_256K_STRIPING = 8,
    RB_512K_STRIPING = 9,
    RB_1M_STRIPING = 10
} ;
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 34 "include/linux/drbd_genl_api.h"
enum drbd_state_info_bcast_reason {
    SIB_GET_STATUS_REPLY = 1,
    SIB_STATE_CHANGE = 2,
    SIB_HELPER_PRE = 3,
    SIB_HELPER_POST = 4,
    SIB_SYNC_PROGRESS = 5
} ;
#line 1598 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct __anonstruct_ldv_51330_265 {
   char *helper_name ;
   unsigned int helper_exit_code ;
};
#line 1598 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct __anonstruct_ldv_51334_266 {
   union drbd_state os ;
   union drbd_state ns ;
};
#line 1598 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_51335_264 {
   struct __anonstruct_ldv_51330_265 ldv_51330 ;
   struct __anonstruct_ldv_51334_266 ldv_51334 ;
};
#line 1598 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct sib_info {
   enum drbd_state_info_bcast_reason sib_reason ;
   union __anonunion_ldv_51335_264 ldv_51335 ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction_on_disk {
   __be32 magic ;
   __be32 tr_number ;
   __be32 crc32c ;
   __be16 transaction_type ;
   __be16 n_updates ;
   __be16 context_size ;
   __be16 context_start_slot_nr ;
   __be32 __reserved[4U] ;
   __be16 update_slot_nr[64U] ;
   __be32 update_extent_nr[64U] ;
   __be32 context[919U] ;
};
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct completion event ;
   int err ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 266
struct workqueue_struct;
#line 64 "include/uapi/linux/net.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 2204 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct retry_worker {
   struct workqueue_struct *wq ;
   struct work_struct worker ;
   spinlock_t lock ;
   struct list_head writes ;
};
#line 2847 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 la_peer_max_bio_size ;
   u32 reserved_u32[3U] ;
};
#line 3488 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 38 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   int wait ;
   int retval ;
   int (*init)(struct subprocess_info * , struct cred * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 84 "include/linux/nsproxy.h"
struct scm_creds {
   u32 pid ;
   kuid_t uid ;
   kgid_t gid ;
};
#line 17 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct scm_creds creds ;
   __u32 portid ;
   __u32 dst_group ;
   struct sock *ssk ;
};
#line 61 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_NOT_AVAIL = -1,
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 56 "include/linux/prefetch.h"
union __anonunion_ldv_49550_259 {
   __u32 flags ;
   __s32 ret_code ;
};
#line 56 "include/linux/prefetch.h"
struct drbd_genlmsghdr {
   __u32 minor ;
   union __anonunion_ldv_49550_259 ldv_49550 ;
};
#line 42 "include/linux/drbd_genl_api.h"
struct genlmsghdr {
   __u8 cmd ;
   __u8 version ;
   __u16 reserved ;
};
#line 89 "include/linux/drbd_genl.h"
struct drbd_cfg_context {
   __u32 ctx_volume ;
   char ctx_resource_name[128U] ;
   __u32 ctx_resource_name_len ;
   char ctx_my_addr[128U] ;
   __u32 ctx_my_addr_len ;
   char ctx_peer_addr[128U] ;
   __u32 ctx_peer_addr_len ;
};
#line 144 "include/linux/drbd_genl.h"
struct set_role_parms {
   char assume_uptodate ;
};
#line 178 "include/linux/drbd_genl.h"
struct resize_parms {
   __u64 resize_size ;
   char resize_force ;
   char no_resync ;
};
#line 182 "include/linux/drbd_genl.h"
struct state_info {
   __u32 sib_reason ;
   __u32 current_state ;
   __u64 capacity ;
   __u64 ed_uuid ;
   __u32 prev_state ;
   __u32 new_state ;
   char uuids[32U] ;
   __u32 uuids_len ;
   __u32 disk_flags ;
   __u64 bits_total ;
   __u64 bits_oos ;
   __u64 bits_rs_total ;
   __u64 bits_rs_failed ;
   char helper[32U] ;
   __u32 helper_len ;
   __u32 helper_exit_code ;
   __u64 send_cnt ;
   __u64 recv_cnt ;
   __u64 read_cnt ;
   __u64 writ_cnt ;
   __u64 al_writ_cnt ;
   __u64 bm_writ_cnt ;
   __u32 ap_bio_cnt ;
   __u32 ap_pending_cnt ;
   __u32 rs_pending_cnt ;
};
#line 188 "include/linux/drbd_genl.h"
struct start_ov_parms {
   __u64 ov_start_sector ;
   __u64 ov_stop_sector ;
};
#line 228 "include/linux/drbd_genl.h"
struct new_c_uuid_parms {
   char clear_bm ;
};
#line 233 "include/linux/drbd_genl.h"
struct timeout_parms {
   __u32 timeout_type ;
};
#line 237 "include/linux/drbd_genl.h"
struct disconnect_parms {
   char force_disconnect ;
};
#line 241 "include/linux/drbd_genl.h"
struct detach_parms {
   char force_detach ;
};
#line 138 "include/linux/kthread.h"
struct genl_family;
#line 138 "include/linux/kthread.h"
struct genl_multicast_group {
   struct genl_family *family ;
   struct list_head list ;
   char name[16U] ;
   u32 id ;
};
#line 24 "include/net/genetlink.h"
struct genl_ops;
#line 25
struct genl_info;
#line 26 "include/net/genetlink.h"
struct genl_family {
   unsigned int id ;
   unsigned int hdrsize ;
   char name[16U] ;
   unsigned int version ;
   unsigned int maxattr ;
   bool netnsok ;
   int (*pre_doit)(struct genl_ops * , struct sk_buff * , struct genl_info * ) ;
   void (*post_doit)(struct genl_ops * , struct sk_buff * , struct genl_info * ) ;
   struct nlattr **attrbuf ;
   struct list_head ops_list ;
   struct list_head family_list ;
   struct list_head mcast_groups ;
};
#line 64 "include/net/genetlink.h"
struct genl_info {
   u32 snd_seq ;
   u32 snd_portid ;
   struct nlmsghdr *nlhdr ;
   struct genlmsghdr *genlhdr ;
   void *userhdr ;
   struct nlattr **attrs ;
   struct net *_net ;
   void *user_ptr[2U] ;
};
#line 98 "include/net/genetlink.h"
struct genl_ops {
   u8 cmd ;
   u8 internal_flags ;
   unsigned int flags ;
   struct nla_policy  const  *policy ;
   int (*doit)(struct sk_buff * , struct genl_info * ) ;
   int (*dumpit)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   struct list_head ops_list ;
};
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct drbd_config_context {
   unsigned int minor ;
   unsigned int volume ;
   char *resource_name ;
   struct nlattr *my_addr ;
   struct nlattr *peer_addr ;
   struct sk_buff *reply_skb ;
   struct drbd_genlmsghdr *reply_dh ;
   struct drbd_conf *mdev ;
   struct drbd_tconn *tconn ;
};
#line 1856 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct crypto {
   struct crypto_hash *verify_tfm ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_tfm ;
};
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_interval.c.prepared"
struct rb_augment_callbacks {
   void (*propagate)(struct rb_node * , struct rb_node * ) ;
   void (*copy)(struct rb_node * , struct rb_node * ) ;
   void (*rotate)(struct rb_node * , struct rb_node * ) ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 41 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 49
enum sanitize_state_warnings {
    NO_WARNING = 0,
    ABORTED_ONLINE_VERIFY = 1,
    ABORTED_RESYNC = 2,
    CONNECTION_LOST_NEGOTIATING = 3,
    IMPLICITLY_UPGRADED_DISK = 4,
    IMPLICITLY_UPGRADED_PDSK = 5
} ;
#line 1512 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
struct after_conn_state_chg_work {
   struct drbd_work w ;
   enum drbd_conns oc ;
   union drbd_state ns_min ;
   union drbd_state ns_max ;
   enum chg_state_flags flags ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 70
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 72
  return;
}
}
#line 100 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 107
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 109
  return;
}
}
#line 121 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit_unlock(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 123
  __asm__  volatile   ("": : : "memory");
#line 124
  clear_bit((int )nr, addr);
#line 125
  return;
}
}
#line 197 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 201
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 204
  return (oldbit);
}
}
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 233
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 237
  return (oldbit);
}
}
#line 248 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 252
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 256
  return (oldbit);
}
}
#line 275 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 279
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 283
  return (oldbit);
}
}
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 320
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 324 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 328
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 333
  return (oldbit);
}
}
#line 11 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 22
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (4*32+23)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n6641:\n\t.popsection": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 11 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_zero_bit_le(void const   *addr , unsigned long size ,
                                                    unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 14
  tmp = find_next_zero_bit((unsigned long const   *)addr, size, offset);
#line 14
  return (tmp);
}
}
#line 17 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_bit_le(void const   *addr , unsigned long size ,
                                               unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 20
  tmp = find_next_bit((unsigned long const   *)addr, size, offset);
#line 20
  return (tmp);
}
}
#line 52 "include/asm-generic/bitops/le.h"
__inline static int test_bit_le(int nr , void const   *addr ) 
{ 
  int tmp ;

  {
#line 54
  tmp = variable_test_bit(nr, (unsigned long const volatile   *)addr);
#line 54
  return (tmp);
}
}
#line 87 "include/asm-generic/bitops/le.h"
__inline static int __test_and_set_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 89
  tmp = __test_and_set_bit(nr, (unsigned long volatile   *)addr);
#line 89
  return (tmp);
}
}
#line 92 "include/asm-generic/bitops/le.h"
__inline static int __test_and_clear_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 94
  tmp = __test_and_clear_bit(nr, (unsigned long volatile   *)addr);
#line 94
  return (tmp);
}
}
#line 64 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 66
  tmp = __arch_hweight64((__u64 )w);
#line 66
  return (tmp);
}
}
#line 119 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 53 "include/linux/dynamic_debug.h"
extern int __dynamic_dev_dbg(struct _ddebug * , struct device  const  * , char const   * 
                             , ...) ;
#line 150 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 71 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2953;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2953;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2953;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2953;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_2953: ;
#line 14
  return (pfo_ret__);
}
}
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 55
extern void *memset(void * , int  , size_t  ) ;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xadd_wrong_size(void) ;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_and_test(int i , atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 81
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; subl %2,%0; sete %1": "+m" (v->counter),
                       "=qm" (c): "ir" (i): "memory");
#line 84
  return ((int )c);
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __ret ;

  {
#line 182
  __ret = i;
#line 182
  switch (4UL) {
  case 1UL: 
#line 182
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5527;
  case 2UL: 
#line 182
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5527;
  case 4UL: 
#line 182
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5527;
  case 8UL: 
#line 182
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5527;
  default: 
#line 182
  __xadd_wrong_size();
  }
  ldv_5527: ;
#line 182
  return (__ret + i);
}
}
#line 201 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 203
  tmp = atomic_add_return(- i, v);
#line 203
  return (tmp);
}
}
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 208 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 211
  switch (8UL) {
  case 1UL: 
#line 211
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_5822;
  case 2UL: 
#line 211
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_5822;
  case 4UL: 
#line 211
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_5822;
  case 8UL: 
#line 211
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_5822;
  default: 
#line 211
  __bad_percpu_size();
  }
  ldv_5822: 
#line 211
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 213
  return (ti);
}
}
#line 333 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 337
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 342
extern int lock_is_held(struct lockdep_map * ) ;
#line 573
extern void lockdep_rcu_suspicious(char const   * , int const    , char const   * ) ;
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_6135.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_6135.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_6135.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_6135.rlock, flags);
#line 341
  return;
}
}
#line 63 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , char const   * , struct lock_class_key * ) ;
#line 139
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 568
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 570
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 573
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 134
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 168
extern int mutex_trylock(struct mutex * ) ;
#line 169
extern void mutex_unlock(struct mutex * ) ;
#line 163 "include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void) 
{ 
  struct thread_info *tmp ;

  {
#line 165
  tmp = current_thread_info();
#line 165
  tmp->preempt_count = tmp->preempt_count + 1;
#line 165
  __asm__  volatile   ("": : : "memory");
#line 166
  return;
}
}
#line 168 "include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void) 
{ 
  struct thread_info *tmp ;

  {
#line 170
  __asm__  volatile   ("": : : "memory");
#line 170
  tmp = current_thread_info();
#line 170
  tmp->preempt_count = tmp->preempt_count + -1;
#line 170
  __asm__  volatile   ("": : : "memory");
#line 171
  return;
}
}
#line 273
extern int rcu_is_cpu_idle(void) ;
#line 277
extern bool rcu_lockdep_current_cpu_online(void) ;
#line 287 "include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map ) 
{ 


  {
#line 289
  lock_acquire(map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 291
  return;
}
}
#line 292 "include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map ) 
{ 


  {
#line 294
  lock_release(map, 1, (unsigned long )((void *)0));
#line 296
  return;
}
}
#line 297
extern struct lockdep_map rcu_lock_map ;
#line 300
extern int debug_lockdep_rcu_enabled(void) ;
#line 322 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_held(void) 
{ 
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 324
  tmp = debug_lockdep_rcu_enabled();
#line 324
  if (tmp == 0) {
#line 325
    return (1);
  } else {

  }
#line 326
  tmp___0 = rcu_is_cpu_idle();
#line 326
  if (tmp___0 != 0) {
#line 327
    return (0);
  } else {

  }
#line 328
  tmp___1 = rcu_lockdep_current_cpu_online();
#line 328
  if (tmp___1) {
#line 328
    tmp___2 = 0;
  } else {
#line 328
    tmp___2 = 1;
  }
#line 328
  if (tmp___2) {
#line 329
    return (0);
  } else {

  }
#line 330
  tmp___3 = lock_is_held(& rcu_lock_map);
#line 330
  return (tmp___3);
}
}
#line 732 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 734
  __rcu_read_lock();
#line 736
  rcu_lock_acquire(& rcu_lock_map);
#line 737
  tmp = debug_lockdep_rcu_enabled();
#line 737
  if (tmp != 0 && ! __warned) {
#line 737
    tmp___0 = rcu_is_cpu_idle();
#line 737
    if (tmp___0 != 0) {
#line 737
      __warned = 1;
#line 737
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 738, "rcu_read_lock() used illegally while idle");
    } else {

    }
  } else {

  }
#line 740
  return;
}
}
#line 756 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 758
  tmp = debug_lockdep_rcu_enabled();
#line 758
  if (tmp != 0 && ! __warned) {
#line 758
    tmp___0 = rcu_is_cpu_idle();
#line 758
    if (tmp___0 != 0) {
#line 758
      __warned = 1;
#line 758
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 759, "rcu_read_unlock() used illegally while idle");
    } else {

    }
  } else {

  }
#line 760
  rcu_lock_release(& rcu_lock_map);
#line 762
  __rcu_read_unlock();
#line 763
  return;
}
}
#line 77 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 62 "include/linux/vmalloc.h"
extern void *__vmalloc(unsigned long  , gfp_t  , pgprot_t  ) ;
#line 66
extern void vfree(void const   * ) ;
#line 323 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 326 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 328
  tmp = alloc_pages_current(gfp_mask, order);
#line 328
  return (tmp);
}
}
#line 359
extern void __free_pages(struct page * , unsigned int  ) ;
#line 64 "include/linux/kref.h"
__inline static int kref_sub(struct kref *kref , unsigned int count , void (*release)(struct kref * ) ) 
{ 
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
#line 67
  __ret_warn_on = (unsigned long )release == (unsigned long )((void (*)(struct kref * ))0);
#line 67
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 67
  if (tmp != 0L) {
#line 67
    warn_slowpath_null("include/linux/kref.h", 67);
  } else {

  }
#line 67
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 69
  tmp___0 = atomic_sub_and_test((int )count, & kref->refcount);
#line 69
  if (tmp___0 != 0) {
#line 70
    (*release)(kref);
#line 71
    return (1);
  } else {

  }
#line 73
  return (0);
}
}
#line 93 "include/linux/kref.h"
__inline static int kref_put(struct kref *kref , void (*release)(struct kref * ) ) 
{ 
  int tmp ;

  {
#line 95
  tmp = kref_sub(kref, 1U, release);
#line 95
  return (tmp);
}
}
#line 41 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 917 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 921
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 923
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 927
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 741 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page  const  *page ) 
{ 


  {
#line 743
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 64L) << 12) + 0xffff880000000000UL));
}
}
#line 2355 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 324 "include/linux/sched.h"
extern void schedule(void) ;
#line 2596
extern int _cond_resched(void) ;
#line 185 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 220 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 267 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 282
  tmp___2 = __kmalloc(size, flags);
#line 282
  return (tmp___2);
}
}
#line 375 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 377
  tmp = kmalloc(size, flags | 32768U);
#line 377
  return (tmp);
}
}
#line 66 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
#line 68
  __rcu_read_lock();
#line 69
  tmp = lowmem_page_address((struct page  const  *)page);
#line 69
  return (tmp);
}
}
#line 73 "include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr ) 
{ 


  {
#line 75
  __rcu_read_unlock();
#line 76
  return;
}
}
#line 34 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 35
extern void mempool_free(void * , mempool_t * ) ;
#line 216 "include/linux/bio.h"
extern void bio_put(struct bio * ) ;
#line 244
extern void bio_endio(struct bio * , int  ) ;
#line 251
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 1033 "include/linux/blkdev.h"
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * ) ;
#line 120 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_state.h"
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) ;
#line 70 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 71
int fault_rate ;
#line 148
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 151 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 153
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 153
    tmp = _drbd_insert_fault(mdev, type);
#line 153
    if (tmp != 0U) {
#line 153
      tmp___0 = 1;
    } else {
#line 153
      tmp___0 = 0;
    }
  } else {
#line 153
    tmp___0 = 0;
  }
#line 153
  return (tmp___0);
}
}
#line 166
struct ratelimit_state drbd_ratelimit_state ;
#line 1066
char *drbd_task_to_thread_name(struct drbd_tconn *tconn , struct task_struct *task ) ;
#line 1151
void drbd_go_diskless(struct drbd_conf *mdev ) ;
#line 1152
void drbd_ldev_destroy(struct drbd_conf *mdev ) ;
#line 1317
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1318
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1319
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1320
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1321
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1323
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1325
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1327
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1331
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1333
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1334
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1335
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) ;
#line 1336
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1337
void drbd_bm_mark_for_writeout(struct drbd_conf *mdev , int page_nr ) ;
#line 1338
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1339
int drbd_bm_write_hinted(struct drbd_conf *mdev ) ;
#line 1340
int drbd_bm_write_all(struct drbd_conf *mdev ) ;
#line 1341
int drbd_bm_write_copy_pages(struct drbd_conf *mdev ) ;
#line 1342
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1343
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1344
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1347
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1349
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1350
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1351
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1352
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1355
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1358
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1361
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) ;
#line 1362
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1396
mempool_t *drbd_md_io_page_pool ;
#line 1402
struct bio *bio_alloc_drbd(gfp_t gfp_mask ) ;
#line 1404
rwlock_t global_state_lock ;
#line 1432
char *ppsize(char *buf , unsigned long long size ) ;
#line 1459
void wait_until_done_or_force_detached(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                       unsigned int *done ) ;
#line 1643 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_state_rv _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                                   enum chg_state_flags flags , struct completion *done ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 1648
  _raw_read_lock(& global_state_lock);
#line 1649
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1650
  _raw_read_unlock(& global_state_lock);
#line 1652
  return (rv);
}
}
#line 1655 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static union drbd_state drbd_read_state(struct drbd_conf *mdev ) 
{ 
  union drbd_state rv ;

  {
#line 1659
  rv.i = mdev->state.i;
#line 1660
  rv.ldv_40604.susp = (mdev->tconn)->susp;
#line 1661
  rv.ldv_40604.susp_nod = (mdev->tconn)->susp_nod;
#line 1662
  rv.ldv_40604.susp_fen = (mdev->tconn)->susp_fen;
#line 1664
  return (rv);
}
}
#line 1675 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , enum drbd_force_detach_flags df ,
                                          char const   *where ) 
{ 
  enum drbd_io_error_p ep ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1681
  rcu_read_lock();
#line 1682
  _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 1682
  tmp = debug_lockdep_rcu_enabled();
#line 1682
  if (tmp != 0 && ! __warned) {
#line 1682
    tmp___0 = rcu_read_lock_held();
#line 1682
    if (tmp___0 == 0 && 1) {
#line 1682
      __warned = 1;
#line 1682
      lockdep_rcu_suspicious("/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
                             1682, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1682
  ep = (enum drbd_io_error_p )_________p1->on_io_error;
#line 1683
  rcu_read_unlock();
#line 1684
  switch ((unsigned int )ep) {
  case 0U: ;
#line 1686
  if ((unsigned int )df == 0U || (unsigned int )df == 1U) {
#line 1687
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1687
    if (tmp___1 != 0) {
#line 1688
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1689
    if ((int )mdev->state.ldv_50103.disk > 4) {
#line 1690
      __ns = drbd_read_state(mdev);
#line 1690
      __ns.ldv_40604.disk = 4U;
#line 1690
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1691
    goto ldv_51375;
  } else {

  }
  case 2U: ;
  case 1U: 
#line 1716
  set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1717
  if ((unsigned int )df == 0U) {
#line 1718
    set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1719
  if ((unsigned int )df == 3U) {
#line 1720
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1721
  if ((int )mdev->state.ldv_50103.disk > 2) {
#line 1722
    __ns___0 = drbd_read_state(mdev);
#line 1722
    __ns___0.ldv_40604.disk = 2U;
#line 1722
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1723
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1726
  goto ldv_51375;
  }
  ldv_51375: ;
#line 1729
  return;
}
}
#line 1739 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , enum drbd_force_detach_flags forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1742
  if (error != 0) {
#line 1744
    tmp = spinlock_check(& (mdev->tconn)->req_lock);
#line 1744
    flags = _raw_spin_lock_irqsave(tmp);
#line 1745
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1746
    spin_unlock_irqrestore(& (mdev->tconn)->req_lock, flags);
  } else {

  }
#line 1748
  return;
}
}
#line 1785 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 
  int meta_dev_idx ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 1789
  rcu_read_lock();
#line 1790
  _________p1 = *((struct disk_conf * volatile  *)(& bdev->disk_conf));
#line 1790
  tmp = debug_lockdep_rcu_enabled();
#line 1790
  if (tmp != 0 && ! __warned) {
#line 1790
    tmp___0 = rcu_read_lock_held();
#line 1790
    if (tmp___0 == 0 && 1) {
#line 1790
      __warned = 1;
#line 1790
      lockdep_rcu_suspicious("/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
                             1790, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1790
  meta_dev_idx = _________p1->meta_dev_idx;
#line 1791
  rcu_read_unlock();
#line 1793
  switch (meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1796
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1799
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2043 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;

  {
#line 2045
  tmp = atomic_sub_return(1, & mdev->local_cnt);
#line 2045
  i = tmp;
#line 2051
  if (i < 0) {
#line 2051
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( i >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2051);
  } else {

  }
#line 2052
  if (i == 0) {
#line 2053
    if ((unsigned int )*((unsigned char *)mdev + 749UL) == 0U) {
#line 2055
      drbd_ldev_destroy(mdev);
    } else {

    }
#line 2056
    if ((unsigned int )*((unsigned char *)mdev + 749UL) == 4U) {
#line 2058
      drbd_go_diskless(mdev);
    } else {

    }
#line 2059
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2061
  return;
}
}
#line 2064 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2069
  if ((unsigned int )*((unsigned char *)mdev + 749UL) == 0U) {
#line 2070
    return (0);
  } else {

  }
#line 2072
  atomic_inc(& mdev->local_cnt);
#line 2073
  io_allowed = (unsigned int )mdev->state.ldv_50103.disk >= (unsigned int )mins;
#line 2074
  if (io_allowed == 0) {
#line 2075
    put_ldev(mdev);
  } else {

  }
#line 2076
  return (io_allowed);
}
}
#line 2317 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2321
  if ((unsigned long )mdev->ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 2322
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->ldev == NULL in drbd_md_flush\n");
#line 2323
    return;
  } else {

  }
#line 2326
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2326
  if (tmp != 0) {
#line 2327
    return;
  } else {

  }
#line 2329
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 16U, 0);
#line 2330
  if (r != 0) {
#line 2331
    set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
#line 2332
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2334
  return;
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  char *tmp___0 ;
  struct task_struct *tmp___1 ;
  char *tmp___2 ;

  {
#line 125
  b = mdev->bitmap;
#line 126
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 126
  if (tmp == 0) {
#line 127
    return;
  } else {

  }
#line 128
  tmp___0 = drbd_task_to_thread_name(mdev->tconn, b->bm_task);
#line 128
  tmp___1 = get_current();
#line 128
  tmp___2 = drbd_task_to_thread_name(mdev->tconn, tmp___1);
#line 128
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___2, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          tmp___0);
#line 132
  return;
}
}
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  char *tmp___0 ;
  struct task_struct *tmp___1 ;
  char *tmp___2 ;

  {
#line 136
  b = mdev->bitmap;
#line 139
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 140
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 141
    return;
  } else {

  }
#line 144
  tmp = mutex_trylock(& b->bm_change);
#line 144
  trylock_failed = tmp == 0;
#line 146
  if (trylock_failed != 0) {
#line 147
    tmp___0 = drbd_task_to_thread_name(mdev->tconn, b->bm_task);
#line 147
    tmp___1 = get_current();
#line 147
    tmp___2 = drbd_task_to_thread_name(mdev->tconn, tmp___1);
#line 147
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___2, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             tmp___0);
#line 151
    mutex_lock_nested(& b->bm_change, 0U);
  } else {

  }
#line 153
  if (((unsigned int )b->bm_flags & 15U) != 0U) {
#line 154
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 155
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | ((unsigned int )flags & 15U));
#line 157
  b->bm_why = why;
#line 158
  b->bm_task = get_current();
#line 159
  return;
}
}
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;

  {
#line 163
  b = mdev->bitmap;
#line 164
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 165
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 166
    return;
  } else {

  }
#line 169
  if (((unsigned int )(mdev->bitmap)->bm_flags & 15U) == 0U) {
#line 170
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 172
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294967280U);
#line 173
  b->bm_why = 0;
#line 174
  b->bm_task = 0;
#line 175
  mutex_unlock(& b->bm_change);
#line 176
  return;
}
}
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_store_page_idx(struct page *page , unsigned long idx ) 
{ 
  long tmp ;

  {
#line 209
  tmp = __builtin_expect((idx & 0xffffffffff000000UL) != 0UL, 0L);
#line 209
  if (tmp != 0L) {
#line 209
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (209), "i" (12UL));
    ldv_51692: ;
#line 209
    goto ldv_51692;
  } else {

  }
#line 210
  page->ldv_16348.private = idx;
#line 211
  return;
}
}
#line 213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_page_to_idx(struct page *page ) 
{ 


  {
#line 215
  return (page->ldv_16348.private & 16777215UL);
}
}
#line 221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_lock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 223
  b = mdev->bitmap;
#line 224
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_16348.private);
#line 225
  tmp = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 225
  if (tmp == 0) {
#line 225
    goto ldv_51702;
  } else {

  }
#line 225
  tmp___0 = get_current();
#line 225
  __wait.flags = 0U;
#line 225
  __wait.private = (void *)tmp___0;
#line 225
  __wait.func = & autoremove_wake_function;
#line 225
  __wait.task_list.next = & __wait.task_list;
#line 225
  __wait.task_list.prev = & __wait.task_list;
  ldv_51705: 
#line 225
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 225
  tmp___1 = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 225
  if (tmp___1 == 0) {
#line 225
    goto ldv_51704;
  } else {

  }
#line 225
  schedule();
#line 225
  goto ldv_51705;
  ldv_51704: 
#line 225
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_51702: ;
#line 228
  return;
}
}
#line 228 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_unlock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;

  {
#line 230
  b = mdev->bitmap;
#line 231
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_16348.private);
#line 232
  clear_bit_unlock(31U, (unsigned long volatile   *)addr);
#line 233
  __wake_up(& (mdev->bitmap)->bm_io_wait, 3U, 1, 0);
#line 234
  return;
}
}
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_unchanged(struct page *page ) 
{ 


  {
#line 241
  clear_bit(29, (unsigned long volatile   *)(& page->ldv_16348.private));
#line 242
  clear_bit(28, (unsigned long volatile   *)(& page->ldv_16348.private));
#line 243
  return;
}
}
#line 245 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_need_writeout(struct page *page ) 
{ 


  {
#line 247
  set_bit(29U, (unsigned long volatile   *)(& page->ldv_16348.private));
#line 248
  return;
}
}
#line 259 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_mark_for_writeout(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct page *page ;

  {
#line 262
  if ((size_t )page_nr >= (mdev->bitmap)->bm_number_of_pages) {
#line 263
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD: page_nr: %u, number_of_pages: %u\n",
             page_nr, (int )(mdev->bitmap)->bm_number_of_pages);
#line 265
    return;
  } else {

  }
#line 267
  page = *((mdev->bitmap)->bm_pages + (unsigned long )page_nr);
#line 268
  set_bit(27U, (unsigned long volatile   *)(& page->ldv_16348.private));
#line 269
  return;
}
}
#line 271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_unchanged(struct page *page ) 
{ 
  unsigned long const volatile   *addr ;

  {
#line 273
  addr = (unsigned long const volatile   *)(& page->ldv_16348.private);
#line 274
  return (((unsigned long )*addr & 805306368UL) == 0UL);
}
}
#line 277 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_io_err(struct page *page ) 
{ 


  {
#line 279
  set_bit(30U, (unsigned long volatile   *)(& page->ldv_16348.private));
#line 280
  return;
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_clear_page_io_err(struct page *page ) 
{ 


  {
#line 284
  clear_bit(30, (unsigned long volatile   *)(& page->ldv_16348.private));
#line 285
  return;
}
}
#line 287 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_lazy_writeout(struct page *page ) 
{ 


  {
#line 289
  set_bit(28U, (unsigned long volatile   *)(& page->ldv_16348.private));
#line 290
  return;
}
}
#line 292 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_lazy_writeout(struct page *page ) 
{ 
  int tmp ;

  {
#line 294
  tmp = constant_test_bit(28U, (unsigned long const volatile   *)(& page->ldv_16348.private));
#line 294
  return (tmp);
}
}
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_word_to_page_idx(struct drbd_bitmap *b , unsigned long long_nr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 301
  page_nr = (unsigned int )(long_nr >> 9);
#line 302
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 302
  if (tmp != 0L) {
#line 302
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (302), "i" (12UL));
    ldv_51744: ;
#line 302
    goto ldv_51744;
  } else {

  }
#line 303
  return (page_nr);
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_bit_to_page_idx(struct drbd_bitmap *b , u64 bitnr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 309
  page_nr = (unsigned int )(bitnr >> 15);
#line 310
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 310
  if (tmp != 0L) {
#line 310
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (310), "i" (12UL));
    ldv_51750: ;
#line 310
    goto ldv_51750;
  } else {

  }
#line 311
  return (page_nr);
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  struct page *page ;
  void *tmp ;

  {
#line 316
  page = *(b->bm_pages + (unsigned long )idx);
#line 317
  tmp = kmap_atomic(page);
#line 317
  return ((unsigned long *)tmp);
}
}
#line 320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  unsigned long *tmp ;

  {
#line 322
  tmp = __bm_map_pidx(b, idx);
#line 322
  return (tmp);
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 327
  __kunmap_atomic((void *)p_addr);
#line 328
  return;
}
}
#line 330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 332
  return;
}
}
#line 355 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 358
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 359
    return;
  } else {

  }
#line 361
  i = 0UL;
#line 361
  goto ldv_51773;
  ldv_51772: ;
#line 362
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 363
    printk("\tdrbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 366
    goto ldv_51771;
  } else {

  }
#line 368
  __free_pages(*(pages + i), 0U);
#line 369
  *(pages + i) = 0;
  ldv_51771: 
#line 361
  i = i + 1UL;
  ldv_51773: ;
#line 361
  if (i < number) {
#line 362
    goto ldv_51772;
  } else {

  }

#line 366
  return;
}
}
#line 373 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 375
  if (v != 0) {
#line 376
    vfree((void const   *)ptr);
  } else {
#line 378
    kfree((void const   *)ptr);
  }
#line 379
  return;
}
}
#line 384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  pgprot_t __constr_expr_0 ;
  void *tmp___4 ;

  {
#line 386
  old_pages = b->bm_pages;
#line 388
  vmalloced = 0U;
#line 389
  have = b->bm_number_of_pages;
#line 391
  tmp = __builtin_expect(have == 0UL, 0L);
#line 391
  if (tmp != 0L) {
#line 391
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 391
    if (tmp___0 != 0L) {
#line 391
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (391), "i" (12UL));
      ldv_51790: ;
#line 391
      goto ldv_51790;
    } else {

    }
  } else {

  }
#line 392
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 392
  if (tmp___1 != 0L) {
#line 392
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 392
    if (tmp___2 != 0L) {
#line 392
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (392), "i" (12UL));
      ldv_51791: ;
#line 392
      goto ldv_51791;
    } else {

    }
  } else {

  }
#line 394
  if (have == want) {
#line 395
    return (old_pages);
  } else {

  }
#line 402
  bytes = (unsigned int )want * 8U;
#line 403
  tmp___3 = kzalloc((size_t )bytes, 16U);
#line 403
  new_pages = (struct page **)tmp___3;
#line 404
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 405
    __constr_expr_0.pgprot = 0x8000000000000163UL;
#line 405
    tmp___4 = __vmalloc((unsigned long )bytes, 32786U, __constr_expr_0);
#line 405
    new_pages = (struct page **)tmp___4;
#line 408
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 409
      return (0);
    } else {

    }
#line 410
    vmalloced = 1U;
  } else {

  }
#line 413
  if (want >= have) {
#line 414
    i = 0U;
#line 414
    goto ldv_51794;
    ldv_51793: 
#line 415
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 414
    i = i + 1U;
    ldv_51794: ;
#line 414
    if ((unsigned long )i < have) {
#line 415
      goto ldv_51793;
    } else {

    }

#line 416
    goto ldv_51797;
    ldv_51796: 
#line 417
    page = alloc_pages(18U, 0U);
#line 418
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 419
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 420
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 421
      return (0);
    } else {

    }
#line 425
    bm_store_page_idx(page, (unsigned long )i);
#line 426
    *(new_pages + (unsigned long )i) = page;
#line 416
    i = i + 1U;
    ldv_51797: ;
#line 416
    if ((unsigned long )i < want) {
#line 417
      goto ldv_51796;
    } else {

    }

  } else {
#line 429
    i = 0U;
#line 429
    goto ldv_51800;
    ldv_51799: 
#line 430
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 429
    i = i + 1U;
    ldv_51800: ;
#line 429
    if ((unsigned long )i < want) {
#line 430
      goto ldv_51799;
    } else {

    }

  }
#line 436
  if (vmalloced != 0U) {
#line 437
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | 65536U);
  } else {
#line 439
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294901759U);
  }
#line 441
  return (new_pages);
}
}
#line 448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 450
  b = mdev->bitmap;
#line 451
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 451
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 451
  if (tmp != 0L) {
#line 451
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       451);
  } else {

  }
#line 451
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 452
  tmp___0 = kzalloc(400UL, 208U);
#line 452
  b = (struct drbd_bitmap *)tmp___0;
#line 453
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 454
    return (-12);
  } else {

  }
#line 455
  spinlock_check(& b->bm_lock);
#line 455
  __raw_spin_lock_init(& b->bm_lock.ldv_6135.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 456
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 457
  __init_waitqueue_head(& b->bm_io_wait, "&b->bm_io_wait", & __key___1);
#line 459
  mdev->bitmap = b;
#line 461
  return (0);
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  bool _bool ;
  int tmp ;

  {
#line 466
  _bool = (unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0);
#line 466
  if (! _bool) {
#line 466
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"mdev->bitmap", "drbd_bm_capacity");
  } else {

  }
#line 466
  if (_bool) {
#line 466
    tmp = 0;
  } else {
#line 466
    tmp = 1;
  }
#line 466
  if (tmp) {
#line 467
    return (0UL);
  } else {

  }
#line 468
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  bool _bool ;
  int tmp ;

  {
#line 475
  _bool = (unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0);
#line 475
  if (! _bool) {
#line 475
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"mdev->bitmap", "drbd_bm_cleanup");
  } else {

  }
#line 475
  if (_bool) {
#line 475
    tmp = 0;
  } else {
#line 475
    tmp = 1;
  }
#line 475
  if (tmp) {
#line 476
    return;
  } else {

  }
#line 477
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 478
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, (int )(mdev->bitmap)->bm_flags & 65536);
#line 479
  kfree((void const   *)mdev->bitmap);
#line 480
  mdev->bitmap = 0;
#line 481
  return;
}
}
#line 491 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;
  int cleared ;
  unsigned long tmp___0 ;

  {
#line 496
  cleared = 0;
#line 499
  tmp = (int )b->bm_bits & 32767;
#line 501
  mask = (1UL << (tmp & 63)) - 1UL;
#line 504
  mask = mask;
#line 506
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 507
  bm = p_addr + (unsigned long )(tmp / 64);
#line 508
  if (mask != 0UL) {
#line 513
    tmp___0 = hweight_long(*bm & ~ mask);
#line 513
    cleared = (int )tmp___0;
#line 514
    *bm = *bm & mask;
#line 515
    bm = bm + 1;
  } else {

  }
#line 524
  bm_unmap(p_addr);
#line 525
  return (cleared);
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;

  {
#line 535
  tmp = (int )b->bm_bits & 32767;
#line 537
  mask = (1UL << (tmp & 63)) - 1UL;
#line 540
  mask = mask;
#line 542
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 543
  bm = p_addr + (unsigned long )(tmp / 64);
#line 544
  if (mask != 0UL) {
#line 549
    *bm = *bm | ~ mask;
#line 550
    bm = bm + 1;
  } else {

  }
#line 558
  bm_unmap(p_addr);
#line 559
  return;
}
}
#line 563 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long *p_addr ;
  unsigned long bits ;
  unsigned long mask ;
  int idx ;
  int i ;
  int last_word ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 566
  bits = 0UL;
#line 567
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 571
  idx = 0;
#line 571
  goto ldv_51852;
  ldv_51851: 
#line 572
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 573
  i = 0;
#line 573
  goto ldv_51848;
  ldv_51847: 
#line 574
  tmp = hweight_long(*(p_addr + (unsigned long )i));
#line 574
  bits = tmp + bits;
#line 573
  i = i + 1;
  ldv_51848: ;
#line 573
  if ((unsigned int )i <= 511U) {
#line 574
    goto ldv_51847;
  } else {

  }
#line 575
  __bm_unmap(p_addr);
#line 576
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                576, 0);
#line 576
  _cond_resched();
#line 571
  idx = idx + 1;
  ldv_51852: ;
#line 571
  if ((size_t )idx < b->bm_number_of_pages - 1UL) {
#line 572
    goto ldv_51851;
  } else {

  }
#line 579
  last_word = (int )(((b->bm_bits - 1UL) & 32767UL) >> 6);
#line 580
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 581
  i = 0;
#line 581
  goto ldv_51855;
  ldv_51854: 
#line 582
  tmp___0 = hweight_long(*(p_addr + (unsigned long )i));
#line 582
  bits = tmp___0 + bits;
#line 581
  i = i + 1;
  ldv_51855: ;
#line 581
  if (i < last_word) {
#line 582
    goto ldv_51854;
  } else {

  }
#line 583
  *(p_addr + (unsigned long )last_word) = (unsigned long )((unsigned long long )*(p_addr + (unsigned long )last_word) & (unsigned long long )mask);
#line 584
  tmp___1 = hweight_long(*(p_addr + (unsigned long )last_word));
#line 584
  bits = tmp___1 + bits;
#line 588
  __bm_unmap(p_addr);
#line 589
  return (bits);
}
}
#line 593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned int idx ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 599
  end = offset + len;
#line 601
  if (b->bm_words < end) {
#line 602
    printk("\tdrbd: bm_memset end > bm_words\n");
#line 603
    return;
  } else {

  }
#line 606
  goto ldv_51872;
  ldv_51871: 
#line 607
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 607
  __min2 = end;
#line 607
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 608
  idx = bm_word_to_page_idx(b, offset);
#line 609
  p_addr = bm_map_pidx(b, idx);
#line 610
  bm = p_addr + (offset & 511UL);
#line 611
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 612
    printk("\tdrbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
  } else {
#line 615
    memset((void *)bm, c, do_now * 8UL);
  }
#line 616
  bm_unmap(p_addr);
#line 617
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
#line 618
  offset = offset + do_now;
  ldv_51872: ;
#line 606
  if (offset < end) {
#line 607
    goto ldv_51871;
  } else {

  }

#line 611
  return;
}
}
#line 630 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  bool _bool ;
  int tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;
  size_t tmp___2 ;
  sector_t tmp___3 ;
  u64 bits_on_disk ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 632
  b = mdev->bitmap;
#line 635
  opages = 0;
#line 636
  err = 0;
#line 639
  _bool = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 639
  if (! _bool) {
#line 639
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b", "drbd_bm_resize");
  } else {

  }
#line 639
  if (_bool) {
#line 639
    tmp = 0;
  } else {
#line 639
    tmp = 1;
  }
#line 639
  if (tmp) {
#line 640
    return (-12);
  } else {

  }
#line 642
  drbd_bm_lock(mdev, (char *)"resize", BM_LOCKED_MASK);
#line 644
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 647
  if (b->bm_dev_capacity == capacity) {
#line 648
    goto out;
  } else {

  }
#line 650
  opages_vmalloced = (int )b->bm_flags & 65536;
#line 652
  if (capacity == 0UL) {
#line 653
    spin_lock_irq(& b->bm_lock);
#line 654
    opages = b->bm_pages;
#line 655
    onpages = b->bm_number_of_pages;
#line 656
    owords = b->bm_words;
#line 657
    b->bm_pages = 0;
#line 658
    tmp___3 = 0UL;
#line 658
    b->bm_dev_capacity = tmp___3;
#line 658
    tmp___2 = tmp___3;
#line 658
    b->bm_words = tmp___2;
#line 658
    tmp___1 = tmp___2;
#line 658
    b->bm_bits = tmp___1;
#line 658
    tmp___0 = tmp___1;
#line 658
    b->bm_set = tmp___0;
#line 658
    b->bm_number_of_pages = tmp___0;
#line 663
    spin_unlock_irq(& b->bm_lock);
#line 664
    bm_free_pages(opages, onpages);
#line 665
    bm_vk_free((void *)opages, opages_vmalloced);
#line 666
    goto out;
  } else {

  }
#line 668
  bits = (capacity + 7UL) >> 3;
#line 675
  words = (bits + 63UL) >> 6;
#line 677
  tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 677
  if (tmp___4 != 0) {
#line 678
    bits_on_disk = ((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12;
#line 679
    put_ldev(mdev);
#line 680
    if ((unsigned long long )bits > bits_on_disk) {
#line 681
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits = %lu\n",
                bits);
#line 682
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits_on_disk = %llu\n",
                bits_on_disk);
#line 683
      err = -28;
#line 684
      goto out;
    } else {

    }
  } else {

  }
#line 688
  want = (words * 8UL + 4095UL) >> 12;
#line 689
  have = b->bm_number_of_pages;
#line 690
  if (want == have) {
#line 691
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 691
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
              691);
    } else {

    }
#line 692
    npages = b->bm_pages;
  } else {
#line 694
    tmp___5 = drbd_insert_fault(mdev, 7U);
#line 694
    if (tmp___5 != 0) {
#line 695
      npages = 0;
    } else {
#line 697
      npages = bm_realloc_pages(b, want);
    }
  }
#line 700
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 701
    err = -12;
#line 702
    goto out;
  } else {

  }
#line 705
  spin_lock_irq(& b->bm_lock);
#line 706
  opages = b->bm_pages;
#line 707
  owords = b->bm_words;
#line 708
  obits = b->bm_bits;
#line 710
  growing = bits > obits;
#line 711
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 712
    bm_set_surplus(b);
  } else {

  }
#line 714
  b->bm_pages = npages;
#line 715
  b->bm_number_of_pages = want;
#line 716
  b->bm_bits = bits;
#line 717
  b->bm_words = words;
#line 718
  b->bm_dev_capacity = capacity;
#line 720
  if (growing != 0) {
#line 721
    if (set_new_bits != 0) {
#line 722
      bm_memset(b, owords, 255, words - owords);
#line 723
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 725
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 729
  if (want < have) {
#line 731
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 734
  bm_clear_surplus(b);
#line 736
  spin_unlock_irq(& b->bm_lock);
#line 737
  if ((unsigned long )opages != (unsigned long )npages) {
#line 738
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 739
  if (growing == 0) {
#line 740
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 741
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu pages=%lu\n",
            bits, words, want);
  out: 
#line 744
  drbd_bm_unlock(mdev);
#line 745
  return (err);
}
}
#line 756 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  bool _bool ;
  int tmp ;
  bool _bool___0 ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 758
  b = mdev->bitmap;
#line 762
  _bool = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 762
  if (! _bool) {
#line 762
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b", "_drbd_bm_total_weight");
  } else {

  }
#line 762
  if (_bool) {
#line 762
    tmp = 0;
  } else {
#line 762
    tmp = 1;
  }
#line 762
  if (tmp) {
#line 763
    return (0UL);
  } else {

  }
#line 764
  _bool___0 = (unsigned long )b->bm_pages != (unsigned long )((struct page **)0);
#line 764
  if (! _bool___0) {
#line 764
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b->bm_pages", "_drbd_bm_total_weight");
  } else {

  }
#line 764
  if (_bool___0) {
#line 764
    tmp___0 = 0;
  } else {
#line 764
    tmp___0 = 1;
  }
#line 764
  if (tmp___0) {
#line 765
    return (0UL);
  } else {

  }
#line 767
  tmp___1 = spinlock_check(& b->bm_lock);
#line 767
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 768
  s = b->bm_set;
#line 769
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 771
  return (s);
}
}
#line 774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 778
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 778
  if (tmp == 0) {
#line 779
    return (0UL);
  } else {

  }
#line 780
  s = _drbd_bm_total_weight(mdev);
#line 781
  put_ldev(mdev);
#line 782
  return (s);
}
}
#line 785 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  bool _bool ;
  int tmp ;
  bool _bool___0 ;
  int tmp___0 ;

  {
#line 787
  b = mdev->bitmap;
#line 788
  _bool = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 788
  if (! _bool) {
#line 788
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b", "drbd_bm_words");
  } else {

  }
#line 788
  if (_bool) {
#line 788
    tmp = 0;
  } else {
#line 788
    tmp = 1;
  }
#line 788
  if (tmp) {
#line 789
    return (0UL);
  } else {

  }
#line 790
  _bool___0 = (unsigned long )b->bm_pages != (unsigned long )((struct page **)0);
#line 790
  if (! _bool___0) {
#line 790
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b->bm_pages", "drbd_bm_words");
  } else {

  }
#line 790
  if (_bool___0) {
#line 790
    tmp___0 = 0;
  } else {
#line 790
    tmp___0 = 1;
  }
#line 790
  if (tmp___0) {
#line 791
    return (0UL);
  } else {

  }
#line 793
  return (b->bm_words);
}
}
#line 796 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  bool _bool ;
  int tmp ;

  {
#line 798
  b = mdev->bitmap;
#line 799
  _bool = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 799
  if (! _bool) {
#line 799
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b", "drbd_bm_bits");
  } else {

  }
#line 799
  if (_bool) {
#line 799
    tmp = 0;
  } else {
#line 799
    tmp = 1;
  }
#line 799
  if (tmp) {
#line 800
    return (0UL);
  } else {

  }
#line 802
  return (b->bm_bits);
}
}
#line 810 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  unsigned int idx ;
  size_t end ;
  size_t do_now ;
  bool _bool ;
  int tmp ;
  bool _bool___0 ;
  int tmp___0 ;
  int __ret_warn_on ;
  long tmp___1 ;
  int __ret_warn_on___0 ;
  long tmp___2 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___3 ;
  unsigned long *tmp___4 ;
  unsigned long tmp___5 ;
  size_t tmp___6 ;
  int tmp___7 ;

  {
#line 813
  b = mdev->bitmap;
#line 819
  end = offset + number;
#line 821
  _bool = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 821
  if (! _bool) {
#line 821
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b", "drbd_bm_merge_lel");
  } else {

  }
#line 821
  if (_bool) {
#line 821
    tmp = 0;
  } else {
#line 821
    tmp = 1;
  }
#line 821
  if (tmp) {
#line 822
    return;
  } else {

  }
#line 823
  _bool___0 = (unsigned long )b->bm_pages != (unsigned long )((struct page **)0);
#line 823
  if (! _bool___0) {
#line 823
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b->bm_pages", "drbd_bm_merge_lel");
  } else {

  }
#line 823
  if (_bool___0) {
#line 823
    tmp___0 = 0;
  } else {
#line 823
    tmp___0 = 1;
  }
#line 823
  if (tmp___0) {
#line 824
    return;
  } else {

  }
#line 825
  if (number == 0UL) {
#line 826
    return;
  } else {

  }
#line 827
  __ret_warn_on = b->bm_words <= offset;
#line 827
  tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 827
  if (tmp___1 != 0L) {
#line 827
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       827);
  } else {

  }
#line 827
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 828
  __ret_warn_on___0 = b->bm_words < end;
#line 828
  tmp___2 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 828
  if (tmp___2 != 0L) {
#line 828
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       828);
  } else {

  }
#line 828
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 830
  spin_lock_irq(& b->bm_lock);
#line 831
  goto ldv_51961;
  ldv_51960: 
#line 832
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 832
  __min2 = end;
#line 832
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 833
  idx = bm_word_to_page_idx(b, offset);
#line 834
  p_addr = bm_map_pidx(b, idx);
#line 835
  bm = p_addr + (offset & 511UL);
#line 836
  offset = offset + do_now;
#line 837
  goto ldv_51958;
  ldv_51957: 
#line 838
  bits = hweight_long(*bm);
#line 839
  tmp___3 = buffer;
#line 839
  buffer = buffer + 1;
#line 839
  word = *bm | *tmp___3;
#line 840
  tmp___4 = bm;
#line 840
  bm = bm + 1;
#line 840
  *tmp___4 = word;
#line 841
  tmp___5 = hweight_long(word);
#line 841
  b->bm_set = b->bm_set + (tmp___5 - bits);
  ldv_51958: 
#line 837
  tmp___6 = do_now;
#line 837
  do_now = do_now - (size_t )1;
#line 837
  if (tmp___6 != 0UL) {
#line 838
    goto ldv_51957;
  } else {

  }
#line 843
  bm_unmap(p_addr);
#line 844
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
  ldv_51961: ;
#line 831
  if (offset < end) {
#line 832
    goto ldv_51960;
  } else {

  }

#line 851
  if (b->bm_words == end) {
#line 852
    tmp___7 = bm_clear_surplus(b);
#line 852
    b->bm_set = b->bm_set - (unsigned long )tmp___7;
  } else {

  }
#line 853
  spin_unlock_irq(& b->bm_lock);
#line 854
  return;
}
}
#line 859 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  bool _bool ;
  int tmp ;
  bool _bool___0 ;
  int tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long *tmp___3 ;
  size_t tmp___4 ;

  {
#line 862
  b = mdev->bitmap;
#line 866
  end = offset + number;
#line 868
  _bool = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 868
  if (! _bool) {
#line 868
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b", "drbd_bm_get_lel");
  } else {

  }
#line 868
  if (_bool) {
#line 868
    tmp = 0;
  } else {
#line 868
    tmp = 1;
  }
#line 868
  if (tmp) {
#line 869
    return;
  } else {

  }
#line 870
  _bool___0 = (unsigned long )b->bm_pages != (unsigned long )((struct page **)0);
#line 870
  if (! _bool___0) {
#line 870
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b->bm_pages", "drbd_bm_get_lel");
  } else {

  }
#line 870
  if (_bool___0) {
#line 870
    tmp___0 = 0;
  } else {
#line 870
    tmp___0 = 1;
  }
#line 870
  if (tmp___0) {
#line 871
    return;
  } else {

  }
#line 873
  spin_lock_irq(& b->bm_lock);
#line 874
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 877
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 882
    goto ldv_51986;
    ldv_51985: 
#line 883
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 883
    __min2 = end;
#line 883
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 884
    tmp___1 = bm_word_to_page_idx(b, offset);
#line 884
    p_addr = bm_map_pidx(b, tmp___1);
#line 885
    bm = p_addr + (offset & 511UL);
#line 886
    offset = offset + do_now;
#line 887
    goto ldv_51983;
    ldv_51982: 
#line 888
    tmp___2 = buffer;
#line 888
    buffer = buffer + 1;
#line 888
    tmp___3 = bm;
#line 888
    bm = bm + 1;
#line 888
    *tmp___2 = *tmp___3;
    ldv_51983: 
#line 887
    tmp___4 = do_now;
#line 887
    do_now = do_now - (size_t )1;
#line 887
    if (tmp___4 != 0UL) {
#line 888
      goto ldv_51982;
    } else {

    }
#line 889
    bm_unmap(p_addr);
    ldv_51986: ;
#line 882
    if (offset < end) {
#line 883
      goto ldv_51985;
    } else {

    }

  }
#line 892
  spin_unlock_irq(& b->bm_lock);
#line 893
  return;
}
}
#line 896 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  bool _bool ;
  int tmp ;
  bool _bool___0 ;
  int tmp___0 ;

  {
#line 898
  b = mdev->bitmap;
#line 899
  _bool = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 899
  if (! _bool) {
#line 899
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b", "drbd_bm_set_all");
  } else {

  }
#line 899
  if (_bool) {
#line 899
    tmp = 0;
  } else {
#line 899
    tmp = 1;
  }
#line 899
  if (tmp) {
#line 900
    return;
  } else {

  }
#line 901
  _bool___0 = (unsigned long )b->bm_pages != (unsigned long )((struct page **)0);
#line 901
  if (! _bool___0) {
#line 901
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b->bm_pages", "drbd_bm_set_all");
  } else {

  }
#line 901
  if (_bool___0) {
#line 901
    tmp___0 = 0;
  } else {
#line 901
    tmp___0 = 1;
  }
#line 901
  if (tmp___0) {
#line 902
    return;
  } else {

  }
#line 904
  spin_lock_irq(& b->bm_lock);
#line 905
  bm_memset(b, 0UL, 255, b->bm_words);
#line 906
  bm_clear_surplus(b);
#line 907
  b->bm_set = b->bm_bits;
#line 908
  spin_unlock_irq(& b->bm_lock);
#line 909
  return;
}
}
#line 912 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  bool _bool ;
  int tmp ;
  bool _bool___0 ;
  int tmp___0 ;

  {
#line 914
  b = mdev->bitmap;
#line 915
  _bool = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 915
  if (! _bool) {
#line 915
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b", "drbd_bm_clear_all");
  } else {

  }
#line 915
  if (_bool) {
#line 915
    tmp = 0;
  } else {
#line 915
    tmp = 1;
  }
#line 915
  if (tmp) {
#line 916
    return;
  } else {

  }
#line 917
  _bool___0 = (unsigned long )b->bm_pages != (unsigned long )((struct page **)0);
#line 917
  if (! _bool___0) {
#line 917
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b->bm_pages", "drbd_bm_clear_all");
  } else {

  }
#line 917
  if (_bool___0) {
#line 917
    tmp___0 = 0;
  } else {
#line 917
    tmp___0 = 1;
  }
#line 917
  if (tmp___0) {
#line 918
    return;
  } else {

  }
#line 920
  spin_lock_irq(& b->bm_lock);
#line 921
  bm_memset(b, 0UL, 0, b->bm_words);
#line 922
  b->bm_set = 0UL;
#line 923
  spin_unlock_irq(& b->bm_lock);
#line 924
  return;
}
}
#line 938 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_aio_ctx_destroy(struct kref *kref ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct kref  const  *__mptr ;

  {
#line 940
  __mptr = (struct kref  const  *)kref;
#line 940
  ctx = (struct bm_aio_ctx *)__mptr + 0xffffffffffffffe8UL;
#line 942
  put_ldev(ctx->mdev);
#line 943
  kfree((void const   *)ctx);
#line 944
  return;
}
}
#line 947 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  unsigned int idx ;
  unsigned long tmp ;
  int uptodate ;
  int tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 949
  ctx = (struct bm_aio_ctx *)bio->bi_private;
#line 950
  mdev = ctx->mdev;
#line 951
  b = mdev->bitmap;
#line 952
  tmp = bm_page_to_idx((bio->bi_io_vec)->bv_page);
#line 952
  idx = (unsigned int )tmp;
#line 953
  uptodate = (int )bio->bi_flags & 1;
#line 960
  if (error == 0 && uptodate == 0) {
#line 961
    error = -5;
  } else {

  }
#line 963
  if ((ctx->flags & 1U) == 0U) {
#line 963
    tmp___0 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )idx));
#line 963
    if (tmp___0 == 0) {
#line 965
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap page idx %u changed during IO!\n",
               idx);
    } else {

    }
  } else {

  }
#line 967
  if (error != 0) {
#line 970
    ctx->error = error;
#line 971
    bm_set_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 974
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "bm_async_io_complete");
#line 974
    if (tmp___1 != 0) {
#line 975
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR %d on bitmap page idx %u\n",
              error, idx);
    } else {

    }
  } else {
#line 978
    bm_clear_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 979
    descriptor.modname = "drbd";
#line 979
    descriptor.function = "bm_async_io_complete";
#line 979
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 979
    descriptor.format = "bitmap page idx %u completed\n";
#line 979
    descriptor.lineno = 979U;
#line 979
    descriptor.flags = 0U;
#line 979
    tmp___2 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 979
    if (tmp___2 != 0L) {
#line 979
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "bitmap page idx %u completed\n", idx);
    } else {

    }
  }
#line 982
  bm_page_unlock_io(mdev, (int )idx);
#line 984
  if ((int )ctx->flags & 1) {
#line 985
    mempool_free((void *)(bio->bi_io_vec)->bv_page, drbd_md_io_page_pool);
  } else {

  }
#line 987
  bio_put(bio);
#line 989
  tmp___3 = atomic_dec_and_test(& ctx->in_flight);
#line 989
  if (tmp___3 != 0) {
#line 990
    ctx->done = 1U;
#line 991
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 992
    kref_put(& ctx->kref, & bm_aio_ctx_destroy);
  } else {

  }
#line 994
  return;
}
}
#line 996 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct bm_aio_ctx *ctx , int page_nr , int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  struct page *page ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  void *src ;
  void *dest ;
  void *tmp___1 ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;

  {
#line 998
  tmp = bio_alloc_drbd(16U);
#line 998
  bio = tmp;
#line 999
  mdev = ctx->mdev;
#line 1000
  b = mdev->bitmap;
#line 1004
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 1006
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 1011
  __min1 = 4096U;
#line 1011
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 1011
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 1011
  len = __min1 < __min2 ? __min1 : __min2;
#line 1015
  bm_page_lock_io(mdev, page_nr);
#line 1018
  bm_set_page_unchanged(*(b->bm_pages + (unsigned long )page_nr));
#line 1020
  if ((int )ctx->flags & 1) {
#line 1022
    tmp___1 = mempool_alloc(drbd_md_io_page_pool, 18U);
#line 1022
    page = (struct page *)tmp___1;
#line 1023
    dest = kmap_atomic(page);
#line 1024
    src = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1025
    __len = 4096UL;
#line 1025
    if (__len > 63UL) {
#line 1025
      __ret = __memcpy(dest, (void const   *)src, __len);
    } else {
#line 1025
      __ret = __builtin_memcpy(dest, (void const   *)src, __len);
    }
#line 1026
    __kunmap_atomic(src);
#line 1027
    __kunmap_atomic(dest);
#line 1028
    bm_store_page_idx(page, (unsigned long )page_nr);
  } else {
#line 1030
    page = *(b->bm_pages + (unsigned long )page_nr);
  }
#line 1032
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 1033
  bio->bi_sector = on_disk_sector;
#line 1036
  bio_add_page(bio, page, len, 0U);
#line 1037
  bio->bi_private = (void *)ctx;
#line 1038
  bio->bi_end_io = & bm_async_io_complete;
#line 1040
  tmp___2 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 1040
  if (tmp___2 != 0) {
#line 1041
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 1042
    bio_endio(bio, -5);
  } else {
#line 1044
    submit_bio(rw, bio);
#line 1047
    atomic_add((int )(len >> 9), & mdev->rs_sect_ev);
  }
#line 1049
  return;
}
}
#line 1054 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw , unsigned int flags , unsigned int lazy_writeout_upper_idx ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_bitmap *b ;
  int num_pages ;
  int i ;
  int count ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  void *tmp ;
  struct bm_aio_ctx __constr_expr_0 ;
  int tmp___0 ;
  int __ret_warn_on ;
  long tmp___1 ;
  int tmp___2 ;
  struct _ddebug descriptor ;
  long tmp___3 ;
  int tmp___4 ;
  struct _ddebug descriptor___0 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  char *tmp___9 ;

  {
#line 1057
  b = mdev->bitmap;
#line 1058
  count = 0;
#line 1061
  err = 0;
#line 1072
  tmp = kmalloc(32UL, 16U);
#line 1072
  ctx = (struct bm_aio_ctx *)tmp;
#line 1073
  if ((unsigned long )ctx == (unsigned long )((struct bm_aio_ctx *)0)) {
#line 1074
    return (-12);
  } else {

  }
#line 1076
  __constr_expr_0.mdev = mdev;
#line 1076
  __constr_expr_0.in_flight.counter = 1;
#line 1076
  __constr_expr_0.done = 0U;
#line 1076
  __constr_expr_0.flags = flags;
#line 1076
  __constr_expr_0.error = 0;
#line 1076
  __constr_expr_0.kref.refcount.counter = 2;
#line 1076
  *ctx = __constr_expr_0;
#line 1085
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1085
  if (tmp___0 == 0) {
#line 1086
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in bm_rw()\n");
#line 1087
    kfree((void const   *)ctx);
#line 1088
    return (-19);
  } else {

  }
#line 1091
  if (ctx->flags == 0U) {
#line 1092
    __ret_warn_on = ((unsigned int )b->bm_flags & 15U) == 0U;
#line 1092
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 1092
    if (tmp___1 != 0L) {
#line 1092
      warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                         1092);
    } else {

    }
#line 1092
    __builtin_expect(__ret_warn_on != 0, 0L);
  } else {

  }
#line 1094
  num_pages = (int )b->bm_number_of_pages;
#line 1096
  now = jiffies;
#line 1099
  i = 0;
#line 1099
  goto ldv_52073;
  ldv_52072: ;
#line 1101
  if (lazy_writeout_upper_idx != 0U && (unsigned int )i == lazy_writeout_upper_idx) {
#line 1102
    goto ldv_52066;
  } else {

  }
#line 1103
  if (rw & 1) {
#line 1104
    if ((flags & 2U) != 0U) {
#line 1104
      tmp___2 = test_and_clear_bit(27, (unsigned long volatile   *)(& (*(b->bm_pages + (unsigned long )i))->ldv_16348.private));
#line 1104
      if (tmp___2 == 0) {
#line 1107
        goto ldv_52067;
      } else {

      }
    } else {

    }
#line 1109
    if ((flags & 4U) == 0U) {
#line 1109
      tmp___4 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )i));
#line 1109
      if (tmp___4 != 0) {
#line 1111
        descriptor.modname = "drbd";
#line 1111
        descriptor.function = "bm_rw";
#line 1111
        descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1111
        descriptor.format = "skipped bm write for idx %u\n";
#line 1111
        descriptor.lineno = 1111U;
#line 1111
        descriptor.flags = 0U;
#line 1111
        tmp___3 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1111
        if (tmp___3 != 0L) {
#line 1111
          __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                            "skipped bm write for idx %u\n", i);
        } else {

        }
#line 1112
        goto ldv_52067;
      } else {

      }
    } else {

    }
#line 1116
    if (lazy_writeout_upper_idx != 0U) {
#line 1116
      tmp___6 = bm_test_page_lazy_writeout(*(b->bm_pages + (unsigned long )i));
#line 1116
      if (tmp___6 == 0) {
#line 1118
        descriptor___0.modname = "drbd";
#line 1118
        descriptor___0.function = "bm_rw";
#line 1118
        descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1118
        descriptor___0.format = "skipped bm lazy write for idx %u\n";
#line 1118
        descriptor___0.lineno = 1118U;
#line 1118
        descriptor___0.flags = 0U;
#line 1118
        tmp___5 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 1118
        if (tmp___5 != 0L) {
#line 1118
          __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                            "skipped bm lazy write for idx %u\n", i);
        } else {

        }
#line 1119
        goto ldv_52067;
      } else {

      }
    } else {

    }
  } else {

  }
#line 1122
  atomic_inc(& ctx->in_flight);
#line 1123
  bm_page_io_async(ctx, i, rw);
#line 1124
  count = count + 1;
#line 1125
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1125, 0);
#line 1125
  _cond_resched();
  ldv_52067: 
#line 1099
  i = i + 1;
  ldv_52073: ;
#line 1099
  if (i < num_pages) {
#line 1100
    goto ldv_52072;
  } else {

  }
  ldv_52066: 
#line 1136
  tmp___7 = atomic_dec_and_test(& ctx->in_flight);
#line 1136
  if (tmp___7 == 0) {
#line 1137
    wait_until_done_or_force_detached(mdev, mdev->ldev, & ctx->done);
  } else {
#line 1139
    kref_put(& ctx->kref, & bm_aio_ctx_destroy);
  }
#line 1142
  if (flags == 0U) {
#line 1143
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap %s of %u pages took %lu jiffies\n",
              rw == 1 ? (char *)"WRITE" : (char *)"READ", count, (unsigned long )jiffies - now);
  } else {

  }
#line 1147
  if (ctx->error != 0) {
#line 1148
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 1149
    drbd_chk_io_error_(mdev, 1, DRBD_META_IO_ERROR, "bm_rw");
#line 1150
    err = -5;
  } else {

  }
#line 1153
  tmp___8 = atomic_read((atomic_t const   *)(& ctx->in_flight));
#line 1153
  if (tmp___8 != 0) {
#line 1154
    err = -5;
  } else {

  }
#line 1156
  now = jiffies;
#line 1157
  if (rw == 1) {
#line 1158
    drbd_md_flush(mdev);
  } else {
#line 1160
    b->bm_set = bm_count_bits(b);
#line 1161
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 1164
  now = b->bm_set;
#line 1166
  if (flags == 0U) {
#line 1167
    tmp___9 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 1167
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
              tmp___9, now);
  } else {

  }
#line 1170
  kref_put(& ctx->kref, & bm_aio_ctx_destroy);
#line 1171
  return (err);
}
}
#line 1178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1180
  tmp = bm_rw(mdev, 0, 0U, 0U);
#line 1180
  return (tmp);
}
}
#line 1189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1191
  tmp = bm_rw(mdev, 1, 0U, 0U);
#line 1191
  return (tmp);
}
}
#line 1200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1202
  tmp = bm_rw(mdev, 1, 4U, 0U);
#line 1202
  return (tmp);
}
}
#line 1210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_lazy(struct drbd_conf *mdev , unsigned int upper_idx ) 
{ 
  int tmp ;

  {
#line 1212
  tmp = bm_rw(mdev, 1, 1U, upper_idx);
#line 1212
  return (tmp);
}
}
#line 1226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_copy_pages(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1228
  tmp = bm_rw(mdev, 1, 1U, 0U);
#line 1228
  return (tmp);
}
}
#line 1235 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_hinted(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1237
  tmp = bm_rw(mdev, 1, 3U, 0U);
#line 1237
  return (tmp);
}
}
#line 1252 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) 
{ 
  struct bm_aio_ctx *ctx ;
  int err ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  struct bm_aio_ctx __constr_expr_0 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1257
  tmp___0 = bm_test_page_unchanged(*((mdev->bitmap)->bm_pages + (unsigned long )idx));
#line 1257
  if (tmp___0 != 0) {
#line 1258
    descriptor.modname = "drbd";
#line 1258
    descriptor.function = "drbd_bm_write_page";
#line 1258
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1258
    descriptor.format = "skipped bm page write for idx %u\n";
#line 1258
    descriptor.lineno = 1258U;
#line 1258
    descriptor.flags = 0U;
#line 1258
    tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1258
    if (tmp != 0L) {
#line 1258
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "skipped bm page write for idx %u\n", idx);
    } else {

    }
#line 1259
    return (0);
  } else {

  }
#line 1262
  tmp___1 = kmalloc(32UL, 16U);
#line 1262
  ctx = (struct bm_aio_ctx *)tmp___1;
#line 1263
  if ((unsigned long )ctx == (unsigned long )((struct bm_aio_ctx *)0)) {
#line 1264
    return (-12);
  } else {

  }
#line 1266
  __constr_expr_0.mdev = mdev;
#line 1266
  __constr_expr_0.in_flight.counter = 1;
#line 1266
  __constr_expr_0.done = 0U;
#line 1266
  __constr_expr_0.flags = 1U;
#line 1266
  __constr_expr_0.error = 0;
#line 1266
  __constr_expr_0.kref.refcount.counter = 2;
#line 1266
  *ctx = __constr_expr_0;
#line 1275
  tmp___2 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1275
  if (tmp___2 == 0) {
#line 1276
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in drbd_bm_write_page()\n");
#line 1277
    kfree((void const   *)ctx);
#line 1278
    return (-19);
  } else {

  }
#line 1281
  bm_page_io_async(ctx, (int )idx, 1041);
#line 1282
  wait_until_done_or_force_detached(mdev, mdev->ldev, & ctx->done);
#line 1284
  if (ctx->error != 0) {
#line 1285
    drbd_chk_io_error_(mdev, 1, DRBD_META_IO_ERROR, "drbd_bm_write_page");
  } else {

  }
#line 1289
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 1290
  tmp___3 = atomic_read((atomic_t const   *)(& ctx->in_flight));
#line 1290
  err = tmp___3 == 0 ? ctx->error : -5;
#line 1291
  kref_put(& ctx->kref, & bm_aio_ctx_destroy);
#line 1292
  return (err);
}
}
#line 1303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned int i ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 1306
  b = mdev->bitmap;
#line 1312
  if (b->bm_bits < bm_fo) {
#line 1313
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
#line 1314
    bm_fo = 0xffffffffffffffffUL;
  } else {
#line 1316
    goto ldv_52114;
    ldv_52113: 
#line 1318
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 1319
    tmp = bm_bit_to_page_idx(b, (u64 )bm_fo);
#line 1319
    p_addr = __bm_map_pidx(b, tmp);
#line 1321
    if ((int )find_zero_bit != 0) {
#line 1322
      tmp___0 = find_next_zero_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1322
      i = (unsigned int )tmp___0;
    } else {
#line 1325
      tmp___1 = find_next_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1325
      i = (unsigned int )tmp___1;
    }
#line 1328
    __bm_unmap(p_addr);
#line 1329
    if (i <= 32767U) {
#line 1330
      bm_fo = (unsigned long )i + bit_offset;
#line 1331
      if (b->bm_bits <= bm_fo) {
#line 1332
        goto ldv_52111;
      } else {

      }
#line 1333
      goto found;
    } else {

    }
#line 1335
    bm_fo = bit_offset + 32768UL;
    ldv_52114: ;
#line 1316
    if (b->bm_bits > bm_fo) {
#line 1317
      goto ldv_52113;
    } else {

    }
    ldv_52111: 
#line 1337
    bm_fo = 0xffffffffffffffffUL;
  }
  found: ;
#line 1340
  return (bm_fo);
}
}
#line 1343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  bool _bool ;
  int tmp ;
  bool _bool___0 ;
  int tmp___0 ;

  {
#line 1346
  b = mdev->bitmap;
#line 1347
  i = 0xffffffffffffffffUL;
#line 1349
  _bool = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 1349
  if (! _bool) {
#line 1349
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b", "bm_find_next");
  } else {

  }
#line 1349
  if (_bool) {
#line 1349
    tmp = 0;
  } else {
#line 1349
    tmp = 1;
  }
#line 1349
  if (tmp) {
#line 1350
    return (i);
  } else {

  }
#line 1351
  _bool___0 = (unsigned long )b->bm_pages != (unsigned long )((struct page **)0);
#line 1351
  if (! _bool___0) {
#line 1351
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b->bm_pages", "bm_find_next");
  } else {

  }
#line 1351
  if (_bool___0) {
#line 1351
    tmp___0 = 0;
  } else {
#line 1351
    tmp___0 = 1;
  }
#line 1351
  if (tmp___0) {
#line 1352
    return (i);
  } else {

  }
#line 1354
  spin_lock_irq(& b->bm_lock);
#line 1355
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1356
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1358
  i = __bm_find_next(mdev, bm_fo, find_zero_bit);
#line 1360
  spin_unlock_irq(& b->bm_lock);
#line 1361
  return (i);
}
}
#line 1364 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1366
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1366
  return (tmp);
}
}
#line 1379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1382
  tmp = __bm_find_next(mdev, bm_fo, 0);
#line 1382
  return (tmp);
}
}
#line 1385 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1388
  tmp = __bm_find_next(mdev, bm_fo, 1);
#line 1388
  return (tmp);
}
}
#line 1397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int last_page_nr ;
  int c ;
  int changed_total ;
  unsigned int page_nr ;
  unsigned int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1400
  b = mdev->bitmap;
#line 1401
  p_addr = 0;
#line 1403
  last_page_nr = 4294967295U;
#line 1404
  c = 0;
#line 1405
  changed_total = 0;
#line 1407
  if (b->bm_bits <= e) {
#line 1408
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1410
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1412
  bitnr = s;
#line 1412
  goto ldv_52153;
  ldv_52152: 
#line 1413
  tmp = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1413
  page_nr = tmp;
#line 1414
  if (page_nr != last_page_nr) {
#line 1415
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1416
      __bm_unmap(p_addr);
    } else {

    }
#line 1417
    if (c < 0) {
#line 1418
      bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else
#line 1419
    if (c > 0) {
#line 1420
      bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else {

    }
#line 1421
    changed_total = changed_total + c;
#line 1422
    c = 0;
#line 1423
    p_addr = __bm_map_pidx(b, page_nr);
#line 1424
    last_page_nr = page_nr;
  } else {

  }
#line 1426
  if (val != 0) {
#line 1427
    tmp___0 = __test_and_set_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1427
    c = (tmp___0 == 0) + c;
  } else {
#line 1429
    tmp___1 = __test_and_clear_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1429
    c = c - (tmp___1 != 0);
  }
#line 1412
  bitnr = bitnr + 1UL;
  ldv_52153: ;
#line 1412
  if (bitnr <= e) {
#line 1413
    goto ldv_52152;
  } else {

  }

#line 1431
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1432
    __bm_unmap(p_addr);
  } else {

  }
#line 1433
  if (c < 0) {
#line 1434
    bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else
#line 1435
  if (c > 0) {
#line 1436
    bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else {

  }
#line 1437
  changed_total = changed_total + c;
#line 1438
  b->bm_set = b->bm_set + (unsigned long )changed_total;
#line 1439
  return (changed_total);
}
}
#line 1446 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  bool _bool ;
  int tmp ;
  bool _bool___0 ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 1450
  b = mdev->bitmap;
#line 1451
  c = 0;
#line 1453
  _bool = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 1453
  if (! _bool) {
#line 1453
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b", "bm_change_bits_to");
  } else {

  }
#line 1453
  if (_bool) {
#line 1453
    tmp = 0;
  } else {
#line 1453
    tmp = 1;
  }
#line 1453
  if (tmp) {
#line 1454
    return (1);
  } else {

  }
#line 1455
  _bool___0 = (unsigned long )b->bm_pages != (unsigned long )((struct page **)0);
#line 1455
  if (! _bool___0) {
#line 1455
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b->bm_pages", "bm_change_bits_to");
  } else {

  }
#line 1455
  if (_bool___0) {
#line 1455
    tmp___0 = 0;
  } else {
#line 1455
    tmp___0 = 1;
  }
#line 1455
  if (tmp___0) {
#line 1456
    return (0);
  } else {

  }
#line 1458
  tmp___1 = spinlock_check(& b->bm_lock);
#line 1458
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 1459
  if (((val != 0 ? 2U : 1U) & (unsigned int )b->bm_flags) != 0U) {
#line 1460
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1462
  c = __bm_change_bits_to(mdev, s, e, val);
#line 1464
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1465
  return (c);
}
}
#line 1469 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1471
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1471
  return (tmp);
}
}
#line 1475 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1477
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1477
  return (- tmp);
}
}
#line 1482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  int changed ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1487
  changed = 0;
#line 1488
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1488
  paddr = (unsigned long *)tmp;
#line 1489
  i = first_word;
#line 1489
  goto ldv_52193;
  ldv_52192: 
#line 1490
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1490
  bits = (int )tmp___0;
#line 1491
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1492
  changed = (64 - bits) + changed;
#line 1489
  i = i + 1;
  ldv_52193: ;
#line 1489
  if (i < last_word) {
#line 1490
    goto ldv_52192;
  } else {

  }
#line 1494
  __kunmap_atomic((void *)paddr);
#line 1495
  if (changed != 0) {
#line 1499
    bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )page_nr));
#line 1500
    b->bm_set = b->bm_set + (unsigned long )changed;
  } else {

  }
#line 1502
  return;
}
}
#line 1509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1519
  b = mdev->bitmap;
#line 1520
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1521
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1528
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1530
    spin_lock_irq(& b->bm_lock);
#line 1531
    __bm_change_bits_to(mdev, s, e, 1);
#line 1532
    spin_unlock_irq(& b->bm_lock);
#line 1533
    return;
  } else {

  }
#line 1538
  spin_lock_irq(& b->bm_lock);
#line 1541
  if (sl != 0UL) {
#line 1542
    __bm_change_bits_to(mdev, s, sl - 1UL, 1);
  } else {

  }
#line 1544
  first_page = (int )(sl >> 15);
#line 1545
  last_page = (int )(el >> 15);
#line 1549
  first_word = (int )(sl >> 6) & 511;
#line 1550
  last_word = 512;
#line 1553
  page_nr = first_page;
#line 1553
  goto ldv_52210;
  ldv_52209: 
#line 1554
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1555
  spin_unlock_irq(& b->bm_lock);
#line 1556
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1556, 0);
#line 1556
  _cond_resched();
#line 1557
  first_word = 0;
#line 1558
  spin_lock_irq(& b->bm_lock);
#line 1553
  page_nr = page_nr + 1;
  ldv_52210: ;
#line 1553
  if (page_nr < last_page) {
#line 1554
    goto ldv_52209;
  } else {

  }
#line 1561
  last_word = (int )(el >> 6) & 511;
#line 1569
  if (last_word != 0) {
#line 1570
    bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
  } else {

  }
#line 1577
  if (el <= (unsigned long )e) {
#line 1578
    __bm_change_bits_to(mdev, el, e, 1);
  } else {

  }
#line 1579
  spin_unlock_irq(& b->bm_lock);
#line 1580
  return;
}
}
#line 1589 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  bool _bool ;
  int tmp ;
  bool _bool___0 ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;

  {
#line 1592
  b = mdev->bitmap;
#line 1596
  _bool = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 1596
  if (! _bool) {
#line 1596
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b", "drbd_bm_test_bit");
  } else {

  }
#line 1596
  if (_bool) {
#line 1596
    tmp = 0;
  } else {
#line 1596
    tmp = 1;
  }
#line 1596
  if (tmp) {
#line 1597
    return (0);
  } else {

  }
#line 1598
  _bool___0 = (unsigned long )b->bm_pages != (unsigned long )((struct page **)0);
#line 1598
  if (! _bool___0) {
#line 1598
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b->bm_pages", "drbd_bm_test_bit");
  } else {

  }
#line 1598
  if (_bool___0) {
#line 1598
    tmp___0 = 0;
  } else {
#line 1598
    tmp___0 = 1;
  }
#line 1598
  if (tmp___0) {
#line 1599
    return (0);
  } else {

  }
#line 1601
  tmp___1 = spinlock_check(& b->bm_lock);
#line 1601
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 1602
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1603
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1604
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1605
    tmp___2 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1605
    p_addr = bm_map_pidx(b, tmp___2);
#line 1606
    tmp___3 = test_bit_le((int )bitnr & 32767, (void const   *)p_addr);
#line 1606
    i = tmp___3 != 0;
#line 1607
    bm_unmap(p_addr);
  } else
#line 1608
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1609
    i = -1;
  } else {
#line 1611
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1612
    i = 0;
  }
#line 1615
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1616
  return (i);
}
}
#line 1620 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int page_nr ;
  int c ;
  bool _bool ;
  int tmp ;
  bool _bool___0 ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  unsigned int idx ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  bool _bool___1 ;

  {
#line 1623
  b = mdev->bitmap;
#line 1624
  p_addr = 0;
#line 1626
  page_nr = 4294967295U;
#line 1627
  c = 0;
#line 1633
  _bool = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 1633
  if (! _bool) {
#line 1633
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b", "drbd_bm_count_bits");
  } else {

  }
#line 1633
  if (_bool) {
#line 1633
    tmp = 0;
  } else {
#line 1633
    tmp = 1;
  }
#line 1633
  if (tmp) {
#line 1634
    return (1);
  } else {

  }
#line 1635
  _bool___0 = (unsigned long )b->bm_pages != (unsigned long )((struct page **)0);
#line 1635
  if (! _bool___0) {
#line 1635
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b->bm_pages", "drbd_bm_count_bits");
  } else {

  }
#line 1635
  if (_bool___0) {
#line 1635
    tmp___0 = 0;
  } else {
#line 1635
    tmp___0 = 1;
  }
#line 1635
  if (tmp___0) {
#line 1636
    return (1);
  } else {

  }
#line 1638
  tmp___1 = spinlock_check(& b->bm_lock);
#line 1638
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 1639
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1640
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1641
  bitnr = s;
#line 1641
  goto ldv_52251;
  ldv_52250: 
#line 1642
  tmp___2 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1642
  idx = tmp___2;
#line 1643
  if (page_nr != idx) {
#line 1644
    page_nr = idx;
#line 1645
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1646
      bm_unmap(p_addr);
    } else {

    }
#line 1647
    p_addr = bm_map_pidx(b, idx);
  } else {

  }
#line 1649
  _bool___1 = b->bm_bits > bitnr;
#line 1649
  if (! _bool___1) {
#line 1649
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"bitnr < b->bm_bits", "drbd_bm_count_bits");
  } else {

  }
#line 1649
  if ((int )_bool___1) {
#line 1650
    tmp___3 = test_bit_le((int )((unsigned int )bitnr - (page_nr << 15)), (void const   *)p_addr);
#line 1650
    c = (tmp___3 != 0) + c;
  } else {
#line 1652
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  }
#line 1641
  bitnr = bitnr + 1UL;
  ldv_52251: ;
#line 1641
  if (bitnr <= (unsigned long )e) {
#line 1642
    goto ldv_52250;
  } else {

  }

#line 1654
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1655
    bm_unmap(p_addr);
  } else {

  }
#line 1656
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1657
  return (c);
}
}
#line 1675 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  bool _bool ;
  int tmp ;
  bool _bool___0 ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned int tmp___2 ;
  unsigned long *tmp___3 ;
  unsigned long tmp___4 ;
  int tmp___5 ;

  {
#line 1677
  b = mdev->bitmap;
#line 1682
  _bool = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 1682
  if (! _bool) {
#line 1682
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b", "drbd_bm_e_weight");
  } else {

  }
#line 1682
  if (_bool) {
#line 1682
    tmp = 0;
  } else {
#line 1682
    tmp = 1;
  }
#line 1682
  if (tmp) {
#line 1683
    return (0);
  } else {

  }
#line 1684
  _bool___0 = (unsigned long )b->bm_pages != (unsigned long )((struct page **)0);
#line 1684
  if (! _bool___0) {
#line 1684
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"b->bm_pages", "drbd_bm_e_weight");
  } else {

  }
#line 1684
  if (_bool___0) {
#line 1684
    tmp___0 = 0;
  } else {
#line 1684
    tmp___0 = 1;
  }
#line 1684
  if (tmp___0) {
#line 1685
    return (0);
  } else {

  }
#line 1687
  tmp___1 = spinlock_check(& b->bm_lock);
#line 1687
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 1688
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1689
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1691
  s = (int )(enr << 6);
#line 1692
  _min1 = (enr + 1UL) << 6;
#line 1692
  _min2 = b->bm_words;
#line 1692
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1693
  count = 0;
#line 1694
  if ((size_t )s < b->bm_words) {
#line 1695
    n = e - s;
#line 1696
    tmp___2 = bm_word_to_page_idx(b, (unsigned long )s);
#line 1696
    p_addr = bm_map_pidx(b, tmp___2);
#line 1697
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1698
    goto ldv_52277;
    ldv_52276: 
#line 1699
    tmp___3 = bm;
#line 1699
    bm = bm + 1;
#line 1699
    tmp___4 = hweight_long(*tmp___3);
#line 1699
    count = (int )((unsigned int )tmp___4 + (unsigned int )count);
    ldv_52277: 
#line 1698
    tmp___5 = n;
#line 1698
    n = n - 1;
#line 1698
    if (tmp___5 != 0) {
#line 1699
      goto ldv_52276;
    } else {

    }
#line 1700
    bm_unmap(p_addr);
  } else {
#line 1702
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1704
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1705
  return (count);
}
}
#line 26 "include/linux/export.h"
extern struct module __this_module ;
#line 468 "include/linux/module.h"
bool ldv_try_module_get_1(struct module *ldv_func_arg1 ) ;
#line 474
void ldv_module_put_2(struct module *ldv_func_arg1 ) ;
#line 3 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_try_module_get(struct module *module ) ;
#line 5
void ldv_module_put(struct module *module ) ;
#line 278 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 280
  __mptr = inode;
#line 280
  return ((struct proc_inode *)__mptr + 0xffffffffffffffc0UL);
}
}
#line 283 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 285
  tmp = PROC_I(inode);
#line 285
  return (tmp->pde);
}
}
#line 84 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 85
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 92
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 125
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 126
extern int single_release(struct inode * , struct file * ) ;
#line 110 "include/linux/idr.h"
extern void *idr_get_next(struct idr * , int * ) ;
#line 54 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 326
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 327
char const   *drbd_role_str(enum drbd_role s ) ;
#line 328
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 275 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 277
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 278
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 278
    return (tmp);
  } else {

  }
#line 279
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 292 "include/linux/backing-dev.h"
__inline static int bdi_rw_congested(struct backing_dev_info *bdi ) 
{ 
  int tmp ;

  {
#line 294
  tmp = bdi_congested(bdi, 12);
#line 294
  return (tmp);
}
}
#line 266 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 268
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 167 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct idr minors ;
#line 1418
int proc_details ;
#line 1573 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1574
struct file_operations  const  drbd_proc_fops ;
#line 2083 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned int shift ;
  unsigned long left ;
  unsigned long total ;
  unsigned long tmp___1 ;

  {
#line 2094
  if ((unsigned int )*((unsigned short *)mdev + 374UL) == 288U || (unsigned int )*((unsigned short *)mdev + 374UL) == 304U) {
#line 2095
    *bits_left = mdev->ov_left;
  } else {
#line 2097
    tmp = drbd_bm_total_weight(mdev);
#line 2097
    *bits_left = tmp - mdev->rs_failed;
  }
#line 2100
  if (*bits_left > mdev->rs_total) {
#line 2106
    __asm__  volatile   ("": : : "memory");
#line 2107
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_50103.conn);
#line 2107
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2110
    *per_mil_done = 0U;
  } else {
#line 2121
    shift = mdev->rs_total > 4294967295UL ? 16U : 10U;
#line 2122
    left = *bits_left >> (int )shift;
#line 2123
    total = (mdev->rs_total >> (int )shift) + 1UL;
#line 2124
    tmp___1 = 1000UL - (left * 1000UL) / total;
#line 2125
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2127
  return;
}
}
#line 2216 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_suspended(struct drbd_conf *mdev ) 
{ 
  struct drbd_tconn *tconn ;

  {
#line 2218
  tconn = mdev->tconn;
#line 2220
  return (((unsigned int )*((unsigned char *)tconn + 132UL) != 0U || (unsigned int )*((unsigned char *)tconn + 132UL) != 0U) || (unsigned int )*((unsigned char *)tconn + 132UL) != 0U);
}
}
#line 2294 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool verify_can_do_stop_sector(struct drbd_conf *mdev ) 
{ 


  {
#line 2296
  return ((bool )((mdev->tconn)->agreed_pro_version > 96 && (mdev->tconn)->agreed_pro_version != 100));
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 45
static int drbd_proc_release(struct inode *inode , struct file *file ) ;
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 49
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & drbd_proc_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void seq_printf_with_thousands_grouping(struct seq_file *seq , long v ) 
{ 
  long tmp ;
  long tmp___0 ;

  {
#line 60
  tmp___0 = __builtin_expect(v > 999999L, 0L);
#line 60
  if (tmp___0 != 0L) {
#line 62
    seq_printf(seq, "%ld,", v / 1000000L);
#line 63
    v = v % 1000000L;
#line 64
    seq_printf(seq, "%03ld,%03ld", v / 1000L, v % 1000L);
  } else {
#line 65
    tmp = __builtin_expect(v > 999L, 1L);
#line 65
    if (tmp != 0L) {
#line 66
      seq_printf(seq, "%ld,%03ld", v / 1000L, v % 1000L);
    } else {
#line 68
      seq_printf(seq, "%ld", v);
    }
  }
#line 69
  return;
}
}
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;
  int stalled ;
  unsigned long bm_bits ;
  unsigned long tmp ;
  unsigned long bit_pos ;
  unsigned long long stop_sector ;
  bool tmp___0 ;

  {
#line 82
  stalled = 0;
#line 84
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 86
  x = (int )(res / 50U);
#line 87
  y = 20 - x;
#line 88
  seq_printf(seq, "\t[");
#line 89
  i = 1;
#line 89
  goto ldv_51758;
  ldv_51757: 
#line 90
  seq_printf(seq, "=");
#line 89
  i = i + 1;
  ldv_51758: ;
#line 89
  if (i < x) {
#line 90
    goto ldv_51757;
  } else {

  }
#line 91
  seq_printf(seq, ">");
#line 92
  i = 0;
#line 92
  goto ldv_51761;
  ldv_51760: 
#line 93
  seq_printf(seq, ".");
#line 92
  i = i + 1;
  ldv_51761: ;
#line 92
  if (i < y) {
#line 93
    goto ldv_51760;
  } else {

  }
#line 94
  seq_printf(seq, "] ");
#line 96
  if ((unsigned int )*((unsigned short *)mdev + 374UL) == 288U || (unsigned int )*((unsigned short *)mdev + 374UL) == 304U) {
#line 97
    seq_printf(seq, "verified:");
  } else {
#line 99
    seq_printf(seq, "sync\'ed:");
  }
#line 100
  seq_printf(seq, "%3u.%u%% ", res / 10U, res % 10U);
#line 103
  if (mdev->rs_total > 1048576UL) {
#line 104
    seq_printf(seq, "(%lu/%lu)M", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 108
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 125
  i = (mdev->rs_last_mark + 2) % 8;
#line 126
  dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 127
  if (dt > 6000UL) {
#line 128
    stalled = 1;
  } else {

  }
#line 130
  if (dt == 0UL) {
#line 131
    dt = dt + 1UL;
  } else {

  }
#line 132
  db = mdev->rs_mark_left[i] - rs_left;
#line 133
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 135
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 138
  dbdt = db / dt << 2;
#line 139
  seq_printf(seq, " speed: ");
#line 140
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 141
  seq_printf(seq, " (");
#line 143
  if (proc_details > 0) {
#line 145
    i = (mdev->rs_last_mark + 7) % 8;
#line 146
    dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 147
    if (dt == 0UL) {
#line 148
      dt = dt + 1UL;
    } else {

    }
#line 149
    db = mdev->rs_mark_left[i] - rs_left;
#line 150
    dbdt = db / dt << 2;
#line 151
    seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 152
    seq_printf(seq, " -- ");
  } else {

  }
#line 158
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 159
  if (dt == 0UL) {
#line 160
    dt = 1UL;
  } else {

  }
#line 161
  db = mdev->rs_total - rs_left;
#line 162
  dbdt = db / dt << 2;
#line 163
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 164
  seq_printf(seq, ")");
#line 166
  if ((unsigned int )*((unsigned short *)mdev + 374UL) == 272U || (unsigned int )*((unsigned short *)mdev + 374UL) == 288U) {
#line 168
    seq_printf(seq, " want: ");
#line 169
    seq_printf_with_thousands_grouping(seq, (long )mdev->c_sync_rate);
  } else {

  }
#line 171
  seq_printf(seq, " K/sec%s\n", stalled != 0 ? (char *)" (stalled)" : (char *)"");
#line 173
  if (proc_details > 0) {
#line 176
    tmp = drbd_bm_bits(mdev);
#line 176
    bm_bits = tmp;
#line 178
    stop_sector = 0ULL;
#line 179
    if ((unsigned int )*((unsigned short *)mdev + 374UL) == 288U || (unsigned int )*((unsigned short *)mdev + 374UL) == 304U) {
#line 181
      bit_pos = bm_bits - mdev->ov_left;
#line 182
      tmp___0 = verify_can_do_stop_sector(mdev);
#line 182
      if ((int )tmp___0) {
#line 183
        stop_sector = (unsigned long long )mdev->ov_stop_sector;
      } else {

      }
    } else {
#line 185
      bit_pos = mdev->bm_resync_fo;
    }
#line 188
    seq_printf(seq, "\t%3d%% sector pos: %llu/%llu", (int )(bit_pos / (bm_bits / 100UL + 1UL)),
               (unsigned long long )bit_pos * 8ULL, (unsigned long long )bm_bits * 8ULL);
#line 193
    if (stop_sector != 0ULL && stop_sector != 0xffffffffffffffffULL) {
#line 194
      seq_printf(seq, " stop sector: %llu", stop_sector);
    } else {

    }
#line 195
    seq_printf(seq, "\n");
  } else {

  }
#line 197
  return;
}
}
#line 199 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 201
  __mptr = (struct lc_element  const  *)e;
#line 201
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 203
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 206
  return;
}
}
#line 209 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int prev_i ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  struct net_conf *nc ;
  char wp ;
  char write_ordering_chars[3U] ;
  char const   *tmp ;
  void *tmp___0 ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  unsigned long tmp___14 ;
  int tmp___15 ;
  void *tmp___16 ;

  {
#line 211
  prev_i = -1;
#line 217
  write_ordering_chars[0] = 110;
#line 217
  write_ordering_chars[1] = 100;
#line 217
  write_ordering_chars[2] = 102;
#line 223
  tmp = drbd_buildtag();
#line 223
  seq_printf(seq, "version: 8.4.2 (api:%d/proto:%d-%d)\n%s\n", 1, 86, 101, tmp);
#line 246
  rcu_read_lock();
#line 247
  i = 0;
#line 247
  tmp___0 = idr_get_next(& minors, & i);
#line 247
  mdev = (struct drbd_conf *)tmp___0;
#line 247
  goto ldv_51788;
  ldv_51787: ;
#line 248
  if (i + -1 != prev_i) {
#line 249
    seq_printf(seq, "\n");
  } else {

  }
#line 250
  prev_i = i;
#line 252
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_50103.conn);
#line 254
  if (((unsigned int )*((unsigned short *)mdev + 374UL) == 0U && (unsigned int )*((unsigned char *)mdev + 749UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 748UL) == 2U) {
#line 257
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 260
    bdi_rw_congested(& (mdev->rq_queue)->backing_dev_info);
#line 262
    _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 262
    tmp___1 = debug_lockdep_rcu_enabled();
#line 262
    if (tmp___1 != 0 && ! __warned) {
#line 262
      tmp___2 = rcu_read_lock_held();
#line 262
      if (tmp___2 == 0 && 1) {
#line 262
        __warned = 1;
#line 262
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared",
                               262, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 262
    nc = _________p1;
#line 263
    wp = (unsigned long )nc != (unsigned long )((struct net_conf *)0) ? (char )((unsigned int )((unsigned char )nc->wire_protocol) + 64U) : 32;
#line 264
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 264
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 264
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 264
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 264
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 264
    tmp___8 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 264
    tmp___9 = drbd_suspended(mdev);
#line 264
    tmp___10 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_50103.pdsk);
#line 264
    tmp___11 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_50103.disk);
#line 264
    tmp___12 = drbd_role_str((enum drbd_role )mdev->state.ldv_50103.peer);
#line 264
    tmp___13 = drbd_role_str((enum drbd_role )mdev->state.ldv_50103.role);
#line 264
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___13, tmp___12, tmp___11, tmp___10, (int )wp, tmp___9 != 0 ? 115 : 114,
               (unsigned int )*((unsigned char *)mdev + 750UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)mdev + 750UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 750UL) != 0U ? 117 : 45, (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               tmp___8 != 0 ? 115 : 45, mdev->send_cnt / 2U, mdev->recv_cnt / 2U,
               mdev->writ_cnt / 2U, mdev->read_cnt / 2U, mdev->al_writ_cnt, mdev->bm_writ_cnt,
               tmp___7, tmp___5 + tmp___6, tmp___4, tmp___3, (mdev->tconn)->epochs,
               (int )write_ordering_chars[(unsigned int )(mdev->tconn)->write_ordering]);
#line 294
    tmp___14 = drbd_bm_total_weight(mdev);
#line 294
    seq_printf(seq, " oos:%llu\n", (unsigned long long )tmp___14 << 2);
  }
#line 298
  if ((((unsigned int )*((unsigned short *)mdev + 374UL) == 256U || (unsigned int )*((unsigned short *)mdev + 374UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 374UL) == 288U) || (unsigned int )*((unsigned short *)mdev + 374UL) == 304U) {
#line 302
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 304
  if (proc_details > 0) {
#line 304
    tmp___15 = _get_ldev_if_state(mdev, D_FAILED);
#line 304
    if (tmp___15 != 0) {
#line 305
      lc_seq_printf_stats(seq, mdev->resync);
#line 306
      lc_seq_printf_stats(seq, mdev->act_log);
#line 307
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 310
  if (proc_details > 1) {
#line 311
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 312
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
#line 247
  i = i + 1;
#line 247
  tmp___16 = idr_get_next(& minors, & i);
#line 247
  mdev = (struct drbd_conf *)tmp___16;
  ldv_51788: ;
#line 247
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 248
    goto ldv_51787;
  } else {

  }
#line 317
  rcu_read_unlock();
#line 319
  return (0);
}
}
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
#line 324
  tmp___1 = ldv_try_module_get_1(& __this_module);
#line 324
  if ((int )tmp___1) {
#line 325
    tmp = PDE((struct inode  const  *)inode);
#line 325
    tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 325
    return (tmp___0);
  } else {

  }
#line 326
  return (-19);
}
}
#line 329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_release(struct inode *inode , struct file *file ) 
{ 
  int tmp ;

  {
#line 331
  ldv_module_put_2(& __this_module);
#line 332
  tmp = single_release(inode, file);
#line 332
  return (tmp);
}
}
#line 353
void ldv_check_final_state(void) ;
#line 356
extern void ldv_check_return_value(int  ) ;
#line 362
extern void ldv_initialize(void) ;
#line 365
extern void ldv_handler_precall(void) ;
#line 368
extern int nondet_int(void) ;
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 374 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_main1_sequence_infinite_withcheck_stateful(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_4 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 408
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 398
  LDV_IN_INTERRUPT = 1;
#line 407
  ldv_initialize();
#line 411
  goto ldv_51824;
  ldv_51823: 
#line 415
  tmp = nondet_int();
#line 415
  switch (tmp) {
  case 0: ;
#line 420
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 425
    ldv_handler_precall();
#line 426
    res_drbd_proc_open_4 = drbd_proc_open(var_group1, var_group2);
#line 427
    ldv_check_return_value(res_drbd_proc_open_4);
#line 428
    if (res_drbd_proc_open_4 != 0) {
#line 429
      goto ldv_module_exit;
    } else {

    }
#line 430
    ldv_s_drbd_proc_fops_file_operations = ldv_s_drbd_proc_fops_file_operations + 1;
  } else {

  }
#line 436
  goto ldv_51820;
  case 1: ;
#line 440
  if (ldv_s_drbd_proc_fops_file_operations == 1) {
#line 445
    ldv_handler_precall();
#line 446
    drbd_proc_release(var_group1, var_group2);
#line 447
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 453
  goto ldv_51820;
  default: ;
#line 454
  goto ldv_51820;
  }
  ldv_51820: ;
  ldv_51824: 
#line 411
  tmp___0 = nondet_int();
#line 411
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 413
    goto ldv_51823;
  } else {

  }

  ldv_module_exit: ;
#line 463
  ldv_check_final_state();
#line 466
  return;
}
}
#line 470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
bool ldv_try_module_get_1(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
#line 475
  tmp = ldv_try_module_get(ldv_func_arg1);
#line 475
  return (tmp != 0);
}
}
#line 478 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_module_put_2(struct module *ldv_func_arg1 ) 
{ 


  {
#line 483
  ldv_module_put(ldv_func_arg1);
#line 484
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 62
  __list_add(new, head, head->next);
#line 63
  return;
}
}
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 111
extern void __list_del_entry(struct list_head * ) ;
#line 112
extern void list_del(struct list_head * ) ;
#line 142 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
#line 146
  return;
}
}
#line 153 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 155
  __list_del_entry(list);
#line 156
  list_add(list, head);
#line 157
  return;
}
}
#line 164 "include/linux/list.h"
__inline static void list_move_tail(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 167
  __list_del_entry(list);
#line 168
  list_add_tail(list, head);
#line 169
  return;
}
}
#line 186 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 273 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 277
  first = list->next;
#line 278
  last = list->prev;
#line 280
  first->prev = prev;
#line 281
  prev->next = first;
#line 283
  last->next = next;
#line 284
  next->prev = last;
#line 285
  return;
}
}
#line 318 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 321
  tmp = list_empty((struct list_head  const  *)list);
#line 321
  if (tmp == 0) {
#line 322
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 323
    INIT_LIST_HEAD(list);
  } else {

  }
#line 325
  return;
}
}
#line 206 "include/linux/kernel.h"
extern void panic(char const   *  , ...) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xchg_wrong_size(void) ;
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_xchg(atomic_t *v , int new ) 
{ 
  int __ret ;

  {
#line 216
  __ret = new;
#line 216
  switch (4UL) {
  case 1UL: 
#line 216
  __asm__  volatile   ("xchgb %b0, %1\n": "+q" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5562;
  case 2UL: 
#line 216
  __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5562;
  case 4UL: 
#line 216
  __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5562;
  case 8UL: 
#line 216
  __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5562;
  default: 
#line 216
  __xchg_wrong_size();
  }
  ldv_5562: ;
#line 216
  return (__ret);
}
}
#line 89 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 91
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 91
  return (tmp);
}
}
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_6135.rlock);
#line 286
  return;
}
}
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_6135.rlock);
#line 326
  return;
}
}
#line 91 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 176 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 240
extern void add_timer(struct timer_list * ) ;
#line 40 "include/linux/kref.h"
__inline static void kref_get(struct kref *kref ) 
{ 
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;

  {
#line 42
  tmp = atomic_read((atomic_t const   *)(& kref->refcount));
#line 42
  __ret_warn_on = tmp == 0;
#line 42
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 42
  if (tmp___0 != 0L) {
#line 42
    warn_slowpath_null("include/linux/kref.h", 42);
  } else {

  }
#line 42
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 43
  atomic_inc(& kref->refcount);
#line 44
  return;
}
}
#line 915 "include/linux/device.h"
extern int dev_emerg(struct device  const  * , char const   *  , ...) ;
#line 343 "include/linux/page-flags.h"
__inline static int PageTail(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 343
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 343
  return (tmp);
}
}
#line 357 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 359
  tmp = PageTail((struct page  const  *)page);
#line 359
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 359
  if (tmp___0 != 0L) {
#line 360
    return (page->ldv_16348.first_page);
  } else {

  }
#line 361
  return (page);
}
}
#line 379 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 381
  tmp = compound_head(page);
#line 381
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->ldv_16329.ldv_16328.ldv_16327._count));
#line 381
  return (tmp___0);
}
}
#line 57 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 59
  page_link = sg->page_link & 3UL;
#line 65
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 65
  if (tmp != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_18982: ;
#line 65
    goto ldv_18982;
  } else {

  }
#line 67
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 67
  if (tmp___0 != 0L) {
#line 67
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (67), "i" (12UL));
    ldv_18983: ;
#line 67
    goto ldv_18983;
  } else {

  }
#line 68
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 68
  if (tmp___1 != 0L) {
#line 68
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (68), "i" (12UL));
    ldv_18984: ;
#line 68
    goto ldv_18984;
  } else {

  }
#line 70
  sg->page_link = page_link | (unsigned long )page;
#line 71
  return;
}
}
#line 87 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 90
  sg_assign_page(sg, page);
#line 91
  sg->offset = offset;
#line 92
  sg->length = len;
#line 93
  return;
}
}
#line 207
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 648 "include/linux/fs.h"
__inline static loff_t i_size_read(struct inode  const  *inode ) 
{ 


  {
#line 667
  return ((loff_t )inode->i_size);
}
}
#line 321 "include/linux/sched.h"
extern long schedule_timeout_interruptible(long  ) ;
#line 2158
extern void flush_signals(struct task_struct * ) ;
#line 2192
extern void force_sig(int  , struct task_struct * ) ;
#line 2533 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2535
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2535
  return (tmp);
}
}
#line 2559 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2561
  tmp = test_tsk_thread_flag(p, 2);
#line 2561
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2561
  return ((int )tmp___0);
}
}
#line 104 "include/linux/idr.h"
extern void *idr_find(struct idr * , int  ) ;
#line 1475 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1134 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1136
  return (& tfm->base);
}
}
#line 1154 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1156
  tmp = crypto_hash_tfm(tfm);
#line 1156
  return (& tmp->crt_u.hash);
}
}
#line 1169 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1171
  tmp = crypto_hash_crt(tfm);
#line 1171
  return (tmp->digestsize);
}
}
#line 1189 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->init))(desc);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1198
  tmp = crypto_hash_crt(desc->tfm);
#line 1198
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1198
  return (tmp___0);
}
}
#line 1201 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->final))(desc, out);
#line 1203
  return (tmp___0);
}
}
#line 219 "include/linux/bio.h"
extern struct bio *bio_clone_bioset(struct bio * , gfp_t  , struct bio_set * ) ;
#line 221
extern struct bio_set *fs_bio_set ;
#line 228 "include/linux/bio.h"
__inline static struct bio *bio_clone(struct bio *bio , gfp_t gfp_mask ) 
{ 
  struct bio *tmp ;

  {
#line 230
  tmp = bio_clone_bioset(bio, gfp_mask, fs_bio_set);
#line 230
  return (tmp);
}
}
#line 717 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 1083 "include/linux/blkdev.h"
__inline static unsigned int queue_max_hw_sectors(struct request_queue *q ) 
{ 


  {
#line 1085
  return (q->limits.max_hw_sectors);
}
}
#line 131 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_state.h"
enum drbd_state_rv conn_request_state(struct drbd_tconn *tconn , union drbd_state mask ,
                                      union drbd_state val , enum chg_state_flags flags ) ;
#line 525 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 531
  __asm__  volatile   ("": : : "memory");
#line 532
  return (thi->t_state);
}
}
#line 798
struct fifo_buffer *fifo_alloc(int fifo_size ) ;
#line 1037 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  void *tmp ;

  {
#line 1039
  tmp = idr_find(& minors, (int )minor);
#line 1039
  return ((struct drbd_conf *)tmp);
}
}
#line 1068
void drbd_thread_current_set_cpu(struct drbd_thread *thi ) ;
#line 1087
void drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) ;
#line 1094
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packet cmd , struct drbd_peer_request *peer_req ) ;
#line 1100
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packet cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1102
int drbd_send_out_of_sync(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1103
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packet cmd , struct drbd_peer_request *peer_req ) ;
#line 1105
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1106
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1108
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packet cmd ) ;
#line 1111
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1117
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1118
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) ;
#line 1121
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1123
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1124
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1126
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1388
wait_queue_head_t drbd_pp_wait ;
#line 1404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1408
void drbd_minor_destroy(struct kref *kref ) ;
#line 1443
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1446
int drbd_worker(struct drbd_thread *thi ) ;
#line 1447
enum drbd_ret_code drbd_resync_after_valid(struct drbd_conf *mdev , int o_minor ) ;
#line 1448
void drbd_resync_after_changed(struct drbd_conf *mdev ) ;
#line 1449
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1450
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1451
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1452
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1455
void drbd_md_put_buffer(struct drbd_conf *mdev ) ;
#line 1458
void drbd_ov_out_of_sync_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1461
void drbd_rs_controller_reset(struct drbd_conf *mdev ) ;
#line 1463 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_out_of_sync_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1465
  if (mdev->ov_last_oos_size != 0UL) {
#line 1466
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1470
  mdev->ov_last_oos_size = 0UL;
#line 1471
  return;
}
}
#line 1474
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1475
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_peer_request *peer_req ,
                  void *digest ) ;
#line 1478
int w_e_end_data_req(struct drbd_work *w , int cancel ) ;
#line 1479
int w_e_end_rsdata_req(struct drbd_work *w , int cancel ) ;
#line 1480
int w_e_end_csum_rs_req(struct drbd_work *w , int cancel ) ;
#line 1481
int w_e_end_ov_reply(struct drbd_work *w , int cancel ) ;
#line 1482
int w_e_end_ov_req(struct drbd_work *w , int cancel ) ;
#line 1483
int w_ov_finished(struct drbd_work *w , int cancel ) ;
#line 1484
int w_resync_timer(struct drbd_work *w , int cancel ) ;
#line 1485
int w_send_write_hint(struct drbd_work *w , int cancel ) ;
#line 1486
int w_make_resync_request(struct drbd_work *w , int cancel ) ;
#line 1487
int w_send_dblock(struct drbd_work *w , int cancel ) ;
#line 1488
int w_send_read_req(struct drbd_work *w , int cancel ) ;
#line 1489
int w_prev_work_done(struct drbd_work *w , int cancel ) ;
#line 1491
int w_restart_disk_io(struct drbd_work *w , int cancel ) ;
#line 1492
int w_send_out_of_sync(struct drbd_work *w , int cancel ) ;
#line 1493
int w_start_resync(struct drbd_work *w , int cancel ) ;
#line 1495
void resync_timer_fn(unsigned long data ) ;
#line 1496
void start_resync_timer_fn(unsigned long data ) ;
#line 1499
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) ;
#line 1500
int drbd_submit_peer_request(struct drbd_conf *mdev , struct drbd_peer_request *peer_req ,
                             unsigned int const   rw , int const   fault_type ) ;
#line 1504
struct drbd_peer_request *drbd_alloc_peer_req(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              unsigned int data_size , gfp_t gfp_mask ) ;
#line 1507
void __drbd_free_peer_req(struct drbd_conf *mdev , struct drbd_peer_request *peer_req ,
                          int is_net ) ;
#line 1523 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  char *uoptval ;
  int err ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 1526
  tmp = current_thread_info();
#line 1526
  oldfs = tmp->addr_limit;
#line 1530
  uoptval = optval;
#line 1532
  tmp___0 = current_thread_info();
#line 1532
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 1532
  tmp___0->addr_limit = __constr_expr_0;
#line 1533
  if (level == 1) {
#line 1534
    err = sock_setsockopt(sock, level, optname, uoptval, (unsigned int )optlen);
  } else {
#line 1536
    err = (*((sock->ops)->setsockopt))(sock, level, optname, uoptval, (unsigned int )optlen);
  }
#line 1538
  tmp___1 = current_thread_info();
#line 1538
  tmp___1->addr_limit = oldfs;
#line 1539
  return (err);
}
}
#line 1542 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1544
  val = 1;
#line 1545
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1547
  return;
}
}
#line 1549 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1551
  val = 0;
#line 1552
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1554
  return;
}
}
#line 1579
void drbd_al_begin_io(struct drbd_conf *mdev , struct drbd_interval *i ) ;
#line 1580
void drbd_al_complete_io(struct drbd_conf *mdev , struct drbd_interval *i ) ;
#line 1581
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1583
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1585
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1586
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1588
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) ;
#line 1589
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1593
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) ;
#line 1621 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1623
  return ((struct page *)page->ldv_16348.private);
}
}
#line 1632 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_peer_req_has_active_page(struct drbd_peer_request *peer_req ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1634
  page = peer_req->pages;
#line 1635
  goto ldv_51370;
  ldv_51369: 
#line 1636
  tmp = page_count(page);
#line 1636
  if (tmp > 1) {
#line 1637
    return (1);
  } else {

  }
#line 1635
  page = page_chain_next(page);
  ldv_51370: ;
#line 1635
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1635
    tmp___0 = page_chain_next(page);
#line 1635
    __builtin_prefetch((void const   *)tmp___0);
#line 1635
    if (1 != 0) {
#line 1636
      goto ldv_51369;
    } else {
#line 1638
      goto ldv_51371;
    }
  } else {

  }
  ldv_51371: ;
#line 1639
  return (0);
}
}
#line 1675 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , enum drbd_force_detach_flags df ,
                                              char const   *where ) 
{ 
  enum drbd_io_error_p ep ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1681
  rcu_read_lock();
#line 1682
  _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 1682
  tmp = debug_lockdep_rcu_enabled();
#line 1682
  if (tmp != 0 && ! __warned) {
#line 1682
    tmp___0 = rcu_read_lock_held();
#line 1682
    if (tmp___0 == 0 && 1) {
#line 1682
      __warned = 1;
#line 1682
      lockdep_rcu_suspicious("/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
                             1682, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1682
  ep = (enum drbd_io_error_p )_________p1->on_io_error;
#line 1683
  rcu_read_unlock();
#line 1684
  switch ((unsigned int )ep) {
  case 0U: ;
#line 1686
  if ((unsigned int )df == 0U || (unsigned int )df == 1U) {
#line 1687
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1687
    if (tmp___1 != 0) {
#line 1688
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1689
    if ((int )mdev->state.ldv_50103.disk > 4) {
#line 1690
      __ns = drbd_read_state(mdev);
#line 1690
      __ns.ldv_40604.disk = 4U;
#line 1690
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1691
    goto ldv_51401;
  } else {

  }
  case 2U: ;
  case 1U: 
#line 1716
  set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1717
  if ((unsigned int )df == 0U) {
#line 1718
    set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1719
  if ((unsigned int )df == 3U) {
#line 1720
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1721
  if ((int )mdev->state.ldv_50103.disk > 2) {
#line 1722
    __ns___0 = drbd_read_state(mdev);
#line 1722
    __ns___0.ldv_40604.disk = 2U;
#line 1722
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1723
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1726
  goto ldv_51401;
  }
  ldv_51401: ;
#line 1729
  return;
}
}
#line 1804 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 
  loff_t tmp ;
  sector_t tmp___0 ;

  {
#line 1807
  if ((unsigned long )bdev != (unsigned long )((struct block_device *)0)) {
#line 1807
    tmp = i_size_read((struct inode  const  *)bdev->bd_inode);
#line 1807
    tmp___0 = (sector_t )(tmp >> 9);
  } else {
#line 1807
    tmp___0 = 0UL;
  }
#line 1807
  return (tmp___0);
}
}
#line 1897 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1900
  tmp = spinlock_check(& q->q_lock);
#line 1900
  flags = _raw_spin_lock_irqsave(tmp);
#line 1901
  list_add_tail(& w->list, & q->q);
#line 1902
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1903
  __wake_up(& q->q_wait, 3U, 1, 0);
#line 1904
  return;
}
}
#line 1906 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_tconn *tconn ) 
{ 
  int tmp ;

  {
#line 1908
  tmp = constant_test_bit(3U, (unsigned long const volatile   *)(& tconn->flags));
#line 1908
  if (tmp != 0) {
#line 1909
    force_sig(24, tconn->asender.task);
  } else {

  }
#line 1910
  return;
}
}
#line 1912 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_tconn *tconn ) 
{ 


  {
#line 1914
  set_bit(2U, (unsigned long volatile   *)(& tconn->flags));
#line 1915
  wake_asender(tconn);
#line 1916
  return;
}
}
#line 1918
void *conn_prepare_command(struct drbd_tconn *tconn , struct drbd_socket *sock ) ;
#line 1919
void *drbd_prepare_command(struct drbd_conf *mdev , struct drbd_socket *sock ) ;
#line 1920
int conn_send_command(struct drbd_tconn *tconn , struct drbd_socket *sock , enum drbd_packet cmd ,
                      unsigned int header_size , void *data , unsigned int size ) ;
#line 1923
int drbd_send_command(struct drbd_conf *mdev , struct drbd_socket *sock , enum drbd_packet cmd ,
                      unsigned int header_size , void *data , unsigned int size ) ;
#line 1994 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1996
  atomic_inc(& mdev->rs_pending_cnt);
#line 1997
  return;
}
}
#line 2000 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void _dec_rs_pending(struct drbd_conf *mdev , char const   *func ,
                                     int line ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 2002
  atomic_dec(& mdev->rs_pending_cnt);
#line 2003
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2003
  if (tmp___0 < 0) {
#line 2003
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2003
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            func, line, tmp);
  } else {

  }
#line 2004
  return;
}
}
#line 2021 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void _dec_unacked(struct drbd_conf *mdev , char const   *func , int line ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 2023
  atomic_dec(& mdev->unacked_cnt);
#line 2024
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 2024
  if (tmp___0 < 0) {
#line 2024
    tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 2024
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            func, line, tmp);
  } else {

  }
#line 2025
  return;
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 24
void drbd_peer_request_endio(struct bio *bio , int error ) ;
#line 25
void drbd_request_endio(struct bio *bio , int error ) ;
#line 250 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_make_private_bio(struct drbd_request *req , struct bio *bio_src ) 
{ 
  struct bio *bio ;

  {
#line 253
  bio = bio_clone(bio_src, 16U);
#line 255
  req->private_bio = bio;
#line 257
  bio->bi_private = (void *)req;
#line 258
  bio->bi_end_io = & drbd_request_endio;
#line 259
  bio->bi_next = 0;
#line 260
  return;
}
}
#line 273
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 275
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 304 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 308
  mdev = req->w.ldv_50388.mdev;
#line 312
  tmp = spinlock_check(& (mdev->tconn)->req_lock);
#line 312
  flags = _raw_spin_lock_irqsave(tmp);
#line 313
  rv = __req_mod(req, what, & m);
#line 314
  spin_unlock_irqrestore(& (mdev->tconn)->req_lock, flags);
#line 316
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 317
    complete_master_bio(mdev, & m);
  } else {

  }
#line 319
  return (rv);
}
}
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_work *w , int cancel ) ;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;
  struct drbd_conf *mdev ;
  struct drbd_md_io  const  *__mptr ;

  {
#line 79
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 80
  __mptr = (struct drbd_md_io  const  *)md_io;
#line 80
  mdev = (struct drbd_conf *)__mptr + 0xfffffffffffffa38UL;
#line 82
  md_io->error = error;
#line 95
  drbd_md_put_buffer(mdev);
#line 96
  md_io->done = 1U;
#line 97
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 98
  bio_put(bio);
#line 99
  put_ldev(mdev);
#line 100
  return;
}
}
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_peer_request *peer_req ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 107
  flags = 0UL;
#line 108
  mdev = peer_req->w.ldv_50388.mdev;
#line 110
  tmp = spinlock_check(& (mdev->tconn)->req_lock);
#line 110
  flags = _raw_spin_lock_irqsave(tmp);
#line 111
  mdev->read_cnt = mdev->read_cnt + (peer_req->i.size >> 9);
#line 112
  list_del(& peer_req->w.list);
#line 113
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 113
  if (tmp___0 != 0) {
#line 114
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 115
  tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& peer_req->flags));
#line 115
  if (tmp___1 != 0) {
#line 116
    __drbd_chk_io_error____0(mdev, DRBD_READ_ERROR, "drbd_endio_read_sec_final");
  } else {

  }
#line 117
  spin_unlock_irqrestore(& (mdev->tconn)->req_lock, flags);
#line 119
  drbd_queue_work(& (mdev->tconn)->sender_work, & peer_req->w);
#line 120
  put_ldev(mdev);
#line 121
  return;
}
}
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_peer_request *peer_req ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  struct drbd_interval i ;
  int do_wake ;
  u64 block_id ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;

  {
#line 127
  flags = 0UL;
#line 128
  mdev = peer_req->w.ldv_50388.mdev;
#line 138
  i = peer_req->i;
#line 139
  do_al_complete_io = (int )peer_req->flags & 1;
#line 140
  block_id = peer_req->ldv_50490.block_id;
#line 142
  tmp = spinlock_check(& (mdev->tconn)->req_lock);
#line 142
  flags = _raw_spin_lock_irqsave(tmp);
#line 143
  mdev->writ_cnt = mdev->writ_cnt + (peer_req->i.size >> 9);
#line 144
  list_move_tail(& peer_req->w.list, & mdev->done_ee);
#line 154
  do_wake = list_empty((struct list_head  const  *)(block_id == 0xffffffffffffffffULL ? & mdev->sync_ee : & mdev->active_ee));
#line 156
  tmp___0 = constant_test_bit(3U, (unsigned long const volatile   *)(& peer_req->flags));
#line 156
  if (tmp___0 != 0) {
#line 157
    __drbd_chk_io_error____0(mdev, DRBD_WRITE_ERROR, "drbd_endio_write_sec_final");
  } else {

  }
#line 158
  spin_unlock_irqrestore(& (mdev->tconn)->req_lock, flags);
#line 160
  if (block_id == 0xffffffffffffffffULL) {
#line 161
    drbd_rs_complete_io(mdev, i.sector);
  } else {

  }
#line 163
  if (do_wake != 0) {
#line 164
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 166
  if (do_al_complete_io != 0) {
#line 167
    drbd_al_complete_io(mdev, & i);
  } else {

  }
#line 169
  wake_asender(mdev->tconn);
#line 170
  put_ldev(mdev);
#line 171
  return;
}
}
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_peer_request_endio(struct bio *bio , int error ) 
{ 
  struct drbd_peer_request *peer_req ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 178
  peer_req = (struct drbd_peer_request *)bio->bi_private;
#line 179
  mdev = peer_req->w.ldv_50388.mdev;
#line 180
  uptodate = (int )bio->bi_flags & 1;
#line 181
  is_write = (int )bio->bi_rw & 1;
#line 183
  if (error != 0) {
#line 183
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_peer_request_endio");
#line 183
    if (tmp != 0) {
#line 184
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )peer_req->i.sector);
    } else {

    }
  } else {

  }
#line 187
  if (error == 0 && uptodate == 0) {
#line 188
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_peer_request_endio");
#line 188
    if (tmp___0 != 0) {
#line 189
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )peer_req->i.sector);
    } else {

    }
#line 195
    error = -5;
  } else {

  }
#line 198
  if (error != 0) {
#line 199
    set_bit(3U, (unsigned long volatile   *)(& peer_req->flags));
  } else {

  }
#line 201
  bio_put(bio);
#line 202
  tmp___1 = atomic_dec_and_test(& peer_req->pending_bios);
#line 202
  if (tmp___1 != 0) {
#line 203
    if (is_write != 0) {
#line 204
      drbd_endio_write_sec_final(peer_req);
    } else {
#line 206
      drbd_endio_read_sec_final(peer_req);
    }
  } else {

  }
#line 207
  return;
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_request_endio(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  void *tmp___2 ;
  raw_spinlock_t *tmp___3 ;

  {
#line 215
  req = (struct drbd_request *)bio->bi_private;
#line 216
  mdev = req->w.ldv_50388.mdev;
#line 219
  uptodate = (int )bio->bi_flags & 1;
#line 221
  if (error == 0 && uptodate == 0) {
#line 222
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 227
    error = -5;
  } else {

  }
#line 259
  tmp___0 = __builtin_expect(((unsigned long )req->rq_state & 8UL) != 0UL, 0L);
#line 259
  if (tmp___0 != 0L) {
#line 260
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_request_endio");
#line 260
    if (tmp != 0) {
#line 261
      dev_emerg((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "delayed completion of aborted local request; disk-timeout may be too aggressive\n");
    } else {

    }
#line 263
    if (error == 0) {
#line 264
      panic("possible random memory corruption caused by delayed completion of aborted local request\n");
    } else {

    }
  } else {

  }
#line 268
  tmp___1 = __builtin_expect(error != 0, 0L);
#line 268
  if (tmp___1 != 0L) {
#line 269
    what = (int )bio->bi_rw & 1 ? WRITE_COMPLETED_WITH_ERROR : ((bio->bi_rw & 8193UL) == 0UL ? READ_COMPLETED_WITH_ERROR : READ_AHEAD_COMPLETED_WITH_ERROR);
  } else {
#line 275
    what = COMPLETED_OK;
  }
#line 277
  bio_put(req->private_bio);
#line 278
  tmp___2 = ERR_PTR((long )error);
#line 278
  req->private_bio = (struct bio *)tmp___2;
#line 281
  tmp___3 = spinlock_check(& (mdev->tconn)->req_lock);
#line 281
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 282
  __req_mod(req, what, & m);
#line 283
  spin_unlock_irqrestore(& (mdev->tconn)->req_lock, flags);
#line 284
  put_ldev(mdev);
#line 286
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 287
    complete_master_bio(mdev, & m);
  } else {

  }
#line 288
  return;
}
}
#line 290 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_peer_request *peer_req ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 295
  page = peer_req->pages;
#line 299
  desc.tfm = tfm;
#line 300
  desc.flags = 0U;
#line 302
  sg_init_table(& sg, 1U);
#line 303
  crypto_hash_init(& desc);
#line 305
  goto ldv_51886;
  ldv_51885: 
#line 307
  sg_set_page(& sg, page, 4096U, 0U);
#line 308
  crypto_hash_update(& desc, & sg, sg.length);
#line 309
  page = tmp;
  ldv_51886: 
#line 305
  tmp = page_chain_next(page);
#line 305
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 306
    goto ldv_51885;
  } else {

  }
#line 312
  len = peer_req->i.size & 4095U;
#line 313
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 314
  crypto_hash_update(& desc, & sg, sg.length);
#line 315
  crypto_hash_final(& desc, (u8 *)digest);
#line 316
  return;
}
}
#line 318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 325
  desc.tfm = tfm;
#line 326
  desc.flags = 0U;
#line 328
  sg_init_table(& sg, 1U);
#line 329
  crypto_hash_init(& desc);
#line 331
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 331
  i = (int )bio->bi_idx;
#line 331
  goto ldv_51899;
  ldv_51898: 
#line 332
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 333
  crypto_hash_update(& desc, & sg, sg.length);
#line 331
  bvec = bvec + 1;
#line 331
  i = i + 1;
  ldv_51899: ;
#line 331
  if ((int )bio->bi_vcnt > i) {
#line 332
    goto ldv_51898;
  } else {

  }
#line 335
  crypto_hash_final(& desc, (u8 *)digest);
#line 336
  return;
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_e_send_csum(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_peer_request *peer_req ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;
  int digest_size ;
  void *digest ;
  int err ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  sector_t sector ;
  unsigned int size ;
  long tmp___2 ;

  {
#line 341
  __mptr = (struct drbd_work  const  *)w;
#line 341
  peer_req = (struct drbd_peer_request *)__mptr;
#line 342
  mdev = w->ldv_50388.mdev;
#line 345
  err = 0;
#line 347
  tmp = __builtin_expect(cancel != 0, 0L);
#line 347
  if (tmp != 0L) {
#line 348
    goto out;
  } else {

  }
#line 350
  tmp___0 = __builtin_expect((peer_req->flags & 8UL) != 0UL, 0L);
#line 350
  if (tmp___0 != 0L) {
#line 351
    goto out;
  } else {

  }
#line 353
  tmp___1 = crypto_hash_digestsize((mdev->tconn)->csums_tfm);
#line 353
  digest_size = (int )tmp___1;
#line 354
  digest = kmalloc((size_t )digest_size, 16U);
#line 355
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 356
    sector = peer_req->i.sector;
#line 357
    size = peer_req->i.size;
#line 358
    drbd_csum_ee(mdev, (mdev->tconn)->csums_tfm, peer_req, digest);
#line 364
    __drbd_free_peer_req(mdev, peer_req, 0);
#line 365
    peer_req = 0;
#line 366
    inc_rs_pending(mdev);
#line 367
    err = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_CSUM_RS_REQUEST);
#line 370
    kfree((void const   *)digest);
  } else {
#line 372
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 373
    err = -12;
  }
  out: ;
#line 377
  if ((unsigned long )peer_req != (unsigned long )((struct drbd_peer_request *)0)) {
#line 378
    __drbd_free_peer_req(mdev, peer_req, 0);
  } else {

  }
#line 380
  tmp___2 = __builtin_expect(err != 0, 0L);
#line 380
  if (tmp___2 != 0L) {
#line 381
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 382
  return (err);
}
}
#line 387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_peer_request *peer_req ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 391
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 391
  if (tmp == 0) {
#line 392
    return (-5);
  } else {

  }
#line 394
  tmp___0 = drbd_rs_should_slow_down(mdev, sector);
#line 394
  if (tmp___0 != 0) {
#line 395
    goto defer;
  } else {

  }
#line 399
  peer_req = drbd_alloc_peer_req(mdev, 0xffffffffffffffffULL, sector, (unsigned int )size,
                                 514U);
#line 401
  if ((unsigned long )peer_req == (unsigned long )((struct drbd_peer_request *)0)) {
#line 402
    goto defer;
  } else {

  }
#line 404
  peer_req->w.cb = & w_e_send_csum;
#line 405
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 406
  list_add(& peer_req->w.list, & mdev->read_ee);
#line 407
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 409
  atomic_add(size >> 9, & mdev->rs_sect_ev);
#line 410
  tmp___1 = drbd_submit_peer_request(mdev, peer_req, 0U, 3);
#line 410
  if (tmp___1 == 0) {
#line 411
    return (0);
  } else {

  }
#line 417
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 418
  list_del(& peer_req->w.list);
#line 419
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 421
  __drbd_free_peer_req(mdev, peer_req, 0);
  defer: 
#line 423
  put_ldev(mdev);
#line 424
  return (-11);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_timer(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 429
  mdev = w->ldv_50388.mdev;
#line 430
  switch ((int )mdev->state.ldv_50103.conn) {
  case 18: 
#line 432
  w_make_ov_request(w, cancel);
#line 433
  goto ldv_51928;
  case 17: 
#line 435
  w_make_resync_request(w, cancel);
#line 436
  goto ldv_51928;
  }
  ldv_51928: ;
#line 439
  return (0);
}
}
#line 442 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 444
  mdev = (struct drbd_conf *)data;
#line 446
  tmp = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 446
  if (tmp != 0) {
#line 447
    drbd_queue_work(& (mdev->tconn)->sender_work, & mdev->resync_work);
  } else {

  }
#line 448
  return;
}
}
#line 450 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_set(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 454
  i = 0;
#line 454
  goto ldv_51940;
  ldv_51939: 
#line 455
  fb->values[i] = value;
#line 454
  i = i + 1;
  ldv_51940: ;
#line 454
  if ((unsigned int )i < fb->size) {
#line 455
    goto ldv_51939;
  } else {

  }

#line 459
  return;
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int fifo_push(struct fifo_buffer *fb , int value ) 
{ 
  int ov ;
  unsigned int tmp ;

  {
#line 462
  ov = fb->values[fb->head_index];
#line 463
  tmp = fb->head_index;
#line 463
  fb->head_index = fb->head_index + 1U;
#line 463
  fb->values[tmp] = value;
#line 465
  if (fb->head_index >= fb->size) {
#line 466
    fb->head_index = 0U;
  } else {

  }
#line 468
  return (ov);
}
}
#line 471 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_add_val(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 475
  i = 0;
#line 475
  goto ldv_51953;
  ldv_51952: 
#line 476
  fb->values[i] = fb->values[i] + value;
#line 475
  i = i + 1;
  ldv_51953: ;
#line 475
  if ((unsigned int )i < fb->size) {
#line 476
    goto ldv_51952;
  } else {

  }

#line 480
  return;
}
}
#line 479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
struct fifo_buffer *fifo_alloc(int fifo_size ) 
{ 
  struct fifo_buffer *fb ;
  void *tmp ;

  {
#line 483
  tmp = kzalloc(((unsigned long )fifo_size + 3UL) * 4UL, 16U);
#line 483
  fb = (struct fifo_buffer *)tmp;
#line 484
  if ((unsigned long )fb == (unsigned long )((struct fifo_buffer *)0)) {
#line 485
    return (0);
  } else {

  }
#line 487
  fb->head_index = 0U;
#line 488
  fb->size = (unsigned int )fifo_size;
#line 489
  fb->total = 0;
#line 491
  return (fb);
}
}
#line 494 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_controller(struct drbd_conf *mdev ) 
{ 
  struct disk_conf *dc ;
  unsigned int sect_in ;
  unsigned int want ;
  int req_sect ;
  int correction ;
  int cps ;
  int steps ;
  int curr_corr ;
  int max_sect ;
  struct fifo_buffer *plan ;
  int tmp ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;
  struct fifo_buffer *_________p1___0 ;
  bool __warned___0 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 507
  tmp = atomic_xchg(& mdev->rs_sect_in, 0);
#line 507
  sect_in = (unsigned int )tmp;
#line 508
  mdev->rs_in_flight = (int )((unsigned int )mdev->rs_in_flight - sect_in);
#line 510
  _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 510
  tmp___0 = debug_lockdep_rcu_enabled();
#line 510
  if (tmp___0 != 0 && ! __warned) {
#line 510
    tmp___1 = rcu_read_lock_held();
#line 510
    if (tmp___1 == 0 && 1) {
#line 510
      __warned = 1;
#line 510
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                             510, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 510
  dc = _________p1;
#line 511
  _________p1___0 = *((struct fifo_buffer * volatile  *)(& mdev->rs_plan_s));
#line 511
  tmp___2 = debug_lockdep_rcu_enabled();
#line 511
  if (tmp___2 != 0 && ! __warned___0) {
#line 511
    tmp___3 = rcu_read_lock_held();
#line 511
    if (tmp___3 == 0 && 1) {
#line 511
      __warned___0 = 1;
#line 511
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                             511, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 511
  plan = _________p1___0;
#line 513
  steps = (int )plan->size;
#line 515
  if ((unsigned int )mdev->rs_in_flight + sect_in == 0U) {
#line 516
    want = ((dc->resync_rate * 50U) / 250U) * (__u32 )steps;
  } else {
#line 518
    want = dc->c_fill_target != 0U ? dc->c_fill_target : ((dc->c_delay_target * sect_in) * 250U) / 250U;
  }
#line 522
  correction = (int )((want - (unsigned int )mdev->rs_in_flight) - (unsigned int )plan->total);
#line 525
  cps = correction / steps;
#line 526
  fifo_add_val(plan, cps);
#line 527
  plan->total = plan->total + cps * steps;
#line 530
  curr_corr = fifo_push(plan, 0);
#line 531
  plan->total = plan->total - curr_corr;
#line 533
  req_sect = (int )(sect_in + (unsigned int )curr_corr);
#line 534
  if (req_sect < 0) {
#line 535
    req_sect = 0;
  } else {

  }
#line 537
  max_sect = (int )((dc->c_max_rate * 50U) / 250U);
#line 538
  if (req_sect > max_sect) {
#line 539
    req_sect = max_sect;
  } else {

  }
#line 547
  return (req_sect);
}
}
#line 550 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_number_requests(struct drbd_conf *mdev ) 
{ 
  int number ;
  int tmp ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;
  struct fifo_buffer *_________p1___0 ;
  bool __warned___0 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 554
  rcu_read_lock();
#line 555
  _________p1___0 = *((struct fifo_buffer * volatile  *)(& mdev->rs_plan_s));
#line 555
  tmp___2 = debug_lockdep_rcu_enabled();
#line 555
  if (tmp___2 != 0 && ! __warned___0) {
#line 555
    tmp___3 = rcu_read_lock_held();
#line 555
    if (tmp___3 == 0 && 1) {
#line 555
      __warned___0 = 1;
#line 555
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                             555, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 555
  if (_________p1___0->size != 0U) {
#line 556
    tmp = drbd_rs_controller(mdev);
#line 556
    number = tmp >> 3;
#line 557
    mdev->c_sync_rate = (number * 1000) / 25;
  } else {
#line 559
    _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 559
    tmp___0 = debug_lockdep_rcu_enabled();
#line 559
    if (tmp___0 != 0 && ! __warned) {
#line 559
      tmp___1 = rcu_read_lock_held();
#line 559
      if (tmp___1 == 0 && 1) {
#line 559
        __warned = 1;
#line 559
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                               559, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 559
    mdev->c_sync_rate = (int )_________p1->resync_rate;
#line 560
    number = (mdev->c_sync_rate * 25) / 1000;
  }
#line 562
  rcu_read_unlock();
#line 566
  return (number);
}
}
#line 569 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_make_resync_request(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_bio_size ;
  int number ;
  int rollback_i ;
  int size ;
  int align ;
  int queued ;
  int sndbuf ;
  int i ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int err ;
  unsigned long tmp___9 ;

  {
#line 571
  mdev = w->ldv_50388.mdev;
#line 574
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 574
  capacity = tmp;
#line 578
  i = 0;
#line 580
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 580
  if (tmp___0 != 0L) {
#line 581
    return (0);
  } else {

  }
#line 583
  if (mdev->rs_total == 0UL) {
#line 585
    drbd_resync_finished(mdev);
#line 586
    return (0);
  } else {

  }
#line 589
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 589
  if (tmp___1 == 0) {
#line 594
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 595
    return (0);
  } else {

  }
#line 598
  tmp___2 = queue_max_hw_sectors(mdev->rq_queue);
#line 598
  max_bio_size = (int )(tmp___2 << 9);
#line 599
  number = drbd_rs_number_requests(mdev);
#line 600
  if (number == 0) {
#line 601
    goto requeue;
  } else {

  }
#line 603
  i = 0;
#line 603
  goto ldv_52017;
  ldv_52016: 
#line 605
  mutex_lock_nested(& (mdev->tconn)->data.mutex, 0U);
#line 606
  if ((unsigned long )(mdev->tconn)->data.socket != (unsigned long )((struct socket *)0)) {
#line 607
    queued = (((mdev->tconn)->data.socket)->sk)->sk_wmem_queued;
#line 608
    sndbuf = (((mdev->tconn)->data.socket)->sk)->sk_sndbuf;
  } else {
#line 610
    queued = 1;
#line 611
    sndbuf = 0;
  }
#line 613
  mutex_unlock(& (mdev->tconn)->data.mutex);
#line 614
  if (sndbuf / 2 < queued) {
#line 615
    goto requeue;
  } else {

  }
  next_sector: 
#line 618
  size = 4096;
#line 619
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 621
  if (bit == 0xffffffffffffffffUL) {
#line 622
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 623
    put_ldev(mdev);
#line 624
    return (0);
  } else {

  }
#line 627
  sector = bit << 3;
#line 629
  tmp___3 = drbd_rs_should_slow_down(mdev, sector);
#line 629
  if (tmp___3 != 0) {
#line 631
    mdev->bm_resync_fo = bit;
#line 632
    goto requeue;
  } else {
#line 629
    tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 629
    if (tmp___4 != 0) {
#line 631
      mdev->bm_resync_fo = bit;
#line 632
      goto requeue;
    } else {

    }
  }
#line 634
  mdev->bm_resync_fo = bit + 1UL;
#line 636
  tmp___5 = drbd_bm_test_bit(mdev, bit);
#line 636
  tmp___6 = __builtin_expect(tmp___5 == 0, 0L);
#line 636
  if (tmp___6 != 0L) {
#line 637
    drbd_rs_complete_io(mdev, sector);
#line 638
    goto next_sector;
  } else {

  }
#line 648
  align = 1;
#line 649
  rollback_i = i;
  ldv_52007: ;
#line 651
  if (size + 4096 > max_bio_size) {
#line 652
    goto ldv_52006;
  } else {

  }
#line 655
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 656
    goto ldv_52006;
  } else {

  }
#line 659
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 660
    goto ldv_52006;
  } else {

  }
#line 666
  tmp___7 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 666
  if (tmp___7 != 1) {
#line 667
    goto ldv_52006;
  } else {

  }
#line 668
  bit = bit + 1UL;
#line 669
  size = size + 4096;
#line 670
  if (4096 << align <= size) {
#line 671
    align = align + 1;
  } else {

  }
#line 672
  i = i + 1;
#line 673
  goto ldv_52007;
  ldv_52006: ;
#line 676
  if (size > 4096) {
#line 677
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 681
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 682
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 683
  if ((mdev->tconn)->agreed_pro_version > 88 && (unsigned long )(mdev->tconn)->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 684
    tmp___8 = read_for_csum(mdev, sector, size);
#line 684
    switch (tmp___8) {
    case -5: 
#line 686
    put_ldev(mdev);
#line 687
    return (-5);
    case -11: 
#line 689
    drbd_rs_complete_io(mdev, sector);
#line 690
    mdev->bm_resync_fo = sector >> 3;
#line 691
    i = rollback_i;
#line 692
    goto requeue;
    case 0: ;
#line 695
    goto ldv_52011;
    default: 
#line 697
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"),
                         "i" (697), "i" (12UL));
    ldv_52013: ;
#line 697
    goto ldv_52013;
    }
    ldv_52011: ;
  } else {
#line 702
    inc_rs_pending(mdev);
#line 703
    err = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 705
    if (err != 0) {
#line 706
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 707
      _dec_rs_pending(mdev, "w_make_resync_request", 707);
#line 708
      put_ldev(mdev);
#line 709
      return (err);
    } else {

    }
  }
#line 603
  i = i + 1;
  ldv_52017: ;
#line 603
  if (i < number) {
#line 604
    goto ldv_52016;
  } else {

  }
#line 714
  tmp___9 = drbd_bm_bits(mdev);
#line 714
  if (mdev->bm_resync_fo >= tmp___9) {
#line 721
    put_ldev(mdev);
#line 722
    return (0);
  } else {

  }
  requeue: 
#line 726
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 727
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 728
  put_ldev(mdev);
#line 729
  return (0);
}
}
#line 732 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_conf *mdev ;
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  bool stop_sector_reached ;
  long tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 734
  mdev = w->ldv_50388.mdev;
#line 737
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 737
  capacity = tmp;
#line 738
  stop_sector_reached = 0;
#line 740
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 740
  if (tmp___0 != 0L) {
#line 741
    return (1);
  } else {

  }
#line 743
  number = drbd_rs_number_requests(mdev);
#line 745
  sector = mdev->ov_position;
#line 746
  i = 0;
#line 746
  goto ldv_52034;
  ldv_52033: ;
#line 747
  if (sector >= capacity) {
#line 748
    return (1);
  } else {

  }
#line 753
  if (i > 0) {
#line 753
    tmp___1 = verify_can_do_stop_sector(mdev);
#line 753
    if ((int )tmp___1) {
#line 753
      if (mdev->ov_stop_sector <= sector) {
#line 753
        tmp___2 = 1;
      } else {
#line 753
        tmp___2 = 0;
      }
    } else {
#line 753
      tmp___2 = 0;
    }
  } else {
#line 753
    tmp___2 = 0;
  }
#line 753
  stop_sector_reached = (bool )tmp___2;
#line 756
  if ((int )stop_sector_reached) {
#line 757
    goto ldv_52030;
  } else {

  }
#line 759
  size = 4096;
#line 761
  tmp___3 = drbd_rs_should_slow_down(mdev, sector);
#line 761
  if (tmp___3 != 0) {
#line 763
    mdev->ov_position = sector;
#line 764
    goto requeue;
  } else {
#line 761
    tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 761
    if (tmp___4 != 0) {
#line 763
      mdev->ov_position = sector;
#line 764
      goto requeue;
    } else {

    }
  }
#line 767
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 768
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 770
  inc_rs_pending(mdev);
#line 771
  tmp___5 = drbd_send_ov_request(mdev, sector, size);
#line 771
  if (tmp___5 != 0) {
#line 772
    _dec_rs_pending(mdev, "w_make_ov_request", 772);
#line 773
    return (0);
  } else {

  }
#line 775
  sector = sector + 8UL;
#line 746
  i = i + 1;
  ldv_52034: ;
#line 746
  if (i < number) {
#line 747
    goto ldv_52033;
  } else {

  }
  ldv_52030: 
#line 777
  mdev->ov_position = sector;
  requeue: 
#line 780
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 781
  if (i == 0 || ! stop_sector_reached) {
#line 782
    mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
  } else {

  }
#line 783
  return (1);
}
}
#line 786 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 788
  mdev = w->ldv_50388.mdev;
#line 789
  kfree((void const   *)w);
#line 790
  ov_out_of_sync_print(mdev);
#line 791
  drbd_resync_finished(mdev);
#line 793
  return (0);
}
}
#line 796 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 798
  mdev = w->ldv_50388.mdev;
#line 799
  kfree((void const   *)w);
#line 801
  drbd_resync_finished(mdev);
#line 803
  return (0);
}
}
#line 806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  struct drbd_tconn *tconn ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 808
  tconn = mdev->tconn;
#line 810
  clear_bit(4, (unsigned long volatile   *)(& tconn->flags));
#line 811
  request_ping(tconn);
#line 812
  tmp = constant_test_bit(4U, (unsigned long const volatile   *)(& tconn->flags));
#line 812
  if (tmp != 0 || (int )mdev->state.ldv_50103.conn <= 9) {
#line 812
    goto ldv_52049;
  } else {

  }
#line 812
  tmp___0 = get_current();
#line 812
  __wait.flags = 0U;
#line 812
  __wait.private = (void *)tmp___0;
#line 812
  __wait.func = & autoremove_wake_function;
#line 812
  __wait.task_list.next = & __wait.task_list;
#line 812
  __wait.task_list.prev = & __wait.task_list;
  ldv_52052: 
#line 812
  prepare_to_wait(& tconn->ping_wait, & __wait, 2);
#line 812
  tmp___1 = constant_test_bit(4U, (unsigned long const volatile   *)(& tconn->flags));
#line 812
  if (tmp___1 != 0 || (int )mdev->state.ldv_50103.conn <= 9) {
#line 812
    goto ldv_52051;
  } else {

  }
#line 812
  schedule();
#line 812
  goto ldv_52052;
  ldv_52051: 
#line 812
  finish_wait(& tconn->ping_wait, & __wait);
  ldv_52049: ;
#line 815
  return;
}
}
#line 816 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  int verify_done ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;

  {
#line 822
  khelper_cmd = 0;
#line 823
  verify_done = 0;
#line 828
  tmp___0 = drbd_rs_del_all(mdev);
#line 828
  if (tmp___0 != 0) {
#line 834
    schedule_timeout_interruptible(25L);
#line 835
    tmp = kmalloc(32UL, 32U);
#line 835
    w = (struct drbd_work *)tmp;
#line 836
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 837
      w->cb = & w_resync_finished;
#line 838
      w->ldv_50388.mdev = mdev;
#line 839
      drbd_queue_work(& (mdev->tconn)->sender_work, w);
#line 840
      return (1);
    } else {

    }
#line 842
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 845
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 846
  if (dt == 0UL) {
#line 847
    dt = 1UL;
  } else {

  }
#line 849
  db = mdev->rs_total;
#line 851
  if ((unsigned int )*((unsigned short *)mdev + 374UL) == 288U || (unsigned int )*((unsigned short *)mdev + 374UL) == 304U) {
#line 852
    db = db - mdev->ov_left;
  } else {

  }
#line 854
  dbdt = db / dt << 2;
#line 855
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 857
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 857
  if (tmp___1 == 0) {
#line 858
    goto out;
  } else {

  }
#line 860
  ping_peer(mdev);
#line 862
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 863
  os = drbd_read_state(mdev);
#line 865
  verify_done = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U;
#line 869
  if ((int )os.ldv_40604.conn <= 10) {
#line 870
    goto out_unlock;
  } else {

  }
#line 872
  ns = os;
#line 873
  ns.ldv_40604.conn = 10U;
#line 875
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            verify_done != 0 ? (char *)"Online verify" : (char *)"Resync", mdev->rs_paused + dt,
            mdev->rs_paused, dbdt);
#line 879
  n_oos = drbd_bm_total_weight(mdev);
#line 881
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 882
    if (n_oos != 0UL) {
#line 883
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 885
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 888
      if (mdev->rs_failed != n_oos) {
#line 888
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                888);
      } else {

      }
#line 890
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 891
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 893
      if ((unsigned long )(mdev->tconn)->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 894
        s = mdev->rs_same_csum;
#line 895
        t = mdev->rs_total;
#line 896
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 899
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal checksums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 908
  if (mdev->rs_failed != 0UL) {
#line 909
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 911
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 912
      ns.ldv_40604.disk = 4U;
#line 913
      ns.ldv_40604.pdsk = 8U;
    } else {
#line 915
      ns.ldv_40604.disk = 8U;
#line 916
      ns.ldv_40604.pdsk = 4U;
    }
  } else {
#line 919
    ns.ldv_40604.disk = 8U;
#line 920
    ns.ldv_40604.pdsk = 8U;
#line 922
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 923
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 925
        i = 1;
#line 925
        goto ldv_52072;
        ldv_52071: 
#line 926
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 925
        i = i + 1;
        ldv_52072: ;
#line 925
        if (i <= 3) {
#line 926
          goto ldv_52071;
        } else {

        }
#line 927
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 928
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 930
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 934
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 288U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 304U) {
#line 937
      drbd_uuid_set_bm(mdev, 0ULL);
#line 938
      drbd_print_uuids(mdev, "updated UUIDs");
#line 939
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 943
        i___0 = 0;
#line 943
        goto ldv_52076;
        ldv_52075: 
#line 944
        *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 943
        i___0 = i___0 + 1;
        ldv_52076: ;
#line 943
        if (i___0 <= 3) {
#line 944
          goto ldv_52075;
        } else {

        }

      } else {

      }
    } else {

    }
  }
#line 949
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 951
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 952
  put_ldev(mdev);
  out: 
#line 954
  mdev->rs_total = 0UL;
#line 955
  mdev->rs_failed = 0UL;
#line 956
  mdev->rs_paused = 0UL;
#line 959
  if (verify_done != 0 && mdev->ov_left == 0UL) {
#line 960
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 962
  drbd_md_sync(mdev);
#line 964
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 965
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 967
  return (1);
}
}
#line 971 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_peer_request *peer_req ) 
{ 
  int i ;
  int tmp ;

  {
#line 973
  tmp = drbd_peer_req_has_active_page(peer_req);
#line 973
  if (tmp != 0) {
#line 975
    i = (int )(((unsigned long )peer_req->i.size + 4095UL) >> 12);
#line 976
    atomic_add(i, & mdev->pp_in_use_by_net);
#line 977
    atomic_sub(i, & mdev->pp_in_use);
#line 978
    spin_lock_irq(& (mdev->tconn)->req_lock);
#line 979
    list_add_tail(& peer_req->w.list, & mdev->net_ee);
#line 980
    spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 981
    __wake_up(& drbd_pp_wait, 3U, 1, 0);
  } else {
#line 983
    __drbd_free_peer_req(mdev, peer_req, 0);
  }
#line 984
  return;
}
}
#line 992 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_peer_request *peer_req ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;
  int err ;
  long tmp ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 994
  __mptr = (struct drbd_work  const  *)w;
#line 994
  peer_req = (struct drbd_peer_request *)__mptr;
#line 995
  mdev = w->ldv_50388.mdev;
#line 998
  tmp = __builtin_expect(cancel != 0, 0L);
#line 998
  if (tmp != 0L) {
#line 999
    __drbd_free_peer_req(mdev, peer_req, 0);
#line 1000
    _dec_unacked(mdev, "w_e_end_data_req", 1000);
#line 1001
    return (0);
  } else {

  }
#line 1004
  tmp___1 = __builtin_expect((peer_req->flags & 8UL) == 0UL, 1L);
#line 1004
  if (tmp___1 != 0L) {
#line 1005
    err = drbd_send_block(mdev, P_DATA_REPLY, peer_req);
  } else {
#line 1007
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 1007
    if (tmp___0 != 0) {
#line 1008
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )peer_req->i.sector);
    } else {

    }
#line 1011
    err = drbd_send_ack(mdev, P_NEG_DREPLY, peer_req);
  }
#line 1014
  _dec_unacked(mdev, "w_e_end_data_req", 1014);
#line 1016
  move_to_net_ee_or_free(mdev, peer_req);
#line 1018
  tmp___2 = __builtin_expect(err != 0, 0L);
#line 1018
  if (tmp___2 != 0L) {
#line 1019
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1020
  return (err);
}
}
#line 1029 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_peer_request *peer_req ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;
  int err ;
  long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;

  {
#line 1031
  __mptr = (struct drbd_work  const  *)w;
#line 1031
  peer_req = (struct drbd_peer_request *)__mptr;
#line 1032
  mdev = w->ldv_50388.mdev;
#line 1035
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1035
  if (tmp != 0L) {
#line 1036
    __drbd_free_peer_req(mdev, peer_req, 0);
#line 1037
    _dec_unacked(mdev, "w_e_end_rsdata_req", 1037);
#line 1038
    return (0);
  } else {

  }
#line 1041
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 1041
  if (tmp___0 != 0) {
#line 1042
    drbd_rs_complete_io(mdev, peer_req->i.sector);
#line 1043
    put_ldev(mdev);
  } else {

  }
#line 1046
  if ((unsigned int )*((unsigned short *)mdev + 374UL) == 352U) {
#line 1047
    err = drbd_send_ack(mdev, P_RS_CANCEL, peer_req);
  } else {
#line 1048
    tmp___4 = __builtin_expect((peer_req->flags & 8UL) == 0UL, 1L);
#line 1048
    if (tmp___4 != 0L) {
#line 1049
      tmp___2 = __builtin_expect((int )mdev->state.ldv_50103.pdsk > 3, 1L);
#line 1049
      if (tmp___2 != 0L) {
#line 1050
        inc_rs_pending(mdev);
#line 1051
        err = drbd_send_block(mdev, P_RS_DATA_REPLY, peer_req);
      } else {
#line 1053
        tmp___1 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1053
        if (tmp___1 != 0) {
#line 1054
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
        } else {

        }
#line 1056
        err = 0;
      }
    } else {
#line 1059
      tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1059
      if (tmp___3 != 0) {
#line 1060
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
                (unsigned long long )peer_req->i.sector);
      } else {

      }
#line 1063
      err = drbd_send_ack(mdev, P_NEG_RS_DREPLY, peer_req);
#line 1066
      drbd_rs_failed_io(mdev, peer_req->i.sector, (int )peer_req->i.size);
    }
  }
#line 1069
  _dec_unacked(mdev, "w_e_end_rsdata_req", 1069);
#line 1071
  move_to_net_ee_or_free(mdev, peer_req);
#line 1073
  tmp___5 = __builtin_expect(err != 0, 0L);
#line 1073
  if (tmp___5 != 0L) {
#line 1074
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1075
  return (err);
}
}
#line 1078 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_peer_request *peer_req ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int err ;
  int eq ;
  long tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;

  {
#line 1080
  __mptr = (struct drbd_work  const  *)w;
#line 1080
  peer_req = (struct drbd_peer_request *)__mptr;
#line 1081
  mdev = w->ldv_50388.mdev;
#line 1084
  digest = 0;
#line 1085
  eq = 0;
#line 1087
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1087
  if (tmp != 0L) {
#line 1088
    __drbd_free_peer_req(mdev, peer_req, 0);
#line 1089
    _dec_unacked(mdev, "w_e_end_csum_rs_req", 1089);
#line 1090
    return (0);
  } else {

  }
#line 1093
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1093
  if (tmp___0 != 0) {
#line 1094
    drbd_rs_complete_io(mdev, peer_req->i.sector);
#line 1095
    put_ldev(mdev);
  } else {

  }
#line 1098
  di = peer_req->ldv_50490.digest;
#line 1100
  tmp___4 = __builtin_expect((peer_req->flags & 8UL) == 0UL, 1L);
#line 1100
  if (tmp___4 != 0L) {
#line 1104
    if ((unsigned long )(mdev->tconn)->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1105
      tmp___1 = crypto_hash_digestsize((mdev->tconn)->csums_tfm);
#line 1105
      digest_size = (int )tmp___1;
#line 1106
      if (di->digest_size != digest_size) {
#line 1106
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                1106);
      } else {

      }
#line 1107
      digest = kmalloc((size_t )digest_size, 16U);
    } else {

    }
#line 1109
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1110
      drbd_csum_ee(mdev, (mdev->tconn)->csums_tfm, peer_req, digest);
#line 1111
      tmp___2 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1111
      eq = tmp___2 == 0;
#line 1112
      kfree((void const   *)digest);
    } else {

    }
#line 1115
    if (eq != 0) {
#line 1116
      __drbd_set_in_sync(mdev, peer_req->i.sector, (int )peer_req->i.size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1116U);
#line 1118
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(peer_req->i.size >> 12);
#line 1119
      err = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, peer_req);
    } else {
#line 1121
      inc_rs_pending(mdev);
#line 1122
      peer_req->ldv_50490.block_id = 0xffffffffffffffffULL;
#line 1123
      peer_req->flags = peer_req->flags & 0xffffffffffffffefUL;
#line 1124
      kfree((void const   *)di);
#line 1125
      err = drbd_send_block(mdev, P_RS_DATA_REPLY, peer_req);
    }
  } else {
#line 1128
    err = drbd_send_ack(mdev, P_NEG_RS_DREPLY, peer_req);
#line 1129
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1129
    if (tmp___3 != 0) {
#line 1130
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1133
  _dec_unacked(mdev, "w_e_end_csum_rs_req", 1133);
#line 1134
  move_to_net_ee_or_free(mdev, peer_req);
#line 1136
  tmp___5 = __builtin_expect(err != 0, 0L);
#line 1136
  if (tmp___5 != 0L) {
#line 1137
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1138
  return (err);
}
}
#line 1141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_peer_request *peer_req ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  void *digest ;
  int err ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;

  {
#line 1143
  __mptr = (struct drbd_work  const  *)w;
#line 1143
  peer_req = (struct drbd_peer_request *)__mptr;
#line 1144
  mdev = w->ldv_50388.mdev;
#line 1145
  sector = peer_req->i.sector;
#line 1146
  size = peer_req->i.size;
#line 1149
  err = 0;
#line 1151
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1151
  if (tmp != 0L) {
#line 1152
    goto out;
  } else {

  }
#line 1154
  tmp___0 = crypto_hash_digestsize((mdev->tconn)->verify_tfm);
#line 1154
  digest_size = (int )tmp___0;
#line 1155
  digest = kmalloc((size_t )digest_size, 16U);
#line 1156
  if ((unsigned long )digest == (unsigned long )((void *)0)) {
#line 1157
    err = 1;
#line 1158
    goto out;
  } else {

  }
#line 1161
  tmp___1 = __builtin_expect((peer_req->flags & 8UL) == 0UL, 1L);
#line 1161
  if (tmp___1 != 0L) {
#line 1162
    drbd_csum_ee(mdev, (mdev->tconn)->verify_tfm, peer_req, digest);
  } else {
#line 1164
    memset(digest, 0, (size_t )digest_size);
  }
#line 1171
  __drbd_free_peer_req(mdev, peer_req, 0);
#line 1172
  peer_req = 0;
#line 1173
  inc_rs_pending(mdev);
#line 1174
  err = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_OV_REPLY);
#line 1175
  if (err != 0) {
#line 1176
    _dec_rs_pending(mdev, "w_e_end_ov_req", 1176);
  } else {

  }
#line 1177
  kfree((void const   *)digest);
  out: ;
#line 1180
  if ((unsigned long )peer_req != (unsigned long )((struct drbd_peer_request *)0)) {
#line 1181
    __drbd_free_peer_req(mdev, peer_req, 0);
  } else {

  }
#line 1182
  _dec_unacked(mdev, "w_e_end_ov_req", 1182);
#line 1183
  return (err);
}
}
#line 1186 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_out_of_sync_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1188
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1189
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1191
    mdev->ov_last_oos_start = sector;
#line 1192
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1194
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1194U);
#line 1195
  return;
}
}
#line 1197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_peer_request *peer_req ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;
  struct digest_info *di ;
  void *digest ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  int err ;
  int eq ;
  bool stop_sector_reached ;
  long tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  bool tmp___4 ;

  {
#line 1199
  __mptr = (struct drbd_work  const  *)w;
#line 1199
  peer_req = (struct drbd_peer_request *)__mptr;
#line 1200
  mdev = w->ldv_50388.mdev;
#line 1203
  sector = peer_req->i.sector;
#line 1204
  size = peer_req->i.size;
#line 1206
  eq = 0;
#line 1207
  stop_sector_reached = 0;
#line 1209
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1209
  if (tmp != 0L) {
#line 1210
    __drbd_free_peer_req(mdev, peer_req, 0);
#line 1211
    _dec_unacked(mdev, "w_e_end_ov_reply", 1211);
#line 1212
    return (0);
  } else {

  }
#line 1217
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1217
  if (tmp___0 != 0) {
#line 1218
    drbd_rs_complete_io(mdev, peer_req->i.sector);
#line 1219
    put_ldev(mdev);
  } else {

  }
#line 1222
  di = peer_req->ldv_50490.digest;
#line 1224
  tmp___3 = __builtin_expect((peer_req->flags & 8UL) == 0UL, 1L);
#line 1224
  if (tmp___3 != 0L) {
#line 1225
    tmp___1 = crypto_hash_digestsize((mdev->tconn)->verify_tfm);
#line 1225
    digest_size = (int )tmp___1;
#line 1226
    digest = kmalloc((size_t )digest_size, 16U);
#line 1227
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1228
      drbd_csum_ee(mdev, (mdev->tconn)->verify_tfm, peer_req, digest);
#line 1230
      if (di->digest_size != digest_size) {
#line 1230
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                1230);
      } else {

      }
#line 1231
      tmp___2 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1231
      eq = tmp___2 == 0;
#line 1232
      kfree((void const   *)digest);
    } else {

    }
  } else {

  }
#line 1241
  __drbd_free_peer_req(mdev, peer_req, 0);
#line 1242
  if (eq == 0) {
#line 1243
    drbd_ov_out_of_sync_found(mdev, sector, (int )size);
  } else {
#line 1245
    ov_out_of_sync_print(mdev);
  }
#line 1247
  err = drbd_send_ack_ex(mdev, P_OV_RESULT, sector, (int )size, eq != 0 ? 4711ULL : 4712ULL);
#line 1250
  _dec_unacked(mdev, "w_e_end_ov_reply", 1250);
#line 1252
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1255
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 1256
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 1258
  tmp___4 = verify_can_do_stop_sector(mdev);
#line 1258
  stop_sector_reached = (bool )((int )tmp___4 && (sector_t )(size >> 9) + sector >= mdev->ov_stop_sector);
#line 1261
  if (mdev->ov_left == 0UL || (int )stop_sector_reached) {
#line 1262
    ov_out_of_sync_print(mdev);
#line 1263
    drbd_resync_finished(mdev);
  } else {

  }
#line 1266
  return (err);
}
}
#line 1269 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1271
  __mptr = (struct drbd_work  const  *)w;
#line 1271
  b = (struct drbd_wq_barrier *)__mptr;
#line 1273
  complete(& b->done);
#line 1274
  return (0);
}
}
#line 1282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_send_barrier(struct drbd_tconn *tconn ) 
{ 
  struct p_barrier *p ;
  struct drbd_socket *sock ;
  void *tmp ;
  int tmp___0 ;

  {
#line 1287
  sock = & tconn->data;
#line 1288
  tmp = conn_prepare_command(tconn, sock);
#line 1288
  p = (struct p_barrier *)tmp;
#line 1289
  if ((unsigned long )p == (unsigned long )((struct p_barrier *)0)) {
#line 1290
    return (-5);
  } else {

  }
#line 1291
  p->barrier = (u32 )tconn->send.current_epoch_nr;
#line 1292
  p->pad = 0U;
#line 1293
  tconn->send.current_epoch_writes = 0U;
#line 1295
  tmp___0 = conn_send_command(tconn, sock, P_BARRIER, 8U, 0, 0U);
#line 1295
  return (tmp___0);
}
}
#line 1298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_socket *sock ;
  void *tmp ;
  int tmp___0 ;

  {
#line 1300
  mdev = w->ldv_50388.mdev;
#line 1303
  if (cancel != 0) {
#line 1304
    return (0);
  } else {

  }
#line 1305
  sock = & (mdev->tconn)->data;
#line 1306
  tmp = drbd_prepare_command(mdev, sock);
#line 1306
  if ((unsigned long )tmp == (unsigned long )((void *)0)) {
#line 1307
    return (-5);
  } else {

  }
#line 1308
  tmp___0 = drbd_send_command(mdev, sock, P_UNPLUG_REMOTE, 0U, 0, 0U);
#line 1308
  return (tmp___0);
}
}
#line 1311 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void re_init_if_first_write(struct drbd_tconn *tconn , unsigned int epoch ) 
{ 


  {
#line 1313
  if (! tconn->send.seen_any_write_yet) {
#line 1314
    tconn->send.seen_any_write_yet = 1;
#line 1315
    tconn->send.current_epoch_nr = (int )epoch;
#line 1316
    tconn->send.current_epoch_writes = 0U;
  } else {

  }
#line 1318
  return;
}
}
#line 1320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void maybe_send_barrier(struct drbd_tconn *tconn , unsigned int epoch ) 
{ 


  {
#line 1323
  if (! tconn->send.seen_any_write_yet) {
#line 1324
    return;
  } else {

  }
#line 1325
  if ((unsigned int )tconn->send.current_epoch_nr != epoch) {
#line 1326
    if (tconn->send.current_epoch_writes != 0U) {
#line 1327
      drbd_send_barrier(tconn);
    } else {

    }
#line 1328
    tconn->send.current_epoch_nr = (int )epoch;
  } else {

  }
#line 1330
  return;
}
}
#line 1332 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_out_of_sync(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;
  struct drbd_tconn *tconn ;
  int err ;
  long tmp ;

  {
#line 1334
  __mptr = (struct drbd_work  const  *)w;
#line 1334
  req = (struct drbd_request *)__mptr;
#line 1335
  mdev = w->ldv_50388.mdev;
#line 1336
  tconn = mdev->tconn;
#line 1339
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1339
  if (tmp != 0L) {
#line 1340
    req_mod(req, SEND_CANCELED);
#line 1341
    return (0);
  } else {

  }
#line 1348
  maybe_send_barrier(tconn, req->epoch);
#line 1350
  err = drbd_send_out_of_sync(mdev, req);
#line 1351
  req_mod(req, OOS_HANDED_TO_NETWORK);
#line 1353
  return (err);
}
}
#line 1362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;
  struct drbd_tconn *tconn ;
  int err ;
  long tmp ;

  {
#line 1364
  __mptr = (struct drbd_work  const  *)w;
#line 1364
  req = (struct drbd_request *)__mptr;
#line 1365
  mdev = w->ldv_50388.mdev;
#line 1366
  tconn = mdev->tconn;
#line 1369
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1369
  if (tmp != 0L) {
#line 1370
    req_mod(req, SEND_CANCELED);
#line 1371
    return (0);
  } else {

  }
#line 1374
  re_init_if_first_write(tconn, req->epoch);
#line 1375
  maybe_send_barrier(tconn, req->epoch);
#line 1376
  tconn->send.current_epoch_writes = tconn->send.current_epoch_writes + 1U;
#line 1378
  err = drbd_send_dblock(mdev, req);
#line 1379
  req_mod(req, err != 0 ? SEND_FAILED : HANDED_OVER_TO_NETWORK);
#line 1381
  return (err);
}
}
#line 1390 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;
  struct drbd_tconn *tconn ;
  int err ;
  long tmp ;

  {
#line 1392
  __mptr = (struct drbd_work  const  *)w;
#line 1392
  req = (struct drbd_request *)__mptr;
#line 1393
  mdev = w->ldv_50388.mdev;
#line 1394
  tconn = mdev->tconn;
#line 1397
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1397
  if (tmp != 0L) {
#line 1398
    req_mod(req, SEND_CANCELED);
#line 1399
    return (0);
  } else {

  }
#line 1404
  maybe_send_barrier(tconn, req->epoch);
#line 1406
  err = drbd_send_drequest(mdev, 8, req->i.sector, (int )req->i.size, (u64 )req);
#line 1409
  req_mod(req, err != 0 ? SEND_FAILED : HANDED_OVER_TO_NETWORK);
#line 1411
  return (err);
}
}
#line 1414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_restart_disk_io(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;

  {
#line 1416
  __mptr = (struct drbd_work  const  *)w;
#line 1416
  req = (struct drbd_request *)__mptr;
#line 1417
  mdev = w->ldv_50388.mdev;
#line 1419
  if ((int )(req->master_bio)->bi_rw & 1 && ((unsigned long )req->rq_state & 4096UL) != 0UL) {
#line 1420
    drbd_al_begin_io(mdev, & req->i);
  } else {

  }
#line 1422
  drbd_req_make_private_bio(req, req->master_bio);
#line 1423
  (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1424
  generic_make_request(req->private_bio);
#line 1426
  return (0);
}
}
#line 1429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int resync_after ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool _bool ;
  int tmp___1 ;

  {
#line 1431
  odev = mdev;
  ldv_52229: ;
#line 1435
  if ((unsigned long )odev->ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1436
    return (1);
  } else {

  }
#line 1437
  rcu_read_lock();
#line 1438
  _________p1 = *((struct disk_conf * volatile  *)(& (odev->ldev)->disk_conf));
#line 1438
  tmp = debug_lockdep_rcu_enabled();
#line 1438
  if (tmp != 0 && ! __warned) {
#line 1438
    tmp___0 = rcu_read_lock_held();
#line 1438
    if (tmp___0 == 0 && 1) {
#line 1438
      __warned = 1;
#line 1438
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                             1438, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1438
  resync_after = _________p1->resync_after;
#line 1439
  rcu_read_unlock();
#line 1440
  if (resync_after == -1) {
#line 1441
    return (1);
  } else {

  }
#line 1442
  odev = minor_to_mdev((unsigned int )resync_after);
#line 1443
  _bool = (unsigned long )odev != (unsigned long )((struct drbd_conf *)0);
#line 1443
  if (! _bool) {
#line 1443
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"odev", "_drbd_may_sync_now");
  } else {

  }
#line 1443
  if (_bool) {
#line 1443
    tmp___1 = 0;
  } else {
#line 1443
    tmp___1 = 1;
  }
#line 1443
  if (tmp___1) {
#line 1444
    return (1);
  } else {

  }
#line 1445
  if (((((int )odev->state.ldv_50103.conn > 15 && (int )odev->state.ldv_50103.conn <= 21) || (unsigned int )*((unsigned char *)odev + 750UL) != 0U) || (unsigned int )*((unsigned char *)odev + 750UL) != 0U) || (unsigned int )*((unsigned char *)odev + 750UL) != 0U) {
#line 1449
    return (0);
  } else {

  }
#line 1450
  goto ldv_52229;
}
}
#line 1459 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  void *tmp ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;

  {
#line 1462
  rv = 0;
#line 1464
  rcu_read_lock();
#line 1465
  i = 0;
#line 1465
  tmp = idr_get_next(& minors, & i);
#line 1465
  odev = (struct drbd_conf *)tmp;
#line 1465
  goto ldv_52240;
  ldv_52239: ;
#line 1466
  if ((unsigned int )*((unsigned short *)odev + 374UL) == 0U && (unsigned int )*((unsigned char *)odev + 749UL) == 0U) {
#line 1467
    goto ldv_52236;
  } else {

  }
#line 1468
  tmp___1 = _drbd_may_sync_now(odev);
#line 1468
  if (tmp___1 == 0) {
#line 1469
    __ns = drbd_read_state(odev);
#line 1469
    __ns.ldv_40604.aftr_isp = 1U;
#line 1469
    tmp___0 = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1469
    rv = ((int )tmp___0 != 2) | rv;
  } else {

  }
  ldv_52236: 
#line 1465
  i = i + 1;
#line 1465
  tmp___2 = idr_get_next(& minors, & i);
#line 1465
  odev = (struct drbd_conf *)tmp___2;
  ldv_52240: ;
#line 1465
  if ((unsigned long )odev != (unsigned long )((struct drbd_conf *)0)) {
#line 1466
    goto ldv_52239;
  } else {

  }
#line 1472
  rcu_read_unlock();
#line 1474
  return (rv);
}
}
#line 1483 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  void *tmp ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;

  {
#line 1486
  rv = 0;
#line 1488
  rcu_read_lock();
#line 1489
  i = 0;
#line 1489
  tmp = idr_get_next(& minors, & i);
#line 1489
  odev = (struct drbd_conf *)tmp;
#line 1489
  goto ldv_52252;
  ldv_52251: ;
#line 1490
  if ((unsigned int )*((unsigned short *)odev + 374UL) == 0U && (unsigned int )*((unsigned char *)odev + 749UL) == 0U) {
#line 1491
    goto ldv_52248;
  } else {

  }
#line 1492
  if ((unsigned int )*((unsigned char *)odev + 750UL) != 0U) {
#line 1493
    tmp___1 = _drbd_may_sync_now(odev);
#line 1493
    if (tmp___1 != 0) {
#line 1494
      __ns = drbd_read_state(odev);
#line 1494
      __ns.ldv_40604.aftr_isp = 0U;
#line 1494
      tmp___0 = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1494
      rv = ((int )tmp___0 != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_52248: 
#line 1489
  i = i + 1;
#line 1489
  tmp___2 = idr_get_next(& minors, & i);
#line 1489
  odev = (struct drbd_conf *)tmp___2;
  ldv_52252: ;
#line 1489
  if ((unsigned long )odev != (unsigned long )((struct drbd_conf *)0)) {
#line 1490
    goto ldv_52251;
  } else {

  }
#line 1499
  rcu_read_unlock();
#line 1500
  return (rv);
}
}
#line 1503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1505
  _raw_write_lock_irq(& global_state_lock);
#line 1506
  _drbd_resume_next(mdev);
#line 1507
  _raw_write_unlock_irq(& global_state_lock);
#line 1508
  return;
}
}
#line 1510 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1512
  _raw_write_lock_irq(& global_state_lock);
#line 1513
  _drbd_pause_after(mdev);
#line 1514
  _raw_write_unlock_irq(& global_state_lock);
#line 1515
  return;
}
}
#line 1518 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
enum drbd_ret_code drbd_resync_after_valid(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  int resync_after ;
  struct drbd_conf *tmp ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1523
  if (o_minor == -1) {
#line 1524
    return (NO_ERROR);
  } else {

  }
#line 1525
  if (o_minor < -1) {
#line 1526
    return (ERR_RESYNC_AFTER);
  } else {
#line 1525
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1525
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1526
      return (ERR_RESYNC_AFTER);
    } else {

    }
  }
#line 1529
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_52269: ;
#line 1531
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1532
    return (ERR_RESYNC_AFTER_CYCLE);
  } else {

  }
#line 1534
  rcu_read_lock();
#line 1535
  _________p1 = *((struct disk_conf * volatile  *)(& (odev->ldev)->disk_conf));
#line 1535
  tmp___0 = debug_lockdep_rcu_enabled();
#line 1535
  if (tmp___0 != 0 && ! __warned) {
#line 1535
    tmp___1 = rcu_read_lock_held();
#line 1535
    if (tmp___1 == 0 && 1) {
#line 1535
      __warned = 1;
#line 1535
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                             1535, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1535
  resync_after = _________p1->resync_after;
#line 1536
  rcu_read_unlock();
#line 1538
  if (resync_after == -1) {
#line 1539
    return (NO_ERROR);
  } else {

  }
#line 1542
  odev = minor_to_mdev((unsigned int )resync_after);
#line 1543
  goto ldv_52269;
}
}
#line 1547 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_resync_after_changed(struct drbd_conf *mdev ) 
{ 
  int changes ;
  int tmp ;

  {
  ldv_52274: 
#line 1552
  changes = _drbd_pause_after(mdev);
#line 1553
  tmp = _drbd_resume_next(mdev);
#line 1553
  changes = tmp | changes;
#line 1554
  if (changes != 0) {
#line 1555
    goto ldv_52274;
  } else {

  }

#line 1559
  return;
}
}
#line 1557 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_rs_controller_reset(struct drbd_conf *mdev ) 
{ 
  struct fifo_buffer *plan ;
  struct fifo_buffer *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 1561
  atomic_set(& mdev->rs_sect_in, 0);
#line 1562
  atomic_set(& mdev->rs_sect_ev, 0);
#line 1563
  mdev->rs_in_flight = 0;
#line 1569
  rcu_read_lock();
#line 1570
  _________p1 = *((struct fifo_buffer * volatile  *)(& mdev->rs_plan_s));
#line 1570
  tmp = debug_lockdep_rcu_enabled();
#line 1570
  if (tmp != 0 && ! __warned) {
#line 1570
    tmp___0 = rcu_read_lock_held();
#line 1570
    if (tmp___0 == 0 && 1) {
#line 1570
      __warned = 1;
#line 1570
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                             1570, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1570
  plan = _________p1;
#line 1571
  plan->total = 0;
#line 1572
  fifo_set(plan, 0);
#line 1573
  rcu_read_unlock();
#line 1574
  return;
}
}
#line 1576 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void start_resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1578
  mdev = (struct drbd_conf *)data;
#line 1580
  drbd_queue_work(& (mdev->tconn)->sender_work, & mdev->start_resync_work);
#line 1581
  return;
}
}
#line 1583 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_start_resync(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;
  int tmp___0 ;

  {
#line 1585
  mdev = w->ldv_50388.mdev;
#line 1587
  tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1587
  if (tmp != 0) {
#line 1588
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 1589
    mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 1590
    add_timer(& mdev->start_resync_timer);
#line 1591
    return (0);
  } else {
#line 1587
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1587
    if (tmp___0 != 0) {
#line 1588
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 1589
      mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 1590
      add_timer(& mdev->start_resync_timer);
#line 1591
      return (0);
    } else {

    }
  }
#line 1594
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1595
  clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 1596
  return (0);
}
}
#line 1607 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_state_rv tmp___4 ;
  unsigned long tw ;
  unsigned long tmp___5 ;
  unsigned long now ;
  int i ;
  char const   *tmp___6 ;
  struct net_conf *nc ;
  int timeo ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1612
  if ((int )mdev->state.ldv_50103.conn > 15 && (int )mdev->state.ldv_50103.conn <= 21) {
#line 1613
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1614
    return;
  } else {

  }
#line 1617
  tmp = constant_test_bit(20U, (unsigned long const volatile   *)(& mdev->flags));
#line 1617
  if (tmp == 0) {
#line 1618
    if ((unsigned int )side == 17U) {
#line 1622
      r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1623
      r = (r >> 8) & 255;
#line 1624
      if (r > 0) {
#line 1625
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                  r);
#line 1627
        val.i = 0U;
#line 1627
        val.ldv_40604.conn = 1U;
#line 1627
        mask.i = 0U;
#line 1627
        mask.ldv_40604.conn = 31U;
#line 1627
        conn_request_state(mdev->tconn, mask, val, CS_HARD);
#line 1628
        return;
      } else {

      }
    } else {
#line 1631
      r = drbd_khelper(mdev, (char *)"before-resync-source");
#line 1632
      r = (r >> 8) & 255;
#line 1633
      if (r > 0) {
#line 1634
        if (r == 3) {
#line 1635
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, ignoring. Old userland tools?",
                    r);
        } else {
#line 1638
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, dropping connection.\n",
                    r);
#line 1640
          val___0.i = 0U;
#line 1640
          val___0.ldv_40604.conn = 1U;
#line 1640
          mask___0.i = 0U;
#line 1640
          mask___0.ldv_40604.conn = 31U;
#line 1640
          conn_request_state(mdev->tconn, mask___0, val___0, CS_HARD);
#line 1641
          return;
        }
      } else {

      }
    }
  } else {

  }
#line 1647
  tmp___1 = get_current();
#line 1647
  if ((unsigned long )tmp___1 == (unsigned long )(mdev->tconn)->worker.task) {
#line 1650
    tmp___0 = mutex_trylock(mdev->state_mutex);
#line 1650
    if (tmp___0 == 0) {
#line 1651
      set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
#line 1652
      mdev->start_resync_timer.expires = (unsigned long )jiffies + 50UL;
#line 1653
      add_timer(& mdev->start_resync_timer);
#line 1654
      return;
    } else {
#line 1657
      mutex_lock_nested(mdev->state_mutex, 0U);
    }
  } else {

  }
#line 1659
  clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1661
  _raw_write_lock_irq(& global_state_lock);
#line 1662
  tmp___2 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1662
  if (tmp___2 == 0) {
#line 1663
    _raw_write_unlock_irq(& global_state_lock);
#line 1664
    mutex_unlock(mdev->state_mutex);
#line 1665
    return;
  } else {

  }
#line 1668
  ns = drbd_read_state(mdev);
#line 1670
  tmp___3 = _drbd_may_sync_now(mdev);
#line 1670
  ns.ldv_40604.aftr_isp = tmp___3 == 0;
#line 1672
  ns.ldv_40604.conn = (unsigned char )side;
#line 1674
  if ((unsigned int )side == 17U) {
#line 1675
    ns.ldv_40604.disk = 4U;
  } else {
#line 1677
    ns.ldv_40604.pdsk = 4U;
  }
#line 1679
  tmp___4 = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1679
  r = (int )tmp___4;
#line 1680
  ns = drbd_read_state(mdev);
#line 1682
  if ((int )ns.ldv_40604.conn <= 9) {
#line 1683
    r = 0;
  } else {

  }
#line 1685
  if (r == 1) {
#line 1686
    tmp___5 = drbd_bm_total_weight(mdev);
#line 1686
    tw = tmp___5;
#line 1687
    now = jiffies;
#line 1690
    mdev->rs_failed = 0UL;
#line 1691
    mdev->rs_paused = 0UL;
#line 1692
    mdev->rs_same_csum = 0UL;
#line 1693
    mdev->rs_last_events = 0;
#line 1694
    mdev->rs_last_sect_ev = 0;
#line 1695
    mdev->rs_total = tw;
#line 1696
    mdev->rs_start = now;
#line 1697
    i = 0;
#line 1697
    goto ldv_52310;
    ldv_52309: 
#line 1698
    mdev->rs_mark_left[i] = tw;
#line 1699
    mdev->rs_mark_time[i] = now;
#line 1697
    i = i + 1;
    ldv_52310: ;
#line 1697
    if (i <= 7) {
#line 1698
      goto ldv_52309;
    } else {

    }
#line 1701
    _drbd_pause_after(mdev);
  } else {

  }
#line 1703
  _raw_write_unlock_irq(& global_state_lock);
#line 1705
  if (r == 1) {
#line 1708
    mdev->rs_last_bcast = (unsigned long )jiffies - 250UL;
#line 1710
    tmp___6 = drbd_conn_str((enum drbd_conns )ns.ldv_40604.conn);
#line 1710
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___6, mdev->rs_total << 2, mdev->rs_total);
#line 1714
    if ((unsigned int )side == 17U) {
#line 1715
      mdev->bm_resync_fo = 0UL;
    } else {

    }
#line 1724
    if ((unsigned int )side == 16U && (mdev->tconn)->agreed_pro_version <= 95) {
#line 1725
      drbd_gen_and_send_sync_uuid(mdev);
    } else {

    }
#line 1727
    if ((mdev->tconn)->agreed_pro_version <= 94 && mdev->rs_total == 0UL) {
#line 1738
      if ((unsigned int )side == 16U) {
#line 1742
        rcu_read_lock();
#line 1743
        _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 1743
        tmp___7 = debug_lockdep_rcu_enabled();
#line 1743
        if (tmp___7 != 0 && ! __warned) {
#line 1743
          tmp___8 = rcu_read_lock_held();
#line 1743
          if (tmp___8 == 0 && 1) {
#line 1743
            __warned = 1;
#line 1743
            lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                                   1743, "suspicious rcu_dereference_check() usage");
          } else {

          }
        } else {

        }
#line 1743
        nc = _________p1;
#line 1744
        timeo = (int )(nc->ping_int * 250U + (nc->ping_timeo * 250U) / 9U);
#line 1745
        rcu_read_unlock();
#line 1746
        schedule_timeout_interruptible((long )timeo);
      } else {

      }
#line 1748
      drbd_resync_finished(mdev);
    } else {

    }
#line 1751
    drbd_rs_controller_reset(mdev);
#line 1756
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1757
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1759
    drbd_md_sync(mdev);
  } else {

  }
#line 1761
  put_ldev(mdev);
#line 1762
  mutex_unlock(mdev->state_mutex);
#line 1763
  return;
}
}
#line 1769 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
bool need_to_send_barrier(struct drbd_tconn *connection ) 
{ 
  int tmp ;

  {
#line 1771
  if (! connection->send.seen_any_write_yet) {
#line 1772
    return (0);
  } else {

  }
#line 1776
  if (connection->send.current_epoch_writes == 0U) {
#line 1777
    return (0);
  } else {

  }
#line 1786
  tmp = atomic_read((atomic_t const   *)(& connection->current_tle_nr));
#line 1786
  if (tmp != connection->send.current_epoch_nr + 1) {
#line 1788
    return (0);
  } else {

  }
#line 1790
  return (1);
}
}
#line 1793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
bool dequeue_work_batch(struct drbd_work_queue *queue , struct list_head *work_list ) 
{ 
  int tmp ;

  {
#line 1795
  spin_lock_irq(& queue->q_lock);
#line 1796
  list_splice_init(& queue->q, work_list);
#line 1797
  spin_unlock_irq(& queue->q_lock);
#line 1798
  tmp = list_empty((struct list_head  const  *)work_list);
#line 1798
  return (tmp == 0);
}
}
#line 1801 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
bool dequeue_work_item(struct drbd_work_queue *queue , struct list_head *work_list ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 1803
  spin_lock_irq(& queue->q_lock);
#line 1804
  tmp = list_empty((struct list_head  const  *)(& queue->q));
#line 1804
  if (tmp == 0) {
#line 1805
    list_move(queue->q.next, work_list);
  } else {

  }
#line 1806
  spin_unlock_irq(& queue->q_lock);
#line 1807
  tmp___0 = list_empty((struct list_head  const  *)work_list);
#line 1807
  return (tmp___0 == 0);
}
}
#line 1810 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void wait_for_work(struct drbd_tconn *connection , struct list_head *work_list ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  struct net_conf *nc ;
  int uncork ;
  int cork ;
  int tmp___0 ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___1 ;
  int tmp___2 ;
  int send_barrier ;
  int tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  bool tmp___7 ;
  struct net_conf *_________p1___0 ;
  bool __warned___0 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 1812
  tmp = get_current();
#line 1812
  wait.flags = 0U;
#line 1812
  wait.private = (void *)tmp;
#line 1812
  wait.func = & autoremove_wake_function;
#line 1812
  wait.task_list.next = & wait.task_list;
#line 1812
  wait.task_list.prev = & wait.task_list;
#line 1816
  dequeue_work_item(& connection->sender_work, work_list);
#line 1817
  tmp___0 = list_empty((struct list_head  const  *)work_list);
#line 1817
  if (tmp___0 == 0) {
#line 1818
    return;
  } else {

  }
#line 1826
  rcu_read_lock();
#line 1827
  _________p1 = *((struct net_conf * volatile  *)(& connection->net_conf));
#line 1827
  tmp___1 = debug_lockdep_rcu_enabled();
#line 1827
  if (tmp___1 != 0 && ! __warned) {
#line 1827
    tmp___2 = rcu_read_lock_held();
#line 1827
    if (tmp___2 == 0 && 1) {
#line 1827
      __warned = 1;
#line 1827
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                             1827, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1827
  nc = _________p1;
#line 1828
  uncork = (unsigned long )nc != (unsigned long )((struct net_conf *)0) ? (int )nc->tcp_cork : 0;
#line 1829
  rcu_read_unlock();
#line 1830
  if (uncork != 0) {
#line 1831
    mutex_lock_nested(& connection->data.mutex, 0U);
#line 1832
    if ((unsigned long )connection->data.socket != (unsigned long )((struct socket *)0)) {
#line 1833
      drbd_tcp_uncork(connection->data.socket);
    } else {

    }
#line 1834
    mutex_unlock(& connection->data.mutex);
  } else {

  }
  ldv_52341: 
#line 1839
  prepare_to_wait(& connection->sender_work.q_wait, & wait, 1);
#line 1840
  spin_lock_irq(& connection->req_lock);
#line 1841
  spin_lock(& connection->sender_work.q_lock);
#line 1844
  tmp___3 = list_empty((struct list_head  const  *)(& connection->sender_work.q));
#line 1844
  if (tmp___3 == 0) {
#line 1845
    list_move(connection->sender_work.q.next, work_list);
  } else {

  }
#line 1846
  spin_unlock(& connection->sender_work.q_lock);
#line 1847
  tmp___4 = list_empty((struct list_head  const  *)work_list);
#line 1847
  if (tmp___4 == 0) {
#line 1848
    spin_unlock_irq(& connection->req_lock);
#line 1849
    goto ldv_52340;
  } else {
#line 1847
    tmp___5 = get_current();
#line 1847
    tmp___6 = signal_pending(tmp___5);
#line 1847
    if (tmp___6 != 0) {
#line 1848
      spin_unlock_irq(& connection->req_lock);
#line 1849
      goto ldv_52340;
    } else {

    }
  }
#line 1851
  tmp___7 = need_to_send_barrier(connection);
#line 1851
  send_barrier = (int )tmp___7;
#line 1852
  spin_unlock_irq(& connection->req_lock);
#line 1853
  if (send_barrier != 0) {
#line 1854
    drbd_send_barrier(connection);
#line 1855
    connection->send.current_epoch_nr = connection->send.current_epoch_nr + 1;
  } else {

  }
#line 1857
  schedule();
#line 1861
  goto ldv_52341;
  ldv_52340: 
#line 1862
  finish_wait(& connection->sender_work.q_wait, & wait);
#line 1865
  rcu_read_lock();
#line 1866
  _________p1___0 = *((struct net_conf * volatile  *)(& connection->net_conf));
#line 1866
  tmp___8 = debug_lockdep_rcu_enabled();
#line 1866
  if (tmp___8 != 0 && ! __warned___0) {
#line 1866
    tmp___9 = rcu_read_lock_held();
#line 1866
    if (tmp___9 == 0 && 1) {
#line 1866
      __warned___0 = 1;
#line 1866
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                             1866, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1866
  nc = _________p1___0;
#line 1867
  cork = (unsigned long )nc != (unsigned long )((struct net_conf *)0) ? (int )nc->tcp_cork : 0;
#line 1868
  rcu_read_unlock();
#line 1869
  mutex_lock_nested(& connection->data.mutex, 0U);
#line 1870
  if ((unsigned long )connection->data.socket != (unsigned long )((struct socket *)0)) {
#line 1871
    if (cork != 0) {
#line 1872
      drbd_tcp_cork(connection->data.socket);
    } else
#line 1873
    if (uncork == 0) {
#line 1874
      drbd_tcp_uncork(connection->data.socket);
    } else {

    }
  } else {

  }
#line 1876
  mutex_unlock(& connection->data.mutex);
#line 1877
  return;
}
}
#line 1879 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_tconn *tconn ;
  struct drbd_work *w ;
  struct drbd_conf *mdev ;
  struct list_head work_list ;
  int vnr ;
  int tmp ;
  struct task_struct *tmp___0 ;
  enum drbd_thread_state tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  struct list_head  const  *__mptr ;
  int tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___8 ;
  int tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;

  {
#line 1881
  tconn = thi->tconn;
#line 1882
  w = 0;
#line 1884
  work_list.next = & work_list;
#line 1884
  work_list.prev = & work_list;
#line 1887
  goto ldv_52353;
  ldv_52364: 
#line 1888
  drbd_thread_current_set_cpu(thi);
#line 1892
  tmp = list_empty((struct list_head  const  *)(& work_list));
#line 1892
  if (tmp != 0) {
#line 1893
    wait_for_work(tconn, & work_list);
  } else {

  }
#line 1895
  tmp___2 = get_current();
#line 1895
  tmp___3 = signal_pending(tmp___2);
#line 1895
  if (tmp___3 != 0) {
#line 1896
    tmp___0 = get_current();
#line 1896
    flush_signals(tmp___0);
#line 1897
    tmp___1 = get_t_state(thi);
#line 1897
    if ((unsigned int )tmp___1 == 1U) {
#line 1898
      printk("\fd-con %s: Worker got an unexpected signal\n", tconn->name);
#line 1899
      goto ldv_52353;
    } else {

    }
#line 1901
    goto ldv_52354;
  } else {

  }
#line 1904
  tmp___4 = get_t_state(thi);
#line 1904
  if ((unsigned int )tmp___4 != 1U) {
#line 1905
    goto ldv_52354;
  } else {

  }
#line 1907
  goto ldv_52357;
  ldv_52362: 
#line 1908
  __mptr = (struct list_head  const  *)work_list.next;
#line 1908
  w = (struct drbd_work *)__mptr;
#line 1909
  list_del_init(& w->list);
#line 1910
  tmp___5 = (*(w->cb))(w, (unsigned int )tconn->cstate <= 8U);
#line 1910
  if (tmp___5 == 0) {
#line 1911
    goto ldv_52357;
  } else {

  }
#line 1912
  if ((unsigned int )tconn->cstate > 8U) {
#line 1913
    val.i = 0U;
#line 1913
    val.ldv_40604.conn = 5U;
#line 1913
    mask.i = 0U;
#line 1913
    mask.ldv_40604.conn = 31U;
#line 1913
    conn_request_state(tconn, mask, val, CS_HARD);
  } else {

  }
  ldv_52357: 
#line 1907
  tmp___6 = list_empty((struct list_head  const  *)(& work_list));
#line 1907
  if (tmp___6 == 0) {
#line 1908
    goto ldv_52362;
  } else {

  }

  ldv_52353: 
#line 1887
  tmp___7 = get_t_state(thi);
#line 1887
  if ((unsigned int )tmp___7 == 1U) {
#line 1888
    goto ldv_52364;
  } else {

  }
  ldv_52354: ;
  ldv_52370: ;
#line 1918
  goto ldv_52368;
  ldv_52367: 
#line 1919
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1919
  w = (struct drbd_work *)__mptr___0;
#line 1920
  list_del_init(& w->list);
#line 1921
  (*(w->cb))(w, 1);
  ldv_52368: 
#line 1918
  tmp___8 = list_empty((struct list_head  const  *)(& work_list));
#line 1918
  if (tmp___8 == 0) {
#line 1919
    goto ldv_52367;
  } else {

  }
#line 1923
  dequeue_work_batch(& tconn->sender_work, & work_list);
#line 1924
  tmp___9 = list_empty((struct list_head  const  *)(& work_list));
#line 1924
  if (tmp___9 == 0) {
#line 1925
    goto ldv_52370;
  } else {

  }
#line 1926
  rcu_read_lock();
#line 1927
  vnr = 0;
#line 1927
  tmp___10 = idr_get_next(& tconn->volumes, & vnr);
#line 1927
  mdev = (struct drbd_conf *)tmp___10;
#line 1927
  goto ldv_52373;
  ldv_52372: ;
#line 1928
  if ((unsigned int )*((unsigned char *)mdev + 749UL) != 0U || (unsigned int )*((unsigned short *)mdev + 374UL) != 0U) {
#line 1928
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1928);
  } else {

  }
#line 1929
  kref_get(& mdev->kref);
#line 1930
  rcu_read_unlock();
#line 1931
  drbd_mdev_cleanup(mdev);
#line 1932
  kref_put(& mdev->kref, & drbd_minor_destroy);
#line 1933
  rcu_read_lock();
#line 1927
  vnr = vnr + 1;
#line 1927
  tmp___11 = idr_get_next(& tconn->volumes, & vnr);
#line 1927
  mdev = (struct drbd_conf *)tmp___11;
  ldv_52373: ;
#line 1927
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 1928
    goto ldv_52372;
  } else {

  }
#line 1935
  rcu_read_unlock();
#line 1937
  return (0);
}
}
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/uapi/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/uapi/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 177 "include/linux/printk.h"
extern void dump_stack(void) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 28 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 105 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 108
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 108
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 108
  if (tmp___1 != 0L) {
#line 108
    __ret_warn_on = ! __warned;
#line 108
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 108
    if (tmp != 0L) {
#line 108
      warn_slowpath_null("include/linux/cpumask.h", 108);
    } else {

    }
#line 108
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 108
    if (tmp___0 != 0L) {
#line 108
      __warned = 1;
    } else {

    }
  } else {

  }
#line 108
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 110
  return (cpu);
}
}
#line 170 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 173
  if (n != -1) {
#line 174
    cpumask_check((unsigned int )n);
  } else {

  }
#line 175
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 175
  return ((unsigned int )tmp);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 21 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_bh(rwlock_t * ) ;
#line 33
extern void _raw_write_unlock_bh(rwlock_t * ) ;
#line 124 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 126
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 126
  return (tmp != 1);
}
}
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, "&x->wait", & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 84
extern long wait_for_completion_interruptible_timeout(struct completion * , unsigned long  ) ;
#line 144 "include/linux/rcupdate.h"
extern void synchronize_sched(void) ;
#line 173 "include/linux/rcupdate.h"
__inline static void synchronize_rcu(void) 
{ 


  {
#line 175
  synchronize_sched();
#line 176
  return;
}
}
#line 245 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 453 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 111 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 114
  tmp = __phys_addr((unsigned long )buf);
#line 114
  sg_set_page(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 115
  return;
}
}
#line 263 "include/linux/sched.h"
extern void io_schedule(void) ;
#line 320
extern long schedule_timeout(long  ) ;
#line 323
extern long schedule_timeout_uninterruptible(long  ) ;
#line 17 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 28
extern u32 random32(void) ;
#line 205 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 209
extern void sock_release(struct socket * ) ;
#line 212
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 255
extern int kernel_accept(struct socket * , struct socket ** , int  ) ;
#line 329 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) ;
#line 492 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 495 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 497
  return;
}
}
#line 1111 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1113
  return ((struct crypto_hash *)tfm);
}
}
#line 1123 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1126
  type = type & 4294967280U;
#line 1127
  mask = mask & 4294967280U;
#line 1128
  type = type | 8U;
#line 1129
  mask = mask | 14U;
#line 1131
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1131
  tmp___0 = __crypto_hash_cast(tmp);
#line 1131
  return (tmp___0);
}
}
#line 1139 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1141
  tmp = crypto_hash_tfm(tfm);
#line 1141
  crypto_free_tfm(tmp);
#line 1142
  return;
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1210
  tmp = crypto_hash_crt(desc->tfm);
#line 1210
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1210
  return (tmp___0);
}
}
#line 1213 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1216
  tmp = crypto_hash_crt(hash);
#line 1216
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1216
  return (tmp___0);
}
}
#line 439 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 441
  disk->part0.nr_sects = size;
#line 442
  return;
}
}
#line 56 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 58
  __might_sleep("include/linux/highmem.h", 58, 0);
#line 59
  tmp = lowmem_page_address((struct page  const  *)page);
#line 59
  return (tmp);
}
}
#line 62 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 64
  return;
}
}
#line 215 "include/linux/bio.h"
extern struct bio *bio_alloc_bioset(gfp_t  , int  , struct bio_set * ) ;
#line 223 "include/linux/bio.h"
__inline static struct bio *bio_alloc(gfp_t gfp_mask , unsigned int nr_iovecs ) 
{ 
  struct bio *tmp ;

  {
#line 225
  tmp = bio_alloc_bioset(gfp_mask, (int )nr_iovecs, fs_bio_set);
#line 225
  return (tmp);
}
}
#line 260 "include/linux/lru_cache.h"
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 110 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_state.h"
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) ;
#line 114
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 116
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) ;
#line 127
enum drbd_state_rv _conn_request_state(struct drbd_tconn *tconn , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags flags ) ;
#line 154
enum drbd_role conn_highest_role(struct drbd_tconn *tconn ) ;
#line 158
enum drbd_disk_state conn_highest_pdsk(struct drbd_tconn *tconn ) ;
#line 65 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 236
char const   *cmdname(enum drbd_packet cmd ) ;
#line 256
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 259 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 269
  c->word_offset = c->bit_offset >> 6;
#line 270
  return;
}
}
#line 313
unsigned int drbd_header_size(struct drbd_tconn *tconn ) ;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_interval.h"
__inline static void drbd_clear_interval(struct drbd_interval *i ) 
{ 


  {
#line 18
  i->rb.__rb_parent_color = (unsigned long )(& i->rb);
#line 19
  return;
}
}
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_interval.h"
__inline static bool drbd_interval_empty(struct drbd_interval *i ) 
{ 


  {
#line 23
  return (i->rb.__rb_parent_color == (unsigned long )(& i->rb));
}
}
#line 26
bool drbd_insert_interval(struct rb_root *root , struct drbd_interval *this ) ;
#line 27
bool drbd_contains_interval(struct rb_root *root , sector_t sector , struct drbd_interval *interval ) ;
#line 29
void drbd_remove_interval(struct rb_root *root , struct drbd_interval *this ) ;
#line 30
struct drbd_interval *drbd_find_overlap(struct rb_root *root , sector_t sector , unsigned int size ) ;
#line 32
struct drbd_interval *drbd_next_overlap(struct drbd_interval *i , sector_t sector ,
                                        unsigned int size ) ;
#line 546 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_wait_misc(struct drbd_conf *mdev , struct drbd_interval *i ) ;
#line 1042 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1044
  return (mdev->minor);
}
}
#line 1047 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *vnr_to_mdev(struct drbd_tconn *tconn , int vnr ) 
{ 
  void *tmp ;

  {
#line 1049
  tmp = idr_find(& tconn->volumes, vnr);
#line 1049
  return ((struct drbd_conf *)tmp);
}
}
#line 1064
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1065
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1074
void tl_release(struct drbd_tconn *tconn , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1076
void tl_clear(struct drbd_tconn *tconn ) ;
#line 1077
void drbd_free_sock(struct drbd_tconn *tconn ) ;
#line 1084
int drbd_send_protocol(struct drbd_tconn *tconn ) ;
#line 1085
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1088
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1090
int drbd_send_current_state(struct drbd_conf *mdev ) ;
#line 1091
int drbd_send_sync_param(struct drbd_conf *mdev ) ;
#line 1092
void drbd_send_b_ack(struct drbd_tconn *tconn , u32 barrier_nr , u32 set_size ) ;
#line 1096
void drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packet cmd , struct p_block_req *rp ) ;
#line 1098
void drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packet cmd , struct p_data *dp ,
                      int data_size ) ;
#line 1113
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1114
void drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) ;
#line 1115
void conn_send_sr_reply(struct drbd_tconn *tconn , enum drbd_state_rv retcode ) ;
#line 1120
void conn_md_sync(struct drbd_tconn *tconn ) ;
#line 1125
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1127
void drbd_uuid_move_history(struct drbd_conf *mdev ) ;
#line 1128
void __drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1143
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) ;
#line 1149
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1150
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1370
mempool_t *drbd_ee_mempool ;
#line 1385
struct page *drbd_pp_pool ;
#line 1386
spinlock_t drbd_pp_lock ;
#line 1387
int drbd_pp_vacant ;
#line 1433
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           sector_t u_size , int assume_peer_has_space ) ;
#line 1435
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1436
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1437
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) ;
#line 1438
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) ;
#line 1442
void conn_try_outdate_peer_async(struct drbd_tconn *tconn ) ;
#line 1503
int drbd_free_peer_reqs(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1511
struct page *drbd_alloc_pages(struct drbd_conf *mdev , unsigned int number , bool retry___0 ) ;
#line 1514
void conn_flush_workqueue(struct drbd_tconn *tconn ) ;
#line 1515
int drbd_connected(struct drbd_conf *mdev ) ;
#line 1516 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 


  {
#line 1518
  conn_flush_workqueue(mdev->tconn);
#line 1519
  return;
}
}
#line 1556 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1558
  val = 1;
#line 1559
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1561
  return;
}
}
#line 1563 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1565
  val = 2;
#line 1566
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1568
  return;
}
}
#line 1570
void drbd_bump_write_ordering(struct drbd_tconn *tconn , enum write_ordering_e wo ) ;
#line 1582
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1584
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1632 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_peer_req_has_active_page___0(struct drbd_peer_request *peer_req ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1634
  page = peer_req->pages;
#line 1635
  goto ldv_51832;
  ldv_51831: 
#line 1636
  tmp = page_count(page);
#line 1636
  if (tmp > 1) {
#line 1637
    return (1);
  } else {

  }
#line 1635
  page = page_chain_next(page);
  ldv_51832: ;
#line 1635
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1635
    tmp___0 = page_chain_next(page);
#line 1635
    __builtin_prefetch((void const   *)tmp___0);
#line 1635
    if (1 != 0) {
#line 1636
      goto ldv_51831;
    } else {
#line 1638
      goto ldv_51833;
    }
  } else {

  }
  ldv_51833: ;
#line 1639
  return (0);
}
}
#line 1758 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t _drbd_md_first_sector(int meta_dev_idx , struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1760
  switch (meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1763
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1766
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1818 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  int meta_dev_idx ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___2 ;
  sector_t tmp___3 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___4 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___5 ;

  {
#line 1823
  rcu_read_lock();
#line 1824
  _________p1 = *((struct disk_conf * volatile  *)(& bdev->disk_conf));
#line 1824
  tmp = debug_lockdep_rcu_enabled();
#line 1824
  if (tmp != 0 && ! __warned) {
#line 1824
    tmp___0 = rcu_read_lock_held();
#line 1824
    if (tmp___0 == 0 && 1) {
#line 1824
      __warned = 1;
#line 1824
      lockdep_rcu_suspicious("/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
                             1824, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1824
  meta_dev_idx = _________p1->meta_dev_idx;
#line 1825
  rcu_read_unlock();
#line 1827
  switch (meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1831
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1831
  if (tmp___3 != 0UL) {
#line 1831
    __min1 = 2251799813685248UL;
#line 1831
    tmp___2 = _drbd_md_first_sector(meta_dev_idx, bdev);
#line 1831
    __min2 = tmp___2;
#line 1831
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1831
    s = 0UL;
  }
#line 1834
  goto ldv_51920;
  case -2: 
#line 1836
  __min1___0 = 2251799813685248UL;
#line 1836
  tmp___4 = drbd_get_capacity(bdev->backing_bdev);
#line 1836
  __min2___0 = tmp___4;
#line 1836
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1839
  __min1___1 = s;
#line 1839
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1839
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1842
  goto ldv_51920;
  default: 
#line 1844
  __min1___2 = 8587575296UL;
#line 1844
  tmp___5 = drbd_get_capacity(bdev->backing_bdev);
#line 1844
  __min2___2 = tmp___5;
#line 1844
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_51920: ;
#line 1847
  return (s);
}
}
#line 1927
int drbd_send_ping(struct drbd_tconn *tconn ) ;
#line 1928
int drbd_send_ping_ack(struct drbd_tconn *tconn ) ;
#line 1932 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 1934
  _drbd_thread_stop(thi, 0, 1);
#line 1935
  return;
}
}
#line 2015 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2017
  atomic_inc(& mdev->unacked_cnt);
#line 2018
  return;
}
}
#line 2300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  int changed ;

  {
#line 2302
  changed = mdev->ed_uuid != val;
#line 2303
  mdev->ed_uuid = val;
#line 2304
  return (changed);
}
}
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 16
  set_capacity(mdev->vdisk, size);
#line 17
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 18
  return;
}
}
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 34
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 35
    tmp = mdev_to_minor(mdev);
#line 35
    printk("\vdrbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 38
    dump_stack();
#line 39
    bio_endio(bio, -19);
#line 40
    return;
  } else {

  }
#line 43
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 43
  if (tmp___0 != 0) {
#line 44
    bio_endio(bio, -5);
  } else {
#line 46
    generic_make_request(bio);
  }
#line 47
  return;
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_52284: ;
#line 162
  goto ldv_52284;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_features(struct drbd_tconn *tconn ) ;
#line 73
static int drbd_do_auth(struct drbd_tconn *tconn ) ;
#line 74
static int drbd_disconnected(struct drbd_conf *mdev ) ;
#line 76
static enum finish_epoch drbd_may_finish_epoch(struct drbd_tconn *tconn , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 77
static int e_end_block(struct drbd_work *w , int cancel ) ;
#line 91 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 96
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 96
  if (tmp___0 != 0L) {
#line 96
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (96), "i" (12UL));
    ldv_52370: ;
#line 96
    goto ldv_52370;
  } else {

  }
#line 97
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 97
  if (tmp___1 != 0L) {
#line 97
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (97), "i" (12UL));
    ldv_52371: ;
#line 97
    goto ldv_52371;
  } else {

  }
#line 99
  page = *head;
#line 101
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 102
    return (0);
  } else {

  }
#line 104
  goto ldv_52374;
  ldv_52373: 
#line 105
  tmp = page_chain_next(page);
#line 106
  n = n - 1;
#line 106
  if (n == 0) {
#line 107
    goto ldv_52372;
  } else {

  }
#line 108
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 110
    return (0);
  } else {

  }
#line 111
  page = tmp;
  ldv_52374: ;
#line 104
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 105
    goto ldv_52373;
  } else {

  }
  ldv_52372: 
#line 115
  page->ldv_16348.private = 0UL;
#line 117
  page = *head;
#line 118
  *head = tmp;
#line 119
  return (page);
}
}
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 128
  i = 1;
#line 129
  goto ldv_52382;
  ldv_52381: 
#line 130
  i = i + 1;
#line 130
  page = tmp;
  ldv_52382: 
#line 129
  tmp = page_chain_next(page);
#line 129
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 130
    goto ldv_52381;
  } else {

  }

#line 131
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 132
    *len = i;
  } else {

  }
#line 133
  return (page);
}
}
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 139
  i = 0;
#line 140
  goto ldv_52391;
  ldv_52390: 
#line 141
  put_page(page);
#line 142
  i = i + 1;
#line 140
  page = tmp;
  ldv_52391: ;
#line 140
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 140
    tmp = page_chain_next(page);
#line 140
    if (1 != 0) {
#line 141
      goto ldv_52390;
    } else {
#line 143
      goto ldv_52392;
    }
  } else {

  }
  ldv_52392: ;
#line 144
  return (i);
}
}
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 152
  tmp = page_chain_tail(chain_first, 0);
#line 153
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 153
  if (tmp___0 != 0L) {
#line 153
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (153), "i" (12UL));
    ldv_52399: ;
#line 153
    goto ldv_52399;
  } else {

  }
#line 157
  chain_last->ldv_16348.private = (unsigned long )*head;
#line 158
  *head = chain_first;
#line 159
  return;
}
}
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *__drbd_alloc_pages(struct drbd_conf *mdev , unsigned int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  unsigned int i ;

  {
#line 164
  page = 0;
#line 165
  tmp = 0;
#line 166
  i = 0U;
#line 170
  if ((unsigned int )drbd_pp_vacant >= number) {
#line 171
    spin_lock(& drbd_pp_lock);
#line 172
    page = page_chain_del(& drbd_pp_pool, (int )number);
#line 173
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 174
      drbd_pp_vacant = (int )((unsigned int )drbd_pp_vacant - number);
    } else {

    }
#line 175
    spin_unlock(& drbd_pp_lock);
#line 176
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 177
      return (page);
    } else {

    }
  } else {

  }
#line 183
  i = 0U;
#line 183
  goto ldv_52409;
  ldv_52408: 
#line 184
  tmp = alloc_pages(514U, 0U);
#line 185
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 186
    goto ldv_52407;
  } else {

  }
#line 187
  tmp->ldv_16348.private = (unsigned long )page;
#line 188
  page = tmp;
#line 183
  i = i + 1U;
  ldv_52409: ;
#line 183
  if (i < number) {
#line 184
    goto ldv_52408;
  } else {

  }
  ldv_52407: ;
#line 191
  if (i == number) {
#line 192
    return (page);
  } else {

  }
#line 197
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 198
    tmp = page_chain_tail(page, 0);
#line 199
    spin_lock(& drbd_pp_lock);
#line 200
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 201
    drbd_pp_vacant = (int )((unsigned int )drbd_pp_vacant + i);
#line 202
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 204
  return (0);
}
}
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_finished_net_peer_reqs(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_peer_request *peer_req ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 218
  le = mdev->net_ee.next;
#line 218
  tle = le->next;
#line 218
  goto ldv_52421;
  ldv_52420: 
#line 219
  __mptr = (struct list_head  const  *)le;
#line 219
  peer_req = (struct drbd_peer_request *)__mptr;
#line 220
  tmp = drbd_peer_req_has_active_page___0(peer_req);
#line 220
  if (tmp != 0) {
#line 221
    goto ldv_52419;
  } else {

  }
#line 222
  list_move(le, to_be_freed);
#line 218
  le = tle;
#line 218
  tle = le->next;
  ldv_52421: ;
#line 218
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 219
    goto ldv_52420;
  } else {

  }
  ldv_52419: ;
#line 223
  return;
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_peer_request *peer_req ;
  struct drbd_peer_request *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 228
  reclaimed.next = & reclaimed;
#line 228
  reclaimed.prev = & reclaimed;
#line 231
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 232
  reclaim_finished_net_peer_reqs(mdev, & reclaimed);
#line 233
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 235
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 235
  peer_req = (struct drbd_peer_request *)__mptr;
#line 235
  __mptr___0 = (struct list_head  const  *)peer_req->w.list.next;
#line 235
  t = (struct drbd_peer_request *)__mptr___0;
#line 235
  goto ldv_52435;
  ldv_52434: 
#line 236
  __drbd_free_peer_req(mdev, peer_req, 1);
#line 235
  peer_req = t;
#line 235
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 235
  t = (struct drbd_peer_request *)__mptr___1;
  ldv_52435: ;
#line 235
  if ((unsigned long )(& peer_req->w.list) != (unsigned long )(& reclaimed)) {
#line 236
    goto ldv_52434;
  } else {

  }

#line 240
  return;
}
}
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct page *drbd_alloc_pages(struct drbd_conf *mdev , unsigned int number , bool retry___0 ) 
{ 
  struct page *page ;
  struct net_conf *nc ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int mxb ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;

  {
#line 254
  page = 0;
#line 256
  tmp = get_current();
#line 256
  wait.flags = 0U;
#line 256
  wait.private = (void *)tmp;
#line 256
  wait.func = & autoremove_wake_function;
#line 256
  wait.task_list.next = & wait.task_list;
#line 256
  wait.task_list.prev = & wait.task_list;
#line 261
  rcu_read_lock();
#line 262
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 262
  tmp___0 = debug_lockdep_rcu_enabled();
#line 262
  if (tmp___0 != 0 && ! __warned) {
#line 262
    tmp___1 = rcu_read_lock_held();
#line 262
    if (tmp___1 == 0 && 1) {
#line 262
      __warned = 1;
#line 262
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             262, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 262
  nc = _________p1;
#line 263
  mxb = (unsigned long )nc != (unsigned long )((struct net_conf *)0) ? (int )nc->max_buffers : 1000000;
#line 264
  rcu_read_unlock();
#line 266
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 266
  if (tmp___2 < mxb) {
#line 267
    page = __drbd_alloc_pages(mdev, number);
  } else {

  }
#line 269
  goto ldv_52451;
  ldv_52450: 
#line 270
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 272
  drbd_kick_lo_and_reclaim_net(mdev);
#line 274
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 274
  if (tmp___3 < mxb) {
#line 275
    page = __drbd_alloc_pages(mdev, number);
#line 276
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 277
      goto ldv_52449;
    } else {

    }
  } else {

  }
#line 280
  if (! retry___0) {
#line 281
    goto ldv_52449;
  } else {

  }
#line 283
  tmp___4 = get_current();
#line 283
  tmp___5 = signal_pending(tmp___4);
#line 283
  if (tmp___5 != 0) {
#line 284
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_alloc_pages interrupted!\n");
#line 285
    goto ldv_52449;
  } else {

  }
#line 288
  schedule();
  ldv_52451: ;
#line 269
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 270
    goto ldv_52450;
  } else {

  }
  ldv_52449: 
#line 290
  finish_wait(& drbd_pp_wait, & wait);
#line 292
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 293
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 294
  return (page);
}
}
#line 301 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_free_pages(struct drbd_conf *mdev , struct page *page , int is_net ) 
{ 
  atomic_t *a ;
  int i ;
  struct page *tmp ;

  {
#line 303
  a = is_net != 0 ? & mdev->pp_in_use_by_net : & mdev->pp_in_use;
#line 306
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 307
    return;
  } else {

  }
#line 309
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 256UL) {
#line 310
    i = page_chain_free(page);
  } else {
#line 313
    tmp = page_chain_tail(page, & i);
#line 314
    spin_lock(& drbd_pp_lock);
#line 315
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 316
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 317
    spin_unlock(& drbd_pp_lock);
  }
#line 319
  i = atomic_sub_return(i, a);
#line 320
  if (i < 0) {
#line 321
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: %s: %d < 0\n",
             is_net != 0 ? (char *)"pp_in_use_by_net" : (char *)"pp_in_use", i);
  } else {

  }
#line 323
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 324
  return;
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_peer_request *drbd_alloc_peer_req(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_peer_request *peer_req ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 345
  page = 0;
#line 346
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 348
  tmp = drbd_insert_fault(mdev, 8U);
#line 348
  if (tmp != 0) {
#line 349
    return (0);
  } else {

  }
#line 351
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 351
  peer_req = (struct drbd_peer_request *)tmp___0;
#line 352
  if ((unsigned long )peer_req == (unsigned long )((struct drbd_peer_request *)0)) {
#line 353
    if ((gfp_mask & 512U) == 0U) {
#line 354
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: allocation failed\n",
              "drbd_alloc_peer_req");
    } else {

    }
#line 355
    return (0);
  } else {

  }
#line 358
  if (data_size != 0U) {
#line 359
    page = drbd_alloc_pages(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 360
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 361
      goto fail;
    } else {

    }
  } else {

  }
#line 364
  drbd_clear_interval(& peer_req->i);
#line 365
  peer_req->i.size = data_size;
#line 366
  peer_req->i.sector = sector;
#line 367
  peer_req->i.local = 0;
#line 368
  peer_req->i.waiting = 0;
#line 370
  peer_req->epoch = 0;
#line 371
  peer_req->w.ldv_50388.mdev = mdev;
#line 372
  peer_req->pages = page;
#line 373
  atomic_set(& peer_req->pending_bios, 0);
#line 374
  peer_req->flags = 0UL;
#line 379
  peer_req->ldv_50490.block_id = id;
#line 381
  return (peer_req);
  fail: 
#line 384
  mempool_free((void *)peer_req, drbd_ee_mempool);
#line 385
  return (0);
}
}
#line 388 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void __drbd_free_peer_req(struct drbd_conf *mdev , struct drbd_peer_request *peer_req ,
                          int is_net ) 
{ 
  int tmp ;
  bool tmp___0 ;
  int tmp___1 ;

  {
#line 391
  if ((peer_req->flags & 16UL) != 0UL) {
#line 392
    kfree((void const   *)peer_req->ldv_50490.digest);
  } else {

  }
#line 393
  drbd_free_pages(mdev, peer_req->pages, is_net);
#line 394
  tmp = atomic_read((atomic_t const   *)(& peer_req->pending_bios));
#line 394
  if (tmp != 0) {
#line 394
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&peer_req->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            394);
  } else {

  }
#line 395
  tmp___0 = drbd_interval_empty(& peer_req->i);
#line 395
  if (tmp___0) {
#line 395
    tmp___1 = 0;
  } else {
#line 395
    tmp___1 = 1;
  }
#line 395
  if (tmp___1) {
#line 395
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_interval_empty(&peer_req->i) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            395);
  } else {

  }
#line 396
  mempool_free((void *)peer_req, drbd_ee_mempool);
#line 397
  return;
}
}
#line 399 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_free_peer_reqs(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_peer_request *peer_req ;
  struct drbd_peer_request *t ;
  int count ;
  int is_net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 401
  work_list.next = & work_list;
#line 401
  work_list.prev = & work_list;
#line 403
  count = 0;
#line 404
  is_net = (unsigned long )(& mdev->net_ee) == (unsigned long )list;
#line 406
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 407
  list_splice_init(list, & work_list);
#line 408
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 410
  __mptr = (struct list_head  const  *)work_list.next;
#line 410
  peer_req = (struct drbd_peer_request *)__mptr;
#line 410
  __mptr___0 = (struct list_head  const  *)peer_req->w.list.next;
#line 410
  t = (struct drbd_peer_request *)__mptr___0;
#line 410
  goto ldv_52493;
  ldv_52492: 
#line 411
  __drbd_free_peer_req(mdev, peer_req, is_net);
#line 412
  count = count + 1;
#line 410
  peer_req = t;
#line 410
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 410
  t = (struct drbd_peer_request *)__mptr___1;
  ldv_52493: ;
#line 410
  if ((unsigned long )(& peer_req->w.list) != (unsigned long )(& work_list)) {
#line 411
    goto ldv_52492;
  } else {

  }

#line 414
  return (count);
}
}
#line 420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_finish_peer_reqs(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_peer_request *peer_req ;
  struct drbd_peer_request *t ;
  int err ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int err2 ;
  struct list_head  const  *__mptr___4 ;

  {
#line 422
  work_list.next = & work_list;
#line 422
  work_list.prev = & work_list;
#line 423
  reclaimed.next = & reclaimed;
#line 423
  reclaimed.prev = & reclaimed;
#line 425
  err = 0;
#line 427
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 428
  reclaim_finished_net_peer_reqs(mdev, & reclaimed);
#line 429
  list_splice_init(& mdev->done_ee, & work_list);
#line 430
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 432
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 432
  peer_req = (struct drbd_peer_request *)__mptr;
#line 432
  __mptr___0 = (struct list_head  const  *)peer_req->w.list.next;
#line 432
  t = (struct drbd_peer_request *)__mptr___0;
#line 432
  goto ldv_52510;
  ldv_52509: 
#line 433
  __drbd_free_peer_req(mdev, peer_req, 1);
#line 432
  peer_req = t;
#line 432
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 432
  t = (struct drbd_peer_request *)__mptr___1;
  ldv_52510: ;
#line 432
  if ((unsigned long )(& peer_req->w.list) != (unsigned long )(& reclaimed)) {
#line 433
    goto ldv_52509;
  } else {

  }
#line 439
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 439
  peer_req = (struct drbd_peer_request *)__mptr___2;
#line 439
  __mptr___3 = (struct list_head  const  *)peer_req->w.list.next;
#line 439
  t = (struct drbd_peer_request *)__mptr___3;
#line 439
  goto ldv_52520;
  ldv_52519: 
#line 443
  err2 = (*(peer_req->w.cb))(& peer_req->w, err != 0);
#line 444
  if (err == 0) {
#line 445
    err = err2;
  } else {

  }
#line 446
  __drbd_free_peer_req(mdev, peer_req, 0);
#line 439
  peer_req = t;
#line 439
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 439
  t = (struct drbd_peer_request *)__mptr___4;
  ldv_52520: ;
#line 439
  if ((unsigned long )(& peer_req->w.list) != (unsigned long )(& work_list)) {
#line 440
    goto ldv_52519;
  } else {

  }
#line 448
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 450
  return (err);
}
}
#line 453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 456
  tmp = get_current();
#line 456
  wait.flags = 0U;
#line 456
  wait.private = (void *)tmp;
#line 456
  wait.func = & autoremove_wake_function;
#line 456
  wait.task_list.next = & wait.task_list;
#line 456
  wait.task_list.prev = & wait.task_list;
#line 460
  goto ldv_52528;
  ldv_52527: 
#line 461
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 462
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 463
  io_schedule();
#line 464
  finish_wait(& mdev->ee_wait, & wait);
#line 465
  spin_lock_irq(& (mdev->tconn)->req_lock);
  ldv_52528: 
#line 460
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 460
  if (tmp___0 == 0) {
#line 461
    goto ldv_52527;
  } else {

  }

#line 465
  return;
}
}
#line 469 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 472
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 473
  _drbd_wait_ee_list_empty(mdev, head);
#line 474
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 475
  return;
}
}
#line 477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct socket *sock , void *buf , size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 480
  iov.iov_base = buf;
#line 480
  iov.iov_len = size;
#line 484
  msg.msg_name = 0;
#line 484
  msg.msg_namelen = 0;
#line 484
  msg.msg_iov = (struct iovec *)(& iov);
#line 484
  msg.msg_iovlen = 1UL;
#line 484
  msg.msg_control = 0;
#line 484
  msg.msg_controllen = 0UL;
#line 484
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 491
  tmp = current_thread_info();
#line 491
  oldfs = tmp->addr_limit;
#line 492
  tmp___0 = current_thread_info();
#line 492
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 492
  tmp___0->addr_limit = __constr_expr_0;
#line 493
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 494
  tmp___1 = current_thread_info();
#line 494
  tmp___1->addr_limit = oldfs;
#line 496
  return (rv);
}
}
#line 499 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_tconn *tconn , void *buf , size_t size ) 
{ 
  int rv ;
  long t ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 503
  rv = drbd_recv_short(tconn->data.socket, buf, size, 0);
#line 505
  if (rv < 0) {
#line 506
    if (rv == -104) {
#line 507
      printk("\016d-con %s: sock was reset by peer\n", tconn->name);
    } else
#line 508
    if (rv != -512) {
#line 509
      printk("\vd-con %s: sock_recvmsg returned %d\n", tconn->name, rv);
    } else
#line 510
    if (rv == 0) {
#line 511
      tmp___2 = constant_test_bit(12U, (unsigned long const volatile   *)(& tconn->flags));
#line 511
      if (tmp___2 != 0) {
#line 513
        rcu_read_lock();
#line 514
        _________p1 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 514
        tmp = debug_lockdep_rcu_enabled();
#line 514
        if (tmp != 0 && ! __warned) {
#line 514
          tmp___0 = rcu_read_lock_held();
#line 514
          if (tmp___0 == 0 && 1) {
#line 514
            __warned = 1;
#line 514
            lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                                   514, "suspicious rcu_dereference_check() usage");
          } else {

          }
        } else {

        }
#line 514
        t = (long )((_________p1->ping_timeo * 250U) / 10U);
#line 515
        rcu_read_unlock();
#line 517
        __ret = t;
#line 517
        if ((unsigned int )tconn->cstate > 8U) {
#line 517
          tmp___1 = get_current();
#line 517
          __wait.flags = 0U;
#line 517
          __wait.private = (void *)tmp___1;
#line 517
          __wait.func = & autoremove_wake_function;
#line 517
          __wait.task_list.next = & __wait.task_list;
#line 517
          __wait.task_list.prev = & __wait.task_list;
          ldv_52558: 
#line 517
          prepare_to_wait(& tconn->ping_wait, & __wait, 2);
#line 517
          if ((unsigned int )tconn->cstate <= 8U) {
#line 517
            goto ldv_52557;
          } else {

          }
#line 517
          __ret = schedule_timeout(__ret);
#line 517
          if (__ret == 0L) {
#line 517
            goto ldv_52557;
          } else {

          }
#line 517
          goto ldv_52558;
          ldv_52557: 
#line 517
          finish_wait(& tconn->ping_wait, & __wait);
        } else {

        }
#line 517
        t = __ret;
#line 519
        if (t != 0L) {
#line 520
          goto out;
        } else {

        }
      } else {

      }
#line 522
      printk("\016d-con %s: sock was shut down by peer\n", tconn->name);
    } else {

    }
  } else {

  }
#line 525
  if ((size_t )rv != size) {
#line 526
    val.i = 0U;
#line 526
    val.ldv_40604.conn = 4U;
#line 526
    mask.i = 0U;
#line 526
    mask.ldv_40604.conn = 31U;
#line 526
    conn_request_state(tconn, mask, val, CS_HARD);
  } else {

  }
  out: ;
#line 529
  return (rv);
}
}
#line 532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_all(struct drbd_tconn *tconn , void *buf , size_t size ) 
{ 
  int err ;

  {
#line 536
  err = drbd_recv(tconn, buf, size);
#line 537
  if ((size_t )err != size) {
#line 538
    if (err >= 0) {
#line 539
      err = -5;
    } else {
#line 541
      err = 0;
    }
  } else {

  }
#line 542
  return (err);
}
}
#line 545 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_all_warn(struct drbd_tconn *tconn , void *buf , size_t size ) 
{ 
  int err ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 549
  err = drbd_recv_all(tconn, buf, size);
#line 550
  if (err != 0) {
#line 550
    tmp = get_current();
#line 550
    tmp___0 = signal_pending(tmp);
#line 550
    if (tmp___0 == 0) {
#line 551
      printk("\fd-con %s: short read (expected size %d)\n", tconn->name, (int )size);
    } else {

    }
  } else {

  }
#line 552
  return (err);
}
}
#line 560 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 564
  if (snd != 0U) {
#line 565
    (sock->sk)->sk_sndbuf = (int )snd;
#line 566
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 568
  if (rcv != 0U) {
#line 569
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 570
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 572
  return;
}
}
#line 574 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_tconn *tconn ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  struct sockaddr_in6 peer_in6 ;
  struct net_conf *nc ;
  int err ;
  int peer_addr_len ;
  int my_addr_len ;
  int sndbuf_size ;
  int rcvbuf_size ;
  int connect_int ;
  int disconnect_on_error ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int __min1 ;
  int __min2 ;
  size_t __len ;
  void *__ret ;
  int __min1___0 ;
  int __min2___0 ;
  size_t __len___0 ;
  void *__ret___0 ;
  long tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 583
  disconnect_on_error = 1;
#line 585
  rcu_read_lock();
#line 586
  _________p1 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 586
  tmp = debug_lockdep_rcu_enabled();
#line 586
  if (tmp != 0 && ! __warned) {
#line 586
    tmp___0 = rcu_read_lock_held();
#line 586
    if (tmp___0 == 0 && 1) {
#line 586
      __warned = 1;
#line 586
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             586, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 586
  nc = _________p1;
#line 587
  if ((unsigned long )nc == (unsigned long )((struct net_conf *)0)) {
#line 588
    rcu_read_unlock();
#line 589
    return (0);
  } else {

  }
#line 591
  sndbuf_size = (int )nc->sndbuf_size;
#line 592
  rcvbuf_size = (int )nc->rcvbuf_size;
#line 593
  connect_int = (int )nc->connect_int;
#line 594
  rcu_read_unlock();
#line 596
  __min1 = tconn->my_addr_len;
#line 596
  __min2 = 28;
#line 596
  my_addr_len = __min1 < __min2 ? __min1 : __min2;
#line 597
  __len = (size_t )my_addr_len;
#line 597
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& tconn->my_addr),
                           __len);
#line 599
  if ((unsigned int )((struct sockaddr *)(& tconn->my_addr))->sa_family == 10U) {
#line 600
    src_in6.sin6_port = 0U;
  } else {
#line 602
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 604
  __min1___0 = tconn->peer_addr_len;
#line 604
  __min2___0 = 28;
#line 604
  peer_addr_len = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 605
  __len___0 = (size_t )peer_addr_len;
#line 605
  __ret___0 = __builtin_memcpy((void *)(& peer_in6), (void const   *)(& tconn->peer_addr),
                               __len___0);
#line 607
  what = "sock_create_kern";
#line 608
  err = sock_create_kern((int )((struct sockaddr *)(& src_in6))->sa_family, 1, 6,
                         & sock);
#line 610
  if (err < 0) {
#line 611
    sock = 0;
#line 612
    goto out;
  } else {

  }
#line 615
  tmp___1 = (long )(connect_int * 250);
#line 615
  (sock->sk)->sk_sndtimeo = tmp___1;
#line 615
  (sock->sk)->sk_rcvtimeo = tmp___1;
#line 617
  drbd_setbufsize(sock, (unsigned int )sndbuf_size, (unsigned int )rcvbuf_size);
#line 626
  what = "bind before connect";
#line 627
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), my_addr_len);
#line 628
  if (err < 0) {
#line 629
    goto out;
  } else {

  }
#line 633
  disconnect_on_error = 0;
#line 634
  what = "connect";
#line 635
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& peer_in6), peer_addr_len,
                                  0);
  out: ;
#line 638
  if (err < 0) {
#line 639
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 640
      sock_release(sock);
#line 641
      sock = 0;
    } else {

    }
#line 643
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 650
    disconnect_on_error = 0;
#line 651
    goto ldv_52622;
    default: 
#line 653
    printk("\vd-con %s: %s failed, err = %d\n", tconn->name, what, err);
    }
    ldv_52622: ;
#line 655
    if (disconnect_on_error != 0) {
#line 656
      val.i = 0U;
#line 656
      val.ldv_40604.conn = 1U;
#line 656
      mask.i = 0U;
#line 656
      mask.ldv_40604.conn = 31U;
#line 656
      conn_request_state(tconn, mask, val, CS_HARD);
    } else {

    }
  } else {

  }
#line 659
  return (sock);
}
}
#line 670 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_incoming_connection(struct sock *sk ) 
{ 
  struct accept_wait_data *ad ;
  void (*state_change)(struct sock * ) ;

  {
#line 672
  ad = (struct accept_wait_data *)sk->sk_user_data;
#line 675
  state_change = ad->original_sk_state_change;
#line 676
  if ((unsigned int )((unsigned char )sk->__sk_common.skc_state) == 1U) {
#line 677
    complete(& ad->door_bell);
  } else {

  }
#line 678
  (*state_change)(sk);
#line 679
  return;
}
}
#line 681 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int prepare_listen_socket(struct drbd_tconn *tconn , struct accept_wait_data *ad ) 
{ 
  int err ;
  int sndbuf_size ;
  int rcvbuf_size ;
  int my_addr_len ;
  struct sockaddr_in6 my_addr ;
  struct socket *s_listen ;
  struct net_conf *nc ;
  char const   *what ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int __min1 ;
  int __min2 ;
  size_t __len ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 689
  rcu_read_lock();
#line 690
  _________p1 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 690
  tmp = debug_lockdep_rcu_enabled();
#line 690
  if (tmp != 0 && ! __warned) {
#line 690
    tmp___0 = rcu_read_lock_held();
#line 690
    if (tmp___0 == 0 && 1) {
#line 690
      __warned = 1;
#line 690
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             690, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 690
  nc = _________p1;
#line 691
  if ((unsigned long )nc == (unsigned long )((struct net_conf *)0)) {
#line 692
    rcu_read_unlock();
#line 693
    return (-5);
  } else {

  }
#line 695
  sndbuf_size = (int )nc->sndbuf_size;
#line 696
  rcvbuf_size = (int )nc->rcvbuf_size;
#line 697
  rcu_read_unlock();
#line 699
  __min1 = tconn->my_addr_len;
#line 699
  __min2 = 28;
#line 699
  my_addr_len = __min1 < __min2 ? __min1 : __min2;
#line 700
  __len = (size_t )my_addr_len;
#line 700
  __ret = __builtin_memcpy((void *)(& my_addr), (void const   *)(& tconn->my_addr),
                           __len);
#line 702
  what = "sock_create_kern";
#line 703
  err = sock_create_kern((int )((struct sockaddr *)(& my_addr))->sa_family, 1, 6,
                         & s_listen);
#line 705
  if (err != 0) {
#line 706
    s_listen = 0;
#line 707
    goto out;
  } else {

  }
#line 710
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 711
  drbd_setbufsize(s_listen, (unsigned int )sndbuf_size, (unsigned int )rcvbuf_size);
#line 713
  what = "bind before listen";
#line 714
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& my_addr), my_addr_len);
#line 715
  if (err < 0) {
#line 716
    goto out;
  } else {

  }
#line 718
  ad->s_listen = s_listen;
#line 719
  _raw_write_lock_bh(& (s_listen->sk)->sk_callback_lock);
#line 720
  ad->original_sk_state_change = (s_listen->sk)->sk_state_change;
#line 721
  (s_listen->sk)->sk_state_change = & drbd_incoming_connection;
#line 722
  (s_listen->sk)->sk_user_data = (void *)ad;
#line 723
  _raw_write_unlock_bh(& (s_listen->sk)->sk_callback_lock);
#line 725
  what = "listen";
#line 726
  err = (*((s_listen->ops)->listen))(s_listen, 5);
#line 727
  if (err < 0) {
#line 728
    goto out;
  } else {

  }
#line 730
  return (0);
  out: ;
#line 732
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 733
    sock_release(s_listen);
  } else {

  }
#line 734
  if (err < 0) {
#line 735
    if ((err != -11 && err != -4) && err != -512) {
#line 736
      printk("\vd-con %s: %s failed, err = %d\n", tconn->name, what, err);
#line 737
      val.i = 0U;
#line 737
      val.ldv_40604.conn = 1U;
#line 737
      mask.i = 0U;
#line 737
      mask.ldv_40604.conn = 31U;
#line 737
      conn_request_state(tconn, mask, val, CS_HARD);
    } else {

    }
  } else {

  }
#line 741
  return (-5);
}
}
#line 744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void unregister_state_change(struct sock *sk , struct accept_wait_data *ad ) 
{ 


  {
#line 746
  _raw_write_lock_bh(& sk->sk_callback_lock);
#line 747
  sk->sk_state_change = ad->original_sk_state_change;
#line 748
  sk->sk_user_data = 0;
#line 749
  _raw_write_unlock_bh(& sk->sk_callback_lock);
#line 750
  return;
}
}
#line 752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_tconn *tconn , struct accept_wait_data *ad ) 
{ 
  int timeo ;
  int connect_int ;
  int err ;
  struct socket *s_estab ;
  struct net_conf *nc ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  u32 tmp___1 ;
  long tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 754
  err = 0;
#line 755
  s_estab = 0;
#line 758
  rcu_read_lock();
#line 759
  _________p1 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 759
  tmp = debug_lockdep_rcu_enabled();
#line 759
  if (tmp != 0 && ! __warned) {
#line 759
    tmp___0 = rcu_read_lock_held();
#line 759
    if (tmp___0 == 0 && 1) {
#line 759
      __warned = 1;
#line 759
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             759, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 759
  nc = _________p1;
#line 760
  if ((unsigned long )nc == (unsigned long )((struct net_conf *)0)) {
#line 761
    rcu_read_unlock();
#line 762
    return (0);
  } else {

  }
#line 764
  connect_int = (int )nc->connect_int;
#line 765
  rcu_read_unlock();
#line 767
  timeo = connect_int * 250;
#line 768
  tmp___1 = random32();
#line 768
  timeo = ((int )tmp___1 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 770
  tmp___2 = wait_for_completion_interruptible_timeout(& ad->door_bell, (unsigned long )timeo);
#line 770
  err = (int )tmp___2;
#line 771
  if (err <= 0) {
#line 772
    return (0);
  } else {

  }
#line 774
  err = kernel_accept(ad->s_listen, & s_estab, 0);
#line 775
  if (err < 0) {
#line 776
    if ((err != -11 && err != -4) && err != -512) {
#line 777
      printk("\vd-con %s: accept failed, err = %d\n", tconn->name, err);
#line 778
      val.i = 0U;
#line 778
      val.ldv_40604.conn = 1U;
#line 778
      mask.i = 0U;
#line 778
      mask.ldv_40604.conn = 31U;
#line 778
      conn_request_state(tconn, mask, val, CS_HARD);
    } else {

    }
  } else {

  }
#line 782
  if ((unsigned long )s_estab != (unsigned long )((struct socket *)0)) {
#line 783
    unregister_state_change(s_estab->sk, ad);
  } else {

  }
#line 785
  return (s_estab);
}
}
#line 788
static int decode_header(struct drbd_tconn *tconn , void *header , struct packet_info *pi ) ;
#line 790 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int send_first_packet(struct drbd_tconn *tconn , struct drbd_socket *sock ,
                             enum drbd_packet cmd ) 
{ 
  void *tmp ;
  int tmp___0 ;

  {
#line 793
  tmp = conn_prepare_command(tconn, sock);
#line 793
  if ((unsigned long )tmp == (unsigned long )((void *)0)) {
#line 794
    return (-5);
  } else {

  }
#line 795
  tmp___0 = conn_send_command(tconn, sock, cmd, 0U, 0, 0U);
#line 795
  return (tmp___0);
}
}
#line 798 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_first_packet(struct drbd_tconn *tconn , struct socket *sock ) 
{ 
  unsigned int header_size ;
  unsigned int tmp ;
  struct packet_info pi ;
  int err ;

  {
#line 800
  tmp = drbd_header_size(tconn);
#line 800
  header_size = tmp;
#line 804
  err = drbd_recv_short(sock, tconn->data.rbuf, (size_t )header_size, 0);
#line 805
  if ((unsigned int )err != header_size) {
#line 806
    if (err >= 0) {
#line 807
      err = -5;
    } else {

    }
#line 808
    return (err);
  } else {

  }
#line 810
  err = decode_header(tconn, tconn->data.rbuf, & pi);
#line 811
  if (err != 0) {
#line 812
    return (err);
  } else {

  }
#line 813
  return ((int )pi.cmd);
}
}
#line 820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 825
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 826
    return (0);
  } else {

  }
#line 828
  rr = drbd_recv_short(*sock, (void *)(& tb), 4UL, 66);
#line 830
  if (rr > 0 || rr == -11) {
#line 831
    return (1);
  } else {
#line 833
    sock_release(*sock);
#line 834
    *sock = 0;
#line 835
    return (0);
  }
}
}
#line 840 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_connected(struct drbd_conf *mdev ) 
{ 
  int err ;

  {
#line 844
  atomic_set(& mdev->packet_seq, 0);
#line 845
  mdev->peer_seq = 0U;
#line 847
  mdev->state_mutex = (mdev->tconn)->agreed_pro_version <= 99 ? & (mdev->tconn)->cstate_mutex : & mdev->own_state_mutex;
#line 851
  err = drbd_send_sync_param(mdev);
#line 852
  if (err == 0) {
#line 853
    err = drbd_send_sizes(mdev, 0, 0);
  } else {

  }
#line 854
  if (err == 0) {
#line 855
    err = drbd_send_uuids(mdev);
  } else {

  }
#line 856
  if (err == 0) {
#line 857
    err = drbd_send_current_state(mdev);
  } else {

  }
#line 858
  clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 859
  clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 860
  mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
#line 861
  return (err);
}
}
#line 872 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int conn_connect(struct drbd_tconn *tconn ) 
{ 
  struct drbd_socket sock ;
  struct drbd_socket msock ;
  struct drbd_conf *mdev ;
  struct net_conf *nc ;
  int vnr ;
  int timeout ;
  int h ;
  int ok ;
  bool discard_my_data ;
  enum drbd_state_rv rv ;
  struct accept_wait_data ad ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  int tmp___0 ;
  struct socket *s ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int fp ;
  int tmp___4 ;
  u32 tmp___5 ;
  struct task_struct *tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  struct net_conf *_________p1___0 ;
  bool __warned___0 ;
  int tmp___11 ;
  int tmp___12 ;
  long tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  void *tmp___16 ;
  void *tmp___17 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 882
  init_completion(& ad.door_bell);
#line 882
  ad.tconn = tconn;
#line 882
  ad.s_listen = 0;
#line 882
  ad.door_bell = ad.door_bell;
#line 882
  ad.original_sk_state_change = 0;
#line 885
  clear_bit(12, (unsigned long volatile   *)(& tconn->flags));
#line 886
  val.i = 0U;
#line 886
  val.ldv_40604.conn = 8U;
#line 886
  mask.i = 0U;
#line 886
  mask.ldv_40604.conn = 31U;
#line 886
  tmp = conn_request_state(tconn, mask, val, CS_VERBOSE);
#line 886
  if ((int )tmp <= 0) {
#line 887
    return (-2);
  } else {

  }
#line 889
  __mutex_init(& sock.mutex, "&sock.mutex", & __key);
#line 890
  sock.sbuf = tconn->data.sbuf;
#line 891
  sock.rbuf = tconn->data.rbuf;
#line 892
  sock.socket = 0;
#line 893
  __mutex_init(& msock.mutex, "&msock.mutex", & __key___0);
#line 894
  msock.sbuf = tconn->meta.sbuf;
#line 895
  msock.rbuf = tconn->meta.rbuf;
#line 896
  msock.socket = 0;
#line 899
  tconn->agreed_pro_version = 80;
#line 901
  tmp___0 = prepare_listen_socket(tconn, & ad);
#line 901
  if (tmp___0 != 0) {
#line 902
    return (0);
  } else {

  }
  ldv_52745: 
#line 907
  s = drbd_try_connect(tconn);
#line 908
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 909
    if ((unsigned long )sock.socket == (unsigned long )((struct socket *)0)) {
#line 910
      sock.socket = s;
#line 911
      send_first_packet(tconn, & sock, P_INITIAL_DATA);
    } else
#line 912
    if ((unsigned long )msock.socket == (unsigned long )((struct socket *)0)) {
#line 913
      clear_bit(1, (unsigned long volatile   *)(& tconn->flags));
#line 914
      msock.socket = s;
#line 915
      send_first_packet(tconn, & msock, P_INITIAL_META);
    } else {
#line 917
      printk("\vd-con %s: Logic error in conn_connect()\n", tconn->name);
#line 918
      goto out_release_sockets;
    }
  } else {

  }
#line 922
  if ((unsigned long )sock.socket != (unsigned long )((struct socket *)0) && (unsigned long )msock.socket != (unsigned long )((struct socket *)0)) {
#line 923
    rcu_read_lock();
#line 924
    _________p1 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 924
    tmp___1 = debug_lockdep_rcu_enabled();
#line 924
    if (tmp___1 != 0 && ! __warned) {
#line 924
      tmp___2 = rcu_read_lock_held();
#line 924
      if (tmp___2 == 0 && 1) {
#line 924
        __warned = 1;
#line 924
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                               924, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 924
    nc = _________p1;
#line 925
    timeout = (int )((nc->ping_timeo * 250U) / 10U);
#line 926
    rcu_read_unlock();
#line 927
    schedule_timeout_interruptible((long )timeout);
#line 928
    ok = drbd_socket_okay(& sock.socket);
#line 929
    tmp___3 = drbd_socket_okay(& msock.socket);
#line 929
    ok = tmp___3 != 0 && ok != 0;
#line 930
    if (ok != 0) {
#line 931
      goto ldv_52737;
    } else {

    }
  } else {

  }
  retry: 
#line 935
  s = drbd_wait_for_connect(tconn, & ad);
#line 936
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 937
    tmp___4 = receive_first_packet(tconn, s);
#line 937
    fp = tmp___4;
#line 938
    drbd_socket_okay(& sock.socket);
#line 939
    drbd_socket_okay(& msock.socket);
#line 940
    switch (fp) {
    case 65522: ;
#line 942
    if ((unsigned long )sock.socket != (unsigned long )((struct socket *)0)) {
#line 943
      printk("\fd-con %s: initial packet S crossed\n", tconn->name);
#line 944
      sock_release(sock.socket);
#line 945
      sock.socket = s;
#line 946
      goto randomize;
    } else {

    }
#line 948
    sock.socket = s;
#line 949
    goto ldv_52742;
    case 65521: 
#line 951
    set_bit(1U, (unsigned long volatile   *)(& tconn->flags));
#line 952
    if ((unsigned long )msock.socket != (unsigned long )((struct socket *)0)) {
#line 953
      printk("\fd-con %s: initial packet M crossed\n", tconn->name);
#line 954
      sock_release(msock.socket);
#line 955
      msock.socket = s;
#line 956
      goto randomize;
    } else {

    }
#line 958
    msock.socket = s;
#line 959
    goto ldv_52742;
    default: 
#line 961
    printk("\fd-con %s: Error receiving initial packet\n", tconn->name);
#line 962
    sock_release(s);
    randomize: 
#line 964
    tmp___5 = random32();
#line 964
    if ((int )tmp___5 & 1) {
#line 965
      goto retry;
    } else {

    }
    }
    ldv_52742: ;
  } else {

  }
#line 969
  if ((unsigned int )tconn->cstate <= 1U) {
#line 970
    goto out_release_sockets;
  } else {

  }
#line 971
  tmp___8 = get_current();
#line 971
  tmp___9 = signal_pending(tmp___8);
#line 971
  if (tmp___9 != 0) {
#line 972
    tmp___6 = get_current();
#line 972
    flush_signals(tmp___6);
#line 973
    __asm__  volatile   ("": : : "memory");
#line 974
    tmp___7 = get_t_state(& tconn->receiver);
#line 974
    if ((unsigned int )tmp___7 == 2U) {
#line 975
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 978
  ok = drbd_socket_okay(& sock.socket);
#line 979
  tmp___10 = drbd_socket_okay(& msock.socket);
#line 979
  ok = tmp___10 != 0 && ok != 0;
#line 980
  if (ok == 0) {
#line 981
    goto ldv_52745;
  } else {

  }
  ldv_52737: ;
#line 982
  if ((unsigned long )ad.s_listen != (unsigned long )((struct socket *)0)) {
#line 983
    sock_release(ad.s_listen);
  } else {

  }
#line 985
  ((sock.socket)->sk)->__sk_common.skc_reuse = 1U;
#line 986
  ((msock.socket)->sk)->__sk_common.skc_reuse = 1U;
#line 988
  ((sock.socket)->sk)->sk_allocation = 16U;
#line 989
  ((msock.socket)->sk)->sk_allocation = 16U;
#line 991
  ((sock.socket)->sk)->sk_priority = 4U;
#line 992
  ((msock.socket)->sk)->sk_priority = 6U;
#line 999
  rcu_read_lock();
#line 1000
  _________p1___0 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 1000
  tmp___11 = debug_lockdep_rcu_enabled();
#line 1000
  if (tmp___11 != 0 && ! __warned___0) {
#line 1000
    tmp___12 = rcu_read_lock_held();
#line 1000
    if (tmp___12 == 0 && 1) {
#line 1000
      __warned___0 = 1;
#line 1000
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             1000, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1000
  nc = _________p1___0;
#line 1002
  tmp___13 = (long )((nc->ping_timeo * 1000U) / 10U);
#line 1002
  ((sock.socket)->sk)->sk_rcvtimeo = tmp___13;
#line 1002
  ((sock.socket)->sk)->sk_sndtimeo = tmp___13;
#line 1005
  ((msock.socket)->sk)->sk_rcvtimeo = (long )(nc->ping_int * 250U);
#line 1006
  timeout = (int )((nc->timeout * 250U) / 10U);
#line 1007
  discard_my_data = (int )((signed char )nc->discard_my_data) != 0;
#line 1008
  rcu_read_unlock();
#line 1010
  ((msock.socket)->sk)->sk_sndtimeo = (long )timeout;
#line 1014
  drbd_tcp_nodelay(sock.socket);
#line 1015
  drbd_tcp_nodelay(msock.socket);
#line 1017
  tconn->data.socket = sock.socket;
#line 1018
  tconn->meta.socket = msock.socket;
#line 1019
  tconn->last_received = jiffies;
#line 1021
  h = drbd_do_features(tconn);
#line 1022
  if (h <= 0) {
#line 1023
    return (h);
  } else {

  }
#line 1025
  if ((unsigned long )tconn->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1027
    tmp___14 = drbd_do_auth(tconn);
#line 1027
    switch (tmp___14) {
    case -1: 
#line 1029
    printk("\vd-con %s: Authentication of peer failed\n", tconn->name);
#line 1030
    return (-1);
    case 0: 
#line 1032
    printk("\vd-con %s: Authentication of peer failed, trying again.\n", tconn->name);
#line 1033
    return (0);
    }
  } else {

  }
#line 1037
  ((tconn->data.socket)->sk)->sk_sndtimeo = (long )timeout;
#line 1038
  ((tconn->data.socket)->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 1040
  tmp___15 = drbd_send_protocol(tconn);
#line 1040
  if (tmp___15 == -95) {
#line 1041
    return (-1);
  } else {

  }
#line 1043
  set_bit(10U, (unsigned long volatile   *)(& tconn->flags));
#line 1045
  rcu_read_lock();
#line 1046
  vnr = 0;
#line 1046
  tmp___16 = idr_get_next(& tconn->volumes, & vnr);
#line 1046
  mdev = (struct drbd_conf *)tmp___16;
#line 1046
  goto ldv_52752;
  ldv_52751: 
#line 1047
  kref_get(& mdev->kref);
#line 1048
  rcu_read_unlock();
#line 1050
  if ((int )discard_my_data) {
#line 1051
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1053
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1055
  drbd_connected(mdev);
#line 1056
  kref_put(& mdev->kref, & drbd_minor_destroy);
#line 1057
  rcu_read_lock();
#line 1046
  vnr = vnr + 1;
#line 1046
  tmp___17 = idr_get_next(& tconn->volumes, & vnr);
#line 1046
  mdev = (struct drbd_conf *)tmp___17;
  ldv_52752: ;
#line 1046
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 1047
    goto ldv_52751;
  } else {

  }
#line 1059
  rcu_read_unlock();
#line 1061
  val___0.i = 0U;
#line 1061
  val___0.ldv_40604.conn = 9U;
#line 1061
  mask___0.i = 0U;
#line 1061
  mask___0.ldv_40604.conn = 31U;
#line 1061
  rv = conn_request_state(tconn, mask___0, val___0, CS_VERBOSE);
#line 1062
  if ((int )rv <= 0) {
#line 1063
    clear_bit(10, (unsigned long volatile   *)(& tconn->flags));
#line 1064
    return (0);
  } else {

  }
#line 1067
  drbd_thread_start(& tconn->asender);
#line 1069
  mutex_lock_nested(& tconn->conf_update, 0U);
#line 1074
  (tconn->net_conf)->discard_my_data = 0;
#line 1075
  mutex_unlock(& tconn->conf_update);
#line 1077
  return (h);
  out_release_sockets: ;
#line 1080
  if ((unsigned long )ad.s_listen != (unsigned long )((struct socket *)0)) {
#line 1081
    sock_release(ad.s_listen);
  } else {

  }
#line 1082
  if ((unsigned long )sock.socket != (unsigned long )((struct socket *)0)) {
#line 1083
    sock_release(sock.socket);
  } else {

  }
#line 1084
  if ((unsigned long )msock.socket != (unsigned long )((struct socket *)0)) {
#line 1085
    sock_release(msock.socket);
  } else {

  }
#line 1086
  return (-1);
}
}
#line 1089 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int decode_header(struct drbd_tconn *tconn , void *header , struct packet_info *pi ) 
{ 
  unsigned int header_size ;
  unsigned int tmp ;
  struct p_header100 *h ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  struct p_header95 *h___0 ;
  __u16 tmp___3 ;
  __u32 tmp___4 ;
  struct p_header80 *h___1 ;
  __u16 tmp___5 ;
  __u16 tmp___6 ;
  __u32 tmp___7 ;

  {
#line 1091
  tmp = drbd_header_size(tconn);
#line 1091
  header_size = tmp;
#line 1093
  if (header_size == 16U && *((__be32 *)header) == 552345734U) {
#line 1095
    h = (struct p_header100 *)header;
#line 1096
    if (h->pad != 0U) {
#line 1097
      printk("\vd-con %s: Header padding is not zero\n", tconn->name);
#line 1098
      return (-22);
    } else {

    }
#line 1100
    tmp___0 = __fswab16((int )h->volume);
#line 1100
    pi->vnr = (unsigned int )tmp___0;
#line 1101
    tmp___1 = __fswab16((int )h->command);
#line 1101
    pi->cmd = (enum drbd_packet )tmp___1;
#line 1102
    tmp___2 = __fswab32(h->length);
#line 1102
    pi->size = tmp___2;
  } else
#line 1103
  if (header_size == 8U && (unsigned int )*((__be16 *)header) == 23171U) {
#line 1105
    h___0 = (struct p_header95 *)header;
#line 1106
    tmp___3 = __fswab16((int )h___0->command);
#line 1106
    pi->cmd = (enum drbd_packet )tmp___3;
#line 1107
    tmp___4 = __fswab32(h___0->length);
#line 1107
    pi->size = tmp___4;
#line 1108
    pi->vnr = 0U;
  } else
#line 1109
  if (header_size == 8U && *((__be32 *)header) == 1728214147U) {
#line 1111
    h___1 = (struct p_header80 *)header;
#line 1112
    tmp___5 = __fswab16((int )h___1->command);
#line 1112
    pi->cmd = (enum drbd_packet )tmp___5;
#line 1113
    tmp___6 = __fswab16((int )h___1->length);
#line 1113
    pi->size = (unsigned int )tmp___6;
#line 1114
    pi->vnr = 0U;
  } else {
#line 1116
    tmp___7 = __fswab32(*((__be32 *)header));
#line 1116
    printk("\vd-con %s: Wrong magic value 0x%08x in protocol version %d\n", tconn->name,
           tmp___7, tconn->agreed_pro_version);
#line 1119
    return (-22);
  }
#line 1121
  pi->data = header + (unsigned long )header_size;
#line 1122
  return (0);
}
}
#line 1125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  void *buffer ;
  int err ;
  unsigned int tmp ;

  {
#line 1127
  buffer = tconn->data.rbuf;
#line 1130
  tmp = drbd_header_size(tconn);
#line 1130
  err = drbd_recv_all_warn(tconn, buffer, (size_t )tmp);
#line 1131
  if (err != 0) {
#line 1132
    return (err);
  } else {

  }
#line 1134
  err = decode_header(tconn, buffer, pi);
#line 1135
  tconn->last_received = jiffies;
#line 1137
  return (err);
}
}
#line 1140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_flush(struct drbd_tconn *tconn ) 
{ 
  int rv ;
  struct drbd_conf *mdev ;
  int vnr ;
  void *tmp ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 1146
  if ((unsigned int )tconn->write_ordering > 1U) {
#line 1147
    rcu_read_lock();
#line 1148
    vnr = 0;
#line 1148
    tmp = idr_get_next(& tconn->volumes, & vnr);
#line 1148
    mdev = (struct drbd_conf *)tmp;
#line 1148
    goto ldv_52782;
    ldv_52781: 
#line 1149
    tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1149
    if (tmp___0 == 0) {
#line 1150
      goto ldv_52779;
    } else {

    }
#line 1151
    kref_get(& mdev->kref);
#line 1152
    rcu_read_unlock();
#line 1154
    rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 16U, 0);
#line 1156
    if (rv != 0) {
#line 1157
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                rv);
#line 1161
      drbd_bump_write_ordering(tconn, WO_drain_io);
    } else {

    }
#line 1163
    put_ldev(mdev);
#line 1164
    kref_put(& mdev->kref, & drbd_minor_destroy);
#line 1166
    rcu_read_lock();
#line 1167
    if (rv != 0) {
#line 1168
      goto ldv_52780;
    } else {

    }
    ldv_52779: 
#line 1148
    vnr = vnr + 1;
#line 1148
    tmp___1 = idr_get_next(& tconn->volumes, & vnr);
#line 1148
    mdev = (struct drbd_conf *)tmp___1;
    ldv_52782: ;
#line 1148
    if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 1149
      goto ldv_52781;
    } else {

    }
    ldv_52780: 
#line 1170
    rcu_read_unlock();
  } else {

  }
#line 1172
  return;
}
}
#line 1180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_tconn *tconn , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  enum finish_epoch rv ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;

  {
#line 1186
  rv = FE_STILL_LIVE;
#line 1188
  spin_lock(& tconn->epoch_lock);
  ldv_52798: 
#line 1190
  next_epoch = 0;
#line 1192
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1194
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1196
  atomic_dec(& epoch->active);
#line 1197
  goto ldv_52792;
  case 1U: 
#line 1199
  set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1200
  goto ldv_52792;
  case 2U: ;
#line 1203
  goto ldv_52792;
  }
  ldv_52792: ;
#line 1206
  if (epoch_size != 0) {
#line 1206
    tmp = atomic_read((atomic_t const   *)(& epoch->active));
#line 1206
    if (tmp == 0) {
#line 1206
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1206
      if (tmp___0 != 0 || ((unsigned int )ev & 32U) != 0U) {
#line 1209
        if (((unsigned int )ev & 32U) == 0U) {
#line 1210
          spin_unlock(& tconn->epoch_lock);
#line 1211
          drbd_send_b_ack(epoch->tconn, epoch->barrier_nr, (u32 )epoch_size);
#line 1212
          spin_lock(& tconn->epoch_lock);
        } else {

        }
#line 1221
        if ((unsigned long )tconn->current_epoch != (unsigned long )epoch) {
#line 1222
          __mptr = (struct list_head  const  *)epoch->list.next;
#line 1222
          next_epoch = (struct drbd_epoch *)__mptr + 0xfffffffffffffff8UL;
#line 1223
          list_del(& epoch->list);
#line 1224
          ev = (enum epoch_event )(((unsigned int )ev & 32U) | 2U);
#line 1225
          tconn->epochs = tconn->epochs - 1U;
#line 1226
          kfree((void const   *)epoch);
#line 1228
          if ((unsigned int )rv == 0U) {
#line 1229
            rv = FE_DESTROYED;
          } else {

          }
        } else {
#line 1231
          epoch->flags = 0UL;
#line 1232
          atomic_set(& epoch->epoch_size, 0);
#line 1234
          if ((unsigned int )rv == 0U) {
#line 1235
            rv = FE_RECYCLED;
          } else {

          }
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1239
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1240
    goto ldv_52797;
  } else {

  }
#line 1242
  epoch = next_epoch;
#line 1243
  goto ldv_52798;
  ldv_52797: 
#line 1245
  spin_unlock(& tconn->epoch_lock);
#line 1247
  return (rv);
}
}
#line 1255 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_tconn *tconn , enum write_ordering_e wo ) 
{ 
  struct disk_conf *dc ;
  struct drbd_conf *mdev ;
  enum write_ordering_e pwo ;
  int vnr ;
  char *write_ordering_str[3U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;
  void *tmp ;
  int tmp___0 ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;

  {
#line 1261
  write_ordering_str[0] = (char *)"none";
#line 1261
  write_ordering_str[1] = (char *)"drain";
#line 1261
  write_ordering_str[2] = (char *)"flush";
#line 1267
  pwo = tconn->write_ordering;
#line 1268
  _min1 = pwo;
#line 1268
  _min2 = wo;
#line 1268
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1269
  rcu_read_lock();
#line 1270
  vnr = 0;
#line 1270
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 1270
  mdev = (struct drbd_conf *)tmp;
#line 1270
  goto ldv_52816;
  ldv_52815: 
#line 1271
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1271
  if (tmp___0 == 0) {
#line 1272
    goto ldv_52811;
  } else {

  }
#line 1273
  _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 1273
  tmp___1 = debug_lockdep_rcu_enabled();
#line 1273
  if (tmp___1 != 0 && ! __warned) {
#line 1273
    tmp___2 = rcu_read_lock_held();
#line 1273
    if (tmp___2 == 0 && 1) {
#line 1273
      __warned = 1;
#line 1273
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             1273, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1273
  dc = _________p1;
#line 1275
  if ((unsigned int )wo == 2U && (int )((signed char )dc->disk_flushes) == 0) {
#line 1276
    wo = WO_drain_io;
  } else {

  }
#line 1277
  if ((unsigned int )wo == 1U && (int )((signed char )dc->disk_drain) == 0) {
#line 1278
    wo = WO_none;
  } else {

  }
#line 1279
  put_ldev(mdev);
  ldv_52811: 
#line 1270
  vnr = vnr + 1;
#line 1270
  tmp___3 = idr_get_next(& tconn->volumes, & vnr);
#line 1270
  mdev = (struct drbd_conf *)tmp___3;
  ldv_52816: ;
#line 1270
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 1271
    goto ldv_52815;
  } else {

  }
#line 1281
  rcu_read_unlock();
#line 1282
  tconn->write_ordering = wo;
#line 1283
  if ((unsigned int )tconn->write_ordering != (unsigned int )pwo || (unsigned int )wo == 2U) {
#line 1284
    printk("\016d-con %s: Method to ensure write ordering: %s\n", tconn->name, write_ordering_str[(unsigned int )tconn->write_ordering]);
  } else {

  }
#line 1285
  return;
}
}
#line 1304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_peer_request(struct drbd_conf *mdev , struct drbd_peer_request *peer_req ,
                             unsigned int const   rw , int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  int err ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1308
  bios = 0;
#line 1310
  page = peer_req->pages;
#line 1311
  sector = peer_req->i.sector;
#line 1312
  ds = peer_req->i.size;
#line 1313
  n_bios = 0U;
#line 1314
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
#line 1315
  err = -12;
  next_bio: 
#line 1326
  bio = bio_alloc(16U, nr_pages);
#line 1327
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1328
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1329
    goto fail;
  } else {

  }
#line 1332
  bio->bi_sector = sector;
#line 1333
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1334
  bio->bi_rw = (unsigned long )rw;
#line 1335
  bio->bi_private = (void *)peer_req;
#line 1336
  bio->bi_end_io = & drbd_peer_request_endio;
#line 1338
  bio->bi_next = bios;
#line 1339
  bios = bio;
#line 1340
  n_bios = n_bios + 1U;
#line 1342
  goto ldv_52840;
  ldv_52839: 
#line 1343
  __min1 = ds;
#line 1343
  __min2 = 4096U;
#line 1343
  len = __min1 < __min2 ? __min1 : __min2;
#line 1344
  tmp = bio_add_page(bio, page, len, 0U);
#line 1344
  if (tmp == 0) {
#line 1348
    if ((unsigned int )bio->bi_vcnt == 0U) {
#line 1349
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio_add_page failed for len=%u, bi_vcnt=0 (bi_sector=%llu)\n",
              len, (unsigned long long )bio->bi_sector);
#line 1353
      err = -28;
#line 1354
      goto fail;
    } else {

    }
#line 1356
    goto next_bio;
  } else {

  }
#line 1358
  ds = ds - len;
#line 1359
  sector = (sector_t )(len >> 9) + sector;
#line 1360
  nr_pages = nr_pages - 1U;
#line 1342
  page = page_chain_next(page);
  ldv_52840: ;
#line 1342
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1342
    tmp___0 = page_chain_next(page);
#line 1342
    __builtin_prefetch((void const   *)tmp___0);
#line 1342
    if (1 != 0) {
#line 1343
      goto ldv_52839;
    } else {
#line 1345
      goto ldv_52841;
    }
  } else {

  }
  ldv_52841: ;
#line 1362
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1362
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1362);
  } else {

  }
#line 1363
  if (ds != 0U) {
#line 1363
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1363);
  } else {

  }
#line 1365
  atomic_set(& peer_req->pending_bios, (int )n_bios);
  ldv_52842: 
#line 1367
  bio = bios;
#line 1368
  bios = bios->bi_next;
#line 1369
  bio->bi_next = 0;
#line 1371
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1372
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1373
    goto ldv_52842;
  } else {

  }

#line 1373
  return (0);
  fail: ;
#line 1376
  goto ldv_52845;
  ldv_52844: 
#line 1377
  bio = bios;
#line 1378
  bios = bios->bi_next;
#line 1379
  bio_put(bio);
  ldv_52845: ;
#line 1376
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1377
    goto ldv_52844;
  } else {

  }

#line 1381
  return (err);
}
}
#line 1384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_remove_epoch_entry_interval(struct drbd_conf *mdev , struct drbd_peer_request *peer_req ) 
{ 
  struct drbd_interval *i ;

  {
#line 1387
  i = & peer_req->i;
#line 1389
  drbd_remove_interval(& mdev->write_requests, i);
#line 1390
  drbd_clear_interval(i);
#line 1393
  if ((unsigned int )*((unsigned char *)i + 48UL) != 0U) {
#line 1394
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 1395
  return;
}
}
#line 1397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void conn_wait_active_ee_empty(struct drbd_tconn *tconn ) 
{ 
  struct drbd_conf *mdev ;
  int vnr ;
  void *tmp ;
  void *tmp___0 ;

  {
#line 1402
  rcu_read_lock();
#line 1403
  vnr = 0;
#line 1403
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 1403
  mdev = (struct drbd_conf *)tmp;
#line 1403
  goto ldv_52858;
  ldv_52857: 
#line 1404
  kref_get(& mdev->kref);
#line 1405
  rcu_read_unlock();
#line 1406
  drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1407
  kref_put(& mdev->kref, & drbd_minor_destroy);
#line 1408
  rcu_read_lock();
#line 1403
  vnr = vnr + 1;
#line 1403
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 1403
  mdev = (struct drbd_conf *)tmp___0;
  ldv_52858: ;
#line 1403
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 1404
    goto ldv_52857;
  } else {

  }
#line 1410
  rcu_read_unlock();
#line 1411
  return;
}
}
#line 1413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  int rv ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  enum finish_epoch tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1416
  p = (struct p_barrier *)pi->data;
#line 1422
  (tconn->current_epoch)->barrier_nr = p->barrier;
#line 1423
  (tconn->current_epoch)->tconn = tconn;
#line 1424
  tmp = drbd_may_finish_epoch(tconn, tconn->current_epoch, EV_GOT_BARRIER_NR);
#line 1424
  rv = (int )tmp;
#line 1431
  switch ((unsigned int )tconn->write_ordering) {
  case 0U: ;
#line 1433
  if (rv == 2) {
#line 1434
    return (0);
  } else {

  }
#line 1438
  tmp___0 = kmalloc(48UL, 16U);
#line 1438
  epoch = (struct drbd_epoch *)tmp___0;
#line 1439
  if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1440
    goto ldv_52868;
  } else {
#line 1442
    printk("\fd-con %s: Allocation of an epoch failed, slowing down\n", tconn->name);
  }
  case 2U: ;
  case 1U: 
#line 1447
  conn_wait_active_ee_empty(tconn);
#line 1448
  drbd_flush(tconn);
#line 1450
  tmp___2 = atomic_read((atomic_t const   *)(& (tconn->current_epoch)->epoch_size));
#line 1450
  if (tmp___2 != 0) {
#line 1451
    tmp___1 = kmalloc(48UL, 16U);
#line 1451
    epoch = (struct drbd_epoch *)tmp___1;
#line 1452
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1453
      goto ldv_52868;
    } else {

    }
  } else {

  }
#line 1456
  return (0);
  default: 
#line 1458
  printk("\vd-con %s: Strangeness in tconn->write_ordering %d\n", tconn->name, (unsigned int )tconn->write_ordering);
#line 1459
  return (-5);
  }
  ldv_52868: 
#line 1462
  epoch->flags = 0UL;
#line 1463
  atomic_set(& epoch->epoch_size, 0);
#line 1464
  atomic_set(& epoch->active, 0);
#line 1466
  spin_lock(& tconn->epoch_lock);
#line 1467
  tmp___3 = atomic_read((atomic_t const   *)(& (tconn->current_epoch)->epoch_size));
#line 1467
  if (tmp___3 != 0) {
#line 1468
    list_add(& epoch->list, & (tconn->current_epoch)->list);
#line 1469
    tconn->current_epoch = epoch;
#line 1470
    tconn->epochs = tconn->epochs + 1U;
  } else {
#line 1473
    kfree((void const   *)epoch);
  }
#line 1475
  spin_unlock(& tconn->epoch_lock);
#line 1477
  return (0);
}
}
#line 1483 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_peer_request *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                               int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_peer_request *peer_req ;
  struct page *page ;
  int dgs ;
  int ds ;
  int err ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  bool _bool ;
  int tmp___1 ;
  bool _bool___0 ;
  int tmp___2 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___3 ;
  int tmp___4 ;
  struct page *tmp___5 ;
  int tmp___6 ;

  {
#line 1486
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1486
  capacity = tmp;
#line 1490
  dig_in = (mdev->tconn)->int_dig_in;
#line 1491
  dig_vv = (mdev->tconn)->int_dig_vv;
#line 1494
  dgs = 0;
#line 1495
  if ((unsigned long )(mdev->tconn)->peer_integrity_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1496
    tmp___0 = crypto_hash_digestsize((mdev->tconn)->peer_integrity_tfm);
#line 1496
    dgs = (int )tmp___0;
#line 1501
    err = drbd_recv_all_warn(mdev->tconn, dig_in, (size_t )dgs);
#line 1502
    if (err != 0) {
#line 1503
      return (0);
    } else {

    }
#line 1504
    data_size = data_size - dgs;
  } else {

  }
#line 1507
  _bool = (data_size & 511) == 0;
#line 1507
  if (! _bool) {
#line 1507
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"IS_ALIGNED(data_size, 512)", "read_in_block");
  } else {

  }
#line 1507
  if (_bool) {
#line 1507
    tmp___1 = 0;
  } else {
#line 1507
    tmp___1 = 1;
  }
#line 1507
  if (tmp___1) {
#line 1508
    return (0);
  } else {

  }
#line 1509
  _bool___0 = (unsigned int )data_size <= 1048576U;
#line 1509
  if (! _bool___0) {
#line 1509
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"data_size <= DRBD_MAX_BIO_SIZE", "read_in_block");
  } else {

  }
#line 1509
  if (_bool___0) {
#line 1509
    tmp___2 = 0;
  } else {
#line 1509
    tmp___2 = 1;
  }
#line 1509
  if (tmp___2) {
#line 1510
    return (0);
  } else {

  }
#line 1514
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1515
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "request from peer beyond end of local disk: capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1519
    return (0);
  } else {

  }
#line 1525
  peer_req = drbd_alloc_peer_req(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1526
  if ((unsigned long )peer_req == (unsigned long )((struct drbd_peer_request *)0)) {
#line 1527
    return (0);
  } else {

  }
#line 1529
  if (data_size == 0) {
#line 1530
    return (peer_req);
  } else {

  }
#line 1532
  ds = data_size;
#line 1533
  page = peer_req->pages;
#line 1534
  goto ldv_52898;
  ldv_52897: 
#line 1535
  __min1 = ds;
#line 1535
  __min2 = 4096;
#line 1535
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1536
  tmp___3 = kmap(page);
#line 1536
  data = (unsigned long *)tmp___3;
#line 1537
  err = drbd_recv_all_warn(mdev->tconn, (void *)data, (size_t )len);
#line 1538
  tmp___4 = drbd_insert_fault(mdev, 9U);
#line 1538
  if (tmp___4 != 0) {
#line 1539
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1540
    *data = ~ *data;
  } else {

  }
#line 1542
  kunmap(page);
#line 1543
  if (err != 0) {
#line 1544
    __drbd_free_peer_req(mdev, peer_req, 0);
#line 1545
    return (0);
  } else {

  }
#line 1547
  ds = (int )((unsigned int )ds - len);
#line 1534
  page = page_chain_next(page);
  ldv_52898: ;
#line 1534
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1534
    tmp___5 = page_chain_next(page);
#line 1534
    __builtin_prefetch((void const   *)tmp___5);
#line 1534
    if (1 != 0) {
#line 1535
      goto ldv_52897;
    } else {
#line 1537
      goto ldv_52899;
    }
  } else {

  }
  ldv_52899: ;
#line 1550
  if (dgs != 0) {
#line 1551
    drbd_csum_ee(mdev, (mdev->tconn)->peer_integrity_tfm, peer_req, dig_vv);
#line 1552
    tmp___6 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1552
    if (tmp___6 != 0) {
#line 1553
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED: %llus +%u\n",
              (unsigned long long )sector, data_size);
#line 1555
      __drbd_free_peer_req(mdev, peer_req, 0);
#line 1556
      return (0);
    } else {

    }
  } else {

  }
#line 1559
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1560
  return (peer_req);
}
}
#line 1566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int err ;
  void *data ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;

  {
#line 1569
  err = 0;
#line 1572
  if (data_size == 0) {
#line 1573
    return (0);
  } else {

  }
#line 1575
  page = drbd_alloc_pages(mdev, 1U, 1);
#line 1577
  data = kmap(page);
#line 1578
  goto ldv_52913;
  ldv_52912: 
#line 1579
  __min1 = data_size;
#line 1579
  __min2 = 4096;
#line 1579
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1581
  err = drbd_recv_all_warn(mdev->tconn, data, (size_t )len);
#line 1582
  if (err != 0) {
#line 1583
    goto ldv_52911;
  } else {

  }
#line 1584
  data_size = (int )((unsigned int )data_size - len);
  ldv_52913: ;
#line 1578
  if (data_size != 0) {
#line 1579
    goto ldv_52912;
  } else {

  }
  ldv_52911: 
#line 1586
  kunmap(page);
#line 1587
  drbd_free_pages(mdev, page, 0);
#line 1588
  return (err);
}
}
#line 1591 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int err ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  void *mapped ;
  void *tmp___0 ;
  int __min1 ;
  int __min2 ;
  int tmp___1 ;

  {
#line 1597
  dig_in = (mdev->tconn)->int_dig_in;
#line 1598
  dig_vv = (mdev->tconn)->int_dig_vv;
#line 1600
  dgs = 0;
#line 1601
  if ((unsigned long )(mdev->tconn)->peer_integrity_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1602
    tmp = crypto_hash_digestsize((mdev->tconn)->peer_integrity_tfm);
#line 1602
    dgs = (int )tmp;
#line 1603
    err = drbd_recv_all_warn(mdev->tconn, dig_in, (size_t )dgs);
#line 1604
    if (err != 0) {
#line 1605
      return (err);
    } else {

    }
#line 1606
    data_size = data_size - dgs;
  } else {

  }
#line 1611
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1613
  bio = req->master_bio;
#line 1614
  if (bio->bi_sector != sector) {
#line 1614
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1614);
  } else {

  }
#line 1616
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1616
  i = (int )bio->bi_idx;
#line 1616
  goto ldv_52933;
  ldv_52932: 
#line 1617
  tmp___0 = kmap(bvec->bv_page);
#line 1617
  mapped = tmp___0 + (unsigned long )bvec->bv_offset;
#line 1618
  __min1 = data_size;
#line 1618
  __min2 = (int )bvec->bv_len;
#line 1618
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1619
  err = drbd_recv_all_warn(mdev->tconn, mapped, (size_t )expect);
#line 1620
  kunmap(bvec->bv_page);
#line 1621
  if (err != 0) {
#line 1622
    return (err);
  } else {

  }
#line 1623
  data_size = data_size - expect;
#line 1616
  bvec = bvec + 1;
#line 1616
  i = i + 1;
  ldv_52933: ;
#line 1616
  if ((int )bio->bi_vcnt > i) {
#line 1617
    goto ldv_52932;
  } else {

  }

#line 1626
  if (dgs != 0) {
#line 1627
    drbd_csum_bio(mdev, (mdev->tconn)->peer_integrity_tfm, bio, dig_vv);
#line 1628
    tmp___1 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1628
    if (tmp___1 != 0) {
#line 1629
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1630
      return (-22);
    } else {

    }
  } else {

  }
#line 1634
  if (data_size != 0) {
#line 1634
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1634);
  } else {

  }
#line 1635
  return (0);
}
}
#line 1642 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_work *w , int unused ) 
{ 
  struct drbd_peer_request *peer_req ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;
  sector_t sector ;
  int err ;
  bool tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 1645
  __mptr = (struct drbd_work  const  *)w;
#line 1645
  peer_req = (struct drbd_peer_request *)__mptr;
#line 1646
  mdev = w->ldv_50388.mdev;
#line 1647
  sector = peer_req->i.sector;
#line 1650
  tmp = drbd_interval_empty(& peer_req->i);
#line 1650
  if (tmp) {
#line 1650
    tmp___0 = 0;
  } else {
#line 1650
    tmp___0 = 1;
  }
#line 1650
  if (tmp___0) {
#line 1650
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_interval_empty(&peer_req->i) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1650);
  } else {

  }
#line 1652
  tmp___1 = __builtin_expect((peer_req->flags & 8UL) == 0UL, 1L);
#line 1652
  if (tmp___1 != 0L) {
#line 1653
    __drbd_set_in_sync(mdev, sector, (int )peer_req->i.size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1653U);
#line 1654
    err = drbd_send_ack(mdev, P_RS_WRITE_ACK, peer_req);
  } else {
#line 1657
    drbd_rs_failed_io(mdev, sector, (int )peer_req->i.size);
#line 1659
    err = drbd_send_ack(mdev, P_NEG_ACK, peer_req);
  }
#line 1661
  _dec_unacked(mdev, "e_end_resync_block", 1661);
#line 1663
  return (err);
}
}
#line 1666 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_peer_request *peer_req ;
  int tmp ;

  {
#line 1670
  peer_req = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1671
  if ((unsigned long )peer_req == (unsigned long )((struct drbd_peer_request *)0)) {
#line 1672
    goto fail;
  } else {

  }
#line 1674
  _dec_rs_pending(mdev, "recv_resync_read", 1674);
#line 1676
  inc_unacked(mdev);
#line 1680
  peer_req->w.cb = & e_end_resync_block;
#line 1682
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 1683
  list_add(& peer_req->w.list, & mdev->sync_ee);
#line 1684
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 1686
  atomic_add(data_size >> 9, & mdev->rs_sect_ev);
#line 1687
  tmp = drbd_submit_peer_request(mdev, peer_req, 1U, 2);
#line 1687
  if (tmp == 0) {
#line 1688
    return (0);
  } else {

  }
#line 1691
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1692
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 1693
  list_del(& peer_req->w.list);
#line 1694
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 1696
  __drbd_free_peer_req(mdev, peer_req, 0);
  fail: 
#line 1698
  put_ldev(mdev);
#line 1699
  return (-5);
}
}
#line 1703 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *find_request(struct drbd_conf *mdev , struct rb_root *root ,
                                         u64 id , sector_t sector , bool missing_ok ,
                                         char const   *func ) 
{ 
  struct drbd_request *req ;
  bool tmp ;

  {
#line 1709
  req = (struct drbd_request *)id;
#line 1710
  tmp = drbd_contains_interval(root, sector, & req->i);
#line 1710
  if ((int )tmp && (unsigned int )*((unsigned char *)req + 88UL) != 0U) {
#line 1711
    return (req);
  } else {

  }
#line 1712
  if (! missing_ok) {
#line 1713
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find request 0x%lx, sector %llus\n",
            func, (unsigned long )id, (unsigned long long )sector);
  } else {

  }
#line 1716
  return (0);
}
}
#line 1719 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_request *req ;
  sector_t sector ;
  int err ;
  struct p_data *p ;
  __u64 tmp ;
  long tmp___0 ;

  {
#line 1725
  p = (struct p_data *)pi->data;
#line 1727
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 1728
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 1729
    return (-5);
  } else {

  }
#line 1731
  tmp = __fswab64(p->sector);
#line 1731
  sector = (sector_t )tmp;
#line 1733
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 1734
  req = find_request(mdev, & mdev->read_requests, p->block_id, sector, 0, "receive_DataReply");
#line 1735
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 1736
  tmp___0 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1736
  if (tmp___0 != 0L) {
#line 1737
    return (-5);
  } else {

  }
#line 1742
  err = recv_dless_read(mdev, req, sector, (int )pi->size);
#line 1743
  if (err == 0) {
#line 1744
    req_mod(req, DATA_RECEIVED);
  } else {

  }
#line 1749
  return (err);
}
}
#line 1752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int err ;
  struct p_data *p ;
  __u64 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1757
  p = (struct p_data *)pi->data;
#line 1759
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 1760
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 1761
    return (-5);
  } else {

  }
#line 1763
  tmp = __fswab64(p->sector);
#line 1763
  sector = (sector_t )tmp;
#line 1764
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1764
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1764);
  } else {

  }
#line 1766
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1766
  if (tmp___1 != 0) {
#line 1770
    err = recv_resync_read(mdev, sector, (int )pi->size);
  } else {
#line 1772
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1772
    if (tmp___0 != 0) {
#line 1773
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1775
    err = drbd_drain_block(mdev, (int )pi->size);
#line 1777
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )pi->size);
  }
#line 1780
  atomic_add((int )(pi->size >> 9), & mdev->rs_sect_in);
#line 1782
  return (err);
}
}
#line 1785 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void restart_conflicting_writes(struct drbd_conf *mdev , sector_t sector ,
                                       int size ) 
{ 
  struct drbd_interval *i ;
  struct drbd_request *req ;
  struct drbd_interval  const  *__mptr ;

  {
#line 1791
  i = drbd_find_overlap(& mdev->write_requests, sector, (unsigned int )size);
#line 1791
  goto ldv_52993;
  ldv_52992: ;
#line 1792
  if ((unsigned int )*((unsigned char *)i + 48UL) == 0U) {
#line 1793
    goto ldv_52989;
  } else {

  }
#line 1794
  __mptr = (struct drbd_interval  const  *)i;
#line 1794
  req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 1795
  if ((int )req->rq_state & 1 || ((unsigned long )req->rq_state & 8192UL) == 0UL) {
#line 1797
    goto ldv_52989;
  } else {

  }
#line 1800
  __req_mod(req, CONFLICT_RESOLVED, 0);
  ldv_52989: 
#line 1791
  i = drbd_next_overlap(i, sector, (unsigned int )size);
  ldv_52993: ;
#line 1791
  if ((unsigned long )i != (unsigned long )((struct drbd_interval *)0)) {
#line 1792
    goto ldv_52992;
  } else {

  }

#line 1796
  return;
}
}
#line 1807 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_work *w , int cancel ) 
{ 
  struct drbd_peer_request *peer_req ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;
  sector_t sector ;
  int err ;
  int pcmd ;
  long tmp ;
  bool tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;

  {
#line 1810
  __mptr = (struct drbd_work  const  *)w;
#line 1810
  peer_req = (struct drbd_peer_request *)__mptr;
#line 1811
  mdev = w->ldv_50388.mdev;
#line 1812
  sector = peer_req->i.sector;
#line 1813
  err = 0;
#line 1815
  if ((peer_req->flags & 64UL) != 0UL) {
#line 1816
    tmp = __builtin_expect((peer_req->flags & 8UL) == 0UL, 1L);
#line 1816
    if (tmp != 0L) {
#line 1817
      pcmd = ((int )mdev->state.ldv_50103.conn > 15 && (int )mdev->state.ldv_50103.conn <= 21) && (peer_req->flags & 2UL) != 0UL ? 23 : 22;
#line 1821
      err = drbd_send_ack(mdev, (enum drbd_packet )pcmd, peer_req);
#line 1822
      if (pcmd == 23) {
#line 1823
        __drbd_set_in_sync(mdev, sector, (int )peer_req->i.size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1823U);
      } else {

      }
    } else {
#line 1825
      err = drbd_send_ack(mdev, P_NEG_ACK, peer_req);
    }
#line 1829
    _dec_unacked(mdev, "e_end_block", 1829);
  } else {

  }
#line 1833
  if ((peer_req->flags & 128UL) != 0UL) {
#line 1834
    spin_lock_irq(& (mdev->tconn)->req_lock);
#line 1835
    tmp___0 = drbd_interval_empty(& peer_req->i);
#line 1835
    if ((int )tmp___0) {
#line 1835
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !drbd_interval_empty(&peer_req->i) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1835);
    } else {

    }
#line 1836
    drbd_remove_epoch_entry_interval(mdev, peer_req);
#line 1837
    if ((peer_req->flags & 32UL) != 0UL) {
#line 1838
      restart_conflicting_writes(mdev, sector, (int )peer_req->i.size);
    } else {

    }
#line 1839
    spin_unlock_irq(& (mdev->tconn)->req_lock);
  } else {
#line 1841
    tmp___1 = drbd_interval_empty(& peer_req->i);
#line 1841
    if (tmp___1) {
#line 1841
      tmp___2 = 0;
    } else {
#line 1841
      tmp___2 = 1;
    }
#line 1841
    if (tmp___2) {
#line 1841
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_interval_empty(&peer_req->i) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1841);
    } else {

    }
  }
#line 1843
  drbd_may_finish_epoch(mdev->tconn, peer_req->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1845
  return (err);
}
}
#line 1848 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_ack(struct drbd_work *w , enum drbd_packet ack ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_peer_request *peer_req ;
  struct drbd_work  const  *__mptr ;
  int err ;

  {
#line 1850
  mdev = w->ldv_50388.mdev;
#line 1852
  __mptr = (struct drbd_work  const  *)w;
#line 1852
  peer_req = (struct drbd_peer_request *)__mptr;
#line 1855
  err = drbd_send_ack(mdev, ack, peer_req);
#line 1856
  _dec_unacked(mdev, "e_send_ack", 1856);
#line 1858
  return (err);
}
}
#line 1861 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_superseded(struct drbd_work *w , int unused ) 
{ 
  int tmp ;

  {
#line 1863
  tmp = e_send_ack(w, P_SUPERSEDED);
#line 1863
  return (tmp);
}
}
#line 1866 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_retry_write(struct drbd_work *w , int unused ) 
{ 
  struct drbd_tconn *tconn ;
  int tmp ;

  {
#line 1868
  tconn = (w->ldv_50388.mdev)->tconn;
#line 1870
  tmp = e_send_ack(w, tconn->agreed_pro_version > 99 ? P_RETRY_WRITE : P_SUPERSEDED);
#line 1870
  return (tmp);
}
}
#line 1874 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static bool seq_greater(u32 a , u32 b ) 
{ 


  {
#line 1881
  return ((int )a - (int )b > 0);
}
}
#line 1884 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static u32 seq_max(u32 a , u32 b ) 
{ 
  bool tmp ;

  {
#line 1886
  tmp = seq_greater(a, b);
#line 1886
  return ((int )tmp ? a : b);
}
}
#line 1889 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static bool need_peer_seq(struct drbd_conf *mdev ) 
{ 
  struct drbd_tconn *tconn ;
  int tp ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1891
  tconn = mdev->tconn;
#line 1900
  rcu_read_lock();
#line 1901
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 1901
  tmp = debug_lockdep_rcu_enabled();
#line 1901
  if (tmp != 0 && ! __warned) {
#line 1901
    tmp___0 = rcu_read_lock_held();
#line 1901
    if (tmp___0 == 0 && 1) {
#line 1901
      __warned = 1;
#line 1901
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             1901, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1901
  tp = (int )_________p1->two_primaries;
#line 1902
  rcu_read_unlock();
#line 1904
  if (tp != 0) {
#line 1904
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& tconn->flags));
#line 1904
    if (tmp___1 != 0) {
#line 1904
      tmp___2 = 1;
    } else {
#line 1904
      tmp___2 = 0;
    }
  } else {
#line 1904
    tmp___2 = 0;
  }
#line 1904
  return ((bool )tmp___2);
}
}
#line 1907 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void update_peer_seq(struct drbd_conf *mdev , unsigned int peer_seq ) 
{ 
  unsigned int newest_peer_seq ;
  bool tmp ;

  {
#line 1911
  tmp = need_peer_seq(mdev);
#line 1911
  if ((int )tmp) {
#line 1912
    spin_lock(& mdev->peer_seq_lock);
#line 1913
    newest_peer_seq = seq_max(mdev->peer_seq, peer_seq);
#line 1914
    mdev->peer_seq = newest_peer_seq;
#line 1915
    spin_unlock(& mdev->peer_seq_lock);
#line 1917
    if (peer_seq == newest_peer_seq) {
#line 1918
      __wake_up(& mdev->seq_wait, 3U, 1, 0);
    } else {

    }
  } else {

  }
#line 1920
  return;
}
}
#line 1922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 1924
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 1928 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static bool overlapping_resync_write(struct drbd_conf *mdev , struct drbd_peer_request *peer_req ) 
{ 
  struct drbd_peer_request *rs_req ;
  bool rv ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct list_head  const  *__mptr___0 ;

  {
#line 1931
  rv = 0;
#line 1933
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 1934
  __mptr = (struct list_head  const  *)mdev->sync_ee.next;
#line 1934
  rs_req = (struct drbd_peer_request *)__mptr;
#line 1934
  goto ldv_53065;
  ldv_53064: 
#line 1935
  tmp = overlaps(peer_req->i.sector, (int )peer_req->i.size, rs_req->i.sector, (int )rs_req->i.size);
#line 1935
  if (tmp != 0) {
#line 1937
    rv = 1;
#line 1938
    goto ldv_53063;
  } else {

  }
#line 1934
  __mptr___0 = (struct list_head  const  *)rs_req->w.list.next;
#line 1934
  rs_req = (struct drbd_peer_request *)__mptr___0;
  ldv_53065: ;
#line 1934
  if ((unsigned long )(& rs_req->w.list) != (unsigned long )(& mdev->sync_ee)) {
#line 1935
    goto ldv_53064;
  } else {

  }
  ldv_53063: 
#line 1941
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 1943
  return (rv);
}
}
#line 1967 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int wait_for_and_update_peer_seq(struct drbd_conf *mdev , u32 const   peer_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  long timeout ;
  int ret ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1969
  tmp = get_current();
#line 1969
  wait.flags = 0U;
#line 1969
  wait.private = (void *)tmp;
#line 1969
  wait.func = & autoremove_wake_function;
#line 1969
  wait.task_list.next = & wait.task_list;
#line 1969
  wait.task_list.prev = & wait.task_list;
#line 1973
  tmp___0 = need_peer_seq(mdev);
#line 1973
  if (tmp___0) {
#line 1973
    tmp___1 = 0;
  } else {
#line 1973
    tmp___1 = 1;
  }
#line 1973
  if (tmp___1) {
#line 1974
    return (0);
  } else {

  }
#line 1976
  spin_lock(& mdev->peer_seq_lock);
  ldv_53077: 
#line 1978
  tmp___2 = seq_greater((unsigned int )peer_seq - 1U, mdev->peer_seq);
#line 1978
  if (tmp___2) {
#line 1978
    tmp___3 = 0;
  } else {
#line 1978
    tmp___3 = 1;
  }
#line 1978
  if (tmp___3) {
#line 1979
    mdev->peer_seq = seq_max(mdev->peer_seq, peer_seq);
#line 1980
    ret = 0;
#line 1981
    goto ldv_53073;
  } else {

  }
#line 1983
  tmp___4 = get_current();
#line 1983
  tmp___5 = signal_pending(tmp___4);
#line 1983
  if (tmp___5 != 0) {
#line 1984
    ret = -512;
#line 1985
    goto ldv_53073;
  } else {

  }
#line 1987
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1988
  spin_unlock(& mdev->peer_seq_lock);
#line 1989
  rcu_read_lock();
#line 1990
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 1990
  tmp___6 = debug_lockdep_rcu_enabled();
#line 1990
  if (tmp___6 != 0 && ! __warned) {
#line 1990
    tmp___7 = rcu_read_lock_held();
#line 1990
    if (tmp___7 == 0 && 1) {
#line 1990
      __warned = 1;
#line 1990
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             1990, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1990
  timeout = (long )((_________p1->ping_timeo * 250U) / 10U);
#line 1991
  rcu_read_unlock();
#line 1992
  timeout = schedule_timeout(timeout);
#line 1993
  spin_lock(& mdev->peer_seq_lock);
#line 1994
  if (timeout == 0L) {
#line 1995
    ret = -110;
#line 1996
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Timed out waiting for missing ack packets; disconnecting\n");
#line 1997
    goto ldv_53073;
  } else {

  }
#line 1999
  goto ldv_53077;
  ldv_53073: 
#line 2000
  spin_unlock(& mdev->peer_seq_lock);
#line 2001
  finish_wait(& mdev->seq_wait, & wait);
#line 2002
  return (ret);
}
}
#line 2008 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static unsigned long wire_flags_to_bio(struct drbd_conf *mdev , u32 dpf ) 
{ 


  {
#line 2010
  return ((unsigned long )(((((dpf & 2U) != 0U ? 16 : 0) | ((dpf & 16U) != 0U ? 2048 : 0)) | ((dpf & 32U) != 0U ? 4096 : 0)) | ((dpf & 64U) != 0U ? 128 : 0)));
}
}
#line 2016 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void fail_postponed_requests(struct drbd_conf *mdev , sector_t sector , unsigned int size ) 
{ 
  struct drbd_interval *i ;
  struct drbd_request *req ;
  struct bio_and_error m ;
  struct drbd_interval  const  *__mptr ;

  {
  repeat: 
#line 2022
  i = drbd_find_overlap(& mdev->write_requests, sector, size);
#line 2022
  goto ldv_53095;
  ldv_53094: ;
#line 2026
  if ((unsigned int )*((unsigned char *)i + 48UL) == 0U) {
#line 2027
    goto ldv_53091;
  } else {

  }
#line 2028
  __mptr = (struct drbd_interval  const  *)i;
#line 2028
  req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 2029
  if (((unsigned long )req->rq_state & 8192UL) == 0UL) {
#line 2030
    goto ldv_53091;
  } else {

  }
#line 2031
  req->rq_state = req->rq_state & 4294959103U;
#line 2032
  __req_mod(req, NEG_ACKED, & m);
#line 2033
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 2034
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 2035
    complete_master_bio(mdev, & m);
  } else {

  }
#line 2036
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 2037
  goto repeat;
  ldv_53091: 
#line 2022
  i = drbd_next_overlap(i, sector, size);
  ldv_53095: ;
#line 2022
  if ((unsigned long )i != (unsigned long )((struct drbd_interval *)0)) {
#line 2023
    goto ldv_53094;
  } else {

  }

#line 2027
  return;
}
}
#line 2041 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int handle_write_conflicts(struct drbd_conf *mdev , struct drbd_peer_request *peer_req ) 
{ 
  struct drbd_tconn *tconn ;
  bool resolve_conflicts ;
  int tmp ;
  sector_t sector ;
  unsigned int size ;
  struct drbd_interval *i ;
  bool equal ;
  int err ;
  bool superseded ;
  struct drbd_request *req ;
  struct drbd_interval  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2044
  tconn = mdev->tconn;
#line 2045
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& tconn->flags));
#line 2045
  resolve_conflicts = tmp != 0;
#line 2046
  sector = peer_req->i.sector;
#line 2047
  size = peer_req->i.size;
#line 2056
  drbd_insert_interval(& mdev->write_requests, & peer_req->i);
  repeat: 
#line 2059
  i = drbd_find_overlap(& mdev->write_requests, sector, size);
#line 2059
  goto ldv_53120;
  ldv_53119: ;
#line 2060
  if ((unsigned long )(& peer_req->i) == (unsigned long )i) {
#line 2061
    goto ldv_53109;
  } else {

  }
#line 2063
  if ((unsigned int )*((unsigned char *)i + 48UL) == 0U) {
#line 2069
    err = drbd_wait_misc(mdev, i);
#line 2070
    if (err != 0) {
#line 2071
      goto out;
    } else {

    }
#line 2072
    goto repeat;
  } else {

  }
#line 2075
  equal = (bool )(i->sector == sector && i->size == size);
#line 2076
  if ((int )resolve_conflicts) {
#line 2083
    superseded = (bool )(i->sector <= sector && i->sector + (sector_t )(i->size >> 9) >= (sector_t )(size >> 9) + sector);
#line 2086
    if (! equal) {
#line 2087
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent writes detected: local=%llus +%u, remote=%llus +%u, assuming %s came first\n",
                (unsigned long long )i->sector, i->size, (unsigned long long )sector,
                size, (int )superseded ? (char *)"local" : (char *)"remote");
    } else {

    }
#line 2094
    inc_unacked(mdev);
#line 2095
    peer_req->w.cb = (int )superseded ? & e_send_superseded : & e_send_retry_write;
#line 2097
    list_add_tail(& peer_req->w.list, & mdev->done_ee);
#line 2098
    wake_asender(mdev->tconn);
#line 2100
    err = -2;
#line 2101
    goto out;
  } else {
#line 2104
    __mptr = (struct drbd_interval  const  *)i;
#line 2104
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 2106
    if (! equal) {
#line 2107
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent writes detected: local=%llus +%u, remote=%llus +%u\n",
                (unsigned long long )i->sector, i->size, (unsigned long long )sector,
                size);
    } else {

    }
#line 2112
    if ((int )req->rq_state & 1 || ((unsigned long )req->rq_state & 8192UL) == 0UL) {
#line 2125
      err = drbd_wait_misc(mdev, & req->i);
#line 2126
      if (err != 0) {
#line 2128
        val.i = 0U;
#line 2128
        val.ldv_40604.conn = 3U;
#line 2128
        mask.i = 0U;
#line 2128
        mask.ldv_40604.conn = 31U;
#line 2128
        _conn_request_state(mdev->tconn, mask, val, CS_HARD);
#line 2130
        fail_postponed_requests(mdev, sector, size);
#line 2131
        goto out;
      } else {

      }
#line 2133
      goto repeat;
    } else {

    }
#line 2139
    peer_req->flags = peer_req->flags | 32UL;
  }
  ldv_53109: 
#line 2059
  i = drbd_next_overlap(i, sector, size);
  ldv_53120: ;
#line 2059
  if ((unsigned long )i != (unsigned long )((struct drbd_interval *)0)) {
#line 2060
    goto ldv_53119;
  } else {

  }
#line 2142
  err = 0;
  out: ;
#line 2145
  if (err != 0) {
#line 2146
    drbd_remove_epoch_entry_interval(mdev, peer_req);
  } else {

  }
#line 2147
  return (err);
}
}
#line 2151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  struct drbd_peer_request *peer_req ;
  struct p_data *p ;
  u32 peer_seq ;
  __u32 tmp ;
  int rw ;
  u32 dp_flags ;
  int err ;
  int tp ;
  int err2 ;
  int tmp___0 ;
  __u64 tmp___1 ;
  __u32 tmp___2 ;
  unsigned long tmp___3 ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___4 ;
  int tmp___5 ;
  bool tmp___6 ;
  int tmp___7 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___8 ;
  bool tmp___9 ;
  int tmp___10 ;
  struct net_conf *_________p1___0 ;
  bool __warned___0 ;
  int tmp___11 ;
  int tmp___12 ;

  {
#line 2156
  p = (struct p_data *)pi->data;
#line 2157
  tmp = __fswab32(p->seq_num);
#line 2157
  peer_seq = tmp;
#line 2158
  rw = 1;
#line 2162
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 2163
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2164
    return (-5);
  } else {

  }
#line 2166
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2166
  if (tmp___0 == 0) {
#line 2169
    err = wait_for_and_update_peer_seq(mdev, peer_seq);
#line 2170
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )pi->size);
#line 2171
    atomic_inc(& (tconn->current_epoch)->epoch_size);
#line 2172
    err2 = drbd_drain_block(mdev, (int )pi->size);
#line 2173
    if (err == 0) {
#line 2174
      err = err2;
    } else {

    }
#line 2175
    return (err);
  } else {

  }
#line 2184
  tmp___1 = __fswab64(p->sector);
#line 2184
  sector = (sector_t )tmp___1;
#line 2185
  peer_req = read_in_block(mdev, p->block_id, sector, (int )pi->size);
#line 2186
  if ((unsigned long )peer_req == (unsigned long )((struct drbd_peer_request *)0)) {
#line 2187
    put_ldev(mdev);
#line 2188
    return (-5);
  } else {

  }
#line 2191
  peer_req->w.cb = & e_end_block;
#line 2193
  tmp___2 = __fswab32(p->dp_flags);
#line 2193
  dp_flags = tmp___2;
#line 2194
  tmp___3 = wire_flags_to_bio(mdev, dp_flags);
#line 2194
  rw = (int )((unsigned int )tmp___3 | (unsigned int )rw);
#line 2195
  if ((unsigned long )peer_req->pages == (unsigned long )((struct page *)0)) {
#line 2196
    if (peer_req->i.size != 0U) {
#line 2196
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( peer_req->i.size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2196);
    } else {

    }
#line 2197
    if ((dp_flags & 32U) == 0U) {
#line 2197
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( dp_flags & DP_FLUSH ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2197);
    } else {

    }
  } else {

  }
#line 2200
  if ((dp_flags & 4U) != 0U) {
#line 2201
    peer_req->flags = peer_req->flags | 2UL;
  } else {

  }
#line 2203
  spin_lock(& tconn->epoch_lock);
#line 2204
  peer_req->epoch = tconn->current_epoch;
#line 2205
  atomic_inc(& (peer_req->epoch)->epoch_size);
#line 2206
  atomic_inc(& (peer_req->epoch)->active);
#line 2207
  spin_unlock(& tconn->epoch_lock);
#line 2209
  rcu_read_lock();
#line 2210
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 2210
  tmp___4 = debug_lockdep_rcu_enabled();
#line 2210
  if (tmp___4 != 0 && ! __warned) {
#line 2210
    tmp___5 = rcu_read_lock_held();
#line 2210
    if (tmp___5 == 0 && 1) {
#line 2210
      __warned = 1;
#line 2210
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             2210, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 2210
  tp = (int )_________p1->two_primaries;
#line 2211
  rcu_read_unlock();
#line 2212
  if (tp != 0) {
#line 2213
    peer_req->flags = peer_req->flags | 128UL;
#line 2214
    err = wait_for_and_update_peer_seq(mdev, peer_seq);
#line 2215
    if (err != 0) {
#line 2216
      goto out_interrupted;
    } else {

    }
#line 2217
    spin_lock_irq(& (mdev->tconn)->req_lock);
#line 2218
    err = handle_write_conflicts(mdev, peer_req);
#line 2219
    if (err != 0) {
#line 2220
      spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 2221
      if (err == -2) {
#line 2222
        put_ldev(mdev);
#line 2223
        return (0);
      } else {

      }
#line 2225
      goto out_interrupted;
    } else {

    }
  } else {
#line 2228
    spin_lock_irq(& (mdev->tconn)->req_lock);
  }
#line 2229
  list_add(& peer_req->w.list, & mdev->active_ee);
#line 2230
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 2232
  if ((unsigned int )*((unsigned short *)mdev + 374UL) == 272U) {
#line 2233
    tmp___6 = overlapping_resync_write(mdev, peer_req);
#line 2233
    if (tmp___6) {
#line 2233
      tmp___7 = 0;
    } else {
#line 2233
      tmp___7 = 1;
    }
#line 2233
    if (tmp___7) {
#line 2233
      goto ldv_53140;
    } else {

    }
#line 2233
    tmp___8 = get_current();
#line 2233
    __wait.flags = 0U;
#line 2233
    __wait.private = (void *)tmp___8;
#line 2233
    __wait.func = & autoremove_wake_function;
#line 2233
    __wait.task_list.next = & __wait.task_list;
#line 2233
    __wait.task_list.prev = & __wait.task_list;
    ldv_53143: 
#line 2233
    prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 2233
    tmp___9 = overlapping_resync_write(mdev, peer_req);
#line 2233
    if (tmp___9) {
#line 2233
      tmp___10 = 0;
    } else {
#line 2233
      tmp___10 = 1;
    }
#line 2233
    if (tmp___10) {
#line 2233
      goto ldv_53142;
    } else {

    }
#line 2233
    schedule();
#line 2233
    goto ldv_53143;
    ldv_53142: 
#line 2233
    finish_wait(& mdev->ee_wait, & __wait);
    ldv_53140: ;
  } else {

  }
#line 2235
  if ((mdev->tconn)->agreed_pro_version <= 99) {
#line 2236
    rcu_read_lock();
#line 2237
    _________p1___0 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 2237
    tmp___11 = debug_lockdep_rcu_enabled();
#line 2237
    if (tmp___11 != 0 && ! __warned___0) {
#line 2237
      tmp___12 = rcu_read_lock_held();
#line 2237
      if (tmp___12 == 0 && 1) {
#line 2237
        __warned___0 = 1;
#line 2237
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                               2237, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 2237
    switch (_________p1___0->wire_protocol) {
    case (__u32 )3: 
#line 2239
    dp_flags = dp_flags | 256U;
#line 2240
    goto ldv_53148;
    case (__u32 )2: 
#line 2242
    dp_flags = dp_flags | 128U;
#line 2243
    goto ldv_53148;
    }
    ldv_53148: 
#line 2245
    rcu_read_unlock();
  } else {

  }
#line 2248
  if ((dp_flags & 256U) != 0U) {
#line 2249
    peer_req->flags = peer_req->flags | 64UL;
#line 2250
    inc_unacked(mdev);
  } else {

  }
#line 2255
  if ((dp_flags & 128U) != 0U) {
#line 2258
    drbd_send_ack(mdev, P_RECV_ACK, peer_req);
  } else {

  }
#line 2261
  if ((int )mdev->state.ldv_50103.pdsk <= 3) {
#line 2263
    __drbd_set_out_of_sync(mdev, peer_req->i.sector, (int )peer_req->i.size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           2263U);
#line 2264
    peer_req->flags = peer_req->flags | 1UL;
#line 2265
    peer_req->flags = peer_req->flags & 0xfffffffffffffffdUL;
#line 2266
    drbd_al_begin_io(mdev, & peer_req->i);
  } else {

  }
#line 2269
  err = drbd_submit_peer_request(mdev, peer_req, (unsigned int const   )rw, 4);
#line 2270
  if (err == 0) {
#line 2271
    return (0);
  } else {

  }
#line 2274
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 2275
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 2276
  list_del(& peer_req->w.list);
#line 2277
  drbd_remove_epoch_entry_interval(mdev, peer_req);
#line 2278
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 2279
  if ((int )peer_req->flags & 1) {
#line 2280
    drbd_al_complete_io(mdev, & peer_req->i);
  } else {

  }
  out_interrupted: 
#line 2283
  drbd_may_finish_epoch(tconn, peer_req->epoch, EV_CLEANUP);
#line 2284
  put_ldev(mdev);
#line 2285
  __drbd_free_peer_req(mdev, peer_req, 0);
#line 2286
  return (err);
}
}
#line 2300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) 
{ 
  struct gendisk *disk ;
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  struct lc_element *tmp ;
  int curr_events ;
  int throttle ;
  unsigned int c_min_rate ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___2 ;
  unsigned long res ;
  unsigned int _cpu ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned long res___0 ;
  unsigned int _cpu___0 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  int tmp___3 ;
  unsigned long rs_left ;
  int i ;
  unsigned long tmp___4 ;

  {
#line 2302
  disk = (((mdev->ldev)->backing_bdev)->bd_contains)->bd_disk;
#line 2306
  throttle = 0;
#line 2309
  rcu_read_lock();
#line 2310
  _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 2310
  tmp___0 = debug_lockdep_rcu_enabled();
#line 2310
  if (tmp___0 != 0 && ! __warned) {
#line 2310
    tmp___1 = rcu_read_lock_held();
#line 2310
    if (tmp___1 == 0 && 1) {
#line 2310
      __warned = 1;
#line 2310
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             2310, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 2310
  c_min_rate = _________p1->c_min_rate;
#line 2311
  rcu_read_unlock();
#line 2314
  if (c_min_rate == 0U) {
#line 2315
    return (0);
  } else {

  }
#line 2317
  spin_lock_irq(& mdev->al_lock);
#line 2318
  tmp = lc_find(mdev->resync, (unsigned int )(sector >> 15));
#line 2319
  if ((unsigned long )tmp != (unsigned long )((struct lc_element *)0)) {
#line 2320
    __mptr = (struct lc_element  const  *)tmp;
#line 2320
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 2321
    tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 2321
    if (tmp___2 != 0) {
#line 2322
      spin_unlock_irq(& mdev->al_lock);
#line 2323
      return (0);
    } else {

    }
  } else {

  }
#line 2327
  spin_unlock_irq(& mdev->al_lock);
#line 2329
  res = 0UL;
#line 2329
  _cpu = 4294967295U;
#line 2329
  goto ldv_53175;
  ldv_53174: 
#line 2329
  __vpp_verify = 0;
#line 2329
  __asm__  ("": "=r" (__ptr): "0" (disk->part0.dkstats));
#line 2329
  res = ((struct disk_stats *)(__per_cpu_offset[_cpu] + __ptr))->sectors[0] + res;
  ldv_53175: 
#line 2329
  _cpu = cpumask_next((int )_cpu, cpu_possible_mask);
#line 2329
  if ((unsigned int )nr_cpu_ids > _cpu) {
#line 2330
    goto ldv_53174;
  } else {

  }
#line 2330
  res___0 = 0UL;
#line 2330
  _cpu___0 = 4294967295U;
#line 2330
  goto ldv_53185;
  ldv_53184: 
#line 2330
  __vpp_verify___0 = 0;
#line 2330
  __asm__  ("": "=r" (__ptr___0): "0" (disk->part0.dkstats));
#line 2330
  res___0 = ((struct disk_stats *)(__per_cpu_offset[_cpu___0] + __ptr___0))->sectors[1] + res___0;
  ldv_53185: 
#line 2330
  _cpu___0 = cpumask_next((int )_cpu___0, cpu_possible_mask);
#line 2330
  if ((unsigned int )nr_cpu_ids > _cpu___0) {
#line 2331
    goto ldv_53184;
  } else {

  }
#line 2330
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_sect_ev));
#line 2330
  curr_events = ((int )res + (int )res___0) - tmp___3;
#line 2333
  if (mdev->rs_last_events == 0 || curr_events - mdev->rs_last_events > 64) {
#line 2337
    mdev->rs_last_events = curr_events;
#line 2341
    i = (mdev->rs_last_mark + 7) % 8;
#line 2343
    if ((unsigned int )*((unsigned short *)mdev + 374UL) == 288U || (unsigned int )*((unsigned short *)mdev + 374UL) == 304U) {
#line 2344
      rs_left = mdev->ov_left;
    } else {
#line 2346
      tmp___4 = drbd_bm_total_weight(mdev);
#line 2346
      rs_left = tmp___4 - mdev->rs_failed;
    }
#line 2348
    dt = (unsigned long )(((long )jiffies - (long )mdev->rs_mark_time[i]) / 250L);
#line 2349
    if (dt == 0UL) {
#line 2350
      dt = dt + 1UL;
    } else {

    }
#line 2351
    db = mdev->rs_mark_left[i] - rs_left;
#line 2352
    dbdt = db / dt << 2;
#line 2354
    if ((unsigned long )c_min_rate < dbdt) {
#line 2355
      throttle = 1;
    } else {

    }
  } else {

  }
#line 2357
  return (throttle);
}
}
#line 2361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  sector_t capacity ;
  struct drbd_peer_request *peer_req ;
  struct digest_info *di ;
  int size ;
  int verb ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  int tmp___5 ;
  unsigned long now ;
  int i ;
  unsigned long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 2367
  di = 0;
#line 2370
  p = (struct p_block_req *)pi->data;
#line 2372
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 2373
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2374
    return (-5);
  } else {

  }
#line 2375
  capacity = drbd_get_capacity(mdev->this_bdev);
#line 2377
  tmp = __fswab64(p->sector);
#line 2377
  sector = (sector_t )tmp;
#line 2378
  tmp___0 = __fswab32(p->blksize);
#line 2378
  size = (int )tmp___0;
#line 2380
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 1048576U) {
#line 2381
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            2381, (unsigned long long )sector, size);
#line 2383
    return (-22);
  } else {

  }
#line 2385
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2386
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            2386, (unsigned long long )sector, size);
#line 2388
    return (-22);
  } else {

  }
#line 2391
  tmp___3 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2391
  if (tmp___3 == 0) {
#line 2392
    verb = 1;
#line 2393
    switch ((unsigned int )pi->cmd) {
    case 8U: 
#line 2395
    drbd_send_ack_rp(mdev, P_NEG_DREPLY, p);
#line 2396
    goto ldv_53204;
    case 9U: ;
    case 33U: ;
    case 30U: 
#line 2400
    drbd_send_ack_rp(mdev, P_NEG_RS_DREPLY, p);
#line 2401
    goto ldv_53204;
    case 31U: 
#line 2403
    verb = 0;
#line 2404
    _dec_rs_pending(mdev, "receive_DataRequest", 2404);
#line 2405
    drbd_send_ack_ex(mdev, P_OV_RESULT, sector, size, 4711ULL);
#line 2406
    goto ldv_53204;
    default: 
#line 2408
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (2408), "i" (12UL));
    ldv_53211: ;
#line 2408
    goto ldv_53211;
    }
    ldv_53204: ;
#line 2410
    if (verb != 0) {
#line 2410
      tmp___1 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2410
      if (tmp___1 != 0) {
#line 2411
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
      } else {

      }
    } else {

    }
#line 2415
    tmp___2 = drbd_drain_block(mdev, (int )pi->size);
#line 2415
    return (tmp___2);
  } else {

  }
#line 2421
  peer_req = drbd_alloc_peer_req(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2422
  if ((unsigned long )peer_req == (unsigned long )((struct drbd_peer_request *)0)) {
#line 2423
    put_ldev(mdev);
#line 2424
    return (-12);
  } else {

  }
#line 2427
  switch ((unsigned int )pi->cmd) {
  case 8U: 
#line 2429
  peer_req->w.cb = & w_e_end_data_req;
#line 2430
  fault_type = 5U;
#line 2432
  goto submit;
  case 9U: 
#line 2435
  peer_req->w.cb = & w_e_end_rsdata_req;
#line 2436
  fault_type = 3U;
#line 2438
  mdev->bm_resync_fo = sector >> 3;
#line 2439
  goto ldv_53215;
  case 31U: ;
  case 33U: 
#line 2443
  fault_type = 3U;
#line 2444
  tmp___4 = kmalloc((unsigned long )pi->size + 16UL, 16U);
#line 2444
  di = (struct digest_info *)tmp___4;
#line 2445
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2446
    goto out_free_e;
  } else {

  }
#line 2448
  di->digest_size = (int )pi->size;
#line 2449
  di->digest = (void *)di + 16U;
#line 2451
  peer_req->ldv_50490.digest = di;
#line 2452
  peer_req->flags = peer_req->flags | 16UL;
#line 2454
  tmp___5 = drbd_recv_all(mdev->tconn, di->digest, (size_t )pi->size);
#line 2454
  if (tmp___5 != 0) {
#line 2455
    goto out_free_e;
  } else {

  }
#line 2457
  if ((unsigned int )pi->cmd == 33U) {
#line 2458
    if ((mdev->tconn)->agreed_pro_version <= 88) {
#line 2458
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->tconn->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2458);
    } else {

    }
#line 2459
    peer_req->w.cb = & w_e_end_csum_rs_req;
#line 2461
    mdev->bm_resync_fo = sector >> 3;
  } else
#line 2462
  if ((unsigned int )pi->cmd == 31U) {
#line 2464
    atomic_add(size >> 9, & mdev->rs_sect_in);
#line 2465
    peer_req->w.cb = & w_e_end_ov_reply;
#line 2466
    _dec_rs_pending(mdev, "receive_DataRequest", 2466);
#line 2469
    goto submit_for_resync;
  } else {

  }
#line 2471
  goto ldv_53215;
  case 30U: ;
#line 2474
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && (mdev->tconn)->agreed_pro_version > 89) {
#line 2476
    now = jiffies;
#line 2478
    mdev->ov_start_sector = sector;
#line 2479
    mdev->ov_position = sector;
#line 2480
    tmp___6 = drbd_bm_bits(mdev);
#line 2480
    mdev->ov_left = tmp___6 - (sector >> 3);
#line 2481
    mdev->rs_total = mdev->ov_left;
#line 2482
    i = 0;
#line 2482
    goto ldv_53224;
    ldv_53223: 
#line 2483
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 2484
    mdev->rs_mark_time[i] = now;
#line 2482
    i = i + 1;
    ldv_53224: ;
#line 2482
    if (i <= 7) {
#line 2483
      goto ldv_53223;
    } else {

    }
#line 2486
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2489
  peer_req->w.cb = & w_e_end_ov_req;
#line 2490
  fault_type = 3U;
#line 2491
  goto ldv_53215;
  default: 
#line 2494
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                       "i" (2494), "i" (12UL));
  ldv_53227: ;
#line 2494
  goto ldv_53227;
  }
  ldv_53215: ;
#line 2519
  if ((unsigned int )*((unsigned char *)mdev + 748UL) != 4U) {
#line 2519
    tmp___7 = drbd_rs_should_slow_down(mdev, sector);
#line 2519
    if (tmp___7 != 0) {
#line 2520
      schedule_timeout_uninterruptible(25L);
    } else {

    }
  } else {

  }
#line 2521
  tmp___8 = drbd_rs_begin_io(mdev, sector);
#line 2521
  if (tmp___8 != 0) {
#line 2522
    goto out_free_e;
  } else {

  }
  submit_for_resync: 
#line 2525
  atomic_add(size >> 9, & mdev->rs_sect_ev);
  submit: 
#line 2528
  inc_unacked(mdev);
#line 2529
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 2530
  list_add_tail(& peer_req->w.list, & mdev->read_ee);
#line 2531
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 2533
  tmp___9 = drbd_submit_peer_request(mdev, peer_req, 0U, (int const   )fault_type);
#line 2533
  if (tmp___9 == 0) {
#line 2534
    return (0);
  } else {

  }
#line 2537
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 2538
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 2539
  list_del(& peer_req->w.list);
#line 2540
  spin_unlock_irq(& (mdev->tconn)->req_lock);
  out_free_e: 
#line 2544
  put_ldev(mdev);
#line 2545
  __drbd_free_peer_req(mdev, peer_req, 0);
#line 2546
  return (-5);
}
}
#line 2549 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  enum drbd_after_sb_p after_sb_0p ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2551
  rv = -100;
#line 2555
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2556
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2558
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2559
  ch_self = mdev->comm_bm_set;
#line 2561
  rcu_read_lock();
#line 2562
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 2562
  tmp = debug_lockdep_rcu_enabled();
#line 2562
  if (tmp != 0 && ! __warned) {
#line 2562
    tmp___0 = rcu_read_lock_held();
#line 2562
    if (tmp___0 == 0 && 1) {
#line 2562
      __warned = 1;
#line 2562
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             2562, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 2562
  after_sb_0p = (enum drbd_after_sb_p )_________p1->after_sb_0p;
#line 2563
  rcu_read_unlock();
#line 2564
  switch ((unsigned int )after_sb_0p) {
  case 7U: ;
  case 8U: ;
  case 9U: ;
  case 10U: 
#line 2569
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2570
  goto ldv_53244;
  case 0U: ;
#line 2572
  goto ldv_53244;
  case 1U: ;
#line 2574
  if (self == 0 && peer == 1) {
#line 2575
    rv = -1;
#line 2576
    goto ldv_53244;
  } else {

  }
#line 2578
  if (self == 1 && peer == 0) {
#line 2579
    rv = 1;
#line 2580
    goto ldv_53244;
  } else {

  }
  case 2U: ;
#line 2584
  if (self == 0 && peer == 1) {
#line 2585
    rv = 1;
#line 2586
    goto ldv_53244;
  } else {

  }
#line 2588
  if (self == 1 && peer == 0) {
#line 2589
    rv = -1;
#line 2590
    goto ldv_53244;
  } else {

  }
#line 2593
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3U: ;
#line 2596
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2597
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->tconn)->flags));
#line 2597
    rv = tmp___1 != 0 ? -1 : 1;
#line 2599
    goto ldv_53244;
  } else {
#line 2601
    if (ch_peer == 0UL) {
#line 2601
      rv = 1;
#line 2601
      goto ldv_53244;
    } else {

    }
#line 2602
    if (ch_self == 0UL) {
#line 2602
      rv = -1;
#line 2602
      goto ldv_53244;
    } else {

    }
  }
#line 2604
  if ((unsigned int )after_sb_0p == 3U) {
#line 2605
    goto ldv_53244;
  } else {

  }
  case 4U: ;
#line 2607
  if (ch_self < ch_peer) {
#line 2608
    rv = -1;
  } else
#line 2609
  if (ch_self > ch_peer) {
#line 2610
    rv = 1;
  } else {
#line 2613
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->tconn)->flags));
#line 2613
    rv = tmp___2 != 0 ? -1 : 1;
  }
#line 2615
  goto ldv_53244;
  case 5U: 
#line 2617
  rv = -1;
#line 2618
  goto ldv_53244;
  case 6U: 
#line 2620
  rv = 1;
  }
  ldv_53244: ;
#line 2623
  return (rv);
}
}
#line 2626 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_after_sb_p after_sb_1p ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2628
  rv = -100;
#line 2631
  rcu_read_lock();
#line 2632
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 2632
  tmp = debug_lockdep_rcu_enabled();
#line 2632
  if (tmp != 0 && ! __warned) {
#line 2632
    tmp___0 = rcu_read_lock_held();
#line 2632
    if (tmp___0 == 0 && 1) {
#line 2632
      __warned = 1;
#line 2632
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             2632, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 2632
  after_sb_1p = (enum drbd_after_sb_p )_________p1->after_sb_1p;
#line 2633
  rcu_read_unlock();
#line 2634
  switch ((unsigned int )after_sb_1p) {
  case 1U: ;
  case 2U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 3U: 
#line 2641
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2642
  goto ldv_53267;
  case 0U: ;
#line 2644
  goto ldv_53267;
  case 7U: 
#line 2646
  hg = drbd_asb_recover_0p(mdev);
#line 2647
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 748UL) == 2U) {
#line 2648
    rv = hg;
  } else {

  }
#line 2649
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 748UL) == 1U) {
#line 2650
    rv = hg;
  } else {

  }
#line 2651
  goto ldv_53267;
  case 10U: 
#line 2653
  rv = drbd_asb_recover_0p(mdev);
#line 2654
  goto ldv_53267;
  case 8U: ;
#line 2656
  return ((unsigned int )*((unsigned char *)mdev + 748UL) == 1U ? 1 : -1);
  case 9U: 
#line 2658
  hg = drbd_asb_recover_0p(mdev);
#line 2659
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 748UL) == 1U) {
#line 2662
    drbd_set_role(mdev, R_SECONDARY, 0);
#line 2666
    val.i = 0U;
#line 2666
    val.ldv_40604.role = 2U;
#line 2666
    mask.i = 0U;
#line 2666
    mask.ldv_40604.role = 3U;
#line 2666
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2667
    if ((int )rv2 != 1) {
#line 2668
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2670
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2671
      rv = hg;
    }
  } else {
#line 2674
    rv = hg;
  }
  }
  ldv_53267: ;
#line 2677
  return (rv);
}
}
#line 2680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_after_sb_p after_sb_2p ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2682
  rv = -100;
#line 2685
  rcu_read_lock();
#line 2686
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 2686
  tmp = debug_lockdep_rcu_enabled();
#line 2686
  if (tmp != 0 && ! __warned) {
#line 2686
    tmp___0 = rcu_read_lock_held();
#line 2686
    if (tmp___0 == 0 && 1) {
#line 2686
      __warned = 1;
#line 2686
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             2686, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 2686
  after_sb_2p = (enum drbd_after_sb_p )_________p1->after_sb_2p;
#line 2687
  rcu_read_unlock();
#line 2688
  switch ((unsigned int )after_sb_2p) {
  case 1U: ;
  case 2U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 8U: ;
  case 3U: 
#line 2697
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2698
  goto ldv_53295;
  case 10U: 
#line 2700
  rv = drbd_asb_recover_0p(mdev);
#line 2701
  goto ldv_53295;
  case 0U: ;
#line 2703
  goto ldv_53295;
  case 9U: 
#line 2705
  hg = drbd_asb_recover_0p(mdev);
#line 2706
  if (hg == -1) {
#line 2712
    val.i = 0U;
#line 2712
    val.ldv_40604.role = 2U;
#line 2712
    mask.i = 0U;
#line 2712
    mask.ldv_40604.role = 3U;
#line 2712
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2713
    if ((int )rv2 != 1) {
#line 2714
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2716
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2717
      rv = hg;
    }
  } else {
#line 2720
    rv = hg;
  }
  }
  ldv_53295: ;
#line 2723
  return (rv);
}
}
#line 2726 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2729
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2730
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2731
    return;
  } else {

  }
#line 2733
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2734
  return;
}
}
#line 2755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2760
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2761
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2763
  *rule_nr = 10;
#line 2764
  if (self == 4ULL && peer == 4ULL) {
#line 2765
    return (0);
  } else {

  }
#line 2767
  *rule_nr = 20;
#line 2768
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2770
    return (-2);
  } else {

  }
#line 2772
  *rule_nr = 30;
#line 2773
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2775
    return (2);
  } else {

  }
#line 2777
  if (self == peer) {
#line 2780
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2782
      if ((mdev->tconn)->agreed_pro_version <= 90) {
#line 2783
        return (-1091);
      } else {

      }
#line 2785
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2787
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2788
        drbd_uuid_move_history(mdev);
#line 2789
        (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 2790
        (mdev->ldev)->md.uuid[1] = 0ULL;
#line 2792
        if ((int )mdev->state.ldv_50103.disk > 2) {
#line 2792
          tmp = drbd_bm_total_weight(mdev);
#line 2792
          tmp___0 = (u64 )tmp;
        } else {
#line 2792
          tmp___0 = 0ULL;
        }
#line 2792
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2794
        *rule_nr = 34;
      } else {
#line 2796
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2797
        *rule_nr = 36;
      }
#line 2800
      return (1);
    } else {

    }
#line 2803
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2805
      if ((mdev->tconn)->agreed_pro_version <= 90) {
#line 2806
        return (-1091);
      } else {

      }
#line 2808
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2810
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2812
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2813
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2814
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2816
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2817
        *rule_nr = 35;
      } else {
#line 2819
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2820
        *rule_nr = 37;
      }
#line 2823
      return (-1);
    } else {

    }
#line 2827
    tmp___1 = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 2827
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2831
    *rule_nr = 40;
#line 2833
    switch (rct) {
    case 0: ;
#line 2834
    return (0);
    case 1: ;
#line 2835
    return (1);
    case 2: ;
#line 2836
    return (-1);
    case 3: 
#line 2838
    dc = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->tconn)->flags));
#line 2839
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2843
  *rule_nr = 50;
#line 2844
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2845
  if (self == peer) {
#line 2846
    return (-1);
  } else {

  }
#line 2848
  *rule_nr = 51;
#line 2849
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2850
  if (self == peer) {
#line 2851
    if ((mdev->tconn)->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL : peer + 281474976710656ULL == (*(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL)) {
#line 2858
      if ((mdev->tconn)->agreed_pro_version <= 90) {
#line 2859
        return (-1091);
      } else {

      }
#line 2861
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2862
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2864
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Lost last syncUUID packet, corrected:\n");
#line 2865
      drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2867
      return (-1);
    } else {

    }
  } else {

  }
#line 2871
  *rule_nr = 60;
#line 2872
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2873
  i = 2;
#line 2873
  goto ldv_53326;
  ldv_53325: 
#line 2874
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2875
  if (self == peer) {
#line 2876
    return (-2);
  } else {

  }
#line 2873
  i = i + 1;
  ldv_53326: ;
#line 2873
  if (i <= 3) {
#line 2874
    goto ldv_53325;
  } else {

  }
#line 2879
  *rule_nr = 70;
#line 2880
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2881
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2882
  if (self == peer) {
#line 2883
    return (1);
  } else {

  }
#line 2885
  *rule_nr = 71;
#line 2886
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2887
  if (self == peer) {
#line 2888
    if ((mdev->tconn)->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL : self + 281474976710656ULL == ((mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL)) {
#line 2895
      if ((mdev->tconn)->agreed_pro_version <= 90) {
#line 2896
        return (-1091);
      } else {

      }
#line 2898
      __drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2899
      __drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2901
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Last syncUUID did not get through, corrected:\n");
#line 2902
      if ((int )mdev->state.ldv_50103.disk > 2) {
#line 2902
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2902
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2902
        tmp___3 = 0ULL;
      }
#line 2902
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2905
      return (1);
    } else {

    }
  } else {

  }
#line 2910
  *rule_nr = 80;
#line 2911
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2912
  i = 2;
#line 2912
  goto ldv_53329;
  ldv_53328: 
#line 2913
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2914
  if (self == peer) {
#line 2915
    return (2);
  } else {

  }
#line 2912
  i = i + 1;
  ldv_53329: ;
#line 2912
  if (i <= 3) {
#line 2913
    goto ldv_53328;
  } else {

  }
#line 2918
  *rule_nr = 90;
#line 2919
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2920
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2921
  if (self == peer && self != 0ULL) {
#line 2922
    return (100);
  } else {

  }
#line 2924
  *rule_nr = 100;
#line 2925
  i = 2;
#line 2925
  goto ldv_53335;
  ldv_53334: 
#line 2926
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2927
  j = 2;
#line 2927
  goto ldv_53332;
  ldv_53331: 
#line 2928
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2929
  if (self == peer) {
#line 2930
    return (-100);
  } else {

  }
#line 2927
  j = j + 1;
  ldv_53332: ;
#line 2927
  if (j <= 3) {
#line 2928
    goto ldv_53331;
  } else {

  }
#line 2925
  i = i + 1;
  ldv_53335: ;
#line 2925
  if (i <= 3) {
#line 2926
    goto ldv_53334;
  } else {

  }

#line 2934
  return (-1000);
}
}
#line 2940 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  struct net_conf *nc ;
  int hg ;
  int rule_nr ;
  int rr_conflict ;
  int tentative ;
  int f ;
  long ret ;
  int __x___0 ;
  int tmp ;
  long ret___0 ;
  int __x___2 ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;
  int pcount ;
  int forced ;
  long ret___1 ;
  int __x___4 ;
  int tmp___2 ;
  int tmp___3 ;
  long ret___2 ;
  int __x___6 ;
  long ret___3 ;
  int __x___8 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long ret___4 ;
  int __x___10 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;

  {
#line 2943
  rv = C_MASK;
#line 2948
  mydisk = (enum drbd_disk_state )mdev->state.ldv_50103.disk;
#line 2949
  if ((unsigned int )mydisk == 3U) {
#line 2950
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_40604.disk;
  } else {

  }
#line 2952
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2954
  spin_lock_irq(& (mdev->ldev)->md.uuid_lock);
#line 2955
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2956
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2959
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2960
  spin_unlock_irq(& (mdev->ldev)->md.uuid_lock);
#line 2962
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2964
  if (hg == -1000) {
#line 2965
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2966
    return (C_MASK);
  } else {

  }
#line 2968
  if (hg < -1000) {
#line 2969
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol %d\n",
              -1000 - hg);
#line 2970
    return (C_MASK);
  } else {

  }
#line 2973
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2975
    if (hg == -100) {
#line 2975
      tmp = 1;
    } else {
#line 2975
      __x___0 = hg;
#line 2975
      ret = (long )(__x___0 < 0 ? - __x___0 : __x___0);
#line 2975
      if (ret == 2L) {
#line 2975
        tmp = 1;
      } else {
#line 2975
        tmp = 0;
      }
    }
#line 2975
    f = tmp;
#line 2976
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2977
    if (f != 0) {
#line 2978
      hg = hg * 2;
    } else {

    }
#line 2979
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2983
  __x___2 = hg;
#line 2983
  ret___0 = (long )(__x___2 < 0 ? - __x___2 : __x___2);
#line 2983
  if (ret___0 == 100L) {
#line 2984
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2986
  rcu_read_lock();
#line 2987
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 2987
  tmp___0 = debug_lockdep_rcu_enabled();
#line 2987
  if (tmp___0 != 0 && ! __warned) {
#line 2987
    tmp___1 = rcu_read_lock_held();
#line 2987
    if (tmp___1 == 0 && 1) {
#line 2987
      __warned = 1;
#line 2987
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             2987, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 2987
  nc = _________p1;
#line 2989
  if (hg == 100 || (hg == -100 && (int )((signed char )nc->always_asbp) != 0)) {
#line 2990
    pcount = ((unsigned int )*((unsigned char *)mdev + 748UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2992
    forced = hg == -100;
#line 2994
    switch (pcount) {
    case 0: 
#line 2996
    hg = drbd_asb_recover_0p(mdev);
#line 2997
    goto ldv_53364;
    case 1: 
#line 2999
    hg = drbd_asb_recover_1p(mdev);
#line 3000
    goto ldv_53364;
    case 2: 
#line 3002
    hg = drbd_asb_recover_2p(mdev);
#line 3003
    goto ldv_53364;
    }
    ldv_53364: 
#line 3005
    __x___4 = hg;
#line 3005
    ret___1 = (long )(__x___4 < 0 ? - __x___4 : __x___4);
#line 3005
    if (ret___1 <= 99L) {
#line 3006
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 3009
      if (forced != 0) {
#line 3010
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 3012
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 3017
  if (hg == -100) {
#line 3018
    tmp___2 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3018
    if (tmp___2 != 0 && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 3019
      hg = -1;
    } else {

    }
#line 3020
    tmp___3 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3020
    if (tmp___3 == 0 && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 3021
      hg = 1;
    } else {

    }
#line 3023
    __x___6 = hg;
#line 3023
    ret___2 = (long )(__x___6 < 0 ? - __x___6 : __x___6);
#line 3023
    if (ret___2 <= 99L) {
#line 3024
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 3028
  rr_conflict = (int )nc->rr_conflict;
#line 3029
  tentative = (int )nc->tentative;
#line 3030
  rcu_read_unlock();
#line 3032
  if (hg == -100) {
#line 3037
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 3038
    drbd_khelper(mdev, (char *)"split-brain");
#line 3039
    return (C_MASK);
  } else {

  }
#line 3042
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 3043
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 3044
    return (C_MASK);
  } else {

  }
#line 3047
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 748UL) == 1U) && (int )mdev->state.ldv_50103.disk > 6) {
#line 3049
    switch (rr_conflict) {
    case 9: 
#line 3051
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 3054
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 3055
    return (C_MASK);
    case 10: 
#line 3057
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 3062
  if (tentative != 0) {
#line 3062
    goto _L;
  } else {
#line 3062
    tmp___5 = constant_test_bit(8U, (unsigned long const volatile   *)(& (mdev->tconn)->flags));
#line 3062
    if (tmp___5 != 0) {
      _L: /* CIL Label */ 
#line 3063
      if (hg == 0) {
#line 3064
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 3066
        __x___8 = hg;
#line 3066
        ret___3 = (long )(__x___8 < 0 ? - __x___8 : __x___8);
#line 3066
        tmp___4 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 3066
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___4, ret___3 > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 3069
      return (C_MASK);
    } else {

    }
  }
#line 3072
  __x___10 = hg;
#line 3072
  ret___4 = (long )(__x___10 < 0 ? - __x___10 : __x___10);
#line 3072
  if (ret___4 > 1L) {
#line 3073
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 3074
    tmp___6 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake",
                             BM_LOCKED_SET_ALLOWED);
#line 3074
    if (tmp___6 != 0) {
#line 3076
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 3079
  if (hg > 0) {
#line 3080
    rv = C_WF_BITMAP_S;
  } else
#line 3081
  if (hg < 0) {
#line 3082
    rv = C_WF_BITMAP_T;
  } else {
#line 3084
    rv = C_CONNECTED;
#line 3085
    tmp___8 = drbd_bm_total_weight(mdev);
#line 3085
    if (tmp___8 != 0UL) {
#line 3086
      tmp___7 = drbd_bm_total_weight(mdev);
#line 3086
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___7);
    } else {

    }
  }
#line 3091
  return (rv);
}
}
#line 3094 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_after_sb_p convert_after_sb(enum drbd_after_sb_p peer ) 
{ 


  {
#line 3097
  if ((unsigned int )peer == 6U) {
#line 3098
    return (ASB_DISCARD_LOCAL);
  } else {

  }
#line 3101
  if ((unsigned int )peer == 5U) {
#line 3102
    return (ASB_DISCARD_REMOTE);
  } else {

  }
#line 3105
  return (peer);
}
}
#line 3108 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct p_protocol *p ;
  enum drbd_after_sb_p p_after_sb_0p ;
  enum drbd_after_sb_p p_after_sb_1p ;
  enum drbd_after_sb_p p_after_sb_2p ;
  int p_proto ;
  int p_discard_my_data ;
  int p_two_primaries ;
  int cf ;
  struct net_conf *nc ;
  struct net_conf *old_net_conf ;
  struct net_conf *new_net_conf ;
  char integrity_alg[64U] ;
  unsigned int tmp ;
  struct crypto_hash *peer_integrity_tfm ;
  void *int_dig_in ;
  void *int_dig_vv ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int err ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___6 ;
  int tmp___7 ;
  enum drbd_after_sb_p tmp___8 ;
  enum drbd_after_sb_p tmp___9 ;
  enum drbd_after_sb_p tmp___10 ;
  int tmp___11 ;
  int hash_size ;
  unsigned int tmp___12 ;
  void *tmp___13 ;
  enum drbd_after_sb_p tmp___14 ;
  enum drbd_after_sb_p tmp___15 ;
  enum drbd_after_sb_p tmp___16 ;
  int tmp___17 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3110
  p = (struct p_protocol *)pi->data;
#line 3113
  new_net_conf = 0;
#line 3114
  integrity_alg[0] = '\000';
#line 3114
  tmp = 1U;
#line 3114
  while (1) {
#line 3114
    if (tmp >= 64U) {
#line 3114
      break;
    } else {

    }
#line 3114
    integrity_alg[tmp] = (char)0;
#line 3114
    tmp = tmp + 1U;
  }
#line 3115
  peer_integrity_tfm = 0;
#line 3116
  int_dig_in = 0;
#line 3116
  int_dig_vv = 0;
#line 3118
  tmp___0 = __fswab32(p->protocol);
#line 3118
  p_proto = (int )tmp___0;
#line 3119
  tmp___1 = __fswab32(p->after_sb_0p);
#line 3119
  p_after_sb_0p = (enum drbd_after_sb_p )tmp___1;
#line 3120
  tmp___2 = __fswab32(p->after_sb_1p);
#line 3120
  p_after_sb_1p = (enum drbd_after_sb_p )tmp___2;
#line 3121
  tmp___3 = __fswab32(p->after_sb_2p);
#line 3121
  p_after_sb_2p = (enum drbd_after_sb_p )tmp___3;
#line 3122
  tmp___4 = __fswab32(p->two_primaries);
#line 3122
  p_two_primaries = (int )tmp___4;
#line 3123
  tmp___5 = __fswab32(p->conn_flags);
#line 3123
  cf = (int )tmp___5;
#line 3124
  p_discard_my_data = cf & 1;
#line 3126
  if (tconn->agreed_pro_version > 86) {
#line 3129
    if (pi->size > 64U) {
#line 3130
      return (-5);
    } else {

    }
#line 3131
    err = drbd_recv_all(tconn, (void *)(& integrity_alg), (size_t )pi->size);
#line 3132
    if (err != 0) {
#line 3133
      return (err);
    } else {

    }
#line 3134
    integrity_alg[63] = 0;
  } else {

  }
#line 3137
  if ((unsigned int )pi->cmd != 45U) {
#line 3138
    clear_bit(8, (unsigned long volatile   *)(& tconn->flags));
#line 3140
    if ((cf & 2) != 0) {
#line 3141
      set_bit(8U, (unsigned long volatile   *)(& tconn->flags));
    } else {

    }
#line 3143
    rcu_read_lock();
#line 3144
    _________p1 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 3144
    tmp___6 = debug_lockdep_rcu_enabled();
#line 3144
    if (tmp___6 != 0 && ! __warned) {
#line 3144
      tmp___7 = rcu_read_lock_held();
#line 3144
      if (tmp___7 == 0 && 1) {
#line 3144
        __warned = 1;
#line 3144
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                               3144, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 3144
    nc = _________p1;
#line 3146
    if ((__u32 )p_proto != nc->wire_protocol) {
#line 3147
      printk("\vd-con %s: incompatible %s settings\n", tconn->name, (char *)"protocol");
#line 3148
      goto disconnect_rcu_unlock;
    } else {

    }
#line 3151
    tmp___8 = convert_after_sb(p_after_sb_0p);
#line 3151
    if ((unsigned int )tmp___8 != nc->after_sb_0p) {
#line 3152
      printk("\vd-con %s: incompatible %s settings\n", tconn->name, (char *)"after-sb-0pri");
#line 3153
      goto disconnect_rcu_unlock;
    } else {

    }
#line 3156
    tmp___9 = convert_after_sb(p_after_sb_1p);
#line 3156
    if ((unsigned int )tmp___9 != nc->after_sb_1p) {
#line 3157
      printk("\vd-con %s: incompatible %s settings\n", tconn->name, (char *)"after-sb-1pri");
#line 3158
      goto disconnect_rcu_unlock;
    } else {

    }
#line 3161
    tmp___10 = convert_after_sb(p_after_sb_2p);
#line 3161
    if ((unsigned int )tmp___10 != nc->after_sb_2p) {
#line 3162
      printk("\vd-con %s: incompatible %s settings\n", tconn->name, (char *)"after-sb-2pri");
#line 3163
      goto disconnect_rcu_unlock;
    } else {

    }
#line 3166
    if (p_discard_my_data != 0 && (int )((signed char )nc->discard_my_data) != 0) {
#line 3167
      printk("\vd-con %s: incompatible %s settings\n", tconn->name, (char *)"discard-my-data");
#line 3168
      goto disconnect_rcu_unlock;
    } else {

    }
#line 3171
    if ((int )nc->two_primaries != p_two_primaries) {
#line 3172
      printk("\vd-con %s: incompatible %s settings\n", tconn->name, (char *)"allow-two-primaries");
#line 3173
      goto disconnect_rcu_unlock;
    } else {

    }
#line 3176
    tmp___11 = strcmp((char const   *)(& integrity_alg), (char const   *)(& nc->integrity_alg));
#line 3176
    if (tmp___11 != 0) {
#line 3177
      printk("\vd-con %s: incompatible %s settings\n", tconn->name, (char *)"data-integrity-alg");
#line 3178
      goto disconnect_rcu_unlock;
    } else {

    }
#line 3181
    rcu_read_unlock();
  } else {

  }
#line 3184
  if ((int )((signed char )integrity_alg[0]) != 0) {
#line 3196
    peer_integrity_tfm = crypto_alloc_hash((char const   *)(& integrity_alg), 0U,
                                           128U);
#line 3197
    if ((unsigned long )peer_integrity_tfm == (unsigned long )((struct crypto_hash *)0)) {
#line 3198
      printk("\vd-con %s: peer data-integrity-alg %s not supported\n", tconn->name,
             (char *)(& integrity_alg));
#line 3200
      goto disconnect;
    } else {

    }
#line 3203
    tmp___12 = crypto_hash_digestsize(peer_integrity_tfm);
#line 3203
    hash_size = (int )tmp___12;
#line 3204
    int_dig_in = kmalloc((size_t )hash_size, 208U);
#line 3205
    int_dig_vv = kmalloc((size_t )hash_size, 208U);
#line 3206
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0) || (unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 3207
      printk("\vd-con %s: Allocation of buffers for data integrity checking failed\n",
             tconn->name);
#line 3208
      goto disconnect;
    } else {

    }
  } else {

  }
#line 3212
  tmp___13 = kmalloc(420UL, 208U);
#line 3212
  new_net_conf = (struct net_conf *)tmp___13;
#line 3213
  if ((unsigned long )new_net_conf == (unsigned long )((struct net_conf *)0)) {
#line 3214
    printk("\vd-con %s: Allocation of new net_conf failed\n", tconn->name);
#line 3215
    goto disconnect;
  } else {

  }
#line 3218
  mutex_lock_nested(& tconn->data.mutex, 0U);
#line 3219
  mutex_lock_nested(& tconn->conf_update, 0U);
#line 3220
  old_net_conf = tconn->net_conf;
#line 3221
  *new_net_conf = *old_net_conf;
#line 3223
  new_net_conf->wire_protocol = (__u32 )p_proto;
#line 3224
  tmp___14 = convert_after_sb(p_after_sb_0p);
#line 3224
  new_net_conf->after_sb_0p = (__u32 )tmp___14;
#line 3225
  tmp___15 = convert_after_sb(p_after_sb_1p);
#line 3225
  new_net_conf->after_sb_1p = (__u32 )tmp___15;
#line 3226
  tmp___16 = convert_after_sb(p_after_sb_2p);
#line 3226
  new_net_conf->after_sb_2p = (__u32 )tmp___16;
#line 3227
  new_net_conf->two_primaries = (char )p_two_primaries;
#line 3229
  __asm__  volatile   ("": : : "memory");
#line 3229
  tconn->net_conf = new_net_conf;
#line 3230
  mutex_unlock(& tconn->conf_update);
#line 3231
  mutex_unlock(& tconn->data.mutex);
#line 3233
  crypto_free_hash(tconn->peer_integrity_tfm);
#line 3234
  kfree((void const   *)tconn->int_dig_in);
#line 3235
  kfree((void const   *)tconn->int_dig_vv);
#line 3236
  tconn->peer_integrity_tfm = peer_integrity_tfm;
#line 3237
  tconn->int_dig_in = int_dig_in;
#line 3238
  tconn->int_dig_vv = int_dig_vv;
#line 3240
  tmp___17 = strcmp((char const   *)(& old_net_conf->integrity_alg), (char const   *)(& integrity_alg));
#line 3240
  if (tmp___17 != 0) {
#line 3241
    printk("\016d-con %s: peer data-integrity-alg: %s\n", tconn->name, (int )((signed char )integrity_alg[0]) != 0 ? (char *)(& integrity_alg) : (char *)"(none)");
  } else {

  }
#line 3244
  synchronize_rcu();
#line 3245
  kfree((void const   *)old_net_conf);
#line 3246
  return (0);
  disconnect_rcu_unlock: 
#line 3249
  rcu_read_unlock();
  disconnect: 
#line 3251
  crypto_free_hash(peer_integrity_tfm);
#line 3252
  kfree((void const   *)int_dig_in);
#line 3253
  kfree((void const   *)int_dig_vv);
#line 3254
  val.i = 0U;
#line 3254
  val.ldv_40604.conn = 1U;
#line 3254
  mask.i = 0U;
#line 3254
  mask.ldv_40604.conn = 31U;
#line 3254
  conn_request_state(tconn, mask, val, CS_HARD);
#line 3255
  return (-5);
}
}
#line 3263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;

  {
#line 3268
  if ((int )((signed char )*alg) == 0) {
#line 3269
    return (0);
  } else {

  }
#line 3271
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 3272
  tmp___0 = IS_ERR((void const   *)tfm);
#line 3272
  if (tmp___0 != 0L) {
#line 3273
    tmp = PTR_ERR((void const   *)tfm);
#line 3273
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 3275
    return (tfm);
  } else {

  }
#line 3277
  return (tfm);
}
}
#line 3280 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int ignore_remaining_packet(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  void *buffer ;
  int size ;
  int s ;
  int __min1 ;
  int __min2 ;

  {
#line 3282
  buffer = tconn->data.rbuf;
#line 3283
  size = (int )pi->size;
#line 3285
  goto ldv_53437;
  ldv_53436: 
#line 3286
  __min1 = size;
#line 3286
  __min2 = 4096;
#line 3286
  s = __min1 < __min2 ? __min1 : __min2;
#line 3287
  s = drbd_recv(tconn, buffer, (size_t )s);
#line 3288
  if (s <= 0) {
#line 3289
    if (s < 0) {
#line 3290
      return (s);
    } else {

    }
#line 3291
    goto ldv_53435;
  } else {

  }
#line 3293
  size = size - s;
  ldv_53437: ;
#line 3285
  if (size != 0) {
#line 3286
    goto ldv_53436;
  } else {

  }
  ldv_53435: ;
#line 3295
  if (size != 0) {
#line 3296
    return (-5);
  } else {

  }
#line 3297
  return (0);
}
}
#line 3311 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int config_unknown_volume(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  char const   *tmp ;
  int tmp___0 ;

  {
#line 3313
  tmp = cmdname(pi->cmd);
#line 3313
  printk("\fd-con %s: %s packet received for volume %u, which is not configured locally\n",
         tconn->name, tmp, pi->vnr);
#line 3315
  tmp___0 = ignore_remaining_packet(tconn, pi);
#line 3315
  return (tmp___0);
}
}
#line 3318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_rs_param_95 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct net_conf *old_net_conf ;
  struct net_conf *new_net_conf ;
  struct disk_conf *old_disk_conf ;
  struct disk_conf *new_disk_conf ;
  int apv ;
  struct fifo_buffer *old_plan ;
  struct fifo_buffer *new_plan ;
  int fifo_size ;
  int err ;
  int tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  void *tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3323
  verify_tfm = 0;
#line 3324
  csums_tfm = 0;
#line 3325
  new_net_conf = 0;
#line 3326
  old_disk_conf = 0;
#line 3326
  new_disk_conf = 0;
#line 3327
  apv = tconn->agreed_pro_version;
#line 3328
  old_plan = 0;
#line 3328
  new_plan = 0;
#line 3329
  fifo_size = 0;
#line 3332
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 3333
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3334
    tmp = config_unknown_volume(tconn, pi);
#line 3334
    return (tmp);
  } else {

  }
#line 3336
  exp_max_sz = apv > 87 ? (apv != 88 ? (apv <= 94 ? 132U : 148U) : 68U) : 4U;
#line 3342
  if (pi->size > exp_max_sz) {
#line 3343
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            pi->size, exp_max_sz);
#line 3345
    return (-5);
  } else {

  }
#line 3348
  if (apv <= 88) {
#line 3349
    header_size = 4U;
#line 3350
    data_size = pi->size - header_size;
  } else
#line 3351
  if (apv <= 94) {
#line 3352
    header_size = 132U;
#line 3353
    data_size = pi->size - header_size;
#line 3354
    if (data_size != 0U) {
#line 3354
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              3354);
    } else {

    }
  } else {
#line 3356
    header_size = 148U;
#line 3357
    data_size = pi->size - header_size;
#line 3358
    if (data_size != 0U) {
#line 3358
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              3358);
    } else {

    }
  }
#line 3362
  p = (struct p_rs_param_95 *)pi->data;
#line 3363
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 3365
  err = drbd_recv_all(mdev->tconn, (void *)p, (size_t )header_size);
#line 3366
  if (err != 0) {
#line 3367
    return (err);
  } else {

  }
#line 3369
  mutex_lock_nested(& (mdev->tconn)->conf_update, 0U);
#line 3370
  old_net_conf = (mdev->tconn)->net_conf;
#line 3371
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3371
  if (tmp___2 != 0) {
#line 3372
    tmp___0 = kzalloc(344UL, 208U);
#line 3372
    new_disk_conf = (struct disk_conf *)tmp___0;
#line 3373
    if ((unsigned long )new_disk_conf == (unsigned long )((struct disk_conf *)0)) {
#line 3374
      put_ldev(mdev);
#line 3375
      mutex_unlock(& (mdev->tconn)->conf_update);
#line 3376
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of new disk_conf failed\n");
#line 3377
      return (-12);
    } else {

    }
#line 3380
    old_disk_conf = (mdev->ldev)->disk_conf;
#line 3381
    *new_disk_conf = *old_disk_conf;
#line 3383
    tmp___1 = __fswab32(p->resync_rate);
#line 3383
    new_disk_conf->resync_rate = tmp___1;
  } else {

  }
#line 3386
  if (apv > 87) {
#line 3387
    if (apv == 88) {
#line 3388
      if (data_size > 64U || data_size == 0U) {
#line 3389
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg of wrong size, peer wants %u, accepting only up to %u byte\n",
                data_size, 64);
#line 3392
        err = -5;
#line 3393
        goto reconnect;
      } else {

      }
#line 3396
      err = drbd_recv_all(mdev->tconn, (void *)(& p->verify_alg), (size_t )data_size);
#line 3397
      if (err != 0) {
#line 3398
        goto reconnect;
      } else {

      }
#line 3401
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 3401
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                3401);
      } else {

      }
#line 3402
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 3407
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 3407
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                3407);
      } else {

      }
#line 3408
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 3408
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                3408);
      } else {

      }
#line 3409
      p->verify_alg[63] = 0;
#line 3410
      p->csums_alg[63] = 0;
    }
#line 3413
    tmp___4 = strcmp((char const   *)(& old_net_conf->verify_alg), (char const   *)(& p->verify_alg));
#line 3413
    if (tmp___4 != 0) {
#line 3414
      if ((unsigned int )*((unsigned short *)mdev + 374UL) == 144U) {
#line 3415
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (char *)(& old_net_conf->verify_alg), (char *)(& p->verify_alg));
#line 3417
        goto disconnect;
      } else {

      }
#line 3419
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 3421
      tmp___3 = IS_ERR((void const   *)verify_tfm);
#line 3421
      if (tmp___3 != 0L) {
#line 3422
        verify_tfm = 0;
#line 3423
        goto disconnect;
      } else {

      }
    } else {

    }
#line 3427
    if (apv > 88) {
#line 3427
      tmp___6 = strcmp((char const   *)(& old_net_conf->csums_alg), (char const   *)(& p->csums_alg));
#line 3427
      if (tmp___6 != 0) {
#line 3428
        if ((unsigned int )*((unsigned short *)mdev + 374UL) == 144U) {
#line 3429
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (char *)(& old_net_conf->csums_alg), (char *)(& p->csums_alg));
#line 3431
          goto disconnect;
        } else {

        }
#line 3433
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 3435
        tmp___5 = IS_ERR((void const   *)csums_tfm);
#line 3435
        if (tmp___5 != 0L) {
#line 3436
          csums_tfm = 0;
#line 3437
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 3441
    if (apv > 94 && (unsigned long )new_disk_conf != (unsigned long )((struct disk_conf *)0)) {
#line 3442
      tmp___7 = __fswab32(p->c_plan_ahead);
#line 3442
      new_disk_conf->c_plan_ahead = tmp___7;
#line 3443
      tmp___8 = __fswab32(p->c_delay_target);
#line 3443
      new_disk_conf->c_delay_target = tmp___8;
#line 3444
      tmp___9 = __fswab32(p->c_fill_target);
#line 3444
      new_disk_conf->c_fill_target = tmp___9;
#line 3445
      tmp___10 = __fswab32(p->c_max_rate);
#line 3445
      new_disk_conf->c_max_rate = tmp___10;
#line 3447
      fifo_size = (int )((new_disk_conf->c_plan_ahead * 250U) / 250U);
#line 3448
      if ((unsigned int )fifo_size != (mdev->rs_plan_s)->size) {
#line 3449
        new_plan = fifo_alloc(fifo_size);
#line 3450
        if ((unsigned long )new_plan == (unsigned long )((struct fifo_buffer *)0)) {
#line 3451
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 3452
          put_ldev(mdev);
#line 3453
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 3458
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0) || (unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 3459
      tmp___11 = kzalloc(420UL, 208U);
#line 3459
      new_net_conf = (struct net_conf *)tmp___11;
#line 3460
      if ((unsigned long )new_net_conf == (unsigned long )((struct net_conf *)0)) {
#line 3461
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of new net_conf failed\n");
#line 3462
        goto disconnect;
      } else {

      }
#line 3465
      *new_net_conf = *old_net_conf;
#line 3467
      if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 3468
        strcpy((char *)(& new_net_conf->verify_alg), (char const   *)(& p->verify_alg));
#line 3469
        tmp___12 = strlen((char const   *)(& p->verify_alg));
#line 3469
        new_net_conf->verify_alg_len = (__u32 )tmp___12 + 1U;
#line 3470
        crypto_free_hash((mdev->tconn)->verify_tfm);
#line 3471
        (mdev->tconn)->verify_tfm = verify_tfm;
#line 3472
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                  (char *)(& p->verify_alg));
      } else {

      }
#line 3474
      if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 3475
        strcpy((char *)(& new_net_conf->csums_alg), (char const   *)(& p->csums_alg));
#line 3476
        tmp___13 = strlen((char const   *)(& p->csums_alg));
#line 3476
        new_net_conf->csums_alg_len = (__u32 )tmp___13 + 1U;
#line 3477
        crypto_free_hash((mdev->tconn)->csums_tfm);
#line 3478
        (mdev->tconn)->csums_tfm = csums_tfm;
#line 3479
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                  (char *)(& p->csums_alg));
      } else {

      }
#line 3481
      __asm__  volatile   ("": : : "memory");
#line 3481
      tconn->net_conf = new_net_conf;
    } else {

    }
  } else {

  }
#line 3485
  if ((unsigned long )new_disk_conf != (unsigned long )((struct disk_conf *)0)) {
#line 3486
    __asm__  volatile   ("": : : "memory");
#line 3486
    (mdev->ldev)->disk_conf = new_disk_conf;
#line 3487
    put_ldev(mdev);
  } else {

  }
#line 3490
  if ((unsigned long )new_plan != (unsigned long )((struct fifo_buffer *)0)) {
#line 3491
    old_plan = mdev->rs_plan_s;
#line 3492
    __asm__  volatile   ("": : : "memory");
#line 3492
    mdev->rs_plan_s = new_plan;
  } else {

  }
#line 3495
  mutex_unlock(& (mdev->tconn)->conf_update);
#line 3496
  synchronize_rcu();
#line 3497
  if ((unsigned long )new_net_conf != (unsigned long )((struct net_conf *)0)) {
#line 3498
    kfree((void const   *)old_net_conf);
  } else {

  }
#line 3499
  kfree((void const   *)old_disk_conf);
#line 3500
  kfree((void const   *)old_plan);
#line 3502
  return (0);
  reconnect: ;
#line 3505
  if ((unsigned long )new_disk_conf != (unsigned long )((struct disk_conf *)0)) {
#line 3506
    put_ldev(mdev);
#line 3507
    kfree((void const   *)new_disk_conf);
  } else {

  }
#line 3509
  mutex_unlock(& (mdev->tconn)->conf_update);
#line 3510
  return (-5);
  disconnect: 
#line 3513
  kfree((void const   *)new_plan);
#line 3514
  if ((unsigned long )new_disk_conf != (unsigned long )((struct disk_conf *)0)) {
#line 3515
    put_ldev(mdev);
#line 3516
    kfree((void const   *)new_disk_conf);
  } else {

  }
#line 3518
  mutex_unlock(& (mdev->tconn)->conf_update);
#line 3521
  crypto_free_hash(csums_tfm);
#line 3523
  crypto_free_hash(verify_tfm);
#line 3524
  val.i = 0U;
#line 3524
  val.ldv_40604.conn = 1U;
#line 3524
  mask.i = 0U;
#line 3524
  mask.ldv_40604.conn = 31U;
#line 3524
  conn_request_state(mdev->tconn, mask, val, CS_HARD);
#line 3525
  return (-5);
}
}
#line 3529 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 3533
  if (a == 0UL || b == 0UL) {
#line 3534
    return;
  } else {

  }
#line 3535
  d = a > b ? a - b : b - a;
#line 3536
  if (a >> 3 < d || b >> 3 < d) {
#line 3537
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 3539
  return;
}
}
#line 3541 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___2 ;
  int tmp___3 ;
  sector_t tmp___4 ;
  sector_t __x ;
  sector_t __y ;
  sector_t _min1 ;
  sector_t _min2 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  struct disk_conf *old_disk_conf ;
  struct disk_conf *new_disk_conf ;
  void *tmp___9 ;
  int tmp___10 ;
  __u16 tmp___11 ;
  int tmp___12 ;
  __u32 tmp___13 ;
  sector_t tmp___14 ;
  int tmp___15 ;
  __u64 tmp___16 ;
  sector_t tmp___17 ;
  int tmp___18 ;

  {
#line 3544
  p = (struct p_sizes *)pi->data;
#line 3545
  dd = 0;
#line 3547
  ldsc = 0;
#line 3550
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 3551
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3552
    tmp = config_unknown_volume(tconn, pi);
#line 3552
    return (tmp);
  } else {

  }
#line 3554
  tmp___0 = __fswab64(p->d_size);
#line 3554
  p_size = (sector_t )tmp___0;
#line 3555
  tmp___1 = __fswab64(p->u_size);
#line 3555
  p_usize = (sector_t )tmp___1;
#line 3559
  mdev->p_size = p_size;
#line 3561
  tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3561
  if (tmp___10 != 0) {
#line 3562
    rcu_read_lock();
#line 3563
    _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 3563
    tmp___2 = debug_lockdep_rcu_enabled();
#line 3563
    if (tmp___2 != 0 && ! __warned) {
#line 3563
      tmp___3 = rcu_read_lock_held();
#line 3563
      if (tmp___3 == 0 && 1) {
#line 3563
        __warned = 1;
#line 3563
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                               3563, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 3563
    my_usize = (sector_t )_________p1->disk_size;
#line 3564
    rcu_read_unlock();
#line 3566
    tmp___4 = drbd_get_max_capacity(mdev->ldev);
#line 3566
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___4);
#line 3568
    warn_if_differ_considerably(mdev, "user requested size", p_usize, my_usize);
#line 3573
    if ((unsigned int )*((unsigned short *)mdev + 374UL) == 144U) {
#line 3574
      __x = my_usize;
#line 3574
      __y = p_usize;
#line 3574
      if (__x != 0UL) {
#line 3574
        if (__y != 0UL) {
#line 3574
          _min1 = __x;
#line 3574
          _min2 = __y;
#line 3574
          tmp___5 = _min1 < _min2 ? _min1 : _min2;
        } else {
#line 3574
          tmp___5 = __x;
        }
#line 3574
        tmp___6 = tmp___5;
      } else {
#line 3574
        tmp___6 = __y;
      }
#line 3574
      p_usize = tmp___6;
    } else {

    }
#line 3578
    tmp___7 = drbd_new_dev_size(mdev, mdev->ldev, p_usize, 0);
#line 3578
    tmp___8 = drbd_get_capacity(mdev->this_bdev);
#line 3578
    if ((tmp___7 < tmp___8 && (int )mdev->state.ldv_50103.disk > 4) && (int )mdev->state.ldv_50103.conn <= 9) {
#line 3582
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 3583
      val.i = 0U;
#line 3583
      val.ldv_40604.conn = 1U;
#line 3583
      mask.i = 0U;
#line 3583
      mask.ldv_40604.conn = 31U;
#line 3583
      conn_request_state(mdev->tconn, mask, val, CS_HARD);
#line 3584
      put_ldev(mdev);
#line 3585
      return (-5);
    } else {

    }
#line 3588
    if (my_usize != p_usize) {
#line 3589
      new_disk_conf = 0;
#line 3591
      tmp___9 = kzalloc(344UL, 208U);
#line 3591
      new_disk_conf = (struct disk_conf *)tmp___9;
#line 3592
      if ((unsigned long )new_disk_conf == (unsigned long )((struct disk_conf *)0)) {
#line 3593
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of new disk_conf failed\n");
#line 3594
        put_ldev(mdev);
#line 3595
        return (-12);
      } else {

      }
#line 3598
      mutex_lock_nested(& (mdev->tconn)->conf_update, 0U);
#line 3599
      old_disk_conf = (mdev->ldev)->disk_conf;
#line 3600
      *new_disk_conf = *old_disk_conf;
#line 3601
      new_disk_conf->disk_size = (__u64 )p_usize;
#line 3603
      __asm__  volatile   ("": : : "memory");
#line 3603
      (mdev->ldev)->disk_conf = new_disk_conf;
#line 3604
      mutex_unlock(& (mdev->tconn)->conf_update);
#line 3605
      synchronize_rcu();
#line 3606
      kfree((void const   *)old_disk_conf);
#line 3608
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                my_usize);
    } else {

    }
#line 3612
    put_ldev(mdev);
  } else {

  }
#line 3615
  tmp___11 = __fswab16((int )p->dds_flags);
#line 3615
  ddsf = (enum dds_flags )tmp___11;
#line 3616
  tmp___12 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3616
  if (tmp___12 != 0) {
#line 3617
    dd = drbd_determine_dev_size(mdev, ddsf);
#line 3618
    put_ldev(mdev);
#line 3619
    if ((int )dd == -1) {
#line 3620
      return (-5);
    } else {

    }
#line 3621
    drbd_md_sync(mdev);
  } else {
#line 3624
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3627
  tmp___13 = __fswab32(p->max_bio_size);
#line 3627
  mdev->peer_max_bio_size = tmp___13;
#line 3628
  drbd_reconsider_max_bio_size(mdev);
#line 3630
  tmp___15 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3630
  if (tmp___15 != 0) {
#line 3631
    tmp___14 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3631
    if ((mdev->ldev)->known_size != tmp___14) {
#line 3632
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3633
      ldsc = 1;
    } else {

    }
#line 3636
    put_ldev(mdev);
  } else {

  }
#line 3639
  if ((int )mdev->state.ldv_50103.conn > 9) {
#line 3640
    tmp___16 = __fswab64(p->c_size);
#line 3640
    tmp___17 = drbd_get_capacity(mdev->this_bdev);
#line 3640
    if (tmp___16 != (unsigned long long )tmp___17 || ldsc != 0) {
#line 3644
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3646
    tmp___18 = test_and_clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 3646
    if (tmp___18 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 374UL) == 160U)) {
#line 3648
      if ((int )mdev->state.ldv_50103.pdsk > 3 && (int )mdev->state.ldv_50103.disk > 3) {
#line 3650
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3651
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3653
          resync_after_online_grow(mdev);
        }
      } else {
#line 3655
        set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3659
  return (0);
}
}
#line 3662 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int updated_uuids ;
  int tmp ;
  void *tmp___0 ;
  __u64 tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 3665
  p = (struct p_uuids *)pi->data;
#line 3667
  updated_uuids = 0;
#line 3669
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 3670
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3671
    tmp = config_unknown_volume(tconn, pi);
#line 3671
    return (tmp);
  } else {

  }
#line 3673
  tmp___0 = kmalloc(48UL, 16U);
#line 3673
  p_uuid = (u64 *)tmp___0;
#line 3675
  i = 0;
#line 3675
  goto ldv_53512;
  ldv_53511: 
#line 3676
  tmp___1 = __fswab64(p->uuid[i]);
#line 3676
  *(p_uuid + (unsigned long )i) = tmp___1;
#line 3675
  i = i + 1;
  ldv_53512: ;
#line 3675
  if (i <= 5) {
#line 3676
    goto ldv_53511;
  } else {

  }
#line 3678
  kfree((void const   *)mdev->p_uuid);
#line 3679
  mdev->p_uuid = p_uuid;
#line 3681
  if ((((int )mdev->state.ldv_50103.conn <= 9 && (int )mdev->state.ldv_50103.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 748UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3685
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3687
    val.i = 0U;
#line 3687
    val.ldv_40604.conn = 1U;
#line 3687
    mask.i = 0U;
#line 3687
    mask.ldv_40604.conn = 31U;
#line 3687
    conn_request_state(mdev->tconn, mask, val, CS_HARD);
#line 3688
    return (-5);
  } else {

  }
#line 3691
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3691
  if (tmp___2 != 0) {
#line 3692
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 374UL) == 160U && (mdev->tconn)->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3697
    if (skip_initial_sync != 0) {
#line 3698
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3699
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids",
                     BM_LOCKED_TEST_ALLOWED);
#line 3702
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3703
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3704
      __ns = drbd_read_state(mdev);
#line 3704
      __ns.ldv_40604.disk = 8U;
#line 3704
      __ns.ldv_40604.pdsk = 8U;
#line 3704
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3706
      drbd_md_sync(mdev);
#line 3707
      updated_uuids = 1;
    } else {

    }
#line 3709
    put_ldev(mdev);
  } else
#line 3710
  if ((int )mdev->state.ldv_50103.disk <= 3 && (unsigned int )*((unsigned char *)mdev + 748UL) == 1U) {
#line 3714
    updated_uuids = drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3721
  mutex_lock_nested(mdev->state_mutex, 0U);
#line 3722
  mutex_unlock(mdev->state_mutex);
#line 3723
  if ((int )mdev->state.ldv_50103.conn > 9 && (int )mdev->state.ldv_50103.disk <= 3) {
#line 3724
    tmp___3 = drbd_set_ed_uuid(mdev, *p_uuid);
#line 3724
    updated_uuids = tmp___3 | updated_uuids;
  } else {

  }
#line 3726
  if (updated_uuids != 0) {
#line 3727
    drbd_print_uuids(mdev, "receiver updated UUIDs to");
  } else {

  }
#line 3729
  return (0);
}
}
#line 3736 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3740
  c_tab[0] = 0;
#line 3740
  c_tab[1] = C_TEAR_DOWN;
#line 3740
  c_tab[2] = 0;
#line 3740
  c_tab[3] = 0;
#line 3740
  c_tab[4] = 0;
#line 3740
  c_tab[5] = 0;
#line 3740
  c_tab[6] = 0;
#line 3740
  c_tab[7] = 0;
#line 3740
  c_tab[8] = 0;
#line 3740
  c_tab[9] = C_WF_REPORT_PARAMS;
#line 3740
  c_tab[10] = C_CONNECTED;
#line 3740
  c_tab[11] = C_STARTING_SYNC_T;
#line 3740
  c_tab[12] = C_STARTING_SYNC_S;
#line 3740
  c_tab[13] = 0;
#line 3740
  c_tab[14] = 0;
#line 3740
  c_tab[15] = 0;
#line 3740
  c_tab[16] = 0;
#line 3740
  c_tab[17] = 0;
#line 3740
  c_tab[18] = C_VERIFY_T;
#line 3740
  c_tab[19] = 0;
#line 3740
  c_tab[20] = 0;
#line 3740
  c_tab[21] = 0;
#line 3740
  c_tab[22] = 0;
#line 3740
  c_tab[23] = 0;
#line 3740
  c_tab[24] = 0;
#line 3740
  c_tab[25] = 0;
#line 3740
  c_tab[26] = 0;
#line 3740
  c_tab[27] = 0;
#line 3740
  c_tab[28] = 0;
#line 3740
  c_tab[29] = 0;
#line 3740
  c_tab[30] = 0;
#line 3740
  c_tab[31] = C_MASK;
#line 3751
  ms.i = ps.i;
#line 3753
  ms.ldv_40604.conn = (unsigned char )c_tab[(int )ps.ldv_40604.conn];
#line 3754
  ms.ldv_40604.peer = ps.ldv_40604.role;
#line 3755
  ms.ldv_40604.role = ps.ldv_40604.peer;
#line 3756
  ms.ldv_40604.pdsk = ps.ldv_40604.disk;
#line 3757
  ms.ldv_40604.disk = ps.ldv_40604.pdsk;
#line 3758
  ms.ldv_40604.peer_isp = (unsigned char )((int )ps.ldv_40604.aftr_isp | (int )ps.ldv_40604.user_isp);
#line 3760
  return (ms);
}
}
#line 3763 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_state_rv rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3766
  p = (struct p_req_state *)pi->data;
#line 3770
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 3771
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3772
    return (-5);
  } else {

  }
#line 3774
  tmp = __fswab32(p->mask);
#line 3774
  mask.i = tmp;
#line 3775
  tmp___0 = __fswab32(p->val);
#line 3775
  val.i = tmp___0;
#line 3777
  tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->tconn)->flags));
#line 3777
  if (tmp___1 != 0) {
#line 3777
    tmp___2 = mutex_is_locked(mdev->state_mutex);
#line 3777
    if (tmp___2 != 0) {
#line 3779
      drbd_send_sr_reply(mdev, SS_CONCURRENT_ST_CHG);
#line 3780
      return (0);
    } else {

    }
  } else {

  }
#line 3783
  mask = convert_state(mask);
#line 3784
  val = convert_state(val);
#line 3786
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3787
  drbd_send_sr_reply(mdev, rv);
#line 3789
  drbd_md_sync(mdev);
#line 3791
  return (0);
}
}
#line 3794 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_conn_state(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_state_rv rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3796
  p = (struct p_req_state *)pi->data;
#line 3800
  tmp = __fswab32(p->mask);
#line 3800
  mask.i = tmp;
#line 3801
  tmp___0 = __fswab32(p->val);
#line 3801
  val.i = tmp___0;
#line 3803
  tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& tconn->flags));
#line 3803
  if (tmp___1 != 0) {
#line 3803
    tmp___2 = mutex_is_locked(& tconn->cstate_mutex);
#line 3803
    if (tmp___2 != 0) {
#line 3805
      conn_send_sr_reply(tconn, SS_CONCURRENT_ST_CHG);
#line 3806
      return (0);
    } else {

    }
  } else {

  }
#line 3809
  mask = convert_state(mask);
#line 3810
  val = convert_state(val);
#line 3812
  rv = conn_request_state(tconn, mask, val, 2066);
#line 3813
  conn_send_sr_reply(tconn, rv);
#line 3815
  return (0);
}
}
#line 3818 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_state *p ;
  union drbd_state os ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  enum chg_state_flags cs_flags ;
  int rv ;
  int tmp ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  unsigned long tmp___2 ;
  int cr ;
  int tmp___3 ;
  enum drbd_conns tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___5 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___6 ;
  union drbd_state tmp___7 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___8 ;
  int tmp___9 ;
  enum drbd_state_rv tmp___10 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;

  {
#line 3821
  p = (struct p_state *)pi->data;
#line 3827
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 3828
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3829
    tmp = config_unknown_volume(tconn, pi);
#line 3829
    return (tmp);
  } else {

  }
#line 3831
  tmp___0 = __fswab32(p->state);
#line 3831
  peer_state.i = tmp___0;
#line 3833
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_40604.disk;
#line 3834
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3835
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3836
    tmp___1 = drbd_disk_str(real_peer_disk);
#line 3836
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___1);
  } else {

  }
#line 3839
  spin_lock_irq(& (mdev->tconn)->req_lock);
  retry: 
#line 3841
  ns = drbd_read_state(mdev);
#line 3841
  os = ns;
#line 3842
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 3847
  if ((int )os.ldv_40604.conn <= 7) {
#line 3848
    return (-104);
  } else {

  }
#line 3856
  if ((((*((unsigned int *)(& os) + 0UL) == 32768U || *((unsigned int *)(& os) + 0UL) == 57344U) && (unsigned int )real_peer_disk == 8U) && (int )os.ldv_40604.conn > 10) && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) {
#line 3865
    if ((int )peer_state.ldv_40604.conn > 10 && (int )peer_state.ldv_40604.conn <= 15) {
#line 3867
      real_peer_disk = D_INCONSISTENT;
    } else
#line 3872
    if ((int )os.ldv_40604.conn > 15 && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) {
#line 3874
      tmp___2 = drbd_bm_total_weight(mdev);
#line 3874
      if (tmp___2 <= mdev->rs_failed) {
#line 3875
        drbd_resync_finished(mdev);
      } else {

      }
#line 3876
      return (0);
    } else {

    }
  } else {

  }
#line 3881
  if ((((unsigned int )*((unsigned short *)(& os) + 0UL) == 304U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) && (unsigned int )real_peer_disk == 8U) {
#line 3883
    ov_out_of_sync_print(mdev);
#line 3884
    drbd_resync_finished(mdev);
#line 3885
    return (0);
  } else {

  }
#line 3893
  if (((*((unsigned int *)(& os) + 0UL) == 65536U && (unsigned int )real_peer_disk == 4U) && (unsigned int )*((unsigned short *)(& os) + 0UL) == 160U) && (int )peer_state.ldv_40604.conn > 16) {
#line 3895
    real_peer_disk = D_UP_TO_DATE;
  } else {

  }
#line 3897
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 3898
    ns.ldv_40604.conn = 10U;
  } else {

  }
#line 3900
  if ((unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 352U) {
#line 3901
    ns.ldv_40604.conn = 23U;
  } else {

  }
#line 3903
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_40604.disk > 2) {
#line 3903
    tmp___6 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3903
    if (tmp___6 != 0) {
#line 3908
      cr = (int )os.ldv_40604.conn <= 9;
#line 3911
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U)) | cr;
#line 3916
      tmp___3 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 3916
      cr = tmp___3 | cr;
#line 3919
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((int )peer_state.ldv_40604.conn > 10 && (int )peer_state.ldv_40604.conn <= 14)) | cr;
#line 3923
      if (cr != 0) {
#line 3924
        tmp___4 = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_40604.role,
                                      real_peer_disk);
#line 3924
        ns.ldv_40604.conn = (unsigned char )tmp___4;
      } else {

      }
#line 3926
      put_ldev(mdev);
#line 3927
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 496U) {
#line 3928
        ns.ldv_40604.conn = 10U;
#line 3929
        if ((unsigned int )*((unsigned char *)mdev + 749UL) == 6U) {
#line 3930
          val.i = 0U;
#line 3930
          val.ldv_40604.disk = 2U;
#line 3930
          mask.i = 0U;
#line 3930
          mask.ldv_40604.disk = 15U;
#line 3930
          drbd_force_state(mdev, mask, val);
        } else
#line 3931
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3932
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3933
          peer_state.ldv_40604.disk = 0U;
#line 3934
          real_peer_disk = D_DISKLESS;
        } else {
#line 3936
          tmp___5 = test_and_clear_bit(8, (unsigned long volatile   *)(& (mdev->tconn)->flags));
#line 3936
          if (tmp___5 != 0) {
#line 3937
            return (-5);
          } else {

          }
#line 3938
          if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U) {
#line 3938
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( os.conn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3938);
          } else {

          }
#line 3939
          val___0.i = 0U;
#line 3939
          val___0.ldv_40604.conn = 1U;
#line 3939
          mask___0.i = 0U;
#line 3939
          mask___0.ldv_40604.conn = 31U;
#line 3939
          conn_request_state(mdev->tconn, mask___0, val___0, CS_HARD);
#line 3940
          return (-5);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3945
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 3946
  tmp___7 = drbd_read_state(mdev);
#line 3946
  if (os.i != tmp___7.i) {
#line 3947
    goto retry;
  } else {

  }
#line 3948
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 3949
  ns.ldv_40604.peer = peer_state.ldv_40604.role;
#line 3950
  ns.ldv_40604.pdsk = (unsigned char )real_peer_disk;
#line 3951
  ns.ldv_40604.peer_isp = (unsigned char )((int )peer_state.ldv_40604.aftr_isp | (int )peer_state.ldv_40604.user_isp);
#line 3952
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3953
    ns.ldv_40604.disk = mdev->new_state_tmp.ldv_40604.disk;
  } else {

  }
#line 3954
  cs_flags = (enum chg_state_flags )(((int )os.ldv_40604.conn > 9 || (int )ns.ldv_40604.conn <= 9) + 2);
#line 3955
  if (*((unsigned int *)(& ns) + 0UL) == 57344U) {
#line 3955
    tmp___8 = drbd_suspended(mdev);
#line 3955
    if (tmp___8 != 0) {
#line 3955
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 3955
        if ((int )os.ldv_40604.conn <= 9) {
#line 3955
          tmp___9 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 3955
          if (tmp___9 != 0) {
#line 3959
            spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 3960
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Aborting Connect, can not thaw IO with an only Consistent peer\n");
#line 3961
            tl_clear(mdev->tconn);
#line 3962
            drbd_uuid_new_current(mdev);
#line 3963
            clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 3964
            val___1.i = 0U;
#line 3964
            val___1.ldv_40604.conn = 6U;
#line 3964
            val___1.ldv_40604.susp = 0U;
#line 3964
            mask___1.i = 0U;
#line 3964
            mask___1.ldv_40604.conn = 31U;
#line 3964
            mask___1.ldv_40604.susp = 1U;
#line 3964
            conn_request_state(mdev->tconn, mask___1, val___1, CS_HARD);
#line 3965
            return (-5);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3967
  tmp___10 = _drbd_set_state(mdev, ns, cs_flags, 0);
#line 3967
  rv = (int )tmp___10;
#line 3968
  ns = drbd_read_state(mdev);
#line 3969
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 3971
  if (rv <= 0) {
#line 3972
    val___2.i = 0U;
#line 3972
    val___2.ldv_40604.conn = 1U;
#line 3972
    mask___2.i = 0U;
#line 3972
    mask___2.ldv_40604.conn = 31U;
#line 3972
    conn_request_state(mdev->tconn, mask___2, val___2, CS_HARD);
#line 3973
    return (-5);
  } else {

  }
#line 3976
  if ((int )os.ldv_40604.conn > 9) {
#line 3977
    if (((int )ns.ldv_40604.conn > 10 && (int )peer_state.ldv_40604.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3982
      drbd_send_uuids(mdev);
#line 3983
      drbd_send_current_state(mdev);
    } else {

    }
  } else {

  }
#line 3987
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 3989
  drbd_md_sync(mdev);
#line 3991
  return (0);
}
}
#line 3994 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 3997
  p = (struct p_rs_uuid *)pi->data;
#line 3999
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 4000
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 4001
    return (-5);
  } else {

  }
#line 4003
  if ((((unsigned int )*((unsigned short *)mdev + 374UL) == 240U || (unsigned int )*((unsigned short *)mdev + 374UL) == 368U) || (int )mdev->state.ldv_50103.conn <= 9) || (int )mdev->state.ldv_50103.disk <= 2) {
#line 4003
    goto ldv_53579;
  } else {

  }
#line 4003
  tmp = get_current();
#line 4003
  __wait.flags = 0U;
#line 4003
  __wait.private = (void *)tmp;
#line 4003
  __wait.func = & autoremove_wake_function;
#line 4003
  __wait.task_list.next = & __wait.task_list;
#line 4003
  __wait.task_list.prev = & __wait.task_list;
  ldv_53582: 
#line 4003
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 4003
  if ((((unsigned int )*((unsigned short *)mdev + 374UL) == 240U || (unsigned int )*((unsigned short *)mdev + 374UL) == 368U) || (int )mdev->state.ldv_50103.conn <= 9) || (int )mdev->state.ldv_50103.disk <= 2) {
#line 4003
    goto ldv_53581;
  } else {

  }
#line 4003
  schedule();
#line 4003
  goto ldv_53582;
  ldv_53581: 
#line 4003
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53579: 
#line 4013
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 4013
  if (tmp___1 != 0) {
#line 4014
    tmp___0 = __fswab64(p->uuid);
#line 4014
    _drbd_uuid_set(mdev, 0, tmp___0);
#line 4015
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 4017
    drbd_print_uuids(mdev, "updated sync uuid");
#line 4018
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 4020
    put_ldev(mdev);
  } else {
#line 4022
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 4024
  return (0);
}
}
#line 4034 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap_plain(struct drbd_conf *mdev , unsigned int size , unsigned long *p ,
                                struct bm_xfer_ctx *c ) 
{ 
  unsigned int data_size ;
  unsigned int tmp ;
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int err ;

  {
#line 4037
  tmp = drbd_header_size(mdev->tconn);
#line 4037
  data_size = 4096U - tmp;
#line 4039
  __min1 = (unsigned long )(data_size / 8U);
#line 4039
  __min2 = c->bm_words - c->word_offset;
#line 4039
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 4041
  want = num_words * 8U;
#line 4044
  if (want != size) {
#line 4045
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != size (%u)\n",
            "receive_bitmap_plain", want, size);
#line 4046
    return (-5);
  } else {

  }
#line 4048
  if (want == 0U) {
#line 4049
    return (0);
  } else {

  }
#line 4050
  err = drbd_recv_all(mdev->tconn, (void *)p, (size_t )want);
#line 4051
  if (err != 0) {
#line 4052
    return (err);
  } else {

  }
#line 4054
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, p);
#line 4056
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 4057
  c->bit_offset = c->word_offset * 64UL;
#line 4058
  if (c->bit_offset > c->bm_bits) {
#line 4059
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 4061
  return (1);
}
}
#line 4064 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_bitmap_code dcbp_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 4066
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 4069 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int dcbp_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 4071
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 4074 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int dcbp_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 4076
  return (((int )p->encoding >> 4) & 7);
}
}
#line 4086 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ,
                            unsigned int len ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int toggle ;
  int tmp___0 ;
  int have ;
  int bits ;
  int tmp___1 ;

  {
#line 4095
  s = c->bit_offset;
#line 4097
  tmp___0 = dcbp_get_start(p);
#line 4097
  toggle = tmp___0;
#line 4101
  tmp___1 = dcbp_get_pad_bits(p);
#line 4101
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___1);
#line 4103
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 4104
  if (bits < 0) {
#line 4105
    return (-5);
  } else {

  }
#line 4107
  have = bits;
#line 4107
  goto ldv_53622;
  ldv_53621: 
#line 4108
  bits = vli_decode_bits(& rl, look_ahead);
#line 4109
  if (bits <= 0) {
#line 4110
    return (-5);
  } else {

  }
#line 4112
  if (toggle != 0) {
#line 4113
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 4114
    if (c->bm_bits <= e) {
#line 4115
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 4116
      return (-5);
    } else {

    }
#line 4118
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 4121
  if (have < bits) {
#line 4122
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 4126
    return (-5);
  } else {

  }
#line 4128
  look_ahead = look_ahead >> bits;
#line 4129
  have = have - bits;
#line 4131
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 4132
  if (bits < 0) {
#line 4133
    return (-5);
  } else {

  }
#line 4134
  look_ahead = (tmp << have) | look_ahead;
#line 4135
  have = have + bits;
#line 4107
  s = (unsigned long )((unsigned long long )s + rl);
#line 4107
  toggle = toggle == 0;
  ldv_53622: ;
#line 4107
  if (have > 0) {
#line 4108
    goto ldv_53621;
  } else {

  }
#line 4138
  c->bit_offset = s;
#line 4139
  bm_xfer_ctx_bit_to_word_offset(c);
#line 4141
  return (c->bm_bits != s);
}
}
#line 4151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ,
                           unsigned int len ) 
{ 
  int tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 4156
  tmp___0 = dcbp_get_code(p);
#line 4156
  if ((unsigned int )tmp___0 == 2U) {
#line 4157
    tmp = recv_bm_rle_bits(mdev, p, c, len - 1U);
#line 4157
    return (tmp);
  } else {

  }
#line 4163
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 4164
  val.i = 0U;
#line 4164
  val.ldv_40604.conn = 6U;
#line 4164
  mask.i = 0U;
#line 4164
  mask.ldv_40604.conn = 31U;
#line 4164
  conn_request_state(mdev->tconn, mask, val, CS_HARD);
#line 4165
  return (-5);
}
}
#line 4168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int header_size ;
  unsigned int tmp ;
  unsigned int data_size ;
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 4172
  tmp = drbd_header_size(mdev->tconn);
#line 4172
  header_size = tmp;
#line 4173
  data_size = 4096U - header_size;
#line 4174
  plain = (unsigned int )(((c->bm_words + (unsigned long )data_size) - 1UL) / (unsigned long )data_size + 1UL) * header_size + (unsigned int )c->bm_words * 8U;
#line 4177
  total = c->bytes[0] + c->bytes[1];
#line 4181
  if (total == 0U) {
#line 4182
    return;
  } else {

  }
#line 4185
  if (total >= plain) {
#line 4186
    return;
  } else {

  }
#line 4189
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 4192
  if (r > 1000U) {
#line 4193
    r = 1000U;
  } else {

  }
#line 4195
  r = 1000U - r;
#line 4196
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 4197
  return;
}
}
#line 4212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct bm_xfer_ctx c ;
  int err ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp ;
  size_t tmp___0 ;
  struct p_compressed_bm *p ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  enum drbd_state_rv rv ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___3 ;

  {
#line 4218
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 4219
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 4220
    return (-5);
  } else {

  }
#line 4222
  drbd_bm_lock(mdev, (char *)"receive bitmap", BM_LOCKED_SET_ALLOWED);
#line 4226
  tmp = drbd_bm_bits(mdev);
#line 4226
  tmp___0 = drbd_bm_words(mdev);
#line 4226
  __constr_expr_0.bm_bits = tmp;
#line 4226
  __constr_expr_0.bm_words = tmp___0;
#line 4226
  __constr_expr_0.bit_offset = 0UL;
#line 4226
  __constr_expr_0.word_offset = 0UL;
#line 4226
  __constr_expr_0.packets[0] = 0U;
#line 4226
  __constr_expr_0.packets[1] = 0U;
#line 4226
  __constr_expr_0.bytes[0] = 0U;
#line 4226
  __constr_expr_0.bytes[1] = 0U;
#line 4226
  c = __constr_expr_0;
  ldv_53655: ;
#line 4232
  if ((unsigned int )pi->cmd == 4U) {
#line 4233
    err = receive_bitmap_plain(mdev, pi->size, (unsigned long *)pi->data, & c);
  } else
#line 4234
  if ((unsigned int )pi->cmd == 36U) {
#line 4237
    p = (struct p_compressed_bm *)pi->data;
#line 4239
    tmp___1 = drbd_header_size(tconn);
#line 4239
    if (pi->size > 4096U - tmp___1) {
#line 4240
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 4241
      err = -5;
#line 4242
      goto out;
    } else {

    }
#line 4244
    if (pi->size <= 1U) {
#line 4245
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              pi->size);
#line 4246
      err = -5;
#line 4247
      goto out;
    } else {

    }
#line 4249
    err = drbd_recv_all(mdev->tconn, (void *)p, (size_t )pi->size);
#line 4250
    if (err != 0) {
#line 4251
      goto out;
    } else {

    }
#line 4252
    err = decode_bitmap_c(mdev, p, & c, pi->size);
  } else {
#line 4254
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: cmd neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (unsigned int )pi->cmd);
#line 4255
    err = -5;
#line 4256
    goto out;
  }
#line 4259
  c.packets[(unsigned int )pi->cmd == 4U] = c.packets[(unsigned int )pi->cmd == 4U] + 1U;
#line 4260
  tmp___2 = drbd_header_size(tconn);
#line 4260
  c.bytes[(unsigned int )pi->cmd == 4U] = c.bytes[(unsigned int )pi->cmd == 4U] + (tmp___2 + pi->size);
#line 4262
  if (err <= 0) {
#line 4263
    if (err < 0) {
#line 4264
      goto out;
    } else {

    }
#line 4265
    goto ldv_53654;
  } else {

  }
#line 4267
  err = drbd_recv_header(mdev->tconn, pi);
#line 4268
  if (err != 0) {
#line 4269
    goto out;
  } else {

  }
#line 4270
  goto ldv_53655;
  ldv_53654: 
#line 4272
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 4274
  if ((unsigned int )*((unsigned short *)mdev + 374UL) == 224U) {
#line 4277
    err = drbd_send_bitmap(mdev);
#line 4278
    if (err != 0) {
#line 4279
      goto out;
    } else {

    }
#line 4281
    val.i = 0U;
#line 4281
    val.ldv_40604.conn = 15U;
#line 4281
    mask.i = 0U;
#line 4281
    mask.ldv_40604.conn = 31U;
#line 4281
    rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 4282
    if ((int )rv != 1) {
#line 4282
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4282);
    } else {

    }
  } else
#line 4283
  if ((unsigned int )*((unsigned short *)mdev + 374UL) != 208U) {
#line 4286
    tmp___3 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_50103.conn);
#line 4286
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___3);
  } else {

  }
#line 4289
  err = 0;
  out: 
#line 4292
  drbd_bm_unlock(mdev);
#line 4293
  if (err == 0 && (unsigned int )*((unsigned short *)mdev + 374UL) == 208U) {
#line 4294
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 4295
  return (err);
}
}
#line 4298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  int tmp ;

  {
#line 4300
  printk("\fd-con %s: skipping unknown optional packet type %d, l: %d!\n", tconn->name,
         (unsigned int )pi->cmd, pi->size);
#line 4303
  tmp = ignore_remaining_packet(tconn, pi);
#line 4303
  return (tmp);
}
}
#line 4306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 


  {
#line 4310
  drbd_tcp_quickack(tconn->data.socket);
#line 4312
  return (0);
}
}
#line 4315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_out_of_sync(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_block_desc *p ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;

  {
#line 4318
  p = (struct p_block_desc *)pi->data;
#line 4320
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 4321
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 4322
    return (-5);
  } else {

  }
#line 4324
  switch ((int )mdev->state.ldv_50103.conn) {
  case 15: ;
  case 14: ;
  case 23: ;
#line 4328
  goto ldv_53678;
  default: 
#line 4330
  tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_50103.conn);
#line 4330
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected: WFSyncUUID|WFBitMapT|Behind\n",
          tmp);
  }
  ldv_53678: 
#line 4334
  tmp___0 = __fswab32(p->blksize);
#line 4334
  tmp___1 = __fswab64(p->sector);
#line 4334
  __drbd_set_out_of_sync(mdev, (sector_t )tmp___1, (int )tmp___0, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                         4334U);
#line 4336
  return (0);
}
}
#line 4345 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct data_cmd drbd_cmd_handler[46U]  = 
#line 4345
  {      {1, 24UL, & receive_Data}, 
        {1, 24UL, & receive_DataReply}, 
        {1, 24UL, & receive_RSDataReply}, 
        {0, 8UL, & receive_Barrier}, 
        {1, 0UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, & receive_UnplugRemote}, 
        {0, 24UL, & receive_DataRequest}, 
        {0, 24UL, & receive_DataRequest}, 
        {1, 0UL, & receive_SyncParam}, 
        {1, 24UL, & receive_protocol}, 
        {0, 48UL, & receive_uuids}, 
        {0, 32UL, & receive_sizes}, 
        {0, 4UL, & receive_state}, 
        {0, 8UL, & receive_sync_uuid}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_req_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 24UL, & receive_DataRequest}, 
        {1, 24UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 24UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 0UL, & receive_SyncParam}, 
        {1, 0UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_skip}, 
        {0, 16UL, & receive_out_of_sync}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_req_conn_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {1, 24UL, & receive_protocol}};
#line 4372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_tconn *tconn ) 
{ 
  struct packet_info pi ;
  size_t shs ;
  int err ;
  struct data_cmd *cmd ;
  int tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  enum drbd_thread_state tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 4378
  goto ldv_53698;
  ldv_53697: 
#line 4381
  drbd_thread_current_set_cpu(& tconn->receiver);
#line 4382
  tmp = drbd_recv_header(tconn, & pi);
#line 4382
  if (tmp != 0) {
#line 4383
    goto err_out;
  } else {

  }
#line 4385
  cmd = (struct data_cmd *)(& drbd_cmd_handler) + (unsigned long )pi.cmd;
#line 4386
  tmp___1 = __builtin_expect((unsigned int )pi.cmd > (unsigned int )P_PROTOCOL_UPDATE,
                             0L);
#line 4386
  if (tmp___1 != 0L) {
#line 4387
    tmp___0 = cmdname(pi.cmd);
#line 4387
    printk("\vd-con %s: Unexpected data packet %s (0x%04x)", tconn->name, tmp___0,
           (unsigned int )pi.cmd);
#line 4389
    goto err_out;
  } else {
#line 4386
    tmp___2 = __builtin_expect((unsigned long )cmd->fn == (unsigned long )((int (*)(struct drbd_tconn * ,
                                                                                    struct packet_info * ))0),
                               0L);
#line 4386
    if (tmp___2 != 0L) {
#line 4387
      tmp___0 = cmdname(pi.cmd);
#line 4387
      printk("\vd-con %s: Unexpected data packet %s (0x%04x)", tconn->name, tmp___0,
             (unsigned int )pi.cmd);
#line 4389
      goto err_out;
    } else {

    }
  }
#line 4392
  shs = cmd->pkt_size;
#line 4393
  if ((size_t )pi.size > shs && cmd->expect_payload == 0) {
#line 4394
    tmp___3 = cmdname(pi.cmd);
#line 4394
    printk("\vd-con %s: No payload expected %s l:%d\n", tconn->name, tmp___3, pi.size);
#line 4396
    goto err_out;
  } else {

  }
#line 4399
  if (shs != 0UL) {
#line 4400
    err = drbd_recv_all_warn(tconn, pi.data, shs);
#line 4401
    if (err != 0) {
#line 4402
      goto err_out;
    } else {

    }
#line 4403
    pi.size = pi.size - (unsigned int )shs;
  } else {

  }
#line 4406
  err = (*(cmd->fn))(tconn, & pi);
#line 4407
  if (err != 0) {
#line 4408
    tmp___4 = cmdname(pi.cmd);
#line 4408
    printk("\vd-con %s: error receiving %s, e: %d l: %d!\n", tconn->name, tmp___4,
           err, pi.size);
#line 4410
    goto err_out;
  } else {

  }
  ldv_53698: 
#line 4378
  tmp___5 = get_t_state(& tconn->receiver);
#line 4378
  if ((unsigned int )tmp___5 == 1U) {
#line 4379
    goto ldv_53697;
  } else {

  }

#line 4413
  return;
  err_out: 
#line 4416
  val.i = 0U;
#line 4416
  val.ldv_40604.conn = 6U;
#line 4416
  mask.i = 0U;
#line 4416
  mask.ldv_40604.conn = 31U;
#line 4416
  conn_request_state(tconn, mask, val, CS_HARD);
#line 4418
  return;
}
}
#line 4419 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void conn_flush_workqueue(struct drbd_tconn *tconn ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 4423
  barr.w.cb = & w_prev_work_done;
#line 4424
  barr.w.ldv_50388.tconn = tconn;
#line 4425
  init_completion(& barr.done);
#line 4426
  drbd_queue_work(& tconn->sender_work, & barr.w);
#line 4427
  wait_for_completion(& barr.done);
#line 4428
  return;
}
}
#line 4430 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void conn_disconnect(struct drbd_tconn *tconn ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_conns oc ;
  int vnr ;
  union drbd_state val ;
  union drbd_state mask ;
  void *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  enum drbd_role tmp___2 ;
  enum drbd_disk_state tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 4436
  if ((unsigned int )tconn->cstate == 0U) {
#line 4437
    return;
  } else {

  }
#line 4444
  val.i = 0U;
#line 4444
  val.ldv_40604.conn = 5U;
#line 4444
  mask.i = 0U;
#line 4444
  mask.ldv_40604.conn = 31U;
#line 4444
  conn_request_state(tconn, mask, val, CS_HARD);
#line 4447
  drbd_thread_stop(& tconn->asender);
#line 4448
  drbd_free_sock(tconn);
#line 4450
  rcu_read_lock();
#line 4451
  vnr = 0;
#line 4451
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 4451
  mdev = (struct drbd_conf *)tmp;
#line 4451
  goto ldv_53719;
  ldv_53718: 
#line 4452
  kref_get(& mdev->kref);
#line 4453
  rcu_read_unlock();
#line 4454
  drbd_disconnected(mdev);
#line 4455
  kref_put(& mdev->kref, & drbd_minor_destroy);
#line 4456
  rcu_read_lock();
#line 4451
  vnr = vnr + 1;
#line 4451
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 4451
  mdev = (struct drbd_conf *)tmp___0;
  ldv_53719: ;
#line 4451
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 4452
    goto ldv_53718;
  } else {

  }
#line 4458
  rcu_read_unlock();
#line 4460
  tmp___1 = list_empty((struct list_head  const  *)(& (tconn->current_epoch)->list));
#line 4460
  if (tmp___1 == 0) {
#line 4461
    printk("\vd-con %s: ASSERTION FAILED: tconn->current_epoch->list not empty\n",
           tconn->name);
  } else {

  }
#line 4463
  atomic_set(& (tconn->current_epoch)->epoch_size, 0);
#line 4464
  tconn->send.seen_any_write_yet = 0;
#line 4466
  printk("\016d-con %s: Connection closed\n", tconn->name);
#line 4468
  tmp___2 = conn_highest_role(tconn);
#line 4468
  if ((unsigned int )tmp___2 == 1U) {
#line 4468
    tmp___3 = conn_highest_pdsk(tconn);
#line 4468
    if ((unsigned int )tmp___3 > 5U) {
#line 4469
      conn_try_outdate_peer_async(tconn);
    } else {

    }
  } else {

  }
#line 4471
  spin_lock_irq(& tconn->req_lock);
#line 4472
  oc = tconn->cstate;
#line 4473
  if ((unsigned int )oc > 1U) {
#line 4474
    val___0.i = 0U;
#line 4474
    val___0.ldv_40604.conn = 2U;
#line 4474
    mask___0.i = 0U;
#line 4474
    mask___0.ldv_40604.conn = 31U;
#line 4474
    _conn_request_state(tconn, mask___0, val___0, CS_VERBOSE);
  } else {

  }
#line 4476
  spin_unlock_irq(& tconn->req_lock);
#line 4478
  if ((unsigned int )oc == 1U) {
#line 4479
    val___1.i = 0U;
#line 4479
    val___1.ldv_40604.conn = 0U;
#line 4479
    mask___1.i = 0U;
#line 4479
    mask___1.ldv_40604.conn = 31U;
#line 4479
    conn_request_state(tconn, mask___1, val___1, 3);
  } else {

  }
#line 4481
  return;
}
}
#line 4482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_disconnected(struct drbd_conf *mdev ) 
{ 
  unsigned int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 4487
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 4488
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 4489
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 4490
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 4491
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 4503
  drbd_rs_cancel_all(mdev);
#line 4504
  mdev->rs_total = 0UL;
#line 4505
  mdev->rs_failed = 0UL;
#line 4506
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 4507
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 4509
  del_timer_sync(& mdev->resync_timer);
#line 4510
  resync_timer_fn((unsigned long )mdev);
#line 4515
  drbd_flush_workqueue(mdev);
#line 4517
  drbd_finish_peer_reqs(mdev);
#line 4522
  drbd_flush_workqueue(mdev);
#line 4526
  drbd_rs_cancel_all(mdev);
#line 4528
  kfree((void const   *)mdev->p_uuid);
#line 4529
  mdev->p_uuid = 0;
#line 4531
  tmp = drbd_suspended(mdev);
#line 4531
  if (tmp == 0) {
#line 4532
    tl_clear(mdev->tconn);
  } else {

  }
#line 4534
  drbd_md_sync(mdev);
#line 4538
  tmp___0 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 4538
  if (tmp___0 == 0) {
#line 4538
    goto ldv_53733;
  } else {

  }
#line 4538
  tmp___1 = get_current();
#line 4538
  __wait.flags = 0U;
#line 4538
  __wait.private = (void *)tmp___1;
#line 4538
  __wait.func = & autoremove_wake_function;
#line 4538
  __wait.task_list.next = & __wait.task_list;
#line 4538
  __wait.task_list.prev = & __wait.task_list;
  ldv_53736: 
#line 4538
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 4538
  tmp___2 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 4538
  if (tmp___2 == 0) {
#line 4538
    goto ldv_53735;
  } else {

  }
#line 4538
  schedule();
#line 4538
  goto ldv_53736;
  ldv_53735: 
#line 4538
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53733: 
#line 4547
  tmp___3 = drbd_free_peer_reqs(mdev, & mdev->net_ee);
#line 4547
  i = (unsigned int )tmp___3;
#line 4548
  if (i != 0U) {
#line 4549
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 4550
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->pp_in_use_by_net));
#line 4550
  i = (unsigned int )tmp___4;
#line 4551
  if (i != 0U) {
#line 4552
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use_by_net = %d, expected 0\n",
              i);
  } else {

  }
#line 4553
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 4553
  i = (unsigned int )tmp___5;
#line 4554
  if (i != 0U) {
#line 4555
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 4557
  tmp___6 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 4557
  if (tmp___6 == 0) {
#line 4557
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4557);
  } else {

  }
#line 4558
  tmp___7 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 4558
  if (tmp___7 == 0) {
#line 4558
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4558);
  } else {

  }
#line 4559
  tmp___8 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 4559
  if (tmp___8 == 0) {
#line 4559
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4559);
  } else {

  }
#line 4560
  tmp___9 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4560
  if (tmp___9 == 0) {
#line 4560
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4560);
  } else {

  }
#line 4562
  return (0);
}
}
#line 4574 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_features(struct drbd_tconn *tconn ) 
{ 
  struct drbd_socket *sock ;
  struct p_connection_features *p ;
  void *tmp ;
  int tmp___0 ;

  {
#line 4579
  sock = & tconn->data;
#line 4580
  tmp = conn_prepare_command(tconn, sock);
#line 4580
  p = (struct p_connection_features *)tmp;
#line 4581
  if ((unsigned long )p == (unsigned long )((struct p_connection_features *)0)) {
#line 4582
    return (-5);
  } else {

  }
#line 4583
  memset((void *)p, 0, 72UL);
#line 4584
  p->protocol_min = 1442840576U;
#line 4585
  p->protocol_max = 1694498816U;
#line 4586
  tmp___0 = conn_send_command(tconn, sock, P_CONNECTION_FEATURES, 72U, 0, 0U);
#line 4586
  return (tmp___0);
}
}
#line 4596 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_features(struct drbd_tconn *tconn ) 
{ 
  struct p_connection_features *p ;
  int expect ;
  struct packet_info pi ;
  int err ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int __min1 ;
  int __min2 ;

  {
#line 4600
  expect = 72;
#line 4604
  err = drbd_send_features(tconn);
#line 4605
  if (err != 0) {
#line 4606
    return (0);
  } else {

  }
#line 4608
  err = drbd_recv_header(tconn, & pi);
#line 4609
  if (err != 0) {
#line 4610
    return (0);
  } else {

  }
#line 4612
  if ((unsigned int )pi.cmd != 65534U) {
#line 4613
    tmp = cmdname(pi.cmd);
#line 4613
    printk("\vd-con %s: expected ConnectionFeatures packet, received: %s (0x%04x)\n",
           tconn->name, tmp, (unsigned int )pi.cmd);
#line 4615
    return (-1);
  } else {

  }
#line 4618
  if (pi.size != (unsigned int )expect) {
#line 4619
    printk("\vd-con %s: expected ConnectionFeatures length: %u, received: %u\n", tconn->name,
           expect, pi.size);
#line 4621
    return (-1);
  } else {

  }
#line 4624
  p = (struct p_connection_features *)pi.data;
#line 4625
  err = drbd_recv_all_warn(tconn, (void *)p, (size_t )expect);
#line 4626
  if (err != 0) {
#line 4627
    return (0);
  } else {

  }
#line 4629
  tmp___0 = __fswab32(p->protocol_min);
#line 4629
  p->protocol_min = tmp___0;
#line 4630
  tmp___1 = __fswab32(p->protocol_max);
#line 4630
  p->protocol_max = tmp___1;
#line 4631
  if (p->protocol_max == 0U) {
#line 4632
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 4634
  if (p->protocol_min > 101U || p->protocol_max <= 85U) {
#line 4636
    goto incompat;
  } else {

  }
#line 4638
  __min1 = 101;
#line 4638
  __min2 = (int )p->protocol_max;
#line 4638
  tconn->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 4640
  printk("\016d-con %s: Handshake successful: Agreed network protocol version %d\n",
         tconn->name, tconn->agreed_pro_version);
#line 4643
  return (1);
  incompat: 
#line 4646
  printk("\vd-con %s: incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
         tconn->name, 86, 101, p->protocol_min, p->protocol_max);
#line 4650
  return (-1);
}
}
#line 4669 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_tconn *tconn ) 
{ 
  struct drbd_socket *sock ;
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  unsigned int key_len ;
  char secret[64U] ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  struct packet_info pi ;
  struct net_conf *nc ;
  int err ;
  int rv ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  size_t tmp___1 ;
  size_t __len ;
  void *__ret ;
  void *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  void *tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  void *tmp___10 ;
  int tmp___11 ;

  {
#line 4674
  response = 0;
#line 4675
  right_response = 0;
#line 4676
  peers_ch = 0;
#line 4687
  rcu_read_lock();
#line 4688
  _________p1 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 4688
  tmp = debug_lockdep_rcu_enabled();
#line 4688
  if (tmp != 0 && ! __warned) {
#line 4688
    tmp___0 = rcu_read_lock_held();
#line 4688
    if (tmp___0 == 0 && 1) {
#line 4688
      __warned = 1;
#line 4688
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             4688, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 4688
  nc = _________p1;
#line 4689
  tmp___1 = strlen((char const   *)(& nc->shared_secret));
#line 4689
  key_len = (unsigned int )tmp___1;
#line 4690
  __len = (size_t )key_len;
#line 4690
  __ret = __builtin_memcpy((void *)(& secret), (void const   *)(& nc->shared_secret),
                           __len);
#line 4691
  rcu_read_unlock();
#line 4693
  desc.tfm = tconn->cram_hmac_tfm;
#line 4694
  desc.flags = 0U;
#line 4696
  rv = crypto_hash_setkey(tconn->cram_hmac_tfm, (u8 const   *)(& secret), key_len);
#line 4697
  if (rv != 0) {
#line 4698
    printk("\vd-con %s: crypto_hash_setkey() failed with %d\n", tconn->name, rv);
#line 4699
    rv = -1;
#line 4700
    goto fail;
  } else {

  }
#line 4703
  get_random_bytes((void *)(& my_challenge), 64);
#line 4705
  sock = & tconn->data;
#line 4706
  tmp___2 = conn_prepare_command(tconn, sock);
#line 4706
  if ((unsigned long )tmp___2 == (unsigned long )((void *)0)) {
#line 4707
    rv = 0;
#line 4708
    goto fail;
  } else {

  }
#line 4710
  tmp___3 = conn_send_command(tconn, sock, P_AUTH_CHALLENGE, 0U, (void *)(& my_challenge),
                              64U);
#line 4710
  rv = tmp___3 == 0;
#line 4712
  if (rv == 0) {
#line 4713
    goto fail;
  } else {

  }
#line 4715
  err = drbd_recv_header(tconn, & pi);
#line 4716
  if (err != 0) {
#line 4717
    rv = 0;
#line 4718
    goto fail;
  } else {

  }
#line 4721
  if ((unsigned int )pi.cmd != 16U) {
#line 4722
    tmp___4 = cmdname(pi.cmd);
#line 4722
    printk("\vd-con %s: expected AuthChallenge packet, received: %s (0x%04x)\n", tconn->name,
           tmp___4, (unsigned int )pi.cmd);
#line 4724
    rv = 0;
#line 4725
    goto fail;
  } else {

  }
#line 4728
  if (pi.size > 128U) {
#line 4729
    printk("\vd-con %s: expected AuthChallenge payload too big.\n", tconn->name);
#line 4730
    rv = -1;
#line 4731
    goto fail;
  } else {

  }
#line 4734
  tmp___5 = kmalloc((size_t )pi.size, 16U);
#line 4734
  peers_ch = (char *)tmp___5;
#line 4735
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4736
    printk("\vd-con %s: kmalloc of peers_ch failed\n", tconn->name);
#line 4737
    rv = -1;
#line 4738
    goto fail;
  } else {

  }
#line 4741
  err = drbd_recv_all_warn(tconn, (void *)peers_ch, (size_t )pi.size);
#line 4742
  if (err != 0) {
#line 4743
    rv = 0;
#line 4744
    goto fail;
  } else {

  }
#line 4747
  resp_size = crypto_hash_digestsize(tconn->cram_hmac_tfm);
#line 4748
  tmp___6 = kmalloc((size_t )resp_size, 16U);
#line 4748
  response = (char *)tmp___6;
#line 4749
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4750
    printk("\vd-con %s: kmalloc of response failed\n", tconn->name);
#line 4751
    rv = -1;
#line 4752
    goto fail;
  } else {

  }
#line 4755
  sg_init_table(& sg, 1U);
#line 4756
  sg_set_buf(& sg, (void const   *)peers_ch, pi.size);
#line 4758
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4759
  if (rv != 0) {
#line 4760
    printk("\vd-con %s: crypto_hash_digest() failed with %d\n", tconn->name, rv);
#line 4761
    rv = -1;
#line 4762
    goto fail;
  } else {

  }
#line 4765
  tmp___7 = conn_prepare_command(tconn, sock);
#line 4765
  if ((unsigned long )tmp___7 == (unsigned long )((void *)0)) {
#line 4766
    rv = 0;
#line 4767
    goto fail;
  } else {

  }
#line 4769
  tmp___8 = conn_send_command(tconn, sock, P_AUTH_RESPONSE, 0U, (void *)response,
                              resp_size);
#line 4769
  rv = tmp___8 == 0;
#line 4771
  if (rv == 0) {
#line 4772
    goto fail;
  } else {

  }
#line 4774
  err = drbd_recv_header(tconn, & pi);
#line 4775
  if (err != 0) {
#line 4776
    rv = 0;
#line 4777
    goto fail;
  } else {

  }
#line 4780
  if ((unsigned int )pi.cmd != 17U) {
#line 4781
    tmp___9 = cmdname(pi.cmd);
#line 4781
    printk("\vd-con %s: expected AuthResponse packet, received: %s (0x%04x)\n", tconn->name,
           tmp___9, (unsigned int )pi.cmd);
#line 4783
    rv = 0;
#line 4784
    goto fail;
  } else {

  }
#line 4787
  if (pi.size != resp_size) {
#line 4788
    printk("\vd-con %s: expected AuthResponse payload of wrong size\n", tconn->name);
#line 4789
    rv = 0;
#line 4790
    goto fail;
  } else {

  }
#line 4793
  err = drbd_recv_all_warn(tconn, (void *)response, (size_t )resp_size);
#line 4794
  if (err != 0) {
#line 4795
    rv = 0;
#line 4796
    goto fail;
  } else {

  }
#line 4799
  tmp___10 = kmalloc((size_t )resp_size, 16U);
#line 4799
  right_response = (char *)tmp___10;
#line 4800
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4801
    printk("\vd-con %s: kmalloc of right_response failed\n", tconn->name);
#line 4802
    rv = -1;
#line 4803
    goto fail;
  } else {

  }
#line 4806
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4808
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4809
  if (rv != 0) {
#line 4810
    printk("\vd-con %s: crypto_hash_digest() failed with %d\n", tconn->name, rv);
#line 4811
    rv = -1;
#line 4812
    goto fail;
  } else {

  }
#line 4815
  tmp___11 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4815
  rv = tmp___11 == 0;
#line 4817
  if (rv != 0) {
#line 4818
    printk("\016d-con %s: Peer authenticated using %d bytes HMAC\n", tconn->name,
           resp_size);
  } else {
#line 4821
    rv = -1;
  }
  fail: 
#line 4824
  kfree((void const   *)peers_ch);
#line 4825
  kfree((void const   *)response);
#line 4826
  kfree((void const   *)right_response);
#line 4828
  return (rv);
}
}
#line 4832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_tconn *tconn ;
  int h ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 4834
  tconn = thi->tconn;
#line 4837
  printk("\016d-con %s: receiver (re)started\n", tconn->name);
  ldv_53786: 
#line 4840
  h = conn_connect(tconn);
#line 4841
  if (h == 0) {
#line 4842
    conn_disconnect(tconn);
#line 4843
    schedule_timeout_interruptible(250L);
  } else {

  }
#line 4845
  if (h == -1) {
#line 4846
    printk("\fd-con %s: Discarding network configuration.\n", tconn->name);
#line 4847
    val.i = 0U;
#line 4847
    val.ldv_40604.conn = 1U;
#line 4847
    mask.i = 0U;
#line 4847
    mask.ldv_40604.conn = 31U;
#line 4847
    conn_request_state(tconn, mask, val, CS_HARD);
  } else {

  }
#line 4849
  if (h == 0) {
#line 4850
    goto ldv_53786;
  } else {

  }

#line 4851
  if (h > 0) {
#line 4852
    drbdd(tconn);
  } else {

  }
#line 4854
  conn_disconnect(tconn);
#line 4856
  printk("\016d-con %s: receiver terminated\n", tconn->name);
#line 4857
  return (0);
}
}
#line 4862 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_conn_RqSReply(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4864
  p = (struct p_req_state_reply *)pi->data;
#line 4865
  tmp = __fswab32(p->retcode);
#line 4865
  retcode = (int )tmp;
#line 4867
  if (retcode > 0) {
#line 4868
    set_bit(6U, (unsigned long volatile   *)(& tconn->flags));
  } else {
#line 4870
    set_bit(7U, (unsigned long volatile   *)(& tconn->flags));
#line 4871
    tmp___0 = drbd_set_st_err_str((enum drbd_state_rv )retcode);
#line 4871
    printk("\vd-con %s: Requested state change failed by peer: %s (%d)\n", tconn->name,
           tmp___0, retcode);
  }
#line 4874
  __wake_up(& tconn->ping_wait, 3U, 1, 0);
#line 4876
  return (0);
}
}
#line 4879 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;

  {
#line 4882
  p = (struct p_req_state_reply *)pi->data;
#line 4883
  tmp = __fswab32(p->retcode);
#line 4883
  retcode = (int )tmp;
#line 4885
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 4886
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 4887
    return (-5);
  } else {

  }
#line 4889
  tmp___1 = constant_test_bit(5U, (unsigned long const volatile   *)(& tconn->flags));
#line 4889
  if (tmp___1 != 0) {
#line 4890
    if (tconn->agreed_pro_version > 99) {
#line 4890
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tconn->agreed_pro_version < 100 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4890);
    } else {

    }
#line 4891
    tmp___0 = got_conn_RqSReply(tconn, pi);
#line 4891
    return (tmp___0);
  } else {

  }
#line 4894
  if (retcode > 0) {
#line 4895
    set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4897
    set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 4898
    tmp___2 = drbd_set_st_err_str((enum drbd_state_rv )retcode);
#line 4898
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___2, retcode);
  }
#line 4901
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4903
  return (0);
}
}
#line 4906 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  int tmp ;

  {
#line 4908
  tmp = drbd_send_ping_ack(tconn);
#line 4908
  return (tmp);
}
}
#line 4912 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  int tmp ;

  {
#line 4915
  ((tconn->meta.socket)->sk)->sk_rcvtimeo = (long )((tconn->net_conf)->ping_int * 250U);
#line 4916
  tmp = test_and_set_bit(4, (unsigned long volatile   *)(& tconn->flags));
#line 4916
  if (tmp == 0) {
#line 4917
    __wake_up(& tconn->ping_wait, 3U, 1, 0);
  } else {

  }
#line 4919
  return (0);
}
}
#line 4922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4925
  p = (struct p_block_ack *)pi->data;
#line 4926
  tmp = __fswab64(p->sector);
#line 4926
  sector = (sector_t )tmp;
#line 4927
  tmp___0 = __fswab32(p->blksize);
#line 4927
  blksize = (int )tmp___0;
#line 4929
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 4930
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 4931
    return (-5);
  } else {

  }
#line 4933
  if ((mdev->tconn)->agreed_pro_version <= 88) {
#line 4933
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->tconn->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4933);
  } else {

  }
#line 4935
  tmp___1 = __fswab32(p->seq_num);
#line 4935
  update_peer_seq(mdev, tmp___1);
#line 4937
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4937
  if (tmp___2 != 0) {
#line 4938
    drbd_rs_complete_io(mdev, sector);
#line 4939
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4939U);
#line 4941
    mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4942
    put_ldev(mdev);
  } else {

  }
#line 4944
  _dec_rs_pending(mdev, "got_IsInSync", 4944);
#line 4945
  atomic_add(blksize >> 9, & mdev->rs_sect_in);
#line 4947
  return (0);
}
}
#line 4951 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         struct rb_root *root , char const   *func ,
                                         enum drbd_req_event what , bool missing_ok ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4958
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 4959
  req = find_request(mdev, root, id, sector, (int )missing_ok, func);
#line 4960
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4960
  if (tmp != 0L) {
#line 4961
    spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 4962
    return (-5);
  } else {

  }
#line 4964
  __req_mod(req, what, & m);
#line 4965
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 4967
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4968
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4969
  return (0);
}
}
#line 4972 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4975
  p = (struct p_block_ack *)pi->data;
#line 4976
  tmp = __fswab64(p->sector);
#line 4976
  sector = (sector_t )tmp;
#line 4977
  tmp___0 = __fswab32(p->blksize);
#line 4977
  blksize = (int )tmp___0;
#line 4980
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 4981
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 4982
    return (-5);
  } else {

  }
#line 4984
  tmp___1 = __fswab32(p->seq_num);
#line 4984
  update_peer_seq(mdev, tmp___1);
#line 4986
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4987
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4987U);
#line 4988
    _dec_rs_pending(mdev, "got_BlockAck", 4988);
#line 4989
    return (0);
  } else {

  }
#line 4991
  switch ((unsigned int )pi->cmd) {
  case 23U: 
#line 4993
  what = WRITE_ACKED_BY_PEER_AND_SIS;
#line 4994
  goto ldv_53840;
  case 22U: 
#line 4996
  what = WRITE_ACKED_BY_PEER;
#line 4997
  goto ldv_53840;
  case 21U: 
#line 4999
  what = RECV_ACKED_BY_PEER;
#line 5000
  goto ldv_53840;
  case 24U: 
#line 5002
  what = CONFLICT_RESOLVED;
#line 5003
  goto ldv_53840;
  case 44U: 
#line 5005
  what = POSTPONE_WRITE;
#line 5006
  goto ldv_53840;
  default: 
#line 5008
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                       "i" (5008), "i" (12UL));
  ldv_53846: ;
#line 5008
  goto ldv_53846;
  }
  ldv_53840: 
#line 5011
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & mdev->write_requests,
                                          "got_BlockAck", what, 0);
#line 5011
  return (tmp___2);
}
}
#line 5016 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int size ;
  __u32 tmp___0 ;
  int err ;
  __u32 tmp___1 ;

  {
#line 5019
  p = (struct p_block_ack *)pi->data;
#line 5020
  tmp = __fswab64(p->sector);
#line 5020
  sector = (sector_t )tmp;
#line 5021
  tmp___0 = __fswab32(p->blksize);
#line 5021
  size = (int )tmp___0;
#line 5024
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 5025
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 5026
    return (-5);
  } else {

  }
#line 5028
  tmp___1 = __fswab32(p->seq_num);
#line 5028
  update_peer_seq(mdev, tmp___1);
#line 5030
  if (p->block_id == 0xffffffffffffffffULL) {
#line 5031
    _dec_rs_pending(mdev, "got_NegAck", 5031);
#line 5032
    drbd_rs_failed_io(mdev, sector, size);
#line 5033
    return (0);
  } else {

  }
#line 5036
  err = validate_req_change_req_state(mdev, p->block_id, sector, & mdev->write_requests,
                                      "got_NegAck", NEG_ACKED, 1);
#line 5039
  if (err != 0) {
#line 5045
    __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           5045U);
  } else {

  }
#line 5047
  return (0);
}
}
#line 5050 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 5053
  p = (struct p_block_ack *)pi->data;
#line 5054
  tmp = __fswab64(p->sector);
#line 5054
  sector = (sector_t )tmp;
#line 5056
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 5057
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 5058
    return (-5);
  } else {

  }
#line 5060
  tmp___0 = __fswab32(p->seq_num);
#line 5060
  update_peer_seq(mdev, tmp___0);
#line 5062
  tmp___1 = __fswab32(p->blksize);
#line 5062
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u.\n",
          (unsigned long long )sector, tmp___1);
#line 5065
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & mdev->read_requests,
                                          "got_NegDReply", NEG_ACKED, 0);
#line 5065
  return (tmp___2);
}
}
#line 5070 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 5075
  p = (struct p_block_ack *)pi->data;
#line 5077
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 5078
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 5079
    return (-5);
  } else {

  }
#line 5081
  tmp = __fswab64(p->sector);
#line 5081
  sector = (sector_t )tmp;
#line 5082
  tmp___0 = __fswab32(p->blksize);
#line 5082
  size = (int )tmp___0;
#line 5084
  tmp___1 = __fswab32(p->seq_num);
#line 5084
  update_peer_seq(mdev, tmp___1);
#line 5086
  _dec_rs_pending(mdev, "got_NegRSDReply", 5086);
#line 5088
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 5088
  if (tmp___2 != 0) {
#line 5089
    drbd_rs_complete_io(mdev, sector);
#line 5090
    switch ((unsigned int )pi->cmd) {
    case 27U: 
#line 5092
    drbd_rs_failed_io(mdev, sector, size);
    case 41U: ;
#line 5094
    goto ldv_53876;
    default: 
#line 5096
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (5096), "i" (12UL));
    ldv_53878: ;
#line 5096
    goto ldv_53878;
    }
    ldv_53876: 
#line 5098
    put_ldev(mdev);
  } else {

  }
#line 5101
  return (0);
}
}
#line 5104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct p_barrier_ack *p ;
  struct drbd_conf *mdev ;
  int vnr ;
  __u32 tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;

  {
#line 5106
  p = (struct p_barrier_ack *)pi->data;
#line 5110
  tmp = __fswab32(p->set_size);
#line 5110
  tl_release(tconn, p->barrier, tmp);
#line 5112
  rcu_read_lock();
#line 5113
  vnr = 0;
#line 5113
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 5113
  mdev = (struct drbd_conf *)tmp___0;
#line 5113
  goto ldv_53887;
  ldv_53886: ;
#line 5114
  if ((unsigned int )*((unsigned short *)mdev + 374UL) == 352U) {
#line 5114
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 5114
    if (tmp___1 == 0) {
#line 5114
      tmp___2 = test_and_set_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 5114
      if (tmp___2 == 0) {
#line 5117
        mdev->start_resync_timer.expires = (unsigned long )jiffies + 250UL;
#line 5118
        add_timer(& mdev->start_resync_timer);
      } else {

      }
    } else {

    }
  } else {

  }
#line 5113
  vnr = vnr + 1;
#line 5113
  tmp___3 = idr_get_next(& tconn->volumes, & vnr);
#line 5113
  mdev = (struct drbd_conf *)tmp___3;
  ldv_53887: ;
#line 5113
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 5114
    goto ldv_53886;
  } else {

  }
#line 5121
  rcu_read_unlock();
#line 5123
  return (0);
}
}
#line 5126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;

  {
#line 5129
  p = (struct p_block_ack *)pi->data;
#line 5134
  mdev = vnr_to_mdev(tconn, (int )pi->vnr);
#line 5135
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 5136
    return (-5);
  } else {

  }
#line 5138
  tmp = __fswab64(p->sector);
#line 5138
  sector = (sector_t )tmp;
#line 5139
  tmp___0 = __fswab32(p->blksize);
#line 5139
  size = (int )tmp___0;
#line 5141
  tmp___1 = __fswab32(p->seq_num);
#line 5141
  update_peer_seq(mdev, tmp___1);
#line 5143
  tmp___2 = __fswab64(p->block_id);
#line 5143
  if (tmp___2 == 4712ULL) {
#line 5144
    drbd_ov_out_of_sync_found(mdev, sector, size);
  } else {
#line 5146
    ov_out_of_sync_print(mdev);
  }
#line 5148
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 5148
  if (tmp___3 == 0) {
#line 5149
    return (0);
  } else {

  }
#line 5151
  drbd_rs_complete_io(mdev, sector);
#line 5152
  _dec_rs_pending(mdev, "got_OVResult", 5152);
#line 5154
  mdev->ov_left = mdev->ov_left - 1UL;
#line 5157
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 5158
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 5160
  if (mdev->ov_left == 0UL) {
#line 5161
    tmp___4 = kmalloc(32UL, 16U);
#line 5161
    w = (struct drbd_work *)tmp___4;
#line 5162
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 5163
      w->cb = & w_ov_finished;
#line 5164
      w->ldv_50388.mdev = mdev;
#line 5165
      drbd_queue_work(& (mdev->tconn)->sender_work, w);
    } else {
#line 5167
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 5168
      ov_out_of_sync_print(mdev);
#line 5169
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 5172
  put_ldev(mdev);
#line 5173
  return (0);
}
}
#line 5176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_skip(struct drbd_tconn *tconn , struct packet_info *pi ) 
{ 


  {
#line 5178
  return (0);
}
}
#line 5181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int tconn_finish_peer_reqs(struct drbd_tconn *tconn ) 
{ 
  struct drbd_conf *mdev ;
  int vnr ;
  int not_empty ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  void *tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;

  {
#line 5184
  not_empty = 0;
  ldv_53915: 
#line 5187
  clear_bit(3, (unsigned long volatile   *)(& tconn->flags));
#line 5188
  tmp = get_current();
#line 5188
  flush_signals(tmp);
#line 5190
  rcu_read_lock();
#line 5191
  vnr = 0;
#line 5191
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 5191
  mdev = (struct drbd_conf *)tmp___0;
#line 5191
  goto ldv_53910;
  ldv_53909: 
#line 5192
  kref_get(& mdev->kref);
#line 5193
  rcu_read_unlock();
#line 5194
  tmp___1 = drbd_finish_peer_reqs(mdev);
#line 5194
  if (tmp___1 != 0) {
#line 5195
    kref_put(& mdev->kref, & drbd_minor_destroy);
#line 5196
    return (1);
  } else {

  }
#line 5198
  kref_put(& mdev->kref, & drbd_minor_destroy);
#line 5199
  rcu_read_lock();
#line 5191
  vnr = vnr + 1;
#line 5191
  tmp___2 = idr_get_next(& tconn->volumes, & vnr);
#line 5191
  mdev = (struct drbd_conf *)tmp___2;
  ldv_53910: ;
#line 5191
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 5192
    goto ldv_53909;
  } else {

  }
#line 5201
  set_bit(3U, (unsigned long volatile   *)(& tconn->flags));
#line 5203
  spin_lock_irq(& tconn->req_lock);
#line 5204
  vnr = 0;
#line 5204
  tmp___3 = idr_get_next(& tconn->volumes, & vnr);
#line 5204
  mdev = (struct drbd_conf *)tmp___3;
#line 5204
  goto ldv_53914;
  ldv_53913: 
#line 5205
  tmp___4 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 5205
  not_empty = tmp___4 == 0;
#line 5206
  if (not_empty != 0) {
#line 5207
    goto ldv_53912;
  } else {

  }
#line 5204
  vnr = vnr + 1;
#line 5204
  tmp___5 = idr_get_next(& tconn->volumes, & vnr);
#line 5204
  mdev = (struct drbd_conf *)tmp___5;
  ldv_53914: ;
#line 5204
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 5205
    goto ldv_53913;
  } else {

  }
  ldv_53912: 
#line 5209
  spin_unlock_irq(& tconn->req_lock);
#line 5210
  rcu_read_unlock();
#line 5211
  if (not_empty != 0) {
#line 5212
    goto ldv_53915;
  } else {

  }

#line 5213
  return (0);
}
}
#line 5221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd asender_tbl[45U]  = 
#line 5221
  {      {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, & got_Ping}, 
        {0UL, & got_PingAck}, 
        {24UL, & got_BlockAck}, 
        {24UL, & got_BlockAck}, 
        {24UL, & got_BlockAck}, 
        {24UL, & got_BlockAck}, 
        {24UL, & got_NegAck}, 
        {24UL, & got_NegDReply}, 
        {24UL, & got_NegRSDReply}, 
        {8UL, & got_BarrierAck}, 
        {4UL, & got_RqSReply}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {24UL, & got_OVResult}, 
        {0UL, 0}, 
        {24UL, & got_IsInSync}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {0UL, 0}, 
        {8UL, & got_skip}, 
        {0UL, 0}, 
        {24UL, & got_NegRSDReply}, 
        {0UL, 0}, 
        {4UL, & got_conn_RqSReply}, 
        {24UL, & got_BlockAck}};
#line 5241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_tconn *tconn ;
  struct asender_cmd *cmd ;
  struct packet_info pi ;
  int rv ;
  void *buf ;
  int received ;
  unsigned int header_size ;
  unsigned int tmp ;
  int expect ;
  bool ping_timeout_active ;
  struct net_conf *nc ;
  int ping_timeo ;
  int tcp_cork ;
  int ping_int ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct task_struct *tmp___9 ;
  long t ;
  struct net_conf *_________p1___0 ;
  bool __warned___0 ;
  int tmp___10 ;
  int tmp___11 ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  long tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  bool err ;
  int tmp___17 ;
  enum drbd_thread_state tmp___18 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 5243
  tconn = thi->tconn;
#line 5244
  cmd = 0;
#line 5247
  buf = tconn->meta.rbuf;
#line 5248
  received = 0;
#line 5249
  tmp = drbd_header_size(tconn);
#line 5249
  header_size = tmp;
#line 5250
  expect = (int )header_size;
#line 5251
  ping_timeout_active = 0;
#line 5255
  tmp___0 = get_current();
#line 5255
  tmp___0->policy = 2U;
#line 5256
  tmp___1 = get_current();
#line 5256
  tmp___1->rt_priority = 2U;
#line 5258
  goto ldv_53943;
  ldv_53964: 
#line 5259
  drbd_thread_current_set_cpu(thi);
#line 5261
  rcu_read_lock();
#line 5262
  _________p1 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 5262
  tmp___2 = debug_lockdep_rcu_enabled();
#line 5262
  if (tmp___2 != 0 && ! __warned) {
#line 5262
    tmp___3 = rcu_read_lock_held();
#line 5262
    if (tmp___3 == 0 && 1) {
#line 5262
      __warned = 1;
#line 5262
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             5262, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 5262
  nc = _________p1;
#line 5263
  ping_timeo = (int )nc->ping_timeo;
#line 5264
  tcp_cork = (int )nc->tcp_cork;
#line 5265
  ping_int = (int )nc->ping_int;
#line 5266
  rcu_read_unlock();
#line 5268
  tmp___5 = test_and_clear_bit(2, (unsigned long volatile   *)(& tconn->flags));
#line 5268
  if (tmp___5 != 0) {
#line 5269
    tmp___4 = drbd_send_ping(tconn);
#line 5269
    if (tmp___4 != 0) {
#line 5270
      printk("\vd-con %s: drbd_send_ping has failed\n", tconn->name);
#line 5271
      goto reconnect;
    } else {

    }
#line 5273
    ((tconn->meta.socket)->sk)->sk_rcvtimeo = (long )((ping_timeo * 250) / 10);
#line 5274
    ping_timeout_active = 1;
  } else {

  }
#line 5279
  if (tcp_cork != 0) {
#line 5280
    drbd_tcp_cork(tconn->meta.socket);
  } else {

  }
#line 5281
  tmp___6 = tconn_finish_peer_reqs(tconn);
#line 5281
  if (tmp___6 != 0) {
#line 5282
    printk("\vd-con %s: tconn_finish_peer_reqs() failed\n", tconn->name);
#line 5283
    goto reconnect;
  } else {

  }
#line 5286
  if (tcp_cork != 0) {
#line 5287
    drbd_tcp_uncork(tconn->meta.socket);
  } else {

  }
#line 5290
  tmp___7 = get_current();
#line 5290
  tmp___8 = signal_pending(tmp___7);
#line 5290
  if (tmp___8 != 0) {
#line 5291
    goto ldv_53943;
  } else {

  }
#line 5293
  rv = drbd_recv_short(tconn->meta.socket, buf, (size_t )(expect - received), 0);
#line 5294
  clear_bit(3, (unsigned long volatile   *)(& tconn->flags));
#line 5296
  tmp___9 = get_current();
#line 5296
  flush_signals(tmp___9);
#line 5308
  tmp___14 = __builtin_expect(rv > 0, 1L);
#line 5308
  if (tmp___14 != 0L) {
#line 5309
    received = received + rv;
#line 5310
    buf = buf + (unsigned long )rv;
  } else
#line 5311
  if (rv == 0) {
#line 5312
    tmp___13 = constant_test_bit(12U, (unsigned long const volatile   *)(& tconn->flags));
#line 5312
    if (tmp___13 != 0) {
#line 5314
      rcu_read_lock();
#line 5315
      _________p1___0 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 5315
      tmp___10 = debug_lockdep_rcu_enabled();
#line 5315
      if (tmp___10 != 0 && ! __warned___0) {
#line 5315
        tmp___11 = rcu_read_lock_held();
#line 5315
        if (tmp___11 == 0 && 1) {
#line 5315
          __warned___0 = 1;
#line 5315
          lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                                 5315, "suspicious rcu_dereference_check() usage");
        } else {

        }
      } else {

      }
#line 5315
      t = (long )((_________p1___0->ping_timeo * 250U) / 10U);
#line 5316
      rcu_read_unlock();
#line 5318
      __ret = t;
#line 5318
      if ((unsigned int )tconn->cstate > 8U) {
#line 5318
        tmp___12 = get_current();
#line 5318
        __wait.flags = 0U;
#line 5318
        __wait.private = (void *)tmp___12;
#line 5318
        __wait.func = & autoremove_wake_function;
#line 5318
        __wait.task_list.next = & __wait.task_list;
#line 5318
        __wait.task_list.prev = & __wait.task_list;
        ldv_53951: 
#line 5318
        prepare_to_wait(& tconn->ping_wait, & __wait, 2);
#line 5318
        if ((unsigned int )tconn->cstate <= 8U) {
#line 5318
          goto ldv_53950;
        } else {

        }
#line 5318
        __ret = schedule_timeout(__ret);
#line 5318
        if (__ret == 0L) {
#line 5318
          goto ldv_53950;
        } else {

        }
#line 5318
        goto ldv_53951;
        ldv_53950: 
#line 5318
        finish_wait(& tconn->ping_wait, & __wait);
      } else {

      }
#line 5318
      t = __ret;
#line 5321
      if (t != 0L) {
#line 5322
        goto ldv_53953;
      } else {

      }
    } else {

    }
#line 5324
    printk("\vd-con %s: meta connection shut down by peer.\n", tconn->name);
#line 5325
    goto reconnect;
  } else
#line 5326
  if (rv == -11) {
#line 5329
    if ((1 != 0 && 1 != 0) && (long )((unsigned long )jiffies - (unsigned long )((tconn->meta.socket)->sk)->sk_rcvtimeo) - (long )tconn->last_received < 0L) {
#line 5331
      goto ldv_53943;
    } else {

    }
#line 5332
    if ((int )ping_timeout_active) {
#line 5333
      printk("\vd-con %s: PingAck did not arrive in time.\n", tconn->name);
#line 5334
      goto reconnect;
    } else {

    }
#line 5336
    set_bit(2U, (unsigned long volatile   *)(& tconn->flags));
#line 5337
    goto ldv_53943;
  } else
#line 5338
  if (rv == -4) {
#line 5339
    goto ldv_53943;
  } else {
#line 5341
    printk("\vd-con %s: sock_recvmsg returned %d\n", tconn->name, rv);
#line 5342
    goto reconnect;
  }
#line 5345
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 5346
    tmp___15 = decode_header(tconn, tconn->meta.rbuf, & pi);
#line 5346
    if (tmp___15 != 0) {
#line 5347
      goto reconnect;
    } else {

    }
#line 5348
    cmd = (struct asender_cmd *)(& asender_tbl) + (unsigned long )pi.cmd;
#line 5349
    if ((unsigned int )pi.cmd > (unsigned int )P_RETRY_WRITE || (unsigned long )cmd->fn == (unsigned long )((int (*)(struct drbd_tconn * ,
                                                                                                                     struct packet_info * ))0)) {
#line 5350
      tmp___16 = cmdname(pi.cmd);
#line 5350
      printk("\vd-con %s: Unexpected meta packet %s (0x%04x)\n", tconn->name, tmp___16,
             (unsigned int )pi.cmd);
#line 5352
      goto disconnect;
    } else {

    }
#line 5354
    expect = (int )((unsigned int )cmd->pkt_size + header_size);
#line 5355
    if (pi.size != (unsigned int )expect - header_size) {
#line 5356
      printk("\vd-con %s: Wrong packet size on meta (c: %d, l: %d)\n", tconn->name,
             (unsigned int )pi.cmd, pi.size);
#line 5358
      goto reconnect;
    } else {

    }
  } else {

  }
#line 5361
  if (received == expect) {
#line 5364
    tmp___17 = (*(cmd->fn))(tconn, & pi);
#line 5364
    err = tmp___17 != 0;
#line 5365
    if ((int )err) {
#line 5366
      printk("\vd-con %s: %pf failed\n", tconn->name, cmd->fn);
#line 5367
      goto reconnect;
    } else {

    }
#line 5370
    tconn->last_received = jiffies;
#line 5372
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)(& asender_tbl) + 20UL)) {
#line 5374
      ((tconn->meta.socket)->sk)->sk_rcvtimeo = (long )(ping_int * 250);
#line 5375
      ping_timeout_active = 0;
    } else {

    }
#line 5378
    buf = tconn->meta.rbuf;
#line 5379
    received = 0;
#line 5380
    expect = (int )header_size;
#line 5381
    cmd = 0;
  } else {

  }
  ldv_53943: 
#line 5258
  tmp___18 = get_t_state(thi);
#line 5258
  if ((unsigned int )tmp___18 == 1U) {
#line 5259
    goto ldv_53964;
  } else {

  }
  ldv_53953: ;
#line 5385
  if (0) {
    reconnect: 
#line 5387
    val.i = 0U;
#line 5387
    val.ldv_40604.conn = 5U;
#line 5387
    mask.i = 0U;
#line 5387
    mask.ldv_40604.conn = 31U;
#line 5387
    conn_request_state(tconn, mask, val, CS_HARD);
#line 5388
    conn_md_sync(tconn);
  } else {

  }
#line 5390
  if (0) {
    disconnect: 
#line 5392
    val___0.i = 0U;
#line 5392
    val___0.ldv_40604.conn = 1U;
#line 5392
    mask___0.i = 0U;
#line 5392
    mask___0.ldv_40604.conn = 31U;
#line 5392
    conn_request_state(tconn, mask___0, val___0, CS_HARD);
  } else {

  }
#line 5394
  clear_bit(3, (unsigned long volatile   *)(& tconn->flags));
#line 5396
  printk("\016d-con %s: asender terminated\n", tconn->name);
#line 5398
  return (0);
}
}
#line 5438 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 5450
  LDV_IN_INTERRUPT = 1;
#line 5459
  ldv_initialize();
#line 5461
  goto ldv_53992;
  ldv_53991: 
#line 5464
  tmp = nondet_int();
#line 5464
  switch (tmp) {
  default: ;
#line 5466
  goto ldv_53990;
  }
  ldv_53990: ;
  ldv_53992: 
#line 5461
  tmp___0 = nondet_int();
#line 5461
  if (tmp___0 != 0) {
#line 5462
    goto ldv_53991;
  } else {

  }


#line 5475
  ldv_check_final_state();
#line 5478
  return;
}
}
#line 307 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_change_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 311
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btc %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 315
  return (oldbit);
}
}
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 173 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 31 "include/linux/kref.h"
__inline static void kref_init(struct kref *kref ) 
{ 


  {
#line 33
  atomic_set(& kref->refcount, 1);
#line 34
  return;
}
}
#line 2145 "include/linux/fs.h"
extern char const   *bdevname(struct block_device * , char * ) ;
#line 201 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 203
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 203
  if (tmp != 0L) {
#line 204
    if (part->partno != 0) {
#line 205
      __mptr = (struct device  const  *)part->__dev.parent;
#line 205
      return ((struct gendisk *)__mptr + 0xffffffffffffff90UL);
    } else {
#line 207
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 207
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffff90UL);
    }
  } else {

  }
#line 209
  return (0);
}
}
#line 373 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 375
  atomic_inc((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 376
  if (part->partno != 0) {
#line 377
    tmp = part_to_disk(part);
#line 377
    atomic_inc((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 378
  return;
}
}
#line 380 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 382
  atomic_dec((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 383
  if (part->partno != 0) {
#line 384
    tmp = part_to_disk(part);
#line 384
    atomic_dec((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 385
  return;
}
}
#line 406
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 282 "include/linux/backing-dev.h"
__inline static int bdi_read_congested(struct backing_dev_info *bdi ) 
{ 
  int tmp ;

  {
#line 284
  tmp = bdi_congested(bdi, 8);
#line 284
  return (tmp);
}
}
#line 1369 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool ;
#line 1421
void __drbd_make_request(struct drbd_conf *mdev , struct bio *bio , unsigned long start_time ) ;
#line 1422
void drbd_make_request(struct request_queue *q , struct bio *bio ) ;
#line 1424
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1969 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1971
  atomic_inc(& mdev->ap_pending_cnt);
#line 1972
  return;
}
}
#line 1981 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void _dec_ap_pending(struct drbd_conf *mdev , char const   *func ,
                                     int line ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1983
  tmp = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 1983
  if (tmp != 0) {
#line 1984
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 1985
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1985
  if (tmp___1 < 0) {
#line 1985
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1985
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            func, line, tmp___0);
  } else {

  }
#line 1986
  return;
}
}
#line 2133 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  struct net_conf *nc ;
  int mxb ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 2138
  rcu_read_lock();
#line 2139
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 2139
  tmp = debug_lockdep_rcu_enabled();
#line 2139
  if (tmp != 0 && ! __warned) {
#line 2139
    tmp___0 = rcu_read_lock_held();
#line 2139
    if (tmp___0 == 0 && 1) {
#line 2139
      __warned = 1;
#line 2139
      lockdep_rcu_suspicious("/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
                             2139, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 2139
  nc = _________p1;
#line 2140
  mxb = (unsigned long )nc != (unsigned long )((struct net_conf *)0) ? (int )nc->max_buffers : 1000000;
#line 2141
  rcu_read_unlock();
#line 2143
  return (mxb);
}
}
#line 2146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(struct drbd_conf *mdev ) 
{ 
  union drbd_dev_state s ;

  {
#line 2148
  s = mdev->state;
#line 2153
  switch ((unsigned int )s.ldv_50103.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2178
  goto ldv_51604;
  case 13U: ;
#line 2182
  if ((mdev->tconn)->agreed_pro_version <= 95) {
#line 2183
    return (0);
  } else {

  }
#line 2184
  goto ldv_51604;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2191
  return (0);
  }
  ldv_51604: ;
#line 2194
  switch ((unsigned int )s.ldv_50103.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
  case 2U: ;
#line 2202
  goto ldv_51615;
  case 1U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2210
  return (0);
  }
  ldv_51615: ;
#line 2213
  return (1);
}
}
#line 2223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2225
  tmp = drbd_get_max_buffers(mdev);
#line 2225
  mxb = tmp;
#line 2227
  tmp___0 = drbd_suspended(mdev);
#line 2227
  if (tmp___0 != 0) {
#line 2228
    return (0);
  } else {

  }
#line 2229
  tmp___1 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 2229
  if (tmp___1 != 0) {
#line 2230
    return (0);
  } else {

  }
#line 2237
  tmp___2 = drbd_state_is_stable(mdev);
#line 2237
  if (tmp___2 == 0) {
#line 2238
    return (0);
  } else {

  }
#line 2242
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2242
  if (tmp___3 > mxb) {
#line 2243
    return (0);
  } else {

  }
#line 2244
  tmp___4 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 2244
  if (tmp___4 != 0) {
#line 2245
    return (0);
  } else {

  }
#line 2246
  return (1);
}
}
#line 2249 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool inc_ap_bio_cond(struct drbd_conf *mdev ) 
{ 
  bool rv ;

  {
#line 2251
  rv = 0;
#line 2253
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 2254
  rv = may_inc_ap_bio(mdev);
#line 2255
  if ((int )rv) {
#line 2256
    atomic_inc(& mdev->ap_bio_cnt);
  } else {

  }
#line 2257
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 2259
  return (rv);
}
}
#line 2262 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev ) 
{ 
  bool tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  bool tmp___1 ;

  {
#line 2272
  tmp = inc_ap_bio_cond(mdev);
#line 2272
  if ((int )tmp) {
#line 2272
    goto ldv_51635;
  } else {

  }
#line 2272
  tmp___0 = get_current();
#line 2272
  __wait.flags = 0U;
#line 2272
  __wait.private = (void *)tmp___0;
#line 2272
  __wait.func = & autoremove_wake_function;
#line 2272
  __wait.task_list.next = & __wait.task_list;
#line 2272
  __wait.task_list.prev = & __wait.task_list;
  ldv_51638: 
#line 2272
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2272
  tmp___1 = inc_ap_bio_cond(mdev);
#line 2272
  if ((int )tmp___1) {
#line 2272
    goto ldv_51637;
  } else {

  }
#line 2272
  schedule();
#line 2272
  goto ldv_51638;
  ldv_51637: 
#line 2272
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51635: ;
#line 2275
  return;
}
}
#line 2275 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2277
  tmp = drbd_get_max_buffers(mdev);
#line 2277
  mxb = tmp;
#line 2278
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2278
  ap_bio = tmp___0;
#line 2280
  if (ap_bio < 0) {
#line 2280
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2280);
  } else {

  }
#line 2282
  if (ap_bio == 0) {
#line 2282
    tmp___2 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 2282
    if (tmp___2 != 0) {
#line 2283
      tmp___1 = test_and_set_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 2283
      if (tmp___1 == 0) {
#line 2284
        drbd_queue_work(& (mdev->tconn)->sender_work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2290
  if (ap_bio < mxb) {
#line 2291
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2292
  return;
}
}
#line 270 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
void drbd_req_destroy(struct kref *kref ) ;
#line 277
void request_timer_fn(unsigned long data ) ;
#line 282
void drbd_restart_request(struct drbd_request *req ) ;
#line 286 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 288
  mdev = req->w.ldv_50388.mdev;
#line 293
  rv = __req_mod(req, what, & m);
#line 294
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 295
    complete_master_bio(mdev, & m);
  } else {

  }
#line 297
  return (rv);
}
}
#line 322 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_do_remote(union drbd_dev_state s ) 
{ 


  {
#line 324
  return ((bool )(*((unsigned int *)(& s) + 0UL) == 65536U || (((int )s.ldv_50103.pdsk > 3 && (int )s.ldv_50103.conn > 13) && (int )s.ldv_50103.conn <= 21)));
}
}
#line 332 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_send_out_of_sync(union drbd_dev_state s ) 
{ 


  {
#line 334
  return ((bool )((unsigned int )*((unsigned short *)(& s) + 0UL) == 352U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 208U));
}
}
#line 41 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static bool drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  struct thread_info *tmp ;
  int pscr_ret__ ;
  void const   *__vpp_verify ;
  int pfo_ret__ ;
  int pfo_ret_____0 ;
  int pfo_ret_____1 ;
  int pfo_ret_____2 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___3 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___1 ;
  struct thread_info *tmp___2 ;

  {
#line 46
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 48
  rcu_read_lock();
#line 48
  tmp = current_thread_info();
#line 48
  tmp->preempt_count = tmp->preempt_count + 1;
#line 48
  __asm__  volatile   ("": : : "memory");
#line 48
  __vpp_verify = 0;
#line 48
  switch (4UL) {
  case 1UL: ;
#line 48
  switch (4UL) {
  case 1UL: 
#line 48
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 48
  goto ldv_51807;
  case 2UL: 
#line 48
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 48
  goto ldv_51807;
  case 4UL: 
#line 48
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 48
  goto ldv_51807;
  case 8UL: 
#line 48
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 48
  goto ldv_51807;
  default: 
#line 48
  __bad_percpu_size();
  }
  ldv_51807: 
#line 48
  pscr_ret__ = pfo_ret__;
#line 48
  goto ldv_51813;
  case 2UL: ;
#line 48
  switch (4UL) {
  case 1UL: 
#line 48
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
#line 48
  goto ldv_51817;
  case 2UL: 
#line 48
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 48
  goto ldv_51817;
  case 4UL: 
#line 48
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 48
  goto ldv_51817;
  case 8UL: 
#line 48
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 48
  goto ldv_51817;
  default: 
#line 48
  __bad_percpu_size();
  }
  ldv_51817: 
#line 48
  pscr_ret__ = pfo_ret_____0;
#line 48
  goto ldv_51813;
  case 4UL: ;
#line 48
  switch (4UL) {
  case 1UL: 
#line 48
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
#line 48
  goto ldv_51826;
  case 2UL: 
#line 48
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 48
  goto ldv_51826;
  case 4UL: 
#line 48
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 48
  goto ldv_51826;
  case 8UL: 
#line 48
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 48
  goto ldv_51826;
  default: 
#line 48
  __bad_percpu_size();
  }
  ldv_51826: 
#line 48
  pscr_ret__ = pfo_ret_____1;
#line 48
  goto ldv_51813;
  case 8UL: ;
#line 48
  switch (4UL) {
  case 1UL: 
#line 48
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
#line 48
  goto ldv_51835;
  case 2UL: 
#line 48
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 48
  goto ldv_51835;
  case 4UL: 
#line 48
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 48
  goto ldv_51835;
  case 8UL: 
#line 48
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 48
  goto ldv_51835;
  default: 
#line 48
  __bad_percpu_size();
  }
  ldv_51835: 
#line 48
  pscr_ret__ = pfo_ret_____2;
#line 48
  goto ldv_51813;
  default: 
#line 48
  __bad_size_call_parameter();
#line 48
  goto ldv_51813;
  }
  ldv_51813: 
#line 48
  cpu = pscr_ret__;
#line 49
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 50
  __vpp_verify___0 = 0;
#line 50
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 50
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 50
  if ((mdev->vdisk)->part0.partno != 0) {
#line 50
    __vpp_verify___1 = 0;
#line 50
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 50
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 50
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 51
  __vpp_verify___2 = 0;
#line 51
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 51
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 51
  if ((mdev->vdisk)->part0.partno != 0) {
#line 51
    __vpp_verify___3 = 0;
#line 51
    tmp___1 = part_to_disk(& (mdev->vdisk)->part0);
#line 51
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___1->part0.dkstats));
#line 51
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 54
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 55
  __asm__  volatile   ("": : : "memory");
#line 55
  tmp___2 = current_thread_info();
#line 55
  tmp___2->preempt_count = tmp___2->preempt_count + -1;
#line 55
  __asm__  volatile   ("": : : "memory");
#line 55
  rcu_read_unlock();
#line 56
  return;
}
}
#line 59 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  struct thread_info *tmp ;
  int pscr_ret__ ;
  void const   *__vpp_verify ;
  int pfo_ret__ ;
  int pfo_ret_____0 ;
  int pfo_ret_____1 ;
  int pfo_ret_____2 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  struct thread_info *tmp___1 ;

  {
#line 61
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 62
  duration = (unsigned long )jiffies - req->start_time;
#line 64
  rcu_read_lock();
#line 64
  tmp = current_thread_info();
#line 64
  tmp->preempt_count = tmp->preempt_count + 1;
#line 64
  __asm__  volatile   ("": : : "memory");
#line 64
  __vpp_verify = 0;
#line 64
  switch (4UL) {
  case 1UL: ;
#line 64
  switch (4UL) {
  case 1UL: 
#line 64
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 64
  goto ldv_51873;
  case 2UL: 
#line 64
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 64
  goto ldv_51873;
  case 4UL: 
#line 64
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 64
  goto ldv_51873;
  case 8UL: 
#line 64
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 64
  goto ldv_51873;
  default: 
#line 64
  __bad_percpu_size();
  }
  ldv_51873: 
#line 64
  pscr_ret__ = pfo_ret__;
#line 64
  goto ldv_51879;
  case 2UL: ;
#line 64
  switch (4UL) {
  case 1UL: 
#line 64
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
#line 64
  goto ldv_51883;
  case 2UL: 
#line 64
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 64
  goto ldv_51883;
  case 4UL: 
#line 64
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 64
  goto ldv_51883;
  case 8UL: 
#line 64
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 64
  goto ldv_51883;
  default: 
#line 64
  __bad_percpu_size();
  }
  ldv_51883: 
#line 64
  pscr_ret__ = pfo_ret_____0;
#line 64
  goto ldv_51879;
  case 4UL: ;
#line 64
  switch (4UL) {
  case 1UL: 
#line 64
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
#line 64
  goto ldv_51892;
  case 2UL: 
#line 64
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 64
  goto ldv_51892;
  case 4UL: 
#line 64
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 64
  goto ldv_51892;
  case 8UL: 
#line 64
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 64
  goto ldv_51892;
  default: 
#line 64
  __bad_percpu_size();
  }
  ldv_51892: 
#line 64
  pscr_ret__ = pfo_ret_____1;
#line 64
  goto ldv_51879;
  case 8UL: ;
#line 64
  switch (4UL) {
  case 1UL: 
#line 64
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
#line 64
  goto ldv_51901;
  case 2UL: 
#line 64
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 64
  goto ldv_51901;
  case 4UL: 
#line 64
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 64
  goto ldv_51901;
  case 8UL: 
#line 64
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 64
  goto ldv_51901;
  default: 
#line 64
  __bad_percpu_size();
  }
  ldv_51901: 
#line 64
  pscr_ret__ = pfo_ret_____2;
#line 64
  goto ldv_51879;
  default: 
#line 64
  __bad_size_call_parameter();
#line 64
  goto ldv_51879;
  }
  ldv_51879: 
#line 64
  cpu = pscr_ret__;
#line 65
  __vpp_verify___0 = 0;
#line 65
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 65
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 65
  if ((mdev->vdisk)->part0.partno != 0) {
#line 65
    __vpp_verify___1 = 0;
#line 65
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 65
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 65
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 66
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 67
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 68
  __asm__  volatile   ("": : : "memory");
#line 68
  tmp___1 = current_thread_info();
#line 68
  tmp___1->preempt_count = tmp___1->preempt_count + -1;
#line 68
  __asm__  volatile   ("": : : "memory");
#line 68
  rcu_read_unlock();
#line 69
  return;
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct drbd_request *req ;
  void *tmp ;

  {
#line 76
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 76
  req = (struct drbd_request *)tmp;
#line 77
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 78
    return (0);
  } else {

  }
#line 80
  drbd_req_make_private_bio(req, bio_src);
#line 81
  req->rq_state = (int )bio_src->bi_rw & 1 ? 2048U : 0U;
#line 82
  req->w.ldv_50388.mdev = mdev;
#line 83
  req->master_bio = bio_src;
#line 84
  req->epoch = 0U;
#line 86
  drbd_clear_interval(& req->i);
#line 87
  req->i.sector = bio_src->bi_sector;
#line 88
  req->i.size = bio_src->bi_size;
#line 89
  req->i.local = -1;
#line 90
  req->i.waiting = 0;
#line 92
  INIT_LIST_HEAD(& req->tl_requests);
#line 93
  INIT_LIST_HEAD(& req->w.list);
#line 96
  atomic_set(& req->completion_ref, 1);
#line 98
  kref_init(& req->kref);
#line 99
  return (req);
}
}
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void drbd_req_destroy(struct kref *kref ) 
{ 
  struct drbd_request *req ;
  struct kref  const  *__mptr ;
  struct drbd_conf *mdev ;
  unsigned int s ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 104
  __mptr = (struct kref  const  *)kref;
#line 104
  req = (struct drbd_request *)__mptr + 0xffffffffffffff74UL;
#line 105
  mdev = req->w.ldv_50388.mdev;
#line 106
  s = req->rq_state;
#line 108
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0) && ((unsigned long )s & 8192UL) == 0UL) {
#line 112
    tmp = atomic_read((atomic_t const   *)(& req->completion_ref));
#line 112
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_req_destroy: Logic BUG rq_state = 0x%x, completion_ref = %d\n",
            s, tmp);
#line 114
    return;
  } else {
#line 108
    tmp___0 = atomic_read((atomic_t const   *)(& req->completion_ref));
#line 108
    if (tmp___0 != 0) {
#line 112
      tmp = atomic_read((atomic_t const   *)(& req->completion_ref));
#line 112
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_req_destroy: Logic BUG rq_state = 0x%x, completion_ref = %d\n",
              s, tmp);
#line 114
      return;
    } else
#line 108
    if ((int )s & 1) {
#line 112
      tmp = atomic_read((atomic_t const   *)(& req->completion_ref));
#line 112
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_req_destroy: Logic BUG rq_state = 0x%x, completion_ref = %d\n",
              s, tmp);
#line 114
      return;
    } else
#line 108
    if (((unsigned long )s & 1008UL) != 0UL && ((unsigned long )s & 128UL) == 0UL) {
#line 112
      tmp = atomic_read((atomic_t const   *)(& req->completion_ref));
#line 112
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_req_destroy: Logic BUG rq_state = 0x%x, completion_ref = %d\n",
              s, tmp);
#line 114
      return;
    } else {

    }
  }
#line 123
  list_del_init(& req->tl_requests);
#line 128
  if (((unsigned long )s & 2048UL) != 0UL) {
#line 140
    if (((unsigned long )s & 9215UL) != 8192UL) {
#line 141
      if (((unsigned long )s & 256UL) == 0UL || ((unsigned long )s & 4UL) == 0UL) {
#line 142
        __drbd_set_out_of_sync(mdev, req->i.sector, (int )req->i.size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                               142U);
      } else {

      }
#line 144
      if ((((unsigned long )s & 256UL) != 0UL && ((unsigned long )s & 4UL) != 0UL) && ((unsigned long )s & 512UL) != 0UL) {
#line 145
        __drbd_set_in_sync(mdev, req->i.sector, (int )req->i.size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                           145U);
      } else {

      }
    } else {

    }
#line 158
    if (((unsigned long )s & 4096UL) != 0UL) {
#line 159
      tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 159
      if (tmp___2 != 0) {
#line 160
        drbd_al_complete_io(mdev, & req->i);
#line 161
        put_ldev(mdev);
      } else {
#line 162
        tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_req_destroy");
#line 162
        if (tmp___1 != 0) {
#line 163
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu, %u), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->i.sector, req->i.size);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 170
  mempool_free((void *)req, drbd_request_mempool);
#line 171
  return;
}
}
#line 173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void wake_all_senders(struct drbd_tconn *tconn ) 
{ 


  {
#line 174
  __wake_up(& tconn->sender_work.q_wait, 3U, 1, 0);
#line 175
  return;
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void start_new_tl_epoch(struct drbd_tconn *tconn ) 
{ 


  {
#line 181
  if (tconn->current_tle_writes == 0U) {
#line 182
    return;
  } else {

  }
#line 184
  tconn->current_tle_writes = 0U;
#line 185
  atomic_inc(& tconn->current_tle_nr);
#line 186
  wake_all_senders(tconn);
#line 187
  return;
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 192
  bio_endio(m->bio, m->error);
#line 193
  dec_ap_bio(mdev);
#line 194
  return;
}
}
#line 197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void drbd_remove_request_interval(struct rb_root *root , struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_interval *i ;

  {
#line 200
  mdev = req->w.ldv_50388.mdev;
#line 201
  i = & req->i;
#line 203
  drbd_remove_interval(root, i);
#line 206
  if ((unsigned int )*((unsigned char *)i + 48UL) != 0U) {
#line 207
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 208
  return;
}
}
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void drbd_req_complete(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned int s ;
  struct drbd_conf *mdev ;
  int rw ;
  int error ;
  int ok ;
  long tmp ;
  struct rb_root *root ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 219
  s = req->rq_state;
#line 220
  mdev = req->w.ldv_50388.mdev;
#line 233
  if (((((int )s & 1 && ((unsigned long )s & 8UL) == 0UL) || ((unsigned long )s & 32UL) != 0UL) || ((unsigned long )s & 16UL) != 0UL) || ((unsigned long )s & 16384UL) != 0UL) {
#line 236
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_req_complete: Logic BUG rq_state = 0x%x\n",
            s);
#line 237
    return;
  } else {

  }
#line 240
  if ((unsigned long )req->master_bio == (unsigned long )((struct bio *)0)) {
#line 241
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_req_complete: Logic BUG, master_bio == NULL!\n");
#line 242
    return;
  } else {

  }
#line 245
  rw = (int )(req->master_bio)->bi_rw & 8193;
#line 260
  ok = ((unsigned long )s & 4UL) != 0UL || ((unsigned long )s & 256UL) != 0UL;
#line 261
  tmp = PTR_ERR((void const   *)req->private_bio);
#line 261
  error = (int )tmp;
#line 265
  tmp___0 = drbd_interval_empty(& req->i);
#line 265
  if (tmp___0) {
#line 265
    tmp___1 = 0;
  } else {
#line 265
    tmp___1 = 1;
  }
#line 265
  if (tmp___1) {
#line 268
    if (rw == 1) {
#line 269
      root = & mdev->write_requests;
    } else {
#line 271
      root = & mdev->read_requests;
    }
#line 272
    drbd_remove_request_interval(root, req);
  } else
#line 273
  if (((unsigned long )s & 8192UL) == 0UL) {
#line 274
    if (((unsigned long )s & 880UL) != 0UL) {
#line 274
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & (RQ_NET_MASK & ~RQ_NET_DONE)) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              274);
    } else {

    }
  } else {

  }
#line 283
  if (rw == 1) {
#line 283
    tmp___2 = atomic_read((atomic_t const   *)(& (mdev->tconn)->current_tle_nr));
#line 283
    if (req->epoch == (unsigned int )tmp___2) {
#line 285
      start_new_tl_epoch(mdev->tconn);
    } else {

    }
  } else {

  }
#line 288
  _drbd_end_io_acct(mdev, req);
#line 304
  if (ok == 0 && rw == 0) {
#line 304
    tmp___3 = list_empty((struct list_head  const  *)(& req->tl_requests));
#line 304
    if (tmp___3 == 0) {
#line 305
      req->rq_state = req->rq_state | 8192U;
    } else {

    }
  } else {

  }
#line 307
  if (((unsigned long )req->rq_state & 8192UL) == 0UL) {
#line 308
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 309
    m->bio = req->master_bio;
#line 310
    req->master_bio = 0;
  } else {

  }
#line 312
  return;
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_req_put_completion_ref(struct drbd_request *req , struct bio_and_error *m ,
                                       int put ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 316
  mdev = req->w.ldv_50388.mdev;
#line 317
  if ((unsigned long )m == (unsigned long )((struct bio_and_error *)0) && ((unsigned long )req->rq_state & 8192UL) == 0UL) {
#line 317
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( m || (req->rq_state & RQ_POSTPONED) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            317);
  } else {

  }
#line 319
  tmp = atomic_sub_and_test(put, & req->completion_ref);
#line 319
  if (tmp == 0) {
#line 320
    return (0);
  } else {

  }
#line 322
  drbd_req_complete(req, m);
#line 324
  if (((unsigned long )req->rq_state & 8192UL) != 0UL) {
#line 327
    drbd_restart_request(req);
#line 328
    return (0);
  } else {

  }
#line 331
  return (1);
}
}
#line 336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void mod_rq_state(struct drbd_request *req , struct bio_and_error *m , int clear ,
                         int set ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int s ;
  int c_put ;
  int k_put ;
  int tmp ;
  int at_least ;
  int refcount ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 339
  mdev = req->w.ldv_50388.mdev;
#line 340
  s = req->rq_state;
#line 341
  c_put = 0;
#line 342
  k_put = 0;
#line 344
  tmp = drbd_suspended(mdev);
#line 344
  if (tmp != 0 && ((unsigned long )(s | (unsigned int )clear) & 16384UL) == 0UL) {
#line 345
    set = set | 16384;
  } else {

  }
#line 349
  req->rq_state = req->rq_state & (unsigned int )(~ clear);
#line 350
  req->rq_state = req->rq_state | (unsigned int )set;
#line 353
  if (req->rq_state == s) {
#line 354
    return;
  } else {

  }
#line 358
  if (((unsigned long )s & 1UL) == 0UL && set & 1) {
#line 359
    atomic_inc(& req->completion_ref);
  } else {

  }
#line 361
  if (((unsigned long )s & 16UL) == 0UL && ((unsigned long )set & 16UL) != 0UL) {
#line 362
    inc_ap_pending(mdev);
#line 363
    atomic_inc(& req->completion_ref);
  } else {

  }
#line 366
  if (((unsigned long )s & 32UL) == 0UL && ((unsigned long )set & 32UL) != 0UL) {
#line 367
    atomic_inc(& req->completion_ref);
  } else {

  }
#line 369
  if (((unsigned long )s & 131072UL) == 0UL && ((unsigned long )set & 131072UL) != 0UL) {
#line 370
    kref_get(& req->kref);
  } else {

  }
#line 372
  if (((unsigned long )s & 64UL) == 0UL && ((unsigned long )set & 64UL) != 0UL) {
#line 373
    atomic_add((int )(req->i.size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 375
  if (((unsigned long )s & 16384UL) == 0UL && ((unsigned long )set & 16384UL) != 0UL) {
#line 376
    atomic_inc(& req->completion_ref);
  } else {

  }
#line 380
  if (((unsigned long )s & 16384UL) != 0UL && ((unsigned long )clear & 16384UL) != 0UL) {
#line 381
    c_put = c_put + 1;
  } else {

  }
#line 383
  if (((unsigned long )s & 8UL) == 0UL && ((unsigned long )set & 8UL) != 0UL) {
#line 384
    if (((unsigned long )req->rq_state & 1UL) == 0UL) {
#line 384
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_LOCAL_PENDING ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              384);
    } else {

    }
#line 387
    kref_get(& req->kref);
#line 388
    c_put = c_put + 1;
  } else {

  }
#line 391
  if ((int )s & 1 && clear & 1) {
#line 392
    if (((unsigned long )req->rq_state & 8UL) != 0UL) {
#line 393
      k_put = k_put + 1;
    } else {
#line 395
      c_put = c_put + 1;
    }
  } else {

  }
#line 398
  if (((unsigned long )s & 16UL) != 0UL && ((unsigned long )clear & 16UL) != 0UL) {
#line 399
    _dec_ap_pending(mdev, "mod_rq_state", 399);
#line 400
    c_put = c_put + 1;
  } else {

  }
#line 403
  if (((unsigned long )s & 32UL) != 0UL && ((unsigned long )clear & 32UL) != 0UL) {
#line 404
    c_put = c_put + 1;
  } else {

  }
#line 406
  if ((((unsigned long )s & 131072UL) != 0UL && ((unsigned long )s & 128UL) == 0UL) && ((unsigned long )set & 128UL) != 0UL) {
#line 407
    if (((unsigned long )req->rq_state & 64UL) != 0UL) {
#line 408
      atomic_sub((int )(req->i.size >> 9), & mdev->ap_in_flight);
    } else {

    }
#line 409
    k_put = k_put + 1;
  } else {

  }
#line 414
  if (k_put != 0 || c_put != 0) {
#line 417
    at_least = (c_put != 0) + k_put;
#line 418
    tmp___0 = atomic_read((atomic_t const   *)(& req->kref.refcount));
#line 418
    refcount = tmp___0;
#line 419
    if (refcount < at_least) {
#line 420
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mod_rq_state: Logic BUG: %x -> %x: refcount = %d, should be >= %d\n",
              s, req->rq_state, refcount, at_least);
    } else {

    }
  } else {

  }
#line 426
  if ((unsigned int )*((unsigned char *)req + 88UL) != 0U) {
#line 427
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 429
  if (c_put != 0) {
#line 430
    tmp___1 = drbd_req_put_completion_ref(req, m, c_put);
#line 430
    k_put = tmp___1 + k_put;
  } else {

  }
#line 431
  if (k_put != 0) {
#line 432
    kref_sub(& req->kref, (unsigned int )k_put, & drbd_req_destroy);
  } else {

  }
#line 433
  return;
}
}
#line 435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void drbd_report_io_error(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  char b[32U] ;
  int tmp ;
  char const   *tmp___0 ;

  {
#line 439
  tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_report_io_error");
#line 439
  if (tmp == 0) {
#line 440
    return;
  } else {

  }
#line 442
  tmp___0 = bdevname((mdev->ldev)->backing_bdev, (char *)(& b));
#line 442
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local %s IO error sector %llu+%u on %s\n",
           ((unsigned long )req->rq_state & 2048UL) != 0UL ? (char *)"WRITE" : (char *)"READ",
           (unsigned long long )req->i.sector, req->i.size >> 9, tmp___0);
#line 447
  return;
}
}
#line 461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  struct net_conf *nc ;
  int p ;
  int rv ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;
  struct net_conf *_________p1___0 ;
  bool __warned___0 ;
  int tmp___5 ;
  int tmp___6 ;

  {
#line 464
  mdev = req->w.ldv_50388.mdev;
#line 466
  rv = 0;
#line 468
  if ((unsigned long )m != (unsigned long )((struct bio_and_error *)0)) {
#line 469
    m->bio = 0;
  } else {

  }
#line 471
  switch ((unsigned int )what) {
  default: 
#line 473
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
          473);
#line 474
  goto ldv_51994;
  case 1U: ;
#line 485
  if (((unsigned long )req->rq_state & 1008UL) != 0UL) {
#line 485
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            485);
  } else {

  }
#line 486
  rcu_read_lock();
#line 487
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 487
  tmp = debug_lockdep_rcu_enabled();
#line 487
  if (tmp != 0 && ! __warned) {
#line 487
    tmp___0 = rcu_read_lock_held();
#line 487
    if (tmp___0 == 0 && 1) {
#line 487
      __warned = 1;
#line 487
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                             487, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 487
  nc = _________p1;
#line 488
  p = (int )nc->wire_protocol;
#line 489
  rcu_read_unlock();
#line 490
  req->rq_state = req->rq_state | (p != 3 ? (p == 2 ? 32768U : 0U) : 65536U);
#line 493
  mod_rq_state(req, m, 0, 16);
#line 494
  goto ldv_51994;
  case 2U: ;
#line 498
  if (((unsigned long )req->rq_state & 15UL) != 0UL) {
#line 498
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            498);
  } else {

  }
#line 499
  mod_rq_state(req, m, 0, 1);
#line 500
  goto ldv_51994;
  case 24U: ;
#line 503
  if (((unsigned long )req->rq_state & 2048UL) != 0UL) {
#line 504
    mdev->writ_cnt = mdev->writ_cnt + (req->i.size >> 9);
  } else {
#line 506
    mdev->read_cnt = mdev->read_cnt + (req->i.size >> 9);
  }
#line 508
  mod_rq_state(req, m, 1, 6);
#line 510
  goto ldv_51994;
  case 23U: 
#line 513
  mod_rq_state(req, m, 0, 8);
#line 514
  goto ldv_51994;
  case 22U: 
#line 517
  drbd_report_io_error(mdev, req);
#line 518
  __drbd_chk_io_error_(mdev, DRBD_WRITE_ERROR, "__req_mod");
#line 519
  mod_rq_state(req, m, 1, 2);
#line 520
  goto ldv_51994;
  case 20U: 
#line 523
  __drbd_set_out_of_sync(mdev, req->i.sector, (int )req->i.size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         523U);
#line 524
  drbd_report_io_error(mdev, req);
#line 525
  __drbd_chk_io_error_(mdev, DRBD_READ_ERROR, "__req_mod");
  case 21U: 
#line 529
  mod_rq_state(req, m, 1, 2);
#line 530
  goto ldv_51994;
  case 4U: 
#line 543
  tmp___1 = drbd_interval_empty(& req->i);
#line 543
  if (tmp___1) {
#line 543
    tmp___2 = 0;
  } else {
#line 543
    tmp___2 = 1;
  }
#line 543
  if (tmp___2) {
#line 543
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_interval_empty(&req->i) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            543);
  } else {

  }
#line 544
  drbd_insert_interval(& mdev->read_requests, & req->i);
#line 546
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 548
  if (((unsigned long )req->rq_state & 16UL) == 0UL) {
#line 548
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            548);
  } else {

  }
#line 549
  if (((unsigned long )req->rq_state & 15UL) != 0UL) {
#line 549
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (req->rq_state & RQ_LOCAL_MASK) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            549);
  } else {

  }
#line 550
  mod_rq_state(req, m, 0, 32);
#line 551
  req->w.cb = & w_send_read_req;
#line 552
  drbd_queue_work(& (mdev->tconn)->sender_work, & req->w);
#line 553
  goto ldv_51994;
  case 3U: 
#line 561
  tmp___3 = drbd_interval_empty(& req->i);
#line 561
  if (tmp___3) {
#line 561
    tmp___4 = 0;
  } else {
#line 561
    tmp___4 = 1;
  }
#line 561
  if (tmp___4) {
#line 561
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_interval_empty(&req->i) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            561);
  } else {

  }
#line 562
  drbd_insert_interval(& mdev->write_requests, & req->i);
#line 581
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 584
  if (((unsigned long )req->rq_state & 16UL) == 0UL) {
#line 584
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            584);
  } else {

  }
#line 585
  mod_rq_state(req, m, 0, 131104);
#line 586
  req->w.cb = & w_send_dblock;
#line 587
  drbd_queue_work(& (mdev->tconn)->sender_work, & req->w);
#line 590
  rcu_read_lock();
#line 591
  _________p1___0 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 591
  tmp___5 = debug_lockdep_rcu_enabled();
#line 591
  if (tmp___5 != 0 && ! __warned___0) {
#line 591
    tmp___6 = rcu_read_lock_held();
#line 591
    if (tmp___6 == 0 && 1) {
#line 591
      __warned___0 = 1;
#line 591
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                             591, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 591
  nc = _________p1___0;
#line 592
  p = (int )nc->max_epoch_size;
#line 593
  rcu_read_unlock();
#line 594
  if ((mdev->tconn)->current_tle_writes >= (unsigned int )p) {
#line 595
    start_new_tl_epoch(mdev->tconn);
  } else {

  }
#line 597
  goto ldv_51994;
  case 5U: 
#line 600
  mod_rq_state(req, m, 0, 32);
#line 601
  req->w.cb = & w_send_out_of_sync;
#line 602
  drbd_queue_work(& (mdev->tconn)->sender_work, & req->w);
#line 603
  goto ldv_51994;
  case 11U: ;
  case 6U: ;
  case 7U: 
#line 610
  mod_rq_state(req, m, 32, 0);
#line 611
  goto ldv_51994;
  case 8U: ;
#line 615
  if ((int )(req->master_bio)->bi_rw & 1 && ((unsigned long )req->rq_state & 98304UL) == 0UL) {
#line 619
    if (((unsigned long )req->rq_state & 16UL) != 0UL) {
#line 620
      mod_rq_state(req, m, 16, 256);
    } else {

    }
  } else {

  }
#line 626
  mod_rq_state(req, m, 32, 64);
#line 627
  goto ldv_51994;
  case 9U: 
#line 632
  mod_rq_state(req, m, 32, 128);
#line 633
  goto ldv_51994;
  case 10U: 
#line 637
  mod_rq_state(req, m, 16656, 128);
#line 640
  goto ldv_51994;
  case 15U: ;
#line 650
  if (((unsigned long )req->rq_state & 16UL) == 0UL) {
#line 650
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            650);
  } else {

  }
#line 651
  if (((unsigned long )req->rq_state & 65536UL) == 0UL) {
#line 651
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_EXP_WRITE_ACK ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            651);
  } else {

  }
#line 652
  mod_rq_state(req, m, 16, 384);
#line 653
  goto ldv_51994;
  case 14U: 
#line 656
  req->rq_state = req->rq_state | 512U;
  case 13U: ;
#line 658
  if (((unsigned long )req->rq_state & 65536UL) == 0UL) {
#line 658
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_EXP_WRITE_ACK ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            658);
  } else {

  }
#line 664
  goto ack_common;
  case 12U: ;
#line 666
  if (((unsigned long )req->rq_state & 32768UL) == 0UL) {
#line 666
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_EXP_RECEIVE_ACK ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            666);
  } else {

  }
  ack_common: ;
#line 671
  if (((unsigned long )req->rq_state & 16UL) == 0UL) {
#line 671
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            671);
  } else {

  }
#line 672
  mod_rq_state(req, m, 16, 256);
#line 673
  goto ldv_51994;
  case 16U: ;
#line 676
  if (((unsigned long )req->rq_state & 65536UL) == 0UL) {
#line 676
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_EXP_WRITE_ACK ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            676);
  } else {

  }
#line 681
  if (((unsigned long )req->rq_state & 16UL) == 0UL) {
#line 681
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            681);
  } else {

  }
#line 682
  req->rq_state = req->rq_state | 8192U;
#line 683
  if ((unsigned int )*((unsigned char *)req + 88UL) != 0U) {
#line 684
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 688
  goto ldv_51994;
  case 17U: 
#line 691
  mod_rq_state(req, m, 272, 0);
#line 692
  goto ldv_51994;
  case 26U: ;
#line 695
  if (((unsigned long )req->rq_state & 2UL) == 0UL) {
#line 696
    goto ldv_51994;
  } else {

  }
#line 697
  mod_rq_state(req, m, 16384, 0);
#line 698
  goto ldv_51994;
  case 27U: ;
#line 701
  if (((unsigned long )req->rq_state & 2UL) == 0UL) {
#line 702
    goto ldv_51994;
  } else {

  }
#line 704
  mod_rq_state(req, m, 16386, 1);
#line 708
  rv = 2;
#line 709
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 710
    rv = 1;
  } else {

  }
#line 712
  _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 713
  req->w.cb = & w_restart_disk_io;
#line 714
  drbd_queue_work(& (mdev->tconn)->sender_work, & req->w);
#line 715
  goto ldv_51994;
  case 25U: ;
#line 719
  if (((unsigned long )req->rq_state & 2048UL) == 0UL && (unsigned long )req->w.cb == (unsigned long )((int (*)(struct drbd_work * ,
                                                                                                                int  ))0)) {
#line 720
    mod_rq_state(req, m, 16384, 0);
#line 721
    goto ldv_51994;
  } else {

  }
#line 729
  if (((unsigned long )req->rq_state & 256UL) == 0UL) {
#line 733
    mod_rq_state(req, m, 16384, 48);
#line 734
    if ((unsigned long )req->w.cb != (unsigned long )((int (*)(struct drbd_work * ,
                                                               int  ))0)) {
#line 735
      drbd_queue_work(& (mdev->tconn)->sender_work, & req->w);
#line 736
      rv = ((unsigned long )req->rq_state & 2048UL) != 0UL ? 1 : 2;
    } else {

    }
#line 738
    goto ldv_51994;
  } else {

  }
  case 18U: ;
#line 744
  if (((unsigned long )req->rq_state & 2048UL) == 0UL) {
#line 745
    goto ldv_51994;
  } else {

  }
#line 747
  if (((unsigned long )req->rq_state & 16UL) != 0UL) {
#line 751
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (BARRIER_ACKED but pending)\n");
  } else {

  }
#line 757
  mod_rq_state(req, m, 16384, ((unsigned long )req->rq_state & 1008UL) != 0UL ? 128 : 0);
#line 759
  goto ldv_51994;
  case 19U: ;
#line 762
  if (((unsigned long )req->rq_state & 16UL) == 0UL) {
#line 762
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            762);
  } else {

  }
#line 763
  mod_rq_state(req, m, 16, 384);
#line 764
  goto ldv_51994;
  }
  ldv_51994: ;
#line 767
  return (rv);
}
}
#line 777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static bool drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 782
  if ((unsigned int )*((unsigned char *)mdev + 749UL) == 16U) {
#line 783
    return (1);
  } else {

  }
#line 784
  if ((unsigned int )*((unsigned char *)mdev + 749UL) != 8U) {
#line 785
    return (0);
  } else {

  }
#line 786
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 787
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 788
  if (sector >= nr_sectors) {
#line 788
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            788);
  } else {

  }
#line 789
  if (esector >= nr_sectors) {
#line 789
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            789);
  } else {

  }
#line 791
  sbnr = sector >> 3;
#line 792
  ebnr = esector >> 3;
#line 794
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 794
  return (tmp == 0);
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static bool remote_due_to_read_balancing(struct drbd_conf *mdev , sector_t sector ,
                                         enum drbd_read_balancing rbm ) 
{ 
  struct backing_dev_info *bdi ;
  int stripe_shift ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 803
  switch ((unsigned int )rbm) {
  case 4U: 
#line 805
  bdi = & ((((mdev->ldev)->backing_bdev)->bd_disk)->queue)->backing_dev_info;
#line 806
  tmp = bdi_read_congested(bdi);
#line 806
  return (tmp != 0);
  case 3U: 
#line 808
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 808
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 808
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 808
  return (tmp___0 > tmp___1 + tmp___2);
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 8U: ;
  case 9U: ;
  case 10U: 
#line 816
  stripe_shift = (int )((unsigned int )rbm + 10U);
#line 817
  return (((sector >> (stripe_shift + -9)) & 1UL) != 0UL);
  case 2U: 
#line 819
  tmp___3 = test_and_change_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 819
  return (tmp___3 != 0);
  case 1U: ;
#line 821
  return (1);
  case 0U: ;
  default: ;
#line 824
  return (0);
  }
}
}
#line 837 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void complete_conflicting_writes(struct drbd_request *req ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  struct drbd_conf *mdev ;
  struct drbd_interval *i ;
  sector_t sector ;
  int size ;

  {
#line 839
  tmp = get_current();
#line 839
  wait.flags = 0U;
#line 839
  wait.private = (void *)tmp;
#line 839
  wait.func = & autoremove_wake_function;
#line 839
  wait.task_list.next = & wait.task_list;
#line 839
  wait.task_list.prev = & wait.task_list;
#line 840
  mdev = req->w.ldv_50388.mdev;
#line 842
  sector = req->i.sector;
#line 843
  size = (int )req->i.size;
#line 845
  i = drbd_find_overlap(& mdev->write_requests, sector, (unsigned int )size);
#line 846
  if ((unsigned long )i == (unsigned long )((struct drbd_interval *)0)) {
#line 847
    return;
  } else {

  }
  ldv_52067: 
#line 850
  prepare_to_wait(& mdev->misc_wait, & wait, 2);
#line 851
  i = drbd_find_overlap(& mdev->write_requests, sector, (unsigned int )size);
#line 852
  if ((unsigned long )i == (unsigned long )((struct drbd_interval *)0)) {
#line 853
    goto ldv_52066;
  } else {

  }
#line 855
  i->waiting = -1;
#line 856
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 857
  schedule();
#line 858
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 859
  goto ldv_52067;
  ldv_52066: 
#line 860
  finish_wait(& mdev->misc_wait, & wait);
#line 861
  return;
}
}
#line 864 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void maybe_pull_ahead(struct drbd_conf *mdev ) 
{ 
  struct drbd_tconn *tconn ;
  struct net_conf *nc ;
  bool congested ;
  enum drbd_on_congestion on_congestion ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 866
  tconn = mdev->tconn;
#line 868
  congested = 0;
#line 871
  _________p1 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 871
  tmp = debug_lockdep_rcu_enabled();
#line 871
  if (tmp != 0 && ! __warned) {
#line 871
    tmp___0 = rcu_read_lock_held();
#line 871
    if (tmp___0 == 0 && 1) {
#line 871
      __warned = 1;
#line 871
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                             871, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 871
  nc = _________p1;
#line 872
  on_congestion = (unsigned long )nc != (unsigned long )((struct net_conf *)0) ? (enum drbd_on_congestion )nc->on_congestion : OC_BLOCK;
#line 873
  if ((unsigned int )on_congestion == 0U || tconn->agreed_pro_version <= 95) {
#line 875
    return;
  } else {

  }
#line 881
  tmp___1 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 881
  if (tmp___1 == 0) {
#line 882
    return;
  } else {

  }
#line 884
  if (nc->cong_fill != 0U) {
#line 884
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 884
    if ((__u32 )tmp___2 >= nc->cong_fill) {
#line 886
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-fill threshold reached\n");
#line 887
      congested = 1;
    } else {

    }
  } else {

  }
#line 890
  if ((mdev->act_log)->used >= nc->cong_extents) {
#line 891
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-extents threshold reached\n");
#line 892
    congested = 1;
  } else {

  }
#line 895
  if ((int )congested) {
#line 897
    start_new_tl_epoch(mdev->tconn);
#line 899
    if ((unsigned int )on_congestion == 1U) {
#line 900
      __ns = drbd_read_state(mdev);
#line 900
      __ns.ldv_40604.conn = 22U;
#line 900
      _drbd_set_state(mdev, __ns, 0, 0);
    } else {
#line 902
      __ns___0 = drbd_read_state(mdev);
#line 902
      __ns___0.ldv_40604.conn = 1U;
#line 902
      _drbd_set_state(mdev, __ns___0, 0, 0);
    }
  } else {

  }
#line 904
  put_ldev(mdev);
#line 905
  return;
}
}
#line 916 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static bool do_remote_read(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_read_balancing rbm ;
  bool tmp ;
  int tmp___0 ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;

  {
#line 918
  mdev = req->w.ldv_50388.mdev;
#line 921
  if ((unsigned long )req->private_bio != (unsigned long )((struct bio *)0)) {
#line 922
    tmp = drbd_may_do_local_read(mdev, req->i.sector, (int )req->i.size);
#line 922
    if (tmp) {
#line 922
      tmp___0 = 0;
    } else {
#line 922
      tmp___0 = 1;
    }
#line 922
    if (tmp___0) {
#line 924
      bio_put(req->private_bio);
#line 925
      req->private_bio = 0;
#line 926
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 930
  if (*((unsigned int *)mdev + 187UL) != 65536U) {
#line 931
    return (0);
  } else {

  }
#line 933
  if ((unsigned long )req->private_bio == (unsigned long )((struct bio *)0)) {
#line 934
    return (1);
  } else {

  }
#line 939
  rcu_read_lock();
#line 940
  _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 940
  tmp___1 = debug_lockdep_rcu_enabled();
#line 940
  if (tmp___1 != 0 && ! __warned) {
#line 940
    tmp___2 = rcu_read_lock_held();
#line 940
    if (tmp___2 == 0 && 1) {
#line 940
      __warned = 1;
#line 940
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                             940, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 940
  rbm = (enum drbd_read_balancing )_________p1->read_balancing;
#line 941
  rcu_read_unlock();
#line 943
  if ((unsigned int )rbm == 0U && (unsigned long )req->private_bio != (unsigned long )((struct bio *)0)) {
#line 944
    return (0);
  } else {

  }
#line 946
  tmp___3 = remote_due_to_read_balancing(mdev, req->i.sector, rbm);
#line 946
  if ((int )tmp___3) {
#line 947
    if ((unsigned long )req->private_bio != (unsigned long )((struct bio *)0)) {
#line 948
      bio_put(req->private_bio);
#line 949
      req->private_bio = 0;
#line 950
      put_ldev(mdev);
    } else {

    }
#line 952
    return (1);
  } else {

  }
#line 955
  return (0);
}
}
#line 961 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_process_write_request(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  int remote ;
  int send_oos ;
  bool tmp ;
  bool tmp___0 ;
  bool tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 963
  mdev = req->w.ldv_50388.mdev;
#line 966
  rcu_read_lock();
#line 967
  tmp = drbd_should_do_remote(mdev->state);
#line 967
  remote = (int )tmp;
#line 968
  if (remote != 0) {
#line 969
    maybe_pull_ahead(mdev);
#line 970
    tmp___0 = drbd_should_do_remote(mdev->state);
#line 970
    remote = (int )tmp___0;
  } else {

  }
#line 972
  tmp___1 = drbd_should_send_out_of_sync(mdev->state);
#line 972
  send_oos = (int )tmp___1;
#line 973
  rcu_read_unlock();
#line 981
  tmp___2 = __builtin_expect(req->i.size == 0U, 0L);
#line 981
  if (tmp___2 != 0L) {
#line 983
    if (((req->master_bio)->bi_rw & 4096UL) == 0UL) {
#line 983
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->master_bio->bi_rw & REQ_FLUSH ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              983);
    } else {

    }
#line 984
    if (remote != 0) {
#line 985
      start_new_tl_epoch(mdev->tconn);
    } else {

    }
#line 986
    return (0);
  } else {

  }
#line 989
  if (remote == 0 && send_oos == 0) {
#line 990
    return (0);
  } else {

  }
#line 992
  if (remote != 0 && send_oos != 0) {
#line 992
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            992);
  } else {

  }
#line 994
  if (remote != 0) {
#line 995
    _req_mod(req, TO_BE_SENT);
#line 996
    _req_mod(req, QUEUE_FOR_NET_WRITE);
  } else {
#line 997
    tmp___3 = __drbd_set_out_of_sync(mdev, req->i.sector, (int )req->i.size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                                     997U);
#line 997
    if (tmp___3 != 0) {
#line 998
      _req_mod(req, QUEUE_FOR_SEND_OOS);
    } else {

    }
  }
#line 1000
  return (remote);
}
}
#line 1004 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void drbd_submit_req_private_bio(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  struct bio *bio ;
  int rw ;
  int tmp ;
  int tmp___0 ;

  {
#line 1006
  mdev = req->w.ldv_50388.mdev;
#line 1007
  bio = req->private_bio;
#line 1008
  rw = (int const   )bio->bi_rw & (int const   )8193;
#line 1010
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1017
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1017
  if (tmp___0 != 0) {
#line 1018
    tmp = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 1018
    if (tmp != 0) {
#line 1022
      bio_endio(bio, -5);
    } else {
#line 1024
      generic_make_request(bio);
    }
#line 1025
    put_ldev(mdev);
  } else {
#line 1027
    bio_endio(bio, -5);
  }
#line 1028
  return;
}
}
#line 1030 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void __drbd_make_request(struct drbd_conf *mdev , struct bio *bio , unsigned long start_time ) 
{ 
  int rw ;
  struct bio_and_error m ;
  struct drbd_request *req ;
  bool no_remote ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1032
  rw = (int const   )bio->bi_rw & (int const   )8193;
#line 1033
  m.bio = 0;
#line 1033
  m.error = 0;
#line 1035
  no_remote = 0;
#line 1038
  req = drbd_req_new(mdev, bio);
#line 1039
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 1040
    dec_ap_bio(mdev);
#line 1043
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 1044
    bio_endio(bio, -12);
#line 1045
    return;
  } else {

  }
#line 1047
  req->start_time = start_time;
#line 1049
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1049
  if (tmp == 0) {
#line 1050
    bio_put(req->private_bio);
#line 1051
    req->private_bio = 0;
  } else {

  }
#line 1061
  if ((rw == 1 && (unsigned long )req->private_bio != (unsigned long )((struct bio *)0)) && req->i.size != 0U) {
#line 1061
    tmp___0 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 1061
    if (tmp___0 == 0) {
#line 1063
      req->rq_state = req->rq_state | 4096U;
#line 1064
      drbd_al_begin_io(mdev, & req->i);
    } else {

    }
  } else {

  }
#line 1067
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 1068
  if (rw == 1) {
#line 1072
    complete_conflicting_writes(req);
  } else {

  }
#line 1077
  tmp___1 = drbd_suspended(mdev);
#line 1077
  if (tmp___1 != 0) {
#line 1079
    req->rq_state = req->rq_state | 8192U;
#line 1080
    if ((unsigned long )req->private_bio != (unsigned long )((struct bio *)0)) {
#line 1081
      bio_put(req->private_bio);
#line 1082
      req->private_bio = 0;
#line 1083
      put_ldev(mdev);
    } else {

    }
#line 1085
    goto out;
  } else {

  }
#line 1089
  _drbd_start_io_acct(mdev, req, bio);
#line 1094
  if (rw != 1) {
#line 1095
    tmp___2 = do_remote_read(req);
#line 1095
    if (tmp___2) {
#line 1095
      tmp___3 = 0;
    } else {
#line 1095
      tmp___3 = 1;
    }
#line 1095
    if (tmp___3 && (unsigned long )req->private_bio == (unsigned long )((struct bio *)0)) {
#line 1096
      goto nodata;
    } else {

    }
  } else {

  }
#line 1100
  tmp___4 = atomic_read((atomic_t const   *)(& (mdev->tconn)->current_tle_nr));
#line 1100
  req->epoch = (unsigned int )tmp___4;
#line 1104
  tmp___5 = __builtin_expect(req->i.size != 0U, 1L);
#line 1104
  if (tmp___5 != 0L) {
#line 1105
    if (rw == 1) {
#line 1106
      (mdev->tconn)->current_tle_writes = (mdev->tconn)->current_tle_writes + 1U;
    } else {

    }
#line 1108
    list_add_tail(& req->tl_requests, & (mdev->tconn)->transfer_log);
  } else {

  }
#line 1111
  if (rw == 1) {
#line 1112
    tmp___6 = drbd_process_write_request(req);
#line 1112
    if (tmp___6 == 0) {
#line 1113
      no_remote = 1;
    } else
#line 1117
    if ((unsigned long )req->private_bio == (unsigned long )((struct bio *)0)) {
#line 1118
      _req_mod(req, TO_BE_SENT);
#line 1119
      _req_mod(req, QUEUE_FOR_NET_READ);
    } else {
#line 1121
      no_remote = 1;
    }
  } else {

  }
#line 1124
  if ((unsigned long )req->private_bio != (unsigned long )((struct bio *)0)) {
#line 1126
    _req_mod(req, TO_BE_SUBMITTED);
#line 1128
    spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 1129
    drbd_submit_req_private_bio(req);
#line 1130
    spin_lock_irq(& (mdev->tconn)->req_lock);
  } else
#line 1131
  if ((int )no_remote) {
    nodata: 
#line 1133
    tmp___7 = ___ratelimit(& drbd_ratelimit_state, "__drbd_make_request");
#line 1133
    if (tmp___7 != 0) {
#line 1134
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote data, sector %llu+%u\n",
              (unsigned long long )req->i.sector, req->i.size >> 9);
    } else {

    }
  } else {

  }
  out: 
#line 1141
  tmp___8 = drbd_req_put_completion_ref(req, & m, 1);
#line 1141
  if (tmp___8 != 0) {
#line 1142
    kref_put(& req->kref, & drbd_req_destroy);
  } else {

  }
#line 1143
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 1145
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 1146
    complete_master_bio(mdev, & m);
  } else {

  }
#line 1147
  return;
}
}
#line 1150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void drbd_make_request(struct request_queue *q , struct bio *bio ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long start_time ;

  {
#line 1152
  mdev = (struct drbd_conf *)q->queuedata;
#line 1155
  start_time = jiffies;
#line 1160
  if ((bio->bi_size & 511U) != 0U) {
#line 1160
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( IS_ALIGNED(bio->bi_size, 512) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1160);
  } else {

  }
#line 1162
  inc_ap_bio(mdev);
#line 1163
  __drbd_make_request(mdev, bio, start_time);
#line 1164
  return;
}
}
#line 1178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1180
  mdev = (struct drbd_conf *)q->queuedata;
#line 1181
  bio_size = bvm->bi_size;
#line 1182
  limit = 1048576;
#line 1185
  if (bio_size != 0U) {
#line 1185
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1185
    if (tmp != 0) {
#line 1186
      b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1188
      if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1189
        backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1190
        _min1 = limit;
#line 1190
        _min2 = backing_limit;
#line 1190
        limit = _min1 < _min2 ? _min1 : _min2;
      } else {

      }
#line 1192
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1194
  return (limit);
}
}
#line 1197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
struct drbd_request *find_oldest_request(struct drbd_tconn *tconn ) 
{ 
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct list_head  const  *__mptr___0 ;

  {
#line 1202
  __mptr = (struct list_head  const  *)tconn->transfer_log.next;
#line 1202
  r = (struct drbd_request *)__mptr + 0xffffffffffffff98UL;
#line 1202
  goto ldv_52142;
  ldv_52141: 
#line 1203
  tmp = atomic_read((atomic_t const   *)(& r->completion_ref));
#line 1203
  if (tmp != 0) {
#line 1204
    return (r);
  } else {

  }
#line 1202
  __mptr___0 = (struct list_head  const  *)r->tl_requests.next;
#line 1202
  r = (struct drbd_request *)__mptr___0 + 0xffffffffffffff98UL;
  ldv_52142: ;
#line 1202
  if ((unsigned long )(& r->tl_requests) != (unsigned long )(& tconn->transfer_log)) {
#line 1203
    goto ldv_52141;
  } else {

  }

#line 1206
  return (0);
}
}
#line 1209 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void request_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_tconn *tconn ;
  struct drbd_request *req ;
  struct net_conf *nc ;
  unsigned long ent ;
  unsigned long dt ;
  unsigned long et ;
  unsigned long nt ;
  unsigned long now ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct disk_conf *_________p1___0 ;
  bool __warned___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  unsigned long __x ;
  unsigned long __y ;
  unsigned long _min1 ;
  unsigned long _min2 ;
  unsigned long tmp___4 ;
  unsigned long tmp___5 ;
  union drbd_state __ns ;

  {
#line 1211
  mdev = (struct drbd_conf *)data;
#line 1212
  tconn = mdev->tconn;
#line 1215
  ent = 0UL;
#line 1215
  dt = 0UL;
#line 1218
  rcu_read_lock();
#line 1219
  _________p1 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 1219
  tmp = debug_lockdep_rcu_enabled();
#line 1219
  if (tmp != 0 && ! __warned) {
#line 1219
    tmp___0 = rcu_read_lock_held();
#line 1219
    if (tmp___0 == 0 && 1) {
#line 1219
      __warned = 1;
#line 1219
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                             1219, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1219
  nc = _________p1;
#line 1220
  if ((unsigned long )nc != (unsigned long )((struct net_conf *)0) && (int )mdev->state.ldv_50103.conn > 8) {
#line 1221
    ent = (unsigned long )(((nc->timeout * 250U) / 10U) * nc->ko_count);
  } else {

  }
#line 1223
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1223
  if (tmp___3 != 0) {
#line 1224
    _________p1___0 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 1224
    tmp___1 = debug_lockdep_rcu_enabled();
#line 1224
    if (tmp___1 != 0 && ! __warned___0) {
#line 1224
      tmp___2 = rcu_read_lock_held();
#line 1224
      if (tmp___2 == 0 && 1) {
#line 1224
        __warned___0 = 1;
#line 1224
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                               1224, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 1224
    dt = (unsigned long )((_________p1___0->disk_timeout * 250U) / 10U);
#line 1225
    put_ldev(mdev);
  } else {

  }
#line 1227
  rcu_read_unlock();
#line 1229
  __x = dt;
#line 1229
  __y = ent;
#line 1229
  if (__x != 0UL) {
#line 1229
    if (__y != 0UL) {
#line 1229
      _min1 = __x;
#line 1229
      _min2 = __y;
#line 1229
      tmp___4 = _min1 < _min2 ? _min1 : _min2;
    } else {
#line 1229
      tmp___4 = __x;
    }
#line 1229
    tmp___5 = tmp___4;
  } else {
#line 1229
    tmp___5 = __y;
  }
#line 1229
  et = tmp___5;
#line 1231
  if (et == 0UL) {
#line 1232
    return;
  } else {

  }
#line 1234
  now = jiffies;
#line 1236
  spin_lock_irq(& tconn->req_lock);
#line 1237
  req = find_oldest_request(tconn);
#line 1238
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 1239
    spin_unlock_irq(& tconn->req_lock);
#line 1240
    mod_timer(& mdev->request_timer, now + et);
#line 1241
    return;
  } else {

  }
#line 1262
  if (((ent != 0UL && ((unsigned long )req->rq_state & 16UL) != 0UL) && ((1 != 0 && 1 != 0) && (long )(req->start_time + ent) - (long )now < 0L)) && (((1 == 0 || 1 == 0) || (long )now - (long )tconn->last_reconnect_jif < 0L) || ((1 == 0 || 1 == 0) || (long )(tconn->last_reconnect_jif + ent) - (long )now < 0L))) {
#line 1263
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Remote failed to finish a request within ko-count * timeout\n");
#line 1264
    __ns = drbd_read_state(mdev);
#line 1264
    __ns.ldv_40604.conn = 3U;
#line 1264
    _drbd_set_state(mdev, __ns, 3, 0);
  } else {

  }
#line 1268
  if ((((dt != 0UL && (int )req->rq_state & 1) && (unsigned long )req->w.ldv_50388.mdev == (unsigned long )mdev) && ((1 != 0 && 1 != 0) && (long )(req->start_time + dt) - (long )now < 0L)) && (((1 == 0 || 1 == 0) || (long )now - (long )mdev->last_reattach_jif < 0L) || ((1 == 0 || 1 == 0) || (long )(mdev->last_reattach_jif + dt) - (long )now < 0L))) {
#line 1269
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local backing device failed to meet the disk-timeout\n");
#line 1270
    __drbd_chk_io_error_(mdev, DRBD_FORCE_DETACH, "request_timer_fn");
  } else {

  }
#line 1272
  nt = ((1 == 0 || 1 == 0) || (long )(req->start_time + et) - (long )now >= 0L ? req->start_time : now) + et;
#line 1273
  spin_unlock_irq(& tconn->req_lock);
#line 1274
  mod_timer(& mdev->request_timer, nt);
#line 1275
  return;
}
}
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __cmpxchg_wrong_size(void) ;
#line 209 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_cmpxchg(atomic_t *v , int old , int new ) 
{ 
  int __ret ;
  int __old ;
  int __new ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
#line 211
  __old = old;
#line 211
  __new = new;
#line 211
  switch (4UL) {
  case 1UL: 
#line 211
  __ptr = (u8 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5547;
  case 2UL: 
#line 211
  __ptr___0 = (u16 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5547;
  case 4UL: 
#line 211
  __ptr___1 = (u32 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5547;
  case 8UL: 
#line 211
  __ptr___2 = (u64 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5547;
  default: 
#line 211
  __cmpxchg_wrong_size();
  }
  ldv_5547: ;
#line 211
  return (__ret);
}
}
#line 6 "include/linux/crc32c.h"
extern u32 crc32c(u32  , void const   * , unsigned int  ) ;
#line 254 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 257
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 259
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 261
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 262
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 263
extern void lc_committed(struct lru_cache * ) ;
#line 279 "include/linux/lru_cache.h"
__inline static int lc_try_lock_for_transaction(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 281
  tmp = test_and_set_bit(2, (unsigned long volatile   *)(& lc->flags));
#line 281
  return (tmp == 0);
}
}
#line 299 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 301
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 302
  clear_bit_unlock(2U, (unsigned long volatile   *)(& lc->flags));
#line 303
  return;
}
}
#line 305
extern bool lc_is_used(struct lru_cache * , unsigned int  ) ;
#line 310
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 1454 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
void *drbd_md_get_buffer(struct drbd_conf *mdev ) ;
#line 1456
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1597
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1614
void drbd_bcast_event(struct drbd_conf *mdev , struct sib_info  const  *sib ) ;
#line 1675 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____2(struct drbd_conf *mdev , enum drbd_force_detach_flags df ,
                                              char const   *where ) 
{ 
  enum drbd_io_error_p ep ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1681
  rcu_read_lock();
#line 1682
  _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 1682
  tmp = debug_lockdep_rcu_enabled();
#line 1682
  if (tmp != 0 && ! __warned) {
#line 1682
    tmp___0 = rcu_read_lock_held();
#line 1682
    if (tmp___0 == 0 && 1) {
#line 1682
      __warned = 1;
#line 1682
      lockdep_rcu_suspicious("/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
                             1682, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1682
  ep = (enum drbd_io_error_p )_________p1->on_io_error;
#line 1683
  rcu_read_unlock();
#line 1684
  switch ((unsigned int )ep) {
  case 0U: ;
#line 1686
  if ((unsigned int )df == 0U || (unsigned int )df == 1U) {
#line 1687
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1687
    if (tmp___1 != 0) {
#line 1688
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1689
    if ((int )mdev->state.ldv_50103.disk > 4) {
#line 1690
      __ns = drbd_read_state(mdev);
#line 1690
      __ns.ldv_40604.disk = 4U;
#line 1690
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1691
    goto ldv_51379;
  } else {

  }
  case 2U: ;
  case 1U: 
#line 1716
  set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1717
  if ((unsigned int )df == 0U) {
#line 1718
    set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1719
  if ((unsigned int )df == 3U) {
#line 1720
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1721
  if ((int )mdev->state.ldv_50103.disk > 2) {
#line 1722
    __ns___0 = drbd_read_state(mdev);
#line 1722
    __ns___0.ldv_40604.disk = 2U;
#line 1722
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1723
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1726
  goto ldv_51379;
  }
  ldv_51379: ;
#line 1729
  return;
}
}
#line 1739 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , enum drbd_force_detach_flags forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1742
  if (error != 0) {
#line 1744
    tmp = spinlock_check(& (mdev->tconn)->req_lock);
#line 1744
    flags = _raw_spin_lock_irqsave(tmp);
#line 1745
    __drbd_chk_io_error____2(mdev, forcedetach, where);
#line 1746
    spin_unlock_irqrestore(& (mdev->tconn)->req_lock, flags);
  } else {

  }
#line 1748
  return;
}
}
#line 1770 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 
  int meta_dev_idx ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1774
  rcu_read_lock();
#line 1775
  _________p1 = *((struct disk_conf * volatile  *)(& bdev->disk_conf));
#line 1775
  tmp = debug_lockdep_rcu_enabled();
#line 1775
  if (tmp != 0 && ! __warned) {
#line 1775
    tmp___0 = rcu_read_lock_held();
#line 1775
    if (tmp___0 == 0 && 1) {
#line 1775
      __warned = 1;
#line 1775
      lockdep_rcu_suspicious("/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
                             1775, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1775
  meta_dev_idx = _________p1->meta_dev_idx;
#line 1776
  rcu_read_unlock();
#line 1778
  tmp___1 = _drbd_md_first_sector(meta_dev_idx, bdev);
#line 1778
  return (tmp___1);
}
}
#line 1887 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1890
  tmp = spinlock_check(& q->q_lock);
#line 1890
  flags = _raw_spin_lock_irqsave(tmp);
#line 1891
  list_add(& w->list, & q->q);
#line 1892
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1893
  __wake_up(& q->q_wait, 3U, 1, 0);
#line 1894
  return;
}
}
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int al_write_transaction(struct drbd_conf *mdev ) ;
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void *drbd_md_get_buffer(struct drbd_conf *mdev ) 
{ 
  int r ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;

  {
#line 121
  r = atomic_cmpxchg(& mdev->md_io_in_use, 0, 1);
#line 121
  if (r == 0 || (int )mdev->state.ldv_50103.disk <= 2) {
#line 121
    goto ldv_51720;
  } else {

  }
#line 121
  tmp = get_current();
#line 121
  __wait.flags = 0U;
#line 121
  __wait.private = (void *)tmp;
#line 121
  __wait.func = & autoremove_wake_function;
#line 121
  __wait.task_list.next = & __wait.task_list;
#line 121
  __wait.task_list.prev = & __wait.task_list;
  ldv_51723: 
#line 121
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 121
  r = atomic_cmpxchg(& mdev->md_io_in_use, 0, 1);
#line 121
  if (r == 0 || (int )mdev->state.ldv_50103.disk <= 2) {
#line 121
    goto ldv_51722;
  } else {

  }
#line 121
  schedule();
#line 121
  goto ldv_51723;
  ldv_51722: 
#line 121
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51720: ;
#line 125
  if (r == 0) {
#line 125
    tmp___0 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 125
    tmp___1 = tmp___0;
  } else {
#line 125
    tmp___1 = 0;
  }
#line 125
  return (tmp___1);
}
}
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_md_put_buffer(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 130
  tmp = atomic_dec_and_test(& mdev->md_io_in_use);
#line 130
  if (tmp != 0) {
#line 131
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 132
  return;
}
}
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void wait_until_done_or_force_detached(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                       unsigned int *done ) 
{ 
  long dt ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 139
  rcu_read_lock();
#line 140
  _________p1 = *((struct disk_conf * volatile  *)(& bdev->disk_conf));
#line 140
  tmp = debug_lockdep_rcu_enabled();
#line 140
  if (tmp != 0 && ! __warned) {
#line 140
    tmp___0 = rcu_read_lock_held();
#line 140
    if (tmp___0 == 0 && 1) {
#line 140
      __warned = 1;
#line 140
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                             140, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 140
  dt = (long )_________p1->disk_timeout;
#line 141
  rcu_read_unlock();
#line 142
  dt = (dt * 250L) / 10L;
#line 143
  if (dt == 0L) {
#line 144
    dt = 9223372036854775807L;
  } else {

  }
#line 146
  __ret = dt;
#line 146
  if (*done == 0U) {
#line 146
    tmp___3 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 146
    if (tmp___3 == 0) {
#line 146
      tmp___1 = get_current();
#line 146
      __wait.flags = 0U;
#line 146
      __wait.private = (void *)tmp___1;
#line 146
      __wait.func = & autoremove_wake_function;
#line 146
      __wait.task_list.next = & __wait.task_list;
#line 146
      __wait.task_list.prev = & __wait.task_list;
      ldv_51739: 
#line 146
      prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 146
      if (*done != 0U) {
#line 146
        goto ldv_51738;
      } else {
#line 146
        tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 146
        if (tmp___2 != 0) {
#line 146
          goto ldv_51738;
        } else {

        }
      }
#line 146
      __ret = schedule_timeout(__ret);
#line 146
      if (__ret == 0L) {
#line 146
        goto ldv_51738;
      } else {

      }
#line 146
      goto ldv_51739;
      ldv_51738: 
#line 146
      finish_wait(& mdev->misc_wait, & __wait);
    } else {

    }
  } else {

  }
#line 146
  dt = __ret;
#line 148
  if (dt == 0L) {
#line 149
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta-data IO operation timed out\n");
#line 150
    drbd_chk_io_error____0(mdev, 1, DRBD_FORCE_DETACH, "wait_until_done_or_force_detached");
  } else {

  }
#line 152
  return;
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  int err ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 162
  mdev->md_io.done = 0U;
#line 163
  mdev->md_io.error = -19;
#line 165
  if (rw & 1) {
#line 165
    tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 165
    if (tmp == 0) {
#line 166
      rw = rw | 6144;
    } else {

    }
  } else {

  }
#line 167
  rw = rw | 16;
#line 169
  bio = bio_alloc_drbd(16U);
#line 170
  bio->bi_bdev = bdev->md_bdev;
#line 171
  bio->bi_sector = sector;
#line 172
  err = -5;
#line 173
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 173
  if (tmp___0 != size) {
#line 174
    goto out;
  } else {

  }
#line 175
  bio->bi_private = (void *)(& mdev->md_io);
#line 176
  bio->bi_end_io = & drbd_md_io_complete;
#line 177
  bio->bi_rw = (unsigned long )rw;
#line 179
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 179
  if (tmp___1 == 0) {
#line 180
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in _drbd_md_sync_page_io()\n");
#line 181
    err = -19;
#line 182
    goto out;
  } else {

  }
#line 185
  atomic_inc(& bio->bi_cnt);
#line 186
  atomic_inc(& mdev->md_io_in_use);
#line 187
  tmp___2 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 187
  if (tmp___2 != 0) {
#line 188
    bio_endio(bio, -5);
  } else {
#line 190
    submit_bio(rw, bio);
  }
#line 191
  wait_until_done_or_force_detached(mdev, bdev, & mdev->md_io.done);
#line 192
  if ((int )bio->bi_flags & 1) {
#line 193
    err = mdev->md_io.error;
  } else {

  }
  out: 
#line 196
  bio_put(bio);
#line 197
  return (err);
}
}
#line 200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int err ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  struct _ddebug descriptor ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  long tmp___3 ;
  struct task_struct *tmp___4 ;
  struct task_struct *tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;

  {
#line 204
  iop = mdev->md_io_page;
#line 206
  tmp = atomic_read((atomic_t const   *)(& mdev->md_io_in_use));
#line 206
  if (tmp != 1) {
#line 206
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->md_io_in_use) == 1 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            206);
  } else {

  }
#line 208
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 208
  if (tmp___0 != 0L) {
#line 208
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (208), "i" (12UL));
    ldv_51761: ;
#line 208
    goto ldv_51761;
  } else {

  }
#line 210
  descriptor.modname = "drbd";
#line 210
  descriptor.function = "drbd_md_sync_page_io";
#line 210
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared";
#line 210
  descriptor.format = "meta_data io: %s [%d]:%s(,%llus,%s)\n";
#line 210
  descriptor.lineno = 212U;
#line 210
  descriptor.flags = 0U;
#line 210
  tmp___3 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 210
  if (tmp___3 != 0L) {
#line 210
    tmp___1 = get_current();
#line 210
    tmp___2 = get_current();
#line 210
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                      "meta_data io: %s [%d]:%s(,%llus,%s)\n", (char *)(& tmp___2->comm),
                      tmp___1->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                      rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {

  }
#line 214
  tmp___6 = drbd_md_first_sector(bdev);
#line 214
  if (tmp___6 > sector) {
#line 216
    tmp___4 = get_current();
#line 216
    tmp___5 = get_current();
#line 216
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___5->comm), tmp___4->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 214
    tmp___7 = drbd_md_last_sector(bdev);
#line 214
    if (sector + 7UL > tmp___7) {
#line 216
      tmp___4 = get_current();
#line 216
      tmp___5 = get_current();
#line 216
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___5->comm), tmp___4->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 220
  err = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, 4096);
#line 221
  if (err != 0) {
#line 222
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed with error %d\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ",
            err);
  } else {

  }
#line 225
  return (err);
}
}
#line 228 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  int wake ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
#line 234
  spin_lock_irq(& mdev->al_lock);
#line 235
  tmp = lc_find(mdev->resync, enr / 4U);
#line 236
  tmp___2 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 236
  if (tmp___2 != 0L) {
#line 237
    __mptr = (struct lc_element  const  *)tmp;
#line 237
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 238
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 238
    if (tmp___1 != 0) {
#line 239
      tmp___0 = test_and_set_bit(2, (unsigned long volatile   *)(& bm_ext->flags));
#line 239
      wake = tmp___0 == 0;
#line 240
      spin_unlock_irq(& mdev->al_lock);
#line 241
      if (wake != 0) {
#line 242
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 243
      return (0);
    } else {

    }
  } else {

  }
#line 246
  al_ext = lc_get(mdev->act_log, enr);
#line 247
  spin_unlock_irq(& mdev->al_lock);
#line 248
  return (al_ext);
}
}
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , struct drbd_interval *i ) 
{ 
  unsigned int first ;
  unsigned int last ;
  unsigned int enr ;
  bool locked ;
  int tmp ;
  struct lc_element *tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  struct lc_element *tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  bool write_al_updates ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 255
  first = (unsigned int )(i->sector >> 13);
#line 256
  last = i->size != 0U ? (unsigned int )(((i->sector + (sector_t )(i->size >> 9)) - 1UL) >> 13) : first;
#line 258
  locked = 0;
#line 261
  if (first > last) {
#line 261
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( first <= last ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            261);
  } else {

  }
#line 262
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 262
  if (tmp <= 0) {
#line 262
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            262);
  } else {

  }
#line 264
  enr = first;
#line 264
  goto ldv_51787;
  ldv_51786: 
#line 265
  tmp___0 = _al_get(mdev, enr);
#line 265
  if ((unsigned long )tmp___0 != (unsigned long )((struct lc_element *)0)) {
#line 265
    goto ldv_51782;
  } else {

  }
#line 265
  tmp___1 = get_current();
#line 265
  __wait.flags = 0U;
#line 265
  __wait.private = (void *)tmp___1;
#line 265
  __wait.func = & autoremove_wake_function;
#line 265
  __wait.task_list.next = & __wait.task_list;
#line 265
  __wait.task_list.prev = & __wait.task_list;
  ldv_51785: 
#line 265
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 265
  tmp___2 = _al_get(mdev, enr);
#line 265
  if ((unsigned long )tmp___2 != (unsigned long )((struct lc_element *)0)) {
#line 265
    goto ldv_51784;
  } else {

  }
#line 265
  schedule();
#line 265
  goto ldv_51785;
  ldv_51784: 
#line 265
  finish_wait(& mdev->al_wait, & __wait);
  ldv_51782: 
#line 264
  enr = enr + 1U;
  ldv_51787: ;
#line 264
  if (enr <= last) {
#line 265
    goto ldv_51786;
  } else {

  }

#line 270
  if ((mdev->act_log)->pending_changes == 0U) {
#line 270
    goto ldv_51789;
  } else {
#line 270
    tmp___3 = lc_try_lock_for_transaction(mdev->act_log);
#line 270
    locked = tmp___3 != 0;
#line 270
    if ((int )locked) {
#line 270
      goto ldv_51789;
    } else {

    }
  }
#line 270
  tmp___4 = get_current();
#line 270
  __wait___0.flags = 0U;
#line 270
  __wait___0.private = (void *)tmp___4;
#line 270
  __wait___0.func = & autoremove_wake_function;
#line 270
  __wait___0.task_list.next = & __wait___0.task_list;
#line 270
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_51792: 
#line 270
  prepare_to_wait(& mdev->al_wait, & __wait___0, 2);
#line 270
  if ((mdev->act_log)->pending_changes == 0U) {
#line 270
    goto ldv_51791;
  } else {
#line 270
    tmp___5 = lc_try_lock_for_transaction(mdev->act_log);
#line 270
    locked = tmp___5 != 0;
#line 270
    if ((int )locked) {
#line 270
      goto ldv_51791;
    } else {

    }
  }
#line 270
  schedule();
#line 270
  goto ldv_51792;
  ldv_51791: 
#line 270
  finish_wait(& mdev->al_wait, & __wait___0);
  ldv_51789: ;
#line 274
  if ((int )locked) {
#line 284
    if ((mdev->act_log)->pending_changes != 0U) {
#line 287
      rcu_read_lock();
#line 288
      _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 288
      tmp___6 = debug_lockdep_rcu_enabled();
#line 288
      if (tmp___6 != 0 && ! __warned) {
#line 288
        tmp___7 = rcu_read_lock_held();
#line 288
        if (tmp___7 == 0 && 1) {
#line 288
          __warned = 1;
#line 288
          lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                                 288, "suspicious rcu_dereference_check() usage");
        } else {

        }
      } else {

      }
#line 288
      write_al_updates = (int )((signed char )_________p1->al_updates) != 0;
#line 289
      rcu_read_unlock();
#line 291
      if ((int )write_al_updates) {
#line 292
        al_write_transaction(mdev);
#line 293
        mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
      } else {

      }
#line 296
      spin_lock_irq(& mdev->al_lock);
#line 301
      lc_committed(mdev->act_log);
#line 302
      spin_unlock_irq(& mdev->al_lock);
    } else {

    }
#line 304
    lc_unlock(mdev->act_log);
#line 305
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 307
  return;
}
}
#line 309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , struct drbd_interval *i ) 
{ 
  unsigned int first ;
  unsigned int last ;
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 313
  first = (unsigned int )(i->sector >> 13);
#line 314
  last = i->size != 0U ? (unsigned int )(((i->sector + (sector_t )(i->size >> 9)) - 1UL) >> 13) : first;
#line 319
  if (first > last) {
#line 319
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( first <= last ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            319);
  } else {

  }
#line 320
  tmp = spinlock_check(& mdev->al_lock);
#line 320
  flags = _raw_spin_lock_irqsave(tmp);
#line 322
  enr = first;
#line 322
  goto ldv_51811;
  ldv_51810: 
#line 323
  extent = lc_find(mdev->act_log, enr);
#line 324
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 325
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 326
    goto ldv_51809;
  } else {

  }
#line 328
  lc_put(mdev->act_log, extent);
  ldv_51809: 
#line 322
  enr = enr + 1U;
  ldv_51811: ;
#line 322
  if (enr <= last) {
#line 323
    goto ldv_51810;
  } else {

  }
#line 330
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 331
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 332
  return;
}
}
#line 343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int al_extent_to_bm_page(unsigned int al_enr ) 
{ 


  {
#line 345
  return (al_enr >> 5);
}
}
#line 352 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int rs_extent_to_bm_page(unsigned int rs_enr ) 
{ 


  {
#line 354
  return (rs_enr >> 3);
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _al_write_transaction(struct drbd_conf *mdev ) 
{ 
  struct al_transaction_on_disk *buffer ;
  struct lc_element *e ;
  sector_t sector ;
  int i ;
  int mx ;
  unsigned int extent_nr ;
  unsigned int crc ;
  int err ;
  char const   *tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  void *tmp___2 ;
  __u32 tmp___3 ;
  struct list_head  const  *__mptr ;
  __u16 tmp___4 ;
  __u32 tmp___5 ;
  unsigned int tmp___6 ;
  struct list_head  const  *__mptr___0 ;
  long tmp___7 ;
  __u16 tmp___8 ;
  __u16 tmp___9 ;
  __u16 tmp___10 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___11 ;
  __u32 tmp___12 ;
  __u32 tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 369
  crc = 0U;
#line 370
  err = 0;
#line 372
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 372
  if (tmp___0 == 0) {
#line 373
    tmp = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_50103.disk);
#line 373
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot start al transaction\n",
            tmp);
#line 375
    return (-5);
  } else {

  }
#line 379
  if ((int )mdev->state.ldv_50103.disk <= 3) {
#line 380
    tmp___1 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_50103.disk);
#line 380
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot write al transaction\n",
            tmp___1);
#line 383
    put_ldev(mdev);
#line 384
    return (-5);
  } else {

  }
#line 387
  tmp___2 = drbd_md_get_buffer(mdev);
#line 387
  buffer = (struct al_transaction_on_disk *)tmp___2;
#line 388
  if ((unsigned long )buffer == (unsigned long )((struct al_transaction_on_disk *)0)) {
#line 389
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk failed while waiting for md_io buffer\n");
#line 390
    put_ldev(mdev);
#line 391
    return (-19);
  } else {

  }
#line 394
  memset((void *)buffer, 0, 4096UL);
#line 395
  buffer->magic = 2724580201U;
#line 396
  tmp___3 = __fswab32(mdev->al_tr_number);
#line 396
  buffer->tr_number = tmp___3;
#line 398
  i = 0;
#line 404
  spin_lock_irq(& mdev->al_lock);
#line 405
  __mptr = (struct list_head  const  *)(mdev->act_log)->to_be_changed.next;
#line 405
  e = (struct lc_element *)__mptr + 0xfffffffffffffff0UL;
#line 405
  goto ldv_51836;
  ldv_51835: ;
#line 406
  if (i == 64) {
#line 407
    i = i + 1;
#line 408
    goto ldv_51834;
  } else {

  }
#line 410
  tmp___4 = __fswab16((int )((__u16 )e->lc_index));
#line 410
  buffer->update_slot_nr[i] = tmp___4;
#line 411
  tmp___5 = __fswab32(e->lc_new_number);
#line 411
  buffer->update_extent_nr[i] = tmp___5;
#line 412
  if (e->lc_number != 4294967295U) {
#line 413
    tmp___6 = al_extent_to_bm_page(e->lc_number);
#line 413
    drbd_bm_mark_for_writeout(mdev, (int )tmp___6);
  } else {

  }
#line 415
  i = i + 1;
#line 405
  __mptr___0 = (struct list_head  const  *)e->list.next;
#line 405
  e = (struct lc_element *)__mptr___0 + 0xfffffffffffffff0UL;
  ldv_51836: ;
#line 405
  if ((unsigned long )(& e->list) != (unsigned long )(& (mdev->act_log)->to_be_changed)) {
#line 406
    goto ldv_51835;
  } else {

  }
  ldv_51834: 
#line 417
  spin_unlock_irq(& mdev->al_lock);
#line 418
  tmp___7 = __builtin_expect(i > 64, 0L);
#line 418
  if (tmp___7 != 0L) {
#line 418
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (418), "i" (12UL));
    ldv_51837: ;
#line 418
    goto ldv_51837;
  } else {

  }
#line 420
  tmp___8 = __fswab16((int )((__u16 )i));
#line 420
  buffer->n_updates = tmp___8;
#line 421
  goto ldv_51839;
  ldv_51838: 
#line 422
  buffer->update_slot_nr[i] = 65535U;
#line 423
  buffer->update_extent_nr[i] = 4294967295U;
#line 421
  i = i + 1;
  ldv_51839: ;
#line 421
  if (i <= 63) {
#line 422
    goto ldv_51838;
  } else {

  }
#line 426
  tmp___9 = __fswab16((int )((__u16 )(mdev->act_log)->nr_elements));
#line 426
  buffer->context_size = tmp___9;
#line 427
  tmp___10 = __fswab16((int )((__u16 )mdev->al_tr_cycle));
#line 427
  buffer->context_start_slot_nr = tmp___10;
#line 429
  __min1 = 919;
#line 429
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 429
  mx = __min1 < __min2 ? __min1 : __min2;
#line 431
  i = 0;
#line 431
  goto ldv_51846;
  ldv_51845: 
#line 432
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 433
  tmp___11 = lc_element_by_index(mdev->act_log, idx);
#line 433
  extent_nr = tmp___11->lc_number;
#line 434
  tmp___12 = __fswab32(extent_nr);
#line 434
  buffer->context[i] = tmp___12;
#line 431
  i = i + 1;
  ldv_51846: ;
#line 431
  if (i < mx) {
#line 432
    goto ldv_51845;
  } else {

  }

#line 436
  goto ldv_51849;
  ldv_51848: 
#line 437
  buffer->context[i] = 4294967295U;
#line 436
  i = i + 1;
  ldv_51849: ;
#line 436
  if (i <= 918) {
#line 437
    goto ldv_51848;
  } else {

  }
#line 439
  mdev->al_tr_cycle = mdev->al_tr_cycle + 919;
#line 440
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 441
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 443
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )(mdev->al_tr_pos * 8));
#line 447
  crc = crc32c(0U, (void const   *)buffer, 4096U);
#line 448
  tmp___13 = __fswab32(crc);
#line 448
  buffer->crc32c = tmp___13;
#line 450
  tmp___15 = drbd_bm_write_hinted(mdev);
#line 450
  if (tmp___15 != 0) {
#line 451
    err = -5;
  } else {
#line 453
    tmp___14 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 453
    if (tmp___14 != 0) {
#line 454
      err = -5;
#line 455
      drbd_chk_io_error____0(mdev, 1, DRBD_META_IO_ERROR, "_al_write_transaction");
    } else {
#line 458
      mdev->al_tr_pos = (mdev->al_tr_pos + 1) % 8;
#line 459
      mdev->al_tr_number = mdev->al_tr_number + 1U;
    }
  }
#line 462
  drbd_md_put_buffer(mdev);
#line 463
  put_ldev(mdev);
#line 465
  return (err);
}
}
#line 469 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_al_write_transaction(struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;
  int err ;

  {
#line 471
  __mptr = (struct drbd_work  const  *)w;
#line 471
  aw = (struct update_al_work *)__mptr;
#line 472
  mdev = w->ldv_50388.mdev;
#line 475
  err = _al_write_transaction(mdev);
#line 476
  aw->err = err;
#line 477
  complete(& aw->event);
#line 479
  return (err != -5 ? err : 0);
}
}
#line 485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int al_write_transaction(struct drbd_conf *mdev ) 
{ 
  struct update_al_work al_work ;
  int tmp ;
  struct task_struct *tmp___0 ;

  {
#line 489
  tmp___0 = get_current();
#line 489
  if ((unsigned long )tmp___0 == (unsigned long )(mdev->tconn)->worker.task) {
#line 490
    tmp = _al_write_transaction(mdev);
#line 490
    return (tmp);
  } else {

  }
#line 492
  init_completion(& al_work.event);
#line 493
  al_work.w.cb = & w_al_write_transaction;
#line 494
  al_work.w.ldv_50388.mdev = mdev;
#line 495
  drbd_queue_work_front(& (mdev->tconn)->sender_work, & al_work.w);
#line 496
  wait_for_completion(& al_work.event);
#line 498
  return (al_work.err);
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 505
  spin_lock_irq(& mdev->al_lock);
#line 506
  rv = al_ext->refcnt == 0U;
#line 507
  tmp = __builtin_expect(rv != 0, 1L);
#line 507
  if (tmp != 0L) {
#line 508
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 509
  spin_unlock_irq(& mdev->al_lock);
#line 511
  return (rv);
}
}
#line 523 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 528
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 528
  if (tmp == 0) {
#line 528
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_LOCKED, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            528);
  } else {

  }
#line 530
  i = 0;
#line 530
  goto ldv_51881;
  ldv_51880: 
#line 531
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 532
  if (al_ext->lc_number == 4294967295U) {
#line 533
    goto ldv_51875;
  } else {

  }
#line 534
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 534
  if (tmp___0 != 0) {
#line 534
    goto ldv_51876;
  } else {

  }
#line 534
  tmp___1 = get_current();
#line 534
  __wait.flags = 0U;
#line 534
  __wait.private = (void *)tmp___1;
#line 534
  __wait.func = & autoremove_wake_function;
#line 534
  __wait.task_list.next = & __wait.task_list;
#line 534
  __wait.task_list.prev = & __wait.task_list;
  ldv_51879: 
#line 534
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 534
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 534
  if (tmp___2 != 0) {
#line 534
    goto ldv_51878;
  } else {

  }
#line 534
  schedule();
#line 534
  goto ldv_51879;
  ldv_51878: 
#line 534
  finish_wait(& mdev->al_wait, & __wait);
  ldv_51876: ;
  ldv_51875: 
#line 530
  i = i + 1;
  ldv_51881: ;
#line 530
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 531
    goto ldv_51880;
  } else {

  }
#line 537
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 538
  return;
}
}
#line 540 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;
  struct sib_info sib ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 542
  __mptr = (struct drbd_work  const  *)w;
#line 542
  udw = (struct update_odbm_work *)__mptr;
#line 543
  mdev = w->ldv_50388.mdev;
#line 544
  sib.sib_reason = SIB_SYNC_PROGRESS;
#line 544
  sib.ldv_51335.ldv_51330.helper_name = 0;
#line 544
  sib.ldv_51335.ldv_51330.helper_exit_code = 0U;
#line 546
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 546
  if (tmp___0 == 0) {
#line 547
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 547
    if (tmp != 0) {
#line 548
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 549
    kfree((void const   *)udw);
#line 550
    return (0);
  } else {

  }
#line 553
  tmp___1 = rs_extent_to_bm_page(udw->enr);
#line 553
  drbd_bm_write_page(mdev, tmp___1);
#line 554
  put_ldev(mdev);
#line 556
  kfree((void const   *)udw);
#line 558
  tmp___2 = drbd_bm_total_weight(mdev);
#line 558
  if (tmp___2 <= mdev->rs_failed) {
#line 559
    switch ((int )mdev->state.ldv_50103.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 562
    drbd_resync_finished(mdev);
    default: ;
#line 565
    goto ldv_51898;
    }
    ldv_51898: ;
  } else {

  }
#line 568
  drbd_bcast_event(mdev, (struct sib_info  const  *)(& sib));
#line 570
  return (0);
}
}
#line 580 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___0 ;
  int rs_left ;
  int tmp___1 ;
  void *tmp___2 ;

  {
#line 588
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 588
  if (tmp == 0) {
#line 588
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            588);
  } else {

  }
#line 592
  enr = (unsigned int )(sector >> 15);
#line 594
  e = lc_get(mdev->resync, enr);
#line 595
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 596
    __mptr = (struct lc_element  const  *)e;
#line 596
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 597
    if (ext->lce.lc_number == enr) {
#line 598
      if (success != 0) {
#line 599
        ext->rs_left = ext->rs_left - count;
      } else {
#line 601
        ext->rs_failed = ext->rs_failed + count;
      }
#line 602
      if (ext->rs_left < ext->rs_failed) {
#line 603
        tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_50103.conn);
#line 603
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d cstate=%s\n",
                 (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                 count, tmp___0);
#line 616
        ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
      } else {

      }
    } else {
#line 625
      tmp___1 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 625
      rs_left = tmp___1;
#line 626
      if (ext->flags != 0UL) {
#line 627
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 631
        ext->flags = 0UL;
      } else {

      }
#line 633
      if (ext->rs_failed != 0) {
#line 634
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
      } else {

      }
#line 638
      ext->rs_left = rs_left;
#line 639
      ext->rs_failed = success == 0 ? count : 0;
#line 642
      lc_committed(mdev->resync);
    }
#line 644
    lc_put(mdev->resync, & ext->lce);
#line 647
    if (ext->rs_left == ext->rs_failed) {
#line 648
      ext->rs_failed = 0;
#line 650
      tmp___2 = kmalloc(40UL, 32U);
#line 650
      udw = (struct update_odbm_work *)tmp___2;
#line 651
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 652
        udw->enr = ext->lce.lc_number;
#line 653
        udw->w.cb = & w_update_odbm;
#line 654
        udw->w.ldv_50388.mdev = mdev;
#line 655
        drbd_queue_work_front(& (mdev->tconn)->sender_work, & udw->w);
      } else {
#line 657
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
      }
    } else {

    }
  } else {
#line 661
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 665
  return;
}
}
#line 668 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) 
{ 
  unsigned long now ;
  unsigned long last ;
  int next ;

  {
#line 670
  now = jiffies;
#line 671
  last = mdev->rs_mark_time[mdev->rs_last_mark];
#line 672
  next = (mdev->rs_last_mark + 1) % 8;
#line 673
  if ((1 != 0 && 1 != 0) && (long )now - (long )(last + 750UL) >= 0L) {
#line 674
    if ((mdev->rs_mark_left[mdev->rs_last_mark] != still_to_go && (unsigned int )*((unsigned short *)mdev + 374UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 374UL) != 320U) {
#line 677
      mdev->rs_mark_time[next] = now;
#line 678
      mdev->rs_mark_left[next] = still_to_go;
#line 679
      mdev->rs_last_mark = next;
    } else {

    }
  } else {

  }
#line 681
  return;
}
}
#line 691 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int tmp ;
  bool _bool ;
  int tmp___0 ;
  bool _bool___0 ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  unsigned long tmp___5 ;
  raw_spinlock_t *tmp___6 ;

  {
#line 696
  count = 0UL;
#line 698
  wake_up = 0;
#line 701
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 1048576U) {
#line 702
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 704
    return;
  } else {

  }
#line 707
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 707
  if (tmp == 0) {
#line 708
    return;
  } else {

  }
#line 710
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 711
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 713
  _bool = sector < nr_sectors;
#line 713
  if (! _bool) {
#line 713
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"sector < nr_sectors", "__drbd_set_in_sync");
  } else {

  }
#line 713
  if (_bool) {
#line 713
    tmp___0 = 0;
  } else {
#line 713
    tmp___0 = 1;
  }
#line 713
  if (tmp___0) {
#line 714
    goto out;
  } else {

  }
#line 715
  _bool___0 = esector < nr_sectors;
#line 715
  if (! _bool___0) {
#line 715
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"esector < nr_sectors", "__drbd_set_in_sync");
  } else {

  }
#line 715
  if (_bool___0) {
#line 715
    tmp___1 = 0;
  } else {
#line 715
    tmp___1 = 1;
  }
#line 715
  if (tmp___1) {
#line 716
    esector = nr_sectors - 1UL;
  } else {

  }
#line 718
  lbnr = (nr_sectors - 1UL) >> 3;
#line 723
  tmp___2 = __builtin_expect(esector <= 6UL, 0L);
#line 723
  if (tmp___2 != 0L) {
#line 724
    goto out;
  } else {

  }
#line 725
  tmp___3 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 725
  if (tmp___3 != 0L) {
#line 726
    ebnr = lbnr;
  } else {
#line 728
    ebnr = (esector - 7UL) >> 3;
  }
#line 729
  sbnr = (sector + 7UL) >> 3;
#line 731
  if (sbnr > ebnr) {
#line 732
    goto out;
  } else {

  }
#line 738
  tmp___4 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 738
  count = (unsigned long )tmp___4;
#line 739
  if (count != 0UL) {
#line 740
    tmp___5 = drbd_bm_total_weight(mdev);
#line 740
    drbd_advance_rs_marks(mdev, tmp___5);
#line 741
    tmp___6 = spinlock_check(& mdev->al_lock);
#line 741
    flags = _raw_spin_lock_irqsave(tmp___6);
#line 742
    drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 743
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 747
    wake_up = 1;
  } else {

  }
  out: 
#line 750
  put_ldev(mdev);
#line 751
  if (wake_up != 0) {
#line 752
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 753
  return;
}
}
#line 763 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  bool _bool ;
  int tmp___0 ;
  bool _bool___0 ;
  int tmp___1 ;
  raw_spinlock_t *tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 768
  count = 0U;
#line 772
  if (size == 0) {
#line 773
    return (0);
  } else {

  }
#line 775
  if ((size < 0 || (size & 511) != 0) || (unsigned int )size > 1048576U) {
#line 776
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 778
    return (0);
  } else {

  }
#line 781
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 781
  if (tmp == 0) {
#line 782
    return (0);
  } else {

  }
#line 784
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 785
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 787
  _bool = sector < nr_sectors;
#line 787
  if (! _bool) {
#line 787
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"sector < nr_sectors", "__drbd_set_out_of_sync");
  } else {

  }
#line 787
  if (_bool) {
#line 787
    tmp___0 = 0;
  } else {
#line 787
    tmp___0 = 1;
  }
#line 787
  if (tmp___0) {
#line 788
    goto out;
  } else {

  }
#line 789
  _bool___0 = esector < nr_sectors;
#line 789
  if (! _bool___0) {
#line 789
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"esector < nr_sectors", "__drbd_set_out_of_sync");
  } else {

  }
#line 789
  if (_bool___0) {
#line 789
    tmp___1 = 0;
  } else {
#line 789
    tmp___1 = 1;
  }
#line 789
  if (tmp___1) {
#line 790
    esector = nr_sectors - 1UL;
  } else {

  }
#line 794
  sbnr = sector >> 3;
#line 795
  ebnr = esector >> 3;
#line 799
  tmp___2 = spinlock_check(& mdev->al_lock);
#line 799
  flags = _raw_spin_lock_irqsave(tmp___2);
#line 800
  tmp___3 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 800
  count = (unsigned int )tmp___3;
#line 802
  enr = (unsigned int )(sector >> 15);
#line 803
  e = lc_find(mdev->resync, enr);
#line 804
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 805
    __mptr = (struct lc_element  const  *)e;
#line 805
    __mptr___0 = (struct lc_element  const  *)e;
#line 805
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 806
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 809
  put_ldev(mdev);
#line 811
  return ((int )count);
}
}
#line 815 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 819
  wakeup = 0;
#line 822
  spin_lock_irq(& mdev->al_lock);
#line 823
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 824
    spin_unlock_irq(& mdev->al_lock);
#line 825
    return (0);
  } else {

  }
#line 827
  e = lc_get(mdev->resync, enr);
#line 828
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 828
    __mptr = (struct lc_element  const  *)e;
#line 828
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 828
    bm_ext = 0;
  }
#line 829
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 830
    if (bm_ext->lce.lc_number != enr) {
#line 831
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 832
      bm_ext->rs_failed = 0;
#line 833
      lc_committed(mdev->resync);
#line 834
      wakeup = 1;
    } else {

    }
#line 836
    if (bm_ext->lce.refcnt == 1U) {
#line 837
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 838
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 840
  rs_flags = (mdev->resync)->flags;
#line 841
  spin_unlock_irq(& mdev->al_lock);
#line 842
  if (wakeup != 0) {
#line 843
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 845
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 846
    if ((rs_flags & 8UL) != 0UL) {
#line 847
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 849
    tmp = __builtin_expect((rs_flags & 4UL) != 0UL, 0L);
#line 849
    if (tmp != 0L) {
#line 849
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (849), "i" (12UL));
      ldv_51985: ;
#line 849
      goto ldv_51985;
    } else {

    }
  } else {

  }
#line 852
  return (bm_ext);
}
}
#line 855 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  int rv ;
  bool tmp ;

  {
#line 859
  spin_lock_irq(& mdev->al_lock);
#line 860
  tmp = lc_is_used(mdev->act_log, enr);
#line 860
  rv = (int )tmp;
#line 861
  spin_unlock_irq(& mdev->al_lock);
#line 863
  return (rv);
}
}
#line 873 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int sa ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;

  {
#line 875
  enr = (unsigned int )(sector >> 15);
#line 878
  sa = 200;
  retry: 
#line 882
  __ret = 0;
#line 882
  bm_ext = _bme_get(mdev, enr);
#line 882
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 882
    tmp = get_current();
#line 882
    __wait.flags = 0U;
#line 882
    __wait.private = (void *)tmp;
#line 882
    __wait.func = & autoremove_wake_function;
#line 882
    __wait.task_list.next = & __wait.task_list;
#line 882
    __wait.task_list.prev = & __wait.task_list;
    ldv_52005: 
#line 882
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 882
    bm_ext = _bme_get(mdev, enr);
#line 882
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 882
      goto ldv_52003;
    } else {

    }
#line 882
    tmp___0 = get_current();
#line 882
    tmp___1 = signal_pending(tmp___0);
#line 882
    if (tmp___1 == 0) {
#line 882
      schedule();
#line 882
      goto ldv_52004;
    } else {

    }
#line 882
    __ret = -512;
#line 882
    goto ldv_52003;
    ldv_52004: ;
#line 882
    goto ldv_52005;
    ldv_52003: 
#line 882
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 882
  sig = __ret;
#line 884
  if (sig != 0) {
#line 885
    return (-4);
  } else {

  }
#line 887
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 887
  if (tmp___2 != 0) {
#line 888
    return (0);
  } else {

  }
#line 890
  i = 0;
#line 890
  goto ldv_52014;
  ldv_52013: 
#line 891
  __ret___0 = 0;
#line 891
  tmp___8 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 891
  if (tmp___8 != 0) {
#line 891
    tmp___9 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 891
    if (tmp___9 == 0) {
#line 891
      tmp___3 = get_current();
#line 891
      __wait___0.flags = 0U;
#line 891
      __wait___0.private = (void *)tmp___3;
#line 891
      __wait___0.func = & autoremove_wake_function;
#line 891
      __wait___0.task_list.next = & __wait___0.task_list;
#line 891
      __wait___0.task_list.prev = & __wait___0.task_list;
      ldv_52011: 
#line 891
      prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 891
      tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 891
      if (tmp___4 == 0) {
#line 891
        goto ldv_52009;
      } else {
#line 891
        tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 891
        if (tmp___5 != 0) {
#line 891
          goto ldv_52009;
        } else {

        }
      }
#line 891
      tmp___6 = get_current();
#line 891
      tmp___7 = signal_pending(tmp___6);
#line 891
      if (tmp___7 == 0) {
#line 891
        schedule();
#line 891
        goto ldv_52010;
      } else {

      }
#line 891
      __ret___0 = -512;
#line 891
      goto ldv_52009;
      ldv_52010: ;
#line 891
      goto ldv_52011;
      ldv_52009: 
#line 891
      finish_wait(& mdev->al_wait, & __wait___0);
    } else {

    }
  } else {

  }
#line 891
  sig = __ret___0;
#line 895
  if (sig != 0) {
#line 895
    goto _L;
  } else {
#line 895
    tmp___12 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 895
    if (tmp___12 != 0 && sa != 0) {
      _L: /* CIL Label */ 
#line 896
      spin_lock_irq(& mdev->al_lock);
#line 897
      tmp___10 = lc_put(mdev->resync, & bm_ext->lce);
#line 897
      if (tmp___10 == 0U) {
#line 898
        bm_ext->flags = 0UL;
#line 899
        mdev->resync_locked = mdev->resync_locked - 1U;
#line 900
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 902
      spin_unlock_irq(& mdev->al_lock);
#line 903
      if (sig != 0) {
#line 904
        return (-4);
      } else {

      }
#line 905
      tmp___11 = schedule_timeout_interruptible(25L);
#line 905
      if (tmp___11 != 0L) {
#line 906
        return (-4);
      } else {

      }
#line 907
      if (sa != 0) {
#line 907
        sa = sa - 1;
#line 907
        if (sa == 0) {
#line 908
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_begin_io() stepped aside for 20sec.Resync stalled?\n");
        } else {

        }
      } else {

      }
#line 910
      goto retry;
    } else {

    }
  }
#line 890
  i = i + 1;
  ldv_52014: ;
#line 890
  if (i <= 3) {
#line 891
    goto ldv_52013;
  } else {

  }
#line 913
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 914
  return (0);
}
}
#line 926 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  bool tmp___6 ;

  {
#line 928
  enr = (unsigned int )(sector >> 15);
#line 929
  al_enr = enr * 4U;
#line 934
  spin_lock_irq(& mdev->al_lock);
#line 935
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 949
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 950
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 950
      __mptr = (struct lc_element  const  *)e;
#line 950
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 950
      bm_ext = 0;
    }
#line 951
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 952
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 952
      if (tmp != 0) {
#line 952
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                952);
      } else {

      }
#line 953
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 953
      if (tmp___0 == 0) {
#line 953
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                953);
      } else {

      }
#line 954
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 955
      mdev->resync_wenr = 4294967295U;
#line 956
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 956
      if (tmp___1 == 0U) {
#line 957
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 958
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 960
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 964
  e = lc_try_get(mdev->resync, enr);
#line 965
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 965
    __mptr___0 = (struct lc_element  const  *)e;
#line 965
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 965
    bm_ext = 0;
  }
#line 966
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 967
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 967
    if (tmp___2 != 0) {
#line 968
      goto proceed;
    } else {

    }
#line 969
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 969
    if (tmp___3 == 0) {
#line 970
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 976
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 977
      if (bm_ext->lce.refcnt == 0U) {
#line 977
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                977);
      } else {

      }
    }
#line 979
    goto check_al;
  } else {
#line 982
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 983
      goto try_again;
    } else {

    }
#line 985
    e = lc_get(mdev->resync, enr);
#line 986
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 986
      __mptr___1 = (struct lc_element  const  *)e;
#line 986
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 986
      bm_ext = 0;
    }
#line 987
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 988
      rs_flags = (mdev->resync)->flags;
#line 989
      if ((rs_flags & 8UL) != 0UL) {
#line 990
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 992
      tmp___4 = __builtin_expect((rs_flags & 4UL) != 0UL, 0L);
#line 992
      if (tmp___4 != 0L) {
#line 992
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (992), "i" (12UL));
        ldv_52035: ;
#line 992
        goto ldv_52035;
      } else {

      }
#line 993
      goto try_again;
    } else {

    }
#line 995
    if (bm_ext->lce.lc_number != enr) {
#line 996
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 997
      bm_ext->rs_failed = 0;
#line 998
      lc_committed(mdev->resync);
#line 999
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1000
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1000
      if (tmp___5 != 0) {
#line 1000
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1000);
      } else {

      }
    } else {

    }
#line 1002
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1003
    if (bm_ext->lce.refcnt != 1U) {
#line 1003
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1003);
    } else {

    }
#line 1004
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1005
    goto check_al;
  }
  check_al: 
#line 1008
  i = 0;
#line 1008
  goto ldv_52037;
  ldv_52036: 
#line 1009
  tmp___6 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1009
  if ((int )tmp___6) {
#line 1010
    goto try_again;
  } else {

  }
#line 1008
  i = i + 1;
  ldv_52037: ;
#line 1008
  if (i <= 3) {
#line 1009
    goto ldv_52036;
  } else {

  }
#line 1012
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1014
  mdev->resync_wenr = 4294967295U;
#line 1015
  spin_unlock_irq(& mdev->al_lock);
#line 1016
  return (0);
  try_again: ;
#line 1019
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1020
    mdev->resync_wenr = enr;
  } else {

  }
#line 1021
  spin_unlock_irq(& mdev->al_lock);
#line 1022
  return (-11);
}
}
#line 1025 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1027
  enr = (unsigned int )(sector >> 15);
#line 1032
  tmp = spinlock_check(& mdev->al_lock);
#line 1032
  flags = _raw_spin_lock_irqsave(tmp);
#line 1033
  e = lc_find(mdev->resync, enr);
#line 1034
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1034
    __mptr = (struct lc_element  const  *)e;
#line 1034
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1034
    bm_ext = 0;
  }
#line 1035
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1036
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1037
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1037
    if (tmp___0 != 0) {
#line 1038
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1039
    return;
  } else {

  }
#line 1042
  if (bm_ext->lce.refcnt == 0U) {
#line 1043
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1044
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1047
    return;
  } else {

  }
#line 1050
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1050
  if (tmp___1 == 0U) {
#line 1051
    bm_ext->flags = 0UL;
#line 1052
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1053
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1056
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1057
  return;
}
}
#line 1063 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1065
  spin_lock_irq(& mdev->al_lock);
#line 1067
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1067
  if (tmp != 0) {
#line 1068
    lc_reset(mdev->resync);
#line 1069
    put_ldev(mdev);
  } else {

  }
#line 1071
  mdev->resync_locked = 0U;
#line 1072
  mdev->resync_wenr = 4294967295U;
#line 1073
  spin_unlock_irq(& mdev->al_lock);
#line 1074
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1075
  return;
}
}
#line 1084 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1090
  spin_lock_irq(& mdev->al_lock);
#line 1092
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1092
  if (tmp___3 != 0) {
#line 1094
    i = 0;
#line 1094
    goto ldv_52066;
    ldv_52065: 
#line 1095
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1096
    __mptr = (struct lc_element  const  *)e;
#line 1096
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1097
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1098
      goto ldv_52064;
    } else {

    }
#line 1099
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1100
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1103
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1103
      if (tmp != 0) {
#line 1103
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1103);
      } else {

      }
#line 1104
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1104
      if (tmp___0 == 0) {
#line 1104
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1104);
      } else {

      }
#line 1105
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1106
      mdev->resync_wenr = 4294967295U;
#line 1107
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1109
    if (bm_ext->lce.refcnt != 0U) {
#line 1110
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1112
      put_ldev(mdev);
#line 1113
      spin_unlock_irq(& mdev->al_lock);
#line 1114
      return (-11);
    } else {

    }
#line 1116
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1116
    if (tmp___1 != 0) {
#line 1116
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1116);
    } else {

    }
#line 1117
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1117
    if (tmp___2 != 0) {
#line 1117
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1117);
    } else {

    }
#line 1118
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_52064: 
#line 1094
    i = i + 1;
    ldv_52066: ;
#line 1094
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1095
      goto ldv_52065;
    } else {

    }

#line 1120
    if ((mdev->resync)->used != 0U) {
#line 1120
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1120);
    } else {

    }
#line 1121
    put_ldev(mdev);
  } else {

  }
#line 1123
  spin_unlock_irq(& mdev->al_lock);
#line 1124
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1126
  return (0);
}
}
#line 1135 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  bool _bool ;
  int tmp ;
  bool _bool___0 ;
  int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1141
  wake_up = 0;
#line 1143
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 1048576U) {
#line 1144
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1146
    return;
  } else {

  }
#line 1148
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1149
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1151
  _bool = sector < nr_sectors;
#line 1151
  if (! _bool) {
#line 1151
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"sector < nr_sectors", "drbd_rs_failed_io");
  } else {

  }
#line 1151
  if (_bool) {
#line 1151
    tmp = 0;
  } else {
#line 1151
    tmp = 1;
  }
#line 1151
  if (tmp) {
#line 1152
    return;
  } else {

  }
#line 1153
  _bool___0 = esector < nr_sectors;
#line 1153
  if (! _bool___0) {
#line 1153
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"esector < nr_sectors", "drbd_rs_failed_io");
  } else {

  }
#line 1153
  if (_bool___0) {
#line 1153
    tmp___0 = 0;
  } else {
#line 1153
    tmp___0 = 1;
  }
#line 1153
  if (tmp___0) {
#line 1154
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1156
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1161
  tmp___1 = __builtin_expect(esector <= 6UL, 0L);
#line 1161
  if (tmp___1 != 0L) {
#line 1162
    return;
  } else {

  }
#line 1163
  tmp___2 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1163
  if (tmp___2 != 0L) {
#line 1164
    ebnr = lbnr;
  } else {
#line 1166
    ebnr = (esector - 7UL) >> 3;
  }
#line 1167
  sbnr = (sector + 7UL) >> 3;
#line 1169
  if (sbnr > ebnr) {
#line 1170
    return;
  } else {

  }
#line 1176
  spin_lock_irq(& mdev->al_lock);
#line 1177
  tmp___3 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1177
  count = (unsigned long )tmp___3;
#line 1178
  if (count != 0UL) {
#line 1179
    mdev->rs_failed = mdev->rs_failed + count;
#line 1181
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1181
    if (tmp___4 != 0) {
#line 1182
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1183
      put_ldev(mdev);
    } else {

    }
#line 1188
    wake_up = 1;
  } else {

  }
#line 1190
  spin_unlock_irq(& mdev->al_lock);
#line 1191
  if (wake_up != 0) {
#line 1192
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1193
  return;
}
}
#line 1232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_main5_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 1244
  LDV_IN_INTERRUPT = 1;
#line 1253
  ldv_initialize();
#line 1255
  goto ldv_52104;
  ldv_52103: 
#line 1258
  tmp = nondet_int();
#line 1258
  switch (tmp) {
  default: ;
#line 1260
  goto ldv_52102;
  }
  ldv_52102: ;
  ldv_52104: 
#line 1255
  tmp___0 = nondet_int();
#line 1255
  if (tmp___0 != 0) {
#line 1256
    goto ldv_52103;
  } else {

  }


#line 1269
  ldv_check_final_state();
#line 1272
  return;
}
}
#line 77 "include/uapi/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 323 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 326
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 23 "include/linux/string.h"
extern char *strncpy(char * , char const   * , __kernel_size_t  ) ;
#line 115
extern char *kstrdup(char const   * , gfp_t  ) ;
#line 93 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 113
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 125
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 169 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 171
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 173
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 174
  memset((void *)dst, 255, (size_t )len);
#line 176
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 177
  return;
}
}
#line 179 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 185
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 186
  __len = (size_t )len;
#line 186
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 189
  return;
}
}
#line 233 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 239
  tmp = __bitmap_equal(src1, src2, nbits);
#line 239
  return (tmp);
}
}
#line 276 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 280
  tmp___0 = __bitmap_weight(src, nbits);
#line 280
  return (tmp___0);
}
}
#line 301 "include/linux/bitmap.h"
__inline static int bitmap_parse(char const   *buf , unsigned int buflen , unsigned long *maskp ,
                                 int nmaskbits ) 
{ 
  int tmp ;

  {
#line 304
  tmp = __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
#line 304
  return (tmp);
}
}
#line 80 "include/linux/cpumask.h"
extern struct cpumask  const  * const  cpu_online_mask ;
#line 255 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 257
  tmp = cpumask_check(cpu);
#line 257
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 258
  return;
}
}
#line 314 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 316
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 317
  return;
}
}
#line 404 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 407
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 407
  return (tmp != 0);
}
}
#line 459 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 461
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 461
  return ((unsigned int )tmp);
}
}
#line 495 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 498
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 499
  return;
}
}
#line 653
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 655
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 279 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 92 "include/linux/completion.h"
extern void complete_all(struct completion * ) ;
#line 94 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , unsigned int  , char const   * ,
                           struct lock_class_key * ) ;
#line 175
extern int del_timer(struct timer_list * ) ;
#line 164 "include/linux/workqueue.h"
extern void __init_work(struct work_struct * , int  ) ;
#line 328
extern struct workqueue_struct *__alloc_workqueue_key(char const   * , unsigned int  ,
                                                      int  , struct lock_class_key * ,
                                                      char const   *  , ...) ;
#line 390
extern void destroy_workqueue(struct workqueue_struct * ) ;
#line 394
extern bool queue_work(struct workqueue_struct * , struct work_struct * ) ;
#line 345 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 360
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 468 "include/linux/module.h"
bool ldv_try_module_get_4(struct module *ldv_func_arg1 ) ;
#line 474
void ldv_module_put_3(struct module *ldv_func_arg1 ) ;
#line 478
void ldv_module_put_5(struct module *ldv_func_arg1 ) ;
#line 43 "include/linux/rculist.h"
extern void __list_add_rcu(struct list_head * , struct list_head * , struct list_head * ) ;
#line 84 "include/linux/rculist.h"
__inline static void list_add_tail_rcu(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 87
  __list_add_rcu(new, head->prev, head);
#line 88
  return;
}
}
#line 205 "include/linux/page-flags.h"
__inline static int PageSlab(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 205
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 205
  return (tmp);
}
}
#line 2047 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 2048
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 2049
extern struct block_device *bdget(dev_t  ) ;
#line 2054
extern void bdput(struct block_device * ) ;
#line 2097
extern int blkdev_put(struct block_device * , fmode_t  ) ;
#line 1866 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2147
extern int wake_up_process(struct task_struct * ) ;
#line 246 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 270
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 125 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 128
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , umode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 105 "include/linux/idr.h"
extern int idr_pre_get(struct idr * , gfp_t  ) ;
#line 107
extern int idr_get_new_above(struct idr * , void * , int  , int * ) ;
#line 112
extern void idr_remove(struct idr * , int  ) ;
#line 114
extern void idr_destroy(struct idr * ) ;
#line 115
extern void idr_init(struct idr * ) ;
#line 13 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 14
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 8 "include/linux/kthread.h"
extern struct task_struct *kthread_create_on_node(int (*)(void * ) , void * , int  ,
                                                  char const   *  , ...) ;
#line 409 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 410
extern void del_gendisk(struct gendisk * ) ;
#line 415
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 609
extern struct gendisk *alloc_disk(int  ) ;
#line 611
extern void put_disk(struct gendisk * ) ;
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 33
extern void mempool_destroy(mempool_t * ) ;
#line 41
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 42
extern void mempool_free_slab(void * , void * ) ;
#line 66
extern void *mempool_alloc_pages(gfp_t  , void * ) ;
#line 67
extern void mempool_free_pages(void * , void * ) ;
#line 68 "include/linux/mempool.h"
__inline static mempool_t *mempool_create_page_pool(int min_nr , int order ) 
{ 
  mempool_t *tmp ;

  {
#line 70
  tmp = mempool_create(min_nr, & mempool_alloc_pages, & mempool_free_pages, (void *)((long )order));
#line 70
  return (tmp);
}
}
#line 212 "include/linux/bio.h"
extern struct bio_set *bioset_create(unsigned int  , unsigned int  ) ;
#line 213
extern void bioset_free(struct bio_set * ) ;
#line 787 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 789
  return ((bdev->bd_disk)->queue);
}
}
#line 895
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 896
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 897
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 899
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 932
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 938
extern void blk_queue_flush(struct request_queue * , unsigned int  ) ;
#line 949
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 255 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 22 "include/linux/genl_magic_struct.h"
int drbd_genl_register(void) ;
#line 23
void drbd_genl_unregister(void) ;
#line 134 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_state.h"
void drbd_resume_al(struct drbd_conf *mdev ) ;
#line 66 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool disable_sendpage  ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos  ;
#line 70 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 75
char usermode_helper[80U] ;
#line 167 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct idr minors  ;
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct list_head drbd_tconns  ;
#line 1063
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1069
void drbd_calc_cpu_mask(struct drbd_tconn *tconn ) ;
#line 1078
int drbd_send(struct drbd_tconn *tconn , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1080
int drbd_send_all(struct drbd_tconn *tconn , struct socket *sock , void *buffer ,
                  size_t size , unsigned int msg_flags ) ;
#line 1083
int __drbd_send_protocol(struct drbd_tconn *tconn , enum drbd_packet cmd ) ;
#line 1086
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1089
int drbd_send_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1116
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1122
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1129
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1130
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1131
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1133
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1139
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) ;
#line 1146
int drbd_bitmap_io_from_worker(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                               char *why , enum bm_flag flags ) ;
#line 1365 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1366 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1367 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1368 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1369 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1370 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1385 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1386 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1387 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1396 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_md_io_page_pool  ;
#line 1400 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bio_set *drbd_md_io_bio_set  ;
#line 1406
int conn_lowest_minor(struct drbd_tconn *tconn ) ;
#line 1407
enum drbd_ret_code conn_new_minor(struct drbd_tconn *tconn , unsigned int minor ,
                                  int vnr ) ;
#line 1410
int set_resource_options(struct drbd_tconn *tconn , struct res_opts *res_opts ) ;
#line 1411
struct drbd_tconn *conn_create(char const   *name , struct res_opts *res_opts ) ;
#line 1412
void conn_destroy(struct kref *kref ) ;
#line 1413
struct drbd_tconn *conn_get_by_name(char const   *name ) ;
#line 1414
struct drbd_tconn *conn_get_by_addrs(void *my_addr , int my_addr_len , void *peer_addr ,
                                     int peer_addr_len ) ;
#line 1416
void conn_free_crypto(struct drbd_tconn *tconn ) ;
#line 1418 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1429
int drbd_msg_put_info(char const   *info ) ;
#line 1430
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1431
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1675 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , enum drbd_force_detach_flags df ,
                                              char const   *where ) 
{ 
  enum drbd_io_error_p ep ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1681
  rcu_read_lock();
#line 1682
  _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 1682
  tmp = debug_lockdep_rcu_enabled();
#line 1682
  if (tmp != 0 && ! __warned) {
#line 1682
    tmp___0 = rcu_read_lock_held();
#line 1682
    if (tmp___0 == 0 && 1) {
#line 1682
      __warned = 1;
#line 1682
      lockdep_rcu_suspicious("/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
                             1682, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1682
  ep = (enum drbd_io_error_p )_________p1->on_io_error;
#line 1683
  rcu_read_unlock();
#line 1684
  switch ((unsigned int )ep) {
  case 0U: ;
#line 1686
  if ((unsigned int )df == 0U || (unsigned int )df == 1U) {
#line 1687
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1687
    if (tmp___1 != 0) {
#line 1688
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1689
    if ((int )mdev->state.ldv_50103.disk > 4) {
#line 1690
      __ns = drbd_read_state(mdev);
#line 1690
      __ns.ldv_40604.disk = 4U;
#line 1690
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1691
    goto ldv_51589;
  } else {

  }
  case 2U: ;
  case 1U: 
#line 1716
  set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1717
  if ((unsigned int )df == 0U) {
#line 1718
    set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1719
  if ((unsigned int )df == 3U) {
#line 1720
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1721
  if ((int )mdev->state.ldv_50103.disk > 2) {
#line 1722
    __ns___0 = drbd_read_state(mdev);
#line 1722
    __ns___0.ldv_40604.disk = 2U;
#line 1722
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1723
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1726
  goto ldv_51589;
  }
  ldv_51589: ;
#line 1729
  return;
}
}
#line 1739 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , enum drbd_force_detach_flags forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1742
  if (error != 0) {
#line 1744
    tmp = spinlock_check(& (mdev->tconn)->req_lock);
#line 1744
    flags = _raw_spin_lock_irqsave(tmp);
#line 1745
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1746
    spin_unlock_irqrestore(& (mdev->tconn)->req_lock, flags);
  } else {

  }
#line 1748
  return;
}
}
#line 1818 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  int meta_dev_idx ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___2 ;
  sector_t tmp___3 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___4 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___5 ;

  {
#line 1823
  rcu_read_lock();
#line 1824
  _________p1 = *((struct disk_conf * volatile  *)(& bdev->disk_conf));
#line 1824
  tmp = debug_lockdep_rcu_enabled();
#line 1824
  if (tmp != 0 && ! __warned) {
#line 1824
    tmp___0 = rcu_read_lock_held();
#line 1824
    if (tmp___0 == 0 && 1) {
#line 1824
      __warned = 1;
#line 1824
      lockdep_rcu_suspicious("/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
                             1824, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1824
  meta_dev_idx = _________p1->meta_dev_idx;
#line 1825
  rcu_read_unlock();
#line 1827
  switch (meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1831
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1831
  if (tmp___3 != 0UL) {
#line 1831
    __min1 = 2251799813685248UL;
#line 1831
    tmp___2 = _drbd_md_first_sector(meta_dev_idx, bdev);
#line 1831
    __min2 = tmp___2;
#line 1831
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1831
    s = 0UL;
  }
#line 1834
  goto ldv_51646;
  case -2: 
#line 1836
  __min1___0 = 2251799813685248UL;
#line 1836
  tmp___4 = drbd_get_capacity(bdev->backing_bdev);
#line 1836
  __min2___0 = tmp___4;
#line 1836
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1839
  __min1___1 = s;
#line 1839
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1839
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1842
  goto ldv_51646;
  default: 
#line 1844
  __min1___2 = 8587575296UL;
#line 1844
  tmp___5 = drbd_get_capacity(bdev->backing_bdev);
#line 1844
  __min2___2 = tmp___5;
#line 1844
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_51646: ;
#line 1847
  return (s);
}
}
#line 1855 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int meta_dev_idx ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  sector_t tmp___2 ;

  {
#line 1860
  rcu_read_lock();
#line 1861
  _________p1 = *((struct disk_conf * volatile  *)(& bdev->disk_conf));
#line 1861
  tmp = debug_lockdep_rcu_enabled();
#line 1861
  if (tmp != 0 && ! __warned) {
#line 1861
    tmp___0 = rcu_read_lock_held();
#line 1861
    if (tmp___0 == 0 && 1) {
#line 1861
      __warned = 1;
#line 1861
      lockdep_rcu_suspicious("/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
                             1861, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1861
  meta_dev_idx = _________p1->meta_dev_idx;
#line 1862
  rcu_read_unlock();
#line 1864
  switch (meta_dev_idx) {
  default: ;
#line 1866
  return ((unsigned long )meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1872
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1873
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1873
    if (tmp___1 != 0) {
#line 1874
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 1875
      dump_stack();
    } else {

    }
#line 1877
    return (0UL);
  } else {

  }
#line 1879
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1879
  return ((sector_t )(((unsigned long long )tmp___2 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1882
  return (0UL);
  }
}
}
#line 1929
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1930
int conn_send_state_req(struct drbd_tconn *tconn , union drbd_state mask , union drbd_state val ) ;
#line 2146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(struct drbd_conf *mdev ) 
{ 
  union drbd_dev_state s ;

  {
#line 2148
  s = mdev->state;
#line 2153
  switch ((unsigned int )s.ldv_50103.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2178
  goto ldv_51818;
  case 13U: ;
#line 2182
  if ((mdev->tconn)->agreed_pro_version <= 95) {
#line 2183
    return (0);
  } else {

  }
#line 2184
  goto ldv_51818;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2191
  return (0);
  }
  ldv_51818: ;
#line 2194
  switch ((unsigned int )s.ldv_50103.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
  case 2U: ;
#line 2202
  goto ldv_51829;
  case 1U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2210
  return (0);
  }
  ldv_51829: ;
#line 2213
  return (1);
}
}
#line 2223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2225
  tmp = drbd_get_max_buffers(mdev);
#line 2225
  mxb = tmp;
#line 2227
  tmp___0 = drbd_suspended(mdev);
#line 2227
  if (tmp___0 != 0) {
#line 2228
    return (0);
  } else {

  }
#line 2229
  tmp___1 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 2229
  if (tmp___1 != 0) {
#line 2230
    return (0);
  } else {

  }
#line 2237
  tmp___2 = drbd_state_is_stable___0(mdev);
#line 2237
  if (tmp___2 == 0) {
#line 2238
    return (0);
  } else {

  }
#line 2242
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2242
  if (tmp___3 > mxb) {
#line 2243
    return (0);
  } else {

  }
#line 2244
  tmp___4 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 2244
  if (tmp___4 != 0) {
#line 2245
    return (0);
  } else {

  }
#line 2246
  return (1);
}
}
#line 2249 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool inc_ap_bio_cond___0(struct drbd_conf *mdev ) 
{ 
  bool rv ;

  {
#line 2251
  rv = 0;
#line 2253
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 2254
  rv = may_inc_ap_bio___0(mdev);
#line 2255
  if ((int )rv) {
#line 2256
    atomic_inc(& mdev->ap_bio_cnt);
  } else {

  }
#line 2257
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 2259
  return (rv);
}
}
#line 2262 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio___0(struct drbd_conf *mdev ) 
{ 
  bool tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  bool tmp___1 ;

  {
#line 2272
  tmp = inc_ap_bio_cond___0(mdev);
#line 2272
  if ((int )tmp) {
#line 2272
    goto ldv_51849;
  } else {

  }
#line 2272
  tmp___0 = get_current();
#line 2272
  __wait.flags = 0U;
#line 2272
  __wait.private = (void *)tmp___0;
#line 2272
  __wait.func = & autoremove_wake_function;
#line 2272
  __wait.task_list.next = & __wait.task_list;
#line 2272
  __wait.task_list.prev = & __wait.task_list;
  ldv_51852: 
#line 2272
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2272
  tmp___1 = inc_ap_bio_cond___0(mdev);
#line 2272
  if ((int )tmp___1) {
#line 2272
    goto ldv_51851;
  } else {

  }
#line 2272
  schedule();
#line 2272
  goto ldv_51852;
  ldv_51851: 
#line 2272
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51849: ;
#line 2275
  return;
}
}
#line 2307 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2314
  return (0);
}
}
#line 278 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
void tl_restart(struct drbd_tconn *tconn , enum drbd_req_event what ) ;
#line 279
void _tl_restart(struct drbd_tconn *tconn , enum drbd_req_event what ) ;
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_52040;
  ldv_52039: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_52040: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_52039;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 67 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_main_mutex.wait_lock",
                                                                     0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                  & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, {0, 0}, "drbd_main_mutex", 0, 0UL}};
#line 72
int drbd_init(void) ;
#line 73
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 74
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 75
static int w_md_sync(struct drbd_work *w , int unused ) ;
#line 76
static void md_sync_timer_fn(unsigned long data ) ;
#line 77
static int w_bitmap_io(struct drbd_work *w , int unused ) ;
#line 78
static int w_go_diskless(struct drbd_work *w , int unused ) ;
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 122 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 122
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}, 1250, 5, 0,
    0, 0UL};
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 154
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct bio *bio_alloc_drbd(gfp_t gfp_mask ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;

  {
#line 164
  if ((unsigned long )drbd_md_io_bio_set == (unsigned long )((struct bio_set *)0)) {
#line 165
    tmp = bio_alloc(gfp_mask, 1U);
#line 165
    return (tmp);
  } else {

  }
#line 167
  bio = bio_alloc_bioset(gfp_mask, 1, drbd_md_io_bio_set);
#line 168
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 169
    return (0);
  } else {

  }
#line 170
  return (bio);
}
}
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_tconn *tconn , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_request *r ;
  struct drbd_request *req ;
  int expect_epoch ;
  int expect_size ;
  struct list_head  const  *__mptr ;
  unsigned int s ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  struct list_head  const  *__mptr___4 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 206
  req = 0;
#line 207
  expect_epoch = 0;
#line 208
  expect_size = 0;
#line 210
  spin_lock_irq(& tconn->req_lock);
#line 214
  __mptr = (struct list_head  const  *)tconn->transfer_log.next;
#line 214
  r = (struct drbd_request *)__mptr + 0xffffffffffffff98UL;
#line 214
  goto ldv_52236;
  ldv_52235: 
#line 215
  s = r->rq_state;
#line 216
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 217
    if (((unsigned long )s & 2048UL) == 0UL) {
#line 218
      goto ldv_52233;
    } else {

    }
#line 219
    if (((unsigned long )s & 1008UL) == 0UL) {
#line 220
      goto ldv_52233;
    } else {

    }
#line 221
    if (((unsigned long )s & 128UL) != 0UL) {
#line 222
      goto ldv_52233;
    } else {

    }
#line 223
    req = r;
#line 224
    expect_epoch = (int )req->epoch;
#line 225
    expect_size = expect_size + 1;
  } else {
#line 227
    if (r->epoch != (unsigned int )expect_epoch) {
#line 228
      goto ldv_52234;
    } else {

    }
#line 229
    if (((unsigned long )s & 2048UL) == 0UL) {
#line 230
      goto ldv_52233;
    } else {

    }
#line 233
    expect_size = expect_size + 1;
  }
  ldv_52233: 
#line 214
  __mptr___0 = (struct list_head  const  *)r->tl_requests.next;
#line 214
  r = (struct drbd_request *)__mptr___0 + 0xffffffffffffff98UL;
  ldv_52236: ;
#line 214
  if ((unsigned long )(& r->tl_requests) != (unsigned long )(& tconn->transfer_log)) {
#line 215
    goto ldv_52235;
  } else {

  }
  ldv_52234: ;
#line 238
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 239
    printk("\vd-con %s: BAD! BarrierAck #%u received, but no epoch in tl!?\n", tconn->name,
           barrier_nr);
#line 241
    goto bail;
  } else {

  }
#line 243
  if ((unsigned int )expect_epoch != barrier_nr) {
#line 244
    printk("\vd-con %s: BAD! BarrierAck #%u received, expected #%u!\n", tconn->name,
           barrier_nr, expect_epoch);
#line 246
    goto bail;
  } else {

  }
#line 249
  if ((unsigned int )expect_size != set_size) {
#line 250
    printk("\vd-con %s: BAD! BarrierAck #%u received with n_writes=%u, expected n_writes=%u!\n",
           tconn->name, barrier_nr, set_size, expect_size);
#line 252
    goto bail;
  } else {

  }
#line 259
  __mptr___1 = (struct list_head  const  *)tconn->transfer_log.next;
#line 259
  req = (struct drbd_request *)__mptr___1 + 0xffffffffffffff98UL;
#line 259
  goto ldv_52244;
  ldv_52243: ;
#line 260
  if (req->epoch == (unsigned int )expect_epoch) {
#line 261
    goto ldv_52242;
  } else {

  }
#line 259
  __mptr___2 = (struct list_head  const  *)req->tl_requests.next;
#line 259
  req = (struct drbd_request *)__mptr___2 + 0xffffffffffffff98UL;
  ldv_52244: ;
#line 259
  if ((unsigned long )(& req->tl_requests) != (unsigned long )(& tconn->transfer_log)) {
#line 260
    goto ldv_52243;
  } else {

  }
  ldv_52242: 
#line 262
  __mptr___3 = (struct list_head  const  *)req->tl_requests.next;
#line 262
  r = (struct drbd_request *)__mptr___3 + 0xffffffffffffff98UL;
#line 262
  goto ldv_52251;
  ldv_52250: ;
#line 263
  if (req->epoch != (unsigned int )expect_epoch) {
#line 264
    goto ldv_52249;
  } else {

  }
#line 265
  _req_mod(req, BARRIER_ACKED);
#line 262
  req = r;
#line 262
  __mptr___4 = (struct list_head  const  *)r->tl_requests.next;
#line 262
  r = (struct drbd_request *)__mptr___4 + 0xffffffffffffff98UL;
  ldv_52251: ;
#line 262
  if ((unsigned long )(& req->tl_requests) != (unsigned long )(& tconn->transfer_log)) {
#line 263
    goto ldv_52250;
  } else {

  }
  ldv_52249: 
#line 267
  spin_unlock_irq(& tconn->req_lock);
#line 269
  return;
  bail: 
#line 272
  spin_unlock_irq(& tconn->req_lock);
#line 273
  val.i = 0U;
#line 273
  val.ldv_40604.conn = 6U;
#line 273
  mask.i = 0U;
#line 273
  mask.ldv_40604.conn = 31U;
#line 273
  conn_request_state(tconn, mask, val, CS_HARD);
#line 275
  return;
}
}
#line 286 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_restart(struct drbd_tconn *tconn , enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 290
  __mptr = (struct list_head  const  *)tconn->transfer_log.next;
#line 290
  req = (struct drbd_request *)__mptr + 0xffffffffffffff98UL;
#line 290
  __mptr___0 = (struct list_head  const  *)req->tl_requests.next;
#line 290
  r = (struct drbd_request *)__mptr___0 + 0xffffffffffffff98UL;
#line 290
  goto ldv_52269;
  ldv_52268: 
#line 291
  _req_mod(req, what);
#line 290
  req = r;
#line 290
  __mptr___1 = (struct list_head  const  *)r->tl_requests.next;
#line 290
  r = (struct drbd_request *)__mptr___1 + 0xffffffffffffff98UL;
  ldv_52269: ;
#line 290
  if ((unsigned long )(& req->tl_requests) != (unsigned long )(& tconn->transfer_log)) {
#line 291
    goto ldv_52268;
  } else {

  }

#line 295
  return;
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_restart(struct drbd_tconn *tconn , enum drbd_req_event what ) 
{ 


  {
#line 296
  spin_lock_irq(& tconn->req_lock);
#line 297
  _tl_restart(tconn, what);
#line 298
  spin_unlock_irq(& tconn->req_lock);
#line 299
  return;
}
}
#line 309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_tconn *tconn ) 
{ 


  {
#line 311
  tl_restart(tconn, CONNECTION_LOST_WHILE_PENDING);
#line 312
  return;
}
}
#line 318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_abort_disk_io(struct drbd_conf *mdev ) 
{ 
  struct drbd_tconn *tconn ;
  struct drbd_request *req ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 320
  tconn = mdev->tconn;
#line 323
  spin_lock_irq(& tconn->req_lock);
#line 324
  __mptr = (struct list_head  const  *)tconn->transfer_log.next;
#line 324
  req = (struct drbd_request *)__mptr + 0xffffffffffffff98UL;
#line 324
  __mptr___0 = (struct list_head  const  *)req->tl_requests.next;
#line 324
  r = (struct drbd_request *)__mptr___0 + 0xffffffffffffff98UL;
#line 324
  goto ldv_52292;
  ldv_52291: ;
#line 325
  if (((unsigned long )req->rq_state & 1UL) == 0UL) {
#line 326
    goto ldv_52290;
  } else {

  }
#line 327
  if ((unsigned long )req->w.ldv_50388.mdev != (unsigned long )mdev) {
#line 328
    goto ldv_52290;
  } else {

  }
#line 329
  _req_mod(req, ABORT_DISK_IO);
  ldv_52290: 
#line 324
  req = r;
#line 324
  __mptr___1 = (struct list_head  const  *)r->tl_requests.next;
#line 324
  r = (struct drbd_request *)__mptr___1 + 0xffffffffffffff98UL;
  ldv_52292: ;
#line 324
  if ((unsigned long )(& req->tl_requests) != (unsigned long )(& tconn->transfer_log)) {
#line 325
    goto ldv_52291;
  } else {

  }
#line 331
  spin_unlock_irq(& tconn->req_lock);
#line 332
  return;
}
}
#line 334 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_tconn *tconn ;
  unsigned long flags ;
  int retval ;
  struct task_struct *tmp ;
  raw_spinlock_t *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 336
  thi = (struct drbd_thread *)arg;
#line 337
  tconn = thi->tconn;
#line 341
  tmp = get_current();
#line 341
  snprintf((char *)(& tmp->comm), 16UL, "drbd_%c_%s", (int )thi->name[0], (thi->tconn)->name);
  restart: 
#line 345
  retval = (*(thi->function))(thi);
#line 347
  tmp___0 = spinlock_check(& thi->t_lock);
#line 347
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 359
  if ((unsigned int )thi->t_state == 3U) {
#line 360
    printk("\016d-con %s: Restarting %s thread\n", tconn->name, (char *)(& thi->name));
#line 361
    thi->t_state = RUNNING;
#line 362
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 363
    goto restart;
  } else {

  }
#line 366
  thi->task = 0;
#line 367
  thi->t_state = NONE;
#line 368
  __asm__  volatile   ("mfence": : : "memory");
#line 369
  complete_all(& thi->stop);
#line 370
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 372
  tmp___1 = get_current();
#line 372
  printk("\016d-con %s: Terminating %s\n", tconn->name, (char *)(& tmp___1->comm));
#line 376
  kref_put(& tconn->kref, & conn_destroy);
#line 377
  ldv_module_put_3(& __this_module);
#line 378
  return (retval);
}
}
#line 381 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_tconn *tconn , struct drbd_thread *thi ,
                             int (*func)(struct drbd_thread * ) , char *name ) 
{ 
  struct lock_class_key __key ;

  {
#line 384
  spinlock_check(& thi->t_lock);
#line 384
  __raw_spin_lock_init(& thi->t_lock.ldv_6135.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 385
  thi->task = 0;
#line 386
  thi->t_state = NONE;
#line 387
  thi->function = func;
#line 388
  thi->tconn = tconn;
#line 389
  strncpy((char *)(& thi->name), (char const   *)name, 9UL);
#line 390
  return;
}
}
#line 392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_tconn *tconn ;
  struct task_struct *nt ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;
  long tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 394
  tconn = thi->tconn;
#line 400
  tmp = spinlock_check(& thi->t_lock);
#line 400
  flags = _raw_spin_lock_irqsave(tmp);
#line 402
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 404
  tmp___0 = get_current();
#line 404
  tmp___1 = get_current();
#line 404
  printk("\016d-con %s: Starting %s thread (from %s [%d])\n", tconn->name, (char *)(& thi->name),
         (char *)(& tmp___1->comm), tmp___0->pid);
#line 408
  tmp___2 = ldv_try_module_get_4(& __this_module);
#line 408
  if (tmp___2) {
#line 408
    tmp___3 = 0;
  } else {
#line 408
    tmp___3 = 1;
  }
#line 408
  if (tmp___3) {
#line 409
    printk("\vd-con %s: Failed to get module reference in drbd_thread_start\n", tconn->name);
#line 410
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 411
    return (0);
  } else {

  }
#line 414
  kref_get(& (thi->tconn)->kref);
#line 416
  init_completion(& thi->stop);
#line 417
  thi->reset_cpu_mask = 1;
#line 418
  thi->t_state = RUNNING;
#line 419
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 420
  tmp___4 = get_current();
#line 420
  flush_signals(tmp___4);
#line 422
  nt = kthread_create_on_node(& drbd_thread_setup, (void *)thi, -1, "drbd_%c_%s",
                              (int )thi->name[0], (thi->tconn)->name);
#line 425
  tmp___5 = IS_ERR((void const   *)nt);
#line 425
  if (tmp___5 != 0L) {
#line 426
    printk("\vd-con %s: Couldn\'t start thread\n", tconn->name);
#line 428
    kref_put(& tconn->kref, & conn_destroy);
#line 429
    ldv_module_put_5(& __this_module);
#line 430
    return (0);
  } else {

  }
#line 432
  tmp___6 = spinlock_check(& thi->t_lock);
#line 432
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 433
  thi->task = nt;
#line 434
  thi->t_state = RUNNING;
#line 435
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 436
  wake_up_process(nt);
#line 437
  goto ldv_52328;
  case 2U: 
#line 439
  thi->t_state = RESTARTING;
#line 440
  tmp___7 = get_current();
#line 440
  tmp___8 = get_current();
#line 440
  printk("\016d-con %s: Restarting %s thread (from %s [%d])\n", tconn->name, (char *)(& thi->name),
         (char *)(& tmp___8->comm), tmp___7->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 446
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 447
  goto ldv_52328;
  }
  ldv_52328: ;
#line 450
  return (1);
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 458
  ns = restart != 0 ? RESTARTING : EXITING;
#line 461
  tmp = spinlock_check(& thi->t_lock);
#line 461
  flags = _raw_spin_lock_irqsave(tmp);
#line 463
  if ((unsigned int )thi->t_state == 0U) {
#line 464
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 465
    if (restart != 0) {
#line 466
      drbd_thread_start(thi);
    } else {

    }
#line 467
    return;
  } else {

  }
#line 470
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 471
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 472
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 473
      return;
    } else {

    }
#line 476
    thi->t_state = ns;
#line 477
    __asm__  volatile   ("mfence": : : "memory");
#line 478
    init_completion(& thi->stop);
#line 479
    tmp___0 = get_current();
#line 479
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 480
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 483
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 485
  if (wait != 0) {
#line 486
    wait_for_completion(& thi->stop);
  } else {

  }
#line 487
  return;
}
}
#line 489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct drbd_thread *drbd_task_to_thread(struct drbd_tconn *tconn , struct task_struct *task ) 
{ 
  struct drbd_thread *thi ;

  {
#line 491
  thi = (unsigned long )tconn->receiver.task == (unsigned long )task ? & tconn->receiver : ((unsigned long )tconn->asender.task == (unsigned long )task ? & tconn->asender : ((unsigned long )tconn->worker.task == (unsigned long )task ? & tconn->worker : 0));
#line 496
  return (thi);
}
}
#line 499 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char *drbd_task_to_thread_name(struct drbd_tconn *tconn , struct task_struct *task ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_thread *tmp ;

  {
#line 501
  tmp = drbd_task_to_thread(tconn, task);
#line 501
  thi = tmp;
#line 502
  return ((unsigned long )thi != (unsigned long )((struct drbd_thread *)0) ? (char *)(& thi->name) : (char *)(& task->comm));
}
}
#line 505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int conn_lowest_minor(struct drbd_tconn *tconn ) 
{ 
  struct drbd_conf *mdev ;
  int vnr ;
  int m ;
  void *tmp ;
  unsigned int tmp___0 ;

  {
#line 508
  vnr = 0;
#line 510
  rcu_read_lock();
#line 511
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 511
  mdev = (struct drbd_conf *)tmp;
#line 512
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 512
    tmp___0 = mdev_to_minor(mdev);
#line 512
    m = (int )tmp___0;
  } else {
#line 512
    m = -1;
  }
#line 513
  rcu_read_unlock();
#line 515
  return (m);
}
}
#line 526 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_tconn *tconn ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 531
  tmp = cpumask_weight((struct cpumask  const  *)tconn->cpu_mask);
#line 531
  if (tmp != 0U) {
#line 532
    return;
  } else {

  }
#line 534
  tmp___0 = conn_lowest_minor(tconn);
#line 534
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 534
  ord = (int )((unsigned int )tmp___0 % tmp___1);
#line 535
  cpu = -1;
#line 535
  goto ldv_52365;
  ldv_52364: 
#line 536
  tmp___2 = ord;
#line 536
  ord = ord - 1;
#line 536
  if (tmp___2 == 0) {
#line 537
    cpumask_set_cpu((unsigned int )cpu, tconn->cpu_mask);
#line 538
    return;
  } else {

  }
  ldv_52365: 
#line 535
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 535
  cpu = (int )tmp___3;
#line 535
  if (cpu < nr_cpu_ids) {
#line 536
    goto ldv_52364;
  } else {

  }
#line 542
  cpumask_setall(tconn->cpu_mask);
#line 543
  return;
}
}
#line 553 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_thread *thi ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;

  {
#line 555
  tmp = get_current();
#line 555
  p = tmp;
#line 557
  if (thi->reset_cpu_mask == 0) {
#line 558
    return;
  } else {

  }
#line 559
  thi->reset_cpu_mask = 0;
#line 560
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)(thi->tconn)->cpu_mask);
#line 561
  return;
}
}
#line 571 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int drbd_header_size(struct drbd_tconn *tconn ) 
{ 


  {
#line 573
  if (tconn->agreed_pro_version > 99) {
#line 575
    return (16U);
  } else {
#line 580
    return (8U);
  }
}
}
#line 584 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned int prepare_header80(struct p_header80 *h , enum drbd_packet cmd ,
                                     int size ) 
{ 
  __u16 tmp ;
  __u16 tmp___0 ;

  {
#line 586
  h->magic = 1728214147U;
#line 587
  tmp = __fswab16((int )((__u16 )cmd));
#line 587
  h->command = tmp;
#line 588
  tmp___0 = __fswab16((int )((__u16 )size));
#line 588
  h->length = tmp___0;
#line 589
  return (8U);
}
}
#line 592 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned int prepare_header95(struct p_header95 *h , enum drbd_packet cmd ,
                                     int size ) 
{ 
  __u16 tmp ;
  __u32 tmp___0 ;

  {
#line 594
  h->magic = 23171U;
#line 595
  tmp = __fswab16((int )((__u16 )cmd));
#line 595
  h->command = tmp;
#line 596
  tmp___0 = __fswab32((__u32 )size);
#line 596
  h->length = tmp___0;
#line 597
  return (8U);
}
}
#line 600 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned int prepare_header100(struct p_header100 *h , enum drbd_packet cmd ,
                                      int size , int vnr ) 
{ 
  __u16 tmp ;
  __u16 tmp___0 ;
  __u32 tmp___1 ;

  {
#line 603
  h->magic = 552345734U;
#line 604
  tmp = __fswab16((int )((__u16 )vnr));
#line 604
  h->volume = tmp;
#line 605
  tmp___0 = __fswab16((int )((__u16 )cmd));
#line 605
  h->command = tmp___0;
#line 606
  tmp___1 = __fswab32((__u32 )size);
#line 606
  h->length = tmp___1;
#line 607
  h->pad = 0U;
#line 608
  return (16U);
}
}
#line 611 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned int prepare_header(struct drbd_tconn *tconn , int vnr , void *buffer ,
                                   enum drbd_packet cmd , int size ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 614
  if (tconn->agreed_pro_version > 99) {
#line 615
    tmp = prepare_header100((struct p_header100 *)buffer, cmd, size, vnr);
#line 615
    return (tmp);
  } else
#line 616
  if (tconn->agreed_pro_version > 94 && (unsigned int )size > 32768U) {
#line 618
    tmp___0 = prepare_header95((struct p_header95 *)buffer, cmd, size);
#line 618
    return (tmp___0);
  } else {
#line 620
    tmp___1 = prepare_header80((struct p_header80 *)buffer, cmd, size);
#line 620
    return (tmp___1);
  }
}
}
#line 623 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void *__conn_prepare_command(struct drbd_tconn *tconn , struct drbd_socket *sock ) 
{ 
  unsigned int tmp ;

  {
#line 626
  if ((unsigned long )sock->socket == (unsigned long )((struct socket *)0)) {
#line 627
    return (0);
  } else {

  }
#line 628
  tmp = drbd_header_size(tconn);
#line 628
  return (sock->sbuf + (unsigned long )tmp);
}
}
#line 631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void *conn_prepare_command(struct drbd_tconn *tconn , struct drbd_socket *sock ) 
{ 
  void *p ;

  {
#line 635
  mutex_lock_nested(& sock->mutex, 0U);
#line 636
  p = __conn_prepare_command(tconn, sock);
#line 637
  if ((unsigned long )p == (unsigned long )((void *)0)) {
#line 638
    mutex_unlock(& sock->mutex);
  } else {

  }
#line 640
  return (p);
}
}
#line 643 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void *drbd_prepare_command(struct drbd_conf *mdev , struct drbd_socket *sock ) 
{ 
  void *tmp ;

  {
#line 645
  tmp = conn_prepare_command(mdev->tconn, sock);
#line 645
  return (tmp);
}
}
#line 648 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int __send_command(struct drbd_tconn *tconn , int vnr , struct drbd_socket *sock ,
                          enum drbd_packet cmd , unsigned int header_size , void *data ,
                          unsigned int size ) 
{ 
  int msg_flags ;
  int err ;
  unsigned int tmp ;

  {
#line 663
  msg_flags = (unsigned long )data != (unsigned long )((void *)0) ? 32768 : 0;
#line 665
  tmp = prepare_header(tconn, vnr, sock->sbuf, cmd, (int )(header_size + size));
#line 665
  header_size = tmp + header_size;
#line 667
  err = drbd_send_all(tconn, sock->socket, sock->sbuf, (size_t )header_size, (unsigned int )msg_flags);
#line 669
  if ((unsigned long )data != (unsigned long )((void *)0) && err == 0) {
#line 670
    err = drbd_send_all(tconn, sock->socket, data, (size_t )size, 0U);
  } else {

  }
#line 671
  return (err);
}
}
#line 674 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int __conn_send_command(struct drbd_tconn *tconn , struct drbd_socket *sock ,
                               enum drbd_packet cmd , unsigned int header_size , void *data ,
                               unsigned int size ) 
{ 
  int tmp ;

  {
#line 678
  tmp = __send_command(tconn, 0, sock, cmd, header_size, data, size);
#line 678
  return (tmp);
}
}
#line 681 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int conn_send_command(struct drbd_tconn *tconn , struct drbd_socket *sock , enum drbd_packet cmd ,
                      unsigned int header_size , void *data , unsigned int size ) 
{ 
  int err ;

  {
#line 687
  err = __conn_send_command(tconn, sock, cmd, header_size, data, size);
#line 688
  mutex_unlock(& sock->mutex);
#line 689
  return (err);
}
}
#line 692 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_command(struct drbd_conf *mdev , struct drbd_socket *sock , enum drbd_packet cmd ,
                      unsigned int header_size , void *data , unsigned int size ) 
{ 
  int err ;

  {
#line 698
  err = __send_command(mdev->tconn, mdev->vnr, sock, cmd, header_size, data, size);
#line 700
  mutex_unlock(& sock->mutex);
#line 701
  return (err);
}
}
#line 704 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ping(struct drbd_tconn *tconn ) 
{ 
  struct drbd_socket *sock ;
  void *tmp ;
  int tmp___0 ;

  {
#line 708
  sock = & tconn->meta;
#line 709
  tmp = conn_prepare_command(tconn, sock);
#line 709
  if ((unsigned long )tmp == (unsigned long )((void *)0)) {
#line 710
    return (-5);
  } else {

  }
#line 711
  tmp___0 = conn_send_command(tconn, sock, P_PING, 0U, 0, 0U);
#line 711
  return (tmp___0);
}
}
#line 714 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ping_ack(struct drbd_tconn *tconn ) 
{ 
  struct drbd_socket *sock ;
  void *tmp ;
  int tmp___0 ;

  {
#line 718
  sock = & tconn->meta;
#line 719
  tmp = conn_prepare_command(tconn, sock);
#line 719
  if ((unsigned long )tmp == (unsigned long )((void *)0)) {
#line 720
    return (-5);
  } else {

  }
#line 721
  tmp___0 = conn_send_command(tconn, sock, P_PING_ACK, 0U, 0, 0U);
#line 721
  return (tmp___0);
}
}
#line 724 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev ) 
{ 
  struct drbd_socket *sock ;
  struct p_rs_param_95 *p ;
  int size ;
  int apv ;
  enum drbd_packet cmd ;
  struct net_conf *nc ;
  struct disk_conf *dc ;
  void *tmp ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;
  size_t tmp___2 ;
  int tmp___3 ;
  struct disk_conf *_________p1___0 ;
  bool __warned___0 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 729
  apv = (mdev->tconn)->agreed_pro_version;
#line 734
  sock = & (mdev->tconn)->data;
#line 735
  tmp = drbd_prepare_command(mdev, sock);
#line 735
  p = (struct p_rs_param_95 *)tmp;
#line 736
  if ((unsigned long )p == (unsigned long )((struct p_rs_param_95 *)0)) {
#line 737
    return (-5);
  } else {

  }
#line 739
  rcu_read_lock();
#line 740
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 740
  tmp___0 = debug_lockdep_rcu_enabled();
#line 740
  if (tmp___0 != 0 && ! __warned) {
#line 740
    tmp___1 = rcu_read_lock_held();
#line 740
    if (tmp___1 == 0 && 1) {
#line 740
      __warned = 1;
#line 740
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
                             740, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 740
  nc = _________p1;
#line 742
  if (apv > 87) {
#line 742
    if (apv == 88) {
#line 742
      tmp___2 = strlen((char const   *)(& nc->verify_alg));
#line 742
      tmp___3 = (int )((unsigned int )tmp___2 + 5U);
    } else {
#line 742
      tmp___3 = apv <= 94 ? 132 : 148;
    }
#line 742
    size = tmp___3;
  } else {
#line 742
    size = 4;
  }
#line 748
  cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 751
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 753
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 753
  if (tmp___6 != 0) {
#line 754
    _________p1___0 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 754
    tmp___4 = debug_lockdep_rcu_enabled();
#line 754
    if (tmp___4 != 0 && ! __warned___0) {
#line 754
      tmp___5 = rcu_read_lock_held();
#line 754
      if (tmp___5 == 0 && 1) {
#line 754
        __warned___0 = 1;
#line 754
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
                               754, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 754
    dc = _________p1___0;
#line 755
    p->resync_rate = __fswab32(dc->resync_rate);
#line 756
    p->c_plan_ahead = __fswab32(dc->c_plan_ahead);
#line 757
    p->c_delay_target = __fswab32(dc->c_delay_target);
#line 758
    p->c_fill_target = __fswab32(dc->c_fill_target);
#line 759
    p->c_max_rate = __fswab32(dc->c_max_rate);
#line 760
    put_ldev(mdev);
  } else {
#line 762
    p->resync_rate = 4194304000U;
#line 763
    p->c_plan_ahead = 335544320U;
#line 764
    p->c_delay_target = 167772160U;
#line 765
    p->c_fill_target = 1677721600U;
#line 766
    p->c_max_rate = 9437440U;
  }
#line 769
  if (apv > 87) {
#line 770
    strcpy((char *)(& p->verify_alg), (char const   *)(& nc->verify_alg));
  } else {

  }
#line 771
  if (apv > 88) {
#line 772
    strcpy((char *)(& p->csums_alg), (char const   *)(& nc->csums_alg));
  } else {

  }
#line 773
  rcu_read_unlock();
#line 775
  tmp___7 = drbd_send_command(mdev, sock, cmd, (unsigned int )size, 0, 0U);
#line 775
  return (tmp___7);
}
}
#line 778 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int __drbd_send_protocol(struct drbd_tconn *tconn , enum drbd_packet cmd ) 
{ 
  struct drbd_socket *sock ;
  struct p_protocol *p ;
  struct net_conf *nc ;
  int size ;
  int cf ;
  void *tmp ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;
  size_t tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  int tmp___5 ;

  {
#line 785
  sock = & tconn->data;
#line 786
  tmp = __conn_prepare_command(tconn, sock);
#line 786
  p = (struct p_protocol *)tmp;
#line 787
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 788
    return (-5);
  } else {

  }
#line 790
  rcu_read_lock();
#line 791
  _________p1 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 791
  tmp___0 = debug_lockdep_rcu_enabled();
#line 791
  if (tmp___0 != 0 && ! __warned) {
#line 791
    tmp___1 = rcu_read_lock_held();
#line 791
    if (tmp___1 == 0 && 1) {
#line 791
      __warned = 1;
#line 791
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
                             791, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 791
  nc = _________p1;
#line 793
  if ((int )((signed char )nc->tentative) != 0 && tconn->agreed_pro_version <= 91) {
#line 794
    rcu_read_unlock();
#line 795
    mutex_unlock(& sock->mutex);
#line 796
    printk("\vd-con %s: --dry-run is not supported by peer", tconn->name);
#line 797
    return (-95);
  } else {

  }
#line 800
  size = 24;
#line 801
  if (tconn->agreed_pro_version > 86) {
#line 802
    tmp___2 = strlen((char const   *)(& nc->integrity_alg));
#line 802
    size = (int )(((unsigned int )tmp___2 + (unsigned int )size) + 1U);
  } else {

  }
#line 804
  p->protocol = __fswab32(nc->wire_protocol);
#line 805
  p->after_sb_0p = __fswab32(nc->after_sb_0p);
#line 806
  p->after_sb_1p = __fswab32(nc->after_sb_1p);
#line 807
  p->after_sb_2p = __fswab32(nc->after_sb_2p);
#line 808
  tmp___3 = __fswab32((__u32 )nc->two_primaries);
#line 808
  p->two_primaries = tmp___3;
#line 809
  cf = 0;
#line 810
  if ((int )((signed char )nc->discard_my_data) != 0) {
#line 811
    cf = cf | 1;
  } else {

  }
#line 812
  if ((int )((signed char )nc->tentative) != 0) {
#line 813
    cf = cf | 2;
  } else {

  }
#line 814
  tmp___4 = __fswab32((__u32 )cf);
#line 814
  p->conn_flags = tmp___4;
#line 816
  if (tconn->agreed_pro_version > 86) {
#line 817
    strcpy((char *)(& p->integrity_alg), (char const   *)(& nc->integrity_alg));
  } else {

  }
#line 818
  rcu_read_unlock();
#line 820
  tmp___5 = __conn_send_command(tconn, sock, cmd, (unsigned int )size, 0, 0U);
#line 820
  return (tmp___5);
}
}
#line 823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_tconn *tconn ) 
{ 
  int err ;

  {
#line 827
  mutex_lock_nested(& tconn->data.mutex, 0U);
#line 828
  err = __drbd_send_protocol(tconn, P_PROTOCOL);
#line 829
  mutex_unlock(& tconn->data.mutex);
#line 831
  return (err);
}
}
#line 834 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct drbd_socket *sock ;
  struct p_uuids *p ;
  int i ;
  int tmp ;
  void *tmp___0 ;
  __u64 tmp___1 ;
  __u64 tmp___2 ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  __u64 tmp___6 ;
  int tmp___7 ;

  {
#line 840
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 840
  if (tmp == 0) {
#line 841
    return (0);
  } else {

  }
#line 843
  sock = & (mdev->tconn)->data;
#line 844
  tmp___0 = drbd_prepare_command(mdev, sock);
#line 844
  p = (struct p_uuids *)tmp___0;
#line 845
  if ((unsigned long )p == (unsigned long )((struct p_uuids *)0)) {
#line 846
    put_ldev(mdev);
#line 847
    return (-5);
  } else {

  }
#line 849
  spin_lock_irq(& (mdev->ldev)->md.uuid_lock);
#line 850
  i = 0;
#line 850
  goto ldv_52495;
  ldv_52494: ;
#line 851
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 851
    tmp___1 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 851
    p->uuid[i] = tmp___1;
  } else {
#line 851
    p->uuid[i] = 0ULL;
  }
#line 850
  i = i + 1;
  ldv_52495: ;
#line 850
  if (i <= 3) {
#line 851
    goto ldv_52494;
  } else {

  }
#line 852
  spin_unlock_irq(& (mdev->ldev)->md.uuid_lock);
#line 854
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 855
  tmp___2 = __fswab64((__u64 )mdev->comm_bm_set);
#line 855
  p->uuid[4] = tmp___2;
#line 856
  rcu_read_lock();
#line 857
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 857
  tmp___3 = debug_lockdep_rcu_enabled();
#line 857
  if (tmp___3 != 0 && ! __warned) {
#line 857
    tmp___4 = rcu_read_lock_held();
#line 857
    if (tmp___4 == 0 && 1) {
#line 857
      __warned = 1;
#line 857
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
                             857, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 857
  uuid_flags = ((int )((signed char )_________p1->discard_my_data) != 0 ? 1ULL : 0ULL) | uuid_flags;
#line 858
  rcu_read_unlock();
#line 859
  tmp___5 = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 859
  uuid_flags = (tmp___5 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 860
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 745UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 861
  tmp___6 = __fswab64(uuid_flags);
#line 861
  p->uuid[5] = tmp___6;
#line 863
  put_ldev(mdev);
#line 864
  tmp___7 = drbd_send_command(mdev, sock, P_UUIDS, 48U, 0, 0U);
#line 864
  return (tmp___7);
}
}
#line 867 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 869
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 869
  return (tmp);
}
}
#line 872 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 874
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 874
  return (tmp);
}
}
#line 877 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) 
{ 
  u64 *uuid ;
  int tmp ;

  {
#line 879
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 879
  if (tmp != 0) {
#line 880
    uuid = (u64 *)(& (mdev->ldev)->md.uuid);
#line 881
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX\n",
              text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL));
#line 887
    put_ldev(mdev);
  } else {
#line 889
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s effective data uuid: %016llX\n",
              text, mdev->ed_uuid);
  }
#line 890
  return;
}
}
#line 895 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) 
{ 
  struct drbd_socket *sock ;
  struct p_rs_uuid *p ;
  u64 uuid ;
  void *tmp ;
  __u64 tmp___0 ;

  {
#line 901
  if ((unsigned int )*((unsigned char *)mdev + 749UL) != 16U) {
#line 901
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            901);
  } else {

  }
#line 903
  uuid = (mdev->ldev)->md.uuid[1];
#line 904
  if (uuid != 0ULL && uuid != 4ULL) {
#line 905
    uuid = uuid + 281474976710656ULL;
  } else {
#line 907
    get_random_bytes((void *)(& uuid), 8);
  }
#line 908
  drbd_uuid_set(mdev, 1, uuid);
#line 909
  drbd_print_uuids(mdev, "updated sync UUID");
#line 910
  drbd_md_sync(mdev);
#line 912
  sock = & (mdev->tconn)->data;
#line 913
  tmp = drbd_prepare_command(mdev, sock);
#line 913
  p = (struct p_rs_uuid *)tmp;
#line 914
  if ((unsigned long )p != (unsigned long )((struct p_rs_uuid *)0)) {
#line 915
    tmp___0 = __fswab64(uuid);
#line 915
    p->uuid = tmp___0;
#line 916
    drbd_send_command(mdev, sock, P_SYNC_UUID, 8U, 0, 0U);
  } else {

  }
#line 918
  return;
}
}
#line 920 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct drbd_socket *sock ;
  struct p_sizes *p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  unsigned int max_bio_size ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  int tmp___2 ;
  void *tmp___3 ;
  unsigned int _min1___0 ;
  unsigned int _min2___0 ;
  unsigned int _min1___1 ;
  unsigned int _min2___1 ;
  __u64 tmp___4 ;
  __u64 tmp___5 ;
  sector_t tmp___6 ;
  __u64 tmp___7 ;
  __u64 tmp___8 ;
  __u32 tmp___9 ;
  __u16 tmp___10 ;
  __u16 tmp___11 ;
  int tmp___12 ;

  {
#line 928
  tmp___2 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 928
  if (tmp___2 != 0) {
#line 929
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 929
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              929);
    } else {

    }
#line 930
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 931
    rcu_read_lock();
#line 932
    _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 932
    tmp = debug_lockdep_rcu_enabled();
#line 932
    if (tmp != 0 && ! __warned) {
#line 932
      tmp___0 = rcu_read_lock_held();
#line 932
      if (tmp___0 == 0 && 1) {
#line 932
        __warned = 1;
#line 932
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
                               932, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 932
    u_size = (sector_t )_________p1->disk_size;
#line 933
    rcu_read_unlock();
#line 934
    q_order_type = drbd_queue_order_type(mdev);
#line 935
    tmp___1 = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 935
    max_bio_size = tmp___1 << 9;
#line 936
    _min1 = max_bio_size;
#line 936
    _min2 = 1048576U;
#line 936
    max_bio_size = _min1 < _min2 ? _min1 : _min2;
#line 937
    put_ldev(mdev);
  } else {
#line 939
    d_size = 0UL;
#line 940
    u_size = 0UL;
#line 941
    q_order_type = 0;
#line 942
    max_bio_size = 1048576U;
  }
#line 945
  sock = & (mdev->tconn)->data;
#line 946
  tmp___3 = drbd_prepare_command(mdev, sock);
#line 946
  p = (struct p_sizes *)tmp___3;
#line 947
  if ((unsigned long )p == (unsigned long )((struct p_sizes *)0)) {
#line 948
    return (-5);
  } else {

  }
#line 950
  if ((mdev->tconn)->agreed_pro_version <= 94) {
#line 951
    _min1___0 = max_bio_size;
#line 951
    _min2___0 = 32768U;
#line 951
    max_bio_size = _min1___0 < _min2___0 ? _min1___0 : _min2___0;
  } else
#line 952
  if ((mdev->tconn)->agreed_pro_version <= 99) {
#line 953
    _min1___1 = max_bio_size;
#line 953
    _min2___1 = 131072U;
#line 953
    max_bio_size = _min1___1 < _min2___1 ? _min1___1 : _min2___1;
  } else {

  }
#line 955
  tmp___4 = __fswab64((__u64 )d_size);
#line 955
  p->d_size = tmp___4;
#line 956
  tmp___5 = __fswab64((__u64 )u_size);
#line 956
  p->u_size = tmp___5;
#line 957
  if (trigger_reply == 0) {
#line 957
    tmp___6 = drbd_get_capacity(mdev->this_bdev);
#line 957
    tmp___7 = (__u64 )tmp___6;
  } else {
#line 957
    tmp___7 = 0ULL;
  }
#line 957
  tmp___8 = __fswab64(tmp___7);
#line 957
  p->c_size = tmp___8;
#line 958
  tmp___9 = __fswab32(max_bio_size);
#line 958
  p->max_bio_size = tmp___9;
#line 959
  tmp___10 = __fswab16((int )((__u16 )q_order_type));
#line 959
  p->queue_order_type = tmp___10;
#line 960
  tmp___11 = __fswab16((int )((__u16 )flags));
#line 960
  p->dds_flags = tmp___11;
#line 961
  tmp___12 = drbd_send_command(mdev, sock, P_SIZES, 32U, 0, 0U);
#line 961
  return (tmp___12);
}
}
#line 968 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_current_state(struct drbd_conf *mdev ) 
{ 
  struct drbd_socket *sock ;
  struct p_state *p ;
  void *tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 973
  sock = & (mdev->tconn)->data;
#line 974
  tmp = drbd_prepare_command(mdev, sock);
#line 974
  p = (struct p_state *)tmp;
#line 975
  if ((unsigned long )p == (unsigned long )((struct p_state *)0)) {
#line 976
    return (-5);
  } else {

  }
#line 977
  tmp___0 = __fswab32(mdev->state.i);
#line 977
  p->state = tmp___0;
#line 978
  tmp___1 = drbd_send_command(mdev, sock, P_STATE, 4U, 0, 0U);
#line 978
  return (tmp___1);
}
}
#line 991 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  struct drbd_socket *sock ;
  struct p_state *p ;
  void *tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 996
  sock = & (mdev->tconn)->data;
#line 997
  tmp = drbd_prepare_command(mdev, sock);
#line 997
  p = (struct p_state *)tmp;
#line 998
  if ((unsigned long )p == (unsigned long )((struct p_state *)0)) {
#line 999
    return (-5);
  } else {

  }
#line 1000
  tmp___0 = __fswab32(state.i);
#line 1000
  p->state = tmp___0;
#line 1001
  tmp___1 = drbd_send_command(mdev, sock, P_STATE, 4U, 0, 0U);
#line 1001
  return (tmp___1);
}
}
#line 1004 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct drbd_socket *sock ;
  struct p_req_state *p ;
  void *tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 1009
  sock = & (mdev->tconn)->data;
#line 1010
  tmp = drbd_prepare_command(mdev, sock);
#line 1010
  p = (struct p_req_state *)tmp;
#line 1011
  if ((unsigned long )p == (unsigned long )((struct p_req_state *)0)) {
#line 1012
    return (-5);
  } else {

  }
#line 1013
  tmp___0 = __fswab32(mask.i);
#line 1013
  p->mask = tmp___0;
#line 1014
  tmp___1 = __fswab32(val.i);
#line 1014
  p->val = tmp___1;
#line 1015
  tmp___2 = drbd_send_command(mdev, sock, P_STATE_CHG_REQ, 8U, 0, 0U);
#line 1015
  return (tmp___2);
}
}
#line 1018 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int conn_send_state_req(struct drbd_tconn *tconn , union drbd_state mask , union drbd_state val ) 
{ 
  enum drbd_packet cmd ;
  struct drbd_socket *sock ;
  struct p_req_state *p ;
  void *tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 1024
  cmd = tconn->agreed_pro_version <= 99 ? P_STATE_CHG_REQ : P_CONN_ST_CHG_REQ;
#line 1025
  sock = & tconn->data;
#line 1026
  tmp = conn_prepare_command(tconn, sock);
#line 1026
  p = (struct p_req_state *)tmp;
#line 1027
  if ((unsigned long )p == (unsigned long )((struct p_req_state *)0)) {
#line 1028
    return (-5);
  } else {

  }
#line 1029
  tmp___0 = __fswab32(mask.i);
#line 1029
  p->mask = tmp___0;
#line 1030
  tmp___1 = __fswab32(val.i);
#line 1030
  p->val = tmp___1;
#line 1031
  tmp___2 = conn_send_command(tconn, sock, cmd, 8U, 0, 0U);
#line 1031
  return (tmp___2);
}
}
#line 1034 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) 
{ 
  struct drbd_socket *sock ;
  struct p_req_state_reply *p ;
  void *tmp ;
  __u32 tmp___0 ;

  {
#line 1039
  sock = & (mdev->tconn)->meta;
#line 1040
  tmp = drbd_prepare_command(mdev, sock);
#line 1040
  p = (struct p_req_state_reply *)tmp;
#line 1041
  if ((unsigned long )p != (unsigned long )((struct p_req_state_reply *)0)) {
#line 1042
    tmp___0 = __fswab32((__u32 )retcode);
#line 1042
    p->retcode = tmp___0;
#line 1043
    drbd_send_command(mdev, sock, P_STATE_CHG_REPLY, 4U, 0, 0U);
  } else {

  }
#line 1045
  return;
}
}
#line 1047 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void conn_send_sr_reply(struct drbd_tconn *tconn , enum drbd_state_rv retcode ) 
{ 
  struct drbd_socket *sock ;
  struct p_req_state_reply *p ;
  enum drbd_packet cmd ;
  void *tmp ;
  __u32 tmp___0 ;

  {
#line 1051
  cmd = tconn->agreed_pro_version <= 99 ? P_STATE_CHG_REPLY : P_CONN_ST_CHG_REPLY;
#line 1053
  sock = & tconn->meta;
#line 1054
  tmp = conn_prepare_command(tconn, sock);
#line 1054
  p = (struct p_req_state_reply *)tmp;
#line 1055
  if ((unsigned long )p != (unsigned long )((struct p_req_state_reply *)0)) {
#line 1056
    tmp___0 = __fswab32((__u32 )retcode);
#line 1056
    p->retcode = tmp___0;
#line 1057
    conn_send_command(tconn, sock, cmd, 4U, 0, 0U);
  } else {

  }
#line 1059
  return;
}
}
#line 1061 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void dcbp_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 1063
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 1063
  if (tmp != 0L) {
#line 1063
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"),
                         "i" (1063), "i" (12UL));
    ldv_52583: ;
#line 1063
    goto ldv_52583;
  } else {

  }
#line 1064
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 1065
  return;
}
}
#line 1067 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void dcbp_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 1069
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 1070
  return;
}
}
#line 1072 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void dcbp_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 1074
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 1074
  if (tmp != 0L) {
#line 1074
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"),
                         "i" (1074), "i" (12UL));
    ldv_52592: ;
#line 1074
    goto ldv_52592;
  } else {

  }
#line 1075
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 1076
  return;
}
}
#line 1078 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , unsigned int size ,
                         struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  int use_rle ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;

  {
#line 1092
  rcu_read_lock();
#line 1093
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 1093
  tmp___0 = debug_lockdep_rcu_enabled();
#line 1093
  if (tmp___0 != 0 && ! __warned) {
#line 1093
    tmp___1 = rcu_read_lock_held();
#line 1093
    if (tmp___1 == 0 && 1) {
#line 1093
      __warned = 1;
#line 1093
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
                             1093, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1093
  use_rle = (int )_________p1->use_rle;
#line 1094
  rcu_read_unlock();
#line 1095
  if (use_rle == 0 || (mdev->tconn)->agreed_pro_version <= 89) {
#line 1096
    return (0);
  } else {

  }
#line 1098
  if (c->bit_offset >= c->bm_bits) {
#line 1099
    return (0);
  } else {

  }
#line 1102
  bitstream_init(& bs, (void *)(& p->code), (size_t )size, 0U);
#line 1103
  memset((void *)(& p->code), 0, (size_t )size);
#line 1105
  plain_bits = 0UL;
#line 1110
  toggle = 2U;
  ldv_52612: ;
#line 1115
  if (toggle == 0U) {
#line 1115
    tmp___2 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 1115
    tmp = tmp___2;
  } else {
#line 1115
    tmp___3 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 1115
    tmp = tmp___3;
  }
#line 1117
  if (tmp == 0xffffffffffffffffUL) {
#line 1118
    tmp = c->bm_bits;
  } else {

  }
#line 1119
  rl = tmp - c->bit_offset;
#line 1121
  if (toggle == 2U) {
#line 1122
    if (rl == 0UL) {
#line 1125
      dcbp_set_start(p, 1);
#line 1127
      toggle = toggle == 0U;
#line 1128
      goto ldv_52610;
    } else {

    }
#line 1130
    dcbp_set_start(p, 0);
  } else {

  }
#line 1135
  if (rl == 0UL) {
#line 1136
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 1138
    return (-1);
  } else {

  }
#line 1141
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 1142
  if (bits == -105) {
#line 1143
    goto ldv_52611;
  } else {

  }
#line 1144
  if (bits <= 0) {
#line 1145
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 1146
    return (0);
  } else {

  }
#line 1149
  toggle = toggle == 0U;
#line 1150
  plain_bits = plain_bits + rl;
#line 1151
  c->bit_offset = tmp;
  ldv_52610: ;
#line 1152
  if (c->bit_offset < c->bm_bits) {
#line 1153
    goto ldv_52612;
  } else {

  }
  ldv_52611: 
#line 1154
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 1156
  if ((unsigned long )(len << 3) > plain_bits) {
#line 1159
    c->bit_offset = c->bit_offset - plain_bits;
#line 1160
    bm_xfer_ctx_bit_to_word_offset(c);
#line 1161
    c->bit_offset = c->word_offset * 64UL;
#line 1162
    return (0);
  } else {

  }
#line 1167
  bm_xfer_ctx_bit_to_word_offset(c);
#line 1170
  dcbp_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 1172
  return ((int )len);
}
}
#line 1182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct bm_xfer_ctx *c ) 
{ 
  struct drbd_socket *sock ;
  unsigned int header_size ;
  unsigned int tmp ;
  struct p_compressed_bm *p ;
  int len ;
  int err ;
  unsigned int data_size ;
  unsigned long num_words ;
  unsigned long *p___0 ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 1184
  sock = & (mdev->tconn)->data;
#line 1185
  tmp = drbd_header_size(mdev->tconn);
#line 1185
  header_size = tmp;
#line 1186
  p = (struct p_compressed_bm *)sock->sbuf + (unsigned long )header_size;
#line 1189
  len = fill_bitmap_rle_bits(mdev, p, 4095U - header_size, c);
#line 1191
  if (len < 0) {
#line 1192
    return (-5);
  } else {

  }
#line 1194
  if (len != 0) {
#line 1195
    dcbp_set_code(p, RLE_VLI_Bits);
#line 1196
    err = __send_command(mdev->tconn, mdev->vnr, sock, P_COMPRESSED_BITMAP, (unsigned int )len + 1U,
                         0, 0U);
#line 1199
    c->packets[0] = c->packets[0] + 1U;
#line 1200
    c->bytes[0] = (c->bytes[0] + (header_size + (unsigned int )len)) + 1U;
#line 1202
    if (c->bit_offset >= c->bm_bits) {
#line 1203
      len = 0;
    } else {

    }
  } else {
#line 1209
    p___0 = (unsigned long *)sock->sbuf + (unsigned long )header_size;
#line 1211
    data_size = 4096U - header_size;
#line 1212
    __min1 = (unsigned long )(data_size / 8U);
#line 1212
    __min2 = c->bm_words - c->word_offset;
#line 1212
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 1214
    len = (int )((unsigned int )num_words * 8U);
#line 1215
    if (len != 0) {
#line 1216
      drbd_bm_get_lel(mdev, c->word_offset, num_words, p___0);
    } else {

    }
#line 1217
    err = __send_command(mdev->tconn, mdev->vnr, sock, P_BITMAP, (unsigned int )len,
                         0, 0U);
#line 1218
    c->word_offset = c->word_offset + num_words;
#line 1219
    c->bit_offset = c->word_offset * 64UL;
#line 1221
    c->packets[1] = c->packets[1] + 1U;
#line 1222
    c->bytes[1] = c->bytes[1] + (header_size + (unsigned int )len);
#line 1224
    if (c->bit_offset > c->bm_bits) {
#line 1225
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 1227
  if (err == 0) {
#line 1228
    if (len == 0) {
#line 1229
      INFO_bm_xfer_stats(mdev, "send", c);
#line 1230
      return (0);
    } else {
#line 1232
      return (1);
    }
  } else {

  }
#line 1234
  return (-5);
}
}
#line 1238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  int err ;
  bool _bool ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;

  {
#line 1243
  _bool = (unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0);
#line 1243
  if (! _bool) {
#line 1243
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"mdev->bitmap", "_drbd_send_bitmap");
  } else {

  }
#line 1243
  if (_bool) {
#line 1243
    tmp = 0;
  } else {
#line 1243
    tmp = 1;
  }
#line 1243
  if (tmp) {
#line 1244
    return (0);
  } else {

  }
#line 1246
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1246
  if (tmp___2 != 0) {
#line 1247
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 1247
    if (tmp___1 != 0) {
#line 1248
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 1249
      drbd_bm_set_all(mdev);
#line 1250
      tmp___0 = drbd_bm_write(mdev);
#line 1250
      if (tmp___0 != 0) {
#line 1254
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 1256
        drbd_md_clear_flag(mdev, 8);
#line 1257
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 1260
    put_ldev(mdev);
  } else {

  }
#line 1263
  tmp___3 = drbd_bm_bits(mdev);
#line 1263
  tmp___4 = drbd_bm_words(mdev);
#line 1263
  __constr_expr_0.bm_bits = tmp___3;
#line 1263
  __constr_expr_0.bm_words = tmp___4;
#line 1263
  __constr_expr_0.bit_offset = 0UL;
#line 1263
  __constr_expr_0.word_offset = 0UL;
#line 1263
  __constr_expr_0.packets[0] = 0U;
#line 1263
  __constr_expr_0.packets[1] = 0U;
#line 1263
  __constr_expr_0.bytes[0] = 0U;
#line 1263
  __constr_expr_0.bytes[1] = 0U;
#line 1263
  c = __constr_expr_0;
  ldv_52637: 
#line 1269
  err = send_bitmap_rle_or_plain(mdev, & c);
#line 1270
  if (err > 0) {
#line 1271
    goto ldv_52637;
  } else {

  }

#line 1272
  return (err == 0);
}
}
#line 1275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct drbd_socket *sock ;
  int err ;
  int tmp ;

  {
#line 1277
  sock = & (mdev->tconn)->data;
#line 1278
  err = -1;
#line 1280
  mutex_lock_nested(& sock->mutex, 0U);
#line 1281
  if ((unsigned long )sock->socket != (unsigned long )((struct socket *)0)) {
#line 1282
    tmp = _drbd_send_bitmap(mdev);
#line 1282
    err = tmp == 0;
  } else {

  }
#line 1283
  mutex_unlock(& sock->mutex);
#line 1284
  return (err);
}
}
#line 1287 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_send_b_ack(struct drbd_tconn *tconn , u32 barrier_nr , u32 set_size ) 
{ 
  struct drbd_socket *sock ;
  struct p_barrier_ack *p ;
  void *tmp ;
  __u32 tmp___0 ;

  {
#line 1292
  if ((unsigned int )tconn->cstate <= 8U) {
#line 1293
    return;
  } else {

  }
#line 1295
  sock = & tconn->meta;
#line 1296
  tmp = conn_prepare_command(tconn, sock);
#line 1296
  p = (struct p_barrier_ack *)tmp;
#line 1297
  if ((unsigned long )p == (unsigned long )((struct p_barrier_ack *)0)) {
#line 1298
    return;
  } else {

  }
#line 1299
  p->barrier = barrier_nr;
#line 1300
  tmp___0 = __fswab32(set_size);
#line 1300
  p->set_size = tmp___0;
#line 1301
  conn_send_command(tconn, sock, P_BARRIER_ACK, 8U, 0, 0U);
#line 1302
  return;
}
}
#line 1312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packet cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  struct drbd_socket *sock ;
  struct p_block_ack *p ;
  void *tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 1318
  if ((int )mdev->state.ldv_50103.conn <= 9) {
#line 1319
    return (-5);
  } else {

  }
#line 1321
  sock = & (mdev->tconn)->meta;
#line 1322
  tmp = drbd_prepare_command(mdev, sock);
#line 1322
  p = (struct p_block_ack *)tmp;
#line 1323
  if ((unsigned long )p == (unsigned long )((struct p_block_ack *)0)) {
#line 1324
    return (-5);
  } else {

  }
#line 1325
  p->sector = sector;
#line 1326
  p->block_id = block_id;
#line 1327
  p->blksize = blksize;
#line 1328
  tmp___0 = atomic_add_return(1, & mdev->packet_seq);
#line 1328
  tmp___1 = __fswab32((__u32 )tmp___0);
#line 1328
  p->seq_num = tmp___1;
#line 1329
  tmp___2 = drbd_send_command(mdev, sock, cmd, 24U, 0, 0U);
#line 1329
  return (tmp___2);
}
}
#line 1335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packet cmd , struct p_data *dp ,
                      int data_size ) 
{ 
  unsigned int tmp ;
  __u32 tmp___0 ;

  {
#line 1338
  if ((unsigned long )(mdev->tconn)->peer_integrity_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1339
    tmp = crypto_hash_digestsize((mdev->tconn)->peer_integrity_tfm);
#line 1339
    data_size = (int )((unsigned int )data_size - tmp);
  } else {

  }
#line 1340
  tmp___0 = __fswab32((__u32 )data_size);
#line 1340
  _drbd_send_ack(mdev, cmd, dp->sector, tmp___0, dp->block_id);
#line 1342
  return;
}
}
#line 1344 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packet cmd , struct p_block_req *rp ) 
{ 


  {
#line 1347
  _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 1348
  return;
}
}
#line 1356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packet cmd , struct drbd_peer_request *peer_req ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 1359
  tmp = __fswab32(peer_req->i.size);
#line 1359
  tmp___0 = __fswab64((__u64 )peer_req->i.sector);
#line 1359
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, peer_req->ldv_50490.block_id);
#line 1359
  return (tmp___1);
}
}
#line 1367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packet cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 1370
  tmp = __fswab64(block_id);
#line 1370
  tmp___0 = __fswab32((__u32 )blksize);
#line 1370
  tmp___1 = __fswab64((__u64 )sector);
#line 1370
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 1370
  return (tmp___2);
}
}
#line 1376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  struct drbd_socket *sock ;
  struct p_block_req *p ;
  void *tmp ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 1382
  sock = & (mdev->tconn)->data;
#line 1383
  tmp = drbd_prepare_command(mdev, sock);
#line 1383
  p = (struct p_block_req *)tmp;
#line 1384
  if ((unsigned long )p == (unsigned long )((struct p_block_req *)0)) {
#line 1385
    return (-5);
  } else {

  }
#line 1386
  tmp___0 = __fswab64((__u64 )sector);
#line 1386
  p->sector = tmp___0;
#line 1387
  p->block_id = block_id;
#line 1388
  tmp___1 = __fswab32((__u32 )size);
#line 1388
  p->blksize = tmp___1;
#line 1389
  tmp___2 = drbd_send_command(mdev, sock, (enum drbd_packet )cmd, 24U, 0, 0U);
#line 1389
  return (tmp___2);
}
}
#line 1392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packet cmd ) 
{ 
  struct drbd_socket *sock ;
  struct p_block_req *p ;
  void *tmp ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 1400
  sock = & (mdev->tconn)->data;
#line 1401
  tmp = drbd_prepare_command(mdev, sock);
#line 1401
  p = (struct p_block_req *)tmp;
#line 1402
  if ((unsigned long )p == (unsigned long )((struct p_block_req *)0)) {
#line 1403
    return (-5);
  } else {

  }
#line 1404
  tmp___0 = __fswab64((__u64 )sector);
#line 1404
  p->sector = tmp___0;
#line 1405
  p->block_id = 0xffffffffffffffffULL;
#line 1406
  tmp___1 = __fswab32((__u32 )size);
#line 1406
  p->blksize = tmp___1;
#line 1407
  tmp___2 = drbd_send_command(mdev, sock, cmd, 24U, digest, (unsigned int )digest_size);
#line 1407
  return (tmp___2);
}
}
#line 1411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_socket *sock ;
  struct p_block_req *p ;
  void *tmp ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 1416
  sock = & (mdev->tconn)->data;
#line 1417
  tmp = drbd_prepare_command(mdev, sock);
#line 1417
  p = (struct p_block_req *)tmp;
#line 1418
  if ((unsigned long )p == (unsigned long )((struct p_block_req *)0)) {
#line 1419
    return (-5);
  } else {

  }
#line 1420
  tmp___0 = __fswab64((__u64 )sector);
#line 1420
  p->sector = tmp___0;
#line 1421
  p->block_id = 0xffffffffffffffffULL;
#line 1422
  tmp___1 = __fswab32((__u32 )size);
#line 1422
  p->blksize = tmp___1;
#line 1423
  tmp___2 = drbd_send_command(mdev, sock, P_OV_REQUEST, 24U, 0, 0U);
#line 1423
  return (tmp___2);
}
}
#line 1430 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_tconn *tconn , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 1435
  if ((unsigned long )tconn->meta.socket == (unsigned long )sock || (unsigned long )tconn->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 1435
    tmp___0 = 1;
  } else {
#line 1435
    tmp = get_t_state(& tconn->asender);
#line 1435
    if ((unsigned int )tmp != 1U) {
#line 1435
      tmp___0 = 1;
    } else
#line 1435
    if ((unsigned int )tconn->cstate <= 8U) {
#line 1435
      tmp___0 = 1;
    } else {
#line 1435
      tmp___0 = 0;
    }
  }
#line 1435
  drop_it = tmp___0;
#line 1440
  if (drop_it != 0) {
#line 1441
    return (1);
  } else {

  }
#line 1443
  tconn->ko_count = tconn->ko_count - 1U;
#line 1443
  drop_it = tconn->ko_count == 0U;
#line 1444
  if (drop_it == 0) {
#line 1445
    tmp___1 = get_current();
#line 1445
    tmp___2 = get_current();
#line 1445
    printk("\vd-con %s: [%s/%d] sock_sendmsg time expired, ko = %u\n", tconn->name,
           (char *)(& tmp___2->comm), tmp___1->pid, tconn->ko_count);
#line 1447
    request_ping(tconn);
  } else {

  }
#line 1450
  return (drop_it);
}
}
#line 1453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_update_congested(struct drbd_tconn *tconn ) 
{ 
  struct sock *sk ;

  {
#line 1455
  sk = (tconn->data.socket)->sk;
#line 1456
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 1457
    set_bit(0U, (unsigned long volatile   *)(& tconn->flags));
  } else {

  }
#line 1458
  return;
}
}
#line 1481 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  struct socket *socket ;
  void *addr ;
  int err ;
  void *tmp ;

  {
#line 1488
  socket = (mdev->tconn)->data.socket;
#line 1489
  tmp = kmap(page);
#line 1489
  addr = tmp + (unsigned long )offset;
#line 1490
  err = drbd_send_all(mdev->tconn, socket, addr, size, msg_flags);
#line 1491
  kunmap(page);
#line 1492
  if (err == 0) {
#line 1493
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 1494
  return (err);
}
}
#line 1497 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  struct socket *socket ;
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int len ;
  int err ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  int sent ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;

  {
#line 1500
  socket = (mdev->tconn)->data.socket;
#line 1501
  tmp = current_thread_info();
#line 1501
  oldfs = tmp->addr_limit;
#line 1502
  len = (int )size;
#line 1503
  err = -5;
#line 1511
  if ((int )disable_sendpage) {
#line 1512
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 1512
    return (tmp___0);
  } else {
#line 1511
    tmp___1 = page_count(page);
#line 1511
    if (tmp___1 <= 0) {
#line 1512
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 1512
      return (tmp___0);
    } else {
#line 1511
      tmp___2 = PageSlab((struct page  const  *)page);
#line 1511
      if (tmp___2 != 0) {
#line 1512
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 1512
        return (tmp___0);
      } else {

      }
    }
  }
#line 1514
  msg_flags = msg_flags | 16384U;
#line 1515
  drbd_update_congested(mdev->tconn);
#line 1516
  tmp___3 = current_thread_info();
#line 1516
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 1516
  tmp___3->addr_limit = __constr_expr_0;
  ldv_52744: 
#line 1520
  tmp___4 = (*((socket->ops)->sendpage))(socket, page, offset, (size_t )len, (int )msg_flags);
#line 1520
  sent = (int )tmp___4;
#line 1521
  if (sent <= 0) {
#line 1522
    if (sent == -11) {
#line 1523
      tmp___5 = we_should_drop_the_connection(mdev->tconn, socket);
#line 1523
      if (tmp___5 != 0) {
#line 1524
        goto ldv_52741;
      } else {

      }
#line 1525
      goto ldv_52742;
    } else {

    }
#line 1527
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 1529
    if (sent < 0) {
#line 1530
      err = sent;
    } else {

    }
#line 1531
    goto ldv_52741;
  } else {

  }
#line 1533
  len = len - sent;
#line 1534
  offset = offset + sent;
  ldv_52742: ;
#line 1535
  if (len > 0) {
#line 1536
    goto ldv_52744;
  } else {

  }
  ldv_52741: 
#line 1536
  tmp___6 = current_thread_info();
#line 1536
  tmp___6->addr_limit = oldfs;
#line 1537
  clear_bit(0, (unsigned long volatile   *)(& (mdev->tconn)->flags));
#line 1539
  if (len == 0) {
#line 1540
    err = 0;
#line 1541
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 1543
  return (err);
}
}
#line 1546 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int err ;

  {
#line 1551
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1551
  i = (int )bio->bi_idx;
#line 1551
  goto ldv_52753;
  ldv_52752: 
#line 1554
  err = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 1557
  if (err != 0) {
#line 1558
    return (err);
  } else {

  }
#line 1551
  bvec = bvec + 1;
#line 1551
  i = i + 1;
  ldv_52753: ;
#line 1551
  if ((int )bio->bi_vcnt > i) {
#line 1552
    goto ldv_52752;
  } else {

  }

#line 1560
  return (0);
}
}
#line 1563 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int err ;

  {
#line 1568
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1568
  i = (int )bio->bi_idx;
#line 1568
  goto ldv_52763;
  ldv_52762: 
#line 1571
  err = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 1574
  if (err != 0) {
#line 1575
    return (err);
  } else {

  }
#line 1568
  bvec = bvec + 1;
#line 1568
  i = i + 1;
  ldv_52763: ;
#line 1568
  if ((int )bio->bi_vcnt > i) {
#line 1569
    goto ldv_52762;
  } else {

  }

#line 1577
  return (0);
}
}
#line 1580 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_peer_request *peer_req ) 
{ 
  struct page *page ;
  unsigned int len ;
  int err ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  struct page *tmp___0 ;

  {
#line 1583
  page = peer_req->pages;
#line 1584
  len = peer_req->i.size;
#line 1588
  goto ldv_52778;
  ldv_52777: 
#line 1589
  __min1 = len;
#line 1589
  __min2 = 4096U;
#line 1589
  l = __min1 < __min2 ? __min1 : __min2;
#line 1591
  tmp = page_chain_next(page);
#line 1591
  err = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 1593
  if (err != 0) {
#line 1594
    return (err);
  } else {

  }
#line 1595
  len = len - l;
#line 1588
  page = page_chain_next(page);
  ldv_52778: ;
#line 1588
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1588
    tmp___0 = page_chain_next(page);
#line 1588
    __builtin_prefetch((void const   *)tmp___0);
#line 1588
    if (1 != 0) {
#line 1589
      goto ldv_52777;
    } else {
#line 1591
      goto ldv_52779;
    }
  } else {

  }
  ldv_52779: ;
#line 1597
  return (0);
}
}
#line 1600 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static u32 bio_flags_to_wire(struct drbd_conf *mdev , unsigned long bi_rw ) 
{ 


  {
#line 1602
  if ((mdev->tconn)->agreed_pro_version > 94) {
#line 1603
    return ((u32 )(((((bi_rw & 16UL) != 0UL ? 2 : 0) | ((bi_rw & 2048UL) != 0UL ? 16 : 0)) | ((bi_rw & 4096UL) != 0UL ? 32 : 0)) | ((bi_rw & 128UL) != 0UL ? 64 : 0)));
  } else {
#line 1608
    return ((bi_rw & 16UL) != 0UL ? 2U : 0U);
  }
}
}
#line 1614 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  struct drbd_socket *sock ;
  struct p_data *p ;
  unsigned int dp_flags ;
  int dgs ;
  int err ;
  void *tmp ;
  unsigned int tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  unsigned char digest[64U] ;
  int tmp___5 ;

  {
#line 1618
  dp_flags = 0U;
#line 1622
  sock = & (mdev->tconn)->data;
#line 1623
  tmp = drbd_prepare_command(mdev, sock);
#line 1623
  p = (struct p_data *)tmp;
#line 1624
  if ((unsigned long )(mdev->tconn)->integrity_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1624
    tmp___0 = crypto_hash_digestsize((mdev->tconn)->integrity_tfm);
#line 1624
    dgs = (int )tmp___0;
  } else {
#line 1624
    dgs = 0;
  }
#line 1626
  if ((unsigned long )p == (unsigned long )((struct p_data *)0)) {
#line 1627
    return (-5);
  } else {

  }
#line 1628
  tmp___1 = __fswab64((__u64 )req->i.sector);
#line 1628
  p->sector = tmp___1;
#line 1629
  p->block_id = (u64 )req;
#line 1630
  tmp___2 = atomic_add_return(1, & mdev->packet_seq);
#line 1630
  tmp___3 = __fswab32((__u32 )tmp___2);
#line 1630
  p->seq_num = tmp___3;
#line 1631
  dp_flags = bio_flags_to_wire(mdev, (req->master_bio)->bi_rw);
#line 1632
  if ((int )mdev->state.ldv_50103.conn > 15 && (int )mdev->state.ldv_50103.conn <= 21) {
#line 1634
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 1635
  if ((mdev->tconn)->agreed_pro_version > 99) {
#line 1636
    if (((unsigned long )req->rq_state & 32768UL) != 0UL) {
#line 1637
      dp_flags = dp_flags | 128U;
    } else {

    }
#line 1638
    if (((unsigned long )req->rq_state & 65536UL) != 0UL) {
#line 1639
      dp_flags = dp_flags | 256U;
    } else {

    }
  } else {

  }
#line 1641
  tmp___4 = __fswab32(dp_flags);
#line 1641
  p->dp_flags = tmp___4;
#line 1642
  if (dgs != 0) {
#line 1643
    drbd_csum_bio(mdev, (mdev->tconn)->integrity_tfm, req->master_bio, (void *)p + 1U);
  } else {

  }
#line 1644
  err = __send_command(mdev->tconn, mdev->vnr, sock, P_DATA, (unsigned int )dgs + 24U,
                       0, req->i.size);
#line 1645
  if (err == 0) {
#line 1657
    if (((unsigned long )req->rq_state & 98304UL) == 0UL || dgs != 0) {
#line 1658
      err = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 1660
      err = _drbd_send_zc_bio(mdev, req->master_bio);
    }
#line 1663
    if (dgs > 0 && dgs <= 64) {
#line 1667
      drbd_csum_bio(mdev, (mdev->tconn)->integrity_tfm, req->master_bio, (void *)(& digest));
#line 1668
      tmp___5 = memcmp((void const   *)p + 1U, (void const   *)(& digest), (size_t )dgs);
#line 1668
      if (tmp___5 != 0) {
#line 1669
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest mismatch, buffer modified by upper layers during write: %llus +%u\n",
                 (unsigned long long )req->i.sector, req->i.size);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1677
  mutex_unlock(& sock->mutex);
#line 1679
  return (err);
}
}
#line 1686 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packet cmd , struct drbd_peer_request *peer_req ) 
{ 
  struct drbd_socket *sock ;
  struct p_data *p ;
  int err ;
  int dgs ;
  void *tmp ;
  unsigned int tmp___0 ;
  __u64 tmp___1 ;

  {
#line 1694
  sock = & (mdev->tconn)->data;
#line 1695
  tmp = drbd_prepare_command(mdev, sock);
#line 1695
  p = (struct p_data *)tmp;
#line 1697
  if ((unsigned long )(mdev->tconn)->integrity_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1697
    tmp___0 = crypto_hash_digestsize((mdev->tconn)->integrity_tfm);
#line 1697
    dgs = (int )tmp___0;
  } else {
#line 1697
    dgs = 0;
  }
#line 1699
  if ((unsigned long )p == (unsigned long )((struct p_data *)0)) {
#line 1700
    return (-5);
  } else {

  }
#line 1701
  tmp___1 = __fswab64((__u64 )peer_req->i.sector);
#line 1701
  p->sector = tmp___1;
#line 1702
  p->block_id = peer_req->ldv_50490.block_id;
#line 1703
  p->seq_num = 0U;
#line 1704
  p->dp_flags = 0U;
#line 1705
  if (dgs != 0) {
#line 1706
    drbd_csum_ee(mdev, (mdev->tconn)->integrity_tfm, peer_req, (void *)p + 1U);
  } else {

  }
#line 1707
  err = __send_command(mdev->tconn, mdev->vnr, sock, cmd, (unsigned int )dgs + 24U,
                       0, peer_req->i.size);
#line 1708
  if (err == 0) {
#line 1709
    err = _drbd_send_zc_ee(mdev, peer_req);
  } else {

  }
#line 1710
  mutex_unlock(& sock->mutex);
#line 1712
  return (err);
}
}
#line 1715 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_out_of_sync(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  struct drbd_socket *sock ;
  struct p_block_desc *p ;
  void *tmp ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 1720
  sock = & (mdev->tconn)->data;
#line 1721
  tmp = drbd_prepare_command(mdev, sock);
#line 1721
  p = (struct p_block_desc *)tmp;
#line 1722
  if ((unsigned long )p == (unsigned long )((struct p_block_desc *)0)) {
#line 1723
    return (-5);
  } else {

  }
#line 1724
  tmp___0 = __fswab64((__u64 )req->i.sector);
#line 1724
  p->sector = tmp___0;
#line 1725
  tmp___1 = __fswab32(req->i.size);
#line 1725
  p->blksize = tmp___1;
#line 1726
  tmp___2 = drbd_send_command(mdev, sock, P_OUT_OF_SYNC, 16U, 0, 0U);
#line 1726
  return (tmp___2);
}
}
#line 1745 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_tconn *tconn , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1750
  sent = 0;
#line 1752
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 1753
    return (-53);
  } else {

  }
#line 1757
  iov.iov_base = buf;
#line 1758
  iov.iov_len = size;
#line 1760
  msg.msg_name = 0;
#line 1761
  msg.msg_namelen = 0;
#line 1762
  msg.msg_control = 0;
#line 1763
  msg.msg_controllen = 0UL;
#line 1764
  msg.msg_flags = msg_flags | 16384U;
#line 1766
  if ((unsigned long )tconn->data.socket == (unsigned long )sock) {
#line 1767
    rcu_read_lock();
#line 1768
    _________p1 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 1768
    tmp = debug_lockdep_rcu_enabled();
#line 1768
    if (tmp != 0 && ! __warned) {
#line 1768
      tmp___0 = rcu_read_lock_held();
#line 1768
      if (tmp___0 == 0 && 1) {
#line 1768
        __warned = 1;
#line 1768
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
                               1768, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 1768
    tconn->ko_count = _________p1->ko_count;
#line 1769
    rcu_read_unlock();
#line 1770
    drbd_update_congested(tconn);
  } else {

  }
  ldv_52825: 
#line 1782
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 1783
  if (rv == -11) {
#line 1784
    tmp___1 = we_should_drop_the_connection(tconn, sock);
#line 1784
    if (tmp___1 != 0) {
#line 1785
      goto ldv_52823;
    } else {
#line 1787
      goto ldv_52824;
    }
  } else {

  }
#line 1789
  if (rv == -4) {
#line 1790
    tmp___2 = get_current();
#line 1790
    flush_signals(tmp___2);
#line 1791
    rv = 0;
  } else {

  }
#line 1793
  if (rv < 0) {
#line 1794
    goto ldv_52823;
  } else {

  }
#line 1795
  sent = sent + rv;
#line 1796
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 1797
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_52824: ;
#line 1798
  if ((size_t )sent < size) {
#line 1799
    goto ldv_52825;
  } else {

  }
  ldv_52823: ;
#line 1800
  if ((unsigned long )tconn->data.socket == (unsigned long )sock) {
#line 1801
    clear_bit(0, (unsigned long volatile   *)(& tconn->flags));
  } else {

  }
#line 1803
  if (rv <= 0) {
#line 1804
    if (rv != -11) {
#line 1805
      printk("\vd-con %s: %s_sendmsg returned %d\n", tconn->name, (unsigned long )tconn->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
             rv);
#line 1808
      val.i = 0U;
#line 1808
      val.ldv_40604.conn = 4U;
#line 1808
      mask.i = 0U;
#line 1808
      mask.ldv_40604.conn = 31U;
#line 1808
      conn_request_state(tconn, mask, val, CS_HARD);
    } else {
#line 1810
      val___0.i = 0U;
#line 1810
      val___0.ldv_40604.conn = 3U;
#line 1810
      mask___0.i = 0U;
#line 1810
      mask___0.ldv_40604.conn = 31U;
#line 1810
      conn_request_state(tconn, mask___0, val___0, CS_HARD);
    }
  } else {

  }
#line 1813
  return (sent);
}
}
#line 1821 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_all(struct drbd_tconn *tconn , struct socket *sock , void *buffer ,
                  size_t size , unsigned int msg_flags ) 
{ 
  int err ;

  {
#line 1826
  err = drbd_send(tconn, sock, buffer, size, msg_flags);
#line 1827
  if (err < 0) {
#line 1828
    return (err);
  } else {

  }
#line 1829
  if ((size_t )err != size) {
#line 1830
    return (-5);
  } else {

  }
#line 1831
  return (0);
}
}
#line 1834 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 1836
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 1838
  rv = 0;
#line 1840
  mutex_lock_nested(& drbd_main_mutex, 0U);
#line 1841
  tmp = spinlock_check(& (mdev->tconn)->req_lock);
#line 1841
  flags = _raw_spin_lock_irqsave(tmp);
#line 1845
  if ((unsigned int )*((unsigned char *)mdev + 748UL) != 1U) {
#line 1846
    if ((mode & 2U) != 0U) {
#line 1847
      rv = -30;
    } else
#line 1848
    if (! allow_oos) {
#line 1849
      rv = -124;
    } else {

    }
  } else {

  }
#line 1852
  if (rv == 0) {
#line 1853
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 1854
  spin_unlock_irqrestore(& (mdev->tconn)->req_lock, flags);
#line 1855
  mutex_unlock(& drbd_main_mutex);
#line 1857
  return (rv);
}
}
#line 1860 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1862
  mdev = (struct drbd_conf *)gd->private_data;
#line 1863
  mutex_lock_nested(& drbd_main_mutex, 0U);
#line 1864
  mdev->open_cnt = mdev->open_cnt - 1;
#line 1865
  mutex_unlock(& drbd_main_mutex);
#line 1866
  return (0);
}
}
#line 1869 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  union drbd_dev_state __constr_expr_0 ;

  {
#line 1873
  __constr_expr_0.ldv_50103.role = 2U;
#line 1873
  __constr_expr_0.ldv_50103.peer = 0U;
#line 1873
  __constr_expr_0.ldv_50103.conn = 0U;
#line 1873
  __constr_expr_0.ldv_50103.disk = 0U;
#line 1873
  __constr_expr_0.ldv_50103.pdsk = 6U;
#line 1873
  __constr_expr_0.ldv_50103._unused = (unsigned char)0;
#line 1873
  __constr_expr_0.ldv_50103.aftr_isp = (unsigned char)0;
#line 1873
  __constr_expr_0.ldv_50103.peer_isp = (unsigned char)0;
#line 1873
  __constr_expr_0.ldv_50103.user_isp = (unsigned char)0;
#line 1873
  __constr_expr_0.ldv_50103._pad = (unsigned short)0;
#line 1873
  mdev->state = __constr_expr_0;
#line 1874
  return;
}
}
#line 1882 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;

  {
#line 1887
  drbd_set_defaults(mdev);
#line 1889
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 1890
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 1891
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 1892
  atomic_set(& mdev->unacked_cnt, 0);
#line 1893
  atomic_set(& mdev->local_cnt, 0);
#line 1894
  atomic_set(& mdev->pp_in_use_by_net, 0);
#line 1895
  atomic_set(& mdev->rs_sect_in, 0);
#line 1896
  atomic_set(& mdev->rs_sect_ev, 0);
#line 1897
  atomic_set(& mdev->ap_in_flight, 0);
#line 1898
  atomic_set(& mdev->md_io_in_use, 0);
#line 1900
  __mutex_init(& mdev->own_state_mutex, "&mdev->own_state_mutex", & __key);
#line 1901
  mdev->state_mutex = & mdev->own_state_mutex;
#line 1903
  spinlock_check(& mdev->al_lock);
#line 1903
  __raw_spin_lock_init(& mdev->al_lock.ldv_6135.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___0);
#line 1904
  spinlock_check(& mdev->peer_seq_lock);
#line 1904
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_6135.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___1);
#line 1906
  INIT_LIST_HEAD(& mdev->active_ee);
#line 1907
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 1908
  INIT_LIST_HEAD(& mdev->done_ee);
#line 1909
  INIT_LIST_HEAD(& mdev->read_ee);
#line 1910
  INIT_LIST_HEAD(& mdev->net_ee);
#line 1911
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 1912
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 1913
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 1914
  INIT_LIST_HEAD(& mdev->go_diskless.list);
#line 1915
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 1916
  INIT_LIST_HEAD(& mdev->start_resync_work.list);
#line 1917
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 1919
  mdev->resync_work.cb = & w_resync_timer;
#line 1920
  mdev->unplug_work.cb = & w_send_write_hint;
#line 1921
  mdev->go_diskless.cb = & w_go_diskless;
#line 1922
  mdev->md_sync_work.cb = & w_md_sync;
#line 1923
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 1924
  mdev->start_resync_work.cb = & w_start_resync;
#line 1926
  mdev->resync_work.ldv_50388.mdev = mdev;
#line 1927
  mdev->unplug_work.ldv_50388.mdev = mdev;
#line 1928
  mdev->go_diskless.ldv_50388.mdev = mdev;
#line 1929
  mdev->md_sync_work.ldv_50388.mdev = mdev;
#line 1930
  mdev->bm_io_work.w.ldv_50388.mdev = mdev;
#line 1931
  mdev->start_resync_work.ldv_50388.mdev = mdev;
#line 1933
  init_timer_key(& mdev->resync_timer, 0U, "(&mdev->resync_timer)", & __key___2);
#line 1934
  init_timer_key(& mdev->md_sync_timer, 0U, "(&mdev->md_sync_timer)", & __key___3);
#line 1935
  init_timer_key(& mdev->start_resync_timer, 0U, "(&mdev->start_resync_timer)", & __key___4);
#line 1936
  init_timer_key(& mdev->request_timer, 0U, "(&mdev->request_timer)", & __key___5);
#line 1937
  mdev->resync_timer.function = & resync_timer_fn;
#line 1938
  mdev->resync_timer.data = (unsigned long )mdev;
#line 1939
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 1940
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 1941
  mdev->start_resync_timer.function = & start_resync_timer_fn;
#line 1942
  mdev->start_resync_timer.data = (unsigned long )mdev;
#line 1943
  mdev->request_timer.function = & request_timer_fn;
#line 1944
  mdev->request_timer.data = (unsigned long )mdev;
#line 1946
  __init_waitqueue_head(& mdev->misc_wait, "&mdev->misc_wait", & __key___6);
#line 1947
  __init_waitqueue_head(& mdev->state_wait, "&mdev->state_wait", & __key___7);
#line 1948
  __init_waitqueue_head(& mdev->ee_wait, "&mdev->ee_wait", & __key___8);
#line 1949
  __init_waitqueue_head(& mdev->al_wait, "&mdev->al_wait", & __key___9);
#line 1950
  __init_waitqueue_head(& mdev->seq_wait, "&mdev->seq_wait", & __key___10);
#line 1952
  mdev->resync_wenr = 4294967295U;
#line 1953
  mdev->peer_max_bio_size = 4096U;
#line 1954
  mdev->local_max_bio_size = 4096U;
#line 1955
  return;
}
}
#line 1957 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int i ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  sector_t tmp___4 ;
  unsigned long tmp___5 ;
  unsigned long tmp___6 ;
  unsigned long tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;

  {
#line 1960
  if ((unsigned int )(mdev->tconn)->receiver.t_state != 0U) {
#line 1961
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )(mdev->tconn)->receiver.t_state);
  } else {

  }
#line 1964
  tmp___7 = 0UL;
#line 1964
  mdev->rs_failed = tmp___7;
#line 1964
  tmp___6 = tmp___7;
#line 1964
  mdev->rs_total = tmp___6;
#line 1964
  tmp___5 = tmp___6;
#line 1964
  mdev->rs_start = tmp___5;
#line 1964
  tmp___4 = tmp___5;
#line 1964
  mdev->p_size = tmp___4;
#line 1964
  tmp___3 = (unsigned int )tmp___4;
#line 1964
  mdev->writ_cnt = tmp___3;
#line 1964
  tmp___2 = tmp___3;
#line 1964
  mdev->send_cnt = tmp___2;
#line 1964
  tmp___1 = tmp___2;
#line 1964
  mdev->recv_cnt = tmp___1;
#line 1964
  tmp___0 = tmp___1;
#line 1964
  mdev->read_cnt = tmp___0;
#line 1964
  tmp = tmp___0;
#line 1964
  mdev->bm_writ_cnt = tmp;
#line 1964
  mdev->al_writ_cnt = tmp;
#line 1974
  mdev->rs_last_events = 0;
#line 1975
  mdev->rs_last_sect_ev = 0;
#line 1976
  i = 0;
#line 1976
  goto ldv_52881;
  ldv_52880: 
#line 1977
  mdev->rs_mark_left[i] = 0UL;
#line 1978
  mdev->rs_mark_time[i] = 0UL;
#line 1976
  i = i + 1;
  ldv_52881: ;
#line 1976
  if (i <= 7) {
#line 1977
    goto ldv_52880;
  } else {

  }

#line 1980
  if ((unsigned long )(mdev->tconn)->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1980
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->tconn->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1980);
  } else {

  }
#line 1982
  drbd_set_my_capacity(mdev, 0UL);
#line 1983
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 1985
    drbd_bm_resize(mdev, 0UL, 1);
#line 1986
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 1989
  drbd_free_bc(mdev->ldev);
#line 1990
  mdev->ldev = 0;
#line 1992
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 1994
  tmp___8 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 1994
  if (tmp___8 == 0) {
#line 1994
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1994);
  } else {

  }
#line 1995
  tmp___9 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 1995
  if (tmp___9 == 0) {
#line 1995
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1995);
  } else {

  }
#line 1996
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 1996
  if (tmp___10 == 0) {
#line 1996
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1996);
  } else {

  }
#line 1997
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 1997
  if (tmp___11 == 0) {
#line 1997
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1997);
  } else {

  }
#line 1998
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 1998
  if (tmp___12 == 0) {
#line 1998
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1998);
  } else {

  }
#line 1999
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 1999
  if (tmp___13 == 0) {
#line 1999
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1999);
  } else {

  }
#line 2000
  tmp___14 = list_empty((struct list_head  const  *)(& (mdev->tconn)->sender_work.q));
#line 2000
  if (tmp___14 == 0) {
#line 2000
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->tconn->sender_work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2000);
  } else {

  }
#line 2001
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 2001
  if (tmp___15 == 0) {
#line 2001
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2001);
  } else {

  }
#line 2002
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2002
  if (tmp___16 == 0) {
#line 2002
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2002);
  } else {

  }
#line 2003
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->go_diskless.list));
#line 2003
  if (tmp___17 == 0) {
#line 2003
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->go_diskless.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2003);
  } else {

  }
#line 2005
  drbd_set_defaults(mdev);
#line 2006
  return;
}
}
#line 2009 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 2013
  goto ldv_52888;
  ldv_52887: 
#line 2014
  page = drbd_pp_pool;
#line 2015
  drbd_pp_pool = (struct page *)page->ldv_16348.private;
#line 2016
  __free_pages(page, 0U);
#line 2017
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_52888: ;
#line 2013
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 2014
    goto ldv_52887;
  } else {

  }

#line 2022
  if ((unsigned long )drbd_md_io_bio_set != (unsigned long )((struct bio_set *)0)) {
#line 2023
    bioset_free(drbd_md_io_bio_set);
  } else {

  }
#line 2024
  if ((unsigned long )drbd_md_io_page_pool != (unsigned long )((mempool_t *)0)) {
#line 2025
    mempool_destroy(drbd_md_io_page_pool);
  } else {

  }
#line 2026
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 2027
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 2028
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 2029
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 2030
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2031
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 2032
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2033
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 2034
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2035
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 2036
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2037
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 2039
  drbd_md_io_bio_set = 0;
#line 2040
  drbd_md_io_page_pool = 0;
#line 2041
  drbd_ee_mempool = 0;
#line 2042
  drbd_request_mempool = 0;
#line 2043
  drbd_ee_cache = 0;
#line 2044
  drbd_request_cache = 0;
#line 2045
  drbd_bm_ext_cache = 0;
#line 2046
  drbd_al_ext_cache = 0;
#line 2048
  return;
}
}
#line 2051 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 2054
  number = (int const   )(minor_count * 256U);
#line 2058
  drbd_request_mempool = 0;
#line 2059
  drbd_ee_cache = 0;
#line 2060
  drbd_request_cache = 0;
#line 2061
  drbd_bm_ext_cache = 0;
#line 2062
  drbd_al_ext_cache = 0;
#line 2063
  drbd_pp_pool = 0;
#line 2064
  drbd_md_io_page_pool = 0;
#line 2065
  drbd_md_io_bio_set = 0;
#line 2068
  drbd_request_cache = kmem_cache_create("drbd_req", 152UL, 0UL, 0UL, 0);
#line 2070
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2071
    goto Enomem;
  } else {

  }
#line 2073
  drbd_ee_cache = kmem_cache_create("drbd_ee", 128UL, 0UL, 0UL, 0);
#line 2075
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2076
    goto Enomem;
  } else {

  }
#line 2078
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 2080
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2081
    goto Enomem;
  } else {

  }
#line 2083
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 2085
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2086
    goto Enomem;
  } else {

  }
#line 2089
  drbd_md_io_bio_set = bioset_create(128U, 0U);
#line 2090
  if ((unsigned long )drbd_md_io_bio_set == (unsigned long )((struct bio_set *)0)) {
#line 2091
    goto Enomem;
  } else {

  }
#line 2093
  drbd_md_io_page_pool = mempool_create_page_pool(128, 0);
#line 2094
  if ((unsigned long )drbd_md_io_page_pool == (unsigned long )((mempool_t *)0)) {
#line 2095
    goto Enomem;
  } else {

  }
#line 2097
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 2099
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2100
    goto Enomem;
  } else {

  }
#line 2102
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 2104
  if ((unsigned long )drbd_ee_mempool == (unsigned long )((mempool_t *)0)) {
#line 2105
    goto Enomem;
  } else {

  }
#line 2108
  spinlock_check(& drbd_pp_lock);
#line 2108
  __raw_spin_lock_init(& drbd_pp_lock.ldv_6135.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 2110
  i = 0;
#line 2110
  goto ldv_52899;
  ldv_52898: 
#line 2111
  page = alloc_pages(131282U, 0U);
#line 2112
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 2113
    goto Enomem;
  } else {

  }
#line 2114
  page->ldv_16348.private = (unsigned long )drbd_pp_pool;
#line 2115
  drbd_pp_pool = page;
#line 2110
  i = i + 1;
  ldv_52899: ;
#line 2110
  if (i < number) {
#line 2111
    goto ldv_52898;
  } else {

  }
#line 2117
  drbd_pp_vacant = number;
#line 2119
  return (0);
  Enomem: 
#line 2122
  drbd_destroy_mempools();
#line 2123
  return (-12);
}
}
#line 2126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 2133
  return (0);
}
}
#line 2136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 2140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_all_peer_reqs(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 2144
  rr = drbd_free_peer_reqs(mdev, & mdev->active_ee);
#line 2145
  if (rr != 0) {
#line 2146
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 2148
  rr = drbd_free_peer_reqs(mdev, & mdev->sync_ee);
#line 2149
  if (rr != 0) {
#line 2150
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 2152
  rr = drbd_free_peer_reqs(mdev, & mdev->read_ee);
#line 2153
  if (rr != 0) {
#line 2154
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 2156
  rr = drbd_free_peer_reqs(mdev, & mdev->done_ee);
#line 2157
  if (rr != 0) {
#line 2158
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 2160
  rr = drbd_free_peer_reqs(mdev, & mdev->net_ee);
#line 2161
  if (rr != 0) {
#line 2162
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 2163
  return;
}
}
#line 2166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_minor_destroy(struct kref *kref ) 
{ 
  struct drbd_conf *mdev ;
  struct kref  const  *__mptr ;
  struct drbd_tconn *tconn ;

  {
#line 2168
  __mptr = (struct kref  const  *)kref;
#line 2168
  mdev = (struct drbd_conf *)__mptr + 0xfffffffffffffff4UL;
#line 2169
  tconn = mdev->tconn;
#line 2171
  del_timer_sync(& mdev->request_timer);
#line 2174
  if (mdev->open_cnt != 0) {
#line 2174
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->open_cnt == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2174);
  } else {

  }
#line 2180
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 2181
    bdput(mdev->this_bdev);
  } else {

  }
#line 2183
  drbd_free_bc(mdev->ldev);
#line 2184
  mdev->ldev = 0;
#line 2186
  drbd_release_all_peer_reqs(mdev);
#line 2188
  lc_destroy(mdev->act_log);
#line 2189
  lc_destroy(mdev->resync);
#line 2191
  kfree((void const   *)mdev->p_uuid);
#line 2194
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 2195
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 2196
  __free_pages(mdev->md_io_page, 0U);
#line 2197
  put_disk(mdev->vdisk);
#line 2198
  blk_cleanup_queue(mdev->rq_queue);
#line 2199
  kfree((void const   *)mdev->rs_plan_s);
#line 2200
  kfree((void const   *)mdev);
#line 2202
  kref_put(& tconn->kref, & conn_destroy);
#line 2203
  return;
}
}
#line 2214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct retry_worker retry  ;
#line 2216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void do_retry(struct work_struct *ws ) 
{ 
  struct retry_worker *retry___0 ;
  struct work_struct  const  *__mptr ;
  struct list_head writes ;
  struct drbd_request *req ;
  struct drbd_request *tmp ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct drbd_conf *mdev ;
  struct bio *bio ;
  unsigned long start_time ;
  bool expected ;
  bool _bool ;
  int tmp___0 ;
  bool _bool___0 ;
  bool _bool___1 ;
  int tmp___1 ;
  int tmp___2 ;
  struct list_head  const  *__mptr___2 ;

  {
#line 2218
  __mptr = (struct work_struct  const  *)ws;
#line 2218
  retry___0 = (struct retry_worker *)__mptr + 0xfffffffffffffff8UL;
#line 2219
  writes.next = & writes;
#line 2219
  writes.prev = & writes;
#line 2222
  spin_lock_irq(& retry___0->lock);
#line 2223
  list_splice_init(& retry___0->writes, & writes);
#line 2224
  spin_unlock_irq(& retry___0->lock);
#line 2226
  __mptr___0 = (struct list_head  const  *)writes.next;
#line 2226
  req = (struct drbd_request *)__mptr___0 + 0xffffffffffffff98UL;
#line 2226
  __mptr___1 = (struct list_head  const  *)req->tl_requests.next;
#line 2226
  tmp = (struct drbd_request *)__mptr___1 + 0xffffffffffffff98UL;
#line 2226
  goto ldv_52951;
  ldv_52950: 
#line 2227
  mdev = req->w.ldv_50388.mdev;
#line 2228
  bio = req->master_bio;
#line 2229
  start_time = req->start_time;
#line 2233
  tmp___0 = atomic_read((atomic_t const   *)(& req->completion_ref));
#line 2233
  _bool = tmp___0 == 0;
#line 2233
  if (! _bool) {
#line 2233
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"atomic_read(&req->completion_ref) == 0", "do_retry");
  } else {

  }
#line 2235
  if ((int )_bool) {
#line 2234
    _bool___0 = ((unsigned long )req->rq_state & 8192UL) != 0UL;
#line 2234
    if (! _bool___0) {
#line 2234
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
              (char *)"req->rq_state & RQ_POSTPONED", "do_retry");
    } else {

    }
#line 2235
    if ((int )_bool___0) {
#line 2235
      _bool___1 = (bool )(((unsigned long )req->rq_state & 1UL) == 0UL || ((unsigned long )req->rq_state & 8UL) != 0UL);
#line 2235
      if (! _bool___1) {
#line 2235
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
                (char *)"(req->rq_state & RQ_LOCAL_PENDING) == 0 || (req->rq_state & RQ_LOCAL_ABORTED) != 0",
                "do_retry");
      } else {

      }
#line 2235
      if ((int )_bool___1) {
#line 2235
        tmp___1 = 1;
      } else {
#line 2235
        tmp___1 = 0;
      }
    } else {
#line 2235
      tmp___1 = 0;
    }
  } else {
#line 2235
    tmp___1 = 0;
  }
#line 2235
  expected = (bool )tmp___1;
#line 2238
  if (! expected) {
#line 2239
    tmp___2 = atomic_read((atomic_t const   *)(& req->completion_ref));
#line 2239
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "req=%p completion_ref=%d rq_state=%x\n",
            req, tmp___2, req->rq_state);
  } else {

  }
#line 2248
  kref_put(& req->kref, & drbd_req_destroy);
#line 2263
  inc_ap_bio___0(mdev);
#line 2264
  __drbd_make_request(mdev, bio, start_time);
#line 2226
  req = tmp;
#line 2226
  __mptr___2 = (struct list_head  const  *)tmp->tl_requests.next;
#line 2226
  tmp = (struct drbd_request *)__mptr___2 + 0xffffffffffffff98UL;
  ldv_52951: ;
#line 2226
  if ((unsigned long )(& req->tl_requests) != (unsigned long )(& writes)) {
#line 2227
    goto ldv_52950;
  } else {

  }

#line 2231
  return;
}
}
#line 2268 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_restart_request(struct drbd_request *req ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 2271
  tmp = spinlock_check(& retry.lock);
#line 2271
  flags = _raw_spin_lock_irqsave(tmp);
#line 2272
  list_move_tail(& req->tl_requests, & retry.writes);
#line 2273
  spin_unlock_irqrestore(& retry.lock, flags);
#line 2278
  dec_ap_bio(req->w.ldv_50388.mdev);
#line 2280
  queue_work(retry.wq, & retry.worker);
#line 2281
  return;
}
}
#line 2284 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  struct drbd_conf *mdev ;
  struct drbd_tconn *tconn ;
  struct drbd_tconn *tmp ;
  void *tmp___0 ;
  unsigned int tmp___1 ;
  void *tmp___2 ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 2290
  unregister_reboot_notifier(& drbd_notifier);
#line 2300
  if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 2301
    remove_proc_entry("drbd", 0);
  } else {

  }
#line 2303
  if ((unsigned long )retry.wq != (unsigned long )((struct workqueue_struct *)0)) {
#line 2304
    destroy_workqueue(retry.wq);
  } else {

  }
#line 2306
  drbd_genl_unregister();
#line 2308
  i = 0U;
#line 2308
  tmp___0 = idr_get_next(& minors, (int *)(& i));
#line 2308
  mdev = (struct drbd_conf *)tmp___0;
#line 2308
  goto ldv_52968;
  ldv_52967: 
#line 2309
  tmp___1 = mdev_to_minor(mdev);
#line 2309
  idr_remove(& minors, (int )tmp___1);
#line 2310
  idr_remove(& (mdev->tconn)->volumes, mdev->vnr);
#line 2311
  del_gendisk(mdev->vdisk);
#line 2313
  kref_put(& mdev->kref, & drbd_minor_destroy);
#line 2308
  i = i + 1U;
#line 2308
  tmp___2 = idr_get_next(& minors, (int *)(& i));
#line 2308
  mdev = (struct drbd_conf *)tmp___2;
  ldv_52968: ;
#line 2308
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 2309
    goto ldv_52967;
  } else {

  }
#line 2317
  __mptr = (struct list_head  const  *)drbd_tconns.next;
#line 2317
  tconn = (struct drbd_tconn *)__mptr + 0xfffffffffffffff8UL;
#line 2317
  __mptr___0 = (struct list_head  const  *)tconn->all_tconn.next;
#line 2317
  tmp = (struct drbd_tconn *)__mptr___0 + 0xfffffffffffffff8UL;
#line 2317
  goto ldv_52977;
  ldv_52976: 
#line 2318
  list_del(& tconn->all_tconn);
#line 2320
  kref_put(& tconn->kref, & conn_destroy);
#line 2317
  tconn = tmp;
#line 2317
  __mptr___1 = (struct list_head  const  *)tmp->all_tconn.next;
#line 2317
  tmp = (struct drbd_tconn *)__mptr___1 + 0xfffffffffffffff8UL;
  ldv_52977: ;
#line 2317
  if ((unsigned long )(& tconn->all_tconn) != (unsigned long )(& drbd_tconns)) {
#line 2318
    goto ldv_52976;
  } else {

  }
#line 2323
  drbd_destroy_mempools();
#line 2324
  unregister_blkdev(147U, "drbd");
#line 2326
  idr_destroy(& minors);
#line 2328
  printk("\016drbd: module cleanup done.\n");
#line 2329
  return;
}
}
#line 2338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2340
  mdev = (struct drbd_conf *)congested_data;
#line 2342
  reason = 45;
#line 2343
  r = 0;
#line 2345
  tmp = may_inc_ap_bio___0(mdev);
#line 2345
  if (tmp) {
#line 2345
    tmp___0 = 0;
  } else {
#line 2345
    tmp___0 = 1;
  }
#line 2345
  if (tmp___0) {
#line 2347
    r = bdi_bits;
#line 2348
    reason = 100;
#line 2349
    goto out;
  } else {

  }
#line 2352
  tmp___2 = constant_test_bit(11U, (unsigned long const volatile   *)(& (mdev->tconn)->flags));
#line 2352
  if (tmp___2 != 0) {
#line 2353
    r = r | 4;
#line 2359
    tmp___1 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2359
    if (tmp___1 == 0) {
#line 2360
      r = r | 8;
    } else {
#line 2362
      put_ldev(mdev);
    }
#line 2363
    r = r & bdi_bits;
#line 2364
    reason = 99;
#line 2365
    goto out;
  } else {

  }
#line 2368
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2368
  if (tmp___3 != 0) {
#line 2369
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2370
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 2371
    put_ldev(mdev);
#line 2372
    if (r != 0) {
#line 2373
      reason = 98;
    } else {

    }
  } else {

  }
#line 2376
  if ((bdi_bits & 4) != 0) {
#line 2376
    tmp___4 = constant_test_bit(0U, (unsigned long const volatile   *)(& (mdev->tconn)->flags));
#line 2376
    if (tmp___4 != 0) {
#line 2377
      r = r | 4;
#line 2378
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 2382
  mdev->congestion_reason = reason;
#line 2383
  return (r);
}
}
#line 2386 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_init_workqueue(struct drbd_work_queue *wq ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;

  {
#line 2388
  spinlock_check(& wq->q_lock);
#line 2388
  __raw_spin_lock_init(& wq->q_lock.ldv_6135.rlock, "&(&wq->q_lock)->rlock", & __key);
#line 2389
  INIT_LIST_HEAD(& wq->q);
#line 2390
  __init_waitqueue_head(& wq->q_wait, "&wq->q_wait", & __key___0);
#line 2392
  return;
}
}
#line 2393 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_tconn *conn_get_by_name(char const   *name ) 
{ 
  struct drbd_tconn *tconn ;
  struct list_head *__ptr ;
  struct list_head  const  *__mptr ;
  struct list_head *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  struct list_head *__ptr___0 ;
  struct list_head  const  *__mptr___0 ;
  struct list_head *_________p1___0 ;
  bool __warned___0 ;
  int tmp___1 ;

  {
#line 2397
  if ((unsigned long )name == (unsigned long )((char const   *)0) || (int )((signed char )*name) == 0) {
#line 2398
    return (0);
  } else {

  }
#line 2400
  rcu_read_lock();
#line 2401
  __ptr = drbd_tconns.next;
#line 2401
  _________p1 = *((struct list_head * volatile  *)(& __ptr));
#line 2401
  tmp = debug_lockdep_rcu_enabled();
#line 2401
  if (tmp != 0 && ! __warned) {
#line 2401
    rcu_read_lock_held();
  } else {

  }
#line 2401
  __mptr = (struct list_head  const  *)_________p1;
#line 2401
  tconn = (struct drbd_tconn *)__mptr + 0xfffffffffffffff8UL;
#line 2401
  goto ldv_53013;
  ldv_53012: 
#line 2402
  tmp___0 = strcmp((char const   *)tconn->name, name);
#line 2402
  if (tmp___0 == 0) {
#line 2403
    kref_get(& tconn->kref);
#line 2404
    goto found;
  } else {

  }
#line 2401
  __ptr___0 = tconn->all_tconn.next;
#line 2401
  _________p1___0 = *((struct list_head * volatile  *)(& __ptr___0));
#line 2401
  tmp___1 = debug_lockdep_rcu_enabled();
#line 2401
  if (tmp___1 != 0 && ! __warned___0) {
#line 2401
    rcu_read_lock_held();
  } else {

  }
#line 2401
  __mptr___0 = (struct list_head  const  *)_________p1___0;
#line 2401
  tconn = (struct drbd_tconn *)__mptr___0 + 0xfffffffffffffff8UL;
  ldv_53013: ;
#line 2401
  if ((unsigned long )(& tconn->all_tconn) != (unsigned long )(& drbd_tconns)) {
#line 2402
    goto ldv_53012;
  } else {

  }
#line 2407
  tconn = 0;
  found: 
#line 2409
  rcu_read_unlock();
#line 2410
  return (tconn);
}
}
#line 2413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_tconn *conn_get_by_addrs(void *my_addr , int my_addr_len , void *peer_addr ,
                                     int peer_addr_len ) 
{ 
  struct drbd_tconn *tconn ;
  struct list_head *__ptr ;
  struct list_head  const  *__mptr ;
  struct list_head *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct list_head *__ptr___0 ;
  struct list_head  const  *__mptr___0 ;
  struct list_head *_________p1___0 ;
  bool __warned___0 ;
  int tmp___2 ;

  {
#line 2418
  rcu_read_lock();
#line 2419
  __ptr = drbd_tconns.next;
#line 2419
  _________p1 = *((struct list_head * volatile  *)(& __ptr));
#line 2419
  tmp = debug_lockdep_rcu_enabled();
#line 2419
  if (tmp != 0 && ! __warned) {
#line 2419
    rcu_read_lock_held();
  } else {

  }
#line 2419
  __mptr = (struct list_head  const  *)_________p1;
#line 2419
  tconn = (struct drbd_tconn *)__mptr + 0xfffffffffffffff8UL;
#line 2419
  goto ldv_53038;
  ldv_53037: ;
#line 2420
  if (tconn->my_addr_len == my_addr_len && tconn->peer_addr_len == peer_addr_len) {
#line 2420
    tmp___0 = memcmp((void const   *)(& tconn->my_addr), (void const   *)my_addr,
                     (size_t )my_addr_len);
#line 2420
    if (tmp___0 == 0) {
#line 2420
      tmp___1 = memcmp((void const   *)(& tconn->peer_addr), (void const   *)peer_addr,
                       (size_t )peer_addr_len);
#line 2420
      if (tmp___1 == 0) {
#line 2424
        kref_get(& tconn->kref);
#line 2425
        goto found;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2419
  __ptr___0 = tconn->all_tconn.next;
#line 2419
  _________p1___0 = *((struct list_head * volatile  *)(& __ptr___0));
#line 2419
  tmp___2 = debug_lockdep_rcu_enabled();
#line 2419
  if (tmp___2 != 0 && ! __warned___0) {
#line 2419
    rcu_read_lock_held();
  } else {

  }
#line 2419
  __mptr___0 = (struct list_head  const  *)_________p1___0;
#line 2419
  tconn = (struct drbd_tconn *)__mptr___0 + 0xfffffffffffffff8UL;
  ldv_53038: ;
#line 2419
  if ((unsigned long )(& tconn->all_tconn) != (unsigned long )(& drbd_tconns)) {
#line 2420
    goto ldv_53037;
  } else {

  }
#line 2428
  tconn = 0;
  found: 
#line 2430
  rcu_read_unlock();
#line 2431
  return (tconn);
}
}
#line 2434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_alloc_socket(struct drbd_socket *socket ) 
{ 
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 2436
  tmp = __get_free_pages(208U, 0U);
#line 2436
  socket->rbuf = (void *)tmp;
#line 2437
  if ((unsigned long )socket->rbuf == (unsigned long )((void *)0)) {
#line 2438
    return (-12);
  } else {

  }
#line 2439
  tmp___0 = __get_free_pages(208U, 0U);
#line 2439
  socket->sbuf = (void *)tmp___0;
#line 2440
  if ((unsigned long )socket->sbuf == (unsigned long )((void *)0)) {
#line 2441
    return (-12);
  } else {

  }
#line 2442
  return (0);
}
}
#line 2445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_free_socket(struct drbd_socket *socket ) 
{ 


  {
#line 2447
  free_pages((unsigned long )socket->sbuf, 0U);
#line 2448
  free_pages((unsigned long )socket->rbuf, 0U);
#line 2449
  return;
}
}
#line 2451 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void conn_free_crypto(struct drbd_tconn *tconn ) 
{ 


  {
#line 2453
  drbd_free_sock(tconn);
#line 2455
  crypto_free_hash(tconn->csums_tfm);
#line 2456
  crypto_free_hash(tconn->verify_tfm);
#line 2457
  crypto_free_hash(tconn->cram_hmac_tfm);
#line 2458
  crypto_free_hash(tconn->integrity_tfm);
#line 2459
  crypto_free_hash(tconn->peer_integrity_tfm);
#line 2460
  kfree((void const   *)tconn->int_dig_in);
#line 2461
  kfree((void const   *)tconn->int_dig_vv);
#line 2463
  tconn->csums_tfm = 0;
#line 2464
  tconn->verify_tfm = 0;
#line 2465
  tconn->cram_hmac_tfm = 0;
#line 2466
  tconn->integrity_tfm = 0;
#line 2467
  tconn->peer_integrity_tfm = 0;
#line 2468
  tconn->int_dig_in = 0;
#line 2469
  tconn->int_dig_vv = 0;
#line 2470
  return;
}
}
#line 2472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int set_resource_options(struct drbd_tconn *tconn , struct res_opts *res_opts ) 
{ 
  cpumask_var_t new_cpu_mask ;
  int err ;
  bool tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;

  {
#line 2477
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 2477
  if (tmp) {
#line 2477
    tmp___0 = 0;
  } else {
#line 2477
    tmp___0 = 1;
  }
#line 2477
  if (tmp___0) {
#line 2478
    return (-12);
  } else {

  }
#line 2485
  if (nr_cpu_ids > 1 && (int )((signed char )res_opts->cpu_mask[0]) != 0) {
#line 2487
    err = bitmap_parse((char const   *)(& res_opts->cpu_mask), 32U, (unsigned long *)(& new_cpu_mask->bits),
                       nr_cpu_ids);
#line 2489
    if (err != 0) {
#line 2490
      printk("\fd-con %s: bitmap_parse() failed with %d\n", tconn->name, err);
#line 2492
      goto fail;
    } else {

    }
  } else {

  }
#line 2495
  tconn->res_opts = *res_opts;
#line 2496
  tmp___1 = cpumask_equal((struct cpumask  const  *)tconn->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 2496
  if (tmp___1) {
#line 2496
    tmp___2 = 0;
  } else {
#line 2496
    tmp___2 = 1;
  }
#line 2496
  if (tmp___2) {
#line 2497
    cpumask_copy(tconn->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 2498
    drbd_calc_cpu_mask(tconn);
#line 2499
    tconn->receiver.reset_cpu_mask = 1;
#line 2500
    tconn->asender.reset_cpu_mask = 1;
#line 2501
    tconn->worker.reset_cpu_mask = 1;
  } else {

  }
#line 2503
  err = 0;
  fail: 
#line 2506
  free_cpumask_var(new_cpu_mask);
#line 2507
  return (err);
}
}
#line 2512 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_tconn *conn_create(char const   *name , struct res_opts *res_opts ) 
{ 
  struct drbd_tconn *tconn ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;

  {
#line 2516
  tmp = kzalloc(2392UL, 208U);
#line 2516
  tconn = (struct drbd_tconn *)tmp;
#line 2517
  if ((unsigned long )tconn == (unsigned long )((struct drbd_tconn *)0)) {
#line 2518
    return (0);
  } else {

  }
#line 2520
  tconn->name = kstrdup(name, 208U);
#line 2521
  if ((unsigned long )tconn->name == (unsigned long )((char *)0)) {
#line 2522
    goto fail;
  } else {

  }
#line 2524
  tmp___0 = drbd_alloc_socket(& tconn->data);
#line 2524
  if (tmp___0 != 0) {
#line 2525
    goto fail;
  } else {

  }
#line 2526
  tmp___1 = drbd_alloc_socket(& tconn->meta);
#line 2526
  if (tmp___1 != 0) {
#line 2527
    goto fail;
  } else {

  }
#line 2529
  tmp___2 = zalloc_cpumask_var(& tconn->cpu_mask, 208U);
#line 2529
  if (tmp___2) {
#line 2529
    tmp___3 = 0;
  } else {
#line 2529
    tmp___3 = 1;
  }
#line 2529
  if (tmp___3) {
#line 2530
    goto fail;
  } else {

  }
#line 2532
  tmp___4 = set_resource_options(tconn, res_opts);
#line 2532
  if (tmp___4 != 0) {
#line 2533
    goto fail;
  } else {

  }
#line 2535
  tmp___5 = kzalloc(48UL, 208U);
#line 2535
  tconn->current_epoch = (struct drbd_epoch *)tmp___5;
#line 2536
  if ((unsigned long )tconn->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 2537
    goto fail;
  } else {

  }
#line 2539
  INIT_LIST_HEAD(& tconn->transfer_log);
#line 2541
  INIT_LIST_HEAD(& (tconn->current_epoch)->list);
#line 2542
  tconn->epochs = 1U;
#line 2543
  spinlock_check(& tconn->epoch_lock);
#line 2543
  __raw_spin_lock_init(& tconn->epoch_lock.ldv_6135.rlock, "&(&tconn->epoch_lock)->rlock",
                       & __key);
#line 2544
  tconn->write_ordering = WO_bdev_flush;
#line 2546
  tconn->send.seen_any_write_yet = 0;
#line 2547
  tconn->send.current_epoch_nr = 0;
#line 2548
  tconn->send.current_epoch_writes = 0U;
#line 2550
  tconn->cstate = C_STANDALONE;
#line 2551
  __mutex_init(& tconn->cstate_mutex, "&tconn->cstate_mutex", & __key___0);
#line 2552
  spinlock_check(& tconn->req_lock);
#line 2552
  __raw_spin_lock_init(& tconn->req_lock.ldv_6135.rlock, "&(&tconn->req_lock)->rlock",
                       & __key___1);
#line 2553
  __mutex_init(& tconn->conf_update, "&tconn->conf_update", & __key___2);
#line 2554
  __init_waitqueue_head(& tconn->ping_wait, "&tconn->ping_wait", & __key___3);
#line 2555
  idr_init(& tconn->volumes);
#line 2557
  drbd_init_workqueue(& tconn->sender_work);
#line 2558
  __mutex_init(& tconn->data.mutex, "&tconn->data.mutex", & __key___4);
#line 2559
  __mutex_init(& tconn->meta.mutex, "&tconn->meta.mutex", & __key___5);
#line 2561
  drbd_thread_init(tconn, & tconn->receiver, & drbdd_init, (char *)"receiver");
#line 2562
  drbd_thread_init(tconn, & tconn->worker, & drbd_worker, (char *)"worker");
#line 2563
  drbd_thread_init(tconn, & tconn->asender, & drbd_asender, (char *)"asender");
#line 2565
  kref_init(& tconn->kref);
#line 2566
  list_add_tail_rcu(& tconn->all_tconn, & drbd_tconns);
#line 2568
  return (tconn);
  fail: 
#line 2571
  kfree((void const   *)tconn->current_epoch);
#line 2572
  free_cpumask_var(tconn->cpu_mask);
#line 2573
  drbd_free_socket(& tconn->meta);
#line 2574
  drbd_free_socket(& tconn->data);
#line 2575
  kfree((void const   *)tconn->name);
#line 2576
  kfree((void const   *)tconn);
#line 2578
  return (0);
}
}
#line 2581 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void conn_destroy(struct kref *kref ) 
{ 
  struct drbd_tconn *tconn ;
  struct kref  const  *__mptr ;
  int tmp ;
  int tmp___0 ;

  {
#line 2583
  __mptr = (struct kref  const  *)kref;
#line 2583
  tconn = (struct drbd_tconn *)__mptr + 0xffffffffffffffe8UL;
#line 2585
  tmp___0 = atomic_read((atomic_t const   *)(& (tconn->current_epoch)->epoch_size));
#line 2585
  if (tmp___0 != 0) {
#line 2586
    tmp = atomic_read((atomic_t const   *)(& (tconn->current_epoch)->epoch_size));
#line 2586
    printk("\vd-con %s: epoch_size:%d\n", tconn->name, tmp);
  } else {

  }
#line 2587
  kfree((void const   *)tconn->current_epoch);
#line 2589
  idr_destroy(& tconn->volumes);
#line 2591
  free_cpumask_var(tconn->cpu_mask);
#line 2592
  drbd_free_socket(& tconn->meta);
#line 2593
  drbd_free_socket(& tconn->data);
#line 2594
  kfree((void const   *)tconn->name);
#line 2595
  kfree((void const   *)tconn->int_dig_in);
#line 2596
  kfree((void const   *)tconn->int_dig_vv);
#line 2597
  kfree((void const   *)tconn);
#line 2598
  return;
}
}
#line 2600 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_ret_code conn_new_minor(struct drbd_tconn *tconn , unsigned int minor ,
                                  int vnr ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  int vnr_got ;
  int minor_got ;
  enum drbd_ret_code err ;
  void *tmp ;
  int tmp___0 ;
  struct rb_root __constr_expr_0 ;
  struct rb_root __constr_expr_1 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2605
  vnr_got = vnr;
#line 2606
  minor_got = (int )minor;
#line 2607
  err = ERR_NOMEM;
#line 2609
  mdev = minor_to_mdev(minor);
#line 2610
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 2611
    return (ERR_MINOR_EXISTS);
  } else {

  }
#line 2614
  tmp = kzalloc(2160UL, 208U);
#line 2614
  mdev = (struct drbd_conf *)tmp;
#line 2615
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2616
    return (ERR_NOMEM);
  } else {

  }
#line 2618
  kref_get(& tconn->kref);
#line 2619
  mdev->tconn = tconn;
#line 2621
  mdev->minor = minor;
#line 2622
  mdev->vnr = vnr;
#line 2624
  drbd_init_set_defaults(mdev);
#line 2626
  q = blk_alloc_queue(208U);
#line 2627
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 2628
    goto out_no_q;
  } else {

  }
#line 2629
  mdev->rq_queue = q;
#line 2630
  q->queuedata = (void *)mdev;
#line 2632
  disk = alloc_disk(1);
#line 2633
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 2634
    goto out_no_disk;
  } else {

  }
#line 2635
  mdev->vdisk = disk;
#line 2637
  set_disk_ro(disk, 1);
#line 2639
  disk->queue = q;
#line 2640
  disk->major = 147;
#line 2641
  disk->first_minor = (int )minor;
#line 2642
  disk->fops = & drbd_ops;
#line 2643
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 2644
  disk->private_data = (void *)mdev;
#line 2646
  mdev->this_bdev = bdget(minor | 154140672U);
#line 2648
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 2650
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 2651
  q->backing_dev_info.congested_data = (void *)mdev;
#line 2653
  blk_queue_make_request(q, & drbd_make_request);
#line 2654
  blk_queue_flush(q, 6144U);
#line 2657
  blk_queue_max_hw_sectors(q, 16U);
#line 2658
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 2659
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 2660
  q->queue_lock = & (mdev->tconn)->req_lock;
#line 2662
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 2663
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 2664
    goto out_no_io_page;
  } else {

  }
#line 2666
  tmp___0 = drbd_bm_init(mdev);
#line 2666
  if (tmp___0 != 0) {
#line 2667
    goto out_no_bitmap;
  } else {

  }
#line 2668
  __constr_expr_0.rb_node = 0;
#line 2668
  mdev->read_requests = __constr_expr_0;
#line 2669
  __constr_expr_1.rb_node = 0;
#line 2669
  mdev->write_requests = __constr_expr_1;
#line 2671
  tmp___1 = idr_pre_get(& minors, 208U);
#line 2671
  if (tmp___1 == 0) {
#line 2672
    goto out_no_minor_idr;
  } else {

  }
#line 2673
  tmp___2 = idr_get_new_above(& minors, (void *)mdev, (int )minor, & minor_got);
#line 2673
  if (tmp___2 != 0) {
#line 2674
    goto out_no_minor_idr;
  } else {

  }
#line 2675
  if ((unsigned int )minor_got != minor) {
#line 2676
    err = ERR_MINOR_EXISTS;
#line 2677
    drbd_msg_put_info("requested minor exists already");
#line 2678
    goto out_idr_remove_minor;
  } else {

  }
#line 2681
  tmp___3 = idr_pre_get(& tconn->volumes, 208U);
#line 2681
  if (tmp___3 == 0) {
#line 2682
    goto out_idr_remove_minor;
  } else {

  }
#line 2683
  tmp___4 = idr_get_new_above(& tconn->volumes, (void *)mdev, vnr, & vnr_got);
#line 2683
  if (tmp___4 != 0) {
#line 2684
    goto out_idr_remove_minor;
  } else {

  }
#line 2685
  if (vnr_got != vnr) {
#line 2686
    err = ERR_INVALID_REQUEST;
#line 2687
    drbd_msg_put_info("requested volume exists already");
#line 2688
    goto out_idr_remove_vol;
  } else {

  }
#line 2690
  add_disk(disk);
#line 2691
  kref_init(& mdev->kref);
#line 2694
  mdev->state.ldv_50103.conn = (unsigned char )tconn->cstate;
#line 2695
  if ((unsigned int )*((unsigned short *)mdev + 374UL) == 144U) {
#line 2696
    drbd_connected(mdev);
  } else {

  }
#line 2698
  return (NO_ERROR);
  out_idr_remove_vol: 
#line 2701
  idr_remove(& tconn->volumes, vnr_got);
  out_idr_remove_minor: 
#line 2703
  idr_remove(& minors, minor_got);
#line 2704
  synchronize_rcu();
  out_no_minor_idr: 
#line 2706
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 2708
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 2710
  put_disk(disk);
  out_no_disk: 
#line 2712
  blk_cleanup_queue(q);
  out_no_q: 
#line 2714
  kfree((void const   *)mdev);
#line 2715
  kref_put(& tconn->kref, & conn_destroy);
#line 2716
  return (err);
}
}
#line 2719 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  char const   *__lock_name ;
  struct workqueue_struct *tmp ;
  struct lock_class_key __key___2 ;
  atomic_long_t __constr_expr_0 ;
  struct lock_class_key __key___3 ;
  char const   *tmp___0 ;

  {
#line 2723
  if (minor_count == 0U || minor_count > 255U) {
#line 2724
    printk("\vdrbd: invalid minor_count (%d)\n", minor_count);
#line 2727
    return (-22);
  } else {

  }
#line 2733
  err = register_blkdev(147U, "drbd");
#line 2734
  if (err != 0) {
#line 2735
    printk("\vdrbd: unable to register block device major %d\n", 147);
#line 2738
    return (err);
  } else {

  }
#line 2741
  err = drbd_genl_register();
#line 2742
  if (err != 0) {
#line 2743
    printk("\vdrbd: unable to register generic netlink family\n");
#line 2744
    goto fail;
  } else {

  }
#line 2748
  register_reboot_notifier(& drbd_notifier);
#line 2753
  err = -12;
#line 2755
  __init_waitqueue_head(& drbd_pp_wait, "&drbd_pp_wait", & __key);
#line 2757
  drbd_proc = 0;
#line 2758
  idr_init(& minors);
#line 2760
  err = drbd_create_mempools();
#line 2761
  if (err != 0) {
#line 2762
    goto fail;
  } else {

  }
#line 2764
  drbd_proc = proc_create_data("drbd", 33060, 0, & drbd_proc_fops, 0);
#line 2765
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 2766
    printk("\vdrbd: unable to register proc file\n");
#line 2767
    goto fail;
  } else {

  }
#line 2770
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 2771
  INIT_LIST_HEAD(& drbd_tconns);
#line 2773
  __lock_name = "drbd-reissue";
#line 2773
  tmp = __alloc_workqueue_key("drbd-reissue", 10U, 1, & __key___1, __lock_name);
#line 2773
  retry.wq = tmp;
#line 2774
  if ((unsigned long )retry.wq == (unsigned long )((struct workqueue_struct *)0)) {
#line 2775
    printk("\vdrbd: unable to create retry workqueue\n");
#line 2776
    goto fail;
  } else {

  }
#line 2778
  __init_work(& retry.worker, 0);
#line 2778
  __constr_expr_0.counter = 4195328L;
#line 2778
  retry.worker.data = __constr_expr_0;
#line 2778
  lockdep_init_map(& retry.worker.lockdep_map, "(&retry.worker)", & __key___2, 0);
#line 2778
  INIT_LIST_HEAD(& retry.worker.entry);
#line 2778
  retry.worker.func = & do_retry;
#line 2779
  spinlock_check(& retry.lock);
#line 2779
  __raw_spin_lock_init(& retry.lock.ldv_6135.rlock, "&(&retry.lock)->rlock", & __key___3);
#line 2780
  INIT_LIST_HEAD(& retry.writes);
#line 2782
  printk("\016drbd: initialized. Version: 8.4.2 (api:%d/proto:%d-%d)\n", 1, 86, 101);
#line 2785
  tmp___0 = drbd_buildtag();
#line 2785
  printk("\016drbd: %s\n", tmp___0);
#line 2786
  printk("\016drbd: registered as block device major %d\n", 147);
#line 2789
  return (0);
  fail: 
#line 2792
  drbd_cleanup();
#line 2793
  if (err == -12) {
#line 2795
    printk("\vdrbd: ran out of memory\n");
  } else {
#line 2797
    printk("\vdrbd: initialization failure\n");
  }
#line 2798
  return (err);
}
}
#line 2801 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 2803
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 2804
    return;
  } else {

  }
#line 2806
  blkdev_put(ldev->backing_bdev, 131U);
#line 2807
  blkdev_put(ldev->md_bdev, 131U);
#line 2809
  kfree((void const   *)ldev);
#line 2810
  return;
}
}
#line 2812 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_tconn *tconn ) 
{ 


  {
#line 2814
  if ((unsigned long )tconn->data.socket != (unsigned long )((struct socket *)0)) {
#line 2815
    mutex_lock_nested(& tconn->data.mutex, 0U);
#line 2816
    kernel_sock_shutdown(tconn->data.socket, SHUT_RDWR);
#line 2817
    sock_release(tconn->data.socket);
#line 2818
    tconn->data.socket = 0;
#line 2819
    mutex_unlock(& tconn->data.mutex);
  } else {

  }
#line 2821
  if ((unsigned long )tconn->meta.socket != (unsigned long )((struct socket *)0)) {
#line 2822
    mutex_lock_nested(& tconn->meta.mutex, 0U);
#line 2823
    kernel_sock_shutdown(tconn->meta.socket, SHUT_RDWR);
#line 2824
    sock_release(tconn->meta.socket);
#line 2825
    tconn->meta.socket = 0;
#line 2826
    mutex_unlock(& tconn->meta.mutex);
  } else {

  }
#line 2828
  return;
}
}
#line 2832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void conn_md_sync(struct drbd_tconn *tconn ) 
{ 
  struct drbd_conf *mdev ;
  int vnr ;
  void *tmp ;
  void *tmp___0 ;

  {
#line 2837
  rcu_read_lock();
#line 2838
  vnr = 0;
#line 2838
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 2838
  mdev = (struct drbd_conf *)tmp;
#line 2838
  goto ldv_53120;
  ldv_53119: 
#line 2839
  kref_get(& mdev->kref);
#line 2840
  rcu_read_unlock();
#line 2841
  drbd_md_sync(mdev);
#line 2842
  kref_put(& mdev->kref, & drbd_minor_destroy);
#line 2843
  rcu_read_lock();
#line 2838
  vnr = vnr + 1;
#line 2838
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 2838
  mdev = (struct drbd_conf *)tmp___0;
  ldv_53120: ;
#line 2838
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 2839
    goto ldv_53119;
  } else {

  }
#line 2845
  rcu_read_unlock();
#line 2846
  return;
}
}
#line 2870 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  sector_t tmp___12 ;
  int tmp___13 ;
  sector_t tmp___14 ;

  {
#line 2876
  del_timer(& mdev->md_sync_timer);
#line 2878
  tmp = test_and_clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 2878
  if (tmp == 0) {
#line 2879
    return;
  } else {

  }
#line 2883
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 2883
  if (tmp___0 == 0) {
#line 2884
    return;
  } else {

  }
#line 2886
  tmp___1 = drbd_md_get_buffer(mdev);
#line 2886
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 2887
  if ((unsigned long )buffer == (unsigned long )((struct meta_data_on_disk *)0)) {
#line 2888
    goto out;
  } else {

  }
#line 2890
  memset((void *)buffer, 0, 512UL);
#line 2892
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 2892
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 2892
  buffer->la_size = tmp___3;
#line 2893
  i = 0;
#line 2893
  goto ldv_53144;
  ldv_53143: 
#line 2894
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 2894
  buffer->uuid[i] = tmp___4;
#line 2893
  i = i + 1;
  ldv_53144: ;
#line 2893
  if (i <= 3) {
#line 2894
    goto ldv_53143;
  } else {

  }
#line 2895
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 2895
  buffer->flags = tmp___5;
#line 2896
  buffer->magic = 1812100227U;
#line 2898
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 2898
  buffer->md_size_sect = tmp___6;
#line 2899
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 2899
  buffer->al_offset = tmp___7;
#line 2900
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 2900
  buffer->al_nr_extents = tmp___8;
#line 2901
  buffer->bm_bytes_per_bit = 1048576U;
#line 2902
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 2902
  buffer->device_uuid = tmp___9;
#line 2904
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 2904
  buffer->bm_offset = tmp___10;
#line 2905
  tmp___11 = __fswab32(mdev->peer_max_bio_size);
#line 2905
  buffer->la_peer_max_bio_size = tmp___11;
#line 2907
  tmp___12 = drbd_md_ss__(mdev, mdev->ldev);
#line 2907
  if ((unsigned long long )tmp___12 != (mdev->ldev)->md.md_offset) {
#line 2907
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2907);
  } else {

  }
#line 2908
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 2910
  tmp___13 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 2910
  if (tmp___13 != 0) {
#line 2912
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 2913
    drbd_chk_io_error____1(mdev, 1, DRBD_META_IO_ERROR, "drbd_md_sync");
  } else {

  }
#line 2918
  tmp___14 = drbd_get_capacity(mdev->this_bdev);
#line 2918
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___14;
#line 2920
  drbd_md_put_buffer(mdev);
  out: 
#line 2922
  put_ldev(mdev);
#line 2923
  return;
}
}
#line 2933 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  u32 magic ;
  u32 flags ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  __u64 tmp___12 ;
  __u64 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;
  unsigned int peer ;
  __u32 tmp___16 ;
  unsigned int _max1 ;
  unsigned int _max2 ;

  {
#line 2937
  rv = 101;
#line 2939
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 2939
  if (tmp == 0) {
#line 2940
    return (118);
  } else {

  }
#line 2942
  tmp___0 = drbd_md_get_buffer(mdev);
#line 2942
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 2943
  if ((unsigned long )buffer == (unsigned long )((struct meta_data_on_disk *)0)) {
#line 2944
    goto out;
  } else {

  }
#line 2946
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 2946
  if (tmp___1 != 0) {
#line 2949
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 2950
    rv = 118;
#line 2951
    goto err;
  } else {

  }
#line 2954
  tmp___2 = __fswab32(buffer->magic);
#line 2954
  magic = tmp___2;
#line 2955
  tmp___3 = __fswab32(buffer->flags);
#line 2955
  flags = tmp___3;
#line 2956
  if (magic == 2205418092U || (magic == 2205418091U && (flags & 128U) == 0U)) {
#line 2959
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found unclean meta data. Did you \"drbdadm apply-al\"?\n");
#line 2960
    rv = 165;
#line 2961
    goto err;
  } else {

  }
#line 2963
  if (magic != 2205418091U) {
#line 2964
    if (magic == 2205418090U) {
#line 2965
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found old (0.7) meta data magic. Did you \"drbdadm create-md\"?\n");
    } else {
#line 2967
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data magic not found. Did you \"drbdadm create-md\"?\n");
    }
#line 2968
    rv = 119;
#line 2969
    goto err;
  } else {

  }
#line 2971
  tmp___5 = __fswab32(buffer->al_offset);
#line 2971
  if (tmp___5 != (unsigned int )bdev->md.al_offset) {
#line 2972
    tmp___4 = __fswab32(buffer->al_offset);
#line 2972
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___4, bdev->md.al_offset);
#line 2974
    rv = 119;
#line 2975
    goto err;
  } else {

  }
#line 2977
  tmp___7 = __fswab32(buffer->bm_offset);
#line 2977
  if (tmp___7 != (unsigned int )bdev->md.bm_offset) {
#line 2978
    tmp___6 = __fswab32(buffer->bm_offset);
#line 2978
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___6, bdev->md.bm_offset);
#line 2980
    rv = 119;
#line 2981
    goto err;
  } else {

  }
#line 2983
  tmp___9 = __fswab32(buffer->md_size_sect);
#line 2983
  if (tmp___9 != bdev->md.md_size_sect) {
#line 2984
    tmp___8 = __fswab32(buffer->md_size_sect);
#line 2984
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___8, bdev->md.md_size_sect);
#line 2986
    rv = 119;
#line 2987
    goto err;
  } else {

  }
#line 2990
  tmp___11 = __fswab32(buffer->bm_bytes_per_bit);
#line 2990
  if (tmp___11 != 4096U) {
#line 2991
    tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 2991
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___10, 4096);
#line 2993
    rv = 119;
#line 2994
    goto err;
  } else {

  }
#line 2997
  tmp___12 = __fswab64(buffer->la_size);
#line 2997
  bdev->md.la_size_sect = tmp___12;
#line 2998
  i = 0;
#line 2998
  goto ldv_53159;
  ldv_53158: 
#line 2999
  tmp___13 = __fswab64(buffer->uuid[i]);
#line 2999
  bdev->md.uuid[i] = tmp___13;
#line 2998
  i = i + 1;
  ldv_53159: ;
#line 2998
  if (i <= 3) {
#line 2999
    goto ldv_53158;
  } else {

  }
#line 3000
  tmp___14 = __fswab32(buffer->flags);
#line 3000
  bdev->md.flags = tmp___14;
#line 3001
  tmp___15 = __fswab64(buffer->device_uuid);
#line 3001
  bdev->md.device_uuid = tmp___15;
#line 3003
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 3004
  if ((int )mdev->state.ldv_50103.conn <= 9) {
#line 3006
    tmp___16 = __fswab32(buffer->la_peer_max_bio_size);
#line 3006
    peer = tmp___16;
#line 3007
    _max1 = peer;
#line 3007
    _max2 = 4096U;
#line 3007
    peer = _max1 > _max2 ? _max1 : _max2;
#line 3008
    mdev->peer_max_bio_size = peer;
  } else {

  }
#line 3010
  spin_unlock_irq(& (mdev->tconn)->req_lock);
  err: 
#line 3013
  drbd_md_put_buffer(mdev);
  out: 
#line 3015
  put_ldev(mdev);
#line 3017
  return (rv);
}
}
#line 3038 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 3040
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 3040
  if (tmp == 0) {
#line 3041
    mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
  } else {

  }
#line 3042
  return;
}
}
#line 3045 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3049
  i = 2;
#line 3049
  goto ldv_53173;
  ldv_53172: 
#line 3050
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3049
  i = i + 1;
  ldv_53173: ;
#line 3049
  if (i <= 2) {
#line 3050
    goto ldv_53172;
  } else {

  }

#line 3054
  return;
}
}
#line 3053 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void __drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3055
  if (idx == 0) {
#line 3056
    if ((unsigned int )*((unsigned char *)mdev + 748UL) == 1U) {
#line 3057
      val = val | 1ULL;
    } else {
#line 3059
      val = val & 0xfffffffffffffffeULL;
    }
#line 3061
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3064
  (mdev->ldev)->md.uuid[idx] = val;
#line 3065
  drbd_md_mark_dirty(mdev);
#line 3066
  return;
}
}
#line 3068 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 3071
  tmp = spinlock_check(& (mdev->ldev)->md.uuid_lock);
#line 3071
  flags = _raw_spin_lock_irqsave(tmp);
#line 3072
  __drbd_uuid_set(mdev, idx, val);
#line 3073
  spin_unlock_irqrestore(& (mdev->ldev)->md.uuid_lock, flags);
#line 3074
  return;
}
}
#line 3076 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 3079
  tmp = spinlock_check(& (mdev->ldev)->md.uuid_lock);
#line 3079
  flags = _raw_spin_lock_irqsave(tmp);
#line 3080
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3081
    drbd_uuid_move_history(mdev);
#line 3082
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 3084
  __drbd_uuid_set(mdev, idx, val);
#line 3085
  spin_unlock_irqrestore(& (mdev->ldev)->md.uuid_lock, flags);
#line 3086
  return;
}
}
#line 3095 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  unsigned long long bm_uuid ;

  {
#line 3100
  get_random_bytes((void *)(& val), 8);
#line 3102
  spin_lock_irq(& (mdev->ldev)->md.uuid_lock);
#line 3103
  bm_uuid = (mdev->ldev)->md.uuid[1];
#line 3105
  if (bm_uuid != 0ULL) {
#line 3106
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
             bm_uuid);
  } else {

  }
#line 3108
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3109
  __drbd_uuid_set(mdev, 0, val);
#line 3110
  spin_unlock_irq(& (mdev->ldev)->md.uuid_lock);
#line 3112
  drbd_print_uuids(mdev, "new current UUID");
#line 3114
  drbd_md_sync(mdev);
#line 3115
  return;
}
}
#line 3117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned long long bm_uuid ;

  {
#line 3120
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3121
    return;
  } else {

  }
#line 3123
  tmp = spinlock_check(& (mdev->ldev)->md.uuid_lock);
#line 3123
  flags = _raw_spin_lock_irqsave(tmp);
#line 3124
  if (val == 0ULL) {
#line 3125
    drbd_uuid_move_history(mdev);
#line 3126
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3127
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 3129
    bm_uuid = (mdev->ldev)->md.uuid[1];
#line 3130
    if (bm_uuid != 0ULL) {
#line 3131
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
               bm_uuid);
    } else {

    }
#line 3133
    (mdev->ldev)->md.uuid[1] = val & 0xfffffffffffffffeULL;
  }
#line 3135
  spin_unlock_irqrestore(& (mdev->ldev)->md.uuid_lock, flags);
#line 3137
  drbd_md_mark_dirty(mdev);
#line 3138
  return;
}
}
#line 3146 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3148
  rv = -5;
#line 3150
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3150
  if (tmp != 0) {
#line 3151
    drbd_md_set_flag(mdev, 8);
#line 3152
    drbd_md_sync(mdev);
#line 3153
    drbd_bm_set_all(mdev);
#line 3155
    rv = drbd_bm_write(mdev);
#line 3157
    if (rv == 0) {
#line 3158
      drbd_md_clear_flag(mdev, 8);
#line 3159
      drbd_md_sync(mdev);
    } else {

    }
#line 3162
    put_ldev(mdev);
  } else {

  }
#line 3165
  return (rv);
}
}
#line 3174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3176
  rv = -5;
#line 3178
  drbd_resume_al(mdev);
#line 3179
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3179
  if (tmp != 0) {
#line 3180
    drbd_bm_clear_all(mdev);
#line 3181
    rv = drbd_bm_write(mdev);
#line 3182
    put_ldev(mdev);
  } else {

  }
#line 3185
  return (rv);
}
}
#line 3188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 3190
  __mptr = (struct drbd_work  const  *)w;
#line 3190
  work = (struct bm_io_work *)__mptr;
#line 3191
  mdev = w->ldv_50388.mdev;
#line 3192
  rv = -5;
#line 3194
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3194
  if (tmp != 0) {
#line 3194
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3194);
  } else {

  }
#line 3196
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3196
  if (tmp___0 != 0) {
#line 3197
    drbd_bm_lock(mdev, work->why, work->flags);
#line 3198
    rv = (*(work->io_fn))(mdev);
#line 3199
    drbd_bm_unlock(mdev);
#line 3200
    put_ldev(mdev);
  } else {

  }
#line 3203
  clear_bit_unlock(9U, (unsigned long volatile   *)(& mdev->flags));
#line 3204
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3206
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3207
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3209
  clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 3210
  work->why = 0;
#line 3211
  work->flags = 0;
#line 3213
  return (0);
}
}
#line 3216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_ldev_destroy(struct drbd_conf *mdev ) 
{ 


  {
#line 3218
  lc_destroy(mdev->resync);
#line 3219
  mdev->resync = 0;
#line 3220
  lc_destroy(mdev->act_log);
#line 3221
  mdev->act_log = 0;
#line 3222
  drbd_free_bc(mdev->ldev);
#line 3222
  mdev->ldev = 0;
#line 3226
  clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 3227
  return;
}
}
#line 3229 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_go_diskless(struct drbd_work *w , int unused ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;
  int tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3231
  mdev = w->ldv_50388.mdev;
#line 3233
  if ((unsigned int )*((unsigned char *)mdev + 749UL) != 4U) {
#line 3233
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3233);
  } else {

  }
#line 3252
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0) && (unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3253
    tmp___0 = drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"detach",
                                         BM_LOCKED_MASK);
#line 3253
    if (tmp___0 != 0) {
#line 3255
      tmp = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 3255
      if (tmp != 0) {
#line 3256
        drbd_md_set_flag(mdev, 8);
#line 3257
        drbd_md_sync(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 3262
  val.i = 0U;
#line 3262
  val.ldv_40604.disk = 0U;
#line 3262
  mask.i = 0U;
#line 3262
  mask.ldv_40604.disk = 15U;
#line 3262
  drbd_force_state(mdev, mask, val);
#line 3263
  return (0);
}
}
#line 3266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_go_diskless(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 3268
  if ((unsigned int )*((unsigned char *)mdev + 749UL) != 4U) {
#line 3268
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3268);
  } else {

  }
#line 3269
  tmp = test_and_set_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 3269
  if (tmp == 0) {
#line 3270
    drbd_queue_work(& (mdev->tconn)->sender_work, & mdev->go_diskless);
  } else {

  }
#line 3271
  return;
}
}
#line 3285 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 3290
  tmp = get_current();
#line 3290
  if ((unsigned long )tmp != (unsigned long )(mdev->tconn)->worker.task) {
#line 3290
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->tconn->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3290);
  } else {

  }
#line 3292
  tmp___0 = constant_test_bit(10U, (unsigned long const volatile   *)(& mdev->flags));
#line 3292
  if (tmp___0 != 0) {
#line 3292
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3292);
  } else {

  }
#line 3293
  tmp___1 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3293
  if (tmp___1 != 0) {
#line 3293
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3293);
  } else {

  }
#line 3294
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3294
  if (tmp___2 == 0) {
#line 3294
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3294);
  } else {

  }
#line 3295
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 3296
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 3299
  mdev->bm_io_work.io_fn = io_fn;
#line 3300
  mdev->bm_io_work.done = done;
#line 3301
  mdev->bm_io_work.why = why;
#line 3302
  mdev->bm_io_work.flags = flags;
#line 3304
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 3305
  set_bit(9U, (unsigned long volatile   *)(& mdev->flags));
#line 3306
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3306
  if (tmp___4 == 0) {
#line 3307
    tmp___3 = test_and_set_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 3307
    if (tmp___3 == 0) {
#line 3308
      drbd_queue_work(& (mdev->tconn)->sender_work, & mdev->bm_io_work.w);
    } else {

    }
  } else {

  }
#line 3310
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 3311
  return;
}
}
#line 3322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 3327
  tmp = get_current();
#line 3327
  if ((unsigned long )tmp == (unsigned long )(mdev->tconn)->worker.task) {
#line 3327
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->tconn->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3327);
  } else {

  }
#line 3329
  if (((unsigned int )flags & 9U) == 0U) {
#line 3330
    drbd_suspend_io(mdev);
  } else {

  }
#line 3332
  drbd_bm_lock(mdev, why, flags);
#line 3333
  rv = (*io_fn)(mdev);
#line 3334
  drbd_bm_unlock(mdev);
#line 3336
  if (((unsigned int )flags & 9U) == 0U) {
#line 3337
    drbd_resume_io(mdev);
  } else {

  }
#line 3339
  return (rv);
}
}
#line 3342 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3344
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 3345
    drbd_md_mark_dirty(mdev);
#line 3346
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 3348
  return;
}
}
#line 3350 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3352
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 3353
    drbd_md_mark_dirty(mdev);
#line 3354
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 3356
  return;
}
}
#line 3357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 3359
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 3362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 3364
  mdev = (struct drbd_conf *)data;
#line 3367
  tmp = list_empty((struct list_head  const  *)(& mdev->md_sync_work.list));
#line 3367
  if (tmp != 0) {
#line 3368
    drbd_queue_work_front(& (mdev->tconn)->sender_work, & mdev->md_sync_work);
  } else {

  }
#line 3369
  return;
}
}
#line 3371 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_work *w , int unused ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3373
  mdev = w->ldv_50388.mdev;
#line 3375
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 3380
  drbd_md_sync(mdev);
#line 3381
  return (0);
}
}
#line 3384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char const   *cmdname(enum drbd_packet cmd ) 
{ 
  char const   *cmdnames[46U] ;

  {
#line 3389
  cmdnames[0] = "Data";
#line 3389
  cmdnames[1] = "DataReply";
#line 3389
  cmdnames[2] = "RSDataReply";
#line 3389
  cmdnames[3] = "Barrier";
#line 3389
  cmdnames[4] = "ReportBitMap";
#line 3389
  cmdnames[5] = "BecomeSyncTarget";
#line 3389
  cmdnames[6] = "BecomeSyncSource";
#line 3389
  cmdnames[7] = "UnplugRemote";
#line 3389
  cmdnames[8] = "DataRequest";
#line 3389
  cmdnames[9] = "RSDataRequest";
#line 3389
  cmdnames[10] = "SyncParam";
#line 3389
  cmdnames[11] = "ReportProtocol";
#line 3389
  cmdnames[12] = "ReportUUIDs";
#line 3389
  cmdnames[13] = "ReportSizes";
#line 3389
  cmdnames[14] = "ReportState";
#line 3389
  cmdnames[15] = "ReportSyncUUID";
#line 3389
  cmdnames[16] = "AuthChallenge";
#line 3389
  cmdnames[17] = "AuthResponse";
#line 3389
  cmdnames[18] = "StateChgRequest";
#line 3389
  cmdnames[19] = "Ping";
#line 3389
  cmdnames[20] = "PingAck";
#line 3389
  cmdnames[21] = "RecvAck";
#line 3389
  cmdnames[22] = "WriteAck";
#line 3389
  cmdnames[23] = "RSWriteAck";
#line 3389
  cmdnames[24] = "Superseded";
#line 3389
  cmdnames[25] = "NegAck";
#line 3389
  cmdnames[26] = "NegDReply";
#line 3389
  cmdnames[27] = "NegRSDReply";
#line 3389
  cmdnames[28] = "BarrierAck";
#line 3389
  cmdnames[29] = "StateChgReply";
#line 3389
  cmdnames[30] = "OVRequest";
#line 3389
  cmdnames[31] = "OVReply";
#line 3389
  cmdnames[32] = "OVResult";
#line 3389
  cmdnames[33] = "CsumRSRequest";
#line 3389
  cmdnames[34] = "CsumRSIsInSync";
#line 3389
  cmdnames[35] = "SyncParam89";
#line 3389
  cmdnames[36] = "CBitmap";
#line 3389
  cmdnames[37] = 0;
#line 3389
  cmdnames[38] = 0;
#line 3389
  cmdnames[39] = "DelayProbe";
#line 3389
  cmdnames[40] = "OutOfSync";
#line 3389
  cmdnames[41] = "RSCancel";
#line 3389
  cmdnames[42] = "conn_st_chg_req";
#line 3389
  cmdnames[43] = "conn_st_chg_reply";
#line 3389
  cmdnames[44] = "retry_write";
#line 3389
  cmdnames[45] = "protocol_update";
#line 3443
  if ((unsigned int )cmd == 65521U) {
#line 3444
    return ("InitialMeta");
  } else {

  }
#line 3445
  if ((unsigned int )cmd == 65522U) {
#line 3446
    return ("InitialData");
  } else {

  }
#line 3447
  if ((unsigned int )cmd == 65534U) {
#line 3448
    return ("ConnectionFeatures");
  } else {

  }
#line 3449
  if ((unsigned int )cmd > (unsigned int )P_PROTOCOL_UPDATE) {
#line 3450
    return ("Unknown");
  } else {

  }
#line 3451
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 3460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_wait_misc(struct drbd_conf *mdev , struct drbd_interval *i ) 
{ 
  struct net_conf *nc ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  long timeout ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 3463
  tmp = get_current();
#line 3463
  wait.flags = 0U;
#line 3463
  wait.private = (void *)tmp;
#line 3463
  wait.func = & autoremove_wake_function;
#line 3463
  wait.task_list.next = & wait.task_list;
#line 3463
  wait.task_list.prev = & wait.task_list;
#line 3466
  rcu_read_lock();
#line 3467
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 3467
  tmp___0 = debug_lockdep_rcu_enabled();
#line 3467
  if (tmp___0 != 0 && ! __warned) {
#line 3467
    tmp___1 = rcu_read_lock_held();
#line 3467
    if (tmp___1 == 0 && 1) {
#line 3467
      __warned = 1;
#line 3467
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
                             3467, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 3467
  nc = _________p1;
#line 3468
  if ((unsigned long )nc == (unsigned long )((struct net_conf *)0)) {
#line 3469
    rcu_read_unlock();
#line 3470
    return (-110);
  } else {

  }
#line 3472
  timeout = nc->ko_count != 0U ? (long )(((nc->timeout * 250U) / 10U) * nc->ko_count) : 9223372036854775807L;
#line 3473
  rcu_read_unlock();
#line 3476
  i->waiting = -1;
#line 3477
  prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 3478
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 3479
  timeout = schedule_timeout(timeout);
#line 3480
  finish_wait(& mdev->misc_wait, & wait);
#line 3481
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 3482
  if (timeout == 0L || (int )mdev->state.ldv_50103.conn <= 9) {
#line 3483
    return (-110);
  } else {

  }
#line 3484
  tmp___2 = get_current();
#line 3484
  tmp___3 = signal_pending(tmp___2);
#line 3484
  if (tmp___3 != 0) {
#line 3485
    return (-512);
  } else {

  }
#line 3486
  return (0);
}
}
#line 3506 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 3510
  tmp = rsp->count;
#line 3510
  rsp->count = rsp->count - 1UL;
#line 3510
  if (tmp == 0UL) {
#line 3511
    get_random_bytes((void *)(& refresh), 8);
#line 3512
    rsp->state = rsp->state + (unsigned long )refresh;
#line 3513
    rsp->count = 10000UL;
  } else {

  }
#line 3515
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 3516
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 3516
  return ((unsigned long )tmp___0);
}
}
#line 3520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 3521
  _faults[0] = (char *)"Meta-data write";
#line 3521
  _faults[1] = (char *)"Meta-data read";
#line 3521
  _faults[2] = (char *)"Resync write";
#line 3521
  _faults[3] = (char *)"Resync read";
#line 3521
  _faults[4] = (char *)"Data write";
#line 3521
  _faults[5] = (char *)"Data read";
#line 3521
  _faults[6] = (char *)"Data read ahead";
#line 3521
  _faults[7] = (char *)"BM allocation";
#line 3521
  _faults[8] = (char *)"EE allocation";
#line 3521
  _faults[9] = (char *)"receive data corruption";
#line 3534
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 3538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 3540
  rrs.state = 0UL;
#line 3540
  rrs.count = 0UL;
#line 3542
  if (fault_devs == 0) {
#line 3542
    goto _L;
  } else {
#line 3542
    tmp = mdev_to_minor(mdev);
#line 3542
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 3542
      tmp___0 = _drbd_fault_random(& rrs);
#line 3542
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 3542
        tmp___1 = 1;
      } else {
#line 3542
        tmp___1 = 0;
      }
    } else {
#line 3542
      tmp___1 = 0;
    }
  }
#line 3542
  ret = (unsigned int )tmp___1;
#line 3547
  if (ret != 0U) {
#line 3548
    fault_count = fault_count + 1;
#line 3550
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 3550
    if (tmp___3 != 0) {
#line 3551
      tmp___2 = _drbd_fault_str(type);
#line 3551
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 3555
  return (ret);
}
}
#line 3559 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 3564
  buildtag[0] = '\000';
#line 3564
  tmp = 1U;
#line 3564
  while (1) {
#line 3564
    if (tmp >= 38U) {
#line 3564
      break;
    } else {

    }
#line 3564
    buildtag[tmp] = (char)0;
#line 3564
    tmp = tmp + 1U;
  }
#line 3566
  if ((int )((signed char )buildtag[0]) == 0) {
#line 3568
    sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
  } else {

  }
#line 3574
  return ((char const   *)(& buildtag));
}
}
#line 3622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_73_p1 ;
  int res_drbd_open_73 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_74_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_80_p1 ;
  void *var_drbd_notify_sys_80_p2 ;
  unsigned long var_md_sync_timer_fn_120_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 3811
  ldv_s_drbd_ops_block_device_operations = 0;
#line 3770
  LDV_IN_INTERRUPT = 1;
#line 3779
  ldv_initialize();
#line 3793
  ldv_handler_precall();
#line 3794
  tmp = drbd_init();
#line 3794
  if (tmp != 0) {
#line 3795
    goto ldv_final;
  } else {

  }
#line 3818
  goto ldv_53386;
  ldv_53385: 
#line 3822
  tmp___0 = nondet_int();
#line 3822
  switch (tmp___0) {
  case 0: ;
#line 3827
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 3840
    ldv_handler_precall();
#line 3841
    res_drbd_open_73 = drbd_open(var_group1, var_drbd_open_73_p1);
#line 3842
    ldv_check_return_value(res_drbd_open_73);
#line 3843
    if (res_drbd_open_73 != 0) {
#line 3844
      goto ldv_module_exit;
    } else {

    }
#line 3863
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 3869
  goto ldv_53380;
  case 1: ;
#line 3873
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 3886
    ldv_handler_precall();
#line 3887
    drbd_release(var_group2, var_drbd_release_74_p1);
#line 3906
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 3912
  goto ldv_53380;
  case 2: 
#line 3929
  ldv_handler_precall();
#line 3930
  drbd_notify_sys(var_group3, var_drbd_notify_sys_80_p1, var_drbd_notify_sys_80_p2);
#line 3955
  goto ldv_53380;
  case 3: 
#line 3978
  ldv_handler_precall();
#line 3979
  md_sync_timer_fn(var_md_sync_timer_fn_120_p0);
#line 3998
  goto ldv_53380;
  default: ;
#line 3999
  goto ldv_53380;
  }
  ldv_53380: ;
  ldv_53386: 
#line 3818
  tmp___1 = nondet_int();
#line 3818
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 3820
    goto ldv_53385;
  } else {

  }

  ldv_module_exit: 
#line 4019
  ldv_handler_precall();
#line 4020
  drbd_cleanup();
  ldv_final: 
#line 4041
  ldv_check_final_state();
#line 4044
  return;
}
}
#line 4048 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_3(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4053
  ldv_module_put(ldv_func_arg1);
#line 4054
  return;
}
}
#line 4056 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
bool ldv_try_module_get_4(struct module *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
#line 4061
  tmp = ldv_try_module_get(ldv_func_arg1);
#line 4061
  return (tmp != 0);
}
}
#line 4064 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_5(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4069
  ldv_module_put(ldv_func_arg1);
#line 4070
  return;
}
}
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[24U]  = 
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT",      "Ahead",      "Behind"};
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 68 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 68
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[21U]  = 
#line 80
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted", 
        "Other vol primary on peer not allowed by config"};
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 105
  return ((unsigned int )s <= 23U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 110
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 115
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) 
{ 


  {
#line 120
  return ((int )err >= -20 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 53 "include/linux/string.h"
extern char *strchr(char const   * , int  ) ;
#line 70 "include/linux/kmod.h"
extern int call_usermodehelper_fns(char * , char ** , char ** , int  , int (*)(struct subprocess_info * ,
                                                                               struct cred * ) ,
                                   void (*)(struct subprocess_info * ) , void * ) ;
#line 75 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , int wait ) 
{ 
  int tmp ;

  {
#line 77
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 77
  return (tmp);
}
}
#line 207 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 114 "include/linux/rculist.h"
__inline static void list_del_rcu(struct list_head *entry ) 
{ 


  {
#line 116
  __list_del_entry(entry);
#line 117
  entry->prev = 0xdead000000200200UL;
#line 118
  return;
}
}
#line 210 "include/linux/capability.h"
extern bool capable(int  ) ;
#line 2093 "include/linux/fs.h"
extern struct block_device *blkdev_get_by_path(char const   * , fmode_t  , void * ) ;
#line 568 "include/linux/skbuff.h"
extern void kfree_skb(struct sk_buff * ) ;
#line 577
extern struct sk_buff *__alloc_skb(unsigned int  , gfp_t  , int  , int  ) ;
#line 580 "include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size , gfp_t priority ) 
{ 
  struct sk_buff *tmp ;

  {
#line 583
  tmp = __alloc_skb(size, priority, 0, -1);
#line 583
  return (tmp);
}
}
#line 1295 "include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff  const  *skb ) 
{ 


  {
#line 1297
  return ((unsigned char *)skb->head + (unsigned long )skb->tail);
}
}
#line 1644
extern void skb_trim(struct sk_buff * , unsigned int  ) ;
#line 7 "include/linux/seq_file_net.h"
extern struct net init_net ;
#line 238 "include/net/net_namespace.h"
__inline static struct net *read_pnet(struct net * const  *pnet ) 
{ 


  {
#line 240
  return ((struct net *)*pnet);
}
}
#line 13 "include/linux/netlink.h"
__inline static struct nlmsghdr *nlmsg_hdr(struct sk_buff  const  *skb ) 
{ 


  {
#line 15
  return ((struct nlmsghdr *)skb->data);
}
}
#line 60
extern int netlink_unicast(struct sock * , struct sk_buff * , __u32  , int  ) ;
#line 61
extern int netlink_broadcast(struct sock * , struct sk_buff * , __u32  , __u32  ,
                             gfp_t  ) ;
#line 242 "include/net/netlink.h"
extern struct nlattr *nla_find(struct nlattr  const  * , int  , int  ) ;
#line 244
extern size_t nla_strlcpy(char * , struct nlattr  const  * , size_t  ) ;
#line 246
extern int nla_memcpy(void * , struct nlattr  const  * , int  ) ;
#line 260
extern int nla_put(struct sk_buff * , int  , int  , void const   * ) ;
#line 262
extern int nla_put_nohdr(struct sk_buff * , int  , void const   * ) ;
#line 275 "include/net/netlink.h"
__inline static int nlmsg_msg_size(int payload ) 
{ 


  {
#line 277
  return (payload + 16);
}
}
#line 284 "include/net/netlink.h"
__inline static int nlmsg_total_size(int payload ) 
{ 
  int tmp ;

  {
#line 286
  tmp = nlmsg_msg_size(payload);
#line 286
  return ((int )((unsigned int )tmp + 3U) & -4);
}
}
#line 302 "include/net/netlink.h"
__inline static void *nlmsg_data(struct nlmsghdr  const  *nlh ) 
{ 


  {
#line 304
  return ((void *)nlh + 16U);
}
}
#line 311 "include/net/netlink.h"
__inline static int nlmsg_len(struct nlmsghdr  const  *nlh ) 
{ 


  {
#line 313
  return ((int )((unsigned int )nlh->nlmsg_len - 16U));
}
}
#line 321 "include/net/netlink.h"
__inline static struct nlattr *nlmsg_attrdata(struct nlmsghdr  const  *nlh , int hdrlen ) 
{ 
  unsigned char *data ;
  void *tmp ;

  {
#line 324
  tmp = nlmsg_data(nlh);
#line 324
  data = (unsigned char *)tmp;
#line 325
  return ((struct nlattr *)(data + ((unsigned long )((unsigned int )hdrlen + 3U) & 4294967292UL)));
}
}
#line 333 "include/net/netlink.h"
__inline static int nlmsg_attrlen(struct nlmsghdr  const  *nlh , int hdrlen ) 
{ 
  int tmp ;

  {
#line 335
  tmp = nlmsg_len(nlh);
#line 335
  return ((int )((unsigned int )tmp - (((unsigned int )hdrlen + 3U) & 4294967292U)));
}
}
#line 493 "include/net/netlink.h"
__inline static struct sk_buff *nlmsg_new(size_t payload , gfp_t flags ) 
{ 
  int tmp ;
  struct sk_buff *tmp___0 ;

  {
#line 495
  tmp = nlmsg_total_size((int )payload);
#line 495
  tmp___0 = alloc_skb((unsigned int )tmp, flags);
#line 495
  return (tmp___0);
}
}
#line 509 "include/net/netlink.h"
__inline static int nlmsg_end(struct sk_buff *skb , struct nlmsghdr *nlh ) 
{ 
  unsigned char *tmp ;

  {
#line 511
  tmp = skb_tail_pointer((struct sk_buff  const  *)skb);
#line 511
  nlh->nlmsg_len = (__u32 )((long )tmp) - (__u32 )((long )nlh);
#line 513
  return ((int )skb->len);
}
}
#line 534 "include/net/netlink.h"
__inline static void nlmsg_trim(struct sk_buff *skb , void const   *mark ) 
{ 


  {
#line 536
  if ((unsigned long )mark != (unsigned long )((void const   *)0)) {
#line 537
    skb_trim(skb, (unsigned int )((long )mark) - (unsigned int )((long )skb->data));
  } else {

  }
#line 538
  return;
}
}
#line 548 "include/net/netlink.h"
__inline static void nlmsg_cancel(struct sk_buff *skb , struct nlmsghdr *nlh ) 
{ 


  {
#line 550
  nlmsg_trim(skb, (void const   *)nlh);
#line 551
  return;
}
}
#line 557 "include/net/netlink.h"
__inline static void nlmsg_free(struct sk_buff *skb ) 
{ 


  {
#line 559
  kfree_skb(skb);
#line 560
  return;
}
}
#line 570 "include/net/netlink.h"
__inline static int nlmsg_multicast(struct sock *sk , struct sk_buff *skb , u32 portid ,
                                    unsigned int group , gfp_t flags ) 
{ 
  int err ;

  {
#line 575
  ((struct netlink_skb_parms *)(& skb->cb))->dst_group = group;
#line 577
  err = netlink_broadcast(sk, skb, portid, group, flags);
#line 578
  if (err > 0) {
#line 579
    err = 0;
  } else {

  }
#line 581
  return (err);
}
}
#line 590 "include/net/netlink.h"
__inline static int nlmsg_unicast(struct sock *sk , struct sk_buff *skb , u32 portid ) 
{ 
  int err ;

  {
#line 594
  err = netlink_unicast(sk, skb, portid, 64);
#line 595
  if (err > 0) {
#line 596
    err = 0;
  } else {

  }
#line 598
  return (err);
}
}
#line 681 "include/net/netlink.h"
__inline static void *nla_data(struct nlattr  const  *nla ) 
{ 


  {
#line 683
  return ((void *)nla + 4U);
}
}
#line 690 "include/net/netlink.h"
__inline static int nla_len(struct nlattr  const  *nla ) 
{ 


  {
#line 692
  return ((int )nla->nla_len + -4);
}
}
#line 758 "include/net/netlink.h"
__inline static int nla_put_u8(struct sk_buff *skb , int attrtype , u8 value ) 
{ 
  int tmp ;

  {
#line 760
  tmp = nla_put(skb, attrtype, 1, (void const   *)(& value));
#line 760
  return (tmp);
}
}
#line 813 "include/net/netlink.h"
__inline static int nla_put_u32(struct sk_buff *skb , int attrtype , u32 value ) 
{ 
  int tmp ;

  {
#line 815
  tmp = nla_put(skb, attrtype, 4, (void const   *)(& value));
#line 815
  return (tmp);
}
}
#line 857 "include/net/netlink.h"
__inline static int nla_put_u64(struct sk_buff *skb , int attrtype , u64 value ) 
{ 
  int tmp ;

  {
#line 859
  tmp = nla_put(skb, attrtype, 8, (void const   *)(& value));
#line 859
  return (tmp);
}
}
#line 945 "include/net/netlink.h"
__inline static int nla_put_string(struct sk_buff *skb , int attrtype , char const   *str ) 
{ 
  size_t tmp ;
  int tmp___0 ;

  {
#line 948
  tmp = strlen(str);
#line 948
  tmp___0 = nla_put(skb, attrtype, (int )((unsigned int )tmp + 1U), (void const   *)str);
#line 948
  return (tmp___0);
}
}
#line 978 "include/net/netlink.h"
__inline static u32 nla_get_u32(struct nlattr  const  *nla ) 
{ 
  void *tmp ;

  {
#line 980
  tmp = nla_data(nla);
#line 980
  return (*((u32 *)tmp));
}
}
#line 1023 "include/net/netlink.h"
__inline static u8 nla_get_u8(struct nlattr  const  *nla ) 
{ 
  void *tmp ;

  {
#line 1025
  tmp = nla_data(nla);
#line 1025
  return (*((u8 *)tmp));
}
}
#line 1032 "include/net/netlink.h"
__inline static u64 nla_get_u64(struct nlattr  const  *nla ) 
{ 
  u64 tmp ;

  {
#line 1036
  nla_memcpy((void *)(& tmp), nla, 8);
#line 1038
  return (tmp);
}
}
#line 1123 "include/net/netlink.h"
__inline static struct nlattr *nla_nest_start(struct sk_buff *skb , int attrtype ) 
{ 
  struct nlattr *start ;
  unsigned char *tmp ;
  int tmp___0 ;

  {
#line 1125
  tmp = skb_tail_pointer((struct sk_buff  const  *)skb);
#line 1125
  start = (struct nlattr *)tmp;
#line 1127
  tmp___0 = nla_put(skb, attrtype, 0, 0);
#line 1127
  if (tmp___0 < 0) {
#line 1128
    return (0);
  } else {

  }
#line 1130
  return (start);
}
}
#line 1143 "include/net/netlink.h"
__inline static int nla_nest_end(struct sk_buff *skb , struct nlattr *start ) 
{ 
  unsigned char *tmp ;

  {
#line 1145
  tmp = skb_tail_pointer((struct sk_buff  const  *)skb);
#line 1145
  start->nla_len = (int )((__u16 )((long )tmp)) - (int )((__u16 )((long )start));
#line 1146
  return ((int )skb->len);
}
}
#line 1157 "include/net/netlink.h"
__inline static void nla_nest_cancel(struct sk_buff *skb , struct nlattr *start ) 
{ 


  {
#line 1159
  nlmsg_trim(skb, (void const   *)start);
#line 1160
  return;
}
}
#line 900 "include/linux/blkdev.h"
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 906
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 922
extern void blk_queue_stack_limits(struct request_queue * , struct request_queue * ) ;
#line 929
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 251 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   unsigned int  , size_t  , size_t  ) ;
#line 293
extern int lc_try_lock(struct lru_cache * ) ;
#line 135 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_state.h"
bool conn_all_vols_unconf(struct drbd_tconn *tconn ) ;
#line 147 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_state.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 151
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 151
  return ((int )tmp);
}
}
#line 155
enum drbd_role conn_highest_peer(struct drbd_tconn *tconn ) ;
#line 156
enum drbd_disk_state conn_highest_disk(struct drbd_tconn *tconn ) ;
#line 1441 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool conn_try_outdate_peer(struct drbd_tconn *tconn ) ;
#line 1818 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  int meta_dev_idx ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___2 ;
  sector_t tmp___3 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___4 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___5 ;

  {
#line 1823
  rcu_read_lock();
#line 1824
  _________p1 = *((struct disk_conf * volatile  *)(& bdev->disk_conf));
#line 1824
  tmp = debug_lockdep_rcu_enabled();
#line 1824
  if (tmp != 0 && ! __warned) {
#line 1824
    tmp___0 = rcu_read_lock_held();
#line 1824
    if (tmp___0 == 0 && 1) {
#line 1824
      __warned = 1;
#line 1824
      lockdep_rcu_suspicious("/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
                             1824, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1824
  meta_dev_idx = _________p1->meta_dev_idx;
#line 1825
  rcu_read_unlock();
#line 1827
  switch (meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1831
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1831
  if (tmp___3 != 0UL) {
#line 1831
    __min1 = 2251799813685248UL;
#line 1831
    tmp___2 = _drbd_md_first_sector(meta_dev_idx, bdev);
#line 1831
    __min2 = tmp___2;
#line 1831
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1831
    s = 0UL;
  }
#line 1834
  goto ldv_51507;
  case -2: 
#line 1836
  __min1___0 = 2251799813685248UL;
#line 1836
  tmp___4 = drbd_get_capacity(bdev->backing_bdev);
#line 1836
  __min2___0 = tmp___4;
#line 1836
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1839
  __min1___1 = s;
#line 1839
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1839
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1842
  goto ldv_51507;
  default: 
#line 1844
  __min1___2 = 8587575296UL;
#line 1844
  tmp___5 = drbd_get_capacity(bdev->backing_bdev);
#line 1844
  __min2___2 = tmp___5;
#line 1844
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_51507: ;
#line 1847
  return (s);
}
}
#line 89 "include/net/genetlink.h"
__inline static struct net *genl_info_net(struct genl_info *info ) 
{ 
  struct net *tmp ;

  {
#line 91
  tmp = read_pnet((struct net * const  *)(& info->_net));
#line 91
  return (tmp);
}
}
#line 124
extern int genl_register_family_with_ops(struct genl_family * , struct genl_ops * ,
                                         size_t  ) ;
#line 126
extern int genl_unregister_family(struct genl_family * ) ;
#line 129
extern int genl_register_mc_group(struct genl_family * , struct genl_multicast_group * ) ;
#line 136
extern void *genlmsg_put(struct sk_buff * , u32  , u32  , struct genl_family * , int  ,
                         u8  ) ;
#line 181 "include/net/genetlink.h"
__inline static void *genlmsg_put_reply(struct sk_buff *skb , struct genl_info *info ,
                                        struct genl_family *family , int flags , u8 cmd ) 
{ 
  void *tmp ;

  {
#line 186
  tmp = genlmsg_put(skb, info->snd_portid, info->snd_seq, family, flags, (int )cmd);
#line 186
  return (tmp);
}
}
#line 195 "include/net/genetlink.h"
__inline static int genlmsg_end(struct sk_buff *skb , void *hdr ) 
{ 
  int tmp ;

  {
#line 197
  tmp = nlmsg_end(skb, (struct nlmsghdr *)hdr + 0xffffffffffffffecUL);
#line 197
  return (tmp);
}
}
#line 205 "include/net/genetlink.h"
__inline static void genlmsg_cancel(struct sk_buff *skb , void *hdr ) 
{ 


  {
#line 207
  if ((unsigned long )hdr != (unsigned long )((void *)0)) {
#line 208
    nlmsg_cancel(skb, (struct nlmsghdr *)hdr + 0xffffffffffffffecUL);
  } else {

  }
#line 209
  return;
}
}
#line 219 "include/net/genetlink.h"
__inline static int genlmsg_multicast_netns(struct net *net , struct sk_buff *skb ,
                                            u32 portid , unsigned int group , gfp_t flags ) 
{ 
  int tmp ;

  {
#line 222
  tmp = nlmsg_multicast(net->genl_sock, skb, portid, group, flags);
#line 222
  return (tmp);
}
}
#line 232 "include/net/genetlink.h"
__inline static int genlmsg_multicast(struct sk_buff *skb , u32 portid , unsigned int group ,
                                      gfp_t flags ) 
{ 
  int tmp ;

  {
#line 235
  tmp = genlmsg_multicast_netns(& init_net, skb, portid, group, flags);
#line 235
  return (tmp);
}
}
#line 255 "include/net/genetlink.h"
__inline static int genlmsg_unicast(struct net *net , struct sk_buff *skb , u32 portid ) 
{ 
  int tmp ;

  {
#line 257
  tmp = nlmsg_unicast(net->genl_sock, skb, portid);
#line 257
  return (tmp);
}
}
#line 265 "include/net/genetlink.h"
__inline static int genlmsg_reply(struct sk_buff *skb , struct genl_info *info ) 
{ 
  struct net *tmp ;
  int tmp___0 ;

  {
#line 267
  tmp = genl_info_net(info);
#line 267
  tmp___0 = genlmsg_unicast(tmp, skb, info->snd_portid);
#line 267
  return (tmp___0);
}
}
#line 274 "include/net/genetlink.h"
__inline static void *genlmsg_data(struct genlmsghdr  const  *gnlh ) 
{ 


  {
#line 276
  return ((void *)gnlh + 4U);
}
}
#line 294 "include/net/genetlink.h"
__inline static int genlmsg_msg_size(int payload ) 
{ 


  {
#line 296
  return ((int )((unsigned int )payload + 4U));
}
}
#line 303 "include/net/genetlink.h"
__inline static int genlmsg_total_size(int payload ) 
{ 
  int tmp ;

  {
#line 305
  tmp = genlmsg_msg_size(payload);
#line 305
  return ((int )((unsigned int )tmp + 3U) & -4);
}
}
#line 313 "include/net/genetlink.h"
__inline static struct sk_buff *genlmsg_new(size_t payload , gfp_t flags ) 
{ 
  int tmp ;
  struct sk_buff *tmp___0 ;

  {
#line 315
  tmp = genlmsg_total_size((int )payload);
#line 315
  tmp___0 = nlmsg_new((size_t )tmp, flags);
#line 315
  return (tmp___0);
}
}
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_add_minor(struct sk_buff *skb , struct genl_info *info ) ;
#line 55
int drbd_adm_delete_minor(struct sk_buff *skb , struct genl_info *info ) ;
#line 57
int drbd_adm_new_resource(struct sk_buff *skb , struct genl_info *info ) ;
#line 58
int drbd_adm_del_resource(struct sk_buff *skb , struct genl_info *info ) ;
#line 59
int drbd_adm_down(struct sk_buff *skb , struct genl_info *info ) ;
#line 61
int drbd_adm_set_role(struct sk_buff *skb , struct genl_info *info ) ;
#line 62
int drbd_adm_attach(struct sk_buff *skb , struct genl_info *info ) ;
#line 63
int drbd_adm_disk_opts(struct sk_buff *skb , struct genl_info *info ) ;
#line 64
int drbd_adm_detach(struct sk_buff *skb , struct genl_info *info ) ;
#line 65
int drbd_adm_connect(struct sk_buff *skb , struct genl_info *info ) ;
#line 66
int drbd_adm_net_opts(struct sk_buff *skb , struct genl_info *info ) ;
#line 67
int drbd_adm_resize(struct sk_buff *skb , struct genl_info *info ) ;
#line 68
int drbd_adm_start_ov(struct sk_buff *skb , struct genl_info *info ) ;
#line 69
int drbd_adm_new_c_uuid(struct sk_buff *skb , struct genl_info *info ) ;
#line 70
int drbd_adm_disconnect(struct sk_buff *skb , struct genl_info *info ) ;
#line 71
int drbd_adm_invalidate(struct sk_buff *skb , struct genl_info *info ) ;
#line 72
int drbd_adm_invalidate_peer(struct sk_buff *skb , struct genl_info *info ) ;
#line 73
int drbd_adm_pause_sync(struct sk_buff *skb , struct genl_info *info ) ;
#line 74
int drbd_adm_resume_sync(struct sk_buff *skb , struct genl_info *info ) ;
#line 75
int drbd_adm_suspend_io(struct sk_buff *skb , struct genl_info *info ) ;
#line 76
int drbd_adm_resume_io(struct sk_buff *skb , struct genl_info *info ) ;
#line 77
int drbd_adm_outdate(struct sk_buff *skb , struct genl_info *info ) ;
#line 78
int drbd_adm_resource_opts(struct sk_buff *skb , struct genl_info *info ) ;
#line 79
int drbd_adm_get_status(struct sk_buff *skb , struct genl_info *info ) ;
#line 80
int drbd_adm_get_timeout_type(struct sk_buff *skb , struct genl_info *info ) ;
#line 82
int drbd_adm_get_status_all(struct sk_buff *skb , struct netlink_callback *cb ) ;
#line 4 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_nla.h"
int drbd_nla_parse_nested(struct nlattr **tb , int maxtype , struct nlattr *nla ,
                          struct nla_policy  const  *policy ) ;
#line 6
struct nlattr *drbd_nla_find_nested(int maxtype , struct nlattr *nla , int attrtype ) ;
#line 24 "include/linux/genl_magic_func.h"
static struct nla_policy drbd_tla_nl_policy[14U]  = 
#line 24 "include/linux/genl_magic_func.h"
  {      {(unsigned short)0, (unsigned short)0}, 
        {8U, (unsigned short)0}, 
        {8U, (unsigned short)0}, 
        {8U, (unsigned short)0}, 
        {8U, (unsigned short)0}, 
        {8U, (unsigned short)0}, 
        {8U, (unsigned short)0}, 
        {8U, (unsigned short)0}, 
        {8U, (unsigned short)0}, 
        {8U, (unsigned short)0}, 
        {8U, (unsigned short)0}, 
        {8U, (unsigned short)0}, 
        {8U, (unsigned short)0}, 
        {8U, (unsigned short)0}};
#line 102 "include/linux/drbd_genl.h"
static struct nla_policy drbd_cfg_context_nl_policy[5U]  = {      {(unsigned short)0, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {10U, 127U}, 
        {11U, 128U}, 
        {11U, 128U}};
#line 135 "include/linux/drbd_genl.h"
static struct nla_policy disk_conf_nl_policy[24U]  = 
#line 135
  {      {(unsigned short)0, (unsigned short)0}, 
        {10U, 127U}, 
        {10U, 127U}, 
        {3U, (unsigned short)0}, 
        {4U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {1U, (unsigned short)0}, 
        {1U, (unsigned short)0}, 
        {1U, (unsigned short)0}, 
        {1U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {(unsigned short)0, (unsigned short)0}, 
        {1U, (unsigned short)0}};
#line 140 "include/linux/drbd_genl.h"
static struct nla_policy res_opts_nl_policy[3U]  = {      {(unsigned short)0, (unsigned short)0}, 
        {10U, 31U}, 
        {3U, (unsigned short)0}};
#line 174 "include/linux/drbd_genl.h"
static struct nla_policy net_conf_nl_policy[30U]  = 
#line 174
  {      {(unsigned short)0, (unsigned short)0}, 
        {10U, 63U}, 
        {10U, 63U}, 
        {10U, 63U}, 
        {10U, 63U}, 
        {10U, 63U}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {3U, (unsigned short)0}, 
        {1U, (unsigned short)0}, 
        {1U, (unsigned short)0}, 
        {1U, (unsigned short)0}, 
        {1U, (unsigned short)0}, 
        {1U, (unsigned short)0}, 
        {1U, (unsigned short)0}};
#line 178 "include/linux/drbd_genl.h"
static struct nla_policy set_role_parms_nl_policy[2U]  = {      {(unsigned short)0, (unsigned short)0}, 
        {1U, (unsigned short)0}};
#line 184 "include/linux/drbd_genl.h"
static struct nla_policy resize_parms_nl_policy[4U]  = {      {(unsigned short)0, (unsigned short)0}, 
        {4U, (unsigned short)0}, 
        {1U, (unsigned short)0}, 
        {1U, (unsigned short)0}};
#line 229 "include/linux/drbd_genl.h"
static struct nla_policy start_ov_parms_nl_policy[3U]  = {      {(unsigned short)0, (unsigned short)0}, 
        {4U, (unsigned short)0}, 
        {4U, (unsigned short)0}};
#line 233 "include/linux/drbd_genl.h"
static struct nla_policy new_c_uuid_parms_nl_policy[2U]  = {      {(unsigned short)0, (unsigned short)0}, 
        {1U, (unsigned short)0}};
#line 241 "include/linux/drbd_genl.h"
static struct nla_policy disconnect_parms_nl_policy[2U]  = {      {(unsigned short)0, (unsigned short)0}, 
        {1U, (unsigned short)0}};
#line 245 "include/linux/drbd_genl.h"
static struct nla_policy detach_parms_nl_policy[2U]  = {      {(unsigned short)0, (unsigned short)0}, 
        {1U, (unsigned short)0}};
#line 132 "include/linux/genl_magic_func.h"
static struct nlattr *nested_attr_tb[128U]  ;
#line 102 "include/linux/drbd_genl.h"
static int __drbd_cfg_context_from_attrs(struct drbd_cfg_context *s , struct genl_info *info ,
                                         bool exclude_invariants ) 
{ 
  int maxtype ;
  struct nlattr *tla ;
  struct nlattr **ntb ;
  struct nlattr *nla ;
  int err ;
  size_t tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 97
  maxtype = 4;
#line 97
  tla = *(info->attrs + 2UL);
#line 97
  ntb = (struct nlattr **)(& nested_attr_tb);
#line 97
  if ((unsigned long )tla == (unsigned long )((struct nlattr *)0)) {
#line 97
    return (-42);
  } else {

  }
#line 97
  err = drbd_nla_parse_nested(ntb, maxtype, tla, (struct nla_policy  const  *)(& drbd_cfg_context_nl_policy));
#line 97
  if (err != 0) {
#line 97
    return (err);
  } else {

  }
#line 97
  nla = *(ntb + 1UL);
#line 97
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 97
    if ((unsigned long )s != (unsigned long )((struct drbd_cfg_context *)0)) {
#line 97
      s->ctx_volume = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 97
  nla = *(ntb + 2UL);
#line 97
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 97
    if ((unsigned long )s != (unsigned long )((struct drbd_cfg_context *)0)) {
#line 97
      tmp = nla_strlcpy((char *)(& s->ctx_resource_name), (struct nlattr  const  *)nla,
                        128UL);
#line 97
      s->ctx_resource_name_len = (__u32 )tmp;
    } else {

    }
  } else {

  }
#line 97
  nla = *(ntb + 3UL);
#line 97
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 97
    if ((unsigned long )s != (unsigned long )((struct drbd_cfg_context *)0)) {
#line 97
      tmp___0 = nla_memcpy((void *)(& s->ctx_my_addr), (struct nlattr  const  *)nla,
                           128);
#line 97
      s->ctx_my_addr_len = (__u32 )tmp___0;
    } else {

    }
  } else {

  }
#line 97
  nla = *(ntb + 4UL);
#line 97
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 97
    if ((unsigned long )s != (unsigned long )((struct drbd_cfg_context *)0)) {
#line 97
      tmp___1 = nla_memcpy((void *)(& s->ctx_peer_addr), (struct nlattr  const  *)nla,
                           128);
#line 97
      s->ctx_peer_addr_len = (__u32 )tmp___1;
    } else {

    }
  } else {

  }
#line 97
  return (0);
}
}
#line 102 "include/linux/drbd_genl.h"
static int drbd_cfg_context_from_attrs(struct drbd_cfg_context *s , struct genl_info *info ) 
{ 
  int tmp ;

  {
#line 97
  tmp = __drbd_cfg_context_from_attrs(s, info, 0);
#line 97
  return (tmp);
}
}
#line 135 "include/linux/drbd_genl.h"
static int __disk_conf_from_attrs(struct disk_conf *s , struct genl_info *info , bool exclude_invariants ) 
{ 
  int maxtype ;
  struct nlattr *tla ;
  struct nlattr **ntb ;
  struct nlattr *nla ;
  int err ;
  size_t tmp ;
  size_t tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u8 tmp___3 ;
  u8 tmp___4 ;
  u8 tmp___5 ;
  u8 tmp___6 ;
  u8 tmp___7 ;

  {
#line 104
  maxtype = 23;
#line 104
  tla = *(info->attrs + 3UL);
#line 104
  ntb = (struct nlattr **)(& nested_attr_tb);
#line 104
  if ((unsigned long )tla == (unsigned long )((struct nlattr *)0)) {
#line 104
    return (-42);
  } else {

  }
#line 104
  err = drbd_nla_parse_nested(ntb, maxtype, tla, (struct nla_policy  const  *)(& disk_conf_nl_policy));
#line 104
  if (err != 0) {
#line 104
    return (err);
  } else {

  }
#line 104
  nla = *(ntb + 1UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((int )exclude_invariants) {
#line 104
      printk("\016<< must not change invariant attr: %s\n", (char *)"backing_dev");
#line 104
      return (-17);
    } else {

    }
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      tmp = nla_strlcpy((char *)(& s->backing_dev), (struct nlattr  const  *)nla,
                        128UL);
#line 104
      s->backing_dev_len = (__u32 )tmp;
    } else {

    }
  } else
#line 104
  if ((int )exclude_invariants) {

  } else {
#line 104
    printk("\016<< missing attr: %s\n", (char *)"backing_dev");
#line 104
    return (-42);
  }
#line 104
  nla = *(ntb + 2UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((int )exclude_invariants) {
#line 104
      printk("\016<< must not change invariant attr: %s\n", (char *)"meta_dev");
#line 104
      return (-17);
    } else {

    }
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      tmp___0 = nla_strlcpy((char *)(& s->meta_dev), (struct nlattr  const  *)nla,
                            128UL);
#line 104
      s->meta_dev_len = (__u32 )tmp___0;
    } else {

    }
  } else
#line 104
  if ((int )exclude_invariants) {

  } else {
#line 104
    printk("\016<< missing attr: %s\n", (char *)"meta_dev");
#line 104
    return (-42);
  }
#line 104
  nla = *(ntb + 3UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((int )exclude_invariants) {
#line 104
      printk("\016<< must not change invariant attr: %s\n", (char *)"meta_dev_idx");
#line 104
      return (-17);
    } else {

    }
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      tmp___1 = nla_get_u32((struct nlattr  const  *)nla);
#line 104
      s->meta_dev_idx = (__s32 )tmp___1;
    } else {

    }
  } else
#line 104
  if ((int )exclude_invariants) {

  } else {
#line 104
    printk("\016<< missing attr: %s\n", (char *)"meta_dev_idx");
#line 104
    return (-42);
  }
#line 104
  nla = *(ntb + 4UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((int )exclude_invariants) {
#line 104
      printk("\016<< must not change invariant attr: %s\n", (char *)"disk_size");
#line 104
      return (-17);
    } else {

    }
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      s->disk_size = nla_get_u64((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 5UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((int )exclude_invariants) {
#line 104
      printk("\016<< must not change invariant attr: %s\n", (char *)"max_bio_bvecs");
#line 104
      return (-17);
    } else {

    }
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      s->max_bio_bvecs = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 6UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      s->on_io_error = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 7UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      s->fencing = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 8UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      s->resync_rate = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 9UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      tmp___2 = nla_get_u32((struct nlattr  const  *)nla);
#line 104
      s->resync_after = (__s32 )tmp___2;
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 10UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      s->al_extents = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 11UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      s->c_plan_ahead = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 12UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      s->c_delay_target = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 13UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      s->c_fill_target = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 14UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      s->c_max_rate = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 15UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      s->c_min_rate = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 16UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      tmp___3 = nla_get_u8((struct nlattr  const  *)nla);
#line 104
      s->disk_barrier = (char )tmp___3;
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 17UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      tmp___4 = nla_get_u8((struct nlattr  const  *)nla);
#line 104
      s->disk_flushes = (char )tmp___4;
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 18UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      tmp___5 = nla_get_u8((struct nlattr  const  *)nla);
#line 104
      s->disk_drain = (char )tmp___5;
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 19UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      tmp___6 = nla_get_u8((struct nlattr  const  *)nla);
#line 104
      s->md_flushes = (char )tmp___6;
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 20UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      s->disk_timeout = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 21UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      s->read_balancing = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 104
  nla = *(ntb + 23UL);
#line 104
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 104
    if ((unsigned long )s != (unsigned long )((struct disk_conf *)0)) {
#line 104
      tmp___7 = nla_get_u8((struct nlattr  const  *)nla);
#line 104
      s->al_updates = (char )tmp___7;
    } else {

    }
  } else {

  }
#line 104
  return (0);
}
}
#line 135 "include/linux/drbd_genl.h"
static int disk_conf_from_attrs(struct disk_conf *s , struct genl_info *info ) 
{ 
  int tmp ;

  {
#line 104
  tmp = __disk_conf_from_attrs(s, info, 0);
#line 104
  return (tmp);
}
}
#line 135 "include/linux/drbd_genl.h"
static int disk_conf_from_attrs_for_change(struct disk_conf *s , struct genl_info *info ) 
{ 
  int tmp ;

  {
#line 104
  tmp = __disk_conf_from_attrs(s, info, 1);
#line 104
  return (tmp);
}
}
#line 140 "include/linux/drbd_genl.h"
static int __res_opts_from_attrs(struct res_opts *s , struct genl_info *info , bool exclude_invariants ) 
{ 
  int maxtype ;
  struct nlattr *tla ;
  struct nlattr **ntb ;
  struct nlattr *nla ;
  int err ;
  size_t tmp ;

  {
#line 137
  maxtype = 2;
#line 137
  tla = *(info->attrs + 4UL);
#line 137
  ntb = (struct nlattr **)(& nested_attr_tb);
#line 137
  if ((unsigned long )tla == (unsigned long )((struct nlattr *)0)) {
#line 137
    return (-42);
  } else {

  }
#line 137
  err = drbd_nla_parse_nested(ntb, maxtype, tla, (struct nla_policy  const  *)(& res_opts_nl_policy));
#line 137
  if (err != 0) {
#line 137
    return (err);
  } else {

  }
#line 137
  nla = *(ntb + 1UL);
#line 137
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 137
    if ((unsigned long )s != (unsigned long )((struct res_opts *)0)) {
#line 137
      tmp = nla_strlcpy((char *)(& s->cpu_mask), (struct nlattr  const  *)nla, 32UL);
#line 137
      s->cpu_mask_len = (__u32 )tmp;
    } else {

    }
  } else {

  }
#line 137
  nla = *(ntb + 2UL);
#line 137
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 137
    if ((unsigned long )s != (unsigned long )((struct res_opts *)0)) {
#line 137
      s->on_no_data = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 137
  return (0);
}
}
#line 140 "include/linux/drbd_genl.h"
static int res_opts_from_attrs(struct res_opts *s , struct genl_info *info ) 
{ 
  int tmp ;

  {
#line 137
  tmp = __res_opts_from_attrs(s, info, 0);
#line 137
  return (tmp);
}
}
#line 174 "include/linux/drbd_genl.h"
static int __net_conf_from_attrs(struct net_conf *s , struct genl_info *info , bool exclude_invariants ) 
{ 
  int maxtype ;
  struct nlattr *tla ;
  struct nlattr **ntb ;
  struct nlattr *nla ;
  int err ;
  size_t tmp ;
  size_t tmp___0 ;
  size_t tmp___1 ;
  size_t tmp___2 ;
  size_t tmp___3 ;
  u8 tmp___4 ;
  u8 tmp___5 ;
  u8 tmp___6 ;
  u8 tmp___7 ;
  u8 tmp___8 ;
  u8 tmp___9 ;

  {
#line 142
  maxtype = 29;
#line 142
  tla = *(info->attrs + 5UL);
#line 142
  ntb = (struct nlattr **)(& nested_attr_tb);
#line 142
  if ((unsigned long )tla == (unsigned long )((struct nlattr *)0)) {
#line 142
    return (-42);
  } else {

  }
#line 142
  err = drbd_nla_parse_nested(ntb, maxtype, tla, (struct nla_policy  const  *)(& net_conf_nl_policy));
#line 142
  if (err != 0) {
#line 142
    return (err);
  } else {

  }
#line 142
  nla = *(ntb + 1UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      tmp = nla_strlcpy((char *)(& s->shared_secret), (struct nlattr  const  *)nla,
                        64UL);
#line 142
      s->shared_secret_len = (__u32 )tmp;
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 2UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      tmp___0 = nla_strlcpy((char *)(& s->cram_hmac_alg), (struct nlattr  const  *)nla,
                            64UL);
#line 142
      s->cram_hmac_alg_len = (__u32 )tmp___0;
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 3UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      tmp___1 = nla_strlcpy((char *)(& s->integrity_alg), (struct nlattr  const  *)nla,
                            64UL);
#line 142
      s->integrity_alg_len = (__u32 )tmp___1;
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 4UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      tmp___2 = nla_strlcpy((char *)(& s->verify_alg), (struct nlattr  const  *)nla,
                            64UL);
#line 142
      s->verify_alg_len = (__u32 )tmp___2;
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 5UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      tmp___3 = nla_strlcpy((char *)(& s->csums_alg), (struct nlattr  const  *)nla,
                            64UL);
#line 142
      s->csums_alg_len = (__u32 )tmp___3;
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 6UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->wire_protocol = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 7UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->connect_int = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 8UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->timeout = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 9UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->ping_int = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 10UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->ping_timeo = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 11UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->sndbuf_size = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 12UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->rcvbuf_size = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 13UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->ko_count = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 14UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->max_buffers = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 15UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->max_epoch_size = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 16UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->unplug_watermark = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 17UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->after_sb_0p = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 18UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->after_sb_1p = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 19UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->after_sb_2p = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 20UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->rr_conflict = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 21UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->on_congestion = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 22UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->cong_fill = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 23UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      s->cong_extents = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 24UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      tmp___4 = nla_get_u8((struct nlattr  const  *)nla);
#line 142
      s->two_primaries = (char )tmp___4;
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 25UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((int )exclude_invariants) {
#line 142
      printk("\016<< must not change invariant attr: %s\n", (char *)"discard_my_data");
#line 142
      return (-17);
    } else {

    }
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      tmp___5 = nla_get_u8((struct nlattr  const  *)nla);
#line 142
      s->discard_my_data = (char )tmp___5;
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 26UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      tmp___6 = nla_get_u8((struct nlattr  const  *)nla);
#line 142
      s->tcp_cork = (char )tmp___6;
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 27UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      tmp___7 = nla_get_u8((struct nlattr  const  *)nla);
#line 142
      s->always_asbp = (char )tmp___7;
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 28UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((int )exclude_invariants) {
#line 142
      printk("\016<< must not change invariant attr: %s\n", (char *)"tentative");
#line 142
      return (-17);
    } else {

    }
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      tmp___8 = nla_get_u8((struct nlattr  const  *)nla);
#line 142
      s->tentative = (char )tmp___8;
    } else {

    }
  } else {

  }
#line 142
  nla = *(ntb + 29UL);
#line 142
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 142
    if ((unsigned long )s != (unsigned long )((struct net_conf *)0)) {
#line 142
      tmp___9 = nla_get_u8((struct nlattr  const  *)nla);
#line 142
      s->use_rle = (char )tmp___9;
    } else {

    }
  } else {

  }
#line 142
  return (0);
}
}
#line 174 "include/linux/drbd_genl.h"
static int net_conf_from_attrs(struct net_conf *s , struct genl_info *info ) 
{ 
  int tmp ;

  {
#line 142
  tmp = __net_conf_from_attrs(s, info, 0);
#line 142
  return (tmp);
}
}
#line 174 "include/linux/drbd_genl.h"
static int net_conf_from_attrs_for_change(struct net_conf *s , struct genl_info *info ) 
{ 
  int tmp ;

  {
#line 142
  tmp = __net_conf_from_attrs(s, info, 1);
#line 142
  return (tmp);
}
}
#line 178 "include/linux/drbd_genl.h"
static int __set_role_parms_from_attrs(struct set_role_parms *s , struct genl_info *info ,
                                       bool exclude_invariants ) 
{ 
  int maxtype ;
  struct nlattr *tla ;
  struct nlattr **ntb ;
  struct nlattr *nla ;
  int err ;
  u8 tmp ;

  {
#line 176
  maxtype = 1;
#line 176
  tla = *(info->attrs + 6UL);
#line 176
  ntb = (struct nlattr **)(& nested_attr_tb);
#line 176
  if ((unsigned long )tla == (unsigned long )((struct nlattr *)0)) {
#line 176
    return (-42);
  } else {

  }
#line 176
  err = drbd_nla_parse_nested(ntb, maxtype, tla, (struct nla_policy  const  *)(& set_role_parms_nl_policy));
#line 176
  if (err != 0) {
#line 176
    return (err);
  } else {

  }
#line 176
  nla = *(ntb + 1UL);
#line 176
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 176
    if ((unsigned long )s != (unsigned long )((struct set_role_parms *)0)) {
#line 176
      tmp = nla_get_u8((struct nlattr  const  *)nla);
#line 176
      s->assume_uptodate = (char )tmp;
    } else {

    }
  } else {

  }
#line 176
  return (0);
}
}
#line 178 "include/linux/drbd_genl.h"
static int set_role_parms_from_attrs(struct set_role_parms *s , struct genl_info *info ) 
{ 
  int tmp ;

  {
#line 176
  tmp = __set_role_parms_from_attrs(s, info, 0);
#line 176
  return (tmp);
}
}
#line 184 "include/linux/drbd_genl.h"
static int __resize_parms_from_attrs(struct resize_parms *s , struct genl_info *info ,
                                     bool exclude_invariants ) 
{ 
  int maxtype ;
  struct nlattr *tla ;
  struct nlattr **ntb ;
  struct nlattr *nla ;
  int err ;
  u8 tmp ;
  u8 tmp___0 ;

  {
#line 180
  maxtype = 3;
#line 180
  tla = *(info->attrs + 7UL);
#line 180
  ntb = (struct nlattr **)(& nested_attr_tb);
#line 180
  if ((unsigned long )tla == (unsigned long )((struct nlattr *)0)) {
#line 180
    return (-42);
  } else {

  }
#line 180
  err = drbd_nla_parse_nested(ntb, maxtype, tla, (struct nla_policy  const  *)(& resize_parms_nl_policy));
#line 180
  if (err != 0) {
#line 180
    return (err);
  } else {

  }
#line 180
  nla = *(ntb + 1UL);
#line 180
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 180
    if ((unsigned long )s != (unsigned long )((struct resize_parms *)0)) {
#line 180
      s->resize_size = nla_get_u64((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 180
  nla = *(ntb + 2UL);
#line 180
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 180
    if ((unsigned long )s != (unsigned long )((struct resize_parms *)0)) {
#line 180
      tmp = nla_get_u8((struct nlattr  const  *)nla);
#line 180
      s->resize_force = (char )tmp;
    } else {

    }
  } else {

  }
#line 180
  nla = *(ntb + 3UL);
#line 180
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 180
    if ((unsigned long )s != (unsigned long )((struct resize_parms *)0)) {
#line 180
      tmp___0 = nla_get_u8((struct nlattr  const  *)nla);
#line 180
      s->no_resync = (char )tmp___0;
    } else {

    }
  } else {

  }
#line 180
  return (0);
}
}
#line 184 "include/linux/drbd_genl.h"
static int resize_parms_from_attrs(struct resize_parms *s , struct genl_info *info ) 
{ 
  int tmp ;

  {
#line 180
  tmp = __resize_parms_from_attrs(s, info, 0);
#line 180
  return (tmp);
}
}
#line 229 "include/linux/drbd_genl.h"
static int __start_ov_parms_from_attrs(struct start_ov_parms *s , struct genl_info *info ,
                                       bool exclude_invariants ) 
{ 
  int maxtype ;
  struct nlattr *tla ;
  struct nlattr **ntb ;
  struct nlattr *nla ;
  int err ;

  {
#line 226
  maxtype = 2;
#line 226
  tla = *(info->attrs + 9UL);
#line 226
  ntb = (struct nlattr **)(& nested_attr_tb);
#line 226
  if ((unsigned long )tla == (unsigned long )((struct nlattr *)0)) {
#line 226
    return (-42);
  } else {

  }
#line 226
  err = drbd_nla_parse_nested(ntb, maxtype, tla, (struct nla_policy  const  *)(& start_ov_parms_nl_policy));
#line 226
  if (err != 0) {
#line 226
    return (err);
  } else {

  }
#line 226
  nla = *(ntb + 1UL);
#line 226
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 226
    if ((unsigned long )s != (unsigned long )((struct start_ov_parms *)0)) {
#line 226
      s->ov_start_sector = nla_get_u64((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 226
  nla = *(ntb + 2UL);
#line 226
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 226
    if ((unsigned long )s != (unsigned long )((struct start_ov_parms *)0)) {
#line 226
      s->ov_stop_sector = nla_get_u64((struct nlattr  const  *)nla);
    } else {

    }
  } else {

  }
#line 226
  return (0);
}
}
#line 229 "include/linux/drbd_genl.h"
static int start_ov_parms_from_attrs(struct start_ov_parms *s , struct genl_info *info ) 
{ 
  int tmp ;

  {
#line 226
  tmp = __start_ov_parms_from_attrs(s, info, 0);
#line 226
  return (tmp);
}
}
#line 233 "include/linux/drbd_genl.h"
static int __new_c_uuid_parms_from_attrs(struct new_c_uuid_parms *s , struct genl_info *info ,
                                         bool exclude_invariants ) 
{ 
  int maxtype ;
  struct nlattr *tla ;
  struct nlattr **ntb ;
  struct nlattr *nla ;
  int err ;
  u8 tmp ;

  {
#line 231
  maxtype = 1;
#line 231
  tla = *(info->attrs + 10UL);
#line 231
  ntb = (struct nlattr **)(& nested_attr_tb);
#line 231
  if ((unsigned long )tla == (unsigned long )((struct nlattr *)0)) {
#line 231
    return (-42);
  } else {

  }
#line 231
  err = drbd_nla_parse_nested(ntb, maxtype, tla, (struct nla_policy  const  *)(& new_c_uuid_parms_nl_policy));
#line 231
  if (err != 0) {
#line 231
    return (err);
  } else {

  }
#line 231
  nla = *(ntb + 1UL);
#line 231
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 231
    if ((unsigned long )s != (unsigned long )((struct new_c_uuid_parms *)0)) {
#line 231
      tmp = nla_get_u8((struct nlattr  const  *)nla);
#line 231
      s->clear_bm = (char )tmp;
    } else {

    }
  } else {

  }
#line 231
  return (0);
}
}
#line 233 "include/linux/drbd_genl.h"
static int new_c_uuid_parms_from_attrs(struct new_c_uuid_parms *s , struct genl_info *info ) 
{ 
  int tmp ;

  {
#line 231
  tmp = __new_c_uuid_parms_from_attrs(s, info, 0);
#line 231
  return (tmp);
}
}
#line 241 "include/linux/drbd_genl.h"
static int __disconnect_parms_from_attrs(struct disconnect_parms *s , struct genl_info *info ,
                                         bool exclude_invariants ) 
{ 
  int maxtype ;
  struct nlattr *tla ;
  struct nlattr **ntb ;
  struct nlattr *nla ;
  int err ;
  u8 tmp ;

  {
#line 239
  maxtype = 1;
#line 239
  tla = *(info->attrs + 12UL);
#line 239
  ntb = (struct nlattr **)(& nested_attr_tb);
#line 239
  if ((unsigned long )tla == (unsigned long )((struct nlattr *)0)) {
#line 239
    return (-42);
  } else {

  }
#line 239
  err = drbd_nla_parse_nested(ntb, maxtype, tla, (struct nla_policy  const  *)(& disconnect_parms_nl_policy));
#line 239
  if (err != 0) {
#line 239
    return (err);
  } else {

  }
#line 239
  nla = *(ntb + 1UL);
#line 239
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 239
    if ((unsigned long )s != (unsigned long )((struct disconnect_parms *)0)) {
#line 239
      tmp = nla_get_u8((struct nlattr  const  *)nla);
#line 239
      s->force_disconnect = (char )tmp;
    } else {

    }
  } else {

  }
#line 239
  return (0);
}
}
#line 241 "include/linux/drbd_genl.h"
static int disconnect_parms_from_attrs(struct disconnect_parms *s , struct genl_info *info ) 
{ 
  int tmp ;

  {
#line 239
  tmp = __disconnect_parms_from_attrs(s, info, 0);
#line 239
  return (tmp);
}
}
#line 245 "include/linux/drbd_genl.h"
static int __detach_parms_from_attrs(struct detach_parms *s , struct genl_info *info ,
                                     bool exclude_invariants ) 
{ 
  int maxtype ;
  struct nlattr *tla ;
  struct nlattr **ntb ;
  struct nlattr *nla ;
  int err ;
  u8 tmp ;

  {
#line 243
  maxtype = 1;
#line 243
  tla = *(info->attrs + 13UL);
#line 243
  ntb = (struct nlattr **)(& nested_attr_tb);
#line 243
  if ((unsigned long )tla == (unsigned long )((struct nlattr *)0)) {
#line 243
    return (-42);
  } else {

  }
#line 243
  err = drbd_nla_parse_nested(ntb, maxtype, tla, (struct nla_policy  const  *)(& detach_parms_nl_policy));
#line 243
  if (err != 0) {
#line 243
    return (err);
  } else {

  }
#line 243
  nla = *(ntb + 1UL);
#line 243
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 243
    if ((unsigned long )s != (unsigned long )((struct detach_parms *)0)) {
#line 243
      tmp = nla_get_u8((struct nlattr  const  *)nla);
#line 243
      s->force_detach = (char )tmp;
    } else {

    }
  } else {

  }
#line 243
  return (0);
}
}
#line 245 "include/linux/drbd_genl.h"
static int detach_parms_from_attrs(struct detach_parms *s , struct genl_info *info ) 
{ 
  int tmp ;

  {
#line 243
  tmp = __detach_parms_from_attrs(s, info, 0);
#line 243
  return (tmp);
}
}
#line 221 "include/linux/genl_magic_func.h"
char const   *drbd_genl_cmd_to_str(__u8 cmd ) 
{ 


  {
#line 223
  switch ((int )cmd) {
  case 2: ;
#line 263 "include/linux/drbd_genl.h"
  return ("DRBD_ADM_GET_STATUS");
  case 5: ;
#line 277
  return ("DRBD_ADM_NEW_MINOR");
  case 6: ;
#line 279
  return ("DRBD_ADM_DEL_MINOR");
  case 7: ;
#line 283
  return ("DRBD_ADM_NEW_RESOURCE");
  case 8: ;
#line 285
  return ("DRBD_ADM_DEL_RESOURCE");
  case 9: ;
#line 288
  return ("DRBD_ADM_RESOURCE_OPTS");
  case 10: ;
#line 294
  return ("DRBD_ADM_CONNECT");
  case 29: ;
#line 301
  return ("DRBD_ADM_CHG_NET_OPTS");
  case 11: ;
#line 308
  return ("DRBD_ADM_DISCONNECT");
  case 12: ;
#line 311
  return ("DRBD_ADM_ATTACH");
  case 28: ;
#line 317
  return ("DRBD_ADM_CHG_DISK_OPTS");
  case 13: ;
#line 323
  return ("DRBD_ADM_RESIZE");
  case 14: ;
#line 330
  return ("DRBD_ADM_PRIMARY");
  case 15: ;
#line 337
  return ("DRBD_ADM_SECONDARY");
  case 16: ;
#line 344
  return ("DRBD_ADM_NEW_C_UUID");
  case 17: ;
#line 351
  return ("DRBD_ADM_START_OV");
  case 18: ;
#line 357
  return ("DRBD_ADM_DETACH");
  case 19: ;
#line 361
  return ("DRBD_ADM_INVALIDATE");
  case 20: ;
#line 363
  return ("DRBD_ADM_INVAL_PEER");
  case 21: ;
#line 365
  return ("DRBD_ADM_PAUSE_SYNC");
  case 22: ;
#line 367
  return ("DRBD_ADM_RESUME_SYNC");
  case 23: ;
#line 369
  return ("DRBD_ADM_SUSPEND_IO");
  case 24: ;
#line 371
  return ("DRBD_ADM_RESUME_IO");
  case 25: ;
#line 373
  return ("DRBD_ADM_OUTDATE");
  case 26: ;
#line 375
  return ("DRBD_ADM_GET_TIMEOUT_TYPE");
  case 27: ;
#line 377
  return ("DRBD_ADM_DOWN");
  default: ;
#line 229 "include/linux/genl_magic_func.h"
  return ("unknown");
  }
}
}
#line 249 "include/linux/genl_magic_func.h"
static struct genl_ops drbd_genl_ops[26U]  = 
#line 249
  {      {2U, (unsigned char)0, 0U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_get_status, & drbd_adm_get_status_all, 0, {0, 0}}, 
        {5U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_add_minor, 0, 0, {0, 0}}, 
        {6U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_delete_minor, 0, 0, {0, 0}}, 
        {7U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_new_resource, 0, 0, {0, 0}}, 
        {8U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_del_resource, 0, 0, {0, 0}}, 
        {9U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_resource_opts, 0, 0, {0, 0}}, 
        {10U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_connect, 0, 0, {0, 0}}, 
        {29U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_net_opts, 0, 0, {0, 0}}, 
        {11U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_disconnect, 0, 0, {0, 0}}, 
        {12U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_attach, 0, 0, {0, 0}}, 
        {28U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_disk_opts, 0, 0, {0, 0}}, 
        {13U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_resize, 0, 0, {0, 0}}, 
        {14U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_set_role, 0, 0, {0, 0}}, 
        {15U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_set_role, 0, 0, {0, 0}}, 
        {16U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_new_c_uuid, 0, 0, {0, 0}}, 
        {17U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_start_ov, 0, 0, {0, 0}}, 
        {18U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_detach, 0, 0, {0, 0}}, 
        {19U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_invalidate, 0, 0, {0, 0}}, 
        {20U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_invalidate_peer, 0, 0, {0, 0}}, 
        {21U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_pause_sync, 0, 0, {0, 0}}, 
        {22U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_resume_sync, 0, 0, {0, 0}}, 
        {23U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_suspend_io, 0, 0, {0, 0}}, 
        {24U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_resume_io, 0, 0, {0, 0}}, 
        {25U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_outdate, 0, 0, {0, 0}}, 
        {26U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_get_timeout_type, 0, 0, {0, 0}}, 
        {27U, (unsigned char)0, 1U, (struct nla_policy  const  *)(& drbd_tla_nl_policy),
      & drbd_adm_down, 0, 0, {0, 0}}};
#line 262 "include/linux/genl_magic_func.h"
static struct genl_family drbd_genl_family  = 
#line 262
     {0U, 8U, {'d', 'r', 'b', 'd', '\000'}, 1U, 13U, (_Bool)0, 0, 0, 0, {0, 0}, {0,
                                                                               0},
    {0, 0}};
#line 250 "include/linux/drbd_genl.h"
static struct genl_multicast_group drbd_mcg_events  =    {0, {0, 0}, {'e', 'v', 'e', 'n', 't', 's', '\000'}, 0U};
#line 250 "include/linux/drbd_genl.h"
static int drbd_genl_multicast_events(struct sk_buff *skb , gfp_t flags ) 
{ 
  unsigned int group_id ;
  int tmp ;

  {
#line 250
  group_id = drbd_mcg_events.id;
#line 250
  if (group_id == 0U) {
#line 250
    return (-22);
  } else {

  }
#line 250
  tmp = genlmsg_multicast(skb, 0U, group_id, flags);
#line 250
  return (tmp);
}
}
#line 294 "include/linux/genl_magic_func.h"
int drbd_genl_register(void) 
{ 
  int err ;
  int tmp ;

  {
#line 296
  tmp = genl_register_family_with_ops(& drbd_genl_family, (struct genl_ops *)(& drbd_genl_ops),
                                      26UL);
#line 296
  err = tmp;
#line 298
  if (err != 0) {
#line 299
    return (err);
  } else {

  }
#line 250 "include/linux/drbd_genl.h"
  err = genl_register_mc_group(& drbd_genl_family, & drbd_mcg_events);
#line 250
  if (err != 0) {
#line 250
    goto fail;
  } else {
#line 250
    printk("\016%s: mcg %s: %u\n", (char *)"events", (char *)"drbd", drbd_mcg_events.id);
  }
#line 315 "include/linux/genl_magic_func.h"
  return (0);
  fail: 
#line 317
  genl_unregister_family(& drbd_genl_family);
#line 318
  return (err);
}
}
#line 321 "include/linux/genl_magic_func.h"
void drbd_genl_unregister(void) 
{ 


  {
#line 323
  genl_unregister_family(& drbd_genl_family);
#line 324
  return;
}
}
#line 135 "include/linux/drbd_genl.h"
static int disk_conf_to_skb(struct sk_buff *skb , struct disk_conf *s , bool const   exclude_sensitive ) 
{ 
  struct nlattr *tla ;
  struct nlattr *tmp ;
  int __min1 ;
  int __min2 ;
  int tmp___0 ;
  int __min1___0 ;
  int __min2___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;

  {
#line 104
  tmp = nla_nest_start(skb, 3);
#line 104
  tla = tmp;
#line 104
  if ((unsigned long )tla == (unsigned long )((struct nlattr *)0)) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  __min1 = 128;
#line 104
  __min2 = (int )(s->backing_dev_len + 1U);
#line 104
  tmp___0 = nla_put(skb, 1, __min1 < __min2 ? __min1 : __min2, (void const   *)(& s->backing_dev));
#line 104
  if (tmp___0 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  __min1___0 = 128;
#line 104
  __min2___0 = (int )(s->meta_dev_len + 1U);
#line 104
  tmp___1 = nla_put(skb, 2, __min1___0 < __min2___0 ? __min1___0 : __min2___0, (void const   *)(& s->meta_dev));
#line 104
  if (tmp___1 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___2 = nla_put_u32(skb, 3, (u32 )s->meta_dev_idx);
#line 104
  if (tmp___2 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___3 = nla_put_u64(skb, 4, s->disk_size);
#line 104
  if (tmp___3 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___4 = nla_put_u32(skb, 5, s->max_bio_bvecs);
#line 104
  if (tmp___4 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___5 = nla_put_u32(skb, 6, s->on_io_error);
#line 104
  if (tmp___5 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___6 = nla_put_u32(skb, 7, s->fencing);
#line 104
  if (tmp___6 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___7 = nla_put_u32(skb, 8, s->resync_rate);
#line 104
  if (tmp___7 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___8 = nla_put_u32(skb, 9, (u32 )s->resync_after);
#line 104
  if (tmp___8 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___9 = nla_put_u32(skb, 10, s->al_extents);
#line 104
  if (tmp___9 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___10 = nla_put_u32(skb, 11, s->c_plan_ahead);
#line 104
  if (tmp___10 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___11 = nla_put_u32(skb, 12, s->c_delay_target);
#line 104
  if (tmp___11 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___12 = nla_put_u32(skb, 13, s->c_fill_target);
#line 104
  if (tmp___12 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___13 = nla_put_u32(skb, 14, s->c_max_rate);
#line 104
  if (tmp___13 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___14 = nla_put_u32(skb, 15, s->c_min_rate);
#line 104
  if (tmp___14 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___15 = nla_put_u8(skb, 16, (int )((u8 )s->disk_barrier));
#line 104
  if (tmp___15 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___16 = nla_put_u8(skb, 17, (int )((u8 )s->disk_flushes));
#line 104
  if (tmp___16 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___17 = nla_put_u8(skb, 18, (int )((u8 )s->disk_drain));
#line 104
  if (tmp___17 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___18 = nla_put_u8(skb, 19, (int )((u8 )s->md_flushes));
#line 104
  if (tmp___18 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___19 = nla_put_u32(skb, 20, s->disk_timeout);
#line 104
  if (tmp___19 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___20 = nla_put_u32(skb, 21, s->read_balancing);
#line 104
  if (tmp___20 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  tmp___21 = nla_put_u8(skb, 23, (int )((u8 )s->al_updates));
#line 104
  if (tmp___21 != 0) {
#line 104
    goto nla_put_failure;
  } else {

  }
#line 104
  nla_nest_end(skb, tla);
#line 104
  return (0);
  nla_put_failure: ;
#line 104
  if ((unsigned long )tla != (unsigned long )((struct nlattr *)0)) {
#line 104
    nla_nest_cancel(skb, tla);
  } else {

  }
#line 104
  return (-90);
}
}
#line 140 "include/linux/drbd_genl.h"
static int res_opts_to_skb(struct sk_buff *skb , struct res_opts *s , bool const   exclude_sensitive ) 
{ 
  struct nlattr *tla ;
  struct nlattr *tmp ;
  int __min1 ;
  int __min2 ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 137
  tmp = nla_nest_start(skb, 4);
#line 137
  tla = tmp;
#line 137
  if ((unsigned long )tla == (unsigned long )((struct nlattr *)0)) {
#line 137
    goto nla_put_failure;
  } else {

  }
#line 137
  __min1 = 32;
#line 137
  __min2 = (int )(s->cpu_mask_len + 1U);
#line 137
  tmp___0 = nla_put(skb, 1, __min1 < __min2 ? __min1 : __min2, (void const   *)(& s->cpu_mask));
#line 137
  if (tmp___0 != 0) {
#line 137
    goto nla_put_failure;
  } else {

  }
#line 137
  tmp___1 = nla_put_u32(skb, 2, s->on_no_data);
#line 137
  if (tmp___1 != 0) {
#line 137
    goto nla_put_failure;
  } else {

  }
#line 137
  nla_nest_end(skb, tla);
#line 137
  return (0);
  nla_put_failure: ;
#line 137
  if ((unsigned long )tla != (unsigned long )((struct nlattr *)0)) {
#line 137
    nla_nest_cancel(skb, tla);
  } else {

  }
#line 137
  return (-90);
}
}
#line 174 "include/linux/drbd_genl.h"
static int net_conf_to_skb(struct sk_buff *skb , struct net_conf *s , bool const   exclude_sensitive ) 
{ 
  struct nlattr *tla ;
  struct nlattr *tmp ;
  int __min1 ;
  int __min2 ;
  int tmp___0 ;
  int __min1___0 ;
  int __min2___0 ;
  int tmp___1 ;
  int __min1___1 ;
  int __min2___1 ;
  int tmp___2 ;
  int __min1___2 ;
  int __min2___2 ;
  int tmp___3 ;
  int __min1___3 ;
  int __min2___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;

  {
#line 142
  tmp = nla_nest_start(skb, 5);
#line 142
  tla = tmp;
#line 142
  if ((unsigned long )tla == (unsigned long )((struct nlattr *)0)) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  if (! ((_Bool )exclude_sensitive)) {
#line 142
    __min1 = 64;
#line 142
    __min2 = (int )(s->shared_secret_len + 1U);
#line 142
    tmp___0 = nla_put(skb, 1, __min1 < __min2 ? __min1 : __min2, (void const   *)(& s->shared_secret));
#line 142
    if (tmp___0 != 0) {
#line 142
      goto nla_put_failure;
    } else {

    }
  } else {

  }
#line 142
  __min1___0 = 64;
#line 142
  __min2___0 = (int )(s->cram_hmac_alg_len + 1U);
#line 142
  tmp___1 = nla_put(skb, 2, __min1___0 < __min2___0 ? __min1___0 : __min2___0, (void const   *)(& s->cram_hmac_alg));
#line 142
  if (tmp___1 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  __min1___1 = 64;
#line 142
  __min2___1 = (int )(s->integrity_alg_len + 1U);
#line 142
  tmp___2 = nla_put(skb, 3, __min1___1 < __min2___1 ? __min1___1 : __min2___1, (void const   *)(& s->integrity_alg));
#line 142
  if (tmp___2 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  __min1___2 = 64;
#line 142
  __min2___2 = (int )(s->verify_alg_len + 1U);
#line 142
  tmp___3 = nla_put(skb, 4, __min1___2 < __min2___2 ? __min1___2 : __min2___2, (void const   *)(& s->verify_alg));
#line 142
  if (tmp___3 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  __min1___3 = 64;
#line 142
  __min2___3 = (int )(s->csums_alg_len + 1U);
#line 142
  tmp___4 = nla_put(skb, 5, __min1___3 < __min2___3 ? __min1___3 : __min2___3, (void const   *)(& s->csums_alg));
#line 142
  if (tmp___4 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___5 = nla_put_u32(skb, 6, s->wire_protocol);
#line 142
  if (tmp___5 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___6 = nla_put_u32(skb, 7, s->connect_int);
#line 142
  if (tmp___6 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___7 = nla_put_u32(skb, 8, s->timeout);
#line 142
  if (tmp___7 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___8 = nla_put_u32(skb, 9, s->ping_int);
#line 142
  if (tmp___8 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___9 = nla_put_u32(skb, 10, s->ping_timeo);
#line 142
  if (tmp___9 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___10 = nla_put_u32(skb, 11, s->sndbuf_size);
#line 142
  if (tmp___10 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___11 = nla_put_u32(skb, 12, s->rcvbuf_size);
#line 142
  if (tmp___11 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___12 = nla_put_u32(skb, 13, s->ko_count);
#line 142
  if (tmp___12 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___13 = nla_put_u32(skb, 14, s->max_buffers);
#line 142
  if (tmp___13 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___14 = nla_put_u32(skb, 15, s->max_epoch_size);
#line 142
  if (tmp___14 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___15 = nla_put_u32(skb, 16, s->unplug_watermark);
#line 142
  if (tmp___15 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___16 = nla_put_u32(skb, 17, s->after_sb_0p);
#line 142
  if (tmp___16 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___17 = nla_put_u32(skb, 18, s->after_sb_1p);
#line 142
  if (tmp___17 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___18 = nla_put_u32(skb, 19, s->after_sb_2p);
#line 142
  if (tmp___18 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___19 = nla_put_u32(skb, 20, s->rr_conflict);
#line 142
  if (tmp___19 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___20 = nla_put_u32(skb, 21, s->on_congestion);
#line 142
  if (tmp___20 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___21 = nla_put_u32(skb, 22, s->cong_fill);
#line 142
  if (tmp___21 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___22 = nla_put_u32(skb, 23, s->cong_extents);
#line 142
  if (tmp___22 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___23 = nla_put_u8(skb, 24, (int )((u8 )s->two_primaries));
#line 142
  if (tmp___23 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___24 = nla_put_u8(skb, 25, (int )((u8 )s->discard_my_data));
#line 142
  if (tmp___24 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___25 = nla_put_u8(skb, 26, (int )((u8 )s->tcp_cork));
#line 142
  if (tmp___25 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___26 = nla_put_u8(skb, 27, (int )((u8 )s->always_asbp));
#line 142
  if (tmp___26 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___27 = nla_put_u8(skb, 28, (int )((u8 )s->tentative));
#line 142
  if (tmp___27 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  tmp___28 = nla_put_u8(skb, 29, (int )((u8 )s->use_rle));
#line 142
  if (tmp___28 != 0) {
#line 142
    goto nla_put_failure;
  } else {

  }
#line 142
  nla_nest_end(skb, tla);
#line 142
  return (0);
  nla_put_failure: ;
#line 142
  if ((unsigned long )tla != (unsigned long )((struct nlattr *)0)) {
#line 142
    nla_nest_cancel(skb, tla);
  } else {

  }
#line 142
  return (-90);
}
}
#line 237 "include/linux/drbd_genl.h"
static int timeout_parms_to_skb(struct sk_buff *skb , struct timeout_parms *s , bool const   exclude_sensitive ) 
{ 
  struct nlattr *tla ;
  struct nlattr *tmp ;
  int tmp___0 ;

  {
#line 235
  tmp = nla_nest_start(skb, 11);
#line 235
  tla = tmp;
#line 235
  if ((unsigned long )tla == (unsigned long )((struct nlattr *)0)) {
#line 235
    goto nla_put_failure;
  } else {

  }
#line 235
  tmp___0 = nla_put_u32(skb, 1, s->timeout_type);
#line 235
  if (tmp___0 != 0) {
#line 235
    goto nla_put_failure;
  } else {

  }
#line 235
  nla_nest_end(skb, tla);
#line 235
  return (0);
  nla_put_failure: ;
#line 235
  if ((unsigned long )tla != (unsigned long )((struct nlattr *)0)) {
#line 235
    nla_nest_cancel(skb, tla);
  } else {

  }
#line 235
  return (-90);
}
}
#line 237 "include/linux/drbd_genl.h"
__inline static int timeout_parms_to_priv_skb(struct sk_buff *skb , struct timeout_parms *s ) 
{ 
  int tmp ;

  {
#line 235
  tmp = timeout_parms_to_skb(skb, s, 0);
#line 235
  return (tmp);
}
}
#line 135
static void set_disk_conf_defaults(struct disk_conf *x ) ;
#line 135 "include/linux/drbd_genl.h"
static void set_disk_conf_defaults(struct disk_conf *x ) 
{ 


  {
#line 104
  x->on_io_error = 2U;
#line 104
  x->fencing = 0U;
#line 104
  x->resync_rate = 250U;
#line 104
  x->resync_after = -1;
#line 104
  x->al_extents = 1237U;
#line 104
  x->c_plan_ahead = 20U;
#line 104
  x->c_delay_target = 10U;
#line 104
  x->c_fill_target = 100U;
#line 104
  x->c_max_rate = 102400U;
#line 104
  x->c_min_rate = 250U;
#line 104
  x->disk_barrier = 0;
#line 104
  x->disk_flushes = 1;
#line 104
  x->disk_drain = 1;
#line 104
  x->md_flushes = 1;
#line 104
  x->disk_timeout = 0U;
#line 104
  x->read_balancing = 0U;
#line 104
  x->al_updates = 1;
#line 105
  return;
}
}
#line 140
static void set_res_opts_defaults(struct res_opts *x ) ;
#line 140 "include/linux/drbd_genl.h"
static void set_res_opts_defaults(struct res_opts *x ) 
{ 


  {
#line 137
  memset((void *)(& x->cpu_mask), 0, 32UL);
#line 137
  x->cpu_mask_len = 0U;
#line 137
  x->on_no_data = 0U;
#line 138
  return;
}
}
#line 174
static void set_net_conf_defaults(struct net_conf *x ) ;
#line 174 "include/linux/drbd_genl.h"
static void set_net_conf_defaults(struct net_conf *x ) 
{ 


  {
#line 142
  memset((void *)(& x->shared_secret), 0, 64UL);
#line 142
  x->shared_secret_len = 0U;
#line 142
  memset((void *)(& x->cram_hmac_alg), 0, 64UL);
#line 142
  x->cram_hmac_alg_len = 0U;
#line 142
  memset((void *)(& x->integrity_alg), 0, 64UL);
#line 142
  x->integrity_alg_len = 0U;
#line 142
  memset((void *)(& x->verify_alg), 0, 64UL);
#line 142
  x->verify_alg_len = 0U;
#line 142
  memset((void *)(& x->csums_alg), 0, 64UL);
#line 142
  x->csums_alg_len = 0U;
#line 142
  x->wire_protocol = 3U;
#line 142
  x->connect_int = 10U;
#line 142
  x->timeout = 60U;
#line 142
  x->ping_int = 10U;
#line 142
  x->ping_timeo = 5U;
#line 142
  x->sndbuf_size = 0U;
#line 142
  x->rcvbuf_size = 0U;
#line 142
  x->ko_count = 7U;
#line 142
  x->max_buffers = 2048U;
#line 142
  x->max_epoch_size = 2048U;
#line 142
  x->unplug_watermark = 128U;
#line 142
  x->after_sb_0p = 0U;
#line 142
  x->after_sb_1p = 0U;
#line 142
  x->after_sb_2p = 0U;
#line 142
  x->rr_conflict = 0U;
#line 142
  x->on_congestion = 0U;
#line 142
  x->cong_fill = 0U;
#line 142
  x->cong_extents = 1237U;
#line 142
  x->two_primaries = 0;
#line 142
  x->tcp_cork = 1;
#line 142
  x->always_asbp = 0;
#line 142
  x->use_rle = 1;
#line 143
  return;
}
}
#line 89 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_config_context adm_ctx  ;
#line 116 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_adm_send_reply(struct sk_buff *skb , struct genl_info *info ) 
{ 
  struct nlmsghdr *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;

  {
#line 118
  tmp = nlmsg_hdr((struct sk_buff  const  *)skb);
#line 118
  tmp___0 = nlmsg_data((struct nlmsghdr  const  *)tmp);
#line 118
  tmp___1 = genlmsg_data((struct genlmsghdr  const  *)tmp___0);
#line 118
  genlmsg_end(skb, tmp___1);
#line 119
  tmp___2 = genlmsg_reply(skb, info);
#line 119
  if (tmp___2 != 0) {
#line 120
    printk("\vdrbd: error sending genl reply\n");
  } else {

  }
#line 121
  return;
}
}
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_msg_put_info(char const   *info ) 
{ 
  struct sk_buff *skb ;
  struct nlattr *nla ;
  int err ;

  {
#line 127
  skb = adm_ctx.reply_skb;
#line 129
  err = -90;
#line 131
  if ((unsigned long )info == (unsigned long )((char const   *)0) || (int )((signed char )*info) == 0) {
#line 132
    return (0);
  } else {

  }
#line 134
  nla = nla_nest_start(skb, 1);
#line 135
  if ((unsigned long )nla == (unsigned long )((struct nlattr *)0)) {
#line 136
    return (err);
  } else {

  }
#line 138
  err = nla_put_string(skb, 16385, info);
#line 139
  if (err != 0) {
#line 140
    nla_nest_cancel(skb, nla);
#line 141
    return (err);
  } else {
#line 143
    nla_nest_end(skb, nla);
  }
#line 144
  return (0);
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_adm_prepare(struct sk_buff *skb , struct genl_info *info , unsigned int flags ) 
{ 
  struct drbd_genlmsghdr *d_in ;
  u8 cmd ;
  int err ;
  bool tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  struct nlattr *nla ;
  void *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;

  {
#line 158
  d_in = (struct drbd_genlmsghdr *)info->userhdr;
#line 159
  cmd = (info->genlhdr)->cmd;
#line 162
  memset((void *)(& adm_ctx), 0, 64UL);
#line 165
  if ((unsigned int )cmd != 2U) {
#line 165
    tmp = capable(12);
#line 165
    if (tmp) {
#line 165
      tmp___0 = 0;
    } else {
#line 165
      tmp___0 = 1;
    }
#line 165
    if (tmp___0) {
#line 166
      return (-1);
    } else {

    }
  } else {

  }
#line 168
  adm_ctx.reply_skb = genlmsg_new(3776UL, 208U);
#line 169
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 170
    err = -12;
#line 171
    goto fail;
  } else {

  }
#line 174
  tmp___1 = genlmsg_put_reply(adm_ctx.reply_skb, info, & drbd_genl_family, 0, (int )cmd);
#line 174
  adm_ctx.reply_dh = (struct drbd_genlmsghdr *)tmp___1;
#line 178
  if ((unsigned long )adm_ctx.reply_dh == (unsigned long )((struct drbd_genlmsghdr *)0)) {
#line 179
    err = -12;
#line 180
    goto fail;
  } else {

  }
#line 183
  (adm_ctx.reply_dh)->minor = d_in->minor;
#line 184
  (adm_ctx.reply_dh)->ldv_49550.ret_code = 101;
#line 186
  adm_ctx.volume = 4294967295U;
#line 187
  if ((unsigned long )*(info->attrs + 2UL) != (unsigned long )((struct nlattr *)0)) {
#line 190
    err = drbd_cfg_context_from_attrs(0, info);
#line 191
    if (err != 0) {
#line 192
      goto fail;
    } else {

    }
#line 196
    err = nla_put_nohdr(adm_ctx.reply_skb, (int )(*(info->attrs + 2UL))->nla_len,
                        (void const   *)*(info->attrs + 2UL));
#line 199
    if (err != 0) {
#line 200
      goto fail;
    } else {

    }
#line 203
    nla = nested_attr_tb[1];
#line 204
    if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 205
      adm_ctx.volume = nla_get_u32((struct nlattr  const  *)nla);
    } else {

    }
#line 206
    nla = nested_attr_tb[2];
#line 207
    if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 208
      tmp___2 = nla_data((struct nlattr  const  *)nla);
#line 208
      adm_ctx.resource_name = (char *)tmp___2;
    } else {

    }
#line 209
    adm_ctx.my_addr = nested_attr_tb[3];
#line 210
    adm_ctx.peer_addr = nested_attr_tb[4];
#line 211
    if ((unsigned long )adm_ctx.my_addr != (unsigned long )((struct nlattr *)0)) {
#line 211
      tmp___3 = nla_len((struct nlattr  const  *)adm_ctx.my_addr);
#line 211
      if ((unsigned int )tmp___3 > 128U) {
#line 215
        err = -22;
#line 216
        goto fail;
      } else {
#line 211
        goto _L;
      }
    } else
    _L: /* CIL Label */ 
#line 211
    if ((unsigned long )adm_ctx.peer_addr != (unsigned long )((struct nlattr *)0)) {
#line 211
      tmp___4 = nla_len((struct nlattr  const  *)adm_ctx.peer_addr);
#line 211
      if ((unsigned int )tmp___4 > 128U) {
#line 215
        err = -22;
#line 216
        goto fail;
      } else {

      }
    } else {

    }
  } else {

  }
#line 220
  adm_ctx.minor = d_in->minor;
#line 221
  adm_ctx.mdev = minor_to_mdev(d_in->minor);
#line 222
  adm_ctx.tconn = conn_get_by_name((char const   *)adm_ctx.resource_name);
#line 224
  if ((unsigned long )adm_ctx.mdev == (unsigned long )((struct drbd_conf *)0) && (int )flags & 1) {
#line 225
    drbd_msg_put_info("unknown minor");
#line 226
    return (127);
  } else {

  }
#line 228
  if ((unsigned long )adm_ctx.tconn == (unsigned long )((struct drbd_tconn *)0) && (flags & 2U) != 0U) {
#line 229
    drbd_msg_put_info("unknown resource");
#line 230
    return (162);
  } else {

  }
#line 233
  if ((flags & 4U) != 0U) {
#line 234
    if ((unsigned long )adm_ctx.tconn != (unsigned long )((struct drbd_tconn *)0) && (flags & 2U) == 0U) {
#line 235
      drbd_msg_put_info("no resource name expected");
#line 236
      return (162);
    } else {

    }
#line 238
    if ((unsigned long )adm_ctx.mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 239
      drbd_msg_put_info("no minor number expected");
#line 240
      return (162);
    } else {

    }
#line 242
    if ((unsigned long )adm_ctx.my_addr != (unsigned long )((struct nlattr *)0) && (unsigned long )adm_ctx.peer_addr != (unsigned long )((struct nlattr *)0)) {
#line 243
      tmp___5 = nla_len((struct nlattr  const  *)adm_ctx.peer_addr);
#line 243
      tmp___6 = nla_data((struct nlattr  const  *)adm_ctx.peer_addr);
#line 243
      tmp___7 = nla_len((struct nlattr  const  *)adm_ctx.my_addr);
#line 243
      tmp___8 = nla_data((struct nlattr  const  *)adm_ctx.my_addr);
#line 243
      adm_ctx.tconn = conn_get_by_addrs(tmp___8, tmp___7, tmp___6, tmp___5);
    } else {

    }
#line 247
    if ((unsigned long )adm_ctx.tconn == (unsigned long )((struct drbd_tconn *)0)) {
#line 248
      drbd_msg_put_info("unknown connection");
#line 249
      return (162);
    } else {

    }
  } else {

  }
#line 254
  if (((unsigned long )adm_ctx.mdev != (unsigned long )((struct drbd_conf *)0) && (unsigned long )adm_ctx.tconn != (unsigned long )((struct drbd_tconn *)0)) && (unsigned long )(adm_ctx.mdev)->tconn != (unsigned long )adm_ctx.tconn) {
#line 256
    printk("\frequest: minor=%u, resource=%s; but that minor belongs to connection %s\n",
           adm_ctx.minor, adm_ctx.resource_name, ((adm_ctx.mdev)->tconn)->name);
#line 259
    drbd_msg_put_info("minor exists in different resource");
#line 260
    return (162);
  } else {

  }
#line 262
  if (((unsigned long )adm_ctx.mdev != (unsigned long )((struct drbd_conf *)0) && adm_ctx.volume != 4294967295U) && adm_ctx.volume != (unsigned int )(adm_ctx.mdev)->vnr) {
#line 265
    printk("\frequest: minor=%u, volume=%u; but that minor is volume %u in %s\n",
           adm_ctx.minor, adm_ctx.volume, (adm_ctx.mdev)->vnr, ((adm_ctx.mdev)->tconn)->name);
#line 268
    drbd_msg_put_info("minor exists as different volume");
#line 269
    return (162);
  } else {

  }
#line 272
  return (101);
  fail: 
#line 275
  nlmsg_free(adm_ctx.reply_skb);
#line 276
  adm_ctx.reply_skb = 0;
#line 277
  return (err);
}
}
#line 280 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_adm_finish(struct genl_info *info , int retcode ) 
{ 


  {
#line 282
  if ((unsigned long )adm_ctx.tconn != (unsigned long )((struct drbd_tconn *)0)) {
#line 283
    kref_put(& (adm_ctx.tconn)->kref, & conn_destroy);
#line 284
    adm_ctx.tconn = 0;
  } else {

  }
#line 287
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 288
    return (-12);
  } else {

  }
#line 290
  (adm_ctx.reply_dh)->ldv_49550.ret_code = retcode;
#line 291
  drbd_adm_send_reply(adm_ctx.reply_skb, info);
#line 292
  return (0);
}
}
#line 295 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void setup_khelper_env(struct drbd_tconn *tconn , char **envp ) 
{ 
  char *afs ;

  {
#line 300
  if (tconn->my_addr_len == 0 || tconn->peer_addr_len == 0) {
#line 301
    return;
  } else {

  }
#line 303
  switch ((int )((struct sockaddr *)(& tconn->peer_addr))->sa_family) {
  case 10: 
#line 305
  afs = (char *)"ipv6";
#line 306
  snprintf(*(envp + 4UL), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& tconn->peer_addr))->sin6_addr);
#line 308
  goto ldv_52883;
  case 2: 
#line 310
  afs = (char *)"ipv4";
#line 311
  snprintf(*(envp + 4UL), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& tconn->peer_addr))->sin_addr);
#line 313
  goto ldv_52883;
  default: 
#line 315
  afs = (char *)"ssocks";
#line 316
  snprintf(*(envp + 4UL), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& tconn->peer_addr))->sin_addr);
  }
  ldv_52883: 
#line 319
  snprintf(*(envp + 3UL), 20UL, "DRBD_PEER_AF=%s", afs);
#line 320
  return;
}
}
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char __constr_expr_0[20] ;
  char __constr_expr_1[60] ;
  char mb[12U] ;
  char *argv[4U] ;
  struct drbd_tconn *tconn ;
  struct sib_info sib ;
  int ret ;
  struct task_struct *tmp ;
  unsigned int tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 324
  __constr_expr_0[0] = (char)0;
#line 324
  __constr_expr_0[1] = (char)0;
#line 324
  __constr_expr_0[2] = (char)0;
#line 324
  __constr_expr_0[3] = (char)0;
#line 324
  __constr_expr_0[4] = (char)0;
#line 324
  __constr_expr_0[5] = (char)0;
#line 324
  __constr_expr_0[6] = (char)0;
#line 324
  __constr_expr_0[7] = (char)0;
#line 324
  __constr_expr_0[8] = (char)0;
#line 324
  __constr_expr_0[9] = (char)0;
#line 324
  __constr_expr_0[10] = (char)0;
#line 324
  __constr_expr_0[11] = (char)0;
#line 324
  __constr_expr_0[12] = (char)0;
#line 324
  __constr_expr_0[13] = (char)0;
#line 324
  __constr_expr_0[14] = (char)0;
#line 324
  __constr_expr_0[15] = (char)0;
#line 324
  __constr_expr_0[16] = (char)0;
#line 324
  __constr_expr_0[17] = (char)0;
#line 324
  __constr_expr_0[18] = (char)0;
#line 324
  __constr_expr_0[19] = (char)0;
#line 324
  __constr_expr_1[0] = (char)0;
#line 324
  __constr_expr_1[1] = (char)0;
#line 324
  __constr_expr_1[2] = (char)0;
#line 324
  __constr_expr_1[3] = (char)0;
#line 324
  __constr_expr_1[4] = (char)0;
#line 324
  __constr_expr_1[5] = (char)0;
#line 324
  __constr_expr_1[6] = (char)0;
#line 324
  __constr_expr_1[7] = (char)0;
#line 324
  __constr_expr_1[8] = (char)0;
#line 324
  __constr_expr_1[9] = (char)0;
#line 324
  __constr_expr_1[10] = (char)0;
#line 324
  __constr_expr_1[11] = (char)0;
#line 324
  __constr_expr_1[12] = (char)0;
#line 324
  __constr_expr_1[13] = (char)0;
#line 324
  __constr_expr_1[14] = (char)0;
#line 324
  __constr_expr_1[15] = (char)0;
#line 324
  __constr_expr_1[16] = (char)0;
#line 324
  __constr_expr_1[17] = (char)0;
#line 324
  __constr_expr_1[18] = (char)0;
#line 324
  __constr_expr_1[19] = (char)0;
#line 324
  __constr_expr_1[20] = (char)0;
#line 324
  __constr_expr_1[21] = (char)0;
#line 324
  __constr_expr_1[22] = (char)0;
#line 324
  __constr_expr_1[23] = (char)0;
#line 324
  __constr_expr_1[24] = (char)0;
#line 324
  __constr_expr_1[25] = (char)0;
#line 324
  __constr_expr_1[26] = (char)0;
#line 324
  __constr_expr_1[27] = (char)0;
#line 324
  __constr_expr_1[28] = (char)0;
#line 324
  __constr_expr_1[29] = (char)0;
#line 324
  __constr_expr_1[30] = (char)0;
#line 324
  __constr_expr_1[31] = (char)0;
#line 324
  __constr_expr_1[32] = (char)0;
#line 324
  __constr_expr_1[33] = (char)0;
#line 324
  __constr_expr_1[34] = (char)0;
#line 324
  __constr_expr_1[35] = (char)0;
#line 324
  __constr_expr_1[36] = (char)0;
#line 324
  __constr_expr_1[37] = (char)0;
#line 324
  __constr_expr_1[38] = (char)0;
#line 324
  __constr_expr_1[39] = (char)0;
#line 324
  __constr_expr_1[40] = (char)0;
#line 324
  __constr_expr_1[41] = (char)0;
#line 324
  __constr_expr_1[42] = (char)0;
#line 324
  __constr_expr_1[43] = (char)0;
#line 324
  __constr_expr_1[44] = (char)0;
#line 324
  __constr_expr_1[45] = (char)0;
#line 324
  __constr_expr_1[46] = (char)0;
#line 324
  __constr_expr_1[47] = (char)0;
#line 324
  __constr_expr_1[48] = (char)0;
#line 324
  __constr_expr_1[49] = (char)0;
#line 324
  __constr_expr_1[50] = (char)0;
#line 324
  __constr_expr_1[51] = (char)0;
#line 324
  __constr_expr_1[52] = (char)0;
#line 324
  __constr_expr_1[53] = (char)0;
#line 324
  __constr_expr_1[54] = (char)0;
#line 324
  __constr_expr_1[55] = (char)0;
#line 324
  __constr_expr_1[56] = (char)0;
#line 324
  __constr_expr_1[57] = (char)0;
#line 324
  __constr_expr_1[58] = (char)0;
#line 324
  __constr_expr_1[59] = (char)0;
#line 324
  envp[0] = (char *)"HOME=/";
#line 324
  envp[1] = (char *)"TERM=linux";
#line 324
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 324
  envp[3] = (char *)(& __constr_expr_0);
#line 324
  envp[4] = (char *)(& __constr_expr_1);
#line 324
  envp[5] = 0;
#line 331
  argv[0] = (char *)(& usermode_helper);
#line 331
  argv[1] = cmd;
#line 331
  argv[2] = (char *)(& mb);
#line 331
  argv[3] = 0;
#line 332
  tconn = mdev->tconn;
#line 336
  tmp = get_current();
#line 336
  if ((unsigned long )tmp == (unsigned long )tconn->worker.task) {
#line 337
    set_bit(11U, (unsigned long volatile   *)(& tconn->flags));
  } else {

  }
#line 339
  tmp___0 = mdev_to_minor(mdev);
#line 339
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp___0);
#line 340
  setup_khelper_env(tconn, (char **)(& envp));
#line 344
  drbd_md_sync(mdev);
#line 346
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 347
  sib.sib_reason = SIB_HELPER_PRE;
#line 348
  sib.ldv_51335.ldv_51330.helper_name = cmd;
#line 349
  drbd_bcast_event(mdev, (struct sib_info  const  *)(& sib));
#line 350
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            2);
#line 351
  if (ret != 0) {
#line 352
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 356
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 359
  sib.sib_reason = SIB_HELPER_POST;
#line 360
  sib.ldv_51335.ldv_51330.helper_exit_code = (unsigned int )ret;
#line 361
  drbd_bcast_event(mdev, (struct sib_info  const  *)(& sib));
#line 363
  tmp___1 = get_current();
#line 363
  if ((unsigned long )tmp___1 == (unsigned long )tconn->worker.task) {
#line 364
    clear_bit(11, (unsigned long volatile   *)(& tconn->flags));
  } else {

  }
#line 366
  if (ret < 0) {
#line 367
    ret = 0;
  } else {

  }
#line 369
  return (ret);
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int conn_khelper(struct drbd_tconn *tconn , char *cmd ) 
{ 
  char *envp[6U] ;
  char __constr_expr_0[20] ;
  char __constr_expr_1[60] ;
  char *argv[4U] ;
  int ret ;

  {
#line 374
  __constr_expr_0[0] = (char)0;
#line 374
  __constr_expr_0[1] = (char)0;
#line 374
  __constr_expr_0[2] = (char)0;
#line 374
  __constr_expr_0[3] = (char)0;
#line 374
  __constr_expr_0[4] = (char)0;
#line 374
  __constr_expr_0[5] = (char)0;
#line 374
  __constr_expr_0[6] = (char)0;
#line 374
  __constr_expr_0[7] = (char)0;
#line 374
  __constr_expr_0[8] = (char)0;
#line 374
  __constr_expr_0[9] = (char)0;
#line 374
  __constr_expr_0[10] = (char)0;
#line 374
  __constr_expr_0[11] = (char)0;
#line 374
  __constr_expr_0[12] = (char)0;
#line 374
  __constr_expr_0[13] = (char)0;
#line 374
  __constr_expr_0[14] = (char)0;
#line 374
  __constr_expr_0[15] = (char)0;
#line 374
  __constr_expr_0[16] = (char)0;
#line 374
  __constr_expr_0[17] = (char)0;
#line 374
  __constr_expr_0[18] = (char)0;
#line 374
  __constr_expr_0[19] = (char)0;
#line 374
  __constr_expr_1[0] = (char)0;
#line 374
  __constr_expr_1[1] = (char)0;
#line 374
  __constr_expr_1[2] = (char)0;
#line 374
  __constr_expr_1[3] = (char)0;
#line 374
  __constr_expr_1[4] = (char)0;
#line 374
  __constr_expr_1[5] = (char)0;
#line 374
  __constr_expr_1[6] = (char)0;
#line 374
  __constr_expr_1[7] = (char)0;
#line 374
  __constr_expr_1[8] = (char)0;
#line 374
  __constr_expr_1[9] = (char)0;
#line 374
  __constr_expr_1[10] = (char)0;
#line 374
  __constr_expr_1[11] = (char)0;
#line 374
  __constr_expr_1[12] = (char)0;
#line 374
  __constr_expr_1[13] = (char)0;
#line 374
  __constr_expr_1[14] = (char)0;
#line 374
  __constr_expr_1[15] = (char)0;
#line 374
  __constr_expr_1[16] = (char)0;
#line 374
  __constr_expr_1[17] = (char)0;
#line 374
  __constr_expr_1[18] = (char)0;
#line 374
  __constr_expr_1[19] = (char)0;
#line 374
  __constr_expr_1[20] = (char)0;
#line 374
  __constr_expr_1[21] = (char)0;
#line 374
  __constr_expr_1[22] = (char)0;
#line 374
  __constr_expr_1[23] = (char)0;
#line 374
  __constr_expr_1[24] = (char)0;
#line 374
  __constr_expr_1[25] = (char)0;
#line 374
  __constr_expr_1[26] = (char)0;
#line 374
  __constr_expr_1[27] = (char)0;
#line 374
  __constr_expr_1[28] = (char)0;
#line 374
  __constr_expr_1[29] = (char)0;
#line 374
  __constr_expr_1[30] = (char)0;
#line 374
  __constr_expr_1[31] = (char)0;
#line 374
  __constr_expr_1[32] = (char)0;
#line 374
  __constr_expr_1[33] = (char)0;
#line 374
  __constr_expr_1[34] = (char)0;
#line 374
  __constr_expr_1[35] = (char)0;
#line 374
  __constr_expr_1[36] = (char)0;
#line 374
  __constr_expr_1[37] = (char)0;
#line 374
  __constr_expr_1[38] = (char)0;
#line 374
  __constr_expr_1[39] = (char)0;
#line 374
  __constr_expr_1[40] = (char)0;
#line 374
  __constr_expr_1[41] = (char)0;
#line 374
  __constr_expr_1[42] = (char)0;
#line 374
  __constr_expr_1[43] = (char)0;
#line 374
  __constr_expr_1[44] = (char)0;
#line 374
  __constr_expr_1[45] = (char)0;
#line 374
  __constr_expr_1[46] = (char)0;
#line 374
  __constr_expr_1[47] = (char)0;
#line 374
  __constr_expr_1[48] = (char)0;
#line 374
  __constr_expr_1[49] = (char)0;
#line 374
  __constr_expr_1[50] = (char)0;
#line 374
  __constr_expr_1[51] = (char)0;
#line 374
  __constr_expr_1[52] = (char)0;
#line 374
  __constr_expr_1[53] = (char)0;
#line 374
  __constr_expr_1[54] = (char)0;
#line 374
  __constr_expr_1[55] = (char)0;
#line 374
  __constr_expr_1[56] = (char)0;
#line 374
  __constr_expr_1[57] = (char)0;
#line 374
  __constr_expr_1[58] = (char)0;
#line 374
  __constr_expr_1[59] = (char)0;
#line 374
  envp[0] = (char *)"HOME=/";
#line 374
  envp[1] = (char *)"TERM=linux";
#line 374
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 374
  envp[3] = (char *)(& __constr_expr_0);
#line 374
  envp[4] = (char *)(& __constr_expr_1);
#line 374
  envp[5] = 0;
#line 380
  argv[0] = (char *)(& usermode_helper);
#line 380
  argv[1] = cmd;
#line 380
  argv[2] = tconn->name;
#line 380
  argv[3] = 0;
#line 383
  setup_khelper_env(tconn, (char **)(& envp));
#line 384
  conn_md_sync(tconn);
#line 386
  printk("\016d-con %s: helper command: %s %s %s\n", tconn->name, (char *)(& usermode_helper),
         cmd, tconn->name);
#line 389
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            2);
#line 390
  if (ret != 0) {
#line 391
    printk("\fd-con %s: helper command: %s %s %s exit code %u (0x%x)\n", tconn->name,
           (char *)(& usermode_helper), cmd, tconn->name, (ret >> 8) & 255, ret);
  } else {
#line 395
    printk("\016d-con %s: helper command: %s %s %s exit code %u (0x%x)\n", tconn->name,
           (char *)(& usermode_helper), cmd, tconn->name, (ret >> 8) & 255, ret);
  }
#line 400
  if (ret < 0) {
#line 401
    ret = 0;
  } else {

  }
#line 403
  return (ret);
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static enum drbd_fencing_p highest_fencing_policy(struct drbd_tconn *tconn ) 
{ 
  enum drbd_fencing_p fp ;
  struct drbd_conf *mdev ;
  int vnr ;
  void *tmp ;
  enum drbd_fencing_p __max1 ;
  enum drbd_fencing_p __max2 ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;

  {
#line 408
  fp = -1;
#line 412
  rcu_read_lock();
#line 413
  vnr = 0;
#line 413
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 413
  mdev = (struct drbd_conf *)tmp;
#line 413
  goto ldv_52920;
  ldv_52919: 
#line 414
  tmp___2 = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 414
  if (tmp___2 != 0) {
#line 415
    __max1 = fp;
#line 415
    _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 415
    tmp___0 = debug_lockdep_rcu_enabled();
#line 415
    if (tmp___0 != 0 && ! __warned) {
#line 415
      tmp___1 = rcu_read_lock_held();
#line 415
      if (tmp___1 == 0 && 1) {
#line 415
        __warned = 1;
#line 415
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
                               416, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 415
    __max2 = (enum drbd_fencing_p )_________p1->fencing;
#line 415
    fp = (enum drbd_fencing_p )((int )__max1 > (int )__max2 ? (int )__max1 : (int )__max2);
#line 417
    put_ldev(mdev);
  } else {

  }
#line 413
  vnr = vnr + 1;
#line 413
  tmp___3 = idr_get_next(& tconn->volumes, & vnr);
#line 413
  mdev = (struct drbd_conf *)tmp___3;
  ldv_52920: ;
#line 413
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 414
    goto ldv_52919;
  } else {

  }
#line 420
  rcu_read_unlock();
#line 422
  return (fp);
}
}
#line 425 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
bool conn_try_outdate_peer(struct drbd_tconn *tconn ) 
{ 
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_fencing_p fp ;
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state tmp ;
  int tmp___0 ;
  enum drbd_disk_state tmp___1 ;

  {
#line 427
  mask.ldv_40604.role = (unsigned char)0;
#line 427
  mask.ldv_40604.peer = (unsigned char)0;
#line 427
  mask.ldv_40604.conn = (unsigned char)0;
#line 427
  mask.ldv_40604.disk = (unsigned char)0;
#line 427
  mask.ldv_40604.pdsk = (unsigned char)0;
#line 427
  mask.ldv_40604.susp = (unsigned char)0;
#line 427
  mask.ldv_40604.aftr_isp = (unsigned char)0;
#line 427
  mask.ldv_40604.peer_isp = (unsigned char)0;
#line 427
  mask.ldv_40604.user_isp = (unsigned char)0;
#line 427
  mask.ldv_40604.susp_nod = (unsigned char)0;
#line 427
  mask.ldv_40604.susp_fen = (unsigned char)0;
#line 427
  mask.ldv_40604._pad = (unsigned short)0;
#line 428
  val.ldv_40604.role = (unsigned char)0;
#line 428
  val.ldv_40604.peer = (unsigned char)0;
#line 428
  val.ldv_40604.conn = (unsigned char)0;
#line 428
  val.ldv_40604.disk = (unsigned char)0;
#line 428
  val.ldv_40604.pdsk = (unsigned char)0;
#line 428
  val.ldv_40604.susp = (unsigned char)0;
#line 428
  val.ldv_40604.aftr_isp = (unsigned char)0;
#line 428
  val.ldv_40604.peer_isp = (unsigned char)0;
#line 428
  val.ldv_40604.user_isp = (unsigned char)0;
#line 428
  val.ldv_40604.susp_nod = (unsigned char)0;
#line 428
  val.ldv_40604.susp_fen = (unsigned char)0;
#line 428
  val.ldv_40604._pad = (unsigned short)0;
#line 433
  if ((unsigned int )tconn->cstate > 8U) {
#line 434
    printk("\vd-con %s: Expected cstate < C_WF_REPORT_PARAMS\n", tconn->name);
#line 435
    return (0);
  } else {

  }
#line 438
  fp = highest_fencing_policy(tconn);
#line 439
  switch ((int )fp) {
  case -1: 
#line 441
  printk("\fd-con %s: Not fencing peer, I\'m not even Consistent myself.\n", tconn->name);
#line 442
  goto out;
  case 0: ;
#line 444
  return (1);
  default: ;
  }
#line 448
  r = conn_khelper(tconn, (char *)"fence-peer");
#line 450
  switch ((r >> 8) & 255) {
  case 3: 
#line 452
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 453
  mask.ldv_40604.pdsk = 15U;
#line 454
  val.ldv_40604.pdsk = 4U;
#line 455
  goto ldv_52935;
  case 4: 
#line 457
  ex_to_string = (char *)"peer was fenced";
#line 458
  mask.ldv_40604.pdsk = 15U;
#line 459
  val.ldv_40604.pdsk = 5U;
#line 460
  goto ldv_52935;
  case 5: 
#line 462
  tmp = conn_highest_disk(tconn);
#line 462
  if ((unsigned int )tmp == 8U) {
#line 464
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 465
    mask.ldv_40604.pdsk = 15U;
#line 466
    val.ldv_40604.pdsk = 5U;
  } else {
#line 468
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
  }
#line 470
  goto ldv_52935;
  case 6: 
#line 474
  ex_to_string = (char *)"peer is active";
#line 475
  printk("\fd-con %s: Peer is primary, outdating myself.\n", tconn->name);
#line 476
  mask.ldv_40604.disk = 15U;
#line 477
  val.ldv_40604.disk = 5U;
#line 478
  goto ldv_52935;
  case 7: ;
#line 480
  if ((int )fp != 2) {
#line 481
    printk("\vd-con %s: fence-peer() = 7 && fencing != Stonith !!!\n", tconn->name);
  } else {

  }
#line 482
  ex_to_string = (char *)"peer was stonithed";
#line 483
  mask.ldv_40604.pdsk = 15U;
#line 484
  val.ldv_40604.pdsk = 5U;
#line 485
  goto ldv_52935;
  default: 
#line 488
  printk("\vd-con %s: fence-peer helper broken, returned %d\n", tconn->name, (r >> 8) & 255);
#line 489
  return (0);
  }
  ldv_52935: 
#line 492
  printk("\016d-con %s: fence-peer helper returned %d (%s)\n", tconn->name, (r >> 8) & 255,
         ex_to_string);
  out: 
#line 501
  spin_lock_irq(& tconn->req_lock);
#line 502
  if ((unsigned int )tconn->cstate <= 8U) {
#line 502
    tmp___0 = constant_test_bit(10U, (unsigned long const volatile   *)(& tconn->flags));
#line 502
    if (tmp___0 == 0) {
#line 503
      _conn_request_state(tconn, mask, val, CS_VERBOSE);
    } else {

    }
  } else {

  }
#line 504
  spin_unlock_irq(& tconn->req_lock);
#line 506
  tmp___1 = conn_highest_pdsk(tconn);
#line 506
  return ((unsigned int )tmp___1 <= 5U);
}
}
#line 509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int _try_outdate_peer_async(void *data ) 
{ 
  struct drbd_tconn *tconn ;

  {
#line 511
  tconn = (struct drbd_tconn *)data;
#line 513
  conn_try_outdate_peer(tconn);
#line 515
  kref_put(& tconn->kref, & conn_destroy);
#line 516
  return (0);
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void conn_try_outdate_peer_async(struct drbd_tconn *tconn ) 
{ 
  struct task_struct *opa ;
  struct task_struct *__k ;
  struct task_struct *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 523
  kref_get(& tconn->kref);
#line 524
  tmp = kthread_create_on_node(& _try_outdate_peer_async, (void *)tconn, -1, "drbd_async_h");
#line 524
  __k = tmp;
#line 524
  tmp___0 = IS_ERR((void const   *)__k);
#line 524
  if (tmp___0 == 0L) {
#line 524
    wake_up_process(__k);
  } else {

  }
#line 524
  opa = __k;
#line 525
  tmp___1 = IS_ERR((void const   *)opa);
#line 525
  if (tmp___1 != 0L) {
#line 526
    printk("\vd-con %s: out of mem, failed to invoke fence-peer helper\n", tconn->name);
#line 527
    kref_put(& tconn->kref, & conn_destroy);
  } else {

  }
#line 529
  return;
}
}
#line 532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) 
{ 
  int max_tries ;
  enum drbd_state_rv rv ;
  struct net_conf *nc ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  bool tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int timeo ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 534
  max_tries = 4;
#line 535
  rv = 0;
#line 537
  try = 0;
#line 538
  forced = 0;
#line 541
  if ((unsigned int )new_role == 1U) {
#line 542
    request_ping(mdev->tconn);
  } else {

  }
#line 544
  mutex_lock_nested(mdev->state_mutex, 0U);
#line 546
  mask.i = 0U;
#line 546
  mask.ldv_40604.role = 3U;
#line 547
  val.i = 0U;
#line 547
  val.ldv_40604.role = (unsigned char )new_role;
#line 549
  goto ldv_52963;
  ldv_52970: 
#line 550
  rv = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 554
  if ((int )rv == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 555
    val.ldv_40604.pdsk = 0U;
#line 556
    mask.ldv_40604.pdsk = 0U;
#line 557
    goto ldv_52963;
  } else {

  }
#line 560
  if (((int )rv == -2 && force != 0) && ((int )mdev->state.ldv_50103.disk <= 7 && (int )mdev->state.ldv_50103.disk > 3)) {
#line 563
    mask.ldv_40604.disk = 15U;
#line 564
    val.ldv_40604.disk = 8U;
#line 565
    forced = 1;
#line 566
    goto ldv_52963;
  } else {

  }
#line 569
  if (((int )rv == -2 && (unsigned int )*((unsigned char *)mdev + 749UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 571
    if (*((unsigned int *)mdev + 187UL) != 49152U) {
#line 571
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
              571);
    } else {

    }
#line 573
    tmp = conn_try_outdate_peer(mdev->tconn);
#line 573
    if ((int )tmp) {
#line 574
      val.ldv_40604.disk = 8U;
#line 575
      mask.ldv_40604.disk = 15U;
    } else {

    }
#line 577
    goto ldv_52963;
  } else {

  }
#line 580
  if ((int )rv == 2) {
#line 581
    goto out;
  } else {

  }
#line 582
  if ((int )rv == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 583
    tmp___0 = conn_try_outdate_peer(mdev->tconn);
#line 583
    if (tmp___0) {
#line 583
      tmp___1 = 0;
    } else {
#line 583
      tmp___1 = 1;
    }
#line 583
    if (tmp___1 && force != 0) {
#line 584
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 585
      mask.ldv_40604.pdsk = 15U;
#line 586
      val.ldv_40604.pdsk = 5U;
    } else {

    }
#line 589
    goto ldv_52963;
  } else {

  }
#line 591
  if ((int )rv == -1) {
#line 595
    rcu_read_lock();
#line 596
    _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 596
    tmp___2 = debug_lockdep_rcu_enabled();
#line 596
    if (tmp___2 != 0 && ! __warned) {
#line 596
      tmp___3 = rcu_read_lock_held();
#line 596
      if (tmp___3 == 0 && 1) {
#line 596
        __warned = 1;
#line 596
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
                               596, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 596
    nc = _________p1;
#line 597
    timeo = (unsigned long )nc != (unsigned long )((struct net_conf *)0) ? (int )(((nc->ping_timeo + 1U) * 250U) / 10U) : 1;
#line 598
    rcu_read_unlock();
#line 599
    schedule_timeout_interruptible((long )timeo);
#line 600
    if (try < max_tries) {
#line 601
      try = max_tries + -1;
    } else {

    }
#line 602
    goto ldv_52963;
  } else {

  }
#line 604
  if ((int )rv <= 0) {
#line 605
    rv = _drbd_request_state(mdev, mask, val, 6);
#line 607
    if ((int )rv <= 0) {
#line 608
      goto out;
    } else {

    }
  } else {

  }
#line 610
  goto ldv_52969;
  ldv_52963: 
#line 549
  tmp___4 = try;
#line 549
  try = try + 1;
#line 549
  if (tmp___4 < max_tries) {
#line 550
    goto ldv_52970;
  } else {

  }
  ldv_52969: ;
#line 613
  if ((int )rv <= 0) {
#line 614
    goto out;
  } else {

  }
#line 616
  if (forced != 0) {
#line 617
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 620
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 620
  if (tmp___5 == 0) {
#line 620
    goto ldv_52971;
  } else {

  }
#line 620
  tmp___6 = get_current();
#line 620
  __wait.flags = 0U;
#line 620
  __wait.private = (void *)tmp___6;
#line 620
  __wait.func = & autoremove_wake_function;
#line 620
  __wait.task_list.next = & __wait.task_list;
#line 620
  __wait.task_list.prev = & __wait.task_list;
  ldv_52974: 
#line 620
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 620
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 620
  if (tmp___7 == 0) {
#line 620
    goto ldv_52973;
  } else {

  }
#line 620
  schedule();
#line 620
  goto ldv_52974;
  ldv_52973: 
#line 620
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52971: ;
#line 624
  if ((unsigned int )new_role == 2U) {
#line 625
    set_disk_ro(mdev->vdisk, 1);
#line 626
    tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 626
    if (tmp___8 != 0) {
#line 627
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 628
      put_ldev(mdev);
    } else {

    }
  } else {
#line 631
    mutex_lock_nested(& (mdev->tconn)->conf_update, 0U);
#line 632
    nc = (mdev->tconn)->net_conf;
#line 633
    if ((unsigned long )nc != (unsigned long )((struct net_conf *)0)) {
#line 634
      nc->discard_my_data = 0;
    } else {

    }
#line 635
    mutex_unlock(& (mdev->tconn)->conf_update);
#line 637
    set_disk_ro(mdev->vdisk, 0);
#line 638
    tmp___9 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 638
    if (tmp___9 != 0) {
#line 639
      if ((((int )mdev->state.ldv_50103.conn <= 9 || (int )mdev->state.ldv_50103.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 642
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 644
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 645
      put_ldev(mdev);
    } else {

    }
  }
#line 652
  if ((int )mdev->state.ldv_50103.conn > 8) {
#line 654
    if (forced != 0) {
#line 655
      drbd_send_uuids(mdev);
    } else {

    }
#line 656
    drbd_send_current_state(mdev);
  } else {

  }
#line 659
  drbd_md_sync(mdev);
#line 661
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  out: 
#line 663
  mutex_unlock(mdev->state_mutex);
#line 664
  return (rv);
}
}
#line 667 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static char const   *from_attrs_err_to_txt(int err ) 
{ 


  {
#line 669
  return (err != -42 ? (err != -95 ? (err == -17 ? "can not change invariant setting" : "invalid attribute value") : "unknown mandatory attribute") : "required attribute missing");
}
}
#line 675 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_set_role(struct sk_buff *skb , struct genl_info *info ) 
{ 
  struct set_role_parms parms ;
  int err ;
  enum drbd_ret_code retcode ;
  int tmp ;
  char const   *tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  enum drbd_state_rv tmp___2 ;

  {
#line 681
  tmp = drbd_adm_prepare(skb, info, 1U);
#line 681
  retcode = (enum drbd_ret_code )tmp;
#line 682
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 683
    return ((int )retcode);
  } else {

  }
#line 684
  if ((unsigned int )retcode != 101U) {
#line 685
    goto out;
  } else {

  }
#line 687
  memset((void *)(& parms), 0, 1UL);
#line 688
  if ((unsigned long )*(info->attrs + 6UL) != (unsigned long )((struct nlattr *)0)) {
#line 689
    err = set_role_parms_from_attrs(& parms, info);
#line 690
    if (err != 0) {
#line 691
      retcode = ERR_MANDATORY_TAG;
#line 692
      tmp___0 = from_attrs_err_to_txt(err);
#line 692
      drbd_msg_put_info(tmp___0);
#line 693
      goto out;
    } else {

    }
  } else {

  }
#line 697
  if ((unsigned int )(info->genlhdr)->cmd == 14U) {
#line 698
    tmp___1 = drbd_set_role(adm_ctx.mdev, R_PRIMARY, (int )parms.assume_uptodate);
#line 698
    retcode = (enum drbd_ret_code )tmp___1;
  } else {
#line 700
    tmp___2 = drbd_set_role(adm_ctx.mdev, R_SECONDARY, 0);
#line 700
    retcode = (enum drbd_ret_code )tmp___2;
  }
  out: 
#line 702
  drbd_adm_finish(info, (int )retcode);
#line 703
  return (0);
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  int meta_dev_idx ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;
  sector_t tmp___2 ;
  sector_t tmp___3 ;

  {
#line 711
  md_size_sect = 0UL;
#line 714
  rcu_read_lock();
#line 715
  _________p1 = *((struct disk_conf * volatile  *)(& bdev->disk_conf));
#line 715
  tmp = debug_lockdep_rcu_enabled();
#line 715
  if (tmp != 0 && ! __warned) {
#line 715
    tmp___0 = rcu_read_lock_held();
#line 715
    if (tmp___0 == 0 && 1) {
#line 715
      __warned = 1;
#line 715
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
                             715, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 715
  meta_dev_idx = _________p1->meta_dev_idx;
#line 717
  switch (meta_dev_idx) {
  default: 
#line 720
  bdev->md.md_size_sect = 262144U;
#line 721
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 721
  bdev->md.md_offset = (u64 )tmp___1;
#line 722
  bdev->md.al_offset = 8;
#line 723
  bdev->md.bm_offset = 72;
#line 724
  goto ldv_52996;
  case -2: 
#line 727
  tmp___2 = drbd_get_capacity(bdev->md_bdev);
#line 727
  bdev->md.md_size_sect = (u32 )tmp___2;
#line 728
  bdev->md.md_offset = 0ULL;
#line 729
  bdev->md.al_offset = 8;
#line 730
  bdev->md.bm_offset = 72;
#line 731
  goto ldv_52996;
  case -1: ;
  case -3: 
#line 734
  tmp___3 = drbd_md_ss__(mdev, bdev);
#line 734
  bdev->md.md_offset = (u64 )tmp___3;
#line 736
  bdev->md.al_offset = -64;
#line 738
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 739
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 740
  md_size_sect = md_size_sect >> 15;
#line 741
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 745
  md_size_sect = md_size_sect + 72UL;
#line 747
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 749
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 750
  goto ldv_52996;
  }
  ldv_52996: 
#line 752
  rcu_read_unlock();
#line 753
  return;
}
}
#line 756 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 760
  units[0] = 75;
#line 760
  units[1] = 77;
#line 760
  units[2] = 71;
#line 760
  units[3] = 84;
#line 760
  units[4] = 80;
#line 760
  units[5] = 69;
#line 761
  base = 0;
#line 762
  goto ldv_53007;
  ldv_53006: 
#line 764
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 765
  base = base + 1;
  ldv_53007: ;
#line 762
  if (size > 9999ULL && (unsigned int )base <= 4U) {
#line 763
    goto ldv_53006;
  } else {

  }
#line 767
  sprintf(buf, "%u %cB", (unsigned int )size, (int )units[base]);
#line 769
  return (buf);
}
}
#line 791 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 793
  set_bit(8U, (unsigned long volatile   *)(& mdev->flags));
#line 794
  tmp = drbd_suspended(mdev);
#line 794
  if (tmp != 0) {
#line 795
    return;
  } else {

  }
#line 796
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 796
  if (tmp___0 == 0) {
#line 796
    goto ldv_53012;
  } else {

  }
#line 796
  tmp___1 = get_current();
#line 796
  __wait.flags = 0U;
#line 796
  __wait.private = (void *)tmp___1;
#line 796
  __wait.func = & autoremove_wake_function;
#line 796
  __wait.task_list.next = & __wait.task_list;
#line 796
  __wait.task_list.prev = & __wait.task_list;
  ldv_53015: 
#line 796
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 796
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 796
  if (tmp___2 == 0) {
#line 796
    goto ldv_53014;
  } else {

  }
#line 796
  schedule();
#line 796
  goto ldv_53015;
  ldv_53014: 
#line 796
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53012: ;
#line 799
  return;
}
}
#line 799 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 801
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 802
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 803
  return;
}
}
#line 812 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t u_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___2 ;
  int tmp___3 ;
  int err ;
  sector_t tmp___4 ;
  long tmp___5 ;
  char *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  sector_t tmp___9 ;
  int err___0 ;

  {
#line 820
  rv = 0;
#line 831
  drbd_suspend_io(mdev);
#line 834
  tmp = lc_try_lock(mdev->act_log);
#line 834
  if (tmp != 0) {
#line 834
    goto ldv_53032;
  } else {

  }
#line 834
  tmp___0 = get_current();
#line 834
  __wait.flags = 0U;
#line 834
  __wait.private = (void *)tmp___0;
#line 834
  __wait.func = & autoremove_wake_function;
#line 834
  __wait.task_list.next = & __wait.task_list;
#line 834
  __wait.task_list.prev = & __wait.task_list;
  ldv_53035: 
#line 834
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 834
  tmp___1 = lc_try_lock(mdev->act_log);
#line 834
  if (tmp___1 != 0) {
#line 834
    goto ldv_53034;
  } else {

  }
#line 834
  schedule();
#line 834
  goto ldv_53035;
  ldv_53034: 
#line 834
  finish_wait(& mdev->al_wait, & __wait);
  ldv_53032: 
#line 836
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 837
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 838
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 841
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 843
  rcu_read_lock();
#line 844
  _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 844
  tmp___2 = debug_lockdep_rcu_enabled();
#line 844
  if (tmp___2 != 0 && ! __warned) {
#line 844
    tmp___3 = rcu_read_lock_held();
#line 844
    if (tmp___3 == 0 && 1) {
#line 844
      __warned = 1;
#line 844
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
                             844, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 844
  u_size = (sector_t )_________p1->disk_size;
#line 845
  rcu_read_unlock();
#line 846
  size = drbd_new_dev_size(mdev, mdev->ldev, u_size, (int )flags & 1);
#line 848
  tmp___7 = drbd_get_capacity(mdev->this_bdev);
#line 848
  if (tmp___7 != size) {
#line 848
    goto _L;
  } else {
#line 848
    tmp___8 = drbd_bm_capacity(mdev);
#line 848
    if (tmp___8 != size) {
      _L: /* CIL Label */ 
#line 851
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 852
      tmp___5 = __builtin_expect(err != 0, 0L);
#line 852
      if (tmp___5 != 0L) {
#line 854
        tmp___4 = drbd_bm_capacity(mdev);
#line 854
        size = tmp___4 >> 1;
#line 855
        if (size == 0UL) {
#line 856
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 859
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 863
        rv = dev_size_error;
      } else {

      }
#line 866
      drbd_set_my_capacity(mdev, size);
#line 867
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 868
      tmp___6 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 868
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___6, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 871
  if ((int )rv == -1) {
#line 872
    goto out;
  } else {

  }
#line 874
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 876
  tmp___9 = drbd_md_first_sector(mdev->ldev);
#line 876
  md_moved = tmp___9 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 879
  if (la_size_changed != 0 || md_moved != 0) {
#line 882
    drbd_al_shrink(mdev);
#line 883
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 887
    err___0 = drbd_bitmap_io(mdev, md_moved != 0 ? & drbd_bm_write_all : & drbd_bm_write,
                             (char *)"size changed", BM_LOCKED_MASK);
#line 889
    if (err___0 != 0) {
#line 890
      rv = dev_size_error;
#line 891
      goto out;
    } else {

    }
#line 893
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 896
  if (size > la_size) {
#line 897
    rv = grew;
  } else {

  }
#line 898
  if (size < la_size) {
#line 899
    rv = shrunk;
  } else {

  }
  out: 
#line 901
  lc_unlock(mdev->act_log);
#line 902
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 903
  drbd_resume_io(mdev);
#line 905
  return (rv);
}
}
#line 909 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           sector_t u_size , int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 912
  p_size = mdev->p_size;
#line 913
  la_size = (sector_t )bdev->md.la_size_sect;
#line 915
  size = 0UL;
#line 917
  m_size = drbd_get_max_capacity___1(bdev);
#line 919
  if ((int )mdev->state.ldv_50103.conn <= 9 && assume_peer_has_space != 0) {
#line 920
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 921
    p_size = m_size;
  } else {

  }
#line 924
  if (p_size != 0UL && m_size != 0UL) {
#line 925
    __min1 = p_size;
#line 925
    __min2 = m_size;
#line 925
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 927
  if (la_size != 0UL) {
#line 928
    size = la_size;
#line 929
    if (m_size != 0UL && m_size < size) {
#line 930
      size = m_size;
    } else {

    }
#line 931
    if (p_size != 0UL && p_size < size) {
#line 932
      size = p_size;
    } else {

    }
  } else {
#line 934
    if (m_size != 0UL) {
#line 935
      size = m_size;
    } else {

    }
#line 936
    if (p_size != 0UL) {
#line 937
      size = p_size;
    } else {

    }
  }
#line 941
  if (size == 0UL) {
#line 942
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 944
  if (u_size != 0UL) {
#line 945
    if (u_size > size) {
#line 946
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 949
      size = u_size;
    }
  } else {

  }
#line 952
  return (size);
}
}
#line 963 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev , struct disk_conf *dc ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;

  {
#line 970
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == dc->al_extents) {
#line 972
    return (0);
  } else {

  }
#line 974
  in_use = 0U;
#line 975
  t = mdev->act_log;
#line 976
  n = lc_create("act_log", drbd_al_ext_cache, 64U, dc->al_extents, 48UL, 0UL);
#line 979
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 980
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 981
    return (-12);
  } else {

  }
#line 983
  spin_lock_irq(& mdev->al_lock);
#line 984
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 985
    i = 0;
#line 985
    goto ldv_53065;
    ldv_53064: 
#line 986
    e = lc_element_by_index(t, (unsigned int )i);
#line 987
    if (e->refcnt != 0U) {
#line 988
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 990
    in_use = e->refcnt + in_use;
#line 985
    i = i + 1;
    ldv_53065: ;
#line 985
    if ((unsigned int )i < t->nr_elements) {
#line 986
      goto ldv_53064;
    } else {

    }

  } else {

  }
#line 993
  if (in_use == 0U) {
#line 994
    mdev->act_log = n;
  } else {

  }
#line 995
  spin_unlock_irq(& mdev->al_lock);
#line 996
  if (in_use != 0U) {
#line 997
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 998
    lc_destroy(n);
#line 999
    return (-16);
  } else
#line 1001
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 1002
    lc_destroy(t);
  } else {

  }
#line 1004
  drbd_md_mark_dirty(mdev);
#line 1005
  return (0);
}
}
#line 1008 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_bio_size ) 
{ 
  struct request_queue *q ;
  unsigned int max_hw_sectors ;
  unsigned int max_segments ;
  struct request_queue *b ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned int _min2 ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct request_queue *b___0 ;
  int tmp___3 ;

  {
#line 1010
  q = mdev->rq_queue;
#line 1011
  max_hw_sectors = max_bio_size >> 9;
#line 1012
  max_segments = 0U;
#line 1014
  tmp___2 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1014
  if (tmp___2 != 0) {
#line 1015
    b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1017
    tmp = queue_max_hw_sectors(b);
#line 1017
    _min1 = tmp;
#line 1017
    _min2 = max_bio_size >> 9;
#line 1017
    max_hw_sectors = _min1 < _min2 ? _min1 : _min2;
#line 1018
    rcu_read_lock();
#line 1019
    _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 1019
    tmp___0 = debug_lockdep_rcu_enabled();
#line 1019
    if (tmp___0 != 0 && ! __warned) {
#line 1019
      tmp___1 = rcu_read_lock_held();
#line 1019
      if (tmp___1 == 0 && 1) {
#line 1019
        __warned = 1;
#line 1019
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
                               1019, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 1019
    max_segments = _________p1->max_bio_bvecs;
#line 1020
    rcu_read_unlock();
#line 1021
    put_ldev(mdev);
  } else {

  }
#line 1024
  blk_queue_logical_block_size(q, 512);
#line 1025
  blk_queue_max_hw_sectors(q, max_hw_sectors);
#line 1027
  blk_queue_max_segments(q, max_segments != 0U ? (int )((unsigned short )max_segments) : 128);
#line 1028
  blk_queue_segment_boundary(q, 4095UL);
#line 1030
  tmp___3 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1030
  if (tmp___3 != 0) {
#line 1031
    b___0 = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1033
    blk_queue_stack_limits(q, b___0);
#line 1035
    if (q->backing_dev_info.ra_pages != b___0->backing_dev_info.ra_pages) {
#line 1036
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
                q->backing_dev_info.ra_pages, b___0->backing_dev_info.ra_pages);
#line 1039
      q->backing_dev_info.ra_pages = b___0->backing_dev_info.ra_pages;
    } else {

    }
#line 1041
    put_ldev(mdev);
  } else {

  }
#line 1043
  return;
}
}
#line 1045 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) 
{ 
  unsigned int now ;
  unsigned int new ;
  unsigned int local ;
  unsigned int peer ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  unsigned int _min1___0 ;
  unsigned int _min2___0 ;
  unsigned int _min1___1 ;
  unsigned int _min2___1 ;

  {
#line 1049
  tmp = queue_max_hw_sectors(mdev->rq_queue);
#line 1049
  now = tmp << 9;
#line 1050
  local = mdev->local_max_bio_size;
#line 1051
  peer = mdev->peer_max_bio_size;
#line 1053
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1053
  if (tmp___1 != 0) {
#line 1054
    tmp___0 = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 1054
    local = tmp___0 << 9;
#line 1055
    mdev->local_max_bio_size = local;
#line 1056
    put_ldev(mdev);
  } else {

  }
#line 1058
  _min1 = local;
#line 1058
  _min2 = 1048576U;
#line 1058
  local = _min1 < _min2 ? _min1 : _min2;
#line 1063
  if ((int )mdev->state.ldv_50103.conn > 9) {
#line 1064
    if ((mdev->tconn)->agreed_pro_version <= 93) {
#line 1065
      _min1___0 = mdev->peer_max_bio_size;
#line 1065
      _min2___0 = 32768U;
#line 1065
      peer = _min1___0 < _min2___0 ? _min1___0 : _min2___0;
    } else
#line 1067
    if ((mdev->tconn)->agreed_pro_version == 94) {
#line 1068
      peer = 32768U;
    } else
#line 1069
    if ((mdev->tconn)->agreed_pro_version <= 99) {
#line 1070
      peer = 131072U;
    } else {
#line 1072
      peer = 1048576U;
    }
  } else {

  }
#line 1075
  _min1___1 = local;
#line 1075
  _min2___1 = peer;
#line 1075
  new = _min1___1 < _min2___1 ? _min1___1 : _min2___1;
#line 1077
  if ((unsigned int )*((unsigned char *)mdev + 748UL) == 1U && new < now) {
#line 1078
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED new < now; (%u < %u)\n",
            new, now);
  } else {

  }
#line 1080
  if (new != now) {
#line 1081
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max BIO size = %u\n",
              new);
  } else {

  }
#line 1083
  drbd_setup_queue_param(mdev, new);
#line 1084
  return;
}
}
#line 1087 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void conn_reconfig_start(struct drbd_tconn *tconn ) 
{ 


  {
#line 1089
  drbd_thread_start(& tconn->worker);
#line 1090
  conn_flush_workqueue(tconn);
#line 1091
  return;
}
}
#line 1094 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void conn_reconfig_done(struct drbd_tconn *tconn ) 
{ 
  bool stop_threads ;
  bool tmp ;

  {
#line 1097
  spin_lock_irq(& tconn->req_lock);
#line 1098
  tmp = conn_all_vols_unconf(tconn);
#line 1098
  stop_threads = (bool )((int )tmp && (unsigned int )tconn->cstate == 0U);
#line 1100
  spin_unlock_irq(& tconn->req_lock);
#line 1101
  if ((int )stop_threads) {
#line 1104
    drbd_thread_stop(& tconn->receiver);
#line 1105
    drbd_thread_stop(& tconn->worker);
  } else {

  }
#line 1107
  return;
}
}
#line 1110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_suspend_al(struct drbd_conf *mdev ) 
{ 
  int s ;
  int tmp ;
  int tmp___0 ;

  {
#line 1112
  s = 0;
#line 1114
  tmp = lc_try_lock(mdev->act_log);
#line 1114
  if (tmp == 0) {
#line 1115
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to lock al in drbd_suspend_al()\n");
#line 1116
    return;
  } else {

  }
#line 1119
  drbd_al_shrink(mdev);
#line 1120
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 1121
  if ((int )mdev->state.ldv_50103.conn <= 9) {
#line 1122
    tmp___0 = test_and_set_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 1122
    s = tmp___0 == 0;
  } else {

  }
#line 1123
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 1124
  lc_unlock(mdev->act_log);
#line 1126
  if (s != 0) {
#line 1127
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Suspended AL updates\n");
  } else {

  }
#line 1128
  return;
}
}
#line 1131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static bool should_set_defaults(struct genl_info *info ) 
{ 
  unsigned int flags ;

  {
#line 1133
  flags = ((struct drbd_genlmsghdr *)info->userhdr)->ldv_49550.flags;
#line 1134
  return (((int )flags & 1) != 0);
}
}
#line 1137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void enforce_disk_conf_limits(struct disk_conf *dc ) 
{ 


  {
#line 1139
  if (dc->al_extents <= 6U) {
#line 1140
    dc->al_extents = 7U;
  } else {

  }
#line 1141
  if (dc->al_extents > 6433U) {
#line 1142
    dc->al_extents = 6433U;
  } else {

  }
#line 1144
  if (dc->c_plan_ahead > 300U) {
#line 1145
    dc->c_plan_ahead = 300U;
  } else {

  }
#line 1146
  return;
}
}
#line 1148 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_disk_opts(struct sk_buff *skb , struct genl_info *info ) 
{ 
  enum drbd_ret_code retcode ;
  struct drbd_conf *mdev ;
  struct disk_conf *new_disk_conf ;
  struct disk_conf *old_disk_conf ;
  struct fifo_buffer *old_plan ;
  struct fifo_buffer *new_plan ;
  int err ;
  int fifo_size ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  bool tmp___2 ;
  char const   *tmp___3 ;
  bool _bool ;
  int tmp___4 ;
  int tmp___5 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;

  {
#line 1153
  old_plan = 0;
#line 1153
  new_plan = 0;
#line 1156
  tmp = drbd_adm_prepare(skb, info, 1U);
#line 1156
  retcode = (enum drbd_ret_code )tmp;
#line 1157
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 1158
    return ((int )retcode);
  } else {

  }
#line 1159
  if ((unsigned int )retcode != 101U) {
#line 1160
    goto out;
  } else {

  }
#line 1162
  mdev = adm_ctx.mdev;
#line 1166
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1166
  if (tmp___0 == 0) {
#line 1167
    retcode = ERR_NO_DISK;
#line 1168
    goto out;
  } else {

  }
#line 1171
  tmp___1 = kmalloc(344UL, 208U);
#line 1171
  new_disk_conf = (struct disk_conf *)tmp___1;
#line 1172
  if ((unsigned long )new_disk_conf == (unsigned long )((struct disk_conf *)0)) {
#line 1173
    retcode = ERR_NOMEM;
#line 1174
    goto fail;
  } else {

  }
#line 1177
  mutex_lock_nested(& (mdev->tconn)->conf_update, 0U);
#line 1178
  old_disk_conf = (mdev->ldev)->disk_conf;
#line 1179
  *new_disk_conf = *old_disk_conf;
#line 1180
  tmp___2 = should_set_defaults(info);
#line 1180
  if ((int )tmp___2) {
#line 1181
    set_disk_conf_defaults(new_disk_conf);
  } else {

  }
#line 1183
  err = disk_conf_from_attrs_for_change(new_disk_conf, info);
#line 1184
  if (err != 0 && err != -42) {
#line 1185
    retcode = ERR_MANDATORY_TAG;
#line 1186
    tmp___3 = from_attrs_err_to_txt(err);
#line 1186
    drbd_msg_put_info(tmp___3);
  } else {

  }
#line 1189
  _bool = new_disk_conf->resync_rate != 0U;
#line 1189
  if (! _bool) {
#line 1189
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION %s FAILED in %s\n",
            (char *)"new_disk_conf->resync_rate >= 1", "drbd_adm_disk_opts");
  } else {

  }
#line 1189
  if (_bool) {
#line 1189
    tmp___4 = 0;
  } else {
#line 1189
    tmp___4 = 1;
  }
#line 1189
  if (tmp___4) {
#line 1190
    new_disk_conf->resync_rate = 1U;
  } else {

  }
#line 1192
  enforce_disk_conf_limits(new_disk_conf);
#line 1194
  fifo_size = (int )((new_disk_conf->c_plan_ahead * 250U) / 250U);
#line 1195
  if ((unsigned int )fifo_size != (mdev->rs_plan_s)->size) {
#line 1196
    new_plan = fifo_alloc(fifo_size);
#line 1197
    if ((unsigned long )new_plan == (unsigned long )((struct fifo_buffer *)0)) {
#line 1198
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 1199
      retcode = ERR_NOMEM;
#line 1200
      goto fail_unlock;
    } else {

    }
  } else {

  }
#line 1204
  drbd_suspend_io(mdev);
#line 1205
  tmp___5 = lc_try_lock(mdev->act_log);
#line 1205
  if (tmp___5 != 0) {
#line 1205
    goto ldv_53134;
  } else {

  }
#line 1205
  tmp___6 = get_current();
#line 1205
  __wait.flags = 0U;
#line 1205
  __wait.private = (void *)tmp___6;
#line 1205
  __wait.func = & autoremove_wake_function;
#line 1205
  __wait.task_list.next = & __wait.task_list;
#line 1205
  __wait.task_list.prev = & __wait.task_list;
  ldv_53137: 
#line 1205
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1205
  tmp___7 = lc_try_lock(mdev->act_log);
#line 1205
  if (tmp___7 != 0) {
#line 1205
    goto ldv_53136;
  } else {

  }
#line 1205
  schedule();
#line 1205
  goto ldv_53137;
  ldv_53136: 
#line 1205
  finish_wait(& mdev->al_wait, & __wait);
  ldv_53134: 
#line 1206
  drbd_al_shrink(mdev);
#line 1207
  err = drbd_check_al_size(mdev, new_disk_conf);
#line 1208
  lc_unlock(mdev->act_log);
#line 1209
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1210
  drbd_resume_io(mdev);
#line 1212
  if (err != 0) {
#line 1213
    retcode = ERR_NOMEM;
#line 1214
    goto fail_unlock;
  } else {

  }
#line 1217
  _raw_write_lock_irq(& global_state_lock);
#line 1218
  retcode = drbd_resync_after_valid(mdev, new_disk_conf->resync_after);
#line 1219
  if ((unsigned int )retcode == 101U) {
#line 1220
    __asm__  volatile   ("": : : "memory");
#line 1220
    (mdev->ldev)->disk_conf = new_disk_conf;
#line 1221
    drbd_resync_after_changed(mdev);
  } else {

  }
#line 1223
  _raw_write_unlock_irq(& global_state_lock);
#line 1225
  if ((unsigned int )retcode != 101U) {
#line 1226
    goto fail_unlock;
  } else {

  }
#line 1228
  if ((unsigned long )new_plan != (unsigned long )((struct fifo_buffer *)0)) {
#line 1229
    old_plan = mdev->rs_plan_s;
#line 1230
    __asm__  volatile   ("": : : "memory");
#line 1230
    mdev->rs_plan_s = new_plan;
  } else {

  }
#line 1233
  mutex_unlock(& (mdev->tconn)->conf_update);
#line 1235
  if ((int )((signed char )new_disk_conf->al_updates) != 0) {
#line 1236
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & 4294967039U;
  } else {
#line 1238
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | 256U;
  }
#line 1240
  drbd_bump_write_ordering(mdev->tconn, WO_bdev_flush);
#line 1242
  drbd_md_sync(mdev);
#line 1244
  if ((int )mdev->state.ldv_50103.conn > 9) {
#line 1245
    drbd_send_sync_param(mdev);
  } else {

  }
#line 1247
  synchronize_rcu();
#line 1248
  kfree((void const   *)old_disk_conf);
#line 1249
  kfree((void const   *)old_plan);
#line 1250
  mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
#line 1251
  goto success;
  fail_unlock: 
#line 1254
  mutex_unlock(& (mdev->tconn)->conf_update);
  fail: 
#line 1256
  kfree((void const   *)new_disk_conf);
#line 1257
  kfree((void const   *)new_plan);
  success: 
#line 1259
  put_ldev(mdev);
  out: 
#line 1261
  drbd_adm_finish(info, (int )retcode);
#line 1262
  return (0);
}
}
#line 1265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_attach(struct sk_buff *skb , struct genl_info *info ) 
{ 
  struct drbd_conf *mdev ;
  int err ;
  enum drbd_ret_code retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct disk_conf *new_disk_conf ;
  struct block_device *bdev ;
  struct lru_cache *resync_lru ;
  struct fifo_buffer *new_plan ;
  union drbd_state ns ;
  union drbd_state os ;
  enum drbd_state_rv rv ;
  struct net_conf *nc ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  struct lock_class_key __key ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  long tmp___9 ;
  long tmp___10 ;
  long tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  sector_t tmp___14 ;
  sector_t tmp___15 ;
  sector_t tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  sector_t tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  unsigned long tmp___37 ;
  unsigned long tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  int tmp___41 ;
  struct disk_conf *_________p1___0 ;
  bool __warned___0 ;
  int tmp___42 ;
  int tmp___43 ;
  struct disk_conf *_________p1___1 ;
  bool __warned___1 ;
  int tmp___44 ;
  int tmp___45 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1273
  nbc = 0;
#line 1274
  new_disk_conf = 0;
#line 1276
  resync_lru = 0;
#line 1277
  new_plan = 0;
#line 1282
  tmp = drbd_adm_prepare(skb, info, 1U);
#line 1282
  retcode = (enum drbd_ret_code )tmp;
#line 1283
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 1284
    return ((int )retcode);
  } else {

  }
#line 1285
  if ((unsigned int )retcode != 101U) {
#line 1286
    goto finish;
  } else {

  }
#line 1288
  mdev = adm_ctx.mdev;
#line 1289
  conn_reconfig_start(mdev->tconn);
#line 1292
  if ((int )mdev->state.ldv_50103.disk > 0) {
#line 1293
    retcode = ERR_DISK_CONFIGURED;
#line 1294
    goto fail;
  } else {

  }
#line 1300
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1300
  if (tmp___0 == 0) {
#line 1300
    goto ldv_53160;
  } else {

  }
#line 1300
  tmp___1 = get_current();
#line 1300
  __wait.flags = 0U;
#line 1300
  __wait.private = (void *)tmp___1;
#line 1300
  __wait.func = & autoremove_wake_function;
#line 1300
  __wait.task_list.next = & __wait.task_list;
#line 1300
  __wait.task_list.prev = & __wait.task_list;
  ldv_53163: 
#line 1300
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1300
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1300
  if (tmp___2 == 0) {
#line 1300
    goto ldv_53162;
  } else {

  }
#line 1300
  schedule();
#line 1300
  goto ldv_53163;
  ldv_53162: 
#line 1300
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53160: 
#line 1303
  clear_bit(14, (unsigned long volatile   *)(& mdev->flags));
#line 1304
  clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 1305
  clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 1308
  mdev->rs_total = 0UL;
#line 1309
  mdev->rs_failed = 0UL;
#line 1310
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 1313
  tmp___3 = kzalloc(176UL, 208U);
#line 1313
  nbc = (struct drbd_backing_dev *)tmp___3;
#line 1314
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1315
    retcode = ERR_NOMEM;
#line 1316
    goto fail;
  } else {

  }
#line 1318
  spinlock_check(& nbc->md.uuid_lock);
#line 1318
  __raw_spin_lock_init(& nbc->md.uuid_lock.ldv_6135.rlock, "&(&nbc->md.uuid_lock)->rlock",
                       & __key);
#line 1320
  tmp___4 = kzalloc(344UL, 208U);
#line 1320
  new_disk_conf = (struct disk_conf *)tmp___4;
#line 1321
  if ((unsigned long )new_disk_conf == (unsigned long )((struct disk_conf *)0)) {
#line 1322
    retcode = ERR_NOMEM;
#line 1323
    goto fail;
  } else {

  }
#line 1325
  nbc->disk_conf = new_disk_conf;
#line 1327
  set_disk_conf_defaults(new_disk_conf);
#line 1328
  err = disk_conf_from_attrs(new_disk_conf, info);
#line 1329
  if (err != 0) {
#line 1330
    retcode = ERR_MANDATORY_TAG;
#line 1331
    tmp___5 = from_attrs_err_to_txt(err);
#line 1331
    drbd_msg_put_info(tmp___5);
#line 1332
    goto fail;
  } else {

  }
#line 1335
  enforce_disk_conf_limits(new_disk_conf);
#line 1337
  new_plan = fifo_alloc((int )((new_disk_conf->c_plan_ahead * 250U) / 250U));
#line 1338
  if ((unsigned long )new_plan == (unsigned long )((struct fifo_buffer *)0)) {
#line 1339
    retcode = ERR_NOMEM;
#line 1340
    goto fail;
  } else {

  }
#line 1343
  if (new_disk_conf->meta_dev_idx < -3) {
#line 1344
    retcode = ERR_MD_IDX_INVALID;
#line 1345
    goto fail;
  } else {

  }
#line 1348
  rcu_read_lock();
#line 1349
  _________p1 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 1349
  tmp___6 = debug_lockdep_rcu_enabled();
#line 1349
  if (tmp___6 != 0 && ! __warned) {
#line 1349
    tmp___7 = rcu_read_lock_held();
#line 1349
    if (tmp___7 == 0 && 1) {
#line 1349
      __warned = 1;
#line 1349
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
                             1349, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1349
  nc = _________p1;
#line 1350
  if ((unsigned long )nc != (unsigned long )((struct net_conf *)0)) {
#line 1351
    if (new_disk_conf->fencing == 2U && nc->wire_protocol == 1U) {
#line 1352
      rcu_read_unlock();
#line 1353
      retcode = ERR_STONITH_AND_PROT_A;
#line 1354
      goto fail;
    } else {

    }
  } else {

  }
#line 1357
  rcu_read_unlock();
#line 1359
  bdev = blkdev_get_by_path((char const   *)(& new_disk_conf->backing_dev), 131U,
                            (void *)mdev);
#line 1361
  tmp___9 = IS_ERR((void const   *)bdev);
#line 1361
  if (tmp___9 != 0L) {
#line 1362
    tmp___8 = PTR_ERR((void const   *)bdev);
#line 1362
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (char *)(& new_disk_conf->backing_dev), tmp___8);
#line 1364
    retcode = ERR_OPEN_DISK;
#line 1365
    goto fail;
  } else {

  }
#line 1367
  nbc->backing_bdev = bdev;
#line 1377
  bdev = blkdev_get_by_path((char const   *)(& new_disk_conf->meta_dev), 131U, new_disk_conf->meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 1381
  tmp___11 = IS_ERR((void const   *)bdev);
#line 1381
  if (tmp___11 != 0L) {
#line 1382
    tmp___10 = PTR_ERR((void const   *)bdev);
#line 1382
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (char *)(& new_disk_conf->meta_dev), tmp___10);
#line 1384
    retcode = ERR_OPEN_MD_DISK;
#line 1385
    goto fail;
  } else {

  }
#line 1387
  nbc->md_bdev = bdev;
#line 1389
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(new_disk_conf->meta_dev_idx == -1 || new_disk_conf->meta_dev_idx == -3))) {
#line 1392
    retcode = ERR_MD_IDX_INVALID;
#line 1393
    goto fail;
  } else {

  }
#line 1396
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 1U, 61U, 64UL, 16UL);
#line 1399
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 1400
    retcode = ERR_NOMEM;
#line 1401
    goto fail;
  } else {

  }
#line 1405
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1407
  tmp___13 = drbd_get_max_capacity___1(nbc);
#line 1407
  if ((unsigned long long )tmp___13 < new_disk_conf->disk_size) {
#line 1408
    tmp___12 = drbd_get_max_capacity___1(nbc);
#line 1408
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___12, new_disk_conf->disk_size);
#line 1411
    retcode = ERR_DISK_TOO_SMALL;
#line 1412
    goto fail;
  } else {

  }
#line 1415
  if (new_disk_conf->meta_dev_idx < 0) {
#line 1416
    max_possible_sectors = 2251799813685248UL;
#line 1418
    min_md_device_sectors = 2048UL;
  } else {
#line 1420
    max_possible_sectors = 8587575296UL;
#line 1421
    min_md_device_sectors = (unsigned long )(new_disk_conf->meta_dev_idx + 1) * 262144UL;
  }
#line 1424
  tmp___14 = drbd_get_capacity(nbc->md_bdev);
#line 1424
  if (tmp___14 < min_md_device_sectors) {
#line 1425
    retcode = ERR_MD_DISK_TOO_SMALL;
#line 1426
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 1429
    goto fail;
  } else {

  }
#line 1434
  tmp___15 = drbd_get_max_capacity___1(nbc);
#line 1434
  tmp___16 = drbd_get_capacity(mdev->this_bdev);
#line 1434
  if (tmp___15 < tmp___16) {
#line 1436
    retcode = ERR_DISK_TOO_SMALL;
#line 1437
    goto fail;
  } else {

  }
#line 1440
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 1442
  if (nbc->known_size > max_possible_sectors) {
#line 1443
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 1446
    if (new_disk_conf->meta_dev_idx >= 0) {
#line 1447
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 1451
  drbd_suspend_io(mdev);
#line 1459
  tmp___17 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1459
  if (tmp___17 == 0) {
#line 1459
    goto ldv_53168;
  } else {
#line 1459
    tmp___18 = drbd_suspended(mdev);
#line 1459
    if (tmp___18 != 0) {
#line 1459
      goto ldv_53168;
    } else {

    }
  }
#line 1459
  tmp___19 = get_current();
#line 1459
  __wait___0.flags = 0U;
#line 1459
  __wait___0.private = (void *)tmp___19;
#line 1459
  __wait___0.func = & autoremove_wake_function;
#line 1459
  __wait___0.task_list.next = & __wait___0.task_list;
#line 1459
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_53171: 
#line 1459
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1459
  tmp___20 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1459
  if (tmp___20 == 0) {
#line 1459
    goto ldv_53170;
  } else {
#line 1459
    tmp___21 = drbd_suspended(mdev);
#line 1459
    if (tmp___21 != 0) {
#line 1459
      goto ldv_53170;
    } else {

    }
  }
#line 1459
  schedule();
#line 1459
  goto ldv_53171;
  ldv_53170: 
#line 1459
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_53168: 
#line 1461
  drbd_flush_workqueue(mdev);
#line 1463
  val.i = 0U;
#line 1463
  val.ldv_40604.disk = 1U;
#line 1463
  mask.i = 0U;
#line 1463
  mask.ldv_40604.disk = 15U;
#line 1463
  rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1464
  retcode = (enum drbd_ret_code )rv;
#line 1465
  drbd_resume_io(mdev);
#line 1466
  if ((int )rv <= 0) {
#line 1467
    goto fail;
  } else {

  }
#line 1469
  tmp___22 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1469
  if (tmp___22 == 0) {
#line 1470
    goto force_diskless;
  } else {

  }
#line 1472
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1474
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1475
    tmp___23 = drbd_bm_init(mdev);
#line 1475
    if (tmp___23 != 0) {
#line 1476
      retcode = ERR_NOMEM;
#line 1477
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1481
  tmp___24 = drbd_md_read(mdev, nbc);
#line 1481
  retcode = (enum drbd_ret_code )tmp___24;
#line 1482
  if ((unsigned int )retcode != 101U) {
#line 1483
    goto force_diskless_dec;
  } else {

  }
#line 1485
  if (((int )mdev->state.ldv_50103.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 748UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1488
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1490
    retcode = ERR_DATA_NOT_CURRENT;
#line 1491
    goto force_diskless_dec;
  } else {

  }
#line 1495
  tmp___25 = drbd_check_al_size(mdev, new_disk_conf);
#line 1495
  if (tmp___25 != 0) {
#line 1496
    retcode = ERR_NOMEM;
#line 1497
    goto force_diskless_dec;
  } else {

  }
#line 1501
  tmp___26 = drbd_md_test_flag(nbc, 1);
#line 1501
  if (tmp___26 != 0) {
#line 1501
    tmp___27 = drbd_new_dev_size(mdev, nbc, (sector_t )(nbc->disk_conf)->disk_size,
                                 0);
#line 1501
    if ((unsigned long long )tmp___27 < nbc->md.la_size_sect) {
#line 1503
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1504
      retcode = ERR_DISK_TOO_SMALL;
#line 1505
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1510
  if ((int )((signed char )new_disk_conf->md_flushes) != 0) {
#line 1511
    clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1513
    set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1519
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1519
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1519);
  } else {

  }
#line 1520
  mdev->ldev = nbc;
#line 1521
  mdev->resync = resync_lru;
#line 1522
  mdev->rs_plan_s = new_plan;
#line 1523
  nbc = 0;
#line 1524
  resync_lru = 0;
#line 1525
  new_disk_conf = 0;
#line 1526
  new_plan = 0;
#line 1528
  drbd_bump_write_ordering(mdev->tconn, WO_bdev_flush);
#line 1530
  tmp___28 = drbd_md_test_flag(mdev->ldev, 64);
#line 1530
  if (tmp___28 != 0) {
#line 1531
    set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1533
    clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1535
  tmp___29 = drbd_md_test_flag(mdev->ldev, 2);
#line 1535
  if (tmp___29 != 0 && ((unsigned int )*((unsigned char *)mdev + 748UL) != 1U || (unsigned int )*((unsigned char *)mdev->tconn + 132UL) == 0U)) {
#line 1537
    set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1539
  mdev->send_cnt = 0U;
#line 1540
  mdev->recv_cnt = 0U;
#line 1541
  mdev->read_cnt = 0U;
#line 1542
  mdev->writ_cnt = 0U;
#line 1544
  drbd_reconsider_max_bio_size(mdev);
#line 1560
  clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 1561
  if ((unsigned int )*((unsigned char *)mdev + 748UL) != 1U) {
#line 1561
    tmp___30 = drbd_md_test_flag(mdev->ldev, 2);
#line 1561
    if (tmp___30 != 0) {
#line 1561
      tmp___31 = drbd_md_test_flag(mdev->ldev, 4);
#line 1561
      if (tmp___31 == 0) {
#line 1564
        set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1566
  dd = drbd_determine_dev_size(mdev, 0);
#line 1567
  if ((int )dd == -1) {
#line 1568
    retcode = ERR_NOMEM_BITMAP;
#line 1569
    goto force_diskless_dec;
  } else
#line 1570
  if ((int )dd == 2) {
#line 1571
    set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1573
  tmp___34 = drbd_md_test_flag(mdev->ldev, 8);
#line 1573
  if (tmp___34 != 0) {
#line 1573
    goto _L;
  } else {
#line 1573
    tmp___35 = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 1573
    if (tmp___35 != 0) {
#line 1573
      tmp___36 = drbd_md_test_flag(mdev->ldev, 256);
#line 1573
      if (tmp___36 != 0) {
        _L: /* CIL Label */ 
#line 1576
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1578
        tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching",
                                  BM_LOCKED_MASK);
#line 1578
        if (tmp___32 != 0) {
#line 1580
          retcode = ERR_IO_MD_DISK;
#line 1581
          goto force_diskless_dec;
        } else {

        }
      } else {
#line 1573
        goto _L___0;
      }
    } else {
      _L___0: /* CIL Label */ 
#line 1584
      tmp___33 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching",
                                BM_LOCKED_MASK);
#line 1584
      if (tmp___33 != 0) {
#line 1586
        retcode = ERR_IO_MD_DISK;
#line 1587
        goto force_diskless_dec;
      } else {

      }
    }
  }
#line 1591
  tmp___37 = _drbd_bm_total_weight(mdev);
#line 1591
  tmp___38 = drbd_bm_bits(mdev);
#line 1591
  if (tmp___37 == tmp___38) {
#line 1592
    drbd_suspend_al(mdev);
  } else {

  }
#line 1594
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 1595
  os = drbd_read_state(mdev);
#line 1596
  ns = os;
#line 1602
  tmp___40 = drbd_md_test_flag(mdev->ldev, 1);
#line 1602
  if (tmp___40 != 0) {
#line 1603
    tmp___39 = drbd_md_test_flag(mdev->ldev, 16);
#line 1603
    if (tmp___39 != 0) {
#line 1604
      ns.ldv_40604.disk = 7U;
    } else {
#line 1606
      ns.ldv_40604.disk = 5U;
    }
  } else {
#line 1608
    ns.ldv_40604.disk = 4U;
  }
#line 1611
  tmp___41 = drbd_md_test_flag(mdev->ldev, 32);
#line 1611
  if (tmp___41 != 0) {
#line 1612
    ns.ldv_40604.pdsk = 5U;
  } else {

  }
#line 1614
  rcu_read_lock();
#line 1616
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U) {
#line 1616
    if (*((unsigned int *)(& ns) + 0UL) == 40960U) {
#line 1617
      ns.ldv_40604.disk = 8U;
    } else {
#line 1616
      _________p1___0 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 1616
      tmp___42 = debug_lockdep_rcu_enabled();
#line 1616
      if (tmp___42 != 0 && ! __warned___0) {
#line 1616
        tmp___43 = rcu_read_lock_held();
#line 1616
        if (tmp___43 == 0 && 1) {
#line 1616
          __warned___0 = 1;
#line 1616
          lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
                                 1616, "suspicious rcu_dereference_check() usage");
        } else {

        }
      } else {

      }
#line 1616
      if (_________p1___0->fencing == 0U) {
#line 1617
        ns.ldv_40604.disk = 8U;
      } else {

      }
    }
  } else {

  }
#line 1624
  _________p1___1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 1624
  tmp___44 = debug_lockdep_rcu_enabled();
#line 1624
  if (tmp___44 != 0 && ! __warned___1) {
#line 1624
    tmp___45 = rcu_read_lock_held();
#line 1624
    if (tmp___45 == 0 && 1) {
#line 1624
      __warned___1 = 1;
#line 1624
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
                             1624, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1624
  if ((int )((signed char )_________p1___1->al_updates) != 0) {
#line 1625
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & 4294967039U;
  } else {
#line 1627
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | 256U;
  }
#line 1629
  rcu_read_unlock();
#line 1633
  if ((unsigned int )*((unsigned short *)mdev + 374UL) == 160U) {
#line 1634
    mdev->new_state_tmp.i = ns.i;
#line 1635
    ns.i = os.i;
#line 1636
    ns.ldv_40604.disk = 3U;
#line 1641
    kfree((void const   *)mdev->p_uuid);
#line 1642
    mdev->p_uuid = 0;
  } else {

  }
#line 1645
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1646
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 1648
  if ((int )rv <= 0) {
#line 1649
    goto force_diskless_dec;
  } else {

  }
#line 1651
  mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
#line 1653
  if ((unsigned int )*((unsigned char *)mdev + 748UL) == 1U) {
#line 1654
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1656
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1658
  drbd_md_mark_dirty(mdev);
#line 1659
  drbd_md_sync(mdev);
#line 1661
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1662
  put_ldev(mdev);
#line 1663
  conn_reconfig_done(mdev->tconn);
#line 1664
  drbd_adm_finish(info, (int )retcode);
#line 1665
  return (0);
  force_diskless_dec: 
#line 1668
  put_ldev(mdev);
  force_diskless: 
#line 1670
  val___0.i = 0U;
#line 1670
  val___0.ldv_40604.disk = 0U;
#line 1670
  mask___0.i = 0U;
#line 1670
  mask___0.ldv_40604.disk = 15U;
#line 1670
  drbd_force_state(mdev, mask___0, val___0);
#line 1671
  drbd_md_sync(mdev);
  fail: 
#line 1673
  conn_reconfig_done(mdev->tconn);
#line 1674
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1675
    if ((unsigned long )nbc->backing_bdev != (unsigned long )((struct block_device *)0)) {
#line 1676
      blkdev_put(nbc->backing_bdev, 131U);
    } else {

    }
#line 1678
    if ((unsigned long )nbc->md_bdev != (unsigned long )((struct block_device *)0)) {
#line 1679
      blkdev_put(nbc->md_bdev, 131U);
    } else {

    }
#line 1681
    kfree((void const   *)nbc);
  } else {

  }
#line 1683
  kfree((void const   *)new_disk_conf);
#line 1684
  lc_destroy(resync_lru);
#line 1685
  kfree((void const   *)new_plan);
  finish: 
#line 1688
  drbd_adm_finish(info, (int )retcode);
#line 1689
  return (0);
}
}
#line 1692 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int adm_detach(struct drbd_conf *mdev , int force ) 
{ 
  enum drbd_state_rv retcode ;
  int ret ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1697
  if (force != 0) {
#line 1698
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 1699
    val.i = 0U;
#line 1699
    val.ldv_40604.disk = 2U;
#line 1699
    mask.i = 0U;
#line 1699
    mask.ldv_40604.disk = 15U;
#line 1699
    drbd_force_state(mdev, mask, val);
#line 1700
    retcode = SS_SUCCESS;
#line 1701
    goto out;
  } else {

  }
#line 1704
  drbd_suspend_io(mdev);
#line 1705
  drbd_md_get_buffer(mdev);
#line 1706
  val___0.i = 0U;
#line 1706
  val___0.ldv_40604.disk = 2U;
#line 1706
  mask___0.i = 0U;
#line 1706
  mask___0.ldv_40604.disk = 15U;
#line 1706
  tmp = drbd_request_state(mdev, mask___0, val___0);
#line 1706
  retcode = (enum drbd_state_rv )tmp;
#line 1707
  drbd_md_put_buffer(mdev);
#line 1709
  __ret = 0;
#line 1709
  if ((unsigned int )*((unsigned char *)mdev + 749UL) == 4U) {
#line 1709
    tmp___0 = get_current();
#line 1709
    __wait.flags = 0U;
#line 1709
    __wait.private = (void *)tmp___0;
#line 1709
    __wait.func = & autoremove_wake_function;
#line 1709
    __wait.task_list.next = & __wait.task_list;
#line 1709
    __wait.task_list.prev = & __wait.task_list;
    ldv_53207: 
#line 1709
    prepare_to_wait(& mdev->misc_wait, & __wait, 1);
#line 1709
    if ((unsigned int )*((unsigned char *)mdev + 749UL) != 4U) {
#line 1709
      goto ldv_53205;
    } else {

    }
#line 1709
    tmp___1 = get_current();
#line 1709
    tmp___2 = signal_pending(tmp___1);
#line 1709
    if (tmp___2 == 0) {
#line 1709
      schedule();
#line 1709
      goto ldv_53206;
    } else {

    }
#line 1709
    __ret = -512;
#line 1709
    goto ldv_53205;
    ldv_53206: ;
#line 1709
    goto ldv_53207;
    ldv_53205: 
#line 1709
    finish_wait(& mdev->misc_wait, & __wait);
  } else {

  }
#line 1709
  ret = __ret;
#line 1711
  drbd_resume_io(mdev);
#line 1712
  if ((int )retcode == -11) {
#line 1713
    retcode = SS_NOTHING_TO_DO;
  } else {

  }
#line 1714
  if (ret != 0) {
#line 1715
    retcode = 129;
  } else {

  }
  out: ;
#line 1717
  return ((int )retcode);
}
}
#line 1725 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_detach(struct sk_buff *skb , struct genl_info *info ) 
{ 
  enum drbd_ret_code retcode ;
  struct detach_parms parms ;
  int err ;
  int tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 1728
  parms.force_detach = (char)0;
#line 1731
  tmp = drbd_adm_prepare(skb, info, 1U);
#line 1731
  retcode = (enum drbd_ret_code )tmp;
#line 1732
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 1733
    return ((int )retcode);
  } else {

  }
#line 1734
  if ((unsigned int )retcode != 101U) {
#line 1735
    goto out;
  } else {

  }
#line 1737
  if ((unsigned long )*(info->attrs + 13UL) != (unsigned long )((struct nlattr *)0)) {
#line 1738
    err = detach_parms_from_attrs(& parms, info);
#line 1739
    if (err != 0) {
#line 1740
      retcode = ERR_MANDATORY_TAG;
#line 1741
      tmp___0 = from_attrs_err_to_txt(err);
#line 1741
      drbd_msg_put_info(tmp___0);
#line 1742
      goto out;
    } else {

    }
  } else {

  }
#line 1746
  tmp___1 = adm_detach(adm_ctx.mdev, (int )parms.force_detach);
#line 1746
  retcode = (enum drbd_ret_code )tmp___1;
  out: 
#line 1748
  drbd_adm_finish(info, (int )retcode);
#line 1749
  return (0);
}
}
#line 1752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static bool conn_resync_running(struct drbd_tconn *tconn ) 
{ 
  struct drbd_conf *mdev ;
  bool rv ;
  int vnr ;
  void *tmp ;
  void *tmp___0 ;

  {
#line 1755
  rv = 0;
#line 1758
  rcu_read_lock();
#line 1759
  vnr = 0;
#line 1759
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 1759
  mdev = (struct drbd_conf *)tmp;
#line 1759
  goto ldv_53225;
  ldv_53224: ;
#line 1760
  if ((((unsigned int )*((unsigned short *)mdev + 374UL) == 256U || (unsigned int )*((unsigned short *)mdev + 374UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 374UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 374UL) == 336U) {
#line 1764
    rv = 1;
#line 1765
    goto ldv_53223;
  } else {

  }
#line 1759
  vnr = vnr + 1;
#line 1759
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 1759
  mdev = (struct drbd_conf *)tmp___0;
  ldv_53225: ;
#line 1759
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 1760
    goto ldv_53224;
  } else {

  }
  ldv_53223: 
#line 1768
  rcu_read_unlock();
#line 1770
  return (rv);
}
}
#line 1773 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static bool conn_ov_running(struct drbd_tconn *tconn ) 
{ 
  struct drbd_conf *mdev ;
  bool rv ;
  int vnr ;
  void *tmp ;
  void *tmp___0 ;

  {
#line 1776
  rv = 0;
#line 1779
  rcu_read_lock();
#line 1780
  vnr = 0;
#line 1780
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 1780
  mdev = (struct drbd_conf *)tmp;
#line 1780
  goto ldv_53234;
  ldv_53233: ;
#line 1781
  if ((unsigned int )*((unsigned short *)mdev + 374UL) == 288U || (unsigned int )*((unsigned short *)mdev + 374UL) == 304U) {
#line 1783
    rv = 1;
#line 1784
    goto ldv_53232;
  } else {

  }
#line 1780
  vnr = vnr + 1;
#line 1780
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 1780
  mdev = (struct drbd_conf *)tmp___0;
  ldv_53234: ;
#line 1780
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 1781
    goto ldv_53233;
  } else {

  }
  ldv_53232: 
#line 1787
  rcu_read_unlock();
#line 1789
  return (rv);
}
}
#line 1793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static enum drbd_ret_code _check_net_options(struct drbd_tconn *tconn , struct net_conf *old_conf ,
                                             struct net_conf *new_conf ) 
{ 
  struct drbd_conf *mdev ;
  int i ;
  int tmp ;
  enum drbd_role tmp___0 ;
  enum drbd_role tmp___1 ;
  void *tmp___2 ;
  enum drbd_fencing_p fp ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;

  {
#line 1798
  if (((unsigned long )old_conf != (unsigned long )((struct net_conf *)0) && (unsigned int )tconn->cstate == 9U) && tconn->agreed_pro_version <= 99) {
#line 1799
    if (new_conf->wire_protocol != old_conf->wire_protocol) {
#line 1800
      return (ERR_NEED_APV_100);
    } else {

    }
#line 1802
    if ((int )((signed char )new_conf->two_primaries) != (int )((signed char )old_conf->two_primaries)) {
#line 1803
      return (ERR_NEED_APV_100);
    } else {

    }
#line 1805
    tmp = strcmp((char const   *)(& new_conf->integrity_alg), (char const   *)(& old_conf->integrity_alg));
#line 1805
    if (tmp != 0) {
#line 1806
      return (ERR_NEED_APV_100);
    } else {

    }
  } else {

  }
#line 1809
  if ((int )((signed char )new_conf->two_primaries) == 0) {
#line 1809
    tmp___0 = conn_highest_role(tconn);
#line 1809
    if ((unsigned int )tmp___0 == 1U) {
#line 1809
      tmp___1 = conn_highest_peer(tconn);
#line 1809
      if ((unsigned int )tmp___1 == 1U) {
#line 1812
        return (ERR_NEED_ALLOW_TWO_PRI);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1814
  if ((int )((signed char )new_conf->two_primaries) != 0 && new_conf->wire_protocol != 3U) {
#line 1816
    return (ERR_NOT_PROTO_C);
  } else {

  }
#line 1818
  i = 0;
#line 1818
  tmp___2 = idr_get_next(& tconn->volumes, & i);
#line 1818
  mdev = (struct drbd_conf *)tmp___2;
#line 1818
  goto ldv_53247;
  ldv_53246: 
#line 1819
  tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1819
  if (tmp___5 != 0) {
#line 1820
    _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 1820
    tmp___3 = debug_lockdep_rcu_enabled();
#line 1820
    if (tmp___3 != 0 && ! __warned) {
#line 1820
      tmp___4 = rcu_read_lock_held();
#line 1820
      if (tmp___4 == 0 && 1) {
#line 1820
        __warned = 1;
#line 1820
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
                               1820, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 1820
    fp = (enum drbd_fencing_p )_________p1->fencing;
#line 1821
    put_ldev(mdev);
#line 1822
    if (new_conf->wire_protocol == 1U && (int )fp == 2) {
#line 1823
      return (ERR_STONITH_AND_PROT_A);
    } else {

    }
  } else {

  }
#line 1825
  if ((unsigned int )*((unsigned char *)mdev + 748UL) == 1U && (int )((signed char )new_conf->discard_my_data) != 0) {
#line 1826
    return (ERR_DISCARD_IMPOSSIBLE);
  } else {

  }
#line 1818
  i = i + 1;
#line 1818
  tmp___6 = idr_get_next(& tconn->volumes, & i);
#line 1818
  mdev = (struct drbd_conf *)tmp___6;
  ldv_53247: ;
#line 1818
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 1819
    goto ldv_53246;
  } else {

  }

#line 1829
  if (new_conf->on_congestion != 0U && new_conf->wire_protocol != 1U) {
#line 1830
    return (ERR_CONG_NOT_PROTO_A);
  } else {

  }
#line 1832
  return (NO_ERROR);
}
}
#line 1836 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static enum drbd_ret_code check_net_options(struct drbd_tconn *tconn , struct net_conf *new_conf ) 
{ 
  enum drbd_ret_code rv ;
  struct drbd_conf *mdev ;
  int i ;
  struct net_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;

  {
#line 1842
  rcu_read_lock();
#line 1843
  _________p1 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 1843
  tmp = debug_lockdep_rcu_enabled();
#line 1843
  if (tmp != 0 && ! __warned) {
#line 1843
    tmp___0 = rcu_read_lock_held();
#line 1843
    if (tmp___0 == 0 && 1) {
#line 1843
      __warned = 1;
#line 1843
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
                             1843, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 1843
  rv = _check_net_options(tconn, _________p1, new_conf);
#line 1844
  rcu_read_unlock();
#line 1847
  i = 0;
#line 1847
  tmp___1 = idr_get_next(& tconn->volumes, & i);
#line 1847
  mdev = (struct drbd_conf *)tmp___1;
#line 1847
  goto ldv_53260;
  ldv_53259: ;
#line 1848
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1849
    tmp___2 = drbd_bm_init(mdev);
#line 1849
    if (tmp___2 != 0) {
#line 1850
      return (ERR_NOMEM);
    } else {

    }
  } else {

  }
#line 1847
  i = i + 1;
#line 1847
  tmp___3 = idr_get_next(& tconn->volumes, & i);
#line 1847
  mdev = (struct drbd_conf *)tmp___3;
  ldv_53260: ;
#line 1847
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 1848
    goto ldv_53259;
  } else {

  }

#line 1854
  return (rv);
}
}
#line 1865 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int alloc_hash(struct crypto_hash **tfm , char *tfm_name , int err_alg ) 
{ 
  long tmp ;

  {
#line 1867
  if ((int )((signed char )*tfm_name) == 0) {
#line 1868
    return (101);
  } else {

  }
#line 1870
  *tfm = crypto_alloc_hash((char const   *)tfm_name, 0U, 128U);
#line 1871
  tmp = IS_ERR((void const   *)*tfm);
#line 1871
  if (tmp != 0L) {
#line 1872
    *tfm = 0;
#line 1873
    return (err_alg);
  } else {

  }
#line 1876
  return (101);
}
}
#line 1880 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static enum drbd_ret_code alloc_crypto(struct crypto *crypto , struct net_conf *new_conf ) 
{ 
  char hmac_name[64U] ;
  enum drbd_ret_code rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1885
  tmp = alloc_hash(& crypto->csums_tfm, (char *)(& new_conf->csums_alg), 144);
#line 1885
  rv = (enum drbd_ret_code )tmp;
#line 1887
  if ((unsigned int )rv != 101U) {
#line 1888
    return (rv);
  } else {

  }
#line 1889
  tmp___0 = alloc_hash(& crypto->verify_tfm, (char *)(& new_conf->verify_alg), 146);
#line 1889
  rv = (enum drbd_ret_code )tmp___0;
#line 1891
  if ((unsigned int )rv != 101U) {
#line 1892
    return (rv);
  } else {

  }
#line 1893
  tmp___1 = alloc_hash(& crypto->integrity_tfm, (char *)(& new_conf->integrity_alg),
                       141);
#line 1893
  rv = (enum drbd_ret_code )tmp___1;
#line 1895
  if ((unsigned int )rv != 101U) {
#line 1896
    return (rv);
  } else {

  }
#line 1897
  if ((int )((signed char )new_conf->cram_hmac_alg[0]) != 0) {
#line 1898
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (char *)(& new_conf->cram_hmac_alg));
#line 1901
    tmp___2 = alloc_hash(& crypto->cram_hmac_tfm, (char *)(& hmac_name), 120);
#line 1901
    rv = (enum drbd_ret_code )tmp___2;
  } else {

  }
#line 1905
  return (rv);
}
}
#line 1908 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void free_crypto(struct crypto *crypto ) 
{ 


  {
#line 1910
  crypto_free_hash(crypto->cram_hmac_tfm);
#line 1911
  crypto_free_hash(crypto->integrity_tfm);
#line 1912
  crypto_free_hash(crypto->csums_tfm);
#line 1913
  crypto_free_hash(crypto->verify_tfm);
#line 1914
  return;
}
}
#line 1916 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_net_opts(struct sk_buff *skb , struct genl_info *info ) 
{ 
  enum drbd_ret_code retcode ;
  struct drbd_tconn *tconn ;
  struct net_conf *old_conf ;
  struct net_conf *new_conf ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto crypto ;
  int tmp ;
  void *tmp___0 ;
  bool tmp___1 ;
  char const   *tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;
  bool tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct drbd_conf *tmp___8 ;

  {
#line 1920
  new_conf = 0;
#line 1924
  crypto.verify_tfm = 0;
#line 1924
  crypto.csums_tfm = 0;
#line 1924
  crypto.cram_hmac_tfm = 0;
#line 1924
  crypto.integrity_tfm = 0;
#line 1926
  tmp = drbd_adm_prepare(skb, info, 4U);
#line 1926
  retcode = (enum drbd_ret_code )tmp;
#line 1927
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 1928
    return ((int )retcode);
  } else {

  }
#line 1929
  if ((unsigned int )retcode != 101U) {
#line 1930
    goto out;
  } else {

  }
#line 1932
  tconn = adm_ctx.tconn;
#line 1934
  tmp___0 = kzalloc(420UL, 208U);
#line 1934
  new_conf = (struct net_conf *)tmp___0;
#line 1935
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1936
    retcode = ERR_NOMEM;
#line 1937
    goto out;
  } else {

  }
#line 1940
  conn_reconfig_start(tconn);
#line 1942
  mutex_lock_nested(& tconn->data.mutex, 0U);
#line 1943
  mutex_lock_nested(& tconn->conf_update, 0U);
#line 1944
  old_conf = tconn->net_conf;
#line 1946
  if ((unsigned long )old_conf == (unsigned long )((struct net_conf *)0)) {
#line 1947
    drbd_msg_put_info("net conf missing, try connect");
#line 1948
    retcode = ERR_INVALID_REQUEST;
#line 1949
    goto fail;
  } else {

  }
#line 1952
  *new_conf = *old_conf;
#line 1953
  tmp___1 = should_set_defaults(info);
#line 1953
  if ((int )tmp___1) {
#line 1954
    set_net_conf_defaults(new_conf);
  } else {

  }
#line 1956
  err = net_conf_from_attrs_for_change(new_conf, info);
#line 1957
  if (err != 0 && err != -42) {
#line 1958
    retcode = ERR_MANDATORY_TAG;
#line 1959
    tmp___2 = from_attrs_err_to_txt(err);
#line 1959
    drbd_msg_put_info(tmp___2);
#line 1960
    goto fail;
  } else {

  }
#line 1963
  retcode = check_net_options(tconn, new_conf);
#line 1964
  if ((unsigned int )retcode != 101U) {
#line 1965
    goto fail;
  } else {

  }
#line 1968
  tmp___3 = conn_resync_running(tconn);
#line 1968
  rsr = (int )tmp___3;
#line 1969
  if (rsr != 0) {
#line 1969
    tmp___4 = strcmp((char const   *)(& new_conf->csums_alg), (char const   *)(& old_conf->csums_alg));
#line 1969
    if (tmp___4 != 0) {
#line 1970
      retcode = ERR_CSUMS_RESYNC_RUNNING;
#line 1971
      goto fail;
    } else {

    }
  } else {

  }
#line 1975
  tmp___5 = conn_ov_running(tconn);
#line 1975
  ovr = (int )tmp___5;
#line 1976
  if (ovr != 0) {
#line 1976
    tmp___6 = strcmp((char const   *)(& new_conf->verify_alg), (char const   *)(& old_conf->verify_alg));
#line 1976
    if (tmp___6 != 0) {
#line 1977
      retcode = ERR_VERIFY_RUNNING;
#line 1978
      goto fail;
    } else {

    }
  } else {

  }
#line 1981
  retcode = alloc_crypto(& crypto, new_conf);
#line 1982
  if ((unsigned int )retcode != 101U) {
#line 1983
    goto fail;
  } else {

  }
#line 1985
  __asm__  volatile   ("": : : "memory");
#line 1985
  tconn->net_conf = new_conf;
#line 1987
  if (rsr == 0) {
#line 1988
    crypto_free_hash(tconn->csums_tfm);
#line 1989
    tconn->csums_tfm = crypto.csums_tfm;
#line 1990
    crypto.csums_tfm = 0;
  } else {

  }
#line 1992
  if (ovr == 0) {
#line 1993
    crypto_free_hash(tconn->verify_tfm);
#line 1994
    tconn->verify_tfm = crypto.verify_tfm;
#line 1995
    crypto.verify_tfm = 0;
  } else {

  }
#line 1998
  crypto_free_hash(tconn->integrity_tfm);
#line 1999
  tconn->integrity_tfm = crypto.integrity_tfm;
#line 2000
  if ((unsigned int )tconn->cstate > 8U && tconn->agreed_pro_version > 99) {
#line 2002
    __drbd_send_protocol(tconn, P_PROTOCOL_UPDATE);
  } else {

  }
#line 2004
  crypto_free_hash(tconn->cram_hmac_tfm);
#line 2005
  tconn->cram_hmac_tfm = crypto.cram_hmac_tfm;
#line 2007
  mutex_unlock(& tconn->conf_update);
#line 2008
  mutex_unlock(& tconn->data.mutex);
#line 2009
  synchronize_rcu();
#line 2010
  kfree((void const   *)old_conf);
#line 2012
  if ((unsigned int )tconn->cstate > 8U) {
#line 2013
    tmp___7 = conn_lowest_minor(tconn);
#line 2013
    tmp___8 = minor_to_mdev((unsigned int )tmp___7);
#line 2013
    drbd_send_sync_param(tmp___8);
  } else {

  }
#line 2015
  goto done;
  fail: 
#line 2018
  mutex_unlock(& tconn->conf_update);
#line 2019
  mutex_unlock(& tconn->data.mutex);
#line 2020
  free_crypto(& crypto);
#line 2021
  kfree((void const   *)new_conf);
  done: 
#line 2023
  conn_reconfig_done(tconn);
  out: 
#line 2025
  drbd_adm_finish(info, (int )retcode);
#line 2026
  return (0);
}
}
#line 2029 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_connect(struct sk_buff *skb , struct genl_info *info ) 
{ 
  struct drbd_conf *mdev ;
  struct net_conf *old_conf ;
  struct net_conf *new_conf ;
  struct crypto crypto ;
  struct drbd_tconn *tconn ;
  enum drbd_ret_code retcode ;
  int i ;
  int err ;
  int tmp ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  int tmp___5 ;
  struct list_head  const  *__mptr___0 ;
  void *tmp___6 ;
  char const   *tmp___7 ;
  size_t __len ;
  void *__ret ;
  void *tmp___9 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___14 ;

  {
#line 2032
  new_conf = 0;
#line 2033
  crypto.verify_tfm = 0;
#line 2033
  crypto.csums_tfm = 0;
#line 2033
  crypto.cram_hmac_tfm = 0;
#line 2033
  crypto.integrity_tfm = 0;
#line 2039
  tmp = drbd_adm_prepare(skb, info, 2U);
#line 2039
  retcode = (enum drbd_ret_code )tmp;
#line 2041
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 2042
    return ((int )retcode);
  } else {

  }
#line 2043
  if ((unsigned int )retcode != 101U) {
#line 2044
    goto out;
  } else {

  }
#line 2045
  if ((unsigned long )adm_ctx.my_addr == (unsigned long )((struct nlattr *)0) || (unsigned long )adm_ctx.peer_addr == (unsigned long )((struct nlattr *)0)) {
#line 2046
    drbd_msg_put_info("connection endpoint(s) missing");
#line 2047
    retcode = ERR_INVALID_REQUEST;
#line 2048
    goto out;
  } else {

  }
#line 2054
  __mptr = (struct list_head  const  *)drbd_tconns.next;
#line 2054
  tconn = (struct drbd_tconn *)__mptr + 0xfffffffffffffff8UL;
#line 2054
  goto ldv_53314;
  ldv_53313: 
#line 2055
  tmp___0 = nla_len((struct nlattr  const  *)adm_ctx.my_addr);
#line 2055
  if (tmp___0 == tconn->my_addr_len) {
#line 2055
    tmp___1 = nla_data((struct nlattr  const  *)adm_ctx.my_addr);
#line 2055
    tmp___2 = memcmp((void const   *)tmp___1, (void const   *)(& tconn->my_addr),
                     (size_t )tconn->my_addr_len);
#line 2055
    if (tmp___2 == 0) {
#line 2057
      retcode = ERR_LOCAL_ADDR;
#line 2058
      goto out;
    } else {

    }
  } else {

  }
#line 2061
  tmp___3 = nla_len((struct nlattr  const  *)adm_ctx.peer_addr);
#line 2061
  if (tmp___3 == tconn->peer_addr_len) {
#line 2061
    tmp___4 = nla_data((struct nlattr  const  *)adm_ctx.peer_addr);
#line 2061
    tmp___5 = memcmp((void const   *)tmp___4, (void const   *)(& tconn->peer_addr),
                     (size_t )tconn->peer_addr_len);
#line 2061
    if (tmp___5 == 0) {
#line 2063
      retcode = ERR_PEER_ADDR;
#line 2064
      goto out;
    } else {

    }
  } else {

  }
#line 2054
  __mptr___0 = (struct list_head  const  *)tconn->all_tconn.next;
#line 2054
  tconn = (struct drbd_tconn *)__mptr___0 + 0xfffffffffffffff8UL;
  ldv_53314: ;
#line 2054
  if ((unsigned long )(& tconn->all_tconn) != (unsigned long )(& drbd_tconns)) {
#line 2055
    goto ldv_53313;
  } else {

  }
#line 2068
  tconn = adm_ctx.tconn;
#line 2069
  conn_reconfig_start(tconn);
#line 2071
  if ((unsigned int )tconn->cstate != 0U) {
#line 2072
    retcode = ERR_NET_CONFIGURED;
#line 2073
    goto fail;
  } else {

  }
#line 2077
  tmp___6 = kzalloc(420UL, 208U);
#line 2077
  new_conf = (struct net_conf *)tmp___6;
#line 2078
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 2079
    retcode = ERR_NOMEM;
#line 2080
    goto fail;
  } else {

  }
#line 2083
  set_net_conf_defaults(new_conf);
#line 2085
  err = net_conf_from_attrs(new_conf, info);
#line 2086
  if (err != 0 && err != -42) {
#line 2087
    retcode = ERR_MANDATORY_TAG;
#line 2088
    tmp___7 = from_attrs_err_to_txt(err);
#line 2088
    drbd_msg_put_info(tmp___7);
#line 2089
    goto fail;
  } else {

  }
#line 2092
  retcode = check_net_options(tconn, new_conf);
#line 2093
  if ((unsigned int )retcode != 101U) {
#line 2094
    goto fail;
  } else {

  }
#line 2096
  retcode = alloc_crypto(& crypto, new_conf);
#line 2097
  if ((unsigned int )retcode != 101U) {
#line 2098
    goto fail;
  } else {

  }
#line 2100
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 2102
  conn_flush_workqueue(tconn);
#line 2104
  mutex_lock_nested(& tconn->conf_update, 0U);
#line 2105
  old_conf = tconn->net_conf;
#line 2106
  if ((unsigned long )old_conf != (unsigned long )((struct net_conf *)0)) {
#line 2107
    retcode = ERR_NET_CONFIGURED;
#line 2108
    mutex_unlock(& tconn->conf_update);
#line 2109
    goto fail;
  } else {

  }
#line 2111
  __asm__  volatile   ("": : : "memory");
#line 2111
  tconn->net_conf = new_conf;
#line 2113
  conn_free_crypto(tconn);
#line 2114
  tconn->cram_hmac_tfm = crypto.cram_hmac_tfm;
#line 2115
  tconn->integrity_tfm = crypto.integrity_tfm;
#line 2116
  tconn->csums_tfm = crypto.csums_tfm;
#line 2117
  tconn->verify_tfm = crypto.verify_tfm;
#line 2119
  tconn->my_addr_len = nla_len((struct nlattr  const  *)adm_ctx.my_addr);
#line 2120
  __len = (size_t )tconn->my_addr_len;
#line 2120
  tmp___9 = nla_data((struct nlattr  const  *)adm_ctx.my_addr);
#line 2120
  __ret = __builtin_memcpy((void *)(& tconn->my_addr), (void const   *)tmp___9, __len);
#line 2121
  tconn->peer_addr_len = nla_len((struct nlattr  const  *)adm_ctx.peer_addr);
#line 2122
  __len___0 = (size_t )tconn->peer_addr_len;
#line 2122
  tmp___11 = nla_data((struct nlattr  const  *)adm_ctx.peer_addr);
#line 2122
  __ret___0 = __builtin_memcpy((void *)(& tconn->peer_addr), (void const   *)tmp___11,
                               __len___0);
#line 2124
  mutex_unlock(& tconn->conf_update);
#line 2126
  rcu_read_lock();
#line 2127
  i = 0;
#line 2127
  tmp___12 = idr_get_next(& tconn->volumes, & i);
#line 2127
  mdev = (struct drbd_conf *)tmp___12;
#line 2127
  goto ldv_53324;
  ldv_53323: 
#line 2128
  mdev->send_cnt = 0U;
#line 2129
  mdev->recv_cnt = 0U;
#line 2127
  i = i + 1;
#line 2127
  tmp___13 = idr_get_next(& tconn->volumes, & i);
#line 2127
  mdev = (struct drbd_conf *)tmp___13;
  ldv_53324: ;
#line 2127
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 2128
    goto ldv_53323;
  } else {

  }
#line 2131
  rcu_read_unlock();
#line 2133
  val.i = 0U;
#line 2133
  val.ldv_40604.conn = 2U;
#line 2133
  mask.i = 0U;
#line 2133
  mask.ldv_40604.conn = 31U;
#line 2133
  tmp___14 = conn_request_state(tconn, mask, val, CS_VERBOSE);
#line 2133
  retcode = (enum drbd_ret_code )tmp___14;
#line 2135
  conn_reconfig_done(tconn);
#line 2136
  drbd_adm_finish(info, (int )retcode);
#line 2137
  return (0);
  fail: 
#line 2140
  free_crypto(& crypto);
#line 2141
  kfree((void const   *)new_conf);
#line 2143
  conn_reconfig_done(tconn);
  out: 
#line 2145
  drbd_adm_finish(info, (int )retcode);
#line 2146
  return (0);
}
}
#line 2149 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static enum drbd_state_rv conn_try_disconnect(struct drbd_tconn *tconn , bool force ) 
{ 
  enum drbd_state_rv rv ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  enum drbd_state_rv rv2 ;
  union drbd_state val___3 ;
  union drbd_state mask___3 ;

  {
#line 2153
  val.i = 0U;
#line 2153
  val.ldv_40604.conn = 1U;
#line 2153
  mask.i = 0U;
#line 2153
  mask.ldv_40604.conn = 31U;
#line 2153
  rv = conn_request_state(tconn, mask, val, (enum chg_state_flags )force);
#line 2156
  switch ((int )rv) {
  case 2: ;
#line 2158
  goto ldv_53340;
  case -9: ;
#line 2160
  return (SS_SUCCESS);
  case -7: 
#line 2164
  val___0.i = 0U;
#line 2164
  val___0.ldv_40604.conn = 1U;
#line 2164
  val___0.ldv_40604.pdsk = 5U;
#line 2163
  mask___0.i = 0U;
#line 2163
  mask___0.ldv_40604.conn = 31U;
#line 2164
  mask___0.ldv_40604.pdsk = 15U;
#line 2164
  rv = conn_request_state(tconn, mask___0, val___0, CS_VERBOSE);
#line 2165
  goto ldv_53340;
  case -10: 
#line 2169
  val___1.i = 0U;
#line 2169
  val___1.ldv_40604.conn = 1U;
#line 2169
  val___1.ldv_40604.disk = 5U;
#line 2168
  mask___1.i = 0U;
#line 2168
  mask___1.ldv_40604.conn = 31U;
#line 2169
  mask___1.ldv_40604.disk = 15U;
#line 2169
  rv = conn_request_state(tconn, mask___1, val___1, 0);
#line 2170
  if ((int )rv == -11 || (int )rv == -16) {
#line 2171
    val___2.i = 0U;
#line 2171
    val___2.ldv_40604.conn = 1U;
#line 2171
    mask___2.i = 0U;
#line 2171
    mask___2.ldv_40604.conn = 31U;
#line 2171
    rv = conn_request_state(tconn, mask___2, val___2, CS_HARD);
  } else {

  }
#line 2174
  goto ldv_53340;
  default: ;
  }
  ldv_53340: ;
#line 2179
  if ((int )rv > 0) {
#line 2185
    drbd_thread_stop(& (adm_ctx.tconn)->receiver);
#line 2193
    val___3.i = 0U;
#line 2193
    val___3.ldv_40604.conn = 0U;
#line 2193
    mask___3.i = 0U;
#line 2193
    mask___3.ldv_40604.conn = 31U;
#line 2193
    rv2 = conn_request_state(tconn, mask___3, val___3, 3);
#line 2195
    if ((int )rv2 <= 0) {
#line 2196
      printk("\vd-con %s: unexpected rv2=%d in conn_try_disconnect()\n", tconn->name,
             (int )rv2);
    } else {

    }
  } else {

  }
#line 2200
  return (rv);
}
}
#line 2203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_disconnect(struct sk_buff *skb , struct genl_info *info ) 
{ 
  struct disconnect_parms parms ;
  struct drbd_tconn *tconn ;
  enum drbd_state_rv rv ;
  enum drbd_ret_code retcode ;
  int err ;
  int tmp ;
  char const   *tmp___0 ;

  {
#line 2211
  tmp = drbd_adm_prepare(skb, info, 4U);
#line 2211
  retcode = (enum drbd_ret_code )tmp;
#line 2212
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 2213
    return ((int )retcode);
  } else {

  }
#line 2214
  if ((unsigned int )retcode != 101U) {
#line 2215
    goto fail;
  } else {

  }
#line 2217
  tconn = adm_ctx.tconn;
#line 2218
  memset((void *)(& parms), 0, 1UL);
#line 2219
  if ((unsigned long )*(info->attrs + 12UL) != (unsigned long )((struct nlattr *)0)) {
#line 2220
    err = disconnect_parms_from_attrs(& parms, info);
#line 2221
    if (err != 0) {
#line 2222
      retcode = ERR_MANDATORY_TAG;
#line 2223
      tmp___0 = from_attrs_err_to_txt(err);
#line 2223
      drbd_msg_put_info(tmp___0);
#line 2224
      goto fail;
    } else {

    }
  } else {

  }
#line 2228
  rv = conn_try_disconnect(tconn, (int )((signed char )parms.force_disconnect) != 0);
#line 2229
  if ((int )rv <= 0) {
#line 2230
    retcode = (enum drbd_ret_code )rv;
  } else {
#line 2232
    retcode = NO_ERROR;
  }
  fail: 
#line 2234
  drbd_adm_finish(info, (int )retcode);
#line 2235
  return (0);
}
}
#line 2238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2242
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 2243
  if ((int )mdev->state.ldv_50103.role != (int )mdev->state.ldv_50103.peer) {
#line 2244
    iass = (unsigned int )*((unsigned char *)mdev + 748UL) == 1U;
  } else {
#line 2246
    iass = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->tconn)->flags));
  }
#line 2248
  if (iass != 0) {
#line 2249
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 2251
    val.i = 0U;
#line 2251
    val.ldv_40604.conn = 15U;
#line 2251
    mask.i = 0U;
#line 2251
    mask.ldv_40604.conn = 31U;
#line 2251
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 2253
  return;
}
}
#line 2254 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_resize(struct sk_buff *skb , struct genl_info *info ) 
{ 
  struct disk_conf *old_disk_conf ;
  struct disk_conf *new_disk_conf ;
  struct resize_parms rs ;
  struct drbd_conf *mdev ;
  enum drbd_ret_code retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  sector_t u_size ;
  int err ;
  int tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  sector_t tmp___5 ;

  {
#line 2256
  new_disk_conf = 0;
#line 2265
  tmp = drbd_adm_prepare(skb, info, 1U);
#line 2265
  retcode = (enum drbd_ret_code )tmp;
#line 2266
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 2267
    return ((int )retcode);
  } else {

  }
#line 2268
  if ((unsigned int )retcode != 101U) {
#line 2269
    goto fail;
  } else {

  }
#line 2271
  memset((void *)(& rs), 0, 16UL);
#line 2272
  if ((unsigned long )*(info->attrs + 7UL) != (unsigned long )((struct nlattr *)0)) {
#line 2273
    err = resize_parms_from_attrs(& rs, info);
#line 2274
    if (err != 0) {
#line 2275
      retcode = ERR_MANDATORY_TAG;
#line 2276
      tmp___0 = from_attrs_err_to_txt(err);
#line 2276
      drbd_msg_put_info(tmp___0);
#line 2277
      goto fail;
    } else {

    }
  } else {

  }
#line 2281
  mdev = adm_ctx.mdev;
#line 2282
  if ((int )mdev->state.ldv_50103.conn > 10) {
#line 2283
    retcode = ERR_RESIZE_RESYNC;
#line 2284
    goto fail;
  } else {

  }
#line 2287
  if ((unsigned int )*((unsigned char *)mdev + 748UL) == 2U && (unsigned int )*((unsigned char *)mdev + 748UL) == 8U) {
#line 2289
    retcode = ERR_NO_PRIMARY;
#line 2290
    goto fail;
  } else {

  }
#line 2293
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2293
  if (tmp___1 == 0) {
#line 2294
    retcode = ERR_NO_DISK;
#line 2295
    goto fail;
  } else {

  }
#line 2298
  if ((int )((signed char )rs.no_resync) != 0 && (mdev->tconn)->agreed_pro_version <= 92) {
#line 2299
    retcode = ERR_NEED_APV_93;
#line 2300
    goto fail_ldev;
  } else {

  }
#line 2303
  rcu_read_lock();
#line 2304
  _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 2304
  tmp___2 = debug_lockdep_rcu_enabled();
#line 2304
  if (tmp___2 != 0 && ! __warned) {
#line 2304
    tmp___3 = rcu_read_lock_held();
#line 2304
    if (tmp___3 == 0 && 1) {
#line 2304
      __warned = 1;
#line 2304
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
                             2304, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 2304
  u_size = (sector_t )_________p1->disk_size;
#line 2305
  rcu_read_unlock();
#line 2306
  if ((unsigned long )rs.resize_size != u_size) {
#line 2307
    tmp___4 = kmalloc(344UL, 208U);
#line 2307
    new_disk_conf = (struct disk_conf *)tmp___4;
#line 2308
    if ((unsigned long )new_disk_conf == (unsigned long )((struct disk_conf *)0)) {
#line 2309
      retcode = ERR_NOMEM;
#line 2310
      goto fail_ldev;
    } else {

    }
  } else {

  }
#line 2314
  tmp___5 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 2314
  if ((mdev->ldev)->known_size != tmp___5) {
#line 2315
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 2317
  if ((unsigned long )new_disk_conf != (unsigned long )((struct disk_conf *)0)) {
#line 2318
    mutex_lock_nested(& (mdev->tconn)->conf_update, 0U);
#line 2319
    old_disk_conf = (mdev->ldev)->disk_conf;
#line 2320
    *new_disk_conf = *old_disk_conf;
#line 2321
    new_disk_conf->disk_size = rs.resize_size;
#line 2322
    __asm__  volatile   ("": : : "memory");
#line 2322
    (mdev->ldev)->disk_conf = new_disk_conf;
#line 2323
    mutex_unlock(& (mdev->tconn)->conf_update);
#line 2324
    synchronize_rcu();
#line 2325
    kfree((void const   *)old_disk_conf);
  } else {

  }
#line 2328
  ddsf = (enum dds_flags )(((int )((signed char )rs.resize_force) != 0) | ((int )((signed char )rs.no_resync) != 0 ? 2 : 0));
#line 2329
  dd = drbd_determine_dev_size(mdev, ddsf);
#line 2330
  drbd_md_sync(mdev);
#line 2331
  put_ldev(mdev);
#line 2332
  if ((int )dd == -1) {
#line 2333
    retcode = ERR_NOMEM_BITMAP;
#line 2334
    goto fail;
  } else {

  }
#line 2337
  if ((unsigned int )*((unsigned short *)mdev + 374UL) == 160U) {
#line 2338
    if ((int )dd == 2) {
#line 2339
      set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 2341
    drbd_send_uuids(mdev);
#line 2342
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 2346
  drbd_adm_finish(info, (int )retcode);
#line 2347
  return (0);
  fail_ldev: 
#line 2350
  put_ldev(mdev);
#line 2351
  goto fail;
}
}
#line 2354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_resource_opts(struct sk_buff *skb , struct genl_info *info ) 
{ 
  enum drbd_ret_code retcode ;
  struct drbd_tconn *tconn ;
  struct res_opts res_opts ;
  int err ;
  int tmp ;
  bool tmp___0 ;
  char const   *tmp___1 ;

  {
#line 2361
  tmp = drbd_adm_prepare(skb, info, 2U);
#line 2361
  retcode = (enum drbd_ret_code )tmp;
#line 2362
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 2363
    return ((int )retcode);
  } else {

  }
#line 2364
  if ((unsigned int )retcode != 101U) {
#line 2365
    goto fail;
  } else {

  }
#line 2366
  tconn = adm_ctx.tconn;
#line 2368
  res_opts = tconn->res_opts;
#line 2369
  tmp___0 = should_set_defaults(info);
#line 2369
  if ((int )tmp___0) {
#line 2370
    set_res_opts_defaults(& res_opts);
  } else {

  }
#line 2372
  err = res_opts_from_attrs(& res_opts, info);
#line 2373
  if (err != 0 && err != -42) {
#line 2374
    retcode = ERR_MANDATORY_TAG;
#line 2375
    tmp___1 = from_attrs_err_to_txt(err);
#line 2375
    drbd_msg_put_info(tmp___1);
#line 2376
    goto fail;
  } else {

  }
#line 2379
  err = set_resource_options(tconn, & res_opts);
#line 2380
  if (err != 0) {
#line 2381
    retcode = ERR_INVALID_REQUEST;
#line 2382
    if (err == -12) {
#line 2383
      retcode = ERR_NOMEM;
    } else {

    }
  } else {

  }
  fail: 
#line 2387
  drbd_adm_finish(info, (int )retcode);
#line 2388
  return (0);
}
}
#line 2391 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_invalidate(struct sk_buff *skb , struct genl_info *info ) 
{ 
  struct drbd_conf *mdev ;
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 2396
  retcode = drbd_adm_prepare(skb, info, 1U);
#line 2397
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 2398
    return (retcode);
  } else {

  }
#line 2399
  if (retcode != 101) {
#line 2400
    goto out;
  } else {

  }
#line 2402
  mdev = adm_ctx.mdev;
#line 2407
  drbd_suspend_io(mdev);
#line 2408
  tmp = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 2408
  if (tmp == 0) {
#line 2408
    goto ldv_53414;
  } else {

  }
#line 2408
  tmp___0 = get_current();
#line 2408
  __wait.flags = 0U;
#line 2408
  __wait.private = (void *)tmp___0;
#line 2408
  __wait.func = & autoremove_wake_function;
#line 2408
  __wait.task_list.next = & __wait.task_list;
#line 2408
  __wait.task_list.prev = & __wait.task_list;
  ldv_53417: 
#line 2408
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2408
  tmp___1 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 2408
  if (tmp___1 == 0) {
#line 2408
    goto ldv_53416;
  } else {

  }
#line 2408
  schedule();
#line 2408
  goto ldv_53417;
  ldv_53416: 
#line 2408
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53414: 
#line 2409
  drbd_flush_workqueue(mdev);
#line 2411
  val.i = 0U;
#line 2411
  val.ldv_40604.conn = 12U;
#line 2411
  mask.i = 0U;
#line 2411
  mask.ldv_40604.conn = 31U;
#line 2411
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2411
  retcode = (int )tmp___2;
#line 2413
  if (retcode <= 0 && retcode != -15) {
#line 2414
    val___0.i = 0U;
#line 2414
    val___0.ldv_40604.conn = 12U;
#line 2414
    mask___0.i = 0U;
#line 2414
    mask___0.ldv_40604.conn = 31U;
#line 2414
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 2416
  goto ldv_53434;
  ldv_53433: 
#line 2417
  spin_lock_irq(& (mdev->tconn)->req_lock);
#line 2418
  if ((int )mdev->state.ldv_50103.conn <= 9) {
#line 2419
    __ns = drbd_read_state(mdev);
#line 2419
    __ns.ldv_40604.disk = 4U;
#line 2419
    tmp___3 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2419
    retcode = (int )tmp___3;
  } else {

  }
#line 2420
  spin_unlock_irq(& (mdev->tconn)->req_lock);
#line 2422
  if (retcode != -15) {
#line 2423
    goto ldv_53428;
  } else {

  }
#line 2425
  val___1.i = 0U;
#line 2425
  val___1.ldv_40604.conn = 12U;
#line 2425
  mask___1.i = 0U;
#line 2425
  mask___1.ldv_40604.conn = 31U;
#line 2425
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_53434: ;
#line 2416
  if (retcode == -15) {
#line 2417
    goto ldv_53433;
  } else {

  }
  ldv_53428: 
#line 2427
  drbd_resume_io(mdev);
  out: 
#line 2430
  drbd_adm_finish(info, retcode);
#line 2431
  return (0);
}
}
#line 2434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_adm_simple_request_state(struct sk_buff *skb , struct genl_info *info ,
                                         union drbd_state mask , union drbd_state val ) 
{ 
  enum drbd_ret_code retcode ;
  int tmp ;
  int tmp___0 ;

  {
#line 2439
  tmp = drbd_adm_prepare(skb, info, 1U);
#line 2439
  retcode = (enum drbd_ret_code )tmp;
#line 2440
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 2441
    return ((int )retcode);
  } else {

  }
#line 2442
  if ((unsigned int )retcode != 101U) {
#line 2443
    goto out;
  } else {

  }
#line 2445
  tmp___0 = drbd_request_state(adm_ctx.mdev, mask, val);
#line 2445
  retcode = (enum drbd_ret_code )tmp___0;
  out: 
#line 2447
  drbd_adm_finish(info, (int )retcode);
#line 2448
  return (0);
}
}
#line 2451 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_bmio_set_susp_al(struct drbd_conf *mdev ) 
{ 
  int rv ;

  {
#line 2455
  rv = drbd_bmio_set_n_write(mdev);
#line 2456
  drbd_suspend_al(mdev);
#line 2457
  return (rv);
}
}
#line 2460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_invalidate_peer(struct sk_buff *skb , struct genl_info *info ) 
{ 
  int retcode ;
  struct drbd_conf *mdev ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 2465
  retcode = drbd_adm_prepare(skb, info, 1U);
#line 2466
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 2467
    return (retcode);
  } else {

  }
#line 2468
  if (retcode != 101) {
#line 2469
    goto out;
  } else {

  }
#line 2471
  mdev = adm_ctx.mdev;
#line 2476
  drbd_suspend_io(mdev);
#line 2477
  tmp = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 2477
  if (tmp == 0) {
#line 2477
    goto ldv_53454;
  } else {

  }
#line 2477
  tmp___0 = get_current();
#line 2477
  __wait.flags = 0U;
#line 2477
  __wait.private = (void *)tmp___0;
#line 2477
  __wait.func = & autoremove_wake_function;
#line 2477
  __wait.task_list.next = & __wait.task_list;
#line 2477
  __wait.task_list.prev = & __wait.task_list;
  ldv_53457: 
#line 2477
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2477
  tmp___1 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 2477
  if (tmp___1 == 0) {
#line 2477
    goto ldv_53456;
  } else {

  }
#line 2477
  schedule();
#line 2477
  goto ldv_53457;
  ldv_53456: 
#line 2477
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53454: 
#line 2478
  drbd_flush_workqueue(mdev);
#line 2480
  val.i = 0U;
#line 2480
  val.ldv_40604.conn = 11U;
#line 2480
  mask.i = 0U;
#line 2480
  mask.ldv_40604.conn = 31U;
#line 2480
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2480
  retcode = (int )tmp___2;
#line 2481
  if (retcode <= 0) {
#line 2482
    if (retcode == -15 && (unsigned int )*((unsigned char *)mdev + 748UL) == 1U) {
#line 2485
      val___0.i = 0U;
#line 2485
      val___0.ldv_40604.pdsk = 4U;
#line 2485
      mask___0.i = 0U;
#line 2485
      mask___0.ldv_40604.pdsk = 15U;
#line 2485
      retcode = drbd_request_state(mdev, mask___0, val___0);
#line 2486
      if (retcode > 0) {
#line 2487
        tmp___3 = drbd_bitmap_io(mdev, & drbd_bmio_set_susp_al, (char *)"set_n_write from invalidate_peer",
                                 BM_LOCKED_SET_ALLOWED);
#line 2487
        if (tmp___3 != 0) {
#line 2490
          retcode = 118;
        } else {

        }
      } else {

      }
    } else {
#line 2493
      val___1.i = 0U;
#line 2493
      val___1.ldv_40604.conn = 11U;
#line 2493
      mask___1.i = 0U;
#line 2493
      mask___1.ldv_40604.conn = 31U;
#line 2493
      retcode = drbd_request_state(mdev, mask___1, val___1);
    }
  } else {

  }
#line 2495
  drbd_resume_io(mdev);
  out: 
#line 2498
  drbd_adm_finish(info, retcode);
#line 2499
  return (0);
}
}
#line 2502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_pause_sync(struct sk_buff *skb , struct genl_info *info ) 
{ 
  enum drbd_ret_code retcode ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___0 ;

  {
#line 2506
  tmp = drbd_adm_prepare(skb, info, 1U);
#line 2506
  retcode = (enum drbd_ret_code )tmp;
#line 2507
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 2508
    return ((int )retcode);
  } else {

  }
#line 2509
  if ((unsigned int )retcode != 101U) {
#line 2510
    goto out;
  } else {

  }
#line 2512
  val.i = 0U;
#line 2512
  val.ldv_40604.user_isp = 1U;
#line 2512
  mask.i = 0U;
#line 2512
  mask.ldv_40604.user_isp = 1U;
#line 2512
  tmp___0 = drbd_request_state(adm_ctx.mdev, mask, val);
#line 2512
  if (tmp___0 == 2) {
#line 2513
    retcode = ERR_PAUSE_IS_SET;
  } else {

  }
  out: 
#line 2515
  drbd_adm_finish(info, (int )retcode);
#line 2516
  return (0);
}
}
#line 2519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_resume_sync(struct sk_buff *skb , struct genl_info *info ) 
{ 
  union drbd_dev_state s ;
  enum drbd_ret_code retcode ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___0 ;

  {
#line 2524
  tmp = drbd_adm_prepare(skb, info, 1U);
#line 2524
  retcode = (enum drbd_ret_code )tmp;
#line 2525
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 2526
    return ((int )retcode);
  } else {

  }
#line 2527
  if ((unsigned int )retcode != 101U) {
#line 2528
    goto out;
  } else {

  }
#line 2530
  val.i = 0U;
#line 2530
  val.ldv_40604.user_isp = 0U;
#line 2530
  mask.i = 0U;
#line 2530
  mask.ldv_40604.user_isp = 1U;
#line 2530
  tmp___0 = drbd_request_state(adm_ctx.mdev, mask, val);
#line 2530
  if (tmp___0 == 2) {
#line 2531
    s = (adm_ctx.mdev)->state;
#line 2532
    if ((unsigned int )*((unsigned short *)(& s) + 0UL) == 320U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 336U) {
#line 2533
      retcode = (unsigned int )*((unsigned char *)(& s) + 2UL) == 0U ? ((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U ? ERR_PIC_PEER_DEP : ERR_PAUSE_IS_CLEAR) : ERR_PIC_AFTER_DEP;
    } else {
#line 2536
      retcode = ERR_PAUSE_IS_CLEAR;
    }
  } else {

  }
  out: 
#line 2541
  drbd_adm_finish(info, (int )retcode);
#line 2542
  return (0);
}
}
#line 2545 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_suspend_io(struct sk_buff *skb , struct genl_info *info ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2547
  val.i = 0U;
#line 2547
  val.ldv_40604.susp = 1U;
#line 2547
  mask.i = 0U;
#line 2547
  mask.ldv_40604.susp = 1U;
#line 2547
  tmp = drbd_adm_simple_request_state(skb, info, mask, val);
#line 2547
  return (tmp);
}
}
#line 2550 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_resume_io(struct sk_buff *skb , struct genl_info *info ) 
{ 
  struct drbd_conf *mdev ;
  int retcode ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2555
  retcode = drbd_adm_prepare(skb, info, 1U);
#line 2556
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 2557
    return (retcode);
  } else {

  }
#line 2558
  if (retcode != 101) {
#line 2559
    goto out;
  } else {

  }
#line 2561
  mdev = adm_ctx.mdev;
#line 2562
  tmp = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2562
  if (tmp != 0) {
#line 2563
    drbd_uuid_new_current(mdev);
#line 2564
    clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2566
  drbd_suspend_io(mdev);
#line 2567
  val.i = 0U;
#line 2567
  val.ldv_40604.susp = 0U;
#line 2567
  val.ldv_40604.susp_nod = 0U;
#line 2567
  val.ldv_40604.susp_fen = 0U;
#line 2567
  mask.i = 0U;
#line 2567
  mask.ldv_40604.susp = 1U;
#line 2567
  mask.ldv_40604.susp_nod = 1U;
#line 2567
  mask.ldv_40604.susp_fen = 1U;
#line 2567
  retcode = drbd_request_state(mdev, mask, val);
#line 2568
  if (retcode == 1) {
#line 2569
    if ((int )mdev->state.ldv_50103.conn <= 9) {
#line 2570
      tl_clear(mdev->tconn);
    } else {

    }
#line 2571
    if ((unsigned int )*((unsigned char *)mdev + 749UL) == 0U || (unsigned int )*((unsigned char *)mdev + 749UL) == 4U) {
#line 2572
      tl_restart(mdev->tconn, FAIL_FROZEN_DISK_IO);
    } else {

    }
  } else {

  }
#line 2574
  drbd_resume_io(mdev);
  out: 
#line 2577
  drbd_adm_finish(info, retcode);
#line 2578
  return (0);
}
}
#line 2581 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_outdate(struct sk_buff *skb , struct genl_info *info ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2583
  val.i = 0U;
#line 2583
  val.ldv_40604.disk = 5U;
#line 2583
  mask.i = 0U;
#line 2583
  mask.ldv_40604.disk = 15U;
#line 2583
  tmp = drbd_adm_simple_request_state(skb, info, mask, val);
#line 2583
  return (tmp);
}
}
#line 2586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int nla_put_drbd_cfg_context(struct sk_buff *skb , struct drbd_tconn *tconn , unsigned int vnr ) 
{ 
  struct nlattr *nla ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2589
  nla = nla_nest_start(skb, 2);
#line 2590
  if ((unsigned long )nla == (unsigned long )((struct nlattr *)0)) {
#line 2591
    goto nla_put_failure;
  } else {

  }
#line 2592
  if (vnr != 4294967295U) {
#line 2592
    tmp = nla_put_u32(skb, 16385, vnr);
#line 2592
    if (tmp != 0) {
#line 2594
      goto nla_put_failure;
    } else {

    }
  } else {

  }
#line 2595
  tmp___0 = nla_put_string(skb, 16386, (char const   *)tconn->name);
#line 2595
  if (tmp___0 != 0) {
#line 2596
    goto nla_put_failure;
  } else {

  }
#line 2597
  if (tconn->my_addr_len != 0) {
#line 2597
    tmp___1 = nla_put(skb, 16387, tconn->my_addr_len, (void const   *)(& tconn->my_addr));
#line 2597
    if (tmp___1 != 0) {
#line 2599
      goto nla_put_failure;
    } else {

    }
  } else {

  }
#line 2600
  if (tconn->peer_addr_len != 0) {
#line 2600
    tmp___2 = nla_put(skb, 16388, tconn->peer_addr_len, (void const   *)(& tconn->peer_addr));
#line 2600
    if (tmp___2 != 0) {
#line 2602
      goto nla_put_failure;
    } else {

    }
  } else {

  }
#line 2603
  nla_nest_end(skb, nla);
#line 2604
  return (0);
  nla_put_failure: ;
#line 2607
  if ((unsigned long )nla != (unsigned long )((struct nlattr *)0)) {
#line 2608
    nla_nest_cancel(skb, nla);
  } else {

  }
#line 2609
  return (-90);
}
}
#line 2612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int nla_put_status_info(struct sk_buff *skb , struct drbd_conf *mdev , struct sib_info  const  *sib ) 
{ 
  struct state_info *si ;
  struct net_conf *nc ;
  struct nlattr *nla ;
  int got_ldev ;
  int err ;
  int exclude_sensitive ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  struct net_conf *_________p1___0 ;
  bool __warned___0 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  sector_t tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int err___0 ;
  int tmp___26 ;
  unsigned long tmp___27 ;
  int tmp___28 ;
  unsigned long tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;

  {
#line 2615
  si = 0;
#line 2619
  err = 0;
#line 2633
  if ((unsigned long )sib != (unsigned long )((struct sib_info  const  *)0)) {
#line 2633
    tmp___1 = 1;
  } else {
#line 2633
    tmp = capable(21);
#line 2633
    if (tmp) {
#line 2633
      tmp___0 = 0;
    } else {
#line 2633
      tmp___0 = 1;
    }
#line 2633
    if (tmp___0) {
#line 2633
      tmp___1 = 1;
    } else {
#line 2633
      tmp___1 = 0;
    }
  }
#line 2633
  exclude_sensitive = tmp___1;
#line 2635
  got_ldev = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2639
  tmp___2 = nla_put_drbd_cfg_context(skb, mdev->tconn, (unsigned int )mdev->vnr);
#line 2639
  if (tmp___2 != 0) {
#line 2640
    goto nla_put_failure;
  } else {

  }
#line 2642
  tmp___3 = res_opts_to_skb(skb, & (mdev->tconn)->res_opts, exclude_sensitive != 0);
#line 2642
  if (tmp___3 != 0) {
#line 2643
    goto nla_put_failure;
  } else {

  }
#line 2645
  rcu_read_lock();
#line 2646
  if (got_ldev != 0) {
#line 2647
    _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 2647
    tmp___4 = debug_lockdep_rcu_enabled();
#line 2647
    if (tmp___4 != 0 && ! __warned) {
#line 2647
      tmp___5 = rcu_read_lock_held();
#line 2647
      if (tmp___5 == 0 && 1) {
#line 2647
        __warned = 1;
#line 2647
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
                               2647, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 2647
    tmp___6 = disk_conf_to_skb(skb, _________p1, exclude_sensitive != 0);
#line 2647
    if (tmp___6 != 0) {
#line 2648
      goto nla_put_failure;
    } else {

    }
  } else {

  }
#line 2650
  _________p1___0 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 2650
  tmp___7 = debug_lockdep_rcu_enabled();
#line 2650
  if (tmp___7 != 0 && ! __warned___0) {
#line 2650
    tmp___8 = rcu_read_lock_held();
#line 2650
    if (tmp___8 == 0 && 1) {
#line 2650
      __warned___0 = 1;
#line 2650
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
                             2650, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 2650
  nc = _________p1___0;
#line 2651
  if ((unsigned long )nc != (unsigned long )((struct net_conf *)0)) {
#line 2652
    err = net_conf_to_skb(skb, nc, exclude_sensitive != 0);
  } else {

  }
#line 2653
  rcu_read_unlock();
#line 2654
  if (err != 0) {
#line 2655
    goto nla_put_failure;
  } else {

  }
#line 2657
  nla = nla_nest_start(skb, 8);
#line 2658
  if ((unsigned long )nla == (unsigned long )((struct nlattr *)0)) {
#line 2659
    goto nla_put_failure;
  } else {

  }
#line 2660
  tmp___9 = nla_put_u32(skb, 16385, (unsigned long )sib != (unsigned long )((struct sib_info  const  *)0) ? (unsigned int )sib->sib_reason : 1U);
#line 2660
  if (tmp___9 != 0) {
#line 2673
    goto nla_put_failure;
  } else {
#line 2660
    tmp___10 = nla_put_u32(skb, 2, mdev->state.i);
#line 2660
    if (tmp___10 != 0) {
#line 2673
      goto nla_put_failure;
    } else {
#line 2660
      tmp___11 = nla_put_u64(skb, 16388, mdev->ed_uuid);
#line 2660
      if (tmp___11 != 0) {
#line 2673
        goto nla_put_failure;
      } else {
#line 2660
        tmp___12 = drbd_get_capacity(mdev->this_bdev);
#line 2660
        tmp___13 = nla_put_u64(skb, 16387, (u64 )tmp___12);
#line 2660
        if (tmp___13 != 0) {
#line 2673
          goto nla_put_failure;
        } else {
#line 2660
          tmp___14 = nla_put_u64(skb, 15, (u64 )mdev->send_cnt);
#line 2660
          if (tmp___14 != 0) {
#line 2673
            goto nla_put_failure;
          } else {
#line 2660
            tmp___15 = nla_put_u64(skb, 16, (u64 )mdev->recv_cnt);
#line 2660
            if (tmp___15 != 0) {
#line 2673
              goto nla_put_failure;
            } else {
#line 2660
              tmp___16 = nla_put_u64(skb, 17, (u64 )mdev->read_cnt);
#line 2660
              if (tmp___16 != 0) {
#line 2673
                goto nla_put_failure;
              } else {
#line 2660
                tmp___17 = nla_put_u64(skb, 18, (u64 )mdev->writ_cnt);
#line 2660
                if (tmp___17 != 0) {
#line 2673
                  goto nla_put_failure;
                } else {
#line 2660
                  tmp___18 = nla_put_u64(skb, 19, (u64 )mdev->al_writ_cnt);
#line 2660
                  if (tmp___18 != 0) {
#line 2673
                    goto nla_put_failure;
                  } else {
#line 2660
                    tmp___19 = nla_put_u64(skb, 20, (u64 )mdev->bm_writ_cnt);
#line 2660
                    if (tmp___19 != 0) {
#line 2673
                      goto nla_put_failure;
                    } else {
#line 2660
                      tmp___20 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2660
                      tmp___21 = nla_put_u32(skb, 21, (u32 )tmp___20);
#line 2660
                      if (tmp___21 != 0) {
#line 2673
                        goto nla_put_failure;
                      } else {
#line 2660
                        tmp___22 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 2660
                        tmp___23 = nla_put_u32(skb, 22, (u32 )tmp___22);
#line 2660
                        if (tmp___23 != 0) {
#line 2673
                          goto nla_put_failure;
                        } else {
#line 2660
                          tmp___24 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2660
                          tmp___25 = nla_put_u32(skb, 23, (u32 )tmp___24);
#line 2660
                          if (tmp___25 != 0) {
#line 2673
                            goto nla_put_failure;
                          } else {

                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
#line 2675
  if (got_ldev != 0) {
#line 2678
    spin_lock_irq(& (mdev->ldev)->md.uuid_lock);
#line 2679
    err___0 = nla_put(skb, 16391, 32, (void const   *)(& (mdev->ldev)->md.uuid));
#line 2680
    spin_unlock_irq(& (mdev->ldev)->md.uuid_lock);
#line 2682
    if (err___0 != 0) {
#line 2683
      goto nla_put_failure;
    } else {

    }
#line 2685
    tmp___26 = nla_put_u32(skb, 16392, (mdev->ldev)->md.flags);
#line 2685
    if (tmp___26 != 0) {
#line 2688
      goto nla_put_failure;
    } else {
#line 2685
      tmp___27 = drbd_bm_bits(mdev);
#line 2685
      tmp___28 = nla_put_u64(skb, 16393, (u64 )tmp___27);
#line 2685
      if (tmp___28 != 0) {
#line 2688
        goto nla_put_failure;
      } else {
#line 2685
        tmp___29 = drbd_bm_total_weight(mdev);
#line 2685
        tmp___30 = nla_put_u64(skb, 16394, (u64 )tmp___29);
#line 2685
        if (tmp___30 != 0) {
#line 2688
          goto nla_put_failure;
        } else {

        }
      }
    }
#line 2689
    if ((int )mdev->state.ldv_50103.conn > 15 && (int )mdev->state.ldv_50103.conn <= 21) {
#line 2691
      tmp___31 = nla_put_u64(skb, 16395, (u64 )mdev->rs_total);
#line 2691
      if (tmp___31 != 0) {
#line 2693
        goto nla_put_failure;
      } else {
#line 2691
        tmp___32 = nla_put_u64(skb, 16396, (u64 )mdev->rs_failed);
#line 2691
        if (tmp___32 != 0) {
#line 2693
          goto nla_put_failure;
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 2697
  if ((unsigned long )sib != (unsigned long )((struct sib_info  const  *)0)) {
#line 2698
    switch ((unsigned int )sib->sib_reason) {
    case 5U: ;
    case 1U: ;
#line 2701
    goto ldv_53546;
    case 2U: 
#line 2703
    tmp___33 = nla_put_u32(skb, 16389, sib->ldv_51335.ldv_51334.os.i);
#line 2703
    if (tmp___33 != 0) {
#line 2705
      goto nla_put_failure;
    } else {
#line 2703
      tmp___34 = nla_put_u32(skb, 16390, sib->ldv_51335.ldv_51334.ns.i);
#line 2703
      if (tmp___34 != 0) {
#line 2705
        goto nla_put_failure;
      } else {

      }
    }
#line 2706
    goto ldv_53546;
    case 4U: 
#line 2708
    tmp___35 = nla_put_u32(skb, 16398, sib->ldv_51335.ldv_51330.helper_exit_code);
#line 2708
    if (tmp___35 != 0) {
#line 2710
      goto nla_put_failure;
    } else {

    }
    case 3U: 
#line 2713
    tmp___36 = nla_put_string(skb, 16397, (char const   *)sib->ldv_51335.ldv_51330.helper_name);
#line 2713
    if (tmp___36 != 0) {
#line 2714
      goto nla_put_failure;
    } else {

    }
#line 2715
    goto ldv_53546;
    }
    ldv_53546: ;
  } else {

  }
#line 2718
  nla_nest_end(skb, nla);
#line 2720
  if (0) {
    nla_put_failure: 
#line 2722
    err = -90;
  } else {

  }
#line 2723
  if (got_ldev != 0) {
#line 2724
    put_ldev(mdev);
  } else {

  }
#line 2725
  return (err);
}
}
#line 2728 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_get_status(struct sk_buff *skb , struct genl_info *info ) 
{ 
  enum drbd_ret_code retcode ;
  int err ;
  int tmp ;

  {
#line 2733
  tmp = drbd_adm_prepare(skb, info, 1U);
#line 2733
  retcode = (enum drbd_ret_code )tmp;
#line 2734
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 2735
    return ((int )retcode);
  } else {

  }
#line 2736
  if ((unsigned int )retcode != 101U) {
#line 2737
    goto out;
  } else {

  }
#line 2739
  err = nla_put_status_info(adm_ctx.reply_skb, adm_ctx.mdev, 0);
#line 2740
  if (err != 0) {
#line 2741
    nlmsg_free(adm_ctx.reply_skb);
#line 2742
    return (err);
  } else {

  }
  out: 
#line 2745
  drbd_adm_finish(info, (int )retcode);
#line 2746
  return (0);
}
}
#line 2749 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int get_one_status(struct sk_buff *skb , struct netlink_callback *cb ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_genlmsghdr *dh ;
  struct drbd_tconn *pos ;
  struct drbd_tconn *tconn ;
  struct drbd_tconn *tmp ;
  unsigned int volume ;
  struct list_head *__ptr ;
  struct list_head  const  *__mptr ;
  struct list_head *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  struct list_head *__ptr___0 ;
  struct list_head  const  *__mptr___0 ;
  struct list_head *_________p1___0 ;
  bool __warned___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  struct list_head *__ptr___1 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head *_________p1___1 ;
  bool __warned___1 ;
  int tmp___3 ;
  void *tmp___4 ;
  struct net_conf *nc ;
  int tmp___5 ;
  struct net_conf *_________p1___2 ;
  bool __warned___2 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 2753
  pos = (struct drbd_tconn *)cb->args[0];
#line 2754
  tconn = 0;
#line 2756
  volume = (unsigned int )cb->args[1];
#line 2779
  rcu_read_lock();
#line 2781
  __ptr = drbd_tconns.next;
#line 2781
  _________p1 = *((struct list_head * volatile  *)(& __ptr));
#line 2781
  tmp___0 = debug_lockdep_rcu_enabled();
#line 2781
  if (tmp___0 != 0 && ! __warned) {
#line 2781
    rcu_read_lock_held();
  } else {

  }
#line 2781
  __mptr = (struct list_head  const  *)_________p1;
#line 2781
  tmp = (struct drbd_tconn *)__mptr + 0xfffffffffffffff8UL;
#line 2781
  goto ldv_53583;
  ldv_53582: ;
#line 2782
  if ((unsigned long )pos == (unsigned long )((struct drbd_tconn *)0)) {
#line 2784
    pos = tmp;
#line 2785
    tconn = pos;
#line 2786
    goto ldv_53581;
  } else {

  }
#line 2788
  if ((unsigned long )tmp == (unsigned long )pos) {
#line 2789
    tconn = pos;
#line 2790
    goto ldv_53581;
  } else {

  }
#line 2781
  __ptr___0 = tmp->all_tconn.next;
#line 2781
  _________p1___0 = *((struct list_head * volatile  *)(& __ptr___0));
#line 2781
  tmp___1 = debug_lockdep_rcu_enabled();
#line 2781
  if (tmp___1 != 0 && ! __warned___0) {
#line 2781
    rcu_read_lock_held();
  } else {

  }
#line 2781
  __mptr___0 = (struct list_head  const  *)_________p1___0;
#line 2781
  tmp = (struct drbd_tconn *)__mptr___0 + 0xfffffffffffffff8UL;
  ldv_53583: ;
#line 2781
  if ((unsigned long )(& tmp->all_tconn) != (unsigned long )(& drbd_tconns)) {
#line 2782
    goto ldv_53582;
  } else {

  }
  ldv_53581: ;
#line 2793
  if ((unsigned long )tconn != (unsigned long )((struct drbd_tconn *)0)) {
    next_tconn: 
#line 2795
    tmp___2 = idr_get_next(& tconn->volumes, (int *)(& volume));
#line 2795
    mdev = (struct drbd_conf *)tmp___2;
#line 2796
    if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2799
      __ptr___1 = tconn->all_tconn.next;
#line 2799
      _________p1___1 = *((struct list_head * volatile  *)(& __ptr___1));
#line 2799
      tmp___3 = debug_lockdep_rcu_enabled();
#line 2799
      if (tmp___3 != 0 && ! __warned___1) {
#line 2799
        rcu_read_lock_held();
      } else {

      }
#line 2799
      __mptr___1 = (struct list_head  const  *)_________p1___1;
#line 2799
      pos = (struct drbd_tconn *)__mptr___1 + 0xfffffffffffffff8UL;
#line 2802
      if (volume != 0U) {
#line 2806
        if ((unsigned long )(& pos->all_tconn) == (unsigned long )(& drbd_tconns) || cb->args[2] != 0L) {
#line 2807
          goto out;
        } else {

        }
#line 2808
        volume = 0U;
#line 2809
        tconn = pos;
#line 2810
        goto next_tconn;
      } else {

      }
    } else {

    }
#line 2814
    tmp___4 = genlmsg_put(skb, ((struct netlink_skb_parms *)(& (cb->skb)->cb))->portid,
                          (cb->nlh)->nlmsg_seq, & drbd_genl_family, 2, 2);
#line 2814
    dh = (struct drbd_genlmsghdr *)tmp___4;
#line 2817
    if ((unsigned long )dh == (unsigned long )((struct drbd_genlmsghdr *)0)) {
#line 2818
      goto out;
    } else {

    }
#line 2820
    if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2825
      dh->minor = 4294967295U;
#line 2826
      dh->ldv_49550.ret_code = 101;
#line 2827
      tmp___5 = nla_put_drbd_cfg_context(skb, tconn, 4294967295U);
#line 2827
      if (tmp___5 != 0) {
#line 2828
        goto cancel;
      } else {

      }
#line 2829
      _________p1___2 = *((struct net_conf * volatile  *)(& tconn->net_conf));
#line 2829
      tmp___6 = debug_lockdep_rcu_enabled();
#line 2829
      if (tmp___6 != 0 && ! __warned___2) {
#line 2829
        tmp___7 = rcu_read_lock_held();
#line 2829
        if (tmp___7 == 0 && 1) {
#line 2829
          __warned___2 = 1;
#line 2829
          lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
                                 2829, "suspicious rcu_dereference_check() usage");
        } else {

        }
      } else {

      }
#line 2829
      nc = _________p1___2;
#line 2830
      if ((unsigned long )nc != (unsigned long )((struct net_conf *)0)) {
#line 2830
        tmp___8 = net_conf_to_skb(skb, nc, 1);
#line 2830
        if (tmp___8 != 0) {
#line 2831
          goto cancel;
        } else {

        }
      } else {

      }
#line 2832
      goto done;
    } else {

    }
#line 2835
    if ((unsigned int )mdev->vnr != volume) {
#line 2835
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->vnr == volume ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
              2835);
    } else {

    }
#line 2836
    if ((unsigned long )mdev->tconn != (unsigned long )tconn) {
#line 2836
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->tconn == tconn ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
              2836);
    } else {

    }
#line 2838
    dh->minor = mdev_to_minor(mdev);
#line 2839
    dh->ldv_49550.ret_code = 101;
#line 2841
    tmp___9 = nla_put_status_info(skb, mdev, 0);
#line 2841
    if (tmp___9 != 0) {
      cancel: 
#line 2843
      genlmsg_cancel(skb, (void *)dh);
#line 2844
      goto out;
    } else {

    }
    done: 
#line 2847
    genlmsg_end(skb, (void *)dh);
  } else {

  }
  out: 
#line 2851
  rcu_read_unlock();
#line 2853
  cb->args[0] = (long )pos;
#line 2854
  cb->args[1] = (unsigned long )pos == (unsigned long )tconn ? (long )(volume + 1U) : 0L;
#line 2858
  return ((int )skb->len);
}
}
#line 2871 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_get_status_all(struct sk_buff *skb , struct netlink_callback *cb ) 
{ 
  unsigned int hdrlen ;
  struct nlattr *nla ;
  char const   *resource_name ;
  struct drbd_tconn *tconn ;
  int maxtype ;
  int tmp ;
  struct nlattr *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  int tmp___4 ;

  {
#line 2873
  hdrlen = 12U;
#line 2880
  if (cb->args[0] != 0L) {
#line 2883
    if (cb->args[2] != 0L && cb->args[2] != cb->args[0]) {
#line 2884
      return (0);
    } else {

    }
#line 2885
    goto dump;
  } else {

  }
#line 2890
  tmp = nlmsg_attrlen(cb->nlh, (int )hdrlen);
#line 2890
  tmp___0 = nlmsg_attrdata(cb->nlh, (int )hdrlen);
#line 2890
  nla = nla_find((struct nlattr  const  *)tmp___0, tmp, 2);
#line 2895
  if ((unsigned long )nla == (unsigned long )((struct nlattr *)0)) {
#line 2896
    goto dump;
  } else {

  }
#line 2897
  maxtype = 4;
#line 2898
  nla = drbd_nla_find_nested(maxtype, nla, 2);
#line 2899
  tmp___2 = IS_ERR((void const   *)nla);
#line 2899
  if (tmp___2 != 0L) {
#line 2900
    tmp___1 = PTR_ERR((void const   *)nla);
#line 2900
    return ((int )tmp___1);
  } else {

  }
#line 2902
  if ((unsigned long )nla == (unsigned long )((struct nlattr *)0)) {
#line 2903
    return (-22);
  } else {

  }
#line 2904
  tmp___3 = nla_data((struct nlattr  const  *)nla);
#line 2904
  resource_name = (char const   *)tmp___3;
#line 2905
  tconn = conn_get_by_name(resource_name);
#line 2907
  if ((unsigned long )tconn == (unsigned long )((struct drbd_tconn *)0)) {
#line 2908
    return (-19);
  } else {

  }
#line 2910
  kref_put(& tconn->kref, & conn_destroy);
#line 2914
  cb->args[0] = (long )tconn;
#line 2916
  cb->args[2] = (long )tconn;
  dump: 
#line 2919
  tmp___4 = get_one_status(skb, cb);
#line 2919
  return (tmp___4);
}
}
#line 2922 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_get_timeout_type(struct sk_buff *skb , struct genl_info *info ) 
{ 
  enum drbd_ret_code retcode ;
  struct timeout_parms tp ;
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2928
  tmp = drbd_adm_prepare(skb, info, 1U);
#line 2928
  retcode = (enum drbd_ret_code )tmp;
#line 2929
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 2930
    return ((int )retcode);
  } else {

  }
#line 2931
  if ((unsigned int )retcode != 101U) {
#line 2932
    goto out;
  } else {

  }
#line 2934
  if (*((unsigned int *)adm_ctx.mdev + 187UL) != 40960U) {
#line 2934
    tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& (adm_ctx.mdev)->flags));
#line 2934
    tp.timeout_type = tmp___0 != 0;
  } else {
#line 2934
    tp.timeout_type = 2U;
  }
#line 2939
  err = timeout_parms_to_priv_skb(adm_ctx.reply_skb, & tp);
#line 2940
  if (err != 0) {
#line 2941
    nlmsg_free(adm_ctx.reply_skb);
#line 2942
    return (err);
  } else {

  }
  out: 
#line 2945
  drbd_adm_finish(info, (int )retcode);
#line 2946
  return (0);
}
}
#line 2949 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_start_ov(struct sk_buff *skb , struct genl_info *info ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_ret_code retcode ;
  struct start_ov_parms parms ;
  int tmp ;
  int err ;
  int tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___5 ;

  {
#line 2955
  tmp = drbd_adm_prepare(skb, info, 1U);
#line 2955
  retcode = (enum drbd_ret_code )tmp;
#line 2956
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 2957
    return ((int )retcode);
  } else {

  }
#line 2958
  if ((unsigned int )retcode != 101U) {
#line 2959
    goto out;
  } else {

  }
#line 2961
  mdev = adm_ctx.mdev;
#line 2964
  parms.ov_start_sector = (__u64 )mdev->ov_start_sector;
#line 2965
  parms.ov_stop_sector = 0xffffffffffffffffULL;
#line 2966
  if ((unsigned long )*(info->attrs + 9UL) != (unsigned long )((struct nlattr *)0)) {
#line 2967
    tmp___0 = start_ov_parms_from_attrs(& parms, info);
#line 2967
    err = tmp___0;
#line 2968
    if (err != 0) {
#line 2969
      retcode = ERR_MANDATORY_TAG;
#line 2970
      tmp___1 = from_attrs_err_to_txt(err);
#line 2970
      drbd_msg_put_info(tmp___1);
#line 2971
      goto out;
    } else {

    }
  } else {

  }
#line 2975
  mdev->ov_start_sector = (sector_t )parms.ov_start_sector & 0xfffffffffffffff8UL;
#line 2976
  mdev->ov_stop_sector = (sector_t )parms.ov_stop_sector;
#line 2980
  drbd_suspend_io(mdev);
#line 2981
  tmp___2 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 2981
  if (tmp___2 == 0) {
#line 2981
    goto ldv_53628;
  } else {

  }
#line 2981
  tmp___3 = get_current();
#line 2981
  __wait.flags = 0U;
#line 2981
  __wait.private = (void *)tmp___3;
#line 2981
  __wait.func = & autoremove_wake_function;
#line 2981
  __wait.task_list.next = & __wait.task_list;
#line 2981
  __wait.task_list.prev = & __wait.task_list;
  ldv_53631: 
#line 2981
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2981
  tmp___4 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 2981
  if (tmp___4 == 0) {
#line 2981
    goto ldv_53630;
  } else {

  }
#line 2981
  schedule();
#line 2981
  goto ldv_53631;
  ldv_53630: 
#line 2981
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53628: 
#line 2982
  val.i = 0U;
#line 2982
  val.ldv_40604.conn = 18U;
#line 2982
  mask.i = 0U;
#line 2982
  mask.ldv_40604.conn = 31U;
#line 2982
  tmp___5 = drbd_request_state(mdev, mask, val);
#line 2982
  retcode = (enum drbd_ret_code )tmp___5;
#line 2983
  drbd_resume_io(mdev);
  out: 
#line 2985
  drbd_adm_finish(info, (int )retcode);
#line 2986
  return (0);
}
}
#line 2990 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_new_c_uuid(struct sk_buff *skb , struct genl_info *info ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_ret_code retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid_parms args ;
  int tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;

  {
#line 2994
  skip_initial_sync = 0;
#line 2998
  tmp = drbd_adm_prepare(skb, info, 1U);
#line 2998
  retcode = (enum drbd_ret_code )tmp;
#line 2999
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 3000
    return ((int )retcode);
  } else {

  }
#line 3001
  if ((unsigned int )retcode != 101U) {
#line 3002
    goto out_nolock;
  } else {

  }
#line 3004
  mdev = adm_ctx.mdev;
#line 3005
  memset((void *)(& args), 0, 1UL);
#line 3006
  if ((unsigned long )*(info->attrs + 10UL) != (unsigned long )((struct nlattr *)0)) {
#line 3007
    err = new_c_uuid_parms_from_attrs(& args, info);
#line 3008
    if (err != 0) {
#line 3009
      retcode = ERR_MANDATORY_TAG;
#line 3010
      tmp___0 = from_attrs_err_to_txt(err);
#line 3010
      drbd_msg_put_info(tmp___0);
#line 3011
      goto out_nolock;
    } else {

    }
  } else {

  }
#line 3015
  mutex_lock_nested(mdev->state_mutex, 0U);
#line 3017
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3017
  if (tmp___1 == 0) {
#line 3018
    retcode = ERR_NO_DISK;
#line 3019
    goto out;
  } else {

  }
#line 3023
  if ((((unsigned int )*((unsigned short *)mdev + 374UL) == 160U && (mdev->tconn)->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (int )((signed char )args.clear_bm) != 0) {
#line 3025
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 3026
    skip_initial_sync = 1;
  } else
#line 3027
  if ((unsigned int )*((unsigned short *)mdev + 374UL) != 0U) {
#line 3028
    retcode = ERR_CONNECTED;
#line 3029
    goto out_dec;
  } else {

  }
#line 3032
  drbd_uuid_set(mdev, 1, 0ULL);
#line 3033
  drbd_uuid_new_current(mdev);
#line 3035
  if ((int )((signed char )args.clear_bm) != 0) {
#line 3036
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid",
                         BM_LOCKED_MASK);
#line 3038
    if (err != 0) {
#line 3039
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 3040
      retcode = ERR_IO_MD_DISK;
    } else {

    }
#line 3042
    if (skip_initial_sync != 0) {
#line 3043
      drbd_send_uuids_skip_initial_sync(mdev);
#line 3044
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3045
      drbd_print_uuids(mdev, "cleared bitmap UUID");
#line 3046
      spin_lock_irq(& (mdev->tconn)->req_lock);
#line 3047
      __ns = drbd_read_state(mdev);
#line 3047
      __ns.ldv_40604.disk = 8U;
#line 3047
      __ns.ldv_40604.pdsk = 8U;
#line 3047
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3049
      spin_unlock_irq(& (mdev->tconn)->req_lock);
    } else {

    }
  } else {

  }
#line 3053
  drbd_md_sync(mdev);
  out_dec: 
#line 3055
  put_ldev(mdev);
  out: 
#line 3057
  mutex_unlock(mdev->state_mutex);
  out_nolock: 
#line 3059
  drbd_adm_finish(info, (int )retcode);
#line 3060
  return (0);
}
}
#line 3064 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static enum drbd_ret_code drbd_check_resource_name(char const   *name ) 
{ 
  char *tmp ;

  {
#line 3066
  if ((unsigned long )name == (unsigned long )((char const   *)0) || (int )((signed char )*name) == 0) {
#line 3067
    drbd_msg_put_info("resource name missing");
#line 3068
    return (ERR_MANDATORY_TAG);
  } else {

  }
#line 3072
  tmp = strchr(name, 47);
#line 3072
  if ((unsigned long )tmp != (unsigned long )((char *)0)) {
#line 3073
    drbd_msg_put_info("invalid resource name");
#line 3074
    return (ERR_INVALID_REQUEST);
  } else {

  }
#line 3076
  return (NO_ERROR);
}
}
#line 3079 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_new_resource(struct sk_buff *skb , struct genl_info *info ) 
{ 
  enum drbd_ret_code retcode ;
  struct res_opts res_opts ;
  int err ;
  int tmp ;
  char const   *tmp___0 ;
  struct drbd_tconn *tmp___1 ;

  {
#line 3085
  tmp = drbd_adm_prepare(skb, info, 0U);
#line 3085
  retcode = (enum drbd_ret_code )tmp;
#line 3086
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 3087
    return ((int )retcode);
  } else {

  }
#line 3088
  if ((unsigned int )retcode != 101U) {
#line 3089
    goto out;
  } else {

  }
#line 3091
  set_res_opts_defaults(& res_opts);
#line 3092
  err = res_opts_from_attrs(& res_opts, info);
#line 3093
  if (err != 0 && err != -42) {
#line 3094
    retcode = ERR_MANDATORY_TAG;
#line 3095
    tmp___0 = from_attrs_err_to_txt(err);
#line 3095
    drbd_msg_put_info(tmp___0);
#line 3096
    goto out;
  } else {

  }
#line 3099
  retcode = drbd_check_resource_name((char const   *)adm_ctx.resource_name);
#line 3100
  if ((unsigned int )retcode != 101U) {
#line 3101
    goto out;
  } else {

  }
#line 3103
  if ((unsigned long )adm_ctx.tconn != (unsigned long )((struct drbd_tconn *)0)) {
#line 3104
    if (((int )(info->nlhdr)->nlmsg_flags & 512) != 0) {
#line 3105
      retcode = ERR_INVALID_REQUEST;
#line 3106
      drbd_msg_put_info("resource exists");
    } else {

    }
#line 3109
    goto out;
  } else {

  }
#line 3112
  tmp___1 = conn_create((char const   *)adm_ctx.resource_name, & res_opts);
#line 3112
  if ((unsigned long )tmp___1 == (unsigned long )((struct drbd_tconn *)0)) {
#line 3113
    retcode = ERR_NOMEM;
  } else {

  }
  out: 
#line 3115
  drbd_adm_finish(info, (int )retcode);
#line 3116
  return (0);
}
}
#line 3119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_add_minor(struct sk_buff *skb , struct genl_info *info ) 
{ 
  struct drbd_genlmsghdr *dh ;
  enum drbd_ret_code retcode ;
  int tmp ;

  {
#line 3121
  dh = (struct drbd_genlmsghdr *)info->userhdr;
#line 3124
  tmp = drbd_adm_prepare(skb, info, 2U);
#line 3124
  retcode = (enum drbd_ret_code )tmp;
#line 3125
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 3126
    return ((int )retcode);
  } else {

  }
#line 3127
  if ((unsigned int )retcode != 101U) {
#line 3128
    goto out;
  } else {

  }
#line 3130
  if (dh->minor > 1048575U) {
#line 3131
    drbd_msg_put_info("requested minor out of range");
#line 3132
    retcode = ERR_INVALID_REQUEST;
#line 3133
    goto out;
  } else {

  }
#line 3135
  if (adm_ctx.volume > 65535U) {
#line 3136
    drbd_msg_put_info("requested volume id out of range");
#line 3137
    retcode = ERR_INVALID_REQUEST;
#line 3138
    goto out;
  } else {

  }
#line 3143
  if ((unsigned long )adm_ctx.mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 3144
    if (((int )(info->nlhdr)->nlmsg_flags & 512) != 0) {
#line 3145
      retcode = ERR_MINOR_EXISTS;
    } else {

    }
#line 3147
    goto out;
  } else {

  }
#line 3150
  retcode = conn_new_minor(adm_ctx.tconn, dh->minor, (int )adm_ctx.volume);
  out: 
#line 3152
  drbd_adm_finish(info, (int )retcode);
#line 3153
  return (0);
}
}
#line 3156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static enum drbd_ret_code adm_delete_minor(struct drbd_conf *mdev ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  unsigned int tmp ;

  {
#line 3158
  if ((unsigned int )*((unsigned char *)mdev + 749UL) == 0U && (unsigned int )*((unsigned char *)mdev + 748UL) == 2U) {
#line 3163
    val.i = 0U;
#line 3163
    val.ldv_40604.conn = 9U;
#line 3163
    mask.i = 0U;
#line 3163
    mask.ldv_40604.conn = 31U;
#line 3163
    _drbd_request_state(mdev, mask, val, 6);
#line 3165
    idr_remove(& (mdev->tconn)->volumes, mdev->vnr);
#line 3166
    tmp = mdev_to_minor(mdev);
#line 3166
    idr_remove(& minors, (int )tmp);
#line 3167
    del_gendisk(mdev->vdisk);
#line 3168
    synchronize_rcu();
#line 3169
    kref_put(& mdev->kref, & drbd_minor_destroy);
#line 3170
    return (NO_ERROR);
  } else {
#line 3172
    return (ERR_MINOR_CONFIGURED);
  }
}
}
#line 3175 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_delete_minor(struct sk_buff *skb , struct genl_info *info ) 
{ 
  enum drbd_ret_code retcode ;
  int tmp ;

  {
#line 3179
  tmp = drbd_adm_prepare(skb, info, 1U);
#line 3179
  retcode = (enum drbd_ret_code )tmp;
#line 3180
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 3181
    return ((int )retcode);
  } else {

  }
#line 3182
  if ((unsigned int )retcode != 101U) {
#line 3183
    goto out;
  } else {

  }
#line 3185
  retcode = adm_delete_minor(adm_ctx.mdev);
  out: 
#line 3187
  drbd_adm_finish(info, (int )retcode);
#line 3188
  return (0);
}
}
#line 3191 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_down(struct sk_buff *skb , struct genl_info *info ) 
{ 
  int retcode ;
  struct drbd_conf *mdev ;
  unsigned int i ;
  void *tmp ;
  enum drbd_state_rv tmp___0 ;
  void *tmp___1 ;
  enum drbd_state_rv tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;
  enum drbd_ret_code tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;

  {
#line 3197
  retcode = drbd_adm_prepare(skb, info, 0U);
#line 3198
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 3199
    return (retcode);
  } else {

  }
#line 3200
  if (retcode != 101) {
#line 3201
    goto out;
  } else {

  }
#line 3203
  if ((unsigned long )adm_ctx.tconn == (unsigned long )((struct drbd_tconn *)0)) {
#line 3204
    retcode = 158;
#line 3205
    goto out;
  } else {

  }
#line 3209
  i = 0U;
#line 3209
  tmp = idr_get_next(& (adm_ctx.tconn)->volumes, (int *)(& i));
#line 3209
  mdev = (struct drbd_conf *)tmp;
#line 3209
  goto ldv_53690;
  ldv_53689: 
#line 3210
  tmp___0 = drbd_set_role(mdev, R_SECONDARY, 0);
#line 3210
  retcode = (int )tmp___0;
#line 3211
  if (retcode <= 0) {
#line 3212
    drbd_msg_put_info("failed to demote");
#line 3213
    goto out;
  } else {

  }
#line 3209
  i = i + 1U;
#line 3209
  tmp___1 = idr_get_next(& (adm_ctx.tconn)->volumes, (int *)(& i));
#line 3209
  mdev = (struct drbd_conf *)tmp___1;
  ldv_53690: ;
#line 3209
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 3210
    goto ldv_53689;
  } else {

  }
#line 3217
  tmp___2 = conn_try_disconnect(adm_ctx.tconn, 0);
#line 3217
  retcode = (int )tmp___2;
#line 3218
  if (retcode <= 0) {
#line 3219
    drbd_msg_put_info("failed to disconnect");
#line 3220
    goto out;
  } else {

  }
#line 3224
  i = 0U;
#line 3224
  tmp___3 = idr_get_next(& (adm_ctx.tconn)->volumes, (int *)(& i));
#line 3224
  mdev = (struct drbd_conf *)tmp___3;
#line 3224
  goto ldv_53693;
  ldv_53692: 
#line 3225
  retcode = adm_detach(mdev, 0);
#line 3226
  if (retcode <= 0 || retcode > 101) {
#line 3227
    drbd_msg_put_info("failed to detach");
#line 3228
    goto out;
  } else {

  }
#line 3224
  i = i + 1U;
#line 3224
  tmp___4 = idr_get_next(& (adm_ctx.tconn)->volumes, (int *)(& i));
#line 3224
  mdev = (struct drbd_conf *)tmp___4;
  ldv_53693: ;
#line 3224
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 3225
    goto ldv_53692;
  } else {

  }
#line 3235
  drbd_thread_stop(& (adm_ctx.tconn)->worker);
#line 3240
  i = 0U;
#line 3240
  tmp___5 = idr_get_next(& (adm_ctx.tconn)->volumes, (int *)(& i));
#line 3240
  mdev = (struct drbd_conf *)tmp___5;
#line 3240
  goto ldv_53696;
  ldv_53695: 
#line 3241
  tmp___6 = adm_delete_minor(mdev);
#line 3241
  retcode = (int )tmp___6;
#line 3242
  if (retcode != 101) {
#line 3244
    drbd_msg_put_info("failed to delete volume");
#line 3245
    goto out;
  } else {

  }
#line 3240
  i = i + 1U;
#line 3240
  tmp___7 = idr_get_next(& (adm_ctx.tconn)->volumes, (int *)(& i));
#line 3240
  mdev = (struct drbd_conf *)tmp___7;
  ldv_53696: ;
#line 3240
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 3241
    goto ldv_53695;
  } else {

  }
#line 3250
  tmp___8 = conn_lowest_minor(adm_ctx.tconn);
#line 3250
  if (tmp___8 < 0) {
#line 3251
    list_del_rcu(& (adm_ctx.tconn)->all_tconn);
#line 3252
    synchronize_rcu();
#line 3253
    kref_put(& (adm_ctx.tconn)->kref, & conn_destroy);
#line 3255
    retcode = 101;
  } else {
#line 3258
    retcode = 159;
#line 3259
    drbd_msg_put_info("failed to delete connection");
  }
#line 3261
  goto out;
  out: 
#line 3263
  drbd_adm_finish(info, retcode);
#line 3264
  return (0);
}
}
#line 3267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_adm_del_resource(struct sk_buff *skb , struct genl_info *info ) 
{ 
  enum drbd_ret_code retcode ;
  int tmp ;
  int tmp___0 ;

  {
#line 3271
  tmp = drbd_adm_prepare(skb, info, 2U);
#line 3271
  retcode = (enum drbd_ret_code )tmp;
#line 3272
  if ((unsigned long )adm_ctx.reply_skb == (unsigned long )((struct sk_buff *)0)) {
#line 3273
    return ((int )retcode);
  } else {

  }
#line 3274
  if ((unsigned int )retcode != 101U) {
#line 3275
    goto out;
  } else {

  }
#line 3277
  tmp___0 = conn_lowest_minor(adm_ctx.tconn);
#line 3277
  if (tmp___0 < 0) {
#line 3278
    list_del_rcu(& (adm_ctx.tconn)->all_tconn);
#line 3279
    synchronize_rcu();
#line 3280
    kref_put(& (adm_ctx.tconn)->kref, & conn_destroy);
#line 3282
    retcode = NO_ERROR;
  } else {
#line 3284
    retcode = ERR_RES_IN_USE;
  }
#line 3287
  if ((unsigned int )retcode == 101U) {
#line 3288
    drbd_thread_stop(& (adm_ctx.tconn)->worker);
  } else {

  }
  out: 
#line 3290
  drbd_adm_finish(info, (int )retcode);
#line 3291
  return (0);
}
}
#line 3294 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_event(struct drbd_conf *mdev , struct sib_info  const  *sib ) 
{ 
  atomic_t drbd_genl_seq ;
  struct sk_buff *msg ;
  struct drbd_genlmsghdr *d_out ;
  unsigned int seq ;
  int err ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;

  {
#line 3296
  drbd_genl_seq.counter = 2;
#line 3300
  err = -12;
#line 3303
  if ((unsigned int )sib->sib_reason == 5U && ((1 != 0 && 1 != 0) && (long )(mdev->rs_last_bcast + 250UL) - (long )jiffies < 0L)) {
#line 3304
    mdev->rs_last_bcast = jiffies;
  } else {
#line 3306
    return;
  }
#line 3308
  tmp = atomic_add_return(1, & drbd_genl_seq);
#line 3308
  seq = (unsigned int )tmp;
#line 3309
  msg = genlmsg_new(3776UL, 16U);
#line 3310
  if ((unsigned long )msg == (unsigned long )((struct sk_buff *)0)) {
#line 3311
    goto failed;
  } else {

  }
#line 3313
  err = -90;
#line 3314
  tmp___0 = genlmsg_put(msg, 0U, seq, & drbd_genl_family, 0, 1);
#line 3314
  d_out = (struct drbd_genlmsghdr *)tmp___0;
#line 3315
  if ((unsigned long )d_out == (unsigned long )((struct drbd_genlmsghdr *)0)) {
#line 3316
    goto nla_put_failure;
  } else {

  }
#line 3317
  d_out->minor = mdev_to_minor(mdev);
#line 3318
  d_out->ldv_49550.ret_code = 101;
#line 3320
  tmp___1 = nla_put_status_info(msg, mdev, sib);
#line 3320
  if (tmp___1 != 0) {
#line 3321
    goto nla_put_failure;
  } else {

  }
#line 3322
  genlmsg_end(msg, (void *)d_out);
#line 3323
  err = drbd_genl_multicast_events(msg, 0U);
#line 3325
  if (err != 0 && err != -3) {
#line 3326
    goto failed;
  } else {

  }
#line 3328
  return;
  nla_put_failure: 
#line 3331
  nlmsg_free(msg);
  failed: 
#line 3333
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error %d while broadcasting event. Event seq:%u sib_reason:%u\n",
          err, seq, (unsigned int )sib->sib_reason);
#line 3336
  return;
}
}
#line 66 "include/linux/rbtree.h"
extern struct rb_node *rb_next(struct rb_node  const  * ) ;
#line 75 "include/linux/rbtree.h"
__inline static void rb_link_node(struct rb_node *node , struct rb_node *parent ,
                                  struct rb_node **rb_link ) 
{ 
  struct rb_node *tmp ;

  {
#line 78
  node->__rb_parent_color = (unsigned long )parent;
#line 79
  tmp = 0;
#line 79
  node->rb_right = tmp;
#line 79
  node->rb_left = tmp;
#line 81
  *rb_link = node;
#line 82
  return;
}
}
#line 44 "include/linux/rbtree_augmented.h"
extern void __rb_insert_augmented(struct rb_node * , struct rb_root * , void (*)(struct rb_node * ,
                                                                                 struct rb_node * ) ) ;
#line 47 "include/linux/rbtree_augmented.h"
__inline static void rb_insert_augmented(struct rb_node *node , struct rb_root *root ,
                                         struct rb_augment_callbacks  const  *augment ) 
{ 


  {
#line 50
  __rb_insert_augmented(node, root, augment->rotate);
#line 51
  return;
}
}
#line 99 "include/linux/rbtree_augmented.h"
__inline static void rb_set_parent(struct rb_node *rb , struct rb_node *p ) 
{ 


  {
#line 101
  rb->__rb_parent_color = (rb->__rb_parent_color & 1UL) | (unsigned long )p;
#line 102
  return;
}
}
#line 104 "include/linux/rbtree_augmented.h"
__inline static void rb_set_parent_color(struct rb_node *rb , struct rb_node *p ,
                                         int color ) 
{ 


  {
#line 107
  rb->__rb_parent_color = (unsigned long )color | (unsigned long )p;
#line 108
  return;
}
}
#line 111 "include/linux/rbtree_augmented.h"
__inline static void __rb_change_child(struct rb_node *old , struct rb_node *new ,
                                       struct rb_node *parent , struct rb_root *root ) 
{ 


  {
#line 114
  if ((unsigned long )parent != (unsigned long )((struct rb_node *)0)) {
#line 115
    if ((unsigned long )parent->rb_left == (unsigned long )old) {
#line 116
      parent->rb_left = new;
    } else {
#line 118
      parent->rb_right = new;
    }
  } else {
#line 120
    root->rb_node = new;
  }
#line 121
  return;
}
}
#line 123
extern void __rb_erase_color(struct rb_node * , struct rb_root * , void (*)(struct rb_node * ,
                                                                            struct rb_node * ) ) ;
#line 127 "include/linux/rbtree_augmented.h"
__inline static void rb_erase_augmented(struct rb_node *node , struct rb_root *root ,
                                        struct rb_augment_callbacks  const  *augment ) 
{ 
  struct rb_node *child ;
  struct rb_node *tmp ;
  struct rb_node *parent ;
  struct rb_node *rebalance ;
  unsigned long pc ;
  struct rb_node *successor ;
  struct rb_node *child2 ;
  unsigned long pc2 ;

  {
#line 130
  child = node->rb_right;
#line 130
  tmp = node->rb_left;
#line 134
  if ((unsigned long )tmp == (unsigned long )((struct rb_node *)0)) {
#line 142
    pc = node->__rb_parent_color;
#line 143
    parent = (struct rb_node *)(pc & 0xfffffffffffffffcUL);
#line 144
    __rb_change_child(node, child, parent, root);
#line 145
    if ((unsigned long )child != (unsigned long )((struct rb_node *)0)) {
#line 146
      child->__rb_parent_color = pc;
#line 147
      rebalance = 0;
    } else {
#line 149
      rebalance = (int )pc & 1 ? parent : 0;
    }
#line 150
    tmp = parent;
  } else
#line 151
  if ((unsigned long )child == (unsigned long )((struct rb_node *)0)) {
#line 153
    pc = node->__rb_parent_color;
#line 153
    tmp->__rb_parent_color = pc;
#line 154
    parent = (struct rb_node *)(pc & 0xfffffffffffffffcUL);
#line 155
    __rb_change_child(node, tmp, parent, root);
#line 156
    rebalance = 0;
#line 157
    tmp = parent;
  } else {
#line 159
    successor = child;
#line 160
    tmp = child->rb_left;
#line 161
    if ((unsigned long )tmp == (unsigned long )((struct rb_node *)0)) {
#line 171
      parent = successor;
#line 172
      child2 = successor->rb_right;
#line 173
      (*(augment->copy))(node, successor);
    } else {
      ldv_14079: 
#line 190
      parent = successor;
#line 191
      successor = tmp;
#line 192
      tmp = tmp->rb_left;
#line 193
      if ((unsigned long )tmp != (unsigned long )((struct rb_node *)0)) {
#line 194
        goto ldv_14079;
      } else {

      }
#line 194
      child2 = successor->rb_right;
#line 194
      parent->rb_left = child2;
#line 195
      successor->rb_right = child;
#line 196
      rb_set_parent(child, successor);
#line 197
      (*(augment->copy))(node, successor);
#line 198
      (*(augment->propagate))(parent, successor);
    }
#line 201
    tmp = node->rb_left;
#line 201
    successor->rb_left = tmp;
#line 202
    rb_set_parent(tmp, successor);
#line 204
    pc = node->__rb_parent_color;
#line 205
    tmp = (struct rb_node *)(pc & 0xfffffffffffffffcUL);
#line 206
    __rb_change_child(node, successor, tmp, root);
#line 207
    if ((unsigned long )child2 != (unsigned long )((struct rb_node *)0)) {
#line 208
      successor->__rb_parent_color = pc;
#line 209
      rb_set_parent_color(child2, parent, 1);
#line 210
      rebalance = 0;
    } else {
#line 212
      pc2 = successor->__rb_parent_color;
#line 213
      successor->__rb_parent_color = pc;
#line 214
      rebalance = (int )pc2 & 1 ? parent : 0;
    }
#line 216
    tmp = successor;
  }
#line 219
  (*(augment->propagate))(tmp, 0);
#line 220
  if ((unsigned long )rebalance != (unsigned long )((struct rb_node *)0)) {
#line 221
    __rb_erase_color(rebalance, root, augment->rotate);
  } else {

  }
#line 222
  return;
}
}
#line 16 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_interval.c.prepared"
__inline static sector_t interval_end(struct rb_node *node ) 
{ 
  struct drbd_interval *this ;
  struct rb_node  const  *__mptr ;

  {
#line 18
  __mptr = (struct rb_node  const  *)node;
#line 18
  this = (struct drbd_interval *)__mptr;
#line 19
  return (this->end);
}
}
#line 30 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_interval.c.prepared"
__inline static sector_t compute_subtree_last(struct drbd_interval *node ) 
{ 
  sector_t max ;
  sector_t left ;
  sector_t tmp ;
  sector_t right ;
  sector_t tmp___0 ;

  {
#line 32
  max = node->sector + (sector_t )(node->size >> 9);
#line 34
  if ((unsigned long )node->rb.rb_left != (unsigned long )((struct rb_node *)0)) {
#line 35
    tmp = interval_end(node->rb.rb_left);
#line 35
    left = tmp;
#line 36
    if (left > max) {
#line 37
      max = left;
    } else {

    }
  } else {

  }
#line 39
  if ((unsigned long )node->rb.rb_right != (unsigned long )((struct rb_node *)0)) {
#line 40
    tmp___0 = interval_end(node->rb.rb_right);
#line 40
    right = tmp___0;
#line 41
    if (right > max) {
#line 42
      max = right;
    } else {

    }
  } else {

  }
#line 44
  return (max);
}
}
#line 47 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_interval.c.prepared"
static void augment_propagate(struct rb_node *rb , struct rb_node *stop ) 
{ 
  struct drbd_interval *node ;
  struct rb_node  const  *__mptr ;
  sector_t subtree_last ;
  sector_t tmp ;

  {
#line 49
  goto ldv_14135;
  ldv_14134: 
#line 50
  __mptr = (struct rb_node  const  *)rb;
#line 50
  node = (struct drbd_interval *)__mptr;
#line 51
  tmp = compute_subtree_last(node);
#line 51
  subtree_last = tmp;
#line 52
  if (node->end == subtree_last) {
#line 53
    goto ldv_14133;
  } else {

  }
#line 54
  node->end = subtree_last;
#line 55
  rb = (struct rb_node *)(node->rb.__rb_parent_color & 0xfffffffffffffffcUL);
  ldv_14135: ;
#line 49
  if ((unsigned long )rb != (unsigned long )stop) {
#line 50
    goto ldv_14134;
  } else {

  }
  ldv_14133: ;
#line 54
  return;
}
}
#line 59 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_interval.c.prepared"
static void augment_copy(struct rb_node *rb_old , struct rb_node *rb_new ) 
{ 
  struct drbd_interval *old ;
  struct rb_node  const  *__mptr ;
  struct drbd_interval *new ;
  struct rb_node  const  *__mptr___0 ;

  {
#line 61
  __mptr = (struct rb_node  const  *)rb_old;
#line 61
  old = (struct drbd_interval *)__mptr;
#line 62
  __mptr___0 = (struct rb_node  const  *)rb_new;
#line 62
  new = (struct drbd_interval *)__mptr___0;
#line 64
  new->end = old->end;
#line 65
  return;
}
}
#line 67 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_interval.c.prepared"
static void augment_rotate(struct rb_node *rb_old , struct rb_node *rb_new ) 
{ 
  struct drbd_interval *old ;
  struct rb_node  const  *__mptr ;
  struct drbd_interval *new ;
  struct rb_node  const  *__mptr___0 ;

  {
#line 69
  __mptr = (struct rb_node  const  *)rb_old;
#line 69
  old = (struct drbd_interval *)__mptr;
#line 70
  __mptr___0 = (struct rb_node  const  *)rb_new;
#line 70
  new = (struct drbd_interval *)__mptr___0;
#line 72
  new->end = old->end;
#line 73
  old->end = compute_subtree_last(old);
#line 74
  return;
}
}
#line 76 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_interval.c.prepared"
static struct rb_augment_callbacks  const  augment_callbacks  =    {& augment_propagate, & augment_copy, & augment_rotate};
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_interval.c.prepared"
bool drbd_insert_interval(struct rb_root *root , struct drbd_interval *this ) 
{ 
  struct rb_node **new ;
  struct rb_node *parent ;
  long tmp ;
  struct drbd_interval *here ;
  struct rb_node  const  *__mptr ;

  {
#line 88
  new = & root->rb_node;
#line 88
  parent = 0;
#line 90
  tmp = __builtin_expect((this->size & 511U) != 0U, 0L);
#line 90
  if (tmp != 0L) {
#line 90
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_interval.c.prepared"),
                         "i" (90), "i" (12UL));
    ldv_14163: ;
#line 90
    goto ldv_14163;
  } else {

  }
#line 92
  goto ldv_14168;
  ldv_14167: 
#line 94
  __mptr = (struct rb_node  const  *)*new;
#line 94
  here = (struct drbd_interval *)__mptr;
#line 96
  parent = *new;
#line 97
  if (this->sector < here->sector) {
#line 98
    new = & (*new)->rb_left;
  } else
#line 99
  if (this->sector > here->sector) {
#line 100
    new = & (*new)->rb_right;
  } else
#line 101
  if ((unsigned long )this < (unsigned long )here) {
#line 102
    new = & (*new)->rb_left;
  } else
#line 103
  if ((unsigned long )this > (unsigned long )here) {
#line 104
    new = & (*new)->rb_right;
  } else {
#line 106
    return (0);
  }
  ldv_14168: ;
#line 92
  if ((unsigned long )*new != (unsigned long )((struct rb_node *)0)) {
#line 93
    goto ldv_14167;
  } else {

  }
#line 109
  rb_link_node(& this->rb, parent, new);
#line 110
  rb_insert_augmented(& this->rb, root, & augment_callbacks);
#line 111
  return (1);
}
}
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_interval.c.prepared"
bool drbd_contains_interval(struct rb_root *root , sector_t sector , struct drbd_interval *interval ) 
{ 
  struct rb_node *node ;
  struct drbd_interval *here ;
  struct rb_node  const  *__mptr ;

  {
#line 128
  node = root->rb_node;
#line 130
  goto ldv_14180;
  ldv_14179: 
#line 132
  __mptr = (struct rb_node  const  *)node;
#line 132
  here = (struct drbd_interval *)__mptr;
#line 134
  if (here->sector > sector) {
#line 135
    node = node->rb_left;
  } else
#line 136
  if (here->sector < sector) {
#line 137
    node = node->rb_right;
  } else
#line 138
  if ((unsigned long )interval < (unsigned long )here) {
#line 139
    node = node->rb_left;
  } else
#line 140
  if ((unsigned long )interval > (unsigned long )here) {
#line 141
    node = node->rb_right;
  } else {
#line 143
    return (1);
  }
  ldv_14180: ;
#line 130
  if ((unsigned long )node != (unsigned long )((struct rb_node *)0)) {
#line 131
    goto ldv_14179;
  } else {

  }

#line 145
  return (0);
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_interval.c.prepared"
void drbd_remove_interval(struct rb_root *root , struct drbd_interval *this ) 
{ 


  {
#line 154
  rb_erase_augmented(& this->rb, root, & augment_callbacks);
#line 155
  return;
}
}
#line 169 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_interval.c.prepared"
struct drbd_interval *drbd_find_overlap(struct rb_root *root , sector_t sector , unsigned int size ) 
{ 
  struct rb_node *node ;
  struct drbd_interval *overlap ;
  sector_t end ;
  long tmp ;
  struct drbd_interval *here ;
  struct rb_node  const  *__mptr ;
  sector_t tmp___0 ;

  {
#line 171
  node = root->rb_node;
#line 172
  overlap = 0;
#line 173
  end = (sector_t )(size >> 9) + sector;
#line 175
  tmp = __builtin_expect((size & 511U) != 0U, 0L);
#line 175
  if (tmp != 0L) {
#line 175
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_interval.c.prepared"),
                         "i" (175), "i" (12UL));
    ldv_14194: ;
#line 175
    goto ldv_14194;
  } else {

  }
#line 177
  goto ldv_14200;
  ldv_14199: 
#line 179
  __mptr = (struct rb_node  const  *)node;
#line 179
  here = (struct drbd_interval *)__mptr;
#line 181
  if ((unsigned long )node->rb_left != (unsigned long )((struct rb_node *)0)) {
#line 181
    tmp___0 = interval_end(node->rb_left);
#line 181
    if (tmp___0 > sector) {
#line 184
      node = node->rb_left;
    } else {
#line 181
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 185
  if (here->sector < end && here->sector + (sector_t )(here->size >> 9) > sector) {
#line 187
    overlap = here;
#line 188
    goto ldv_14198;
  } else
#line 189
  if (here->sector <= sector) {
#line 191
    node = node->rb_right;
  } else {
#line 193
    goto ldv_14198;
  }
  ldv_14200: ;
#line 177
  if ((unsigned long )node != (unsigned long )((struct rb_node *)0)) {
#line 178
    goto ldv_14199;
  } else {

  }
  ldv_14198: ;
#line 195
  return (overlap);
}
}
#line 199 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_interval.c.prepared"
struct drbd_interval *drbd_next_overlap(struct drbd_interval *i , sector_t sector ,
                                        unsigned int size ) 
{ 
  sector_t end ;
  struct rb_node *node ;
  struct rb_node  const  *__mptr ;

  {
#line 201
  end = (sector_t )(size >> 9) + sector;
  ldv_14210: 
#line 205
  node = rb_next((struct rb_node  const  *)(& i->rb));
#line 206
  if ((unsigned long )node == (unsigned long )((struct rb_node *)0)) {
#line 207
    return (0);
  } else {

  }
#line 208
  __mptr = (struct rb_node  const  *)node;
#line 208
  i = (struct drbd_interval *)__mptr;
#line 209
  if (i->sector >= end) {
#line 210
    return (0);
  } else {

  }
#line 211
  if (i->sector + (sector_t )(i->size >> 9) > sector) {
#line 212
    return (i);
  } else {

  }
#line 213
  goto ldv_14210;
}
}
#line 13 "include/linux/wait.h"
extern int default_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 81 "include/linux/wait.h"
__inline static void init_waitqueue_entry(wait_queue_t *q , struct task_struct *p ) 
{ 


  {
#line 83
  q->flags = 0U;
#line 84
  q->private = (void *)p;
#line 85
  q->func = & default_wake_function;
#line 86
  return;
}
}
#line 101
extern void add_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 103
extern void remove_wait_queue(wait_queue_head_t * , wait_queue_t * ) ;
#line 123 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_state.h"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) ;
#line 157
enum drbd_disk_state conn_lowest_disk(struct drbd_tconn *tconn ) ;
#line 159
enum drbd_conns conn_lowest_conn(struct drbd_tconn *tconn ) ;
#line 1937 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1939
  _drbd_thread_stop(thi, 0, 0);
#line 1940
  return;
}
}
#line 1942 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1944
  _drbd_thread_stop(thi, 1, 0);
#line 1945
  return;
}
}
#line 59 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static int w_after_state_ch(struct drbd_work *w , int unused ) ;
#line 60
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 62
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 63
static enum drbd_state_rv is_valid_soft_transition(union drbd_state os , union drbd_state ns ,
                                                   struct drbd_tconn *tconn ) ;
#line 64
static enum drbd_state_rv is_valid_transition(union drbd_state os , union drbd_state ns ) ;
#line 65
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state ns ,
                                       enum sanitize_state_warnings *warn ) ;
#line 68 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
__inline static bool is_susp(union drbd_state s ) 
{ 


  {
#line 70
  return ((bool )(((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U));
}
}
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
bool conn_all_vols_unconf(struct drbd_tconn *tconn ) 
{ 
  struct drbd_conf *mdev ;
  bool rv ;
  int vnr ;
  void *tmp ;
  void *tmp___0 ;

  {
#line 76
  rv = 1;
#line 79
  rcu_read_lock();
#line 80
  vnr = 0;
#line 80
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 80
  mdev = (struct drbd_conf *)tmp;
#line 80
  goto ldv_51839;
  ldv_51838: ;
#line 81
  if (((unsigned int )*((unsigned char *)mdev + 749UL) != 0U || (unsigned int )*((unsigned short *)mdev + 374UL) != 0U) || (unsigned int )*((unsigned char *)mdev + 748UL) != 2U) {
#line 84
    rv = 0;
#line 85
    goto ldv_51837;
  } else {

  }
#line 80
  vnr = vnr + 1;
#line 80
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 80
  mdev = (struct drbd_conf *)tmp___0;
  ldv_51839: ;
#line 80
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 81
    goto ldv_51838;
  } else {

  }
  ldv_51837: 
#line 88
  rcu_read_unlock();
#line 90
  return (rv);
}
}
#line 95 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static enum drbd_role max_role(enum drbd_role role1 , enum drbd_role role2 ) 
{ 


  {
#line 97
  if ((unsigned int )role1 == 1U || (unsigned int )role2 == 1U) {
#line 98
    return (R_PRIMARY);
  } else {

  }
#line 99
  if ((unsigned int )role1 == 2U || (unsigned int )role2 == 2U) {
#line 100
    return (R_SECONDARY);
  } else {

  }
#line 101
  return (R_UNKNOWN);
}
}
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static enum drbd_role min_role(enum drbd_role role1 , enum drbd_role role2 ) 
{ 


  {
#line 105
  if ((unsigned int )role1 == 0U || (unsigned int )role2 == 0U) {
#line 106
    return (R_UNKNOWN);
  } else {

  }
#line 107
  if ((unsigned int )role1 == 2U || (unsigned int )role2 == 2U) {
#line 108
    return (R_SECONDARY);
  } else {

  }
#line 109
  return (R_PRIMARY);
}
}
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
enum drbd_role conn_highest_role(struct drbd_tconn *tconn ) 
{ 
  enum drbd_role role ;
  struct drbd_conf *mdev ;
  int vnr ;
  void *tmp ;
  void *tmp___0 ;

  {
#line 114
  role = R_UNKNOWN;
#line 118
  rcu_read_lock();
#line 119
  vnr = 0;
#line 119
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 119
  mdev = (struct drbd_conf *)tmp;
#line 119
  goto ldv_51855;
  ldv_51854: 
#line 120
  role = max_role(role, (enum drbd_role )mdev->state.ldv_50103.role);
#line 119
  vnr = vnr + 1;
#line 119
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 119
  mdev = (struct drbd_conf *)tmp___0;
  ldv_51855: ;
#line 119
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 120
    goto ldv_51854;
  } else {

  }
#line 121
  rcu_read_unlock();
#line 123
  return (role);
}
}
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
enum drbd_role conn_highest_peer(struct drbd_tconn *tconn ) 
{ 
  enum drbd_role peer ;
  struct drbd_conf *mdev ;
  int vnr ;
  void *tmp ;
  void *tmp___0 ;

  {
#line 128
  peer = R_UNKNOWN;
#line 132
  rcu_read_lock();
#line 133
  vnr = 0;
#line 133
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 133
  mdev = (struct drbd_conf *)tmp;
#line 133
  goto ldv_51864;
  ldv_51863: 
#line 134
  peer = max_role(peer, (enum drbd_role )mdev->state.ldv_50103.peer);
#line 133
  vnr = vnr + 1;
#line 133
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 133
  mdev = (struct drbd_conf *)tmp___0;
  ldv_51864: ;
#line 133
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 134
    goto ldv_51863;
  } else {

  }
#line 135
  rcu_read_unlock();
#line 137
  return (peer);
}
}
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
enum drbd_disk_state conn_highest_disk(struct drbd_tconn *tconn ) 
{ 
  enum drbd_disk_state ds ;
  struct drbd_conf *mdev ;
  int vnr ;
  void *tmp ;
  enum drbd_disk_state __max1 ;
  enum drbd_disk_state __max2 ;
  void *tmp___0 ;

  {
#line 142
  ds = D_DISKLESS;
#line 146
  rcu_read_lock();
#line 147
  vnr = 0;
#line 147
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 147
  mdev = (struct drbd_conf *)tmp;
#line 147
  goto ldv_51876;
  ldv_51875: 
#line 148
  __max1 = ds;
#line 148
  __max2 = (enum drbd_disk_state )mdev->state.ldv_50103.disk;
#line 148
  ds = (enum drbd_disk_state )((unsigned int )__max1 > (unsigned int )__max2 ? (unsigned int )__max1 : (unsigned int )__max2);
#line 147
  vnr = vnr + 1;
#line 147
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 147
  mdev = (struct drbd_conf *)tmp___0;
  ldv_51876: ;
#line 147
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 148
    goto ldv_51875;
  } else {

  }
#line 149
  rcu_read_unlock();
#line 151
  return (ds);
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
enum drbd_disk_state conn_lowest_disk(struct drbd_tconn *tconn ) 
{ 
  enum drbd_disk_state ds ;
  struct drbd_conf *mdev ;
  int vnr ;
  void *tmp ;
  enum drbd_disk_state __min1 ;
  enum drbd_disk_state __min2 ;
  void *tmp___0 ;

  {
#line 156
  ds = D_MASK;
#line 160
  rcu_read_lock();
#line 161
  vnr = 0;
#line 161
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 161
  mdev = (struct drbd_conf *)tmp;
#line 161
  goto ldv_51888;
  ldv_51887: 
#line 162
  __min1 = ds;
#line 162
  __min2 = (enum drbd_disk_state )mdev->state.ldv_50103.disk;
#line 162
  ds = (enum drbd_disk_state )((unsigned int )__min1 < (unsigned int )__min2 ? (unsigned int )__min1 : (unsigned int )__min2);
#line 161
  vnr = vnr + 1;
#line 161
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 161
  mdev = (struct drbd_conf *)tmp___0;
  ldv_51888: ;
#line 161
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 162
    goto ldv_51887;
  } else {

  }
#line 163
  rcu_read_unlock();
#line 165
  return (ds);
}
}
#line 168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
enum drbd_disk_state conn_highest_pdsk(struct drbd_tconn *tconn ) 
{ 
  enum drbd_disk_state ds ;
  struct drbd_conf *mdev ;
  int vnr ;
  void *tmp ;
  enum drbd_disk_state __max1 ;
  enum drbd_disk_state __max2 ;
  void *tmp___0 ;

  {
#line 170
  ds = D_DISKLESS;
#line 174
  rcu_read_lock();
#line 175
  vnr = 0;
#line 175
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 175
  mdev = (struct drbd_conf *)tmp;
#line 175
  goto ldv_51900;
  ldv_51899: 
#line 176
  __max1 = ds;
#line 176
  __max2 = (enum drbd_disk_state )mdev->state.ldv_50103.pdsk;
#line 176
  ds = (enum drbd_disk_state )((unsigned int )__max1 > (unsigned int )__max2 ? (unsigned int )__max1 : (unsigned int )__max2);
#line 175
  vnr = vnr + 1;
#line 175
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 175
  mdev = (struct drbd_conf *)tmp___0;
  ldv_51900: ;
#line 175
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 176
    goto ldv_51899;
  } else {

  }
#line 177
  rcu_read_unlock();
#line 179
  return (ds);
}
}
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
enum drbd_conns conn_lowest_conn(struct drbd_tconn *tconn ) 
{ 
  enum drbd_conns conn ;
  struct drbd_conf *mdev ;
  int vnr ;
  void *tmp ;
  enum drbd_conns __min1 ;
  enum drbd_conns __min2 ;
  void *tmp___0 ;

  {
#line 184
  conn = C_MASK;
#line 188
  rcu_read_lock();
#line 189
  vnr = 0;
#line 189
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 189
  mdev = (struct drbd_conf *)tmp;
#line 189
  goto ldv_51912;
  ldv_51911: 
#line 190
  __min1 = conn;
#line 190
  __min2 = (enum drbd_conns )mdev->state.ldv_50103.conn;
#line 190
  conn = (enum drbd_conns )((unsigned int )__min1 < (unsigned int )__min2 ? (unsigned int )__min1 : (unsigned int )__min2);
#line 189
  vnr = vnr + 1;
#line 189
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 189
  mdev = (struct drbd_conf *)tmp___0;
  ldv_51912: ;
#line 189
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 190
    goto ldv_51911;
  } else {

  }
#line 191
  rcu_read_unlock();
#line 193
  return (conn);
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static bool no_peer_wf_report_params(struct drbd_tconn *tconn ) 
{ 
  struct drbd_conf *mdev ;
  int vnr ;
  bool rv ;
  void *tmp ;
  void *tmp___0 ;

  {
#line 200
  rv = 1;
#line 202
  rcu_read_lock();
#line 203
  vnr = 0;
#line 203
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 203
  mdev = (struct drbd_conf *)tmp;
#line 203
  goto ldv_51922;
  ldv_51921: ;
#line 204
  if ((unsigned int )*((unsigned short *)mdev + 374UL) == 144U) {
#line 205
    rv = 0;
#line 206
    goto ldv_51920;
  } else {

  }
#line 203
  vnr = vnr + 1;
#line 203
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 203
  mdev = (struct drbd_conf *)tmp___0;
  ldv_51922: ;
#line 203
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 204
    goto ldv_51921;
  } else {

  }
  ldv_51920: 
#line 208
  rcu_read_unlock();
#line 210
  return (rv);
}
}
#line 220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 223
  return ((((((int )os.ldv_40604.conn > 9 && (int )ns.ldv_40604.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U))) || ((int )os.ldv_40604.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U));
}
}
#line 234 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static union drbd_state apply_mask_val(union drbd_state os , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  union drbd_state ns ;

  {
#line 237
  ns.i = (os.i & ~ mask.i) | val.i;
#line 238
  return (ns);
}
}
#line 242 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;
  union drbd_state tmp___0 ;

  {
#line 249
  tmp = spinlock_check(& (mdev->tconn)->req_lock);
#line 249
  flags = _raw_spin_lock_irqsave(tmp);
#line 250
  tmp___0 = drbd_read_state(mdev);
#line 250
  ns = apply_mask_val(tmp___0, mask, val);
#line 251
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 252
  spin_unlock_irqrestore(& (mdev->tconn)->req_lock, flags);
#line 254
  return (rv);
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 266
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 267
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static enum drbd_state_rv _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  union drbd_state tmp___2 ;
  int tmp___3 ;

  {
#line 277
  tmp = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 277
  if (tmp != 0) {
#line 278
    return (SS_CW_SUCCESS);
  } else {

  }
#line 280
  tmp___0 = test_and_clear_bit(4, (unsigned long volatile   *)(& mdev->flags));
#line 280
  if (tmp___0 != 0) {
#line 281
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 283
  tmp___1 = spinlock_check(& (mdev->tconn)->req_lock);
#line 283
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 284
  os = drbd_read_state(mdev);
#line 285
  tmp___2 = apply_mask_val(os, mask, val);
#line 285
  ns = sanitize_state(mdev, tmp___2, 0);
#line 286
  rv = is_valid_transition(os, ns);
#line 287
  if ((int )rv > 0) {
#line 288
    rv = SS_UNKNOWN_ERROR;
  } else {

  }
#line 290
  tmp___3 = cl_wide_st_chg(mdev, os, ns);
#line 290
  if (tmp___3 == 0) {
#line 291
    rv = SS_CW_NO_NEED;
  } else {

  }
#line 292
  if ((int )rv == 0) {
#line 293
    rv = is_valid_state(mdev, ns);
#line 294
    if ((int )rv > 0) {
#line 295
      rv = is_valid_soft_transition(os, ns, mdev->tconn);
#line 296
      if ((int )rv > 0) {
#line 297
        rv = SS_UNKNOWN_ERROR;
      } else {

      }
    } else {

    }
  } else {

  }
#line 300
  spin_unlock_irqrestore(& (mdev->tconn)->req_lock, flags);
#line 302
  return (rv);
}
}
#line 316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static enum drbd_state_rv drbd_req_state(struct drbd_conf *mdev , union drbd_state mask ,
                                         union drbd_state val , enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;
  union drbd_state tmp___0 ;
  int tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  union drbd_state tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;

  {
#line 324
  init_completion(& done);
#line 326
  if (((unsigned int )f & 8U) != 0U) {
#line 327
    mutex_lock_nested(mdev->state_mutex, 0U);
  } else {

  }
#line 329
  tmp = spinlock_check(& (mdev->tconn)->req_lock);
#line 329
  flags = _raw_spin_lock_irqsave(tmp);
#line 330
  os = drbd_read_state(mdev);
#line 331
  tmp___0 = apply_mask_val(os, mask, val);
#line 331
  ns = sanitize_state(mdev, tmp___0, 0);
#line 332
  rv = is_valid_transition(os, ns);
#line 333
  if ((int )rv <= 0) {
#line 334
    spin_unlock_irqrestore(& (mdev->tconn)->req_lock, flags);
#line 335
    goto abort;
  } else {

  }
#line 338
  tmp___5 = cl_wide_st_chg(mdev, os, ns);
#line 338
  if (tmp___5 != 0) {
#line 339
    rv = is_valid_state(mdev, ns);
#line 340
    if ((int )rv == 1) {
#line 341
      rv = is_valid_soft_transition(os, ns, mdev->tconn);
    } else {

    }
#line 342
    spin_unlock_irqrestore(& (mdev->tconn)->req_lock, flags);
#line 344
    if ((int )rv <= 0) {
#line 345
      if (((unsigned int )f & 2U) != 0U) {
#line 346
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 347
      goto abort;
    } else {

    }
#line 350
    tmp___1 = drbd_send_state_req(mdev, mask, val);
#line 350
    if (tmp___1 != 0) {
#line 351
      rv = SS_CW_FAILED_BY_PEER;
#line 352
      if (((unsigned int )f & 2U) != 0U) {
#line 353
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 354
      goto abort;
    } else {

    }
#line 357
    rv = _req_st_cond(mdev, mask, val);
#line 357
    if ((int )rv != 0) {
#line 357
      goto ldv_51978;
    } else {

    }
#line 357
    tmp___2 = get_current();
#line 357
    __wait.flags = 0U;
#line 357
    __wait.private = (void *)tmp___2;
#line 357
    __wait.func = & autoremove_wake_function;
#line 357
    __wait.task_list.next = & __wait.task_list;
#line 357
    __wait.task_list.prev = & __wait.task_list;
    ldv_51981: 
#line 357
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 357
    rv = _req_st_cond(mdev, mask, val);
#line 357
    if ((int )rv != 0) {
#line 357
      goto ldv_51980;
    } else {

    }
#line 357
    schedule();
#line 357
    goto ldv_51981;
    ldv_51980: 
#line 357
    finish_wait(& mdev->state_wait, & __wait);
    ldv_51978: ;
#line 360
    if ((int )rv <= 0) {
#line 361
      if (((unsigned int )f & 2U) != 0U) {
#line 362
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 363
      goto abort;
    } else {

    }
#line 365
    tmp___3 = spinlock_check(& (mdev->tconn)->req_lock);
#line 365
    flags = _raw_spin_lock_irqsave(tmp___3);
#line 366
    tmp___4 = drbd_read_state(mdev);
#line 366
    ns = apply_mask_val(tmp___4, mask, val);
#line 367
    rv = _drbd_set_state(mdev, ns, f, & done);
  } else {
#line 369
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 372
  spin_unlock_irqrestore(& (mdev->tconn)->req_lock, flags);
#line 374
  if (((unsigned int )f & 4U) != 0U && (int )rv == 1) {
#line 375
    tmp___6 = get_current();
#line 375
    if ((unsigned long )tmp___6 == (unsigned long )(mdev->tconn)->worker.task) {
#line 375
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->tconn->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared",
              375);
    } else {

    }
#line 376
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 380
  if (((unsigned int )f & 8U) != 0U) {
#line 381
    mutex_unlock(mdev->state_mutex);
  } else {

  }
#line 383
  return (rv);
}
}
#line 397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) 
{ 
  enum drbd_state_rv rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 402
  rv = drbd_req_state(mdev, mask, val, f);
#line 402
  if ((int )rv != -18) {
#line 402
    goto ldv_51992;
  } else {

  }
#line 402
  tmp = get_current();
#line 402
  __wait.flags = 0U;
#line 402
  __wait.private = (void *)tmp;
#line 402
  __wait.func = & autoremove_wake_function;
#line 402
  __wait.task_list.next = & __wait.task_list;
#line 402
  __wait.task_list.prev = & __wait.task_list;
  ldv_51995: 
#line 402
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 402
  rv = drbd_req_state(mdev, mask, val, f);
#line 402
  if ((int )rv != -18) {
#line 402
    goto ldv_51994;
  } else {

  }
#line 402
  schedule();
#line 402
  goto ldv_51995;
  ldv_51994: 
#line 402
  finish_wait(& mdev->state_wait, & __wait);
  ldv_51992: ;
#line 405
  return (rv);
}
}
#line 408 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  bool tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 410
  tmp = is_susp(ns);
#line 410
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_40604.pdsk);
#line 410
  tmp___1 = drbd_disk_str((enum drbd_disk_state )ns.ldv_40604.disk);
#line 410
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_40604.peer);
#line 410
  tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_40604.role);
#line 410
  tmp___4 = drbd_conn_str((enum drbd_conns )ns.ldv_40604.conn);
#line 410
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c%c%c }\n",
          name, tmp___4, tmp___3, tmp___2, tmp___1, tmp___0, (int )tmp ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 70 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 78 : 45);
#line 423
  return;
}
}
#line 426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) 
{ 
  char const   *tmp ;

  {
#line 429
  if ((int )err == -18) {
#line 430
    return;
  } else {

  }
#line 431
  tmp = drbd_set_st_err_str(err);
#line 431
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 432
  print_st(mdev, (char *)" state", os);
#line 433
  print_st(mdev, (char *)"wanted", ns);
#line 434
  return;
}
}
#line 436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static long print_state_change(char *pb , union drbd_state os , union drbd_state ns ,
                               enum chg_state_flags flags ) 
{ 
  char *pbp ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  int tmp___13 ;

  {
#line 440
  pbp = pb;
#line 441
  *pbp = 0;
#line 443
  if ((int )ns.ldv_40604.role != (int )os.ldv_40604.role && ((unsigned int )flags & 32U) != 0U) {
#line 444
    tmp = drbd_role_str((enum drbd_role )ns.ldv_40604.role);
#line 444
    tmp___0 = drbd_role_str((enum drbd_role )os.ldv_40604.role);
#line 444
    tmp___1 = sprintf(pbp, "role( %s -> %s ) ", tmp___0, tmp);
#line 444
    pbp = pbp + (unsigned long )tmp___1;
  } else {

  }
#line 447
  if ((int )ns.ldv_40604.peer != (int )os.ldv_40604.peer && ((unsigned int )flags & 64U) != 0U) {
#line 448
    tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_40604.peer);
#line 448
    tmp___3 = drbd_role_str((enum drbd_role )os.ldv_40604.peer);
#line 448
    tmp___4 = sprintf(pbp, "peer( %s -> %s ) ", tmp___3, tmp___2);
#line 448
    pbp = pbp + (unsigned long )tmp___4;
  } else {

  }
#line 451
  if ((int )ns.ldv_40604.conn != (int )os.ldv_40604.conn && ((unsigned int )flags & 128U) != 0U) {
#line 452
    tmp___5 = drbd_conn_str((enum drbd_conns )ns.ldv_40604.conn);
#line 452
    tmp___6 = drbd_conn_str((enum drbd_conns )os.ldv_40604.conn);
#line 452
    tmp___7 = sprintf(pbp, "conn( %s -> %s ) ", tmp___6, tmp___5);
#line 452
    pbp = pbp + (unsigned long )tmp___7;
  } else {

  }
#line 455
  if ((int )ns.ldv_40604.disk != (int )os.ldv_40604.disk && ((unsigned int )flags & 256U) != 0U) {
#line 456
    tmp___8 = drbd_disk_str((enum drbd_disk_state )ns.ldv_40604.disk);
#line 456
    tmp___9 = drbd_disk_str((enum drbd_disk_state )os.ldv_40604.disk);
#line 456
    tmp___10 = sprintf(pbp, "disk( %s -> %s ) ", tmp___9, tmp___8);
#line 456
    pbp = pbp + (unsigned long )tmp___10;
  } else {

  }
#line 459
  if ((int )ns.ldv_40604.pdsk != (int )os.ldv_40604.pdsk && ((unsigned int )flags & 512U) != 0U) {
#line 460
    tmp___11 = drbd_disk_str((enum drbd_disk_state )ns.ldv_40604.pdsk);
#line 460
    tmp___12 = drbd_disk_str((enum drbd_disk_state )os.ldv_40604.pdsk);
#line 460
    tmp___13 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___12, tmp___11);
#line 460
    pbp = pbp + (unsigned long )tmp___13;
  } else {

  }
#line 464
  return ((long )pbp - (long )pb);
}
}
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static void drbd_pr_state_change(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                                 enum chg_state_flags flags ) 
{ 
  char pb[300U] ;
  char *pbp ;
  long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 471
  pbp = (char *)(& pb);
#line 473
  tmp = print_state_change(pbp, os, ns, (enum chg_state_flags )((unsigned int )flags ^ 992U));
#line 473
  pbp = pbp + (unsigned long )tmp;
#line 475
  if ((int )ns.ldv_40604.aftr_isp != (int )os.ldv_40604.aftr_isp) {
#line 476
    tmp___0 = sprintf(pbp, "aftr_isp( %d -> %d ) ", (int )os.ldv_40604.aftr_isp, (int )ns.ldv_40604.aftr_isp);
#line 476
    pbp = pbp + (unsigned long )tmp___0;
  } else {

  }
#line 479
  if ((int )ns.ldv_40604.peer_isp != (int )os.ldv_40604.peer_isp) {
#line 480
    tmp___1 = sprintf(pbp, "peer_isp( %d -> %d ) ", (int )os.ldv_40604.peer_isp, (int )ns.ldv_40604.peer_isp);
#line 480
    pbp = pbp + (unsigned long )tmp___1;
  } else {

  }
#line 483
  if ((int )ns.ldv_40604.user_isp != (int )os.ldv_40604.user_isp) {
#line 484
    tmp___2 = sprintf(pbp, "user_isp( %d -> %d ) ", (int )os.ldv_40604.user_isp, (int )ns.ldv_40604.user_isp);
#line 484
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 488
  if ((unsigned long )((char *)(& pb)) != (unsigned long )pbp) {
#line 489
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
  } else {

  }
#line 490
  return;
}
}
#line 492 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static void conn_pr_state_change(struct drbd_tconn *tconn , union drbd_state os ,
                                 union drbd_state ns , enum chg_state_flags flags ) 
{ 
  char pb[300U] ;
  char *pbp ;
  long tmp ;
  bool tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  bool tmp___4 ;

  {
#line 496
  pbp = (char *)(& pb);
#line 498
  tmp = print_state_change(pbp, os, ns, flags);
#line 498
  pbp = pbp + (unsigned long )tmp;
#line 500
  tmp___3 = is_susp(ns);
#line 500
  tmp___4 = is_susp(os);
#line 500
  if ((int )tmp___3 != (int )tmp___4 && ((unsigned int )flags & 1024U) != 0U) {
#line 501
    tmp___0 = is_susp(ns);
#line 501
    tmp___1 = is_susp(os);
#line 501
    tmp___2 = sprintf(pbp, "susp( %d -> %d ) ", (int )tmp___1, (int )tmp___0);
#line 501
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 505
  if ((unsigned long )((char *)(& pb)) != (unsigned long )pbp) {
#line 506
    printk("\016d-con %s: %s\n", tconn->name, (char *)(& pb));
  } else {

  }
#line 507
  return;
}
}
#line 516 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_state_rv rv ;
  struct net_conf *nc ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct net_conf *_________p1___0 ;
  bool __warned___0 ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_role tmp___4 ;

  {
#line 521
  rv = 1;
#line 524
  rcu_read_lock();
#line 525
  fp = FP_DONT_CARE;
#line 526
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 526
  if (tmp___1 != 0) {
#line 527
    _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 527
    tmp = debug_lockdep_rcu_enabled();
#line 527
    if (tmp != 0 && ! __warned) {
#line 527
      tmp___0 = rcu_read_lock_held();
#line 527
      if (tmp___0 == 0 && 1) {
#line 527
        __warned = 1;
#line 527
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared",
                               527, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 527
    fp = (enum drbd_fencing_p )_________p1->fencing;
#line 528
    put_ldev(mdev);
  } else {

  }
#line 531
  _________p1___0 = *((struct net_conf * volatile  *)(& (mdev->tconn)->net_conf));
#line 531
  tmp___2 = debug_lockdep_rcu_enabled();
#line 531
  if (tmp___2 != 0 && ! __warned___0) {
#line 531
    tmp___3 = rcu_read_lock_held();
#line 531
    if (tmp___3 == 0 && 1) {
#line 531
      __warned___0 = 1;
#line 531
      lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared",
                             531, "suspicious rcu_dereference_check() usage");
    } else {

    }
  } else {

  }
#line 531
  nc = _________p1___0;
#line 532
  if ((unsigned long )nc != (unsigned long )((struct net_conf *)0)) {
#line 533
    if ((int )((signed char )nc->two_primaries) == 0 && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) {
#line 534
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 535
        rv = SS_TWO_PRIMARIES;
      } else {
#line 536
        tmp___4 = conn_highest_peer(mdev->tconn);
#line 536
        if ((unsigned int )tmp___4 == 1U) {
#line 537
          rv = SS_O_VOL_PEER_PRI;
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 541
  if ((int )rv <= 0) {

  } else
#line 543
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 544
    rv = SS_DEVICE_IN_USE;
  } else
#line 546
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_40604.conn <= 9) && (int )ns.ldv_40604.disk <= 7) {
#line 547
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 549
  if ((((int )fp > 0 && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_40604.conn <= 9) && (int )ns.ldv_40604.pdsk > 5) {
#line 551
    rv = SS_PRIMARY_NOP;
  } else
#line 553
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_40604.disk <= 4) && (int )ns.ldv_40604.pdsk <= 4) {
#line 554
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 556
  if ((int )ns.ldv_40604.conn > 10 && (int )ns.ldv_40604.disk <= 3) {
#line 557
    rv = SS_NO_LOCAL_DISK;
  } else
#line 559
  if ((int )ns.ldv_40604.conn > 10 && (int )ns.ldv_40604.pdsk <= 3) {
#line 560
    rv = SS_NO_REMOTE_DISK;
  } else
#line 562
  if (((int )ns.ldv_40604.conn > 10 && (int )ns.ldv_40604.disk <= 7) && (int )ns.ldv_40604.pdsk <= 7) {
#line 563
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 565
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 570
    rv = SS_CONNECTED_OUTDATES;
  } else
#line 572
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )((signed char )nc->verify_alg[0]) == 0) {
#line 574
    rv = SS_NO_VERIFY_ALG;
  } else
#line 576
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (mdev->tconn)->agreed_pro_version <= 87) {
#line 578
    rv = SS_NOT_SUPPORTED;
  } else
#line 580
  if ((int )ns.ldv_40604.conn > 9 && *((unsigned int *)(& ns) + 0UL) == 49152U) {
#line 581
    rv = SS_CONNECTED_OUTDATES;
  } else {

  }
#line 583
  rcu_read_unlock();
#line 585
  return (rv);
}
}
#line 597 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static enum drbd_state_rv is_valid_soft_transition(union drbd_state os , union drbd_state ns ,
                                                   struct drbd_tconn *tconn ) 
{ 
  enum drbd_state_rv rv ;
  int tmp ;

  {
#line 599
  rv = 1;
#line 601
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_40604.conn > 10) {
#line 603
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 605
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 606
    rv = SS_ALREADY_STANDALONE;
  } else {

  }
#line 608
  if ((int )ns.ldv_40604.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 609
    rv = SS_IS_DISKLESS;
  } else {

  }
#line 611
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_40604.conn <= 1) {
#line 612
    rv = SS_NO_NET_CONFIG;
  } else {

  }
#line 614
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_40604.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 615
    rv = SS_LOWER_THAN_OUTDATED;
  } else {

  }
#line 617
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 618
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 625
  tmp = constant_test_bit(10U, (unsigned long const volatile   *)(& tconn->flags));
#line 625
  if (tmp != 0 && ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) != 144U || (unsigned int )*((unsigned short *)(& os) + 0UL) != 128U))) {
#line 628
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 630
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_40604.conn <= 9) {
#line 631
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 633
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_40604.conn != (int )os.ldv_40604.conn) && (int )os.ldv_40604.conn > 10) {
#line 635
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 637
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_40604.conn <= 9) {
#line 639
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 641
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) && (int )os.ldv_40604.conn <= 8) {
#line 643
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 645
  return (rv);
}
}
#line 649 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static enum drbd_state_rv is_valid_conn_transition(enum drbd_conns oc , enum drbd_conns nc ) 
{ 


  {
#line 652
  if ((unsigned int )oc == (unsigned int )nc) {
#line 653
    return (SS_NOTHING_TO_DO);
  } else {

  }
#line 656
  if ((unsigned int )oc == 0U && (unsigned int )nc == 1U) {
#line 657
    return (SS_ALREADY_STANDALONE);
  } else {

  }
#line 660
  if ((unsigned int )oc == 0U && (unsigned int )nc != 2U) {
#line 661
    return (SS_NEED_CONNECTION);
  } else {

  }
#line 665
  if ((unsigned int )oc <= 8U && (unsigned int )nc > 9U) {
#line 666
    return (SS_NEED_CONNECTION);
  } else {

  }
#line 669
  if ((((unsigned int )oc > 2U && (unsigned int )oc <= 7U) && (unsigned int )nc != 2U) && (unsigned int )nc != 1U) {
#line 670
    return (SS_IN_TRANSIENT_STATE);
  } else {

  }
#line 673
  if ((unsigned int )oc == 1U && (unsigned int )nc != 0U) {
#line 674
    return (SS_IN_TRANSIENT_STATE);
  } else {

  }
#line 676
  return (SS_SUCCESS);
}
}
#line 689 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static enum drbd_state_rv is_valid_transition(union drbd_state os , union drbd_state ns ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 693
  rv = is_valid_conn_transition((enum drbd_conns )os.ldv_40604.conn, (enum drbd_conns )ns.ldv_40604.conn);
#line 696
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 697
    rv = SS_IS_DISKLESS;
  } else {

  }
#line 699
  return (rv);
}
}
#line 702 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static void print_sanitize_warnings(struct drbd_conf *mdev , enum sanitize_state_warnings warn ) 
{ 
  char const   *msg_table[6U] ;

  {
#line 704
  msg_table[0] = "";
#line 704
  msg_table[1] = "Online-verify aborted.";
#line 704
  msg_table[2] = "Resync aborted.";
#line 704
  msg_table[3] = "Connection lost while negotiating, no data!";
#line 704
  msg_table[4] = "Implicitly upgraded disk";
#line 704
  msg_table[5] = "Implicitly upgraded pdsk";
#line 713
  if ((unsigned int )warn != 0U) {
#line 714
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", msg_table[(unsigned int )warn]);
  } else {

  }
#line 715
  return;
}
}
#line 727 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state ns ,
                                       enum sanitize_state_warnings *warn ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_disk_state disk_min ;
  enum drbd_disk_state disk_max ;
  enum drbd_disk_state pdsk_min ;
  enum drbd_disk_state pdsk_max ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 733
  if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 734
    *warn = NO_WARNING;
  } else {

  }
#line 736
  fp = FP_DONT_CARE;
#line 737
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 737
  if (tmp___1 != 0) {
#line 738
    rcu_read_lock();
#line 739
    _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 739
    tmp = debug_lockdep_rcu_enabled();
#line 739
    if (tmp != 0 && ! __warned) {
#line 739
      tmp___0 = rcu_read_lock_held();
#line 739
      if (tmp___0 == 0 && 1) {
#line 739
        __warned = 1;
#line 739
        lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared",
                               739, "suspicious rcu_dereference_check() usage");
      } else {

      }
    } else {

    }
#line 739
    fp = (enum drbd_fencing_p )_________p1->fencing;
#line 740
    rcu_read_unlock();
#line 741
    put_ldev(mdev);
  } else {

  }
#line 745
  if ((int )ns.ldv_40604.conn <= 9) {
#line 746
    ns.ldv_40604.peer_isp = 0U;
#line 747
    ns.ldv_40604.peer = 0U;
#line 748
    if ((int )ns.ldv_40604.pdsk > 6 || (int )ns.ldv_40604.pdsk <= 3) {
#line 749
      ns.ldv_40604.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 753
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 754
    ns.ldv_40604.aftr_isp = 0U;
  } else {

  }
#line 758
  if ((int )ns.ldv_40604.conn > 10 && ((int )ns.ldv_40604.disk <= 2 || (int )ns.ldv_40604.pdsk <= 2)) {
#line 759
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 760
      *warn = (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U ? ABORTED_ONLINE_VERIFY : ABORTED_RESYNC;
    } else {

    }
#line 762
    ns.ldv_40604.conn = 10U;
  } else {

  }
#line 766
  if ((int )ns.ldv_40604.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 766
    tmp___2 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 766
    if (tmp___2 != 0) {
#line 768
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 769
        ns.ldv_40604.disk = mdev->new_state_tmp.ldv_40604.disk;
#line 770
        ns.ldv_40604.pdsk = mdev->new_state_tmp.ldv_40604.pdsk;
      } else {
#line 772
        if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 773
          *warn = CONNECTION_LOST_NEGOTIATING;
        } else {

        }
#line 774
        ns.ldv_40604.disk = 0U;
#line 775
        ns.ldv_40604.pdsk = 6U;
      }
#line 777
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 781
  if ((int )ns.ldv_40604.conn > 9 && (int )ns.ldv_40604.conn <= 21) {
#line 782
    if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 783
      ns.ldv_40604.disk = 8U;
    } else {

    }
#line 784
    if (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U) {
#line 785
      ns.ldv_40604.pdsk = 8U;
    } else {

    }
  } else {

  }
#line 789
  disk_min = D_DISKLESS;
#line 790
  disk_max = D_UP_TO_DATE;
#line 791
  pdsk_min = D_INCONSISTENT;
#line 792
  pdsk_max = D_UNKNOWN;
#line 793
  switch ((unsigned int )ns.ldv_40604.conn) {
  case 14U: ;
  case 21U: ;
  case 12U: ;
  case 15U: ;
  case 23U: 
#line 799
  disk_min = D_INCONSISTENT;
#line 800
  disk_max = D_OUTDATED;
#line 801
  pdsk_min = D_UP_TO_DATE;
#line 802
  pdsk_max = D_UP_TO_DATE;
#line 803
  goto ldv_52081;
  case 18U: ;
  case 19U: 
#line 806
  disk_min = D_UP_TO_DATE;
#line 807
  disk_max = D_UP_TO_DATE;
#line 808
  pdsk_min = D_UP_TO_DATE;
#line 809
  pdsk_max = D_UP_TO_DATE;
#line 810
  goto ldv_52081;
  case 10U: 
#line 812
  disk_min = D_DISKLESS;
#line 813
  disk_max = D_UP_TO_DATE;
#line 814
  pdsk_min = D_DISKLESS;
#line 815
  pdsk_max = D_UP_TO_DATE;
#line 816
  goto ldv_52081;
  case 13U: ;
  case 20U: ;
  case 11U: ;
  case 22U: 
#line 821
  disk_min = D_UP_TO_DATE;
#line 822
  disk_max = D_UP_TO_DATE;
#line 823
  pdsk_min = D_INCONSISTENT;
#line 824
  pdsk_max = D_CONSISTENT;
#line 825
  goto ldv_52081;
  case 17U: 
#line 827
  disk_min = D_INCONSISTENT;
#line 828
  disk_max = D_INCONSISTENT;
#line 829
  pdsk_min = D_UP_TO_DATE;
#line 830
  pdsk_max = D_UP_TO_DATE;
#line 831
  goto ldv_52081;
  case 16U: 
#line 833
  disk_min = D_UP_TO_DATE;
#line 834
  disk_max = D_UP_TO_DATE;
#line 835
  pdsk_min = D_INCONSISTENT;
#line 836
  pdsk_max = D_INCONSISTENT;
#line 837
  goto ldv_52081;
  case 0U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 8U: ;
  case 9U: ;
  case 31U: ;
#line 849
  goto ldv_52081;
  }
  ldv_52081: ;
#line 851
  if ((unsigned int )ns.ldv_40604.disk > (unsigned int )disk_max) {
#line 852
    ns.ldv_40604.disk = (unsigned char )disk_max;
  } else {

  }
#line 854
  if ((unsigned int )ns.ldv_40604.disk < (unsigned int )disk_min) {
#line 855
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 856
      *warn = IMPLICITLY_UPGRADED_DISK;
    } else {

    }
#line 857
    ns.ldv_40604.disk = (unsigned char )disk_min;
  } else {

  }
#line 859
  if ((unsigned int )ns.ldv_40604.pdsk > (unsigned int )pdsk_max) {
#line 860
    ns.ldv_40604.pdsk = (unsigned char )pdsk_max;
  } else {

  }
#line 862
  if ((unsigned int )ns.ldv_40604.pdsk < (unsigned int )pdsk_min) {
#line 863
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 864
      *warn = IMPLICITLY_UPGRADED_PDSK;
    } else {

    }
#line 865
    ns.ldv_40604.pdsk = (unsigned char )pdsk_min;
  } else {

  }
#line 868
  if ((int )fp == 2 && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_40604.conn <= 9) && (int )ns.ldv_40604.pdsk > 5)) {
#line 870
    ns.ldv_40604.susp_fen = 1U;
  } else {

  }
#line 872
  if ((mdev->tconn)->res_opts.on_no_data == 1U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_40604.disk <= 7) && (int )ns.ldv_40604.pdsk <= 7)) {
#line 874
    ns.ldv_40604.susp_nod = 1U;
  } else {

  }
#line 876
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 877
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 878
      ns.ldv_40604.conn = 20U;
    } else {

    }
#line 879
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 880
      ns.ldv_40604.conn = 21U;
    } else {

    }
  } else {
#line 882
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 883
      ns.ldv_40604.conn = 16U;
    } else {

    }
#line 884
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 885
      ns.ldv_40604.conn = 17U;
    } else {

    }
  }
#line 888
  return (ns);
}
}
#line 891 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
void drbd_resume_al(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 893
  tmp = test_and_clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 893
  if (tmp != 0) {
#line 894
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resumed AL updates\n");
  } else {

  }
#line 895
  return;
}
}
#line 898 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 900
  if ((mdev->tconn)->agreed_pro_version <= 89) {
#line 901
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 902
  mdev->rs_total = drbd_bm_bits(mdev);
#line 903
  mdev->ov_position = 0UL;
#line 904
  if ((unsigned int )cs == 19U) {
#line 910
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 912
    bit = mdev->ov_start_sector >> 3;
#line 913
    if (mdev->rs_total <= bit) {
#line 914
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
#line 916
      mdev->rs_total = 1UL;
    } else {
#line 918
      mdev->rs_total = mdev->rs_total - bit;
    }
#line 919
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 921
  mdev->ov_left = mdev->rs_total;
#line 922
  return;
}
}
#line 934 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  union drbd_state os ;
  enum drbd_state_rv rv ;
  enum sanitize_state_warnings ssw ;
  struct after_state_chg_work *ascw ;
  enum drbd_state_rv tmp ;
  bool tmp___0 ;
  unsigned long tmp___1 ;
  unsigned long now ;
  int i ;
  u32 mdf ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;

  {
#line 938
  rv = 1;
#line 942
  os = drbd_read_state(mdev);
#line 944
  ns = sanitize_state(mdev, ns, & ssw);
#line 945
  if (ns.i == os.i) {
#line 946
    return (SS_NOTHING_TO_DO);
  } else {

  }
#line 948
  rv = is_valid_transition(os, ns);
#line 949
  if ((int )rv <= 0) {
#line 950
    return (rv);
  } else {

  }
#line 952
  if (((unsigned int )flags & 1U) == 0U) {
#line 956
    rv = is_valid_state(mdev, ns);
#line 957
    if ((int )rv <= 0) {
#line 961
      tmp = is_valid_state(mdev, os);
#line 961
      if ((int )tmp == (int )rv) {
#line 962
        rv = is_valid_soft_transition(os, ns, mdev->tconn);
      } else {
#line 964
        rv = is_valid_soft_transition(os, ns, mdev->tconn);
      }
    } else {

    }
  } else {

  }
#line 967
  if ((int )rv <= 0) {
#line 968
    if (((unsigned int )flags & 2U) != 0U) {
#line 969
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 970
    return (rv);
  } else {

  }
#line 973
  print_sanitize_warnings(mdev, ssw);
#line 975
  drbd_pr_state_change(mdev, os, ns, flags);
#line 980
  if (((unsigned int )flags & 1024U) == 0U) {
#line 981
    conn_pr_state_change(mdev->tconn, os, ns, (enum chg_state_flags )(((unsigned int )flags & 4294965279U) | 1024U));
  } else {

  }
#line 987
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U)) {
#line 989
    atomic_inc(& mdev->local_cnt);
  } else {

  }
#line 991
  mdev->state.i = ns.i;
#line 992
  (mdev->tconn)->susp = ns.ldv_40604.susp;
#line 993
  (mdev->tconn)->susp_nod = ns.ldv_40604.susp_nod;
#line 994
  (mdev->tconn)->susp_fen = ns.ldv_40604.susp_fen;
#line 996
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_40604.disk > 2) {
#line 997
    drbd_print_uuids(mdev, "attached to UUIDs");
  } else {

  }
#line 1000
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 144U) {
#line 1000
    tmp___0 = no_peer_wf_report_params(mdev->tconn);
#line 1000
    if ((int )tmp___0) {
#line 1002
      clear_bit(10, (unsigned long volatile   *)(& (mdev->tconn)->flags));
    } else {

    }
  } else {

  }
#line 1004
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1005
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1006
  __wake_up(& (mdev->tconn)->ping_wait, 3U, 1, 0);
#line 1010
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_40604.conn <= 10) {
#line 1012
    tmp___1 = drbd_bm_bits(mdev);
#line 1012
    mdev->ov_start_sector = (tmp___1 - mdev->ov_left) << 3;
#line 1014
    if (mdev->ov_left != 0UL) {
#line 1015
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
                (unsigned long long )mdev->ov_start_sector);
    } else {

    }
  } else {

  }
#line 1019
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1021
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1022
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time[mdev->rs_last_mark]);
#line 1024
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1025
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1028
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1030
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1031
    mdev->rs_mark_time[mdev->rs_last_mark] = jiffies;
  } else {

  }
#line 1034
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1036
    now = jiffies;
#line 1039
    set_ov_position(mdev, (enum drbd_conns )ns.ldv_40604.conn);
#line 1040
    mdev->rs_start = now;
#line 1041
    mdev->rs_last_events = 0;
#line 1042
    mdev->rs_last_sect_ev = 0;
#line 1043
    mdev->ov_last_oos_size = 0UL;
#line 1044
    mdev->ov_last_oos_start = 0UL;
#line 1046
    i = 0;
#line 1046
    goto ldv_52123;
    ldv_52122: 
#line 1047
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 1048
    mdev->rs_mark_time[i] = now;
#line 1046
    i = i + 1;
    ldv_52123: ;
#line 1046
    if (i <= 7) {
#line 1047
      goto ldv_52122;
    } else {

    }
#line 1051
    drbd_rs_controller_reset(mdev);
#line 1053
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1054
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1056
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1060
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1060
  if (tmp___3 != 0) {
#line 1061
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1065
    mdf = mdf & 4294967167U;
#line 1066
    tmp___2 = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 1066
    if (tmp___2 != 0) {
#line 1067
      mdf = mdf | 64U;
    } else {

    }
#line 1068
    if ((unsigned int )*((unsigned char *)mdev + 748UL) == 1U || ((int )mdev->state.ldv_50103.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 748UL) == 4U)) {
#line 1070
      mdf = mdf | 2U;
    } else {

    }
#line 1071
    if ((int )mdev->state.ldv_50103.conn > 9) {
#line 1072
      mdf = mdf | 4U;
    } else {

    }
#line 1073
    if ((int )mdev->state.ldv_50103.disk > 4) {
#line 1074
      mdf = mdf | 1U;
    } else {

    }
#line 1075
    if ((int )mdev->state.ldv_50103.disk > 5) {
#line 1076
      mdf = mdf | 16U;
    } else {

    }
#line 1077
    if ((int )mdev->state.ldv_50103.pdsk <= 5 && (int )mdev->state.ldv_50103.pdsk > 3) {
#line 1078
      mdf = mdf | 32U;
    } else {

    }
#line 1079
    if ((mdev->ldev)->md.flags != mdf) {
#line 1080
      (mdev->ldev)->md.flags = mdf;
#line 1081
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1083
    if ((int )os.ldv_40604.disk <= 6 && (int )ns.ldv_40604.disk > 6) {
#line 1084
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1085
    put_ldev(mdev);
  } else {

  }
#line 1089
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1091
    set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1094
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1095
    drbd_thread_stop_nowait(& (mdev->tconn)->receiver);
  } else {

  }
#line 1098
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1099
    drbd_thread_stop_nowait(& (mdev->tconn)->receiver);
  } else {

  }
#line 1102
  if (((int )os.ldv_40604.conn > 8 && (int )ns.ldv_40604.conn <= 7) && (int )ns.ldv_40604.conn > 2) {
#line 1104
    drbd_thread_restart_nowait(& (mdev->tconn)->receiver);
  } else {

  }
#line 1107
  if ((int )os.ldv_40604.conn <= 9 && (int )ns.ldv_40604.conn > 9) {
#line 1108
    drbd_resume_al(mdev);
  } else {

  }
#line 1113
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U) && (int )ns.ldv_40604.disk > 3) {
#line 1115
    mdev->last_reattach_jif = jiffies;
  } else {

  }
#line 1117
  tmp___4 = kmalloc(56UL, 32U);
#line 1117
  ascw = (struct after_state_chg_work *)tmp___4;
#line 1118
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1119
    ascw->os = os;
#line 1120
    ascw->ns = ns;
#line 1121
    ascw->flags = flags;
#line 1122
    ascw->w.cb = & w_after_state_ch;
#line 1123
    ascw->w.ldv_50388.mdev = mdev;
#line 1124
    ascw->done = done;
#line 1125
    drbd_queue_work(& (mdev->tconn)->sender_work, & ascw->w);
  } else {
#line 1127
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1130
  return (rv);
}
}
#line 1133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static int w_after_state_ch(struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;
  struct drbd_conf *mdev ;

  {
#line 1136
  __mptr = (struct drbd_work  const  *)w;
#line 1136
  ascw = (struct after_state_chg_work *)__mptr;
#line 1137
  mdev = w->ldv_50388.mdev;
#line 1139
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1140
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1141
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1141
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared",
              1141);
    } else {

    }
#line 1142
    complete(ascw->done);
  } else {

  }
#line 1144
  kfree((void const   *)ascw);
#line 1146
  return (0);
}
}
#line 1149 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1151
  if (rv != 0) {
#line 1152
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1153
    val.i = 0U;
#line 1153
    val.ldv_40604.conn = 10U;
#line 1153
    mask.i = 0U;
#line 1153
    mask.ldv_40604.conn = 31U;
#line 1153
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1154
    return;
  } else {

  }
#line 1157
  switch ((int )mdev->state.ldv_50103.conn) {
  case 12: 
#line 1159
  val___0.i = 0U;
#line 1159
  val___0.ldv_40604.conn = 15U;
#line 1159
  mask___0.i = 0U;
#line 1159
  mask___0.ldv_40604.conn = 31U;
#line 1159
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1160
  goto ldv_52147;
  case 11: 
#line 1162
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1163
  goto ldv_52147;
  }
  ldv_52147: ;
#line 1166
  return;
}
}
#line 1167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
int drbd_bitmap_io_from_worker(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                               char *why , enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 1173
  tmp = get_current();
#line 1173
  if ((unsigned long )tmp != (unsigned long )(mdev->tconn)->worker.task) {
#line 1173
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->tconn->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared",
            1173);
  } else {

  }
#line 1176
  set_bit(8U, (unsigned long volatile   *)(& mdev->flags));
#line 1178
  drbd_bm_lock(mdev, why, flags);
#line 1179
  rv = (*io_fn)(mdev);
#line 1180
  drbd_bm_unlock(mdev);
#line 1182
  drbd_resume_io(mdev);
#line 1184
  return (rv);
}
}
#line 1194 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  struct sib_info sib ;
  struct drbd_tconn *tconn ;
  enum drbd_req_event what ;
  enum drbd_conns tmp ;
  enum drbd_disk_state tmp___0 ;
  union drbd_state __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;
  struct drbd_tconn *tconn___0 ;
  struct drbd_conf *odev ;
  int vnr ;
  void *tmp___1 ;
  void *tmp___2 ;
  union drbd_state __constr_expr_2 ;
  union drbd_state __constr_expr_3 ;
  enum drbd_conns tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  enum drbd_io_error_p eh ;
  int was_io_error ;
  struct disk_conf *_________p1 ;
  bool __warned ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  bool tmp___15 ;
  int tmp___16 ;

  {
#line 1199
  sib.sib_reason = SIB_STATE_CHANGE;
#line 1200
  sib.ldv_51335.ldv_51334.os = os;
#line 1201
  sib.ldv_51335.ldv_51334.ns = ns;
#line 1203
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1204
    clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 1205
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1206
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1210
  drbd_bcast_event(mdev, (struct sib_info  const  *)(& sib));
#line 1212
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_40604.disk > 7) || (int )os.ldv_40604.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_40604.disk <= 7) && (int )ns.ldv_40604.pdsk <= 7)) {
#line 1214
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1219
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1220
    tconn = mdev->tconn;
#line 1221
    what = NOTHING;
#line 1223
    spin_lock_irq(& tconn->req_lock);
#line 1224
    if ((int )os.ldv_40604.conn <= 9) {
#line 1224
      tmp = conn_lowest_conn(tconn);
#line 1224
      if ((unsigned int )tmp > 9U) {
#line 1225
        what = RESEND;
      } else {

      }
    } else {

    }
#line 1227
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U) {
#line 1227
      tmp___0 = conn_lowest_disk(tconn);
#line 1227
      if ((unsigned int )tmp___0 > 3U) {
#line 1229
        what = RESTART_FROZEN_DISK_IO;
      } else {

      }
    } else {

    }
#line 1231
    if ((unsigned int )*((unsigned char *)tconn + 132UL) != 0U && (unsigned int )what != 28U) {
#line 1232
      _tl_restart(tconn, what);
#line 1233
      __constr_expr_0.ldv_40604.role = (unsigned char)0;
#line 1233
      __constr_expr_0.ldv_40604.peer = (unsigned char)0;
#line 1233
      __constr_expr_0.ldv_40604.conn = (unsigned char)0;
#line 1233
      __constr_expr_0.ldv_40604.disk = (unsigned char)0;
#line 1233
      __constr_expr_0.ldv_40604.pdsk = (unsigned char)0;
#line 1233
      __constr_expr_0.ldv_40604.susp = (unsigned char)0;
#line 1233
      __constr_expr_0.ldv_40604.aftr_isp = (unsigned char)0;
#line 1233
      __constr_expr_0.ldv_40604.peer_isp = (unsigned char)0;
#line 1233
      __constr_expr_0.ldv_40604.user_isp = (unsigned char)0;
#line 1233
      __constr_expr_0.ldv_40604.susp_nod = 0U;
#line 1233
      __constr_expr_0.ldv_40604.susp_fen = (unsigned char)0;
#line 1233
      __constr_expr_0.ldv_40604._pad = (unsigned short)0;
#line 1233
      __constr_expr_1.ldv_40604.role = (unsigned char)0;
#line 1233
      __constr_expr_1.ldv_40604.peer = (unsigned char)0;
#line 1233
      __constr_expr_1.ldv_40604.conn = (unsigned char)0;
#line 1233
      __constr_expr_1.ldv_40604.disk = (unsigned char)0;
#line 1233
      __constr_expr_1.ldv_40604.pdsk = (unsigned char)0;
#line 1233
      __constr_expr_1.ldv_40604.susp = (unsigned char)0;
#line 1233
      __constr_expr_1.ldv_40604.aftr_isp = (unsigned char)0;
#line 1233
      __constr_expr_1.ldv_40604.peer_isp = (unsigned char)0;
#line 1233
      __constr_expr_1.ldv_40604.user_isp = (unsigned char)0;
#line 1233
      __constr_expr_1.ldv_40604.susp_nod = 1U;
#line 1233
      __constr_expr_1.ldv_40604.susp_fen = (unsigned char)0;
#line 1233
      __constr_expr_1.ldv_40604._pad = (unsigned short)0;
#line 1233
      _conn_request_state(tconn, __constr_expr_1, __constr_expr_0, CS_VERBOSE);
    } else {

    }
#line 1238
    spin_unlock_irq(& tconn->req_lock);
  } else {

  }
#line 1241
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1242
    tconn___0 = mdev->tconn;
#line 1244
    spin_lock_irq(& tconn___0->req_lock);
#line 1245
    if ((unsigned int )*((unsigned char *)tconn___0 + 132UL) != 0U) {
#line 1245
      tmp___3 = conn_lowest_conn(tconn___0);
#line 1245
      if ((unsigned int )tmp___3 > 9U) {
#line 1250
        rcu_read_lock();
#line 1251
        vnr = 0;
#line 1251
        tmp___1 = idr_get_next(& tconn___0->volumes, & vnr);
#line 1251
        odev = (struct drbd_conf *)tmp___1;
#line 1251
        goto ldv_52172;
        ldv_52171: 
#line 1252
        clear_bit(17, (unsigned long volatile   *)(& odev->flags));
#line 1251
        vnr = vnr + 1;
#line 1251
        tmp___2 = idr_get_next(& tconn___0->volumes, & vnr);
#line 1251
        odev = (struct drbd_conf *)tmp___2;
        ldv_52172: ;
#line 1251
        if ((unsigned long )odev != (unsigned long )((struct drbd_conf *)0)) {
#line 1252
          goto ldv_52171;
        } else {

        }
#line 1253
        rcu_read_unlock();
#line 1254
        _tl_restart(tconn___0, RESEND);
#line 1255
        __constr_expr_2.ldv_40604.role = (unsigned char)0;
#line 1255
        __constr_expr_2.ldv_40604.peer = (unsigned char)0;
#line 1255
        __constr_expr_2.ldv_40604.conn = (unsigned char)0;
#line 1255
        __constr_expr_2.ldv_40604.disk = (unsigned char)0;
#line 1255
        __constr_expr_2.ldv_40604.pdsk = (unsigned char)0;
#line 1255
        __constr_expr_2.ldv_40604.susp = (unsigned char)0;
#line 1255
        __constr_expr_2.ldv_40604.aftr_isp = (unsigned char)0;
#line 1255
        __constr_expr_2.ldv_40604.peer_isp = (unsigned char)0;
#line 1255
        __constr_expr_2.ldv_40604.user_isp = (unsigned char)0;
#line 1255
        __constr_expr_2.ldv_40604.susp_nod = (unsigned char)0;
#line 1255
        __constr_expr_2.ldv_40604.susp_fen = 0U;
#line 1255
        __constr_expr_2.ldv_40604._pad = (unsigned short)0;
#line 1255
        __constr_expr_3.ldv_40604.role = (unsigned char)0;
#line 1255
        __constr_expr_3.ldv_40604.peer = (unsigned char)0;
#line 1255
        __constr_expr_3.ldv_40604.conn = (unsigned char)0;
#line 1255
        __constr_expr_3.ldv_40604.disk = (unsigned char)0;
#line 1255
        __constr_expr_3.ldv_40604.pdsk = (unsigned char)0;
#line 1255
        __constr_expr_3.ldv_40604.susp = (unsigned char)0;
#line 1255
        __constr_expr_3.ldv_40604.aftr_isp = (unsigned char)0;
#line 1255
        __constr_expr_3.ldv_40604.peer_isp = (unsigned char)0;
#line 1255
        __constr_expr_3.ldv_40604.user_isp = (unsigned char)0;
#line 1255
        __constr_expr_3.ldv_40604.susp_nod = (unsigned char)0;
#line 1255
        __constr_expr_3.ldv_40604.susp_fen = 1U;
#line 1255
        __constr_expr_3.ldv_40604._pad = (unsigned short)0;
#line 1255
        _conn_request_state(tconn___0, __constr_expr_3, __constr_expr_2, CS_VERBOSE);
      } else {

      }
    } else {

    }
#line 1260
    spin_unlock_irq(& tconn___0->req_lock);
  } else {

  }
#line 1267
  if ((((unsigned int )*((unsigned short *)(& os) + 0UL) != 256U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) && (mdev->tconn)->agreed_pro_version > 95) {
#line 1267
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1267
    if (tmp___4 != 0) {
#line 1270
      drbd_gen_and_send_sync_uuid(mdev);
#line 1271
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1275
  if ((*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_40604.pdsk > 0) && *((unsigned int *)(& ns) + 0UL) != 49152U) {
#line 1279
    mdev->rs_total = 0UL;
#line 1280
    mdev->rs_failed = 0UL;
#line 1281
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1282
    drbd_rs_cancel_all(mdev);
#line 1284
    drbd_send_uuids(mdev);
#line 1285
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1290
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned short *)mdev + 374UL) == 208U) {
#line 1292
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1297
  if ((((int )os.ldv_40604.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_40604.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1303
    tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1303
    if (tmp___6 != 0) {
#line 1304
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_40604.disk > 7) {
#line 1306
        tmp___5 = drbd_suspended(mdev);
#line 1306
        if (tmp___5 != 0) {
#line 1307
          set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
        } else {
#line 1309
          drbd_uuid_new_current(mdev);
#line 1310
          drbd_send_uuids(mdev);
        }
      } else {

      }
#line 1313
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1317
  if ((int )ns.ldv_40604.pdsk <= 3) {
#line 1317
    tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1317
    if (tmp___7 != 0) {
#line 1318
      if ((((unsigned int )*((unsigned char *)(& os) + 0UL) == 8U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_40604.disk > 7) {
#line 1320
        drbd_uuid_new_current(mdev);
#line 1321
        drbd_send_uuids(mdev);
      } else {

      }
#line 1324
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1328
        drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote diskless peer",
                                   BM_LOCKED_SET_ALLOWED);
      } else {

      }
#line 1330
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1336
  if (((unsigned int )*((unsigned char *)(& os) + 0UL) == 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) && (int )mdev->state.ldv_50103.conn <= 10) {
#line 1336
    tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1336
    if (tmp___8 != 0) {
#line 1340
      drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote", BM_LOCKED_TEST_ALLOWED);
#line 1342
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1346
  if (((int )ns.ldv_40604.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1348
    drbd_send_sizes(mdev, 0, 0);
#line 1349
    drbd_send_uuids(mdev);
#line 1350
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1354
  if ((int )ns.ldv_40604.conn > 9 && ((int )os.ldv_40604.aftr_isp != (int )ns.ldv_40604.aftr_isp || (int )os.ldv_40604.user_isp != (int )ns.ldv_40604.user_isp)) {
#line 1357
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1360
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1362
    suspend_other_sg(mdev);
  } else {

  }
#line 1366
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_40604.conn > 9) {
#line 1367
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1369
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 352U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 352U) {
#line 1370
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1373
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1376
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1381
  if ((((int )os.ldv_40604.conn <= 9 && (int )ns.ldv_40604.conn <= 9) && (int )os.ldv_40604.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1384
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate",
                         BM_LOCKED_MASK);
  } else {

  }
#line 1389
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1390
    eh = EP_PASS_ON;
#line 1391
    was_io_error = 0;
#line 1396
    if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1397
      rcu_read_lock();
#line 1398
      _________p1 = *((struct disk_conf * volatile  *)(& (mdev->ldev)->disk_conf));
#line 1398
      tmp___9 = debug_lockdep_rcu_enabled();
#line 1398
      if (tmp___9 != 0 && ! __warned) {
#line 1398
        tmp___10 = rcu_read_lock_held();
#line 1398
        if (tmp___10 == 0 && 1) {
#line 1398
          __warned = 1;
#line 1398
          lockdep_rcu_suspicious("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared",
                                 1398, "suspicious rcu_dereference_check() usage");
        } else {

        }
      } else {

      }
#line 1398
      eh = (enum drbd_io_error_p )_________p1->on_io_error;
#line 1399
      rcu_read_unlock();
#line 1401
      was_io_error = test_and_clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 1403
      if (was_io_error != 0 && (unsigned int )eh == 1U) {
#line 1404
        drbd_khelper(mdev, (char *)"local-io-error");
      } else {

      }
#line 1419
      tmp___11 = test_and_clear_bit(14, (unsigned long volatile   *)(& mdev->flags));
#line 1419
      if (tmp___11 != 0) {
#line 1420
        tl_abort_disk_io(mdev);
      } else {

      }
#line 1425
      if ((unsigned int )*((unsigned char *)mdev + 749UL) != 4U) {
#line 1426
        tmp___12 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_50103.disk);
#line 1426
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s during detach\n",
                tmp___12);
      } else {

      }
#line 1430
      if ((int )ns.ldv_40604.conn > 9) {
#line 1431
        drbd_send_state(mdev, ns);
      } else {

      }
#line 1433
      drbd_rs_cancel_all(mdev);
#line 1438
      drbd_md_sync(mdev);
    } else {

    }
#line 1440
    put_ldev(mdev);
  } else {

  }
#line 1446
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1449
    if ((unsigned int )*((unsigned char *)mdev + 749UL) != 0U) {
#line 1450
      tmp___13 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_50103.disk);
#line 1450
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s while going diskless\n",
              tmp___13);
    } else {

    }
#line 1454
    if ((int )ns.ldv_40604.conn > 9) {
#line 1455
      drbd_send_state(mdev, ns);
    } else {

    }
#line 1458
    put_ldev(mdev);
  } else {

  }
#line 1462
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 16U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) && (int )ns.ldv_40604.conn > 9) {
#line 1463
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1466
  if ((int )ns.ldv_40604.disk > 3 && (int )ns.ldv_40604.pdsk > 3) {
#line 1466
    tmp___14 = test_and_clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 1466
    if (tmp___14 != 0) {
#line 1468
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1469
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1473
  if ((((int )os.ldv_40604.conn > 10 && (int )ns.ldv_40604.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1476
    resume_next_sg(mdev);
  } else {

  }
#line 1480
  if (((int )os.ldv_40604.disk <= 7 && (int )os.ldv_40604.conn > 15) && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1481
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1486
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1486
    tmp___15 = verify_can_do_stop_sector(mdev);
#line 1486
    if ((int )tmp___15) {
#line 1488
      drbd_send_state(mdev, ns);
    } else {

    }
  } else {

  }
#line 1497
  if ((int )os.ldv_40604.conn > 10 && (int )ns.ldv_40604.conn <= 10) {
#line 1497
    tmp___16 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1497
    if (tmp___16 != 0) {
#line 1498
      drbd_queue_bitmap_io(mdev, & drbd_bm_write_copy_pages, 0, (char *)"write from resync_finished",
                           BM_IS_LOCKED);
#line 1500
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1503
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1506
    if ((int )os.ldv_40604.aftr_isp != (int )ns.ldv_40604.aftr_isp) {
#line 1507
      resume_next_sg(mdev);
    } else {

    }
  } else {

  }
#line 1510
  drbd_md_sync(mdev);
#line 1511
  return;
}
}
#line 1521 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static int w_after_conn_state_ch(struct drbd_work *w , int unused ) 
{ 
  struct after_conn_state_chg_work *acscw ;
  struct drbd_work  const  *__mptr ;
  struct drbd_tconn *tconn ;
  enum drbd_conns oc ;
  union drbd_state ns_max ;
  struct drbd_conf *mdev ;
  int vnr ;
  struct net_conf *old_conf ;
  void *tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  union drbd_state __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 1524
  __mptr = (struct drbd_work  const  *)w;
#line 1524
  acscw = (struct after_conn_state_chg_work *)__mptr;
#line 1525
  tconn = w->ldv_50388.tconn;
#line 1526
  oc = acscw->oc;
#line 1527
  ns_max = acscw->ns_max;
#line 1531
  kfree((void const   *)acscw);
#line 1534
  if ((unsigned int )oc == 0U && (unsigned int )*((unsigned short *)(& ns_max) + 0UL) == 32U) {
#line 1535
    drbd_thread_start(& tconn->receiver);
  } else {

  }
#line 1537
  if ((unsigned int )oc == 1U && (unsigned int )*((unsigned short *)(& ns_max) + 0UL) == 0U) {
#line 1540
    mutex_lock_nested(& tconn->conf_update, 0U);
#line 1541
    old_conf = tconn->net_conf;
#line 1542
    tconn->my_addr_len = 0;
#line 1543
    tconn->peer_addr_len = 0;
#line 1544
    __asm__  volatile   ("": : : "memory");
#line 1544
    tconn->net_conf = 0;
#line 1545
    conn_free_crypto(tconn);
#line 1546
    mutex_unlock(& tconn->conf_update);
#line 1548
    synchronize_rcu();
#line 1549
    kfree((void const   *)old_conf);
  } else {

  }
#line 1552
  if ((unsigned int )*((unsigned char *)(& ns_max) + 2UL) != 0U) {
#line 1554
    if ((int )ns_max.ldv_40604.pdsk <= 5) {
#line 1555
      rcu_read_lock();
#line 1556
      vnr = 0;
#line 1556
      tmp = idr_get_next(& tconn->volumes, & vnr);
#line 1556
      mdev = (struct drbd_conf *)tmp;
#line 1556
      goto ldv_52201;
      ldv_52200: 
#line 1557
      tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 1557
      if (tmp___0 != 0) {
#line 1558
        drbd_uuid_new_current(mdev);
#line 1559
        clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 1556
      vnr = vnr + 1;
#line 1556
      tmp___1 = idr_get_next(& tconn->volumes, & vnr);
#line 1556
      mdev = (struct drbd_conf *)tmp___1;
      ldv_52201: ;
#line 1556
      if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 1557
        goto ldv_52200;
      } else {

      }
#line 1562
      rcu_read_unlock();
#line 1563
      spin_lock_irq(& tconn->req_lock);
#line 1564
      _tl_restart(tconn, CONNECTION_LOST_WHILE_PENDING);
#line 1565
      __constr_expr_0.ldv_40604.role = (unsigned char)0;
#line 1565
      __constr_expr_0.ldv_40604.peer = (unsigned char)0;
#line 1565
      __constr_expr_0.ldv_40604.conn = (unsigned char)0;
#line 1565
      __constr_expr_0.ldv_40604.disk = (unsigned char)0;
#line 1565
      __constr_expr_0.ldv_40604.pdsk = (unsigned char)0;
#line 1565
      __constr_expr_0.ldv_40604.susp = (unsigned char)0;
#line 1565
      __constr_expr_0.ldv_40604.aftr_isp = (unsigned char)0;
#line 1565
      __constr_expr_0.ldv_40604.peer_isp = (unsigned char)0;
#line 1565
      __constr_expr_0.ldv_40604.user_isp = (unsigned char)0;
#line 1565
      __constr_expr_0.ldv_40604.susp_nod = (unsigned char)0;
#line 1565
      __constr_expr_0.ldv_40604.susp_fen = 0U;
#line 1565
      __constr_expr_0.ldv_40604._pad = (unsigned short)0;
#line 1565
      __constr_expr_1.ldv_40604.role = (unsigned char)0;
#line 1565
      __constr_expr_1.ldv_40604.peer = (unsigned char)0;
#line 1565
      __constr_expr_1.ldv_40604.conn = (unsigned char)0;
#line 1565
      __constr_expr_1.ldv_40604.disk = (unsigned char)0;
#line 1565
      __constr_expr_1.ldv_40604.pdsk = (unsigned char)0;
#line 1565
      __constr_expr_1.ldv_40604.susp = (unsigned char)0;
#line 1565
      __constr_expr_1.ldv_40604.aftr_isp = (unsigned char)0;
#line 1565
      __constr_expr_1.ldv_40604.peer_isp = (unsigned char)0;
#line 1565
      __constr_expr_1.ldv_40604.user_isp = (unsigned char)0;
#line 1565
      __constr_expr_1.ldv_40604.susp_nod = (unsigned char)0;
#line 1565
      __constr_expr_1.ldv_40604.susp_fen = 1U;
#line 1565
      __constr_expr_1.ldv_40604._pad = (unsigned short)0;
#line 1565
      _conn_request_state(tconn, __constr_expr_1, __constr_expr_0, CS_VERBOSE);
#line 1569
      spin_unlock_irq(& tconn->req_lock);
    } else {

    }
  } else {

  }
#line 1572
  kref_put(& tconn->kref, & conn_destroy);
#line 1574
  conn_md_sync(tconn);
#line 1576
  return (0);
}
}
#line 1579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
void conn_old_common_state(struct drbd_tconn *tconn , union drbd_state *pcs , enum chg_state_flags *pf ) 
{ 
  enum chg_state_flags flags ;
  struct drbd_conf *mdev ;
  int vnr ;
  int first_vol ;
  union drbd_dev_state os ;
  union drbd_dev_state cs ;
  void *tmp ;
  void *tmp___0 ;

  {
#line 1581
  flags = 4294967295L;
#line 1583
  first_vol = 1;
#line 1584
  cs.ldv_50103.role = 2U;
#line 1584
  cs.ldv_50103.peer = 0U;
#line 1584
  cs.ldv_50103.conn = (unsigned char )tconn->cstate;
#line 1584
  cs.ldv_50103.disk = 0U;
#line 1584
  cs.ldv_50103.pdsk = 6U;
#line 1584
  cs.ldv_50103._unused = (unsigned char)0;
#line 1584
  cs.ldv_50103.aftr_isp = (unsigned char)0;
#line 1584
  cs.ldv_50103.peer_isp = (unsigned char)0;
#line 1584
  cs.ldv_50103.user_isp = (unsigned char)0;
#line 1584
  cs.ldv_50103._pad = (unsigned short)0;
#line 1592
  rcu_read_lock();
#line 1593
  vnr = 0;
#line 1593
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 1593
  mdev = (struct drbd_conf *)tmp;
#line 1593
  goto ldv_52218;
  ldv_52217: 
#line 1594
  os = mdev->state;
#line 1596
  if (first_vol != 0) {
#line 1597
    cs = os;
#line 1598
    first_vol = 0;
#line 1599
    goto ldv_52216;
  } else {

  }
#line 1602
  if ((int )cs.ldv_50103.role != (int )os.ldv_50103.role) {
#line 1603
    flags = (enum chg_state_flags )((unsigned int )flags & 4294967263U);
  } else {

  }
#line 1605
  if ((int )cs.ldv_50103.peer != (int )os.ldv_50103.peer) {
#line 1606
    flags = (enum chg_state_flags )((unsigned int )flags & 4294967231U);
  } else {

  }
#line 1608
  if ((int )cs.ldv_50103.conn != (int )os.ldv_50103.conn) {
#line 1609
    flags = (enum chg_state_flags )((unsigned int )flags & 4294967167U);
  } else {

  }
#line 1611
  if ((int )cs.ldv_50103.disk != (int )os.ldv_50103.disk) {
#line 1612
    flags = (enum chg_state_flags )((unsigned int )flags & 4294967039U);
  } else {

  }
#line 1614
  if ((int )cs.ldv_50103.pdsk != (int )os.ldv_50103.pdsk) {
#line 1615
    flags = (enum chg_state_flags )((unsigned int )flags & 4294966783U);
  } else {

  }
  ldv_52216: 
#line 1593
  vnr = vnr + 1;
#line 1593
  tmp___0 = idr_get_next(& tconn->volumes, & vnr);
#line 1593
  mdev = (struct drbd_conf *)tmp___0;
  ldv_52218: ;
#line 1593
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 1594
    goto ldv_52217;
  } else {

  }
#line 1617
  rcu_read_unlock();
#line 1619
  *pf = (enum chg_state_flags )((unsigned int )*pf | 992U);
#line 1620
  *pf = (enum chg_state_flags )((unsigned int )*pf & (unsigned int )flags);
#line 1621
  pcs->i = cs.i;
#line 1622
  return;
}
}
#line 1625 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static enum drbd_state_rv conn_is_valid_transition(struct drbd_tconn *tconn , union drbd_state mask ,
                                                   union drbd_state val , enum chg_state_flags flags ) 
{ 
  enum drbd_state_rv rv ;
  union drbd_state ns ;
  union drbd_state os ;
  struct drbd_conf *mdev ;
  int vnr ;
  void *tmp ;
  union drbd_state tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  void *tmp___2 ;

  {
#line 1628
  rv = 1;
#line 1633
  rcu_read_lock();
#line 1634
  vnr = 0;
#line 1634
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 1634
  mdev = (struct drbd_conf *)tmp;
#line 1634
  goto ldv_52234;
  ldv_52233: 
#line 1635
  os = drbd_read_state(mdev);
#line 1636
  tmp___0 = apply_mask_val(os, mask, val);
#line 1636
  ns = sanitize_state(mdev, tmp___0, 0);
#line 1638
  if ((((unsigned int )flags & 2048U) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) && (int )os.ldv_40604.disk <= 4) {
#line 1639
    ns.ldv_40604.disk = os.ldv_40604.disk;
  } else {

  }
#line 1641
  if (ns.i == os.i) {
#line 1642
    goto ldv_52231;
  } else {

  }
#line 1644
  rv = is_valid_transition(os, ns);
#line 1645
  if ((int )rv <= 0) {
#line 1646
    goto ldv_52232;
  } else {

  }
#line 1648
  if (((unsigned int )flags & 1U) == 0U) {
#line 1649
    rv = is_valid_state(mdev, ns);
#line 1650
    if ((int )rv <= 0) {
#line 1651
      tmp___1 = is_valid_state(mdev, os);
#line 1651
      if ((int )tmp___1 == (int )rv) {
#line 1652
        rv = is_valid_soft_transition(os, ns, tconn);
      } else {
#line 1654
        rv = is_valid_soft_transition(os, ns, tconn);
      }
    } else {

    }
  } else {

  }
#line 1656
  if ((int )rv <= 0) {
#line 1657
    goto ldv_52232;
  } else {

  }
  ldv_52231: 
#line 1634
  vnr = vnr + 1;
#line 1634
  tmp___2 = idr_get_next(& tconn->volumes, & vnr);
#line 1634
  mdev = (struct drbd_conf *)tmp___2;
  ldv_52234: ;
#line 1634
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 1635
    goto ldv_52233;
  } else {

  }
  ldv_52232: 
#line 1659
  rcu_read_unlock();
#line 1661
  if ((int )rv <= 0 && ((unsigned int )flags & 2U) != 0U) {
#line 1662
    print_st_err(mdev, os, ns, rv);
  } else {

  }
#line 1664
  return (rv);
}
}
#line 1668 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
void conn_set_state(struct drbd_tconn *tconn , union drbd_state mask , union drbd_state val ,
                    union drbd_state *pns_min , union drbd_state *pns_max , enum chg_state_flags flags ) 
{ 
  union drbd_state ns ;
  union drbd_state os ;
  union drbd_state ns_max ;
  union drbd_state ns_min ;
  struct drbd_conf *mdev ;
  enum drbd_state_rv rv ;
  int vnr ;
  int number_of_volumes ;
  void *tmp ;
  enum drbd_role tmp___0 ;
  enum drbd_role tmp___1 ;
  enum drbd_conns __max1 ;
  enum drbd_conns __max2 ;
  enum drbd_disk_state __max1___0 ;
  enum drbd_disk_state __max2___0 ;
  enum drbd_disk_state __max1___1 ;
  enum drbd_disk_state __max2___1 ;
  enum drbd_role tmp___2 ;
  enum drbd_role tmp___3 ;
  enum drbd_conns __min1 ;
  enum drbd_conns __min2 ;
  enum drbd_disk_state __min1___0 ;
  enum drbd_disk_state __min2___0 ;
  enum drbd_disk_state __min1___1 ;
  enum drbd_disk_state __min2___1 ;
  void *tmp___4 ;
  union drbd_state __constr_expr_0 ;

  {
#line 1671
  ns_max.ldv_40604.role = (unsigned char)0;
#line 1671
  ns_max.ldv_40604.peer = (unsigned char)0;
#line 1671
  ns_max.ldv_40604.conn = (unsigned char)0;
#line 1671
  ns_max.ldv_40604.disk = (unsigned char)0;
#line 1671
  ns_max.ldv_40604.pdsk = (unsigned char)0;
#line 1671
  ns_max.ldv_40604.susp = (unsigned char)0;
#line 1671
  ns_max.ldv_40604.aftr_isp = (unsigned char)0;
#line 1671
  ns_max.ldv_40604.peer_isp = (unsigned char)0;
#line 1671
  ns_max.ldv_40604.user_isp = (unsigned char)0;
#line 1671
  ns_max.ldv_40604.susp_nod = (unsigned char)0;
#line 1671
  ns_max.ldv_40604.susp_fen = (unsigned char)0;
#line 1671
  ns_max.ldv_40604._pad = (unsigned short)0;
#line 1672
  ns_min.ldv_40604.role = 3U;
#line 1672
  ns_min.ldv_40604.peer = 3U;
#line 1672
  ns_min.ldv_40604.conn = val.ldv_40604.conn;
#line 1672
  ns_min.ldv_40604.disk = 15U;
#line 1672
  ns_min.ldv_40604.pdsk = 15U;
#line 1672
  ns_min.ldv_40604.susp = (unsigned char)0;
#line 1672
  ns_min.ldv_40604.aftr_isp = (unsigned char)0;
#line 1672
  ns_min.ldv_40604.peer_isp = (unsigned char)0;
#line 1672
  ns_min.ldv_40604.user_isp = (unsigned char)0;
#line 1672
  ns_min.ldv_40604.susp_nod = (unsigned char)0;
#line 1672
  ns_min.ldv_40604.susp_fen = (unsigned char)0;
#line 1672
  ns_min.ldv_40604._pad = (unsigned short)0;
#line 1681
  number_of_volumes = 0;
#line 1683
  if ((unsigned int )*((unsigned short *)(& mask) + 0UL) == 496U) {
#line 1687
    if ((unsigned int )tconn->cstate != 9U && (unsigned int )*((unsigned short *)(& val) + 0UL) == 144U) {
#line 1688
      tconn->last_reconnect_jif = jiffies;
    } else {

    }
#line 1690
    tconn->cstate = (enum drbd_conns )val.ldv_40604.conn;
  } else {

  }
#line 1693
  rcu_read_lock();
#line 1694
  vnr = 0;
#line 1694
  tmp = idr_get_next(& tconn->volumes, & vnr);
#line 1694
  mdev = (struct drbd_conf *)tmp;
#line 1694
  goto ldv_52271;
  ldv_52270: 
#line 1695
  number_of_volumes = number_of_volumes + 1;
#line 1696
  os = drbd_read_state(mdev);
#line 1697
  ns = apply_mask_val(os, mask, val);
#line 1698
  ns = sanitize_state(mdev, ns, 0);
#line 1700
  if ((((unsigned int )flags & 2048U) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) && (int )os.ldv_40604.disk <= 4) {
#line 1701
    ns.ldv_40604.disk = os.ldv_40604.disk;
  } else {

  }
#line 1703
  rv = __drbd_set_state(mdev, ns, flags, 0);
#line 1704
  if ((int )rv <= 0) {
#line 1705
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"),
                         "i" (1705), "i" (12UL));
    ldv_52251: ;
#line 1705
    goto ldv_52251;
  } else {

  }
#line 1707
  ns.i = mdev->state.i;
#line 1708
  tmp___0 = max_role((enum drbd_role )ns.ldv_40604.role, (enum drbd_role )ns_max.ldv_40604.role);
#line 1708
  ns_max.ldv_40604.role = (unsigned char )tmp___0;
#line 1709
  tmp___1 = max_role((enum drbd_role )ns.ldv_40604.peer, (enum drbd_role )ns_max.ldv_40604.peer);
#line 1709
  ns_max.ldv_40604.peer = (unsigned char )tmp___1;
#line 1710
  __max1 = (enum drbd_conns )ns.ldv_40604.conn;
#line 1710
  __max2 = (enum drbd_conns )ns_max.ldv_40604.conn;
#line 1710
  ns_max.ldv_40604.conn = (unsigned char )((unsigned int )__max1 > (unsigned int )__max2 ? (unsigned int )__max1 : (unsigned int )__max2);
#line 1711
  __max1___0 = (enum drbd_disk_state )ns.ldv_40604.disk;
#line 1711
  __max2___0 = (enum drbd_disk_state )ns_max.ldv_40604.disk;
#line 1711
  ns_max.ldv_40604.disk = (unsigned char )((unsigned int )__max1___0 > (unsigned int )__max2___0 ? (unsigned int )__max1___0 : (unsigned int )__max2___0);
#line 1712
  __max1___1 = (enum drbd_disk_state )ns.ldv_40604.pdsk;
#line 1712
  __max2___1 = (enum drbd_disk_state )ns_max.ldv_40604.pdsk;
#line 1712
  ns_max.ldv_40604.pdsk = (unsigned char )((unsigned int )__max1___1 > (unsigned int )__max2___1 ? (unsigned int )__max1___1 : (unsigned int )__max2___1);
#line 1714
  tmp___2 = min_role((enum drbd_role )ns.ldv_40604.role, (enum drbd_role )ns_min.ldv_40604.role);
#line 1714
  ns_min.ldv_40604.role = (unsigned char )tmp___2;
#line 1715
  tmp___3 = min_role((enum drbd_role )ns.ldv_40604.peer, (enum drbd_role )ns_min.ldv_40604.peer);
#line 1715
  ns_min.ldv_40604.peer = (unsigned char )tmp___3;
#line 1716
  __min1 = (enum drbd_conns )ns.ldv_40604.conn;
#line 1716
  __min2 = (enum drbd_conns )ns_min.ldv_40604.conn;
#line 1716
  ns_min.ldv_40604.conn = (unsigned char )((unsigned int )__min1 < (unsigned int )__min2 ? (unsigned int )__min1 : (unsigned int )__min2);
#line 1717
  __min1___0 = (enum drbd_disk_state )ns.ldv_40604.disk;
#line 1717
  __min2___0 = (enum drbd_disk_state )ns_min.ldv_40604.disk;
#line 1717
  ns_min.ldv_40604.disk = (unsigned char )((unsigned int )__min1___0 < (unsigned int )__min2___0 ? (unsigned int )__min1___0 : (unsigned int )__min2___0);
#line 1718
  __min1___1 = (enum drbd_disk_state )ns.ldv_40604.pdsk;
#line 1718
  __min2___1 = (enum drbd_disk_state )ns_min.ldv_40604.pdsk;
#line 1718
  ns_min.ldv_40604.pdsk = (unsigned char )((unsigned int )__min1___1 < (unsigned int )__min2___1 ? (unsigned int )__min1___1 : (unsigned int )__min2___1);
#line 1694
  vnr = vnr + 1;
#line 1694
  tmp___4 = idr_get_next(& tconn->volumes, & vnr);
#line 1694
  mdev = (struct drbd_conf *)tmp___4;
  ldv_52271: ;
#line 1694
  if ((unsigned long )mdev != (unsigned long )((struct drbd_conf *)0)) {
#line 1695
    goto ldv_52270;
  } else {

  }
#line 1720
  rcu_read_unlock();
#line 1722
  if (number_of_volumes == 0) {
#line 1723
    __constr_expr_0.ldv_40604.role = 2U;
#line 1723
    __constr_expr_0.ldv_40604.peer = 0U;
#line 1723
    __constr_expr_0.ldv_40604.conn = val.ldv_40604.conn;
#line 1723
    __constr_expr_0.ldv_40604.disk = 0U;
#line 1723
    __constr_expr_0.ldv_40604.pdsk = 6U;
#line 1723
    __constr_expr_0.ldv_40604.susp = (unsigned char)0;
#line 1723
    __constr_expr_0.ldv_40604.aftr_isp = (unsigned char)0;
#line 1723
    __constr_expr_0.ldv_40604.peer_isp = (unsigned char)0;
#line 1723
    __constr_expr_0.ldv_40604.user_isp = (unsigned char)0;
#line 1723
    __constr_expr_0.ldv_40604.susp_nod = (unsigned char)0;
#line 1723
    __constr_expr_0.ldv_40604.susp_fen = (unsigned char)0;
#line 1723
    __constr_expr_0.ldv_40604._pad = (unsigned short)0;
#line 1723
    ns_max = __constr_expr_0;
#line 1723
    ns_min = ns_max;
  } else {

  }
#line 1732
  ns_max.ldv_40604.susp = tconn->susp;
#line 1732
  ns_min.ldv_40604.susp = ns_max.ldv_40604.susp;
#line 1733
  ns_max.ldv_40604.susp_nod = tconn->susp_nod;
#line 1733
  ns_min.ldv_40604.susp_nod = ns_max.ldv_40604.susp_nod;
#line 1734
  ns_max.ldv_40604.susp_fen = tconn->susp_fen;
#line 1734
  ns_min.ldv_40604.susp_fen = ns_max.ldv_40604.susp_fen;
#line 1736
  *pns_min = ns_min;
#line 1737
  *pns_max = ns_max;
#line 1738
  return;
}
}
#line 1741 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
static enum drbd_state_rv _conn_rq_cond(struct drbd_tconn *tconn , union drbd_state mask ,
                                        union drbd_state val ) 
{ 
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 1745
  tmp = test_and_clear_bit(6, (unsigned long volatile   *)(& tconn->flags));
#line 1745
  if (tmp != 0) {
#line 1746
    return (SS_CW_SUCCESS);
  } else {

  }
#line 1748
  tmp___0 = test_and_clear_bit(7, (unsigned long volatile   *)(& tconn->flags));
#line 1748
  if (tmp___0 != 0) {
#line 1749
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 1751
  rv = (unsigned int )tconn->cstate != 9U ? SS_CW_NO_NEED : SS_UNKNOWN_ERROR;
#line 1753
  if ((int )rv == 0) {
#line 1754
    rv = conn_is_valid_transition(tconn, mask, val, 0);
  } else {

  }
#line 1756
  if ((int )rv == 1) {
#line 1757
    rv = SS_UNKNOWN_ERROR;
  } else {

  }
#line 1759
  return (rv);
}
}
#line 1763 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
enum drbd_state_rv _conn_request_state(struct drbd_tconn *tconn , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags flags ) 
{ 
  enum drbd_state_rv rv ;
  struct after_conn_state_chg_work *acscw ;
  enum drbd_conns oc ;
  union drbd_state ns_max ;
  union drbd_state ns_min ;
  union drbd_state os ;
  bool have_mutex ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  long volatile   __ret ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  struct task_struct *tmp___4 ;
  struct task_struct *tmp___5 ;
  void *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 1766
  rv = 1;
#line 1768
  oc = tconn->cstate;
#line 1770
  have_mutex = 0;
#line 1772
  if ((unsigned int )*((unsigned short *)(& mask) + 0UL) != 0U) {
#line 1773
    rv = is_valid_conn_transition(oc, (enum drbd_conns )val.ldv_40604.conn);
#line 1774
    if ((int )rv <= 0) {
#line 1775
      goto abort;
    } else {

    }
  } else {

  }
#line 1778
  rv = conn_is_valid_transition(tconn, mask, val, flags);
#line 1779
  if ((int )rv <= 0) {
#line 1780
    goto abort;
  } else {

  }
#line 1782
  if (((unsigned int )oc == 9U && (unsigned int )*((unsigned short *)(& val) + 0UL) == 16U) && ((unsigned int )flags & 17U) == 0U) {
#line 1788
    spin_unlock_irq(& tconn->req_lock);
#line 1789
    mutex_lock_nested(& tconn->cstate_mutex, 0U);
#line 1790
    have_mutex = 1;
#line 1792
    set_bit(5U, (unsigned long volatile   *)(& tconn->flags));
#line 1793
    tmp = conn_send_state_req(tconn, mask, val);
#line 1793
    if (tmp != 0) {
#line 1795
      clear_bit(5, (unsigned long volatile   *)(& tconn->flags));
#line 1796
      rv = SS_CW_FAILED_BY_PEER;
#line 1798
      goto abort_unlocked;
    } else {

    }
#line 1801
    if ((unsigned int )*((unsigned short *)(& val) + 0UL) == 16U) {
#line 1802
      set_bit(12U, (unsigned long volatile   *)(& tconn->flags));
    } else {

    }
#line 1807
    spin_lock_irq(& tconn->req_lock);
#line 1808
    rv = _conn_rq_cond(tconn, mask, val);
#line 1808
    if ((int )rv != 0) {
#line 1808
      goto ldv_52295;
    } else {

    }
#line 1808
    tmp___0 = get_current();
#line 1808
    init_waitqueue_entry(& __wait, tmp___0);
#line 1808
    add_wait_queue(& tconn->ping_wait, & __wait);
    ldv_52306: 
#line 1808
    __ret = 2L;
#line 1808
    switch (8UL) {
    case 1UL: 
#line 1808
    tmp___1 = get_current();
#line 1808
    __asm__  volatile   ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___1->state): : "memory",
                         "cc");
#line 1808
    goto ldv_52299;
    case 2UL: 
#line 1808
    tmp___2 = get_current();
#line 1808
    __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___2->state): : "memory",
                         "cc");
#line 1808
    goto ldv_52299;
    case 4UL: 
#line 1808
    tmp___3 = get_current();
#line 1808
    __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___3->state): : "memory",
                         "cc");
#line 1808
    goto ldv_52299;
    case 8UL: 
#line 1808
    tmp___4 = get_current();
#line 1808
    __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___4->state): : "memory",
                         "cc");
#line 1808
    goto ldv_52299;
    default: 
#line 1808
    __xchg_wrong_size();
    }
    ldv_52299: 
#line 1808
    rv = _conn_rq_cond(tconn, mask, val);
#line 1808
    if ((int )rv != 0) {
#line 1808
      goto ldv_52305;
    } else {

    }
#line 1808
    spin_unlock_irq(& tconn->req_lock);
#line 1808
    schedule();
#line 1808
    spin_lock_irq(& tconn->req_lock);
#line 1808
    goto ldv_52306;
    ldv_52305: 
#line 1808
    tmp___5 = get_current();
#line 1808
    tmp___5->state = 0L;
#line 1808
    remove_wait_queue(& tconn->ping_wait, & __wait);
    ldv_52295: 
#line 1812
    clear_bit(5, (unsigned long volatile   *)(& tconn->flags));
#line 1813
    if ((int )rv <= 0) {
#line 1814
      goto abort;
    } else {

    }
  } else {

  }
#line 1817
  conn_old_common_state(tconn, & os, & flags);
#line 1818
  flags = (enum chg_state_flags )((unsigned int )flags | 1024U);
#line 1819
  conn_set_state(tconn, mask, val, & ns_min, & ns_max, flags);
#line 1820
  conn_pr_state_change(tconn, os, ns_max, flags);
#line 1822
  tmp___6 = kmalloc(48UL, 32U);
#line 1822
  acscw = (struct after_conn_state_chg_work *)tmp___6;
#line 1823
  if ((unsigned long )acscw != (unsigned long )((struct after_conn_state_chg_work *)0)) {
#line 1824
    acscw->oc = (enum drbd_conns )os.ldv_40604.conn;
#line 1825
    acscw->ns_min = ns_min;
#line 1826
    acscw->ns_max = ns_max;
#line 1827
    acscw->flags = flags;
#line 1828
    acscw->w.cb = & w_after_conn_state_ch;
#line 1829
    kref_get(& tconn->kref);
#line 1830
    acscw->w.ldv_50388.tconn = tconn;
#line 1831
    drbd_queue_work(& tconn->sender_work, & acscw->w);
  } else {
#line 1833
    printk("\vd-con %s: Could not kmalloc an acscw\n", tconn->name);
  }
  abort: ;
#line 1837
  if ((int )have_mutex) {
#line 1840
    spin_unlock_irq(& tconn->req_lock);
    abort_unlocked: 
#line 1842
    mutex_unlock(& tconn->cstate_mutex);
#line 1843
    spin_lock_irq(& tconn->req_lock);
  } else {

  }
#line 1845
  if ((int )rv <= 0 && ((unsigned int )flags & 2U) != 0U) {
#line 1846
    tmp___7 = drbd_set_st_err_str(rv);
#line 1846
    printk("\vd-con %s: State change failed: %s\n", tconn->name, tmp___7);
#line 1847
    printk("\vd-con %s:  mask = 0x%x val = 0x%x\n", tconn->name, mask.i, val.i);
#line 1848
    tmp___8 = drbd_conn_str((enum drbd_conns )val.ldv_40604.conn);
#line 1848
    tmp___9 = drbd_conn_str(oc);
#line 1848
    printk("\vd-con %s:  old_conn:%s wanted_conn:%s\n", tconn->name, tmp___9, tmp___8);
  } else {

  }
#line 1850
  return (rv);
}
}
#line 1854 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_state.c.prepared"
enum drbd_state_rv conn_request_state(struct drbd_tconn *tconn , union drbd_state mask ,
                                      union drbd_state val , enum chg_state_flags flags ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 1859
  spin_lock_irq(& tconn->req_lock);
#line 1860
  rv = _conn_request_state(tconn, mask, val, flags);
#line 1861
  spin_unlock_irq(& tconn->req_lock);
#line 1863
  return (rv);
}
}
#line 238 "include/net/netlink.h"
extern int nla_parse(struct nlattr ** , int  , struct nlattr  const  * , int  , struct nla_policy  const  * ) ;
#line 672 "include/net/netlink.h"
__inline static int nla_type(struct nlattr  const  *nla ) 
{ 


  {
#line 674
  return ((int )nla->nla_type & -49153);
}
}
#line 700 "include/net/netlink.h"
__inline static int nla_ok(struct nlattr  const  *nla , int remaining ) 
{ 


  {
#line 702
  return ((remaining > 3 && (unsigned int )((unsigned short )nla->nla_len) > 3U) && (int )nla->nla_len <= remaining);
}
}
#line 715 "include/net/netlink.h"
__inline static struct nlattr *nla_next(struct nlattr  const  *nla , int *remaining ) 
{ 
  int totlen ;

  {
#line 717
  totlen = ((int )nla->nla_len + 3) & -4;
#line 719
  *remaining = *remaining - totlen;
#line 720
  return ((struct nlattr *)nla + (unsigned long )totlen);
}
}
#line 731 "include/net/netlink.h"
__inline static struct nlattr *nla_find_nested(struct nlattr  const  *nla , int attrtype ) 
{ 
  int tmp ;
  void *tmp___0 ;
  struct nlattr *tmp___1 ;

  {
#line 733
  tmp = nla_len(nla);
#line 733
  tmp___0 = nla_data(nla);
#line 733
  tmp___1 = nla_find((struct nlattr  const  *)tmp___0, tmp, attrtype);
#line 733
  return (tmp___1);
}
}
#line 745 "include/net/netlink.h"
__inline static int nla_parse_nested(struct nlattr **tb , int maxtype , struct nlattr  const  *nla ,
                                     struct nla_policy  const  *policy ) 
{ 
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;

  {
#line 749
  tmp = nla_len(nla);
#line 749
  tmp___0 = nla_data(nla);
#line 749
  tmp___1 = nla_parse(tb, maxtype, (struct nlattr  const  *)tmp___0, tmp, policy);
#line 749
  return (tmp___1);
}
}
#line 14 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nla.c.prepared"
static int drbd_nla_check_mandatory(int maxtype , struct nlattr *nla ) 
{ 
  struct nlattr *head ;
  void *tmp ;
  int len ;
  int tmp___0 ;
  int rem ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 16
  tmp = nla_data((struct nlattr  const  *)nla);
#line 16
  head = (struct nlattr *)tmp;
#line 17
  tmp___0 = nla_len((struct nlattr  const  *)nla);
#line 17
  len = tmp___0;
#line 28
  nla = head;
#line 28
  rem = len;
#line 28
  goto ldv_51705;
  ldv_51704: ;
#line 29
  if (((int )nla->nla_type & 16384) != 0) {
#line 30
    nla->nla_type = (unsigned int )nla->nla_type & 49151U;
#line 31
    tmp___1 = nla_type((struct nlattr  const  *)nla);
#line 31
    if (tmp___1 > maxtype) {
#line 32
      return (-95);
    } else {

    }
  } else {

  }
#line 28
  nla = nla_next((struct nlattr  const  *)nla, & rem);
  ldv_51705: 
#line 28
  tmp___2 = nla_ok((struct nlattr  const  *)nla, rem);
#line 28
  if (tmp___2 != 0) {
#line 29
    goto ldv_51704;
  } else {

  }

#line 35
  return (0);
}
}
#line 38 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nla.c.prepared"
int drbd_nla_parse_nested(struct nlattr **tb , int maxtype , struct nlattr *nla ,
                          struct nla_policy  const  *policy ) 
{ 
  int err ;

  {
#line 43
  err = drbd_nla_check_mandatory(maxtype, nla);
#line 44
  if (err == 0) {
#line 45
    err = nla_parse_nested(tb, maxtype, (struct nlattr  const  *)nla, policy);
  } else {

  }
#line 47
  return (err);
}
}
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nla.c.prepared"
struct nlattr *drbd_nla_find_nested(int maxtype , struct nlattr *nla , int attrtype ) 
{ 
  int err ;
  void *tmp ;
  struct nlattr *tmp___0 ;

  {
#line 58
  err = drbd_nla_check_mandatory(maxtype, nla);
#line 59
  if (err != 0) {
#line 60
    tmp = ERR_PTR((long )err);
#line 60
    return ((struct nlattr *)tmp);
  } else {

  }
#line 61
  tmp___0 = nla_find_nested((struct nlattr  const  *)nla, attrtype);
#line 61
  return (tmp___0);
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/23/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
