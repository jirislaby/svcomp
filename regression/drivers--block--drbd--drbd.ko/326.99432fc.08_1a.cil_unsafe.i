/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 26 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 27 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 28 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 29 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 34 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 37 "include/linux/types.h"
typedef _Bool bool;
#line 39 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 40 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 53 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 62 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 67 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 77 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 110 "include/linux/types.h"
typedef __s32 int32_t;
#line 116 "include/linux/types.h"
typedef __u32 uint32_t;
#line 141 "include/linux/types.h"
typedef unsigned long sector_t;
#line 142 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 154 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 178 "include/linux/types.h"
typedef __u16 __be16;
#line 180 "include/linux/types.h"
typedef __u32 __be32;
#line 185 "include/linux/types.h"
typedef __u32 __wsum;
#line 201 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 202 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 214 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 214 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 219 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 219 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 220 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 225
struct hlist_node;
#line 225 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 229 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 240
struct task_struct;
#line 241
struct mm_struct;
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 145 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1204_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1204_8 ldv_1204 ;
};
#line 22 "include/linux/bitops.h"
struct module;
#line 12 "include/linux/dynamic_debug.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 24 ;
   unsigned char flags ;
   char enabled ;
};
#line 50 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 70 "include/asm-generic/bug.h"
struct completion;
#line 289 "include/linux/kernel.h"
struct pid;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 280
struct page;
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 288
struct file;
#line 301
struct seq_file;
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2215_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2230_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2231_14 {
   struct __anonstruct_ldv_2215_15 ldv_2215 ;
   struct __anonstruct_ldv_2230_16 ldv_2230 ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2231_14 ldv_2231 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_KDB = 19,
    KM_TYPE_NR = 20
} ;
#line 122
struct thread_struct;
#line 124
struct cpumask;
#line 320 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 607 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 271 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/msr.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 145 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 277 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4867_20 {
   u64 rip ;
   u64 rdp ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4873_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4874_19 {
   struct __anonstruct_ldv_4867_20 ldv_4867 ;
   struct __anonstruct_ldv_4873_21 ldv_4873 ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4883_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4874_19 ldv_4874 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4883_22 ldv_4883 ;
};
#line 329 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 367 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 375 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   union thread_xstate *state ;
};
#line 421
struct kmem_cache;
#line 422
struct perf_event;
#line 423 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 622 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 622 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_26 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_27 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_28 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_5373_25 {
   struct __anonstruct_futex_26 futex ;
   struct __anonstruct_nanosleep_27 nanosleep ;
   struct __anonstruct_poll_28 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5373_25 ldv_5373 ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "include/linux/bottom_half.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_29 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_29 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 187 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 549 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5955_31 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5956_30 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5955_31 ldv_5955 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5956_30 ldv_5956 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_32 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_32 rwlock_t;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_33 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_33 seqlock_t;
#line 112 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 123 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 235 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 285 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_34 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_34 nodemask_t;
#line 645 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 162
struct rw_semaphore;
#line 163 "include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 761 "include/linux/mmzone.h"
struct ctl_table;
#line 175 "include/linux/ioport.h"
struct device;
#line 312 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 99 "include/linux/debugobjects.h"
struct tvec_base;
#line 100 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 289 "include/linux/timer.h"
struct hrtimer;
#line 290
enum hrtimer_restart;
#line 302
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 443 "include/linux/workqueue.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 272
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 279
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 287
struct wakeup_source;
#line 288 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   unsigned char in_suspend : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
};
#line 467 "include/linux/pm.h"
struct dev_power_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_99 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
   unsigned short ia32_compat ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_99 mm_context_t;
#line 71 "include/asm-generic/iomap.h"
struct vm_area_struct;
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
struct bio_vec;
#line 18 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 35 "include/linux/kmod.h"
struct key;
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 443
struct sock;
#line 444
struct kobject;
#line 445
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 451 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void const   *(*current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
};
#line 55 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 62 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 98 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 116
struct sysfs_dirent;
#line 185 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 109 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 117 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 124 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 141 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 219
struct kernel_param;
#line 220 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 44 "include/linux/moduleparam.h"
struct kparam_string;
#line 44
struct kparam_array;
#line 44 "include/linux/moduleparam.h"
union __anonunion_ldv_11777_124 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 44 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   u16 flags ;
   union __anonunion_ldv_11777_124 ldv_11777 ;
};
#line 59 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 65 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   unsigned int elemsize ;
   void *elem ;
};
#line 398 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 798 "include/linux/rcupdate.h"
struct tracepoint;
#line 799 "include/linux/rcupdate.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 84 "include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 127 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 66
struct module_param_attrs;
#line 66 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 78
struct exception_table_entry;
#line 217
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 223 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 416
struct module_sect_attrs;
#line 416
struct module_notes_attrs;
#line 416
struct ftrace_event_call;
#line 416 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   unsigned long *ftrace_callsites ;
   unsigned int num_ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 75 "include/linux/connector.h"
struct hlist_nulls_node;
#line 75 "include/linux/connector.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct cred;
#line 38 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 39 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 53 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_125 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_125 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_126 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_126 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_127 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_127 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_128 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_128 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_129 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_129 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_130 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_130 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_131 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_131 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 142 "include/linux/if.h"
union __anonunion_ifs_ifsu_132 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 142 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_132 ifs_ifsu ;
};
#line 160 "include/linux/if.h"
union __anonunion_ifr_ifrn_133 {
   char ifrn_name[16U] ;
};
#line 160 "include/linux/if.h"
union __anonunion_ifr_ifru_134 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 160 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_133 ifr_ifrn ;
   union __anonunion_ifr_ifru_134 ifr_ifru ;
};
#line 224 "include/linux/if.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 124 "include/linux/if_ether.h"
struct prio_tree_node;
#line 124 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 172
struct address_space;
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_12998_137 {
   u16 inuse ;
   u16 objects ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12999_136 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_12998_137 ldv_12998 ;
};
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_13004_139 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_13007_138 {
   struct __anonstruct_ldv_13004_139 ldv_13004 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_13011_140 {
   unsigned long index ;
   void *freelist ;
};
#line 173 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_12999_136 ldv_12999 ;
   union __anonunion_ldv_13007_138 ldv_13007 ;
   union __anonunion_ldv_13011_140 ldv_13011 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_142 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_141 {
   struct __anonstruct_vm_set_142 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_141 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   atomic_t oom_disable_count ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_13453 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 52 "include/linux/net.h"
typedef enum ldv_13453 socket_state;
#line 179 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 180
struct pipe_inode_info;
#line 181
struct inode;
#line 182
struct net;
#line 199
struct fasync_struct;
#line 199 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 126 "include/linux/net.h"
struct proto_ops;
#line 126 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 152
struct kiocb;
#line 153 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 947
struct ctl_table_header;
#line 965 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 985 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1027 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1035 "include/linux/sysctl.h"
struct __anonstruct_ldv_14334_144 {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
};
#line 1035 "include/linux/sysctl.h"
union __anonunion_ldv_14336_143 {
   struct __anonstruct_ldv_14334_144 ldv_14334 ;
   struct rcu_head rcu ;
};
#line 1035 "include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_ldv_14336_143 ldv_14336 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 1074 "include/linux/sysctl.h"
struct ratelimit_state {
   spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 118 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   int node ;
   unsigned int stat[19U] ;
};
#line 48 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 59 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 69 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 49 "include/linux/device.h"
struct device_attribute;
#line 49
struct driver_attribute;
#line 49 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 121
struct of_device_id;
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 155 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 185
struct class_attribute;
#line 185 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 216
struct device_type;
#line 255 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 306 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 333 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 394 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 403
struct dma_coherent_mem;
#line 403 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_power_domain *pwr_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct of_device_id  const  *of_match ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 458 "include/linux/device.h"
struct wakeup_source {
   char *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long hit_count ;
   unsigned char active : 1 ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 92 "include/linux/bit_spinlock.h"
struct file_ra_state;
#line 93
struct user_struct;
#line 94
struct writeback_control;
#line 173 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 190 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 874 "include/linux/dmaengine.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 161 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[3U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 452
struct net_device;
#line 453 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 259 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 260
struct sec_path;
#line 260 "include/linux/skbuff.h"
struct __anonstruct_ldv_19405_147 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 260 "include/linux/skbuff.h"
union __anonunion_ldv_19406_146 {
   __wsum csum ;
   struct __anonstruct_ldv_19405_147 ldv_19405 ;
};
#line 260 "include/linux/skbuff.h"
union __anonunion_ldv_19436_148 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 260 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_19406_146 ldv_19406 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u32 rxhash ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char ooo_okay : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_19436_148 ldv_19436 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 450
struct dst_entry;
#line 485
struct rtable;
#line 112 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 104
struct dentry;
#line 105
struct user_namespace;
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 301 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
};
#line 381 "include/linux/if_link.h"
struct plist_head {
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 88 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 303
struct file_operations;
#line 60 "include/linux/miscdevice.h"
struct pm_qos_request_list {
   struct plist_node list ;
   int pm_qos_class ;
};
#line 118 "include/linux/sem.h"
struct sem_undo_list;
#line 131 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 140 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 26
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_150 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_150 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_152 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_153 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_154 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_155 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_156 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_157 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_151 {
   int _pad[28U] ;
   struct __anonstruct__kill_152 _kill ;
   struct __anonstruct__timer_153 _timer ;
   struct __anonstruct__rt_154 _rt ;
   struct __anonstruct__sigchld_155 _sigchld ;
   struct __anonstruct__sigfault_156 _sigfault ;
   struct __anonstruct__sigpoll_157 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_151 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 380
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 387
struct pid_namespace;
#line 387 "include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 175 "include/linux/pid.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_160 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_160 seccomp_t;
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 85 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_21770_161 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_162 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_163 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_21770_161 ldv_21770 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_162 type_data ;
   union __anonunion_payload_163 payload ;
};
#line 297
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 361
struct futex_pi_state;
#line 362
struct robust_list_head;
#line 363
struct bio_list;
#line 364
struct fs_struct;
#line 365
struct perf_event_context;
#line 366
struct blk_plug;
#line 149 "include/linux/sched.h"
struct cfs_rq;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_164 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_164 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 405 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 448 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 456 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 463 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 480 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 516
struct autogroup;
#line 517
struct tty_struct;
#line 517
struct taskstats;
#line 517
struct tty_audit_buf;
#line 517 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 674 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 719
struct backing_dev_info;
#line 720
struct reclaim_state;
#line 721 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 738 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1014
struct io_context;
#line 1037
struct rq;
#line 1038 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1100 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1105 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1140 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1166
struct rt_rq;
#line 1166 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1190
struct mem_cgroup;
#line 1190 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1539
struct files_struct;
#line 1539
struct irqaction;
#line 1539
struct css_set;
#line 1539
struct compat_robust_list_head;
#line 1539
struct ftrace_ret_stack;
#line 1539 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int mems_allowed_change_disable ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 37 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 196 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 201 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 205 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 365 "include/linux/compat.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 55 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 81 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 96 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 104 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 113 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 209 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 231 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 280 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 292 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 313 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 346 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 362 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 382 "include/linux/ethtool.h"
union __anonunion_h_u_170 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 382 "include/linux/ethtool.h"
union __anonunion_m_u_171 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 382 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_170 h_u ;
   union __anonunion_m_u_171 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 407 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 483 "include/linux/ethtool.h"
struct ethtool_rxfh_indir {
   __u32 cmd ;
   __u32 size ;
   __u32 ring_index[0U] ;
};
#line 499 "include/linux/ethtool.h"
union __anonunion_h_u_174 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 499 "include/linux/ethtool.h"
union __anonunion_m_u_175 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 499 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_174 h_u ;
   union __anonunion_m_u_175 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 536 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 552 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 658 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_list {
   struct list_head list ;
   unsigned int count ;
};
#line 684 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rx_ntuple)(struct net_device * , u32  , void * ) ;
   int (*get_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir * ) ;
   int (*set_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir  const  * ) ;
};
#line 818
struct prot_inuse;
#line 819 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[27U] ;
};
#line 67 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 72 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 78 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 83 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 90 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 96 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[80U] ;
};
#line 102 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 108
struct proc_dir_entry;
#line 108 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 73 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 74
struct fib_rules_ops;
#line 75
struct xt_table;
#line 75 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   atomic_t rt_genid ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 68 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*default_mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 66 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 68 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 334 "include/linux/in.h"
union __anonunion_in6_u_176 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 334 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_176 in6_u ;
};
#line 341 "include/linux/netfilter.h"
struct bio;
#line 342
struct bio_integrity_payload;
#line 343
struct block_device;
#line 17 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 18 "include/linux/blk_types.h"
typedef void bio_destructor_t(struct bio * );
#line 19 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 28 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_node;
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 35 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 100 "include/linux/dcache.h"
struct dentry_operations;
#line 100
struct super_block;
#line 100 "include/linux/dcache.h"
union __anonunion_d_u_182 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 100 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_182 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
};
#line 151 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 422 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 51 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 51 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 229 "include/linux/radix-tree.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 423 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 271 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 299 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 310 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 324 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 340 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 386 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 573 "include/linux/fs.h"
union __anonunion_arg_184 {
   char *buf ;
   void *data ;
};
#line 573 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_183 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_184 arg ;
   int error ;
};
#line 573 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_183 read_descriptor_t;
#line 576 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 627 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
   struct mutex unmap_mutex ;
};
#line 650
struct hd_struct;
#line 650
struct gendisk;
#line 650 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 721
struct posix_acl;
#line 722
struct inode_operations;
#line 722 "include/linux/fs.h"
union __anonunion_ldv_26602_185 {
   struct list_head i_dentry ;
   struct rcu_head i_rcu ;
};
#line 722
struct file_lock;
#line 722
struct cdev;
#line 722 "include/linux/fs.h"
union __anonunion_ldv_26628_186 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 722 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   uid_t i_uid ;
   gid_t i_gid ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   spinlock_t i_lock ;
   unsigned int i_flags ;
   struct mutex i_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_26602_185 ldv_26602 ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   struct rw_semaphore i_alloc_sem ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_26628_186 ldv_26628 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 899 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 907 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 930 "include/linux/fs.h"
union __anonunion_f_u_187 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 930 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_187 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1061 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1062 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1067 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_189 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_188 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_189 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_188 fl_u ;
};
#line 1168 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1360
struct file_system_type;
#line 1360
struct super_operations;
#line 1360
struct xattr_handler;
#line 1360
struct mtd_info;
#line 1360 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
};
#line 1487 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1525
struct block_device_operations;
#line 1526 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
};
#line 1566 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  , unsigned int  ) ;
   int (*check_acl)(struct inode * , int  , unsigned int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1612 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_devname)(struct seq_file * , struct vfsmount * ) ;
   int (*show_path)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1793 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned int namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 375 "include/linux/netfilter.h"
struct ebt_table;
#line 376 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   char *slabname ;
};
#line 484 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63
struct netns_ipvs;
#line 64 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
};
#line 100 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "include/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 89 "include/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 112 "include/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 127 "include/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 156 "include/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 33 "include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 91
struct vlan_group;
#line 92
struct netpoll_info;
#line 93
struct phy_device;
#line 94
struct wireless_dev;
#line 95
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 117 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 136 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 211
struct neighbour;
#line 212
struct neigh_parms;
#line 239 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 244 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 292 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 392
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 440 "include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 441 "include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 548
struct Qdisc;
#line 548 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
};
#line 590 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 602 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 614 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 666 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 676 "include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct rcu_head rcu ;
   u16 queues[0U] ;
};
#line 689 "include/linux/netdevice.h"
struct xps_dev_maps {
   struct rcu_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 700 "include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 711 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   u32 (*ndo_fix_features)(struct net_device * , u32  ) ;
   int (*ndo_set_features)(struct net_device * , u32  ) ;
};
#line 995
struct iw_handler_def;
#line 995
struct iw_public_data;
#line 995
struct in_device;
#line 995
struct dn_dev;
#line 995
struct inet6_dev;
#line 995
struct cpu_rmap;
#line 995
struct pcpu_lstats;
#line 995
struct pcpu_tstats;
#line 995
struct pcpu_dstats;
#line 995 "include/linux/netdevice.h"
union __anonunion_ldv_30304_191 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 995
struct garp_port;
#line 995
struct rtnl_link_ops;
#line 995 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request_list pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   u32 features ;
   u32 hw_features ;
   u32 wanted_features ;
   u32 vlan_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned int priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   int uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_group *vlgrp ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   struct net_device *master ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct cpu_rmap *rx_cpu_rmap ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned short reg_state ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion_ldv_30304_191 ldv_30304 ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct ethtool_rx_ntuple_list ethtool_ntuple_list ;
   struct phy_device *phydev ;
   int group ;
};
#line 1551
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 339 "include/linux/irq.h"
struct timer_rand_state;
#line 91 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
   unsigned long thread_mask ;
   char const   *name ;
   struct proc_dir_entry *dir ;
};
#line 327 "include/linux/fsnotify.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   unsigned long vma_pages ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char const   *filename ;
   char const   *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 65 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 84 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
};
#line 83 "include/linux/security.h"
struct xfrm_policy;
#line 84
struct xfrm_state;
#line 105
struct request_sock;
#line 3041 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 37 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 815 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 127
struct neigh_table;
#line 127 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   int (*output)(struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct rcu_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 118 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 128 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 138 "include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct rcu_head rcu ;
};
#line 149 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32  ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 394
struct dn_route;
#line 394 "include/net/neighbour.h"
union __anonunion_ldv_36149_200 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 394 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[1U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   int flags ;
   union __anonunion_ldv_36149_200 ldv_36149 ;
};
#line 100 "include/net/sock.h"
struct __anonstruct_socket_lock_t_201 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 100 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_201 socket_lock_t;
#line 100
struct proto;
#line 101 "include/net/sock.h"
union __anonunion_ldv_36346_202 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_36354_203 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_36361_204 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 101 "include/net/sock.h"
struct sock_common {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
   union __anonunion_ldv_36346_202 ldv_36346 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_36354_203 ldv_36354 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_ldv_36361_204 ldv_36361 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 167 "include/net/sock.h"
struct __anonstruct_sk_backlog_205 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 167 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_205 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct sk_buff_head sk_async_wait_queue ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 716
struct request_sock_ops;
#line 717
struct timewait_sock_ops;
#line 718
struct inet_hashinfo;
#line 719
struct raw_hashinfo;
#line 720
struct udp_table;
#line 720 "include/net/sock.h"
union __anonunion_h_206 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 720 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_206 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 189 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 202 "include/linux/drbd.h"
struct __anonstruct_ldv_37520_207 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   unsigned short _pad : 9 ;
};
#line 202 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_37520_207 ldv_37520 ;
   unsigned int i ;
};
#line 274
enum drbd_state_rv {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 110 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 111
struct crypto_async_request;
#line 112
struct crypto_aead;
#line 113
struct crypto_blkcipher;
#line 114
struct crypto_hash;
#line 115
struct crypto_rng;
#line 116
struct crypto_tfm;
#line 117
struct crypto_type;
#line 118
struct aead_givcrypt_request;
#line 119
struct skcipher_givcrypt_request;
#line 119 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 128 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 141 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 167 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 181 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 186 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 205 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 220 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 237 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 246 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 252 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 261 "include/linux/crypto.h"
union __anonunion_cra_u_208 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 261 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_208 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 313 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 333 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 348 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 357 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 365 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 377 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 384 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 392 "include/linux/crypto.h"
union __anonunion_crt_u_209 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 392 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_209 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 421 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 425 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 429 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 445 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 169 "include/linux/jhash.h"
struct request_values {

};
#line 172 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 236 "include/net/inet_sock.h"
struct inet_peer;
#line 363 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
   void *(*twsk_getpeer)(struct sock * ) ;
};
#line 81 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 90 "include/linux/genhd.h"
struct partition_meta_info {
   u8 uuid[16U] ;
   u8 volname[64U] ;
};
#line 98 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   atomic_t in_flight[2U] ;
   struct disk_stats *dkstats ;
   atomic_t ref ;
   struct rcu_head rcu_head ;
};
#line 145 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 152
struct disk_events;
#line 153
struct request_queue;
#line 153
struct blk_integrity;
#line 153 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   unsigned int events ;
   unsigned int async_events ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 13 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 18 "include/linux/writeback.h"
struct writeback_control {
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   unsigned long wb_start ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
};
#line 54
struct bdi_writeback;
#line 38 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 45 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 61 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 29 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned short cgroup_changed ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 90 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 373 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 83
struct blk_trace;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 63 "include/linux/blkdev.h"
union __anonunion_ldv_41139_216 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 63 "include/linux/blkdev.h"
struct __anonstruct_flush_218 {
   unsigned int seq ;
   struct list_head list ;
};
#line 63 "include/linux/blkdev.h"
union __anonunion_ldv_41146_217 {
   void *elevator_private[3U] ;
   struct __anonstruct_flush_218 flush ;
};
#line 63 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_41139_216 ldv_41139 ;
   union __anonunion_ldv_41146_217 ldv_41146 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 20 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 22 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 24 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 27 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 28 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 29 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 30 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 32 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 33 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 34 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 62 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 70 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 82 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 195 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 196 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 197 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 198 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 199 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 207 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 209 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 210 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 211 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 212
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 219 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 225 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 234 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char cluster ;
   signed char discard_zeroes_data ;
};
#line 262 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct delayed_work delay_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   unsigned int flush_flags ;
   unsigned char flush_pending_idx : 1 ;
   unsigned char flush_running_idx : 1 ;
   unsigned long flush_pending_since ;
   struct list_head flush_queue[2U] ;
   struct list_head flush_data_in_flight ;
   struct request flush_rq ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 856 "include/linux/blkdev.h"
struct blk_plug {
   unsigned long magic ;
   struct list_head list ;
   struct list_head cb_list ;
   unsigned int should_sort ;
};
#line 1181 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1201 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1202 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1203 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1204 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1205 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1264 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   unsigned int (*check_events)(struct gendisk * , unsigned int  ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 98 "include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 107 "include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 139 "include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   spinlock_t aca_lock ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};
#line 151 "include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6[2U] ;
   struct icmpv6_mib *icmpv6[2U] ;
   struct icmpv6msg_mib *icmpv6msg[2U] ;
};
#line 162 "include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct neigh_parms *nd_parms ;
   struct inet6_dev *next ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   unsigned long tstamp ;
   struct rcu_head rcu ;
};
#line 668 "include/net/ipv6.h"
union __anonunion_ldv_43291_224 {
   __be32 a4 ;
   __be32 a6[4U] ;
};
#line 668 "include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_ldv_43291_224 ldv_43291 ;
};
#line 24 "include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};
#line 29 "include/net/inetpeer.h"
struct __anonstruct_ldv_43315_226 {
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
   u32 metrics[14U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   unsigned long pmtu_expires ;
   u32 pmtu_orig ;
   u32 pmtu_learned ;
   struct inetpeer_addr_base redirect_learned ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_43317_225 {
   struct __anonstruct_ldv_43315_226 ldv_43315 ;
   struct rcu_head rcu ;
};
#line 29 "include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   union __anonunion_ldv_43317_225 ldv_43317 ;
};
#line 49 "include/linux/route.h"
struct fib_info;
#line 50 "include/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   __be32 rt_key_dst ;
   __be32 rt_key_src ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_tos ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_route_iif ;
   int rt_iif ;
   int rt_oif ;
   __u32 rt_mark ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   u32 rt_peer_genid ;
   struct inet_peer *peer ;
   struct fib_info *fi ;
};
#line 318 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1531 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header80 {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 342 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header95 {
   u16 magic ;
   u16 command ;
   u32 length ;
   u8 payload[0U] ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_header {
   struct p_header80 h80 ;
   struct p_header95 h95 ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   union p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 413 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header80 head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 436 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header80 head ;
   u32 barrier ;
   u32 pad ;
};
#line 443 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header80 head ;
   u32 barrier ;
   u32 set_size ;
};
#line 457 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 465 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_95 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
   u32 c_plan_ahead ;
   u32 c_delay_target ;
   u32 c_fill_target ;
   u32 c_max_rate ;
};
#line 481 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header80 head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 494 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header80 head ;
   u64 uuid[6U] ;
};
#line 500 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header80 head ;
   u64 uuid ;
};
#line 505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header80 head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_bio_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 515 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header80 head ;
   u32 state ;
};
#line 520 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header80 head ;
   u32 mask ;
   u32 val ;
};
#line 526 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header80 head ;
   u32 retcode ;
};
#line 548 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_desc {
   struct p_header80 head ;
   u64 sector ;
   u32 blksize ;
   u32 pad ;
};
#line 576 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe93 {
   struct p_header80 head ;
   u32 seq_num ;
   u32 offset ;
};
#line 621 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   union p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_rs_param_95 rs_param_95 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
   struct p_delay_probe93 delay_probe93 ;
   struct p_rs_uuid rs_uuid ;
   struct p_block_desc block_desc ;
};
#line 655
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 662 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 683
struct drbd_work;
#line 686 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 690
struct drbd_tl_epoch;
#line 718 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_writes ;
};
#line 726 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 760 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 765 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_45720_229 {
   u64 block_id ;
   struct digest_info *digest ;
};
#line 765 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node colision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   union __anonunion_ldv_45720_229 ldv_45720 ;
};
#line 823
struct drbd_bitmap;
#line 824
enum bm_flag {
    BM_P_VMALLOCED = 65536,
    BM_LOCKED_MASK = 7,
    BM_DONT_CLEAR = 1,
    BM_DONT_SET = 2,
    BM_DONT_TEST = 4,
    BM_LOCKED_TEST_ALLOWED = 3,
    BM_LOCKED_SET_ALLOWED = 1
} ;
#line 834 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 895 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 905 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   int on_congestion ;
   int cong_fill ;
   int cong_extents ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 78 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
   int on_no_data ;
   int c_plan_ahead ;
   int c_delay_target ;
   int c_fill_target ;
   int c_max_rate ;
   int c_min_rate ;
};
#line 149 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 945 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   enum bm_flag flags ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 953
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2
} ;
#line 959 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct fifo_buffer {
   int *values ;
   unsigned int head_index ;
   unsigned int size ;
};
#line 965 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work go_diskless ;
   struct drbd_work md_sync_work ;
   struct drbd_work start_resync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   struct timer_list start_resync_timer ;
   struct timer_list request_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   wait_queue_head_t net_cnt_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_same_csum ;
   unsigned long rs_mark_left[8U] ;
   unsigned long rs_mark_time[8U] ;
   int rs_last_mark ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   atomic_t pp_in_use_by_net ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   atomic_t rs_sect_in ;
   atomic_t rs_sect_ev ;
   int rs_last_sect_ev ;
   int rs_last_events ;
   int c_sync_rate ;
   struct fifo_buffer rs_plan_s ;
   int rs_in_flight ;
   int rs_planed ;
   atomic_t ap_in_flight ;
   int peer_max_bio_size ;
   int local_max_bio_size ;
};
#line 1173
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2461 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   wait_queue_head_t bm_io_wait ;
   enum bm_flag bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 897 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct bm_aio_ctx {
   struct drbd_conf *mdev ;
   atomic_t in_flight ;
   struct completion done ;
   unsigned int flags ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 154 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 161
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_AHEAD = 22,
    C_BEHIND = 23,
    C_MASK = 31
} ;
#line 1303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 368 "include/linux/drbd.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct cgroupfs_root;
#line 57
struct cgroup;
#line 58
struct css_id;
#line 57 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 194 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 247 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 159 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_OUT_OF_SYNC = 40,
    P_RS_CANCEL = 41,
    P_MAX_CMD = 42,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 691 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 754 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 939 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 1222
enum drbd_req_event;
#line 1222
enum drbd_req_event;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    queue_for_send_oos = 5,
    send_canceled = 6,
    send_failed = 7,
    handed_over_to_network = 8,
    oos_handed_to_network = 9,
    connection_lost_while_pending = 10,
    read_retry_remote_canceled = 11,
    recv_acked_by_peer = 12,
    write_acked_by_peer = 13,
    write_acked_by_peer_and_sis = 14,
    conflict_discarded_by_peer = 15,
    neg_acked = 16,
    barrier_acked = 17,
    data_received = 18,
    read_completed_with_error = 19,
    read_ahead_completed_with_error = 20,
    write_completed_with_error = 21,
    completed_ok = 22,
    resend = 23,
    fail_frozen_disk_io = 24,
    restart_frozen_disk_io = 25,
    nothing = 26
} ;
#line 310 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 181 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 555
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 559 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header80 head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 747
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BECAME_LAST = 2,
    EV_CLEANUP = 32
} ;
#line 1181
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1222
enum drbd_req_event;
#line 1222
enum drbd_req_event;
#line 1522
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct data_cmd {
   int expect_payload ;
   size_t pkt_size ;
   int (*function)(struct drbd_conf * , enum drbd_packets  , unsigned int  ) ;
};
#line 4287 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4506 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header80 * ) ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 186 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 1222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1222
enum drbd_req_event;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_230 {
   u32 pos ;
   u32 extent ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_230 updates[62U] ;
   u32 xor_sum ;
};
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 170 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 193 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 1222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1222
enum drbd_req_event;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 3634 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 la_peer_max_bio_size ;
   u32 reserved_u32[3U] ;
};
#line 4115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 177 "include/linux/types.h"
typedef __u16 __le16;
#line 179 "include/linux/types.h"
typedef __u32 __le32;
#line 181 "include/linux/types.h"
typedef __u64 __le64;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 36 "include/linux/kmod.h"
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 42 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   enum umh_wait wait ;
   int retval ;
   int (*init)(struct subprocess_info * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 64 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 142 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 158 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
};
#line 99 "include/linux/drbd.h"
enum drbd_ret_code {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    ERR_STONITH_AND_PROT_A = 154,
    ERR_CONG_NOT_PROTO_A = 155,
    ERR_PIC_AFTER_DEP = 156,
    ERR_PIC_PEER_DEP = 157,
    AFTER_LAST_ERR_CODE = 158
} ;
#line 323 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 361 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 918 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 40 "include/linux/drbd_nl.h"
struct disconnect {
   unsigned char force : 1 ;
};
#line 74 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 108 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 136 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 145 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 1222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1222
enum drbd_req_event;
#line 35 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_on_congestion = 81,
    T_cong_fill = 82,
    T_cong_extents = 83,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_force = 32852,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_on_no_data = 75,
    T_c_plan_ahead = 76,
    T_c_delay_target = 77,
    T_c_fill_target = 78,
    T_c_max_rate = 79,
    T_c_min_rate = 80,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 112 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2243 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 10 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 19
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n .balign 8 \n .quad 661b\n .quad 663f\n\t .word (4*32+23)\n\t .byte 662b-661b\n\t .byte 664f-663f\n.previous\n.section .discard,\"aw\",@progbits\n\t .byte 0xff + (664f-663f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n663:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n664:\n.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 11 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_zero_bit_le(void const   *addr , unsigned long size ,
                                                    unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 14
  tmp = find_next_zero_bit((unsigned long const   *)addr, size, offset);
#line 14
  return (tmp);
}
}
#line 17 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_bit_le(void const   *addr , unsigned long size ,
                                               unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 20
  tmp = find_next_bit((unsigned long const   *)addr, size, offset);
#line 20
  return (tmp);
}
}
#line 45 "include/asm-generic/bitops/le.h"
__inline static int test_bit_le(int nr , void const   *addr ) 
{ 
  int tmp ;

  {
#line 47
  tmp = variable_test_bit(nr, (unsigned long const volatile   *)addr);
#line 47
  return (tmp);
}
}
#line 70 "include/asm-generic/bitops/le.h"
__inline static int __test_and_set_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 72
  tmp = __test_and_set_bit(nr, (unsigned long volatile   *)addr);
#line 72
  return (tmp);
}
}
#line 75 "include/asm-generic/bitops/le.h"
__inline static int __test_and_clear_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 77
  tmp = __test_and_clear_bit(nr, (unsigned long volatile   *)addr);
#line 77
  return (tmp);
}
}
#line 47 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 49
  tmp = __arch_hweight64((__u64 )w);
#line 49
  return (tmp);
}
}
#line 99 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 69 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 125 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2080;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2080;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2080;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2080;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_2080: ;
#line 14
  return (pfo_ret__);
}
}
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 55
extern void *memset(void * , int  , size_t  ) ;
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 182
  __i = i;
#line 183
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 186
  return (i + __i);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 207
  tmp = atomic_add_return(- i, v);
#line 207
  return (tmp);
}
}
#line 217 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 222
  switch (8UL) {
  case 1UL: 
#line 222
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_5678;
  case 2UL: 
#line 222
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_5678;
  case 4UL: 
#line 222
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_5678;
  case 8UL: 
#line 222
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 222
  goto ldv_5678;
  default: 
#line 222
  __bad_percpu_size();
  }
  ldv_5678: 
#line 222
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 224
  return (ti);
}
}
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_5956.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_5956.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_5956.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_5956.rlock, flags);
#line 341
  return;
}
}
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 156
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 134
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 159
extern int mutex_trylock(struct mutex * ) ;
#line 160
extern void mutex_unlock(struct mutex * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 91
extern void complete(struct completion * ) ;
#line 53 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 65
extern void vfree(void const   * ) ;
#line 329 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 332 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 334
  tmp = alloc_pages_current(gfp_mask, order);
#line 334
  return (tmp);
}
}
#line 363
extern void __free_pages(struct page * , unsigned int  ) ;
#line 41 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 141 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 221 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 255 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 270
  tmp___2 = __kmalloc(size, flags);
#line 270
  return (tmp___2);
}
}
#line 318 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 320
  tmp = kmalloc(size, flags | 32768U);
#line 320
  return (tmp);
}
}
#line 649 "include/linux/device.h"
extern int dev_printk(char const   * , struct device  const  * , char const   *  , ...) ;
#line 654
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 658
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 660
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 664
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 431 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 720 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 722
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 56L) << 12) + 0xffff880000000000UL));
}
}
#line 362 "include/linux/sched.h"
extern void schedule(void) ;
#line 2428
extern int _cond_resched(void) ;
#line 2285 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 58 "include/linux/highmem.h"
__inline static void *__kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
#line 60
  pagefault_disable();
#line 61
  tmp = lowmem_page_address(page);
#line 61
  return (tmp);
}
}
#line 65 "include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr ) 
{ 


  {
#line 67
  pagefault_enable();
#line 68
  return;
}
}
#line 214 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 217
extern void bio_put(struct bio * ) ;
#line 220
extern void bio_endio(struct bio * , int  ) ;
#line 229
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 919 "include/linux/blkdev.h"
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 135
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 138 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 140
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 140
    tmp = _drbd_insert_fault(mdev, type);
#line 140
    if (tmp != 0U) {
#line 140
      tmp___0 = 1;
    } else {
#line 140
      tmp___0 = 0;
    }
  } else {
#line 140
    tmp___0 = 0;
  }
#line 140
  return (tmp___0);
}
}
#line 158
struct ratelimit_state drbd_ratelimit_state ;
#line 1204
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) ;
#line 1301
void drbd_go_diskless(struct drbd_conf *mdev ) ;
#line 1302
void drbd_ldev_destroy(struct drbd_conf *mdev ) ;
#line 1445
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1446
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1447
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1448
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1449
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1451
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1453
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1455
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1459
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1461
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1462
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1463
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) ;
#line 1464
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1465
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1466
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1468
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1469
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1470
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1473
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1475
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1476
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1477
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1478
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1481
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1484
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1487
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) ;
#line 1488
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1503
rwlock_t global_state_lock ;
#line 1520
char *ppsize(char *buf , unsigned long long size ) ;
#line 1796 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_state_rv _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                                   enum chg_state_flags flags , struct completion *done ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 1801
  _raw_read_lock(& global_state_lock);
#line 1802
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1803
  _raw_read_unlock(& global_state_lock);
#line 1805
  return (rv);
}
}
#line 1826 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1828
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1830
  if (forcedetach == 0) {
#line 1831
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1831
    if (tmp != 0) {
#line 1832
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1833
    if ((int )mdev->state.ldv_37520.disk > 4) {
#line 1834
      __ns.i = mdev->state.i;
#line 1834
      __ns.ldv_37520.disk = 4U;
#line 1834
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1835
    goto ldv_46737;
  } else {

  }
  case 2: ;
  case 1: 
#line 1840
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1841
  if ((int )mdev->state.ldv_37520.disk > 2) {
#line 1842
    __ns___0.i = mdev->state.i;
#line 1842
    __ns___0.ldv_37520.disk = 2U;
#line 1842
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1843
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1846
  goto ldv_46737;
  }
  ldv_46737: ;
#line 1849
  return;
}
}
#line 1859 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1862
  if (error != 0) {
#line 1864
    tmp = spinlock_check(& mdev->req_lock);
#line 1864
    flags = _raw_spin_lock_irqsave(tmp);
#line 1865
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1866
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1868
  return;
}
}
#line 1894 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1896
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1899
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1902
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;

  {
#line 2159
  tmp = atomic_sub_return(1, & mdev->local_cnt);
#line 2159
  i = tmp;
#line 2161
  if (i < 0) {
#line 2161
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( i >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2161);
  } else {

  }
#line 2162
  if (i == 0) {
#line 2163
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2165
      drbd_ldev_destroy(mdev);
    } else {

    }
#line 2166
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2168
      drbd_go_diskless(mdev);
    } else {

    }
#line 2169
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2171
  return;
}
}
#line 2174 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2179
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2180
    return (0);
  } else {

  }
#line 2182
  atomic_inc(& mdev->local_cnt);
#line 2183
  io_allowed = (unsigned int )mdev->state.ldv_37520.disk >= (unsigned int )mins;
#line 2184
  if (io_allowed == 0) {
#line 2185
    put_ldev(mdev);
  } else {

  }
#line 2186
  return (io_allowed);
}
}
#line 2448 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2452
  tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2452
  if (tmp != 0) {
#line 2453
    return;
  } else {

  }
#line 2455
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0);
#line 2456
  if (r != 0) {
#line 2457
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2458
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2460
  return;
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) ;
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 129
  b = mdev->bitmap;
#line 130
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 130
  if (tmp == 0) {
#line 131
    return;
  } else {

  }
#line 132
  tmp___9 = get_current();
#line 132
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 132
    tmp___7 = get_current();
#line 132
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 132
      tmp___5 = get_current();
#line 132
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 132
        tmp___3 = get_current();
#line 132
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 132
        tmp___4 = (char *)"worker";
      }
#line 132
      tmp___6 = tmp___4;
    } else {
#line 132
      tmp___6 = (char *)"asender";
    }
#line 132
    tmp___8 = tmp___6;
  } else {
#line 132
    tmp___8 = (char *)"receiver";
  }
#line 132
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 138
  return;
}
}
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 144
  b = mdev->bitmap;
#line 147
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 148
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 149
    return;
  } else {

  }
#line 152
  tmp = mutex_trylock(& b->bm_change);
#line 152
  trylock_failed = tmp == 0;
#line 154
  if (trylock_failed != 0) {
#line 155
    tmp___9 = get_current();
#line 155
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 155
      tmp___7 = get_current();
#line 155
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 155
        tmp___5 = get_current();
#line 155
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 155
          tmp___3 = get_current();
#line 155
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 155
          tmp___4 = (char *)"worker";
        }
#line 155
        tmp___6 = tmp___4;
      } else {
#line 155
        tmp___6 = (char *)"asender";
      }
#line 155
      tmp___8 = tmp___6;
    } else {
#line 155
      tmp___8 = (char *)"receiver";
    }
#line 155
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 163
    mutex_lock_nested(& b->bm_change, 0U);
  } else {

  }
#line 165
  if (((unsigned int )b->bm_flags & 7U) != 0U) {
#line 166
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 167
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | ((unsigned int )flags & 7U));
#line 169
  b->bm_why = why;
#line 170
  b->bm_task = get_current();
#line 171
  return;
}
}
#line 173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;

  {
#line 175
  b = mdev->bitmap;
#line 176
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 177
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 178
    return;
  } else {

  }
#line 181
  if (((unsigned int )(mdev->bitmap)->bm_flags & 7U) == 0U) {
#line 182
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 184
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294967288U);
#line 185
  b->bm_why = 0;
#line 186
  b->bm_task = 0;
#line 187
  mutex_unlock(& b->bm_change);
#line 188
  return;
}
}
#line 216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_store_page_idx(struct page *page , unsigned long idx ) 
{ 
  long tmp ;

  {
#line 218
  tmp = __builtin_expect((idx & 0xffffffffff000000UL) != 0UL, 0L);
#line 218
  if (tmp != 0L) {
#line 218
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (218), "i" (12UL));
    ldv_47014: ;
#line 218
    goto ldv_47014;
  } else {

  }
#line 219
  page->ldv_13007.ldv_13004.private = page->ldv_13007.ldv_13004.private | idx;
#line 220
  return;
}
}
#line 222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_page_to_idx(struct page *page ) 
{ 


  {
#line 224
  return (page->ldv_13007.ldv_13004.private & 16777215UL);
}
}
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_lock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 232
  b = mdev->bitmap;
#line 233
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_13007.ldv_13004.private);
#line 234
  tmp = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 234
  if (tmp == 0) {
#line 234
    goto ldv_47024;
  } else {

  }
#line 234
  tmp___0 = get_current();
#line 234
  __wait.flags = 0U;
#line 234
  __wait.private = (void *)tmp___0;
#line 234
  __wait.func = & autoremove_wake_function;
#line 234
  __wait.task_list.next = & __wait.task_list;
#line 234
  __wait.task_list.prev = & __wait.task_list;
  ldv_47027: 
#line 234
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 234
  tmp___1 = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 234
  if (tmp___1 == 0) {
#line 234
    goto ldv_47026;
  } else {

  }
#line 234
  schedule();
#line 234
  goto ldv_47027;
  ldv_47026: 
#line 234
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_47024: ;
#line 237
  return;
}
}
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_unlock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;

  {
#line 239
  b = mdev->bitmap;
#line 240
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_13007.ldv_13004.private);
#line 241
  clear_bit(31, (unsigned long volatile   *)addr);
#line 242
  __asm__  volatile   ("": : : "memory");
#line 243
  __wake_up(& (mdev->bitmap)->bm_io_wait, 3U, 1, 0);
#line 244
  return;
}
}
#line 248 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_unchanged(struct page *page ) 
{ 


  {
#line 251
  clear_bit(29, (unsigned long volatile   *)(& page->ldv_13007.ldv_13004.private));
#line 252
  clear_bit(28, (unsigned long volatile   *)(& page->ldv_13007.ldv_13004.private));
#line 253
  return;
}
}
#line 255 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_need_writeout(struct page *page ) 
{ 


  {
#line 257
  set_bit(29U, (unsigned long volatile   *)(& page->ldv_13007.ldv_13004.private));
#line 258
  return;
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_unchanged(struct page *page ) 
{ 
  unsigned long const volatile   *addr ;

  {
#line 262
  addr = (unsigned long const volatile   *)(& page->ldv_13007.ldv_13004.private);
#line 263
  return (((unsigned long )*addr & 805306368UL) == 0UL);
}
}
#line 266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_io_err(struct page *page ) 
{ 


  {
#line 268
  set_bit(30U, (unsigned long volatile   *)(& page->ldv_13007.ldv_13004.private));
#line 269
  return;
}
}
#line 271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_clear_page_io_err(struct page *page ) 
{ 


  {
#line 273
  clear_bit(30, (unsigned long volatile   *)(& page->ldv_13007.ldv_13004.private));
#line 274
  return;
}
}
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_lazy_writeout(struct page *page ) 
{ 


  {
#line 278
  set_bit(28U, (unsigned long volatile   *)(& page->ldv_13007.ldv_13004.private));
#line 279
  return;
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_lazy_writeout(struct page *page ) 
{ 
  int tmp ;

  {
#line 283
  tmp = constant_test_bit(28U, (unsigned long const volatile   *)(& page->ldv_13007.ldv_13004.private));
#line 283
  return (tmp);
}
}
#line 287 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_word_to_page_idx(struct drbd_bitmap *b , unsigned long long_nr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 290
  page_nr = (unsigned int )(long_nr >> 9);
#line 291
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 291
  if (tmp != 0L) {
#line 291
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (291), "i" (12UL));
    ldv_47061: ;
#line 291
    goto ldv_47061;
  } else {

  }
#line 292
  return (page_nr);
}
}
#line 295 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_bit_to_page_idx(struct drbd_bitmap *b , u64 bitnr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 298
  page_nr = (unsigned int )(bitnr >> 15);
#line 299
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 299
  if (tmp != 0L) {
#line 299
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (299), "i" (12UL));
    ldv_47067: ;
#line 299
    goto ldv_47067;
  } else {

  }
#line 300
  return (page_nr);
}
}
#line 303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_pidx(struct drbd_bitmap *b , unsigned int idx , enum km_type  const  km ) 
{ 
  struct page *page ;
  void *tmp ;

  {
#line 305
  page = *(b->bm_pages + (unsigned long )idx);
#line 306
  tmp = __kmap_atomic(page);
#line 306
  return ((unsigned long *)tmp);
}
}
#line 309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  unsigned long *tmp ;

  {
#line 311
  tmp = __bm_map_pidx(b, idx, KM_IRQ1);
#line 311
  return (tmp);
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 316
  __kunmap_atomic((void *)p_addr);
#line 317
  return;
}
}
#line 319 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 321
  return;
}
}
#line 344 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 347
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 348
    return;
  } else {

  }
#line 350
  i = 0UL;
#line 350
  goto ldv_47092;
  ldv_47091: ;
#line 351
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 352
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 355
    goto ldv_47090;
  } else {

  }
#line 357
  __free_pages(*(pages + i), 0U);
#line 358
  *(pages + i) = 0;
  ldv_47090: 
#line 350
  i = i + 1UL;
  ldv_47092: ;
#line 350
  if (i < number) {
#line 351
    goto ldv_47091;
  } else {

  }

#line 355
  return;
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 364
  if (v != 0) {
#line 365
    vfree((void const   *)ptr);
  } else {
#line 367
    kfree((void const   *)ptr);
  }
#line 368
  return;
}
}
#line 373 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 375
  old_pages = b->bm_pages;
#line 377
  vmalloced = 0U;
#line 378
  have = b->bm_number_of_pages;
#line 380
  tmp = __builtin_expect(have == 0UL, 0L);
#line 380
  if (tmp != 0L) {
#line 380
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 380
    if (tmp___0 != 0L) {
#line 380
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (380), "i" (12UL));
      ldv_47109: ;
#line 380
      goto ldv_47109;
    } else {

    }
  } else {

  }
#line 381
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 381
  if (tmp___1 != 0L) {
#line 381
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 381
    if (tmp___2 != 0L) {
#line 381
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (381), "i" (12UL));
      ldv_47110: ;
#line 381
      goto ldv_47110;
    } else {

    }
  } else {

  }
#line 383
  if (have == want) {
#line 384
    return (old_pages);
  } else {

  }
#line 391
  bytes = (unsigned int )want * 8U;
#line 392
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 392
  new_pages = (struct page **)tmp___3;
#line 393
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 394
    tmp___4 = vmalloc((unsigned long )bytes);
#line 394
    new_pages = (struct page **)tmp___4;
#line 395
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 396
      return (0);
    } else {

    }
#line 397
    vmalloced = 1U;
  } else {

  }
#line 400
  memset((void *)new_pages, 0, (size_t )bytes);
#line 401
  if (want >= have) {
#line 402
    i = 0U;
#line 402
    goto ldv_47112;
    ldv_47111: 
#line 403
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 402
    i = i + 1U;
    ldv_47112: ;
#line 402
    if ((unsigned long )i < have) {
#line 403
      goto ldv_47111;
    } else {

    }

#line 404
    goto ldv_47115;
    ldv_47114: 
#line 405
    page = alloc_pages(131282U, 0U);
#line 406
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 407
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 408
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 409
      return (0);
    } else {

    }
#line 413
    bm_store_page_idx(page, (unsigned long )i);
#line 414
    *(new_pages + (unsigned long )i) = page;
#line 404
    i = i + 1U;
    ldv_47115: ;
#line 404
    if ((unsigned long )i < want) {
#line 405
      goto ldv_47114;
    } else {

    }

  } else {
#line 417
    i = 0U;
#line 417
    goto ldv_47118;
    ldv_47117: 
#line 418
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 417
    i = i + 1U;
    ldv_47118: ;
#line 417
    if ((unsigned long )i < want) {
#line 418
      goto ldv_47117;
    } else {

    }

  }
#line 424
  if (vmalloced != 0U) {
#line 425
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | 65536U);
  } else {
#line 427
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294901759U);
  }
#line 429
  return (new_pages);
}
}
#line 436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 438
  b = mdev->bitmap;
#line 439
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 439
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 439
  if (tmp != 0L) {
#line 439
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       439);
  } else {

  }
#line 439
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 440
  tmp___0 = kzalloc(400UL, 208U);
#line 440
  b = (struct drbd_bitmap *)tmp___0;
#line 441
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 442
    return (-12);
  } else {

  }
#line 443
  spinlock_check(& b->bm_lock);
#line 443
  __raw_spin_lock_init(& b->bm_lock.ldv_5956.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 444
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 445
  __init_waitqueue_head(& b->bm_io_wait, & __key___1);
#line 447
  mdev->bitmap = b;
#line 449
  return (0);
}
}
#line 452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 454
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 454
  if (_b != 0) {
#line 454
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            454);
  } else {

  }
#line 454
  if (_b != 0) {
#line 454
    return (0UL);
  } else {

  }
#line 455
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 462
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 462
  if (_b != 0) {
#line 462
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            462);
  } else {

  }
#line 462
  if (_b != 0) {
#line 462
    return;
  } else {

  }
#line 463
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 464
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, (int )(mdev->bitmap)->bm_flags & 65536);
#line 465
  kfree((void const   *)mdev->bitmap);
#line 466
  mdev->bitmap = 0;
#line 467
  return;
}
}
#line 477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;
  int cleared ;
  unsigned long tmp___0 ;

  {
#line 482
  cleared = 0;
#line 485
  tmp = (int )b->bm_bits & 32767;
#line 487
  mask = (1UL << (tmp & 63)) - 1UL;
#line 490
  mask = mask;
#line 492
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 493
  bm = p_addr + (unsigned long )(tmp / 64);
#line 494
  if (mask != 0UL) {
#line 499
    tmp___0 = hweight_long(*bm & ~ mask);
#line 499
    cleared = (int )tmp___0;
#line 500
    *bm = *bm & mask;
#line 501
    bm = bm + 1;
  } else {

  }
#line 510
  bm_unmap(p_addr);
#line 511
  return (cleared);
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;

  {
#line 521
  tmp = (int )b->bm_bits & 32767;
#line 523
  mask = (1UL << (tmp & 63)) - 1UL;
#line 526
  mask = mask;
#line 528
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 529
  bm = p_addr + (unsigned long )(tmp / 64);
#line 530
  if (mask != 0UL) {
#line 535
    *bm = *bm | ~ mask;
#line 536
    bm = bm + 1;
  } else {

  }
#line 544
  bm_unmap(p_addr);
#line 545
  return;
}
}
#line 549 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long *p_addr ;
  unsigned long bits ;
  unsigned long mask ;
  int idx ;
  int i ;
  int last_word ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 552
  bits = 0UL;
#line 553
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 557
  idx = 0;
#line 557
  goto ldv_47170;
  ldv_47169: 
#line 558
  p_addr = __bm_map_pidx(b, (unsigned int )idx, KM_USER0);
#line 559
  i = 0;
#line 559
  goto ldv_47166;
  ldv_47165: 
#line 560
  tmp = hweight_long(*(p_addr + (unsigned long )i));
#line 560
  bits = tmp + bits;
#line 559
  i = i + 1;
  ldv_47166: ;
#line 559
  if ((unsigned int )i <= 511U) {
#line 560
    goto ldv_47165;
  } else {

  }
#line 561
  __bm_unmap(p_addr, KM_USER0);
#line 562
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                562, 0);
#line 562
  _cond_resched();
#line 557
  idx = idx + 1;
  ldv_47170: ;
#line 557
  if ((size_t )idx < b->bm_number_of_pages - 1UL) {
#line 558
    goto ldv_47169;
  } else {

  }
#line 565
  last_word = (int )(((b->bm_bits - 1UL) & 32767UL) >> 6);
#line 566
  p_addr = __bm_map_pidx(b, (unsigned int )idx, KM_USER0);
#line 567
  i = 0;
#line 567
  goto ldv_47173;
  ldv_47172: 
#line 568
  tmp___0 = hweight_long(*(p_addr + (unsigned long )i));
#line 568
  bits = tmp___0 + bits;
#line 567
  i = i + 1;
  ldv_47173: ;
#line 567
  if (i < last_word) {
#line 568
    goto ldv_47172;
  } else {

  }
#line 569
  *(p_addr + (unsigned long )last_word) = (unsigned long )((unsigned long long )*(p_addr + (unsigned long )last_word) & (unsigned long long )mask);
#line 570
  tmp___1 = hweight_long(*(p_addr + (unsigned long )last_word));
#line 570
  bits = tmp___1 + bits;
#line 574
  __bm_unmap(p_addr, KM_USER0);
#line 575
  return (bits);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned int idx ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 585
  end = offset + len;
#line 587
  if (b->bm_words < end) {
#line 588
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 589
    return;
  } else {

  }
#line 592
  goto ldv_47190;
  ldv_47189: 
#line 593
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 593
  __min2 = end;
#line 593
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 594
  idx = bm_word_to_page_idx(b, offset);
#line 595
  p_addr = bm_map_pidx(b, idx);
#line 596
  bm = p_addr + (offset & 511UL);
#line 597
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 598
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
  } else {
#line 601
    memset((void *)bm, c, do_now * 8UL);
  }
#line 602
  bm_unmap(p_addr);
#line 603
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
#line 604
  offset = offset + do_now;
  ldv_47190: ;
#line 592
  if (offset < end) {
#line 593
    goto ldv_47189;
  } else {

  }

#line 597
  return;
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  u64 bits_on_disk ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 618
  b = mdev->bitmap;
#line 621
  opages = 0;
#line 622
  err = 0;
#line 625
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 625
  if (_b != 0) {
#line 625
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            625);
  } else {

  }
#line 625
  if (_b != 0) {
#line 625
    return (-12);
  } else {

  }
#line 627
  drbd_bm_lock(mdev, (char *)"resize", BM_LOCKED_MASK);
#line 629
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 632
  if (b->bm_dev_capacity == capacity) {
#line 633
    goto out;
  } else {

  }
#line 635
  opages_vmalloced = (int )b->bm_flags & 65536;
#line 637
  if (capacity == 0UL) {
#line 638
    spin_lock_irq(& b->bm_lock);
#line 639
    opages = b->bm_pages;
#line 640
    onpages = b->bm_number_of_pages;
#line 641
    owords = b->bm_words;
#line 642
    b->bm_pages = 0;
#line 643
    tmp___2 = 0UL;
#line 643
    b->bm_dev_capacity = tmp___2;
#line 643
    tmp___1 = tmp___2;
#line 643
    b->bm_words = tmp___1;
#line 643
    tmp___0 = tmp___1;
#line 643
    b->bm_bits = tmp___0;
#line 643
    tmp = tmp___0;
#line 643
    b->bm_set = tmp;
#line 643
    b->bm_number_of_pages = tmp;
#line 648
    spin_unlock_irq(& b->bm_lock);
#line 649
    bm_free_pages(opages, onpages);
#line 650
    bm_vk_free((void *)opages, opages_vmalloced);
#line 651
    goto out;
  } else {

  }
#line 653
  bits = (capacity + 7UL) >> 3;
#line 660
  words = (bits + 63UL) >> 6;
#line 662
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 662
  if (tmp___3 != 0) {
#line 663
    bits_on_disk = ((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12;
#line 664
    put_ldev(mdev);
#line 665
    if ((unsigned long long )bits > bits_on_disk) {
#line 666
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits = %lu\n",
                bits);
#line 667
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits_on_disk = %llu\n",
                bits_on_disk);
#line 668
      err = -28;
#line 669
      goto out;
    } else {

    }
  } else {

  }
#line 673
  want = (words * 8UL + 4095UL) >> 12;
#line 674
  have = b->bm_number_of_pages;
#line 675
  if (want == have) {
#line 676
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 676
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
              676);
    } else {

    }
#line 677
    npages = b->bm_pages;
  } else {
#line 679
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 679
    if (tmp___4 != 0) {
#line 680
      npages = 0;
    } else {
#line 682
      npages = bm_realloc_pages(b, want);
    }
  }
#line 685
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 686
    err = -12;
#line 687
    goto out;
  } else {

  }
#line 690
  spin_lock_irq(& b->bm_lock);
#line 691
  opages = b->bm_pages;
#line 692
  owords = b->bm_words;
#line 693
  obits = b->bm_bits;
#line 695
  growing = bits > obits;
#line 696
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 697
    bm_set_surplus(b);
  } else {

  }
#line 699
  b->bm_pages = npages;
#line 700
  b->bm_number_of_pages = want;
#line 701
  b->bm_bits = bits;
#line 702
  b->bm_words = words;
#line 703
  b->bm_dev_capacity = capacity;
#line 705
  if (growing != 0) {
#line 706
    if (set_new_bits != 0) {
#line 707
      bm_memset(b, owords, 255, words - owords);
#line 708
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 710
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 714
  if (want < have) {
#line 716
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 719
  bm_clear_surplus(b);
#line 721
  spin_unlock_irq(& b->bm_lock);
#line 722
  if ((unsigned long )opages != (unsigned long )npages) {
#line 723
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 724
  if (growing == 0) {
#line 725
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 726
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu pages=%lu\n",
            bits, words, want);
  out: 
#line 729
  drbd_bm_unlock(mdev);
#line 730
  return (err);
}
}
#line 741 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 743
  b = mdev->bitmap;
#line 747
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 747
  if (_b != 0) {
#line 747
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            747);
  } else {

  }
#line 747
  if (_b != 0) {
#line 747
    return (0UL);
  } else {

  }
#line 748
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 748
  if (_b___0 != 0) {
#line 748
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            748);
  } else {

  }
#line 748
  if (_b___0 != 0) {
#line 748
    return (0UL);
  } else {

  }
#line 750
  tmp = spinlock_check(& b->bm_lock);
#line 750
  flags = _raw_spin_lock_irqsave(tmp);
#line 751
  s = b->bm_set;
#line 752
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 754
  return (s);
}
}
#line 757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 761
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 761
  if (tmp == 0) {
#line 762
    return (0UL);
  } else {

  }
#line 763
  s = _drbd_bm_total_weight(mdev);
#line 764
  put_ldev(mdev);
#line 765
  return (s);
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 770
  b = mdev->bitmap;
#line 771
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 771
  if (_b != 0) {
#line 771
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            771);
  } else {

  }
#line 771
  if (_b != 0) {
#line 771
    return (0UL);
  } else {

  }
#line 772
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 772
  if (_b___0 != 0) {
#line 772
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            772);
  } else {

  }
#line 772
  if (_b___0 != 0) {
#line 772
    return (0UL);
  } else {

  }
#line 774
  return (b->bm_words);
}
}
#line 777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 779
  b = mdev->bitmap;
#line 780
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 780
  if (_b != 0) {
#line 780
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            780);
  } else {

  }
#line 780
  if (_b != 0) {
#line 780
    return (0UL);
  } else {

  }
#line 782
  return (b->bm_bits);
}
}
#line 790 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  unsigned int idx ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 793
  b = mdev->bitmap;
#line 799
  end = offset + number;
#line 801
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 801
  if (_b != 0) {
#line 801
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            801);
  } else {

  }
#line 801
  if (_b != 0) {
#line 801
    return;
  } else {

  }
#line 802
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 802
  if (_b___0 != 0) {
#line 802
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            802);
  } else {

  }
#line 802
  if (_b___0 != 0) {
#line 802
    return;
  } else {

  }
#line 803
  if (number == 0UL) {
#line 804
    return;
  } else {

  }
#line 805
  __ret_warn_on = b->bm_words <= offset;
#line 805
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 805
  if (tmp != 0L) {
#line 805
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       805);
  } else {

  }
#line 805
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 806
  __ret_warn_on___0 = b->bm_words < end;
#line 806
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 806
  if (tmp___0 != 0L) {
#line 806
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       806);
  } else {

  }
#line 806
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 808
  spin_lock_irq(& b->bm_lock);
#line 809
  goto ldv_47279;
  ldv_47278: 
#line 810
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 810
  __min2 = end;
#line 810
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 811
  idx = bm_word_to_page_idx(b, offset);
#line 812
  p_addr = bm_map_pidx(b, idx);
#line 813
  bm = p_addr + (offset & 511UL);
#line 814
  offset = offset + do_now;
#line 815
  goto ldv_47276;
  ldv_47275: 
#line 816
  bits = hweight_long(*bm);
#line 817
  tmp___1 = buffer;
#line 817
  buffer = buffer + 1;
#line 817
  word = *bm | *tmp___1;
#line 818
  tmp___2 = bm;
#line 818
  bm = bm + 1;
#line 818
  *tmp___2 = word;
#line 819
  tmp___3 = hweight_long(word);
#line 819
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_47276: 
#line 815
  tmp___4 = do_now;
#line 815
  do_now = do_now - (size_t )1;
#line 815
  if (tmp___4 != 0UL) {
#line 816
    goto ldv_47275;
  } else {

  }
#line 821
  bm_unmap(p_addr);
#line 822
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
  ldv_47279: ;
#line 809
  if (offset < end) {
#line 810
    goto ldv_47278;
  } else {

  }

#line 829
  if (b->bm_words == end) {
#line 830
    tmp___5 = bm_clear_surplus(b);
#line 830
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 831
  spin_unlock_irq(& b->bm_lock);
#line 832
  return;
}
}
#line 837 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long *tmp___0 ;
  unsigned long *tmp___1 ;
  size_t tmp___2 ;

  {
#line 840
  b = mdev->bitmap;
#line 844
  end = offset + number;
#line 846
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 846
  if (_b != 0) {
#line 846
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            846);
  } else {

  }
#line 846
  if (_b != 0) {
#line 846
    return;
  } else {

  }
#line 847
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 847
  if (_b___0 != 0) {
#line 847
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            847);
  } else {

  }
#line 847
  if (_b___0 != 0) {
#line 847
    return;
  } else {

  }
#line 849
  spin_lock_irq(& b->bm_lock);
#line 850
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 853
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 858
    goto ldv_47304;
    ldv_47303: 
#line 859
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 859
    __min2 = end;
#line 859
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 860
    tmp = bm_word_to_page_idx(b, offset);
#line 860
    p_addr = bm_map_pidx(b, tmp);
#line 861
    bm = p_addr + (offset & 511UL);
#line 862
    offset = offset + do_now;
#line 863
    goto ldv_47301;
    ldv_47300: 
#line 864
    tmp___0 = buffer;
#line 864
    buffer = buffer + 1;
#line 864
    tmp___1 = bm;
#line 864
    bm = bm + 1;
#line 864
    *tmp___0 = *tmp___1;
    ldv_47301: 
#line 863
    tmp___2 = do_now;
#line 863
    do_now = do_now - (size_t )1;
#line 863
    if (tmp___2 != 0UL) {
#line 864
      goto ldv_47300;
    } else {

    }
#line 865
    bm_unmap(p_addr);
    ldv_47304: ;
#line 858
    if (offset < end) {
#line 859
      goto ldv_47303;
    } else {

    }

  }
#line 868
  spin_unlock_irq(& b->bm_lock);
#line 869
  return;
}
}
#line 872 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 874
  b = mdev->bitmap;
#line 875
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 875
  if (_b != 0) {
#line 875
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            875);
  } else {

  }
#line 875
  if (_b != 0) {
#line 875
    return;
  } else {

  }
#line 876
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 876
  if (_b___0 != 0) {
#line 876
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            876);
  } else {

  }
#line 876
  if (_b___0 != 0) {
#line 876
    return;
  } else {

  }
#line 878
  spin_lock_irq(& b->bm_lock);
#line 879
  bm_memset(b, 0UL, 255, b->bm_words);
#line 880
  bm_clear_surplus(b);
#line 881
  b->bm_set = b->bm_bits;
#line 882
  spin_unlock_irq(& b->bm_lock);
#line 883
  return;
}
}
#line 886 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 888
  b = mdev->bitmap;
#line 889
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 889
  if (_b != 0) {
#line 889
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            889);
  } else {

  }
#line 889
  if (_b != 0) {
#line 889
    return;
  } else {

  }
#line 890
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 890
  if (_b___0 != 0) {
#line 890
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            890);
  } else {

  }
#line 890
  if (_b___0 != 0) {
#line 890
    return;
  } else {

  }
#line 892
  spin_lock_irq(& b->bm_lock);
#line 893
  bm_memset(b, 0UL, 0, b->bm_words);
#line 894
  b->bm_set = 0UL;
#line 895
  spin_unlock_irq(& b->bm_lock);
#line 896
  return;
}
}
#line 908 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  unsigned int idx ;
  unsigned long tmp ;
  int uptodate ;
  int tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 910
  ctx = (struct bm_aio_ctx *)bio->bi_private;
#line 911
  mdev = ctx->mdev;
#line 912
  b = mdev->bitmap;
#line 913
  tmp = bm_page_to_idx((bio->bi_io_vec)->bv_page);
#line 913
  idx = (unsigned int )tmp;
#line 914
  uptodate = (int )bio->bi_flags & 1;
#line 921
  if (error == 0 && uptodate == 0) {
#line 922
    error = -5;
  } else {

  }
#line 924
  if ((ctx->flags & 1U) == 0U) {
#line 924
    tmp___0 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )idx));
#line 924
    if (tmp___0 == 0) {
#line 926
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap page idx %u changed during IO!\n",
               idx);
    } else {

    }
  } else {

  }
#line 928
  if (error != 0) {
#line 931
    ctx->error = error;
#line 932
    bm_set_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 935
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "bm_async_io_complete");
#line 935
    if (tmp___1 != 0) {
#line 936
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR %d on bitmap page idx %u\n",
              error, idx);
    } else {

    }
  } else {
#line 939
    bm_clear_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 940
    descriptor.modname = "drbd";
#line 940
    descriptor.function = "bm_async_io_complete";
#line 940
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 940
    descriptor.format = "bitmap page idx %u completed\n";
#line 940
    descriptor.lineno = 940U;
#line 940
    descriptor.flags = 0U;
#line 940
    descriptor.enabled = (char)0;
#line 940
    tmp___2 = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 940
    if (tmp___2 != 0L) {
#line 940
      dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap page idx %u completed\n",
                 idx);
    } else {

    }
  }
#line 943
  bm_page_unlock_io(mdev, (int )idx);
#line 946
  if ((int )ctx->flags & 1) {
#line 947
    put_page((bio->bi_io_vec)->bv_page);
  } else {

  }
#line 949
  bio_put(bio);
#line 951
  tmp___3 = atomic_dec_and_test(& ctx->in_flight);
#line 951
  if (tmp___3 != 0) {
#line 952
    complete(& ctx->done);
  } else {

  }
#line 953
  return;
}
}
#line 955 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct bm_aio_ctx *ctx , int page_nr , int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  struct page *page ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  void *src ;
  void *dest ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;

  {
#line 958
  tmp = bio_alloc(208U, 1);
#line 958
  bio = tmp;
#line 959
  mdev = ctx->mdev;
#line 960
  b = mdev->bitmap;
#line 964
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 966
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 971
  __min1 = 4096U;
#line 971
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 971
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 971
  len = __min1 < __min2 ? __min1 : __min2;
#line 975
  bm_page_lock_io(mdev, page_nr);
#line 978
  bm_set_page_unchanged(*(b->bm_pages + (unsigned long )page_nr));
#line 980
  if ((int )ctx->flags & 1) {
#line 984
    page = alloc_pages(18U, 0U);
#line 985
    dest = __kmap_atomic(page);
#line 986
    src = __kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 987
    __len = 4096UL;
#line 987
    if (__len > 63UL) {
#line 987
      __ret = __memcpy(dest, (void const   *)src, __len);
    } else {
#line 987
      __ret = __builtin_memcpy(dest, (void const   *)src, __len);
    }
#line 988
    __kunmap_atomic(src);
#line 989
    __kunmap_atomic(dest);
#line 990
    bm_store_page_idx(page, (unsigned long )page_nr);
  } else {
#line 992
    page = *(b->bm_pages + (unsigned long )page_nr);
  }
#line 994
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 995
  bio->bi_sector = on_disk_sector;
#line 996
  bio_add_page(bio, page, len, 0U);
#line 997
  bio->bi_private = (void *)ctx;
#line 998
  bio->bi_end_io = & bm_async_io_complete;
#line 1000
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 1000
  if (tmp___1 != 0) {
#line 1001
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 1002
    bio_endio(bio, -5);
  } else {
#line 1004
    submit_bio(rw, bio);
  }
#line 1005
  return;
}
}
#line 1011 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw , unsigned int lazy_writeout_upper_idx ) 
{ 
  struct bm_aio_ctx ctx ;
  struct drbd_bitmap *b ;
  int num_pages ;
  int i ;
  int count ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  long tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor___0 ;
  long tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char *tmp___5 ;

  {
#line 1016
  init_completion(& ctx.done);
#line 1016
  ctx.mdev = mdev;
#line 1016
  ctx.in_flight.counter = 1;
#line 1016
  ctx.done = ctx.done;
#line 1016
  ctx.flags = lazy_writeout_upper_idx != 0U;
#line 1016
  ctx.error = 0;
#line 1019
  b = mdev->bitmap;
#line 1020
  count = 0;
#line 1023
  err = 0;
#line 1033
  if (ctx.flags == 0U) {
#line 1034
    __ret_warn_on = ((unsigned int )b->bm_flags & 7U) == 0U;
#line 1034
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 1034
    if (tmp != 0L) {
#line 1034
      warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                         1034);
    } else {

    }
#line 1034
    __builtin_expect(__ret_warn_on != 0, 0L);
  } else {

  }
#line 1036
  num_pages = (int )b->bm_number_of_pages;
#line 1038
  now = jiffies;
#line 1041
  i = 0;
#line 1041
  goto ldv_47383;
  ldv_47382: ;
#line 1043
  if (lazy_writeout_upper_idx != 0U && (unsigned int )i == lazy_writeout_upper_idx) {
#line 1044
    goto ldv_47376;
  } else {

  }
#line 1045
  if (rw & 1) {
#line 1046
    tmp___1 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )i));
#line 1046
    if (tmp___1 != 0) {
#line 1047
      descriptor.modname = "drbd";
#line 1047
      descriptor.function = "bm_rw";
#line 1047
      descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1047
      descriptor.format = "skipped bm write for idx %u\n";
#line 1047
      descriptor.lineno = 1047U;
#line 1047
      descriptor.flags = 0U;
#line 1047
      descriptor.enabled = (char)0;
#line 1047
      tmp___0 = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 1047
      if (tmp___0 != 0L) {
#line 1047
        dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                   "skipped bm write for idx %u\n", i);
      } else {

      }
#line 1048
      goto ldv_47379;
    } else {

    }
#line 1052
    if (lazy_writeout_upper_idx != 0U) {
#line 1052
      tmp___3 = bm_test_page_lazy_writeout(*(b->bm_pages + (unsigned long )i));
#line 1052
      if (tmp___3 == 0) {
#line 1054
        descriptor___0.modname = "drbd";
#line 1054
        descriptor___0.function = "bm_rw";
#line 1054
        descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1054
        descriptor___0.format = "skipped bm lazy write for idx %u\n";
#line 1054
        descriptor___0.lineno = 1054U;
#line 1054
        descriptor___0.flags = 0U;
#line 1054
        descriptor___0.enabled = (char)0;
#line 1054
        tmp___2 = __builtin_expect((int )((signed char )descriptor___0.enabled) != 0,
                                   0L);
#line 1054
        if (tmp___2 != 0L) {
#line 1054
          dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                     "skipped bm lazy write for idx %u\n", i);
        } else {

        }
#line 1055
        goto ldv_47379;
      } else {

      }
    } else {

    }
  } else {

  }
#line 1058
  atomic_inc(& ctx.in_flight);
#line 1059
  bm_page_io_async(& ctx, i, rw);
#line 1060
  count = count + 1;
#line 1061
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1061, 0);
#line 1061
  _cond_resched();
  ldv_47379: 
#line 1041
  i = i + 1;
  ldv_47383: ;
#line 1041
  if (i < num_pages) {
#line 1042
    goto ldv_47382;
  } else {

  }
  ldv_47376: 
#line 1069
  tmp___4 = atomic_dec_and_test(& ctx.in_flight);
#line 1069
  if (tmp___4 == 0) {
#line 1070
    wait_for_completion(& ctx.done);
  } else {

  }
#line 1071
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap %s of %u pages took %lu jiffies\n",
            rw == 1 ? (char *)"WRITE" : (char *)"READ", count, (unsigned long )jiffies - now);
#line 1075
  if (ctx.error != 0) {
#line 1076
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 1077
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 1078
    err = -5;
  } else {

  }
#line 1081
  now = jiffies;
#line 1082
  if (rw == 1) {
#line 1083
    drbd_md_flush(mdev);
  } else {
#line 1085
    b->bm_set = bm_count_bits(b);
#line 1086
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 1089
  now = b->bm_set;
#line 1091
  tmp___5 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 1091
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___5, now);
#line 1094
  return (err);
}
}
#line 1101 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1103
  tmp = bm_rw(mdev, 0, 0U);
#line 1103
  return (tmp);
}
}
#line 1112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1114
  tmp = bm_rw(mdev, 1, 0U);
#line 1114
  return (tmp);
}
}
#line 1122 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_lazy(struct drbd_conf *mdev , unsigned int upper_idx ) 
{ 
  int tmp ;

  {
#line 1124
  tmp = bm_rw(mdev, 1, upper_idx);
#line 1124
  return (tmp);
}
}
#line 1140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) 
{ 
  struct bm_aio_ctx ctx ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;

  {
#line 1145
  init_completion(& ctx.done);
#line 1145
  ctx.mdev = mdev;
#line 1145
  ctx.in_flight.counter = 1;
#line 1145
  ctx.done = ctx.done;
#line 1145
  ctx.flags = 1U;
#line 1145
  ctx.error = 0;
#line 1149
  tmp___0 = bm_test_page_unchanged(*((mdev->bitmap)->bm_pages + (unsigned long )idx));
#line 1149
  if (tmp___0 != 0) {
#line 1150
    descriptor.modname = "drbd";
#line 1150
    descriptor.function = "drbd_bm_write_page";
#line 1150
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1150
    descriptor.format = "skipped bm page write for idx %u\n";
#line 1150
    descriptor.lineno = 1150U;
#line 1150
    descriptor.flags = 0U;
#line 1150
    descriptor.enabled = (char)0;
#line 1150
    tmp = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 1150
    if (tmp != 0L) {
#line 1150
      dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipped bm page write for idx %u\n",
                 idx);
    } else {

    }
#line 1151
    return (0);
  } else {

  }
#line 1154
  bm_page_io_async(& ctx, (int )idx, 145);
#line 1155
  wait_for_completion(& ctx.done);
#line 1157
  if (ctx.error != 0) {
#line 1158
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_page");
  } else {

  }
#line 1162
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 1163
  return (ctx.error);
}
}
#line 1174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned int i ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 1177
  b = mdev->bitmap;
#line 1183
  if (b->bm_bits < bm_fo) {
#line 1184
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
#line 1185
    bm_fo = 0xffffffffffffffffUL;
  } else {
#line 1187
    goto ldv_47415;
    ldv_47414: 
#line 1189
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 1190
    tmp = bm_bit_to_page_idx(b, (u64 )bm_fo);
#line 1190
    p_addr = __bm_map_pidx(b, tmp, km);
#line 1192
    if ((int )find_zero_bit != 0) {
#line 1193
      tmp___0 = find_next_zero_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1193
      i = (unsigned int )tmp___0;
    } else {
#line 1196
      tmp___1 = find_next_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1196
      i = (unsigned int )tmp___1;
    }
#line 1199
    __bm_unmap(p_addr, km);
#line 1200
    if (i <= 32767U) {
#line 1201
      bm_fo = (unsigned long )i + bit_offset;
#line 1202
      if (b->bm_bits <= bm_fo) {
#line 1203
        goto ldv_47412;
      } else {

      }
#line 1204
      goto found;
    } else {

    }
#line 1206
    bm_fo = bit_offset + 32768UL;
    ldv_47415: ;
#line 1187
    if (b->bm_bits > bm_fo) {
#line 1188
      goto ldv_47414;
    } else {

    }
    ldv_47412: 
#line 1208
    bm_fo = 0xffffffffffffffffUL;
  }
  found: ;
#line 1211
  return (bm_fo);
}
}
#line 1214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;

  {
#line 1217
  b = mdev->bitmap;
#line 1218
  i = 0xffffffffffffffffUL;
#line 1220
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1220
  if (_b != 0) {
#line 1220
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1220);
  } else {

  }
#line 1220
  if (_b != 0) {
#line 1220
    return (i);
  } else {

  }
#line 1221
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1221
  if (_b___0 != 0) {
#line 1221
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1221);
  } else {

  }
#line 1221
  if (_b___0 != 0) {
#line 1221
    return (i);
  } else {

  }
#line 1223
  spin_lock_irq(& b->bm_lock);
#line 1224
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1225
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1227
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 1229
  spin_unlock_irq(& b->bm_lock);
#line 1230
  return (i);
}
}
#line 1233 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1235
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1235
  return (tmp);
}
}
#line 1248 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1251
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1251
  return (tmp);
}
}
#line 1254 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1257
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1257
  return (tmp);
}
}
#line 1266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int last_page_nr ;
  int c ;
  int changed_total ;
  unsigned int page_nr ;
  unsigned int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1269
  b = mdev->bitmap;
#line 1270
  p_addr = 0;
#line 1272
  last_page_nr = 4294967295U;
#line 1273
  c = 0;
#line 1274
  changed_total = 0;
#line 1276
  if (b->bm_bits <= e) {
#line 1277
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1279
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1281
  bitnr = s;
#line 1281
  goto ldv_47455;
  ldv_47454: 
#line 1282
  tmp = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1282
  page_nr = tmp;
#line 1283
  if (page_nr != last_page_nr) {
#line 1284
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1285
      __bm_unmap(p_addr, km);
    } else {

    }
#line 1286
    if (c < 0) {
#line 1287
      bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else
#line 1288
    if (c > 0) {
#line 1289
      bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else {

    }
#line 1290
    changed_total = changed_total + c;
#line 1291
    c = 0;
#line 1292
    p_addr = __bm_map_pidx(b, page_nr, km);
#line 1293
    last_page_nr = page_nr;
  } else {

  }
#line 1295
  if (val != 0) {
#line 1296
    tmp___0 = __test_and_set_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1296
    c = (tmp___0 == 0) + c;
  } else {
#line 1298
    tmp___1 = __test_and_clear_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1298
    c = c - (tmp___1 != 0);
  }
#line 1281
  bitnr = bitnr + 1UL;
  ldv_47455: ;
#line 1281
  if (bitnr <= e) {
#line 1282
    goto ldv_47454;
  } else {

  }

#line 1300
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1301
    __bm_unmap(p_addr, km);
  } else {

  }
#line 1302
  if (c < 0) {
#line 1303
    bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else
#line 1304
  if (c > 0) {
#line 1305
    bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else {

  }
#line 1306
  changed_total = changed_total + c;
#line 1307
  b->bm_set = b->bm_set + (unsigned long )changed_total;
#line 1308
  return (changed_total);
}
}
#line 1315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 1319
  b = mdev->bitmap;
#line 1320
  c = 0;
#line 1322
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1322
  if (_b != 0) {
#line 1322
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1322);
  } else {

  }
#line 1322
  if (_b != 0) {
#line 1322
    return (1);
  } else {

  }
#line 1323
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1323
  if (_b___0 != 0) {
#line 1323
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1323);
  } else {

  }
#line 1323
  if (_b___0 != 0) {
#line 1323
    return (0);
  } else {

  }
#line 1325
  tmp = spinlock_check(& b->bm_lock);
#line 1325
  flags = _raw_spin_lock_irqsave(tmp);
#line 1326
  if (((val != 0 ? 2U : 1U) & (unsigned int )b->bm_flags) != 0U) {
#line 1327
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1329
  c = __bm_change_bits_to(mdev, s, e, val, KM_IRQ1);
#line 1331
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1332
  return (c);
}
}
#line 1336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1338
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1338
  return (tmp);
}
}
#line 1342 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1344
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1344
  return (- tmp);
}
}
#line 1349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1354
  tmp = __kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1354
  paddr = (unsigned long *)tmp;
#line 1355
  i = first_word;
#line 1355
  goto ldv_47494;
  ldv_47493: 
#line 1356
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1356
  bits = (int )tmp___0;
#line 1357
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1358
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1355
  i = i + 1;
  ldv_47494: ;
#line 1355
  if (i < last_word) {
#line 1356
    goto ldv_47493;
  } else {

  }
#line 1360
  __kunmap_atomic((void *)paddr);
#line 1361
  return;
}
}
#line 1367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1377
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1378
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1385
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1387
    __bm_change_bits_to(mdev, s, e, 1, KM_USER0);
#line 1388
    return;
  } else {

  }
#line 1394
  if (sl != 0UL) {
#line 1395
    __bm_change_bits_to(mdev, s, sl - 1UL, 1, KM_USER0);
  } else {

  }
#line 1397
  first_page = (int )(sl >> 15);
#line 1398
  last_page = (int )(el >> 15);
#line 1402
  first_word = (int )(sl >> 6) & 511;
#line 1403
  last_word = 512;
#line 1406
  page_nr = first_page;
#line 1406
  goto ldv_47510;
  ldv_47509: 
#line 1407
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1408
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1408, 0);
#line 1408
  _cond_resched();
#line 1409
  first_word = 0;
#line 1406
  page_nr = page_nr + 1;
  ldv_47510: ;
#line 1406
  if (page_nr < last_page) {
#line 1407
    goto ldv_47509;
  } else {

  }
#line 1413
  last_word = (int )(el >> 6) & 511;
#line 1414
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1421
  if (el <= (unsigned long )e) {
#line 1422
    __bm_change_bits_to(mdev, el, e, 1, KM_USER0);
  } else {

  }
#line 1423
  return;
}
}
#line 1432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
#line 1435
  b = mdev->bitmap;
#line 1439
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1439
  if (_b != 0) {
#line 1439
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1439);
  } else {

  }
#line 1439
  if (_b != 0) {
#line 1439
    return (0);
  } else {

  }
#line 1440
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1440
  if (_b___0 != 0) {
#line 1440
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1440);
  } else {

  }
#line 1440
  if (_b___0 != 0) {
#line 1440
    return (0);
  } else {

  }
#line 1442
  tmp = spinlock_check(& b->bm_lock);
#line 1442
  flags = _raw_spin_lock_irqsave(tmp);
#line 1443
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1444
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1445
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1446
    tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1446
    p_addr = bm_map_pidx(b, tmp___0);
#line 1447
    tmp___1 = test_bit_le((int )bitnr & 32767, (void const   *)p_addr);
#line 1447
    i = tmp___1 != 0;
#line 1448
    bm_unmap(p_addr);
  } else
#line 1449
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1450
    i = -1;
  } else {
#line 1452
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1453
    i = 0;
  }
#line 1456
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1457
  return (i);
}
}
#line 1461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int page_nr ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int idx ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1464
  b = mdev->bitmap;
#line 1465
  p_addr = 0;
#line 1467
  page_nr = 4294967295U;
#line 1468
  c = 0;
#line 1474
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1474
  if (_b != 0) {
#line 1474
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1474);
  } else {

  }
#line 1474
  if (_b != 0) {
#line 1474
    return (1);
  } else {

  }
#line 1475
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1475
  if (_b___0 != 0) {
#line 1475
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1475);
  } else {

  }
#line 1475
  if (_b___0 != 0) {
#line 1475
    return (1);
  } else {

  }
#line 1477
  tmp = spinlock_check(& b->bm_lock);
#line 1477
  flags = _raw_spin_lock_irqsave(tmp);
#line 1478
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1479
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1480
  bitnr = s;
#line 1480
  goto ldv_47551;
  ldv_47550: 
#line 1481
  tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1481
  idx = tmp___0;
#line 1482
  if (page_nr != idx) {
#line 1483
    page_nr = idx;
#line 1484
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1485
      bm_unmap(p_addr);
    } else {

    }
#line 1486
    p_addr = bm_map_pidx(b, idx);
  } else {

  }
#line 1488
  _b___1 = b->bm_bits <= bitnr;
#line 1488
  if (_b___1 != 0) {
#line 1488
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1488);
  } else {

  }
#line 1488
  if (_b___1 != 0) {
#line 1489
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1491
    tmp___1 = test_bit_le((int )((unsigned int )bitnr - (page_nr << 15)), (void const   *)p_addr);
#line 1491
    c = (tmp___1 != 0) + c;
  }
#line 1480
  bitnr = bitnr + 1UL;
  ldv_47551: ;
#line 1480
  if (bitnr <= (unsigned long )e) {
#line 1481
    goto ldv_47550;
  } else {

  }

#line 1494
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1495
    bm_unmap(p_addr);
  } else {

  }
#line 1496
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1497
  return (c);
}
}
#line 1515 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned int tmp___0 ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1517
  b = mdev->bitmap;
#line 1522
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1522
  if (_b != 0) {
#line 1522
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1522);
  } else {

  }
#line 1522
  if (_b != 0) {
#line 1522
    return (0);
  } else {

  }
#line 1523
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1523
  if (_b___0 != 0) {
#line 1523
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1523);
  } else {

  }
#line 1523
  if (_b___0 != 0) {
#line 1523
    return (0);
  } else {

  }
#line 1525
  tmp = spinlock_check(& b->bm_lock);
#line 1525
  flags = _raw_spin_lock_irqsave(tmp);
#line 1526
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1527
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1529
  s = (int )(enr << 6);
#line 1530
  _min1 = (enr + 1UL) << 6;
#line 1530
  _min2 = b->bm_words;
#line 1530
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1531
  count = 0;
#line 1532
  if ((size_t )s < b->bm_words) {
#line 1533
    n = e - s;
#line 1534
    tmp___0 = bm_word_to_page_idx(b, (unsigned long )s);
#line 1534
    p_addr = bm_map_pidx(b, tmp___0);
#line 1535
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1536
    goto ldv_47577;
    ldv_47576: 
#line 1537
    tmp___1 = bm;
#line 1537
    bm = bm + 1;
#line 1537
    tmp___2 = hweight_long(*tmp___1);
#line 1537
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_47577: 
#line 1536
    tmp___3 = n;
#line 1536
    n = n - 1;
#line 1536
    if (tmp___3 != 0) {
#line 1537
      goto ldv_47576;
    } else {

    }
#line 1538
    bm_unmap(p_addr);
  } else {
#line 1540
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1542
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1543
  return (count);
}
}
#line 1548 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  unsigned long s ;
  unsigned long e ;
  int count ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1550
  b = mdev->bitmap;
#line 1555
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1555
  if (_b != 0) {
#line 1555
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1555);
  } else {

  }
#line 1555
  if (_b != 0) {
#line 1555
    return (0UL);
  } else {

  }
#line 1556
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1556
  if (_b___0 != 0) {
#line 1556
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1556);
  } else {

  }
#line 1556
  if (_b___0 != 0) {
#line 1556
    return (0UL);
  } else {

  }
#line 1558
  spin_lock_irq(& b->bm_lock);
#line 1559
  if (((unsigned int )b->bm_flags & 2U) != 0U) {
#line 1560
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1561
  weight = b->bm_set;
#line 1563
  s = al_enr * 16UL;
#line 1564
  __min1 = s + 16UL;
#line 1564
  __min2 = b->bm_words;
#line 1564
  e = __min1 < __min2 ? __min1 : __min2;
#line 1566
  if ((e - 1UL) >> 9 != s >> 9) {
#line 1566
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1567);
  } else {

  }
#line 1568
  count = 0;
#line 1569
  if (b->bm_words > s) {
#line 1570
    do_now = (int )((unsigned int )e - (unsigned int )s);
#line 1570
    i = do_now;
#line 1571
    tmp = bm_word_to_page_idx(b, s);
#line 1571
    p_addr = bm_map_pidx(b, tmp);
#line 1572
    bm = p_addr + (s & 511UL);
#line 1573
    goto ldv_47601;
    ldv_47600: 
#line 1574
    tmp___0 = hweight_long(*bm);
#line 1574
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1575
    *bm = 0xffffffffffffffffUL;
#line 1576
    bm = bm + 1;
    ldv_47601: 
#line 1573
    tmp___1 = i;
#line 1573
    i = i - 1;
#line 1573
    if (tmp___1 != 0) {
#line 1574
      goto ldv_47600;
    } else {

    }
#line 1578
    bm_unmap(p_addr);
#line 1579
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1580
    if (b->bm_words == e) {
#line 1581
      tmp___2 = bm_clear_surplus(b);
#line 1581
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1583
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%lu) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1585
  weight = b->bm_set - weight;
#line 1586
  spin_unlock_irq(& b->bm_lock);
#line 1587
  return (weight);
}
}
#line 1606
void ldv_check_final_state(void) ;
#line 1615
extern void ldv_initialize(void) ;
#line 1621
extern int nondet_int(void) ;
#line 1624 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 1627 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 1639
  LDV_IN_INTERRUPT = 1;
#line 1648
  ldv_initialize();
#line 1650
  goto ldv_47622;
  ldv_47621: 
#line 1653
  tmp = nondet_int();
#line 1653
  switch (tmp) {
  default: ;
#line 1655
  goto ldv_47620;
  }
  ldv_47620: ;
  ldv_47622: 
#line 1650
  tmp___0 = nondet_int();
#line 1650
  if (tmp___0 != 0) {
#line 1651
    goto ldv_47621;
  } else {

  }


#line 1664
  ldv_check_final_state();
#line 1667
  return;
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 96 "include/linux/module.h"
extern struct module __this_module ;
#line 534
__inline static int ldv_try_module_get_1(struct module *module ) ;
#line 540
void ldv_module_put_2(struct module *ldv_func_arg1 ) ;
#line 3 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_try_module_get(struct module *module ) ;
#line 5
void ldv_module_put(struct module *module ) ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 303
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 304
char const   *drbd_role_str(enum drbd_role s ) ;
#line 305
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 157
struct drbd_conf **minor_table ;
#line 1135 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1139
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1141
  return (mdev);
}
}
#line 1508
int proc_details ;
#line 1651 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1652
struct file_operations  const  drbd_proc_fops ;
#line 2193 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned int shift ;
  unsigned long left ;
  unsigned long total ;
  unsigned long tmp___1 ;

  {
#line 2204
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 2205
    *bits_left = mdev->ov_left;
  } else {
#line 2207
    tmp = drbd_bm_total_weight(mdev);
#line 2207
    *bits_left = tmp - mdev->rs_failed;
  }
#line 2210
  if (*bits_left > mdev->rs_total) {
#line 2216
    __asm__  volatile   ("": : : "memory");
#line 2217
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_37520.conn);
#line 2217
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2220
    *per_mil_done = 0U;
  } else {
#line 2231
    shift = (unsigned long long )mdev->rs_total > 4294967295ULL ? 16U : 10U;
#line 2232
    left = *bits_left >> (int )shift;
#line 2233
    total = (mdev->rs_total >> (int )shift) + 1UL;
#line 2234
    tmp___1 = 1000UL - (left * 1000UL) / total;
#line 2235
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2237
  return;
}
}
#line 2323 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int is_susp(union drbd_state s ) 
{ 


  {
#line 2325
  return (((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 45
static int drbd_proc_release(struct inode *inode , struct file *file ) ;
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 49
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & drbd_proc_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void seq_printf_with_thousands_grouping(struct seq_file *seq , long v ) 
{ 
  long tmp ;
  long tmp___0 ;

  {
#line 60
  tmp___0 = __builtin_expect(v > 999999L, 0L);
#line 60
  if (tmp___0 != 0L) {
#line 62
    seq_printf(seq, "%ld,", v / 1000000L);
#line 63
    v = v / 1000000L;
#line 64
    seq_printf(seq, "%03ld,%03ld", v / 1000L, v % 1000L);
  } else {
#line 65
    tmp = __builtin_expect(v > 999L, 1L);
#line 65
    if (tmp != 0L) {
#line 66
      seq_printf(seq, "%ld,%03ld", v / 1000L, v % 1000L);
    } else {
#line 68
      seq_printf(seq, "%ld", v);
    }
  }
#line 69
  return;
}
}
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;
  int stalled ;
  unsigned long bm_bits ;
  unsigned long tmp ;
  unsigned long bit_pos ;

  {
#line 82
  stalled = 0;
#line 84
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 86
  x = (int )(res / 50U);
#line 87
  y = 20 - x;
#line 88
  seq_printf(seq, "\t[");
#line 89
  i = 1;
#line 89
  goto ldv_47048;
  ldv_47047: 
#line 90
  seq_printf(seq, "=");
#line 89
  i = i + 1;
  ldv_47048: ;
#line 89
  if (i < x) {
#line 90
    goto ldv_47047;
  } else {

  }
#line 91
  seq_printf(seq, ">");
#line 92
  i = 0;
#line 92
  goto ldv_47051;
  ldv_47050: 
#line 93
  seq_printf(seq, ".");
#line 92
  i = i + 1;
  ldv_47051: ;
#line 92
  if (i < y) {
#line 93
    goto ldv_47050;
  } else {

  }
#line 94
  seq_printf(seq, "] ");
#line 96
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 97
    seq_printf(seq, "verified:");
  } else {
#line 99
    seq_printf(seq, "sync\'ed:");
  }
#line 100
  seq_printf(seq, "%3u.%u%% ", res / 10U, res % 10U);
#line 103
  if (mdev->rs_total > 1048576UL) {
#line 104
    seq_printf(seq, "(%lu/%lu)M", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 108
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 125
  i = (mdev->rs_last_mark + 2) % 8;
#line 126
  dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 127
  if (dt > 6000UL) {
#line 128
    stalled = 1;
  } else {

  }
#line 130
  if (dt == 0UL) {
#line 131
    dt = dt + 1UL;
  } else {

  }
#line 132
  db = mdev->rs_mark_left[i] - rs_left;
#line 133
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 135
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 138
  dbdt = db / dt << 2;
#line 139
  seq_printf(seq, " speed: ");
#line 140
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 141
  seq_printf(seq, " (");
#line 143
  if (proc_details > 0) {
#line 145
    i = (mdev->rs_last_mark + 7) % 8;
#line 146
    dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 147
    if (dt == 0UL) {
#line 148
      dt = dt + 1UL;
    } else {

    }
#line 149
    db = mdev->rs_mark_left[i] - rs_left;
#line 150
    dbdt = db / dt << 2;
#line 151
    seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 152
    seq_printf(seq, " -- ");
  } else {

  }
#line 158
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 159
  if (dt == 0UL) {
#line 160
    dt = 1UL;
  } else {

  }
#line 161
  db = mdev->rs_total - rs_left;
#line 162
  dbdt = db / dt << 2;
#line 163
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 164
  seq_printf(seq, ")");
#line 166
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 272U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) {
#line 168
    seq_printf(seq, " want: ");
#line 169
    seq_printf_with_thousands_grouping(seq, (long )mdev->c_sync_rate);
  } else {

  }
#line 171
  seq_printf(seq, " K/sec%s\n", stalled != 0 ? (char *)" (stalled)" : (char *)"");
#line 173
  if (proc_details > 0) {
#line 176
    tmp = drbd_bm_bits(mdev);
#line 176
    bm_bits = tmp;
#line 178
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 180
      bit_pos = bm_bits - mdev->ov_left;
    } else {
#line 182
      bit_pos = mdev->bm_resync_fo;
    }
#line 185
    seq_printf(seq, "\t%3d%% sector pos: %llu/%llu\n", (int )(bit_pos / (bm_bits / 100UL + 1UL)),
               (unsigned long long )bit_pos * 8ULL, (unsigned long long )bm_bits * 8ULL);
  } else {

  }
#line 191
  return;
}
}
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 195
  __mptr = (struct lc_element  const  *)e;
#line 195
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 197
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 200
  return;
}
}
#line 203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[3U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;

  {
#line 205
  hole = 0;
#line 209
  write_ordering_chars[0] = 110;
#line 209
  write_ordering_chars[1] = 100;
#line 209
  write_ordering_chars[2] = 102;
#line 215
  tmp = drbd_buildtag();
#line 215
  seq_printf(seq, "version: 8.3.10 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 96, tmp);
#line 238
  i = 0;
#line 238
  goto ldv_47073;
  ldv_47072: 
#line 239
  mdev = minor_to_mdev((unsigned int )i);
#line 240
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 241
    hole = 1;
#line 242
    goto ldv_47071;
  } else {

  }
#line 244
  if (hole != 0) {
#line 245
    hole = 0;
#line 246
    seq_printf(seq, "\n");
  } else {

  }
#line 249
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_37520.conn);
#line 251
  if (((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 254
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 256
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 256
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 256
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 256
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 256
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 256
    tmp___5 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 256
    tmp___6 = is_susp(mdev->state);
#line 256
    tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37520.pdsk);
#line 256
    tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37520.disk);
#line 256
    tmp___9 = drbd_role_str((enum drbd_role )mdev->state.ldv_37520.peer);
#line 256
    tmp___10 = drbd_role_str((enum drbd_role )mdev->state.ldv_37520.role);
#line 256
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___10, tmp___9, tmp___8, tmp___7, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               tmp___6 != 0 ? 115 : 114, (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 97 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               tmp___5 != 0 ? 115 : 45, mdev->send_cnt / 2U, mdev->recv_cnt / 2U,
               mdev->writ_cnt / 2U, mdev->read_cnt / 2U, mdev->al_writ_cnt, mdev->bm_writ_cnt,
               tmp___4, tmp___2 + tmp___3, tmp___1, tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 287
    tmp___11 = drbd_bm_total_weight(mdev);
#line 287
    seq_printf(seq, " oos:%llu\n", (unsigned long long )tmp___11 << 2);
  }
#line 291
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 295
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 297
  if (proc_details > 0) {
#line 297
    tmp___12 = _get_ldev_if_state(mdev, D_FAILED);
#line 297
    if (tmp___12 != 0) {
#line 298
      lc_seq_printf_stats(seq, mdev->resync);
#line 299
      lc_seq_printf_stats(seq, mdev->act_log);
#line 300
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 303
  if (proc_details > 1) {
#line 304
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 305
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_47071: 
#line 238
  i = i + 1;
  ldv_47073: ;
#line 238
  if ((unsigned int )i < minor_count) {
#line 239
    goto ldv_47072;
  } else {

  }

#line 311
  return (0);
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 316
  tmp___1 = ldv_try_module_get_1(& __this_module);
#line 316
  if (tmp___1 != 0) {
#line 317
    tmp = PDE((struct inode  const  *)inode);
#line 317
    tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 317
    return (tmp___0);
  } else {

  }
#line 318
  return (-19);
}
}
#line 321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_release(struct inode *inode , struct file *file ) 
{ 
  int tmp ;

  {
#line 323
  ldv_module_put_2(& __this_module);
#line 324
  tmp = single_release(inode, file);
#line 324
  return (tmp);
}
}
#line 348
extern void ldv_check_return_value(int  ) ;
#line 357
extern void ldv_handler_precall(void) ;
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_main1_sequence_infinite_withcheck_stateful(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_4 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 400
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 390
  LDV_IN_INTERRUPT = 1;
#line 399
  ldv_initialize();
#line 403
  goto ldv_47109;
  ldv_47108: 
#line 407
  tmp = nondet_int();
#line 407
  switch (tmp) {
  case 0: ;
#line 412
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 417
    ldv_handler_precall();
#line 418
    res_drbd_proc_open_4 = drbd_proc_open(var_group1, var_group2);
#line 419
    ldv_check_return_value(res_drbd_proc_open_4);
#line 420
    if (res_drbd_proc_open_4 != 0) {
#line 421
      goto ldv_module_exit;
    } else {

    }
#line 422
    ldv_s_drbd_proc_fops_file_operations = ldv_s_drbd_proc_fops_file_operations + 1;
  } else {

  }
#line 428
  goto ldv_47105;
  case 1: ;
#line 432
  if (ldv_s_drbd_proc_fops_file_operations == 1) {
#line 437
    ldv_handler_precall();
#line 438
    drbd_proc_release(var_group1, var_group2);
#line 439
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 445
  goto ldv_47105;
  default: ;
#line 446
  goto ldv_47105;
  }
  ldv_47105: ;
  ldv_47109: 
#line 403
  tmp___0 = nondet_int();
#line 403
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 405
    goto ldv_47108;
  } else {

  }

  ldv_module_exit: ;
#line 455
  ldv_check_final_state();
#line 458
  return;
}
}
#line 462 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
__inline static int ldv_try_module_get_1(struct module *module ) 
{ 
  int tmp ;

  {
#line 467
  tmp = ldv_try_module_get(module);
#line 467
  return (tmp);
}
}
#line 470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_module_put_2(struct module *ldv_func_arg1 ) 
{ 


  {
#line 475
  ldv_module_put(ldv_func_arg1);
#line 476
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 260 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg_64.h"
extern void __xchg_wrong_size(void) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 62
  __list_add(new, head, head->next);
#line 63
  return;
}
}
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 111
extern void __list_del_entry(struct list_head * ) ;
#line 112
extern void list_del(struct list_head * ) ;
#line 142 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
#line 146
  return;
}
}
#line 186 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 273 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 277
  first = list->next;
#line 278
  last = list->prev;
#line 280
  first->prev = prev;
#line 281
  prev->next = first;
#line 283
  last->next = next;
#line 284
  next->prev = last;
#line 285
  return;
}
}
#line 318 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 321
  tmp = list_empty((struct list_head  const  *)list);
#line 321
  if (tmp == 0) {
#line 322
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 323
    INIT_LIST_HEAD(list);
  } else {

  }
#line 325
  return;
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 218 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_xchg(atomic_t *v , int new ) 
{ 
  int __x ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
#line 220
  __x = new;
#line 220
  switch (4UL) {
  case 1UL: 
#line 220
  __ptr = (u8 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
#line 220
  goto ldv_5456;
  case 2UL: 
#line 220
  __ptr___0 = (u16 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
#line 220
  goto ldv_5456;
  case 4UL: 
#line 220
  __ptr___1 = (u32 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
#line 220
  goto ldv_5456;
  case 8UL: 
#line 220
  __ptr___2 = (u64 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
#line 220
  goto ldv_5456;
  default: 
#line 220
  __xchg_wrong_size();
  }
  ldv_5456: ;
#line 220
  return (__x);
}
}
#line 261 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_5956.rlock);
#line 286
  return;
}
}
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_5956.rlock);
#line 326
  return;
}
}
#line 211 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 275
extern void add_timer(struct timer_list * ) ;
#line 346 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 346
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 346
  return (tmp);
}
}
#line 349 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 351
  tmp = PageTail(page);
#line 351
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 351
  if (tmp___0 != 0L) {
#line 352
    return (page->ldv_13007.first_page);
  } else {

  }
#line 353
  return (page);
}
}
#line 356 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 358
  tmp = compound_head(page);
#line 358
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 358
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_18058: ;
#line 63
    goto ldv_18058;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_18059: ;
#line 65
    goto ldv_18059;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_18060: ;
#line 66
    goto ldv_18060;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 359 "include/linux/sched.h"
extern long schedule_timeout_interruptible(long  ) ;
#line 2074
extern void flush_signals(struct task_struct * ) ;
#line 2107
extern void force_sig(int  , struct task_struct * ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.ldv_5956.rlock.raw_lock.slock = 0U;
#line 35
  __constr_expr_0.lock.ldv_5956.rlock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.ldv_5956.rlock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.ldv_5956.rlock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.ldv_5956.rlock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.ldv_5956.rlock.dep_map.class_cache[0] = 0;
#line 35
  __constr_expr_0.lock.ldv_5956.rlock.dep_map.class_cache[1] = 0;
#line 35
  __constr_expr_0.lock.ldv_5956.rlock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.ldv_5956.rlock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.ldv_5956.rlock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.ldv_5956.ldv_5955.dep_map, "semaphore->lock", & __key,
                   0);
#line 37
  return;
}
}
#line 40
extern int down_interruptible(struct semaphore * ) ;
#line 42
extern int down_trylock(struct semaphore * ) ;
#line 44
extern void up(struct semaphore * ) ;
#line 845 "include/linux/fs.h"
__inline static loff_t i_size_read(struct inode  const  *inode ) 
{ 


  {
#line 864
  return ((loff_t )inode->i_size);
}
}
#line 1093 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1127 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1129
  return (& tfm->base);
}
}
#line 1147 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1149
  tmp = crypto_hash_tfm(tfm);
#line 1149
  return (& tmp->crt_u.hash);
}
}
#line 1162 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1164
  tmp = crypto_hash_crt(tfm);
#line 1164
  return (tmp->digestsize);
}
}
#line 1182 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1184
  tmp = crypto_hash_crt(desc->tfm);
#line 1184
  tmp___0 = (*(tmp->init))(desc);
#line 1184
  return (tmp___0);
}
}
#line 1187 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1196
  tmp = crypto_hash_crt(desc->tfm);
#line 1196
  tmp___0 = (*(tmp->final))(desc, out);
#line 1196
  return (tmp___0);
}
}
#line 225 "include/linux/bio.h"
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 650 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 967 "include/linux/blkdev.h"
__inline static unsigned int queue_max_hw_sectors(struct request_queue *q ) 
{ 


  {
#line 969
  return (q->limits.max_hw_sectors);
}
}
#line 674 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 680
  __asm__  volatile   ("": : : "memory");
#line 681
  return (thi->t_state);
}
}
#line 1144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1146
  return (mdev->minor);
}
}
#line 1157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1159
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1162
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1162
  if (tmp != 0L) {
#line 1163
    mutex_unlock(& mdev->data.mutex);
#line 1164
    return (0);
  } else {

  }
#line 1166
  return (1);
}
}
#line 1169 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1171
  mutex_unlock(& mdev->data.mutex);
#line 1172
  return;
}
}
#line 1198
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1210
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1212
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1231
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) ;
#line 1235
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) ;
#line 1240
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) ;
#line 1248
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1254
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1256
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1257
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1259
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1260
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1262
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1266
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1272
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1273
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) ;
#line 1275
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1277
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1278
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1281
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1501
wait_queue_head_t drbd_pp_wait ;
#line 1503 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1531
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1534
int drbd_worker(struct drbd_thread *thi ) ;
#line 1535
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1536
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1537
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1538
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1539
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1543
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1544
void drbd_rs_controller_reset(struct drbd_conf *mdev ) ;
#line 1546 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1548
  if (mdev->ov_last_oos_size != 0UL) {
#line 1549
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1553
  mdev->ov_last_oos_size = 0UL;
#line 1554
  return;
}
}
#line 1557
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1558
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1561
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1562
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1563
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1564
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1565
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1566
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1567
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1568
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1570
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1571
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1572
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1573
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1574
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1576
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1577
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1578
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1580
void resync_timer_fn(unsigned long data ) ;
#line 1581
void start_resync_timer_fn(unsigned long data ) ;
#line 1584
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) ;
#line 1585
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1588
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1593
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) ;
#line 1608 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1612
  if (level == 1) {
#line 1613
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1615
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1617
  return (err);
}
}
#line 1620 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1622
  val = 1;
#line 1623
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1625
  return;
}
}
#line 1627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1629
  val = 0;
#line 1630
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1632
  return;
}
}
#line 1657
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1658
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1659
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1661
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1662
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1663
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1664
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1667
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) ;
#line 1668
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1672
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) ;
#line 1749 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1751
  return ((struct page *)page->ldv_13007.ldv_13004.private);
}
}
#line 1772 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1774
  page = e->pages;
#line 1775
  goto ldv_47317;
  ldv_47316: 
#line 1776
  tmp = page_count(page);
#line 1776
  if (tmp > 1) {
#line 1777
    return (1);
  } else {

  }
#line 1775
  page = page_chain_next(page);
  ldv_47317: ;
#line 1775
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1775
    tmp___0 = page_chain_next(page);
#line 1775
    __builtin_prefetch((void const   *)tmp___0);
#line 1775
    if (1 != 0) {
#line 1776
      goto ldv_47316;
    } else {
#line 1778
      goto ldv_47318;
    }
  } else {

  }
  ldv_47318: ;
#line 1779
  return (0);
}
}
#line 1783 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1785
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1785
  if (tmp == 0) {
#line 1785
    goto ldv_47322;
  } else {

  }
#line 1785
  tmp___0 = get_current();
#line 1785
  __wait.flags = 0U;
#line 1785
  __wait.private = (void *)tmp___0;
#line 1785
  __wait.func = & autoremove_wake_function;
#line 1785
  __wait.task_list.next = & __wait.task_list;
#line 1785
  __wait.task_list.prev = & __wait.task_list;
  ldv_47325: 
#line 1785
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1785
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1785
  if (tmp___1 == 0) {
#line 1785
    goto ldv_47324;
  } else {

  }
#line 1785
  schedule();
#line 1785
  goto ldv_47325;
  ldv_47324: 
#line 1785
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_47322: ;
#line 1788
  return;
}
}
#line 1789 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1791
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1792
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1793
  return;
}
}
#line 1826 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1828
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1830
  if (forcedetach == 0) {
#line 1831
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1831
    if (tmp != 0) {
#line 1832
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1833
    if ((int )mdev->state.ldv_37520.disk > 4) {
#line 1834
      __ns.i = mdev->state.i;
#line 1834
      __ns.ldv_37520.disk = 4U;
#line 1834
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1835
    goto ldv_47350;
  } else {

  }
  case 2: ;
  case 1: 
#line 1840
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1841
  if ((int )mdev->state.ldv_37520.disk > 2) {
#line 1842
    __ns___0.i = mdev->state.i;
#line 1842
    __ns___0.ldv_37520.disk = 2U;
#line 1842
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1843
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1846
  goto ldv_47350;
  }
  ldv_47350: ;
#line 1849
  return;
}
}
#line 1907 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 
  loff_t tmp ;
  sector_t tmp___0 ;

  {
#line 1910
  if ((unsigned long )bdev != (unsigned long )((struct block_device *)0)) {
#line 1910
    tmp = i_size_read((struct inode  const  *)bdev->bd_inode);
#line 1910
    tmp___0 = (sector_t )(tmp >> 9);
  } else {
#line 1910
    tmp___0 = 0UL;
  }
#line 1910
  return (tmp___0);
}
}
#line 1989 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1992
  tmp = spinlock_check(& q->q_lock);
#line 1992
  flags = _raw_spin_lock_irqsave(tmp);
#line 1993
  list_add_tail(& w->list, & q->q);
#line 1994
  up(& q->s);
#line 1996
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1997
  return;
}
}
#line 1999 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2001
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 2001
  if (tmp != 0) {
#line 2002
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 2003
  return;
}
}
#line 2005 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 2007
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 2008
  wake_asender(mdev);
#line 2009
  return;
}
}
#line 2011 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2015
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 2015
  return (tmp);
}
}
#line 2030 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 2032
  _drbd_thread_stop(thi, 0, 1);
#line 2033
  return;
}
}
#line 2090 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2092
  atomic_inc(& mdev->rs_pending_cnt);
#line 2093
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 268 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_make_private_bio(struct drbd_request *req , struct bio *bio_src ) 
{ 
  struct bio *bio ;

  {
#line 271
  bio = bio_clone(bio_src, 16U);
#line 273
  req->private_bio = bio;
#line 275
  bio->bi_private = (void *)req;
#line 276
  bio->bi_end_io = & drbd_endio_pri;
#line 277
  bio->bi_next = 0;
#line 278
  return;
}
}
#line 321
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 323
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 329 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 331
  mdev = req->mdev;
#line 336
  rv = __req_mod(req, what, & m);
#line 337
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 338
    complete_master_bio(mdev, & m);
  } else {

  }
#line 340
  return (rv);
}
}
#line 347 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 351
  mdev = req->mdev;
#line 355
  tmp = spinlock_check(& mdev->req_lock);
#line 355
  flags = _raw_spin_lock_irqsave(tmp);
#line 356
  rv = __req_mod(req, what, & m);
#line 357
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 359
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 360
    complete_master_bio(mdev, & m);
  } else {

  }
#line 362
  return (rv);
}
}
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 49
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 81
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 82
  md_io->error = error;
#line 84
  complete(& md_io->event);
#line 85
  return;
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 92
  flags = 0UL;
#line 93
  mdev = e->mdev;
#line 95
  if (e->ldv_45720.block_id == 0ULL) {
#line 95
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            95);
  } else {

  }
#line 97
  tmp = spinlock_check(& mdev->req_lock);
#line 97
  flags = _raw_spin_lock_irqsave(tmp);
#line 98
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 99
  list_del(& e->w.list);
#line 100
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 100
  if (tmp___0 != 0) {
#line 101
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 102
  tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 102
  if (tmp___1 != 0) {
#line 103
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_read_sec_final");
  } else {

  }
#line 104
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 106
  drbd_queue_work(& mdev->data.work, & e->w);
#line 107
  put_ldev(mdev);
#line 108
  return;
}
}
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 114
  flags = 0UL;
#line 115
  mdev = e->mdev;
#line 121
  if (e->ldv_45720.block_id == 0ULL) {
#line 121
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            121);
  } else {

  }
#line 127
  e_sector = e->sector;
#line 128
  do_al_complete_io = (int )e->flags & 1;
#line 129
  is_syncer_req = e->ldv_45720.block_id == 0xffffffffffffffffULL;
#line 131
  tmp = spinlock_check(& mdev->req_lock);
#line 131
  flags = _raw_spin_lock_irqsave(tmp);
#line 132
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 133
  list_del(& e->w.list);
#line 134
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 141
  if (is_syncer_req != 0) {
#line 141
    tmp___0 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 141
    do_wake = tmp___0;
  } else {
#line 141
    tmp___1 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 141
    do_wake = tmp___1;
  }
#line 145
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 145
  if (tmp___2 != 0) {
#line 146
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec_final");
  } else {

  }
#line 147
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 149
  if (is_syncer_req != 0) {
#line 150
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 152
  if (do_wake != 0) {
#line 153
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 155
  if (do_al_complete_io != 0) {
#line 156
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 158
  wake_asender(mdev);
#line 159
  put_ldev(mdev);
#line 160
  return;
}
}
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 167
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 168
  mdev = e->mdev;
#line 169
  uptodate = (int )bio->bi_flags & 1;
#line 170
  is_write = (int )bio->bi_rw & 1;
#line 172
  if (error != 0) {
#line 172
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 172
    if (tmp != 0) {
#line 173
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
    } else {

    }
  } else {

  }
#line 176
  if (error == 0 && uptodate == 0) {
#line 177
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 177
    if (tmp___0 != 0) {
#line 178
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
    } else {

    }
#line 184
    error = -5;
  } else {

  }
#line 187
  if (error != 0) {
#line 188
    set_bit(3U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 190
  bio_put(bio);
#line 191
  tmp___1 = atomic_dec_and_test(& e->pending_bios);
#line 191
  if (tmp___1 != 0) {
#line 192
    if (is_write != 0) {
#line 193
      drbd_endio_write_sec_final(e);
    } else {
#line 195
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 196
  return;
}
}
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 204
  req = (struct drbd_request *)bio->bi_private;
#line 205
  mdev = req->mdev;
#line 208
  uptodate = (int )bio->bi_flags & 1;
#line 210
  if (error == 0 && uptodate == 0) {
#line 211
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 216
    error = -5;
  } else {

  }
#line 220
  tmp = __builtin_expect(error != 0, 0L);
#line 220
  if (tmp != 0L) {
#line 221
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 257UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 227
    what = completed_ok;
  }
#line 229
  bio_put(req->private_bio);
#line 230
  tmp___0 = ERR_PTR((long )error);
#line 230
  req->private_bio = (struct bio *)tmp___0;
#line 233
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 233
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 234
  __req_mod(req, what, & m);
#line 235
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 237
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 238
    complete_master_bio(mdev, & m);
  } else {

  }
#line 239
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 243
  __mptr = (struct drbd_work  const  *)w;
#line 243
  req = (struct drbd_request *)__mptr;
#line 249
  spin_lock_irq(& mdev->req_lock);
#line 250
  if (cancel != 0 || *((unsigned int *)mdev + 569UL) != 65536U) {
#line 251
    _req_mod(req, read_retry_remote_canceled);
#line 252
    spin_unlock_irq(& mdev->req_lock);
#line 253
    return (1);
  } else {

  }
#line 255
  spin_unlock_irq(& mdev->req_lock);
#line 257
  tmp = w_send_read_req(mdev, w, 0);
#line 257
  return (tmp);
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 264
  page = e->pages;
#line 268
  desc.tfm = tfm;
#line 269
  desc.flags = 0U;
#line 271
  sg_init_table(& sg, 1U);
#line 272
  crypto_hash_init(& desc);
#line 274
  goto ldv_47822;
  ldv_47821: 
#line 276
  sg_set_page(& sg, page, 4096U, 0U);
#line 277
  crypto_hash_update(& desc, & sg, sg.length);
#line 278
  page = tmp;
  ldv_47822: 
#line 274
  tmp = page_chain_next(page);
#line 274
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 275
    goto ldv_47821;
  } else {

  }
#line 281
  len = e->size & 4095U;
#line 282
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 283
  crypto_hash_update(& desc, & sg, sg.length);
#line 284
  crypto_hash_final(& desc, (u8 *)digest);
#line 285
  return;
}
}
#line 287 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 294
  desc.tfm = tfm;
#line 295
  desc.flags = 0U;
#line 297
  sg_init_table(& sg, 1U);
#line 298
  crypto_hash_init(& desc);
#line 300
  bvec = bio->bi_io_vec;
#line 300
  i = 0;
#line 300
  goto ldv_47835;
  ldv_47834: 
#line 301
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 302
  crypto_hash_update(& desc, & sg, sg.length);
#line 300
  bvec = bvec + 1;
#line 300
  i = i + 1;
  ldv_47835: ;
#line 300
  if ((int )bio->bi_vcnt > i) {
#line 301
    goto ldv_47834;
  } else {

  }
#line 304
  crypto_hash_final(& desc, (u8 *)digest);
#line 305
  return;
}
}
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  sector_t sector ;
  unsigned int size ;
  long tmp___2 ;

  {
#line 310
  __mptr = (struct drbd_work  const  *)w;
#line 310
  e = (struct drbd_epoch_entry *)__mptr;
#line 313
  ok = 1;
#line 315
  if (e->ldv_45720.block_id != 2205466966ULL) {
#line 315
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            315);
  } else {

  }
#line 317
  tmp = __builtin_expect(cancel != 0, 0L);
#line 317
  if (tmp != 0L) {
#line 318
    goto out;
  } else {

  }
#line 320
  tmp___0 = __builtin_expect((e->flags & 8UL) != 0UL, 1L);
#line 320
  if (tmp___0 != 0L) {
#line 321
    goto out;
  } else {

  }
#line 323
  tmp___1 = crypto_hash_digestsize(mdev->csums_tfm);
#line 323
  digest_size = (int )tmp___1;
#line 324
  digest = kmalloc((size_t )digest_size, 16U);
#line 325
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 326
    sector = e->sector;
#line 327
    size = e->size;
#line 328
    drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 334
    drbd_free_some_ee(mdev, e, 0);
#line 335
    e = 0;
#line 336
    inc_rs_pending(mdev);
#line 337
    ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_CSUM_RS_REQUEST);
#line 340
    kfree((void const   *)digest);
  } else {
#line 342
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 343
    ok = 0;
  }
  out: ;
#line 347
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 348
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 350
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 350
  if (tmp___2 != 0L) {
#line 351
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 352
  return (ok);
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 361
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 361
  if (tmp == 0) {
#line 362
    return (-5);
  } else {

  }
#line 364
  tmp___0 = drbd_rs_should_slow_down(mdev, sector);
#line 364
  if (tmp___0 != 0) {
#line 365
    goto defer;
  } else {

  }
#line 369
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 370
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 371
    goto defer;
  } else {

  }
#line 373
  e->w.cb = & w_e_send_csum;
#line 374
  spin_lock_irq(& mdev->req_lock);
#line 375
  list_add(& e->w.list, & mdev->read_ee);
#line 376
  spin_unlock_irq(& mdev->req_lock);
#line 378
  atomic_add(size >> 9, & mdev->rs_sect_ev);
#line 379
  tmp___1 = drbd_submit_ee(mdev, e, 0U, 3);
#line 379
  if (tmp___1 == 0) {
#line 380
    return (0);
  } else {

  }
#line 386
  spin_lock_irq(& mdev->req_lock);
#line 387
  list_del(& e->w.list);
#line 388
  spin_unlock_irq(& mdev->req_lock);
#line 390
  drbd_free_some_ee(mdev, e, 0);
  defer: 
#line 392
  put_ldev(mdev);
#line 393
  return (-11);
}
}
#line 396 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 398
  switch ((int )mdev->state.ldv_37520.conn) {
  case 18: 
#line 400
  w_make_ov_request(mdev, w, cancel);
#line 401
  goto ldv_47864;
  case 17: 
#line 403
  w_make_resync_request(mdev, w, cancel);
#line 404
  goto ldv_47864;
  }
  ldv_47864: ;
#line 407
  return (1);
}
}
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 412
  mdev = (struct drbd_conf *)data;
#line 414
  tmp = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 414
  if (tmp != 0) {
#line 415
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 416
  return;
}
}
#line 418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_set(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 422
  i = 0;
#line 422
  goto ldv_47876;
  ldv_47875: 
#line 423
  *(fb->values + (unsigned long )i) = value;
#line 422
  i = i + 1;
  ldv_47876: ;
#line 422
  if ((unsigned int )i < fb->size) {
#line 423
    goto ldv_47875;
  } else {

  }

#line 427
  return;
}
}
#line 426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int fifo_push(struct fifo_buffer *fb , int value ) 
{ 
  int ov ;
  unsigned int tmp ;

  {
#line 430
  ov = *(fb->values + (unsigned long )fb->head_index);
#line 431
  tmp = fb->head_index;
#line 431
  fb->head_index = fb->head_index + 1U;
#line 431
  *(fb->values + (unsigned long )tmp) = value;
#line 433
  if (fb->head_index >= fb->size) {
#line 434
    fb->head_index = 0U;
  } else {

  }
#line 436
  return (ov);
}
}
#line 439 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_add_val(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 443
  i = 0;
#line 443
  goto ldv_47889;
  ldv_47888: 
#line 444
  *(fb->values + (unsigned long )i) = *(fb->values + (unsigned long )i) + value;
#line 443
  i = i + 1;
  ldv_47889: ;
#line 443
  if ((unsigned int )i < fb->size) {
#line 444
    goto ldv_47888;
  } else {

  }

#line 448
  return;
}
}
#line 447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_controller(struct drbd_conf *mdev ) 
{ 
  unsigned int sect_in ;
  unsigned int want ;
  int req_sect ;
  int correction ;
  int cps ;
  int steps ;
  int curr_corr ;
  int max_sect ;
  int tmp ;

  {
#line 458
  tmp = atomic_xchg(& mdev->rs_sect_in, 0);
#line 458
  sect_in = (unsigned int )tmp;
#line 459
  mdev->rs_in_flight = (int )((unsigned int )mdev->rs_in_flight - sect_in);
#line 461
  spin_lock(& mdev->peer_seq_lock);
#line 463
  steps = (int )mdev->rs_plan_s.size;
#line 465
  if ((unsigned int )mdev->rs_in_flight + sect_in == 0U) {
#line 466
    want = (unsigned int )(((mdev->sync_conf.rate * 50) / 250) * steps);
  } else {
#line 468
    want = mdev->sync_conf.c_fill_target != 0 ? (unsigned int )mdev->sync_conf.c_fill_target : (((unsigned int )mdev->sync_conf.c_delay_target * sect_in) * 250U) / 250U;
  }
#line 472
  correction = (int )((want - (unsigned int )mdev->rs_in_flight) - (unsigned int )mdev->rs_planed);
#line 475
  cps = correction / steps;
#line 476
  fifo_add_val(& mdev->rs_plan_s, cps);
#line 477
  mdev->rs_planed = mdev->rs_planed + cps * steps;
#line 480
  curr_corr = fifo_push(& mdev->rs_plan_s, 0);
#line 481
  spin_unlock(& mdev->peer_seq_lock);
#line 482
  mdev->rs_planed = mdev->rs_planed - curr_corr;
#line 484
  req_sect = (int )(sect_in + (unsigned int )curr_corr);
#line 485
  if (req_sect < 0) {
#line 486
    req_sect = 0;
  } else {

  }
#line 488
  max_sect = (mdev->sync_conf.c_max_rate * 50) / 250;
#line 489
  if (req_sect > max_sect) {
#line 490
    req_sect = max_sect;
  } else {

  }
#line 498
  return (req_sect);
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_number_requests(struct drbd_conf *mdev ) 
{ 
  int number ;
  int tmp ;

  {
#line 504
  if (mdev->rs_plan_s.size != 0U) {
#line 505
    tmp = drbd_rs_controller(mdev);
#line 505
    number = tmp >> 3;
#line 506
    mdev->c_sync_rate = (number * 1000) / 25;
  } else {
#line 508
    mdev->c_sync_rate = mdev->sync_conf.rate;
#line 509
    number = (mdev->c_sync_rate * 25) / 1000;
  }
#line 514
  return (number);
}
}
#line 517 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_bio_size ;
  int number ;
  int rollback_i ;
  int size ;
  int align ;
  int queued ;
  int sndbuf ;
  int i ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long tmp___12 ;

  {
#line 522
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 522
  capacity = tmp;
#line 526
  i = 0;
#line 528
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 528
  if (tmp___0 != 0L) {
#line 529
    return (1);
  } else {

  }
#line 531
  if (mdev->rs_total == 0UL) {
#line 533
    drbd_resync_finished(mdev);
#line 534
    return (1);
  } else {

  }
#line 537
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 537
  if (tmp___1 == 0) {
#line 542
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 543
    return (1);
  } else {

  }
#line 548
  if (mdev->agreed_pro_version <= 93) {
#line 548
    tmp___2 = queue_max_hw_sectors(mdev->rq_queue);
#line 548
    max_bio_size = (int )(tmp___2 << 9);
  } else {
#line 548
    max_bio_size = mdev->agreed_pro_version <= 94 ? 32768 : 131072;
  }
#line 552
  number = drbd_rs_number_requests(mdev);
#line 553
  if (number == 0) {
#line 554
    goto requeue;
  } else {

  }
#line 556
  i = 0;
#line 556
  goto ldv_47937;
  ldv_47936: 
#line 558
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 559
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 560
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 561
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 563
    queued = 1;
#line 564
    sndbuf = 0;
  }
#line 566
  mutex_unlock(& mdev->data.mutex);
#line 567
  if (sndbuf / 2 < queued) {
#line 568
    goto requeue;
  } else {

  }
  next_sector: 
#line 571
  size = 4096;
#line 572
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 574
  if (bit == 0xffffffffffffffffUL) {
#line 575
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 576
    put_ldev(mdev);
#line 577
    return (1);
  } else {

  }
#line 580
  sector = bit << 3;
#line 582
  tmp___3 = drbd_rs_should_slow_down(mdev, sector);
#line 582
  if (tmp___3 != 0) {
#line 584
    mdev->bm_resync_fo = bit;
#line 585
    goto requeue;
  } else {
#line 582
    tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 582
    if (tmp___4 != 0) {
#line 584
      mdev->bm_resync_fo = bit;
#line 585
      goto requeue;
    } else {

    }
  }
#line 587
  mdev->bm_resync_fo = bit + 1UL;
#line 589
  tmp___5 = drbd_bm_test_bit(mdev, bit);
#line 589
  tmp___6 = __builtin_expect(tmp___5 == 0, 0L);
#line 589
  if (tmp___6 != 0L) {
#line 590
    drbd_rs_complete_io(mdev, sector);
#line 591
    goto next_sector;
  } else {

  }
#line 601
  align = 1;
#line 602
  rollback_i = i;
  ldv_47925: ;
#line 604
  if (size + 4096 > max_bio_size) {
#line 605
    goto ldv_47924;
  } else {

  }
#line 608
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 609
    goto ldv_47924;
  } else {

  }
#line 612
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 613
    goto ldv_47924;
  } else {

  }
#line 619
  tmp___7 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 619
  if (tmp___7 != 1) {
#line 620
    goto ldv_47924;
  } else {

  }
#line 621
  bit = bit + 1UL;
#line 622
  size = size + 4096;
#line 623
  if (4096 << align <= size) {
#line 624
    align = align + 1;
  } else {

  }
#line 625
  i = i + 1;
#line 626
  goto ldv_47925;
  ldv_47924: ;
#line 629
  if (size > 4096) {
#line 630
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 634
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 635
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 636
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 637
    tmp___8 = read_for_csum(mdev, sector, size);
#line 637
    switch (tmp___8) {
    case -5: 
#line 639
    put_ldev(mdev);
#line 640
    return (0);
    case -11: 
#line 642
    drbd_rs_complete_io(mdev, sector);
#line 643
    mdev->bm_resync_fo = sector >> 3;
#line 644
    i = rollback_i;
#line 645
    goto requeue;
    case 0: ;
#line 648
    goto ldv_47929;
    default: 
#line 650
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"),
                         "i" (650), "i" (12UL));
    ldv_47931: ;
#line 650
    goto ldv_47931;
    }
    ldv_47929: ;
  } else {
#line 653
    inc_rs_pending(mdev);
#line 654
    tmp___11 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 654
    if (tmp___11 == 0) {
#line 656
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 657
      atomic_dec(& mdev->rs_pending_cnt);
#line 657
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 657
      if (tmp___10 < 0) {
#line 657
        tmp___9 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 657
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 657, tmp___9);
      } else {

      }
#line 658
      put_ldev(mdev);
#line 659
      return (0);
    } else {

    }
  }
#line 556
  i = i + 1;
  ldv_47937: ;
#line 556
  if (i < number) {
#line 557
    goto ldv_47936;
  } else {

  }
#line 664
  tmp___12 = drbd_bm_bits(mdev);
#line 664
  if (mdev->bm_resync_fo >= tmp___12) {
#line 671
    put_ldev(mdev);
#line 672
    return (1);
  } else {

  }
  requeue: 
#line 676
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 677
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 678
  put_ldev(mdev);
#line 679
  return (1);
}
}
#line 682 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 686
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 686
  capacity = tmp;
#line 688
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 688
  if (tmp___0 != 0L) {
#line 689
    return (1);
  } else {

  }
#line 691
  number = drbd_rs_number_requests(mdev);
#line 693
  sector = mdev->ov_position;
#line 694
  i = 0;
#line 694
  goto ldv_47955;
  ldv_47954: ;
#line 695
  if (sector >= capacity) {
#line 696
    return (1);
  } else {

  }
#line 699
  size = 4096;
#line 701
  tmp___1 = drbd_rs_should_slow_down(mdev, sector);
#line 701
  if (tmp___1 != 0) {
#line 703
    mdev->ov_position = sector;
#line 704
    goto requeue;
  } else {
#line 701
    tmp___2 = drbd_try_rs_begin_io(mdev, sector);
#line 701
    if (tmp___2 != 0) {
#line 703
      mdev->ov_position = sector;
#line 704
      goto requeue;
    } else {

    }
  }
#line 707
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 708
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 710
  inc_rs_pending(mdev);
#line 711
  tmp___5 = drbd_send_ov_request(mdev, sector, size);
#line 711
  if (tmp___5 == 0) {
#line 712
    atomic_dec(& mdev->rs_pending_cnt);
#line 712
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 712
    if (tmp___4 < 0) {
#line 712
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 712
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 712, tmp___3);
    } else {

    }
#line 713
    return (0);
  } else {

  }
#line 715
  sector = sector + 8UL;
#line 694
  i = i + 1;
  ldv_47955: ;
#line 694
  if (i < number) {
#line 695
    goto ldv_47954;
  } else {

  }
#line 717
  mdev->ov_position = sector;
  requeue: 
#line 720
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 721
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 722
  return (1);
}
}
#line 726 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void start_resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 728
  mdev = (struct drbd_conf *)data;
#line 730
  drbd_queue_work(& mdev->data.work, & mdev->start_resync_work);
#line 731
  return;
}
}
#line 733 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 735
  tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 735
  if (tmp != 0) {
#line 736
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 737
    mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 738
    add_timer(& mdev->start_resync_timer);
#line 739
    return (1);
  } else {
#line 735
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 735
    if (tmp___0 != 0) {
#line 736
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 737
      mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 738
      add_timer(& mdev->start_resync_timer);
#line 739
      return (1);
    } else {

    }
  }
#line 742
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 743
  clear_bit(29, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 744
  return (1);
}
}
#line 747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 749
  kfree((void const   *)w);
#line 750
  ov_oos_print(mdev);
#line 751
  drbd_resync_finished(mdev);
#line 753
  return (1);
}
}
#line 756 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 758
  kfree((void const   *)w);
#line 760
  drbd_resync_finished(mdev);
#line 762
  return (1);
}
}
#line 765 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 767
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 768
  request_ping(mdev);
#line 769
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 769
  if (tmp != 0 || (int )mdev->state.ldv_37520.conn <= 9) {
#line 769
    goto ldv_47979;
  } else {

  }
#line 769
  tmp___0 = get_current();
#line 769
  __wait.flags = 0U;
#line 769
  __wait.private = (void *)tmp___0;
#line 769
  __wait.func = & autoremove_wake_function;
#line 769
  __wait.task_list.next = & __wait.task_list;
#line 769
  __wait.task_list.prev = & __wait.task_list;
  ldv_47982: 
#line 769
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 769
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 769
  if (tmp___1 != 0 || (int )mdev->state.ldv_37520.conn <= 9) {
#line 769
    goto ldv_47981;
  } else {

  }
#line 769
  schedule();
#line 769
  goto ldv_47982;
  ldv_47981: 
#line 769
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_47979: ;
#line 772
  return;
}
}
#line 773 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  int verify_done ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;

  {
#line 779
  khelper_cmd = 0;
#line 780
  verify_done = 0;
#line 785
  tmp___0 = drbd_rs_del_all(mdev);
#line 785
  if (tmp___0 != 0) {
#line 791
    schedule_timeout_interruptible(25L);
#line 792
    tmp = kmalloc(24UL, 32U);
#line 792
    w = (struct drbd_work *)tmp;
#line 793
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 794
      w->cb = & w_resync_finished;
#line 795
      drbd_queue_work(& mdev->data.work, w);
#line 796
      return (1);
    } else {

    }
#line 798
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 801
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 802
  if (dt == 0UL) {
#line 803
    dt = 1UL;
  } else {

  }
#line 804
  db = mdev->rs_total;
#line 805
  dbdt = db / dt << 2;
#line 806
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 808
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 808
  if (tmp___1 == 0) {
#line 809
    goto out;
  } else {

  }
#line 811
  ping_peer(mdev);
#line 813
  spin_lock_irq(& mdev->req_lock);
#line 814
  os = mdev->state;
#line 816
  verify_done = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U;
#line 820
  if ((int )os.ldv_37520.conn <= 10) {
#line 821
    goto out_unlock;
  } else {

  }
#line 823
  ns = os;
#line 824
  ns.ldv_37520.conn = 10U;
#line 826
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            verify_done != 0 ? (char *)"Online verify " : (char *)"Resync", mdev->rs_paused + dt,
            mdev->rs_paused, dbdt);
#line 830
  n_oos = drbd_bm_total_weight(mdev);
#line 832
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 833
    if (n_oos != 0UL) {
#line 834
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 836
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 839
      if (mdev->rs_failed != n_oos) {
#line 839
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                839);
      } else {

      }
#line 841
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 842
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 844
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 845
        s = mdev->rs_same_csum;
#line 846
        t = mdev->rs_total;
#line 847
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 850
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal check sums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 859
  if (mdev->rs_failed != 0UL) {
#line 860
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 862
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 863
      ns.ldv_37520.disk = 4U;
#line 864
      ns.ldv_37520.pdsk = 8U;
    } else {
#line 866
      ns.ldv_37520.disk = 8U;
#line 867
      ns.ldv_37520.pdsk = 4U;
    }
  } else {
#line 870
    ns.ldv_37520.disk = 8U;
#line 871
    ns.ldv_37520.pdsk = 8U;
#line 873
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 874
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 876
        i = 1;
#line 876
        goto ldv_48002;
        ldv_48001: 
#line 877
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 876
        i = i + 1;
        ldv_48002: ;
#line 876
        if (i <= 3) {
#line 877
          goto ldv_48001;
        } else {

        }
#line 878
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 879
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 881
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 885
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 288U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 304U) {
#line 888
      drbd_uuid_set_bm(mdev, 0ULL);
#line 889
      drbd_print_uuids(mdev, "updated UUIDs");
#line 890
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 894
        i___0 = 0;
#line 894
        goto ldv_48006;
        ldv_48005: 
#line 895
        *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 894
        i___0 = i___0 + 1;
        ldv_48006: ;
#line 894
        if (i___0 <= 3) {
#line 895
          goto ldv_48005;
        } else {

        }

      } else {

      }
    } else {

    }
  }
#line 900
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 902
  spin_unlock_irq(& mdev->req_lock);
#line 903
  put_ldev(mdev);
  out: 
#line 905
  mdev->rs_total = 0UL;
#line 906
  mdev->rs_failed = 0UL;
#line 907
  mdev->rs_paused = 0UL;
#line 908
  if (verify_done != 0) {
#line 909
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 911
  drbd_md_sync(mdev);
#line 913
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 914
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 916
  return (1);
}
}
#line 920 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int i ;
  int tmp ;

  {
#line 922
  tmp = drbd_ee_has_active_page(e);
#line 922
  if (tmp != 0) {
#line 924
    i = (int )(((unsigned long )e->size + 4095UL) >> 12);
#line 925
    atomic_add(i, & mdev->pp_in_use_by_net);
#line 926
    atomic_sub(i, & mdev->pp_in_use);
#line 927
    spin_lock_irq(& mdev->req_lock);
#line 928
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 929
    spin_unlock_irq(& mdev->req_lock);
#line 930
    __wake_up(& drbd_pp_wait, 3U, 1, 0);
  } else {
#line 932
    drbd_free_some_ee(mdev, e, 0);
  }
#line 933
  return;
}
}
#line 941 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 943
  __mptr = (struct drbd_work  const  *)w;
#line 943
  e = (struct drbd_epoch_entry *)__mptr;
#line 946
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 946
  if (tmp___1 != 0L) {
#line 947
    drbd_free_some_ee(mdev, e, 0);
#line 948
    atomic_dec(& mdev->unacked_cnt);
#line 948
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 948
    if (tmp___0 < 0) {
#line 948
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 948
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 948, tmp);
    } else {

    }
#line 949
    return (1);
  } else {

  }
#line 952
  tmp___3 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 952
  if (tmp___3 != 0L) {
#line 953
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 955
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 955
    if (tmp___2 != 0) {
#line 956
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 959
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 962
  atomic_dec(& mdev->unacked_cnt);
#line 962
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 962
  if (tmp___5 < 0) {
#line 962
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 962
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 962, tmp___4);
  } else {

  }
#line 964
  move_to_net_ee_or_free(mdev, e);
#line 966
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 966
  if (tmp___6 != 0L) {
#line 967
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 968
  return (ok);
}
}
#line 977 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 979
  __mptr = (struct drbd_work  const  *)w;
#line 979
  e = (struct drbd_epoch_entry *)__mptr;
#line 982
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 982
  if (tmp___1 != 0L) {
#line 983
    drbd_free_some_ee(mdev, e, 0);
#line 984
    atomic_dec(& mdev->unacked_cnt);
#line 984
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 984
    if (tmp___0 < 0) {
#line 984
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 984
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 984, tmp);
    } else {

    }
#line 985
    return (1);
  } else {

  }
#line 988
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 988
  if (tmp___2 != 0) {
#line 989
    drbd_rs_complete_io(mdev, e->sector);
#line 990
    put_ldev(mdev);
  } else {

  }
#line 993
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 994
    ok = drbd_send_ack(mdev, P_RS_CANCEL, e);
  } else {
#line 995
    tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 995
    if (tmp___6 != 0L) {
#line 996
      tmp___4 = __builtin_expect((int )mdev->state.ldv_37520.pdsk > 3, 1L);
#line 996
      if (tmp___4 != 0L) {
#line 997
        inc_rs_pending(mdev);
#line 998
        ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
      } else {
#line 1000
        tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1000
        if (tmp___3 != 0) {
#line 1001
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
        } else {

        }
#line 1003
        ok = 1;
      }
    } else {
#line 1006
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1006
      if (tmp___5 != 0) {
#line 1007
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
                (unsigned long long )e->sector);
      } else {

      }
#line 1010
      ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1013
      drbd_rs_failed_io(mdev, e->sector, (int )e->size);
    }
  }
#line 1016
  atomic_dec(& mdev->unacked_cnt);
#line 1016
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1016
  if (tmp___8 < 0) {
#line 1016
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1016
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 1016, tmp___7);
  } else {

  }
#line 1018
  move_to_net_ee_or_free(mdev, e);
#line 1020
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1020
  if (tmp___9 != 0L) {
#line 1021
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1022
  return (ok);
}
}
#line 1025 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1027
  __mptr = (struct drbd_work  const  *)w;
#line 1027
  e = (struct drbd_epoch_entry *)__mptr;
#line 1030
  digest = 0;
#line 1031
  eq = 0;
#line 1033
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1033
  if (tmp___1 != 0L) {
#line 1034
    drbd_free_some_ee(mdev, e, 0);
#line 1035
    atomic_dec(& mdev->unacked_cnt);
#line 1035
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1035
    if (tmp___0 < 0) {
#line 1035
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1035
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 1035, tmp);
    } else {

    }
#line 1036
    return (1);
  } else {

  }
#line 1039
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1039
  if (tmp___2 != 0) {
#line 1040
    drbd_rs_complete_io(mdev, e->sector);
#line 1041
    put_ldev(mdev);
  } else {

  }
#line 1044
  di = e->ldv_45720.digest;
#line 1046
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1046
  if (tmp___6 != 0L) {
#line 1050
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1051
      tmp___3 = crypto_hash_digestsize(mdev->csums_tfm);
#line 1051
      digest_size = (int )tmp___3;
#line 1052
      if (di->digest_size != digest_size) {
#line 1052
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                1052);
      } else {

      }
#line 1053
      digest = kmalloc((size_t )digest_size, 16U);
    } else {

    }
#line 1055
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1056
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 1057
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1057
      eq = tmp___4 == 0;
#line 1058
      kfree((void const   *)digest);
    } else {

    }
#line 1061
    if (eq != 0) {
#line 1062
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1062U);
#line 1064
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1065
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1067
      inc_rs_pending(mdev);
#line 1068
      e->ldv_45720.block_id = 0xffffffffffffffffULL;
#line 1069
      e->flags = e->flags & 0xffffffffffffffefUL;
#line 1070
      kfree((void const   *)di);
#line 1071
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1074
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1075
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1075
    if (tmp___5 != 0) {
#line 1076
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1079
  atomic_dec(& mdev->unacked_cnt);
#line 1079
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1079
  if (tmp___8 < 0) {
#line 1079
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1079
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1079, tmp___7);
  } else {

  }
#line 1080
  move_to_net_ee_or_free(mdev, e);
#line 1082
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1082
  if (tmp___9 != 0L) {
#line 1083
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1084
  return (ok);
}
}
#line 1088 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1090
  __mptr = (struct drbd_work  const  *)w;
#line 1090
  e = (struct drbd_epoch_entry *)__mptr;
#line 1091
  sector = e->sector;
#line 1092
  size = e->size;
#line 1095
  ok = 1;
#line 1097
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1097
  if (tmp != 0L) {
#line 1098
    goto out;
  } else {

  }
#line 1100
  tmp___0 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1100
  digest_size = (int )tmp___0;
#line 1101
  digest = kmalloc((size_t )digest_size, 16U);
#line 1102
  if ((unsigned long )digest == (unsigned long )((void *)0)) {
#line 1103
    ok = 0;
#line 1104
    goto out;
  } else {

  }
#line 1107
  tmp___1 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1107
  if (tmp___1 != 0L) {
#line 1108
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
  } else {
#line 1110
    memset(digest, 0, (size_t )digest_size);
  }
#line 1117
  drbd_free_some_ee(mdev, e, 0);
#line 1118
  e = 0;
#line 1119
  inc_rs_pending(mdev);
#line 1120
  ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_OV_REPLY);
#line 1123
  if (ok == 0) {
#line 1124
    atomic_dec(& mdev->rs_pending_cnt);
#line 1124
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1124
    if (tmp___3 < 0) {
#line 1124
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1124
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_e_end_ov_req", 1124, tmp___2);
    } else {

    }
  } else {

  }
#line 1125
  kfree((void const   *)digest);
  out: ;
#line 1128
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1129
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 1130
  atomic_dec(& mdev->unacked_cnt);
#line 1130
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1130
  if (tmp___5 < 0) {
#line 1130
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1130
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1130, tmp___4);
  } else {

  }
#line 1131
  return (ok);
}
}
#line 1134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1136
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1137
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1139
    mdev->ov_last_oos_start = sector;
#line 1140
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1142
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1142U);
#line 1143
  return;
}
}
#line 1145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  void *digest ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1147
  __mptr = (struct drbd_work  const  *)w;
#line 1147
  e = (struct drbd_epoch_entry *)__mptr;
#line 1150
  sector = e->sector;
#line 1151
  size = e->size;
#line 1153
  eq = 0;
#line 1155
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1155
  if (tmp___1 != 0L) {
#line 1156
    drbd_free_some_ee(mdev, e, 0);
#line 1157
    atomic_dec(& mdev->unacked_cnt);
#line 1157
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1157
    if (tmp___0 < 0) {
#line 1157
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1157
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1157, tmp);
    } else {

    }
#line 1158
    return (1);
  } else {

  }
#line 1163
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1163
  if (tmp___2 != 0) {
#line 1164
    drbd_rs_complete_io(mdev, e->sector);
#line 1165
    put_ldev(mdev);
  } else {

  }
#line 1168
  di = e->ldv_45720.digest;
#line 1170
  tmp___5 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1170
  if (tmp___5 != 0L) {
#line 1171
    tmp___3 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1171
    digest_size = (int )tmp___3;
#line 1172
    digest = kmalloc((size_t )digest_size, 16U);
#line 1173
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1174
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1176
      if (di->digest_size != digest_size) {
#line 1176
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                1176);
      } else {

      }
#line 1177
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1177
      eq = tmp___4 == 0;
#line 1178
      kfree((void const   *)digest);
    } else {

    }
  } else {

  }
#line 1187
  drbd_free_some_ee(mdev, e, 0);
#line 1188
  if (eq == 0) {
#line 1189
    drbd_ov_oos_found(mdev, sector, (int )size);
  } else {
#line 1191
    ov_oos_print(mdev);
  }
#line 1193
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, sector, (int )size, eq != 0 ? 4711ULL : 4712ULL);
#line 1196
  atomic_dec(& mdev->unacked_cnt);
#line 1196
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1196
  if (tmp___7 < 0) {
#line 1196
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1196
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1196, tmp___6);
  } else {

  }
#line 1198
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1201
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 1202
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 1204
  if (mdev->ov_left == 0UL) {
#line 1205
    ov_oos_print(mdev);
#line 1206
    drbd_resync_finished(mdev);
  } else {

  }
#line 1209
  return (ok);
}
}
#line 1212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1214
  __mptr = (struct drbd_work  const  *)w;
#line 1214
  b = (struct drbd_wq_barrier *)__mptr;
#line 1215
  complete(& b->done);
#line 1216
  return (1);
}
}
#line 1219 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1221
  __mptr = (struct drbd_work  const  *)w;
#line 1221
  b = (struct drbd_tl_epoch *)__mptr;
#line 1222
  p = & mdev->data.sbuf.barrier;
#line 1223
  ok = 1;
#line 1230
  spin_lock_irq(& mdev->req_lock);
#line 1231
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_37520.conn <= 9) {
#line 1232
    cancel = 1;
  } else {

  }
#line 1233
  spin_unlock_irq(& mdev->req_lock);
#line 1234
  if (cancel != 0) {
#line 1235
    return (1);
  } else {

  }
#line 1237
  tmp = drbd_get_data_sock(mdev);
#line 1237
  if (tmp == 0) {
#line 1238
    return (0);
  } else {

  }
#line 1239
  p->barrier = b->br_number;
#line 1243
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header80 *)p,
                      16UL, 0U);
#line 1245
  drbd_put_data_sock(mdev);
#line 1247
  return (ok);
}
}
#line 1250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1252
  if (cancel != 0) {
#line 1253
    return (1);
  } else {

  }
#line 1254
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1254
  return (tmp);
}
}
#line 1257 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1259
  __mptr = (struct drbd_work  const  *)w;
#line 1259
  req = (struct drbd_request *)__mptr;
#line 1262
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1262
  if (tmp != 0L) {
#line 1263
    req_mod(req, send_canceled);
#line 1264
    return (1);
  } else {

  }
#line 1267
  ok = drbd_send_oos(mdev, req);
#line 1268
  req_mod(req, oos_handed_to_network);
#line 1270
  return (ok);
}
}
#line 1279 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1281
  __mptr = (struct drbd_work  const  *)w;
#line 1281
  req = (struct drbd_request *)__mptr;
#line 1284
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1284
  if (tmp != 0L) {
#line 1285
    req_mod(req, send_canceled);
#line 1286
    return (1);
  } else {

  }
#line 1289
  ok = drbd_send_dblock(mdev, req);
#line 1290
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1292
  return (ok);
}
}
#line 1301 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1303
  __mptr = (struct drbd_work  const  *)w;
#line 1303
  req = (struct drbd_request *)__mptr;
#line 1306
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1306
  if (tmp != 0L) {
#line 1307
    req_mod(req, send_canceled);
#line 1308
    return (1);
  } else {

  }
#line 1311
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1314
  if (ok == 0) {
#line 1317
    if ((int )mdev->state.ldv_37520.conn > 9) {
#line 1318
      val.i = 0U;
#line 1318
      val.ldv_37520.conn = 5U;
#line 1318
      mask.i = 0U;
#line 1318
      mask.ldv_37520.conn = 31U;
#line 1318
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1320
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1322
  return (ok);
}
}
#line 1325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 1327
  __mptr = (struct drbd_work  const  *)w;
#line 1327
  req = (struct drbd_request *)__mptr;
#line 1329
  if ((int )(req->master_bio)->bi_rw & 1 && (req->rq_state & 2048UL) != 0UL) {
#line 1330
    drbd_al_begin_io(mdev, req->sector);
  } else {

  }
#line 1336
  drbd_req_make_private_bio(req, req->master_bio);
#line 1337
  (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1338
  generic_make_request(req->private_bio);
#line 1340
  return (1);
}
}
#line 1343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1345
  odev = mdev;
  ldv_48182: ;
#line 1348
  if (odev->sync_conf.after == -1) {
#line 1349
    return (1);
  } else {

  }
#line 1350
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1351
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1351
  if (_b != 0) {
#line 1351
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1351);
  } else {

  }
#line 1351
  if (_b != 0) {
#line 1351
    return (1);
  } else {

  }
#line 1352
  if (((((int )odev->state.ldv_37520.conn > 15 && (int )odev->state.ldv_37520.conn <= 21) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1356
    return (0);
  } else {

  }
#line 1357
  goto ldv_48182;
}
}
#line 1366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1369
  rv = 0;
#line 1371
  i = 0;
#line 1371
  goto ldv_48193;
  ldv_48192: 
#line 1372
  odev = minor_to_mdev((unsigned int )i);
#line 1373
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1374
    goto ldv_48189;
  } else {

  }
#line 1375
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1376
    goto ldv_48189;
  } else {

  }
#line 1377
  tmp___0 = _drbd_may_sync_now(odev);
#line 1377
  if (tmp___0 == 0) {
#line 1378
    __ns.i = odev->state.i;
#line 1378
    __ns.ldv_37520.aftr_isp = 1U;
#line 1378
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1378
    rv = ((int )tmp != 2) | rv;
  } else {

  }
  ldv_48189: 
#line 1371
  i = i + 1;
  ldv_48193: ;
#line 1371
  if ((unsigned int )i < minor_count) {
#line 1372
    goto ldv_48192;
  } else {

  }

#line 1382
  return (rv);
}
}
#line 1391 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1394
  rv = 0;
#line 1396
  i = 0;
#line 1396
  goto ldv_48205;
  ldv_48204: 
#line 1397
  odev = minor_to_mdev((unsigned int )i);
#line 1398
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1399
    goto ldv_48201;
  } else {

  }
#line 1400
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1401
    goto ldv_48201;
  } else {

  }
#line 1402
  if ((unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1403
    tmp___0 = _drbd_may_sync_now(odev);
#line 1403
    if (tmp___0 != 0) {
#line 1404
      __ns.i = odev->state.i;
#line 1404
      __ns.ldv_37520.aftr_isp = 0U;
#line 1404
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1404
      rv = ((int )tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_48201: 
#line 1396
  i = i + 1;
  ldv_48205: ;
#line 1396
  if ((unsigned int )i < minor_count) {
#line 1397
    goto ldv_48204;
  } else {

  }

#line 1409
  return (rv);
}
}
#line 1412 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1414
  _raw_write_lock_irq(& global_state_lock);
#line 1415
  _drbd_resume_next(mdev);
#line 1416
  _raw_write_unlock_irq(& global_state_lock);
#line 1417
  return;
}
}
#line 1419 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1421
  _raw_write_lock_irq(& global_state_lock);
#line 1422
  _drbd_pause_after(mdev);
#line 1423
  _raw_write_unlock_irq(& global_state_lock);
#line 1424
  return;
}
}
#line 1426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1430
  if (o_minor == -1) {
#line 1431
    return (101);
  } else {

  }
#line 1432
  if (o_minor < -1) {
#line 1433
    return (132);
  } else {
#line 1432
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1432
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1433
      return (132);
    } else {

    }
  }
#line 1436
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_48218: ;
#line 1438
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1439
    return (133);
  } else {

  }
#line 1442
  if (odev->sync_conf.after == -1) {
#line 1443
    return (101);
  } else {

  }
#line 1446
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1447
  goto ldv_48218;
}
}
#line 1450 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1455
  _raw_write_lock_irq(& global_state_lock);
#line 1456
  retcode = sync_after_error(mdev, na);
#line 1457
  if (retcode == 101) {
#line 1458
    mdev->sync_conf.after = na;
    ldv_48225: 
#line 1460
    changes = _drbd_pause_after(mdev);
#line 1461
    tmp = _drbd_resume_next(mdev);
#line 1461
    changes = tmp | changes;
#line 1462
    if (changes != 0) {
#line 1463
      goto ldv_48225;
    } else {

    }

  } else {

  }
#line 1464
  _raw_write_unlock_irq(& global_state_lock);
#line 1465
  return (retcode);
}
}
#line 1468 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_rs_controller_reset(struct drbd_conf *mdev ) 
{ 


  {
#line 1470
  atomic_set(& mdev->rs_sect_in, 0);
#line 1471
  atomic_set(& mdev->rs_sect_ev, 0);
#line 1472
  mdev->rs_in_flight = 0;
#line 1473
  mdev->rs_planed = 0;
#line 1474
  spin_lock(& mdev->peer_seq_lock);
#line 1475
  fifo_set(& mdev->rs_plan_s, 0);
#line 1476
  spin_unlock(& mdev->peer_seq_lock);
#line 1477
  return;
}
}
#line 1487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  unsigned long tw ;
  unsigned long tmp___2 ;
  unsigned long now ;
  int i ;
  char const   *tmp___3 ;

  {
#line 1492
  if ((int )mdev->state.ldv_37520.conn > 15 && (int )mdev->state.ldv_37520.conn <= 21) {
#line 1493
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1494
    return;
  } else {

  }
#line 1497
  if ((int )mdev->state.ldv_37520.conn <= 21) {
#line 1499
    drbd_rs_cancel_all(mdev);
  } else {

  }
#line 1505
  if ((unsigned int )side == 17U) {
#line 1509
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1510
    r = (r >> 8) & 255;
#line 1511
    if (r > 0) {
#line 1512
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1514
      val.i = 0U;
#line 1514
      val.ldv_37520.conn = 1U;
#line 1514
      mask.i = 0U;
#line 1514
      mask.ldv_37520.conn = 31U;
#line 1514
      drbd_force_state(mdev, mask, val);
#line 1515
      return;
    } else {

    }
  } else {
#line 1518
    r = drbd_khelper(mdev, (char *)"before-resync-source");
#line 1519
    r = (r >> 8) & 255;
#line 1520
    if (r > 0) {
#line 1521
      if (r == 3) {
#line 1522
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, ignoring. Old userland tools?",
                  r);
      } else {
#line 1525
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, dropping connection.\n",
                  r);
#line 1527
        val___0.i = 0U;
#line 1527
        val___0.ldv_37520.conn = 1U;
#line 1527
        mask___0.i = 0U;
#line 1527
        mask___0.ldv_37520.conn = 31U;
#line 1527
        drbd_force_state(mdev, mask___0, val___0);
#line 1528
        return;
      }
    } else {

    }
  }
#line 1533
  drbd_state_lock(mdev);
#line 1535
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1535
  if (tmp == 0) {
#line 1536
    drbd_state_unlock(mdev);
#line 1537
    return;
  } else {

  }
#line 1540
  _raw_write_lock_irq(& global_state_lock);
#line 1541
  ns = mdev->state;
#line 1543
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1543
  ns.ldv_37520.aftr_isp = tmp___0 == 0;
#line 1545
  ns.ldv_37520.conn = (unsigned char )side;
#line 1547
  if ((unsigned int )side == 17U) {
#line 1548
    ns.ldv_37520.disk = 4U;
  } else {
#line 1550
    ns.ldv_37520.pdsk = 4U;
  }
#line 1552
  tmp___1 = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1552
  r = (int )tmp___1;
#line 1553
  ns = mdev->state;
#line 1555
  if ((int )ns.ldv_37520.conn <= 9) {
#line 1556
    r = 0;
  } else {

  }
#line 1558
  if (r == 1) {
#line 1559
    tmp___2 = drbd_bm_total_weight(mdev);
#line 1559
    tw = tmp___2;
#line 1560
    now = jiffies;
#line 1563
    mdev->rs_failed = 0UL;
#line 1564
    mdev->rs_paused = 0UL;
#line 1565
    mdev->rs_same_csum = 0UL;
#line 1566
    mdev->rs_last_events = 0;
#line 1567
    mdev->rs_last_sect_ev = 0;
#line 1568
    mdev->rs_total = tw;
#line 1569
    mdev->rs_start = now;
#line 1570
    i = 0;
#line 1570
    goto ldv_48248;
    ldv_48247: 
#line 1571
    mdev->rs_mark_left[i] = tw;
#line 1572
    mdev->rs_mark_time[i] = now;
#line 1570
    i = i + 1;
    ldv_48248: ;
#line 1570
    if (i <= 7) {
#line 1571
      goto ldv_48247;
    } else {

    }
#line 1574
    _drbd_pause_after(mdev);
  } else {

  }
#line 1576
  _raw_write_unlock_irq(& global_state_lock);
#line 1578
  if (r == 1) {
#line 1579
    tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_37520.conn);
#line 1579
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___3, mdev->rs_total << 2, mdev->rs_total);
#line 1583
    if ((unsigned int )side == 17U) {
#line 1584
      mdev->bm_resync_fo = 0UL;
    } else {

    }
#line 1593
    if ((unsigned int )side == 16U && mdev->agreed_pro_version <= 95) {
#line 1594
      drbd_gen_and_send_sync_uuid(mdev);
    } else {

    }
#line 1596
    if (mdev->agreed_pro_version <= 94 && mdev->rs_total == 0UL) {
#line 1607
      if ((unsigned int )side == 16U) {
#line 1608
        schedule_timeout_interruptible((long )((mdev->net_conf)->ping_int * 250 + ((mdev->net_conf)->ping_timeo * 250) / 9));
      } else {

      }
#line 1611
      drbd_resync_finished(mdev);
    } else {

    }
#line 1614
    drbd_rs_controller_reset(mdev);
#line 1619
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1620
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1622
    drbd_md_sync(mdev);
  } else {

  }
#line 1624
  put_ldev(mdev);
#line 1625
  drbd_state_unlock(mdev);
#line 1626
  return;
}
}
#line 1628 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1630
  mdev = thi->mdev;
#line 1631
  w = 0;
#line 1632
  work_list.next = & work_list;
#line 1632
  work_list.prev = & work_list;
#line 1633
  intr = 0;
#line 1635
  tmp = mdev_to_minor(mdev);
#line 1635
  tmp___0 = get_current();
#line 1635
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1637
  goto ldv_48261;
  ldv_48271: 
#line 1638
  drbd_thread_current_set_cpu(mdev);
#line 1640
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1640
  if (tmp___1 != 0) {
#line 1641
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1642
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1643
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1644
    mutex_unlock(& mdev->data.mutex);
#line 1646
    intr = down_interruptible(& mdev->data.work.s);
#line 1648
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1649
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1650
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1651
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 1654
  if (intr != 0) {
#line 1655
    if (intr != -4) {
#line 1655
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1655);
    } else {

    }
#line 1656
    tmp___2 = get_current();
#line 1656
    flush_signals(tmp___2);
#line 1657
    tmp___3 = get_t_state(thi);
#line 1657
    _b = (unsigned int )tmp___3 == 1U;
#line 1657
    if (_b != 0) {
#line 1657
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1657);
    } else {

    }
#line 1657
    if (_b != 0) {
#line 1658
      goto ldv_48261;
    } else {

    }
#line 1659
    goto ldv_48262;
  } else {

  }
#line 1662
  tmp___4 = get_t_state(thi);
#line 1662
  if ((unsigned int )tmp___4 != 1U) {
#line 1663
    goto ldv_48262;
  } else {

  }
#line 1668
  w = 0;
#line 1669
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1670
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1670
  _b___0 = tmp___5 != 0;
#line 1670
  if (_b___0 != 0) {
#line 1670
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1670);
  } else {

  }
#line 1670
  if (_b___0 != 0) {
#line 1682
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1683
    goto ldv_48261;
  } else {

  }
#line 1685
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1685
  w = (struct drbd_work *)__mptr;
#line 1686
  list_del_init(& w->list);
#line 1687
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1689
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_37520.conn <= 9);
#line 1689
  if (tmp___6 == 0) {
#line 1691
    if ((int )mdev->state.ldv_37520.conn > 9) {
#line 1693
      val.i = 0U;
#line 1693
      val.ldv_37520.conn = 5U;
#line 1693
      mask.i = 0U;
#line 1693
      mask.ldv_37520.conn = 31U;
#line 1693
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_48261: 
#line 1637
  tmp___7 = get_t_state(thi);
#line 1637
  if ((unsigned int )tmp___7 == 1U) {
#line 1638
    goto ldv_48271;
  } else {

  }
  ldv_48262: 
#line 1696
  tmp___8 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1696
  if (tmp___8 == 0) {
#line 1696
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1696);
  } else {

  }
#line 1697
  tmp___9 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1697
  if (tmp___9 == 0) {
#line 1697
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1697);
  } else {

  }
#line 1699
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1700
  i = 0;
#line 1701
  goto ldv_48278;
  ldv_48277: 
#line 1702
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1703
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1705
  goto ldv_48275;
  ldv_48274: 
#line 1706
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1706
  w = (struct drbd_work *)__mptr___0;
#line 1707
  list_del_init(& w->list);
#line 1708
  (*(w->cb))(mdev, w, 1);
#line 1709
  i = i + 1;
  ldv_48275: 
#line 1705
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1705
  if (tmp___10 == 0) {
#line 1706
    goto ldv_48274;
  } else {

  }
#line 1712
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_48278: 
#line 1701
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1701
  if (tmp___11 == 0) {
#line 1702
    goto ldv_48277;
  } else {

  }
#line 1714
  sema_init(& mdev->data.work.s, 0);
#line 1720
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1722
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 1722
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1722);
  } else {

  }
#line 1725
  drbd_thread_stop(& mdev->receiver);
#line 1726
  drbd_mdev_cleanup(mdev);
#line 1728
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1730
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1731
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1732
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1734
  return (0);
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 142 "include/linux/printk.h"
extern void dump_stack(void) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 78
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 153 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 155
  __list_del_entry(list);
#line 156
  list_add(list, head);
#line 157
  return;
}
}
#line 574 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 576
  h->next = 0;
#line 577
  h->pprev = 0;
#line 578
  return;
}
}
#line 580 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 582
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 590 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 592
  next = n->next;
#line 593
  pprev = n->pprev;
#line 594
  *pprev = next;
#line 595
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 596
    next->pprev = pprev;
  } else {

  }
#line 597
  return;
}
}
#line 606 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 608
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 608
  if (tmp == 0) {
#line 609
    __hlist_del(n);
#line 610
    INIT_HLIST_NODE(n);
  } else {

  }
#line 612
  return;
}
}
#line 614 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 616
  first = h->first;
#line 617
  n->next = first;
#line 618
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 619
    first->pprev = & n->next;
  } else {

  }
#line 620
  h->first = n;
#line 621
  n->pprev = & h->first;
#line 622
  return;
}
}
#line 82 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 84
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 84
  return (tmp);
}
}
#line 135 "include/linux/mutex.h"
extern int mutex_lock_interruptible_nested(struct mutex * , unsigned int  ) ;
#line 210 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 280
extern int del_timer_sync(struct timer_list * ) ;
#line 351 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 364
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 57 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 78
extern u32 random32(void) ;
#line 237 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 239
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 241
extern void sock_release(struct socket * ) ;
#line 244
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_18048: ;
#line 63
    goto ldv_18048;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_18049: ;
#line 65
    goto ldv_18049;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_18050: ;
#line 66
    goto ldv_18050;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 300 "include/linux/sched.h"
extern void io_schedule(void) ;
#line 358
extern long schedule_timeout(long  ) ;
#line 361
extern long schedule_timeout_uninterruptible(long  ) ;
#line 2365 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2367
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2367
  return (tmp);
}
}
#line 2391 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2393
  tmp = test_tsk_thread_flag(p, 2);
#line 2393
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2393
  return ((int )tmp___0);
}
}
#line 306 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) ;
#line 480 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 483 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 485
  return;
}
}
#line 513 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 515
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1104 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1106
  return ((struct crypto_hash *)tfm);
}
}
#line 1116 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1119
  type = type & 4294967280U;
#line 1120
  mask = mask & 4294967280U;
#line 1121
  type = type | 8U;
#line 1122
  mask = mask | 14U;
#line 1124
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1124
  tmp___0 = __crypto_hash_cast(tmp);
#line 1124
  return (tmp___0);
}
}
#line 1132 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1134
  tmp = crypto_hash_tfm(tfm);
#line 1134
  crypto_free_tfm(tmp);
#line 1135
  return;
}
}
#line 1199 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1203
  return (tmp___0);
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(hash);
#line 1209
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1209
  return (tmp___0);
}
}
#line 438 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 440
  disk->part0.nr_sects = size;
#line 441
  return;
}
}
#line 48 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 50
  __might_sleep("include/linux/highmem.h", 50, 0);
#line 51
  tmp = lowmem_page_address(page);
#line 51
  return (tmp);
}
}
#line 54 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 56
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 34
extern void mempool_free(void * , mempool_t * ) ;
#line 249 "include/linux/lru_cache.h"
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[43U] ;

  {
#line 228
  cmdnames[0] = "Data";
#line 228
  cmdnames[1] = "DataReply";
#line 228
  cmdnames[2] = "RSDataReply";
#line 228
  cmdnames[3] = "Barrier";
#line 228
  cmdnames[4] = "ReportBitMap";
#line 228
  cmdnames[5] = "BecomeSyncTarget";
#line 228
  cmdnames[6] = "BecomeSyncSource";
#line 228
  cmdnames[7] = "UnplugRemote";
#line 228
  cmdnames[8] = "DataRequest";
#line 228
  cmdnames[9] = "RSDataRequest";
#line 228
  cmdnames[10] = "SyncParam";
#line 228
  cmdnames[11] = "ReportProtocol";
#line 228
  cmdnames[12] = "ReportUUIDs";
#line 228
  cmdnames[13] = "ReportSizes";
#line 228
  cmdnames[14] = "ReportState";
#line 228
  cmdnames[15] = "ReportSyncUUID";
#line 228
  cmdnames[16] = "AuthChallenge";
#line 228
  cmdnames[17] = "AuthResponse";
#line 228
  cmdnames[18] = "StateChgRequest";
#line 228
  cmdnames[19] = "Ping";
#line 228
  cmdnames[20] = "PingAck";
#line 228
  cmdnames[21] = "RecvAck";
#line 228
  cmdnames[22] = "WriteAck";
#line 228
  cmdnames[23] = "RSWriteAck";
#line 228
  cmdnames[24] = "DiscardAck";
#line 228
  cmdnames[25] = "NegAck";
#line 228
  cmdnames[26] = "NegDReply";
#line 228
  cmdnames[27] = "NegRSDReply";
#line 228
  cmdnames[28] = "BarrierAck";
#line 228
  cmdnames[29] = "StateChgReply";
#line 228
  cmdnames[30] = "OVRequest";
#line 228
  cmdnames[31] = "OVReply";
#line 228
  cmdnames[32] = "OVResult";
#line 228
  cmdnames[33] = "CsumRSRequest";
#line 228
  cmdnames[34] = "CsumRSIsInSync";
#line 228
  cmdnames[35] = "SyncParam89";
#line 228
  cmdnames[36] = "CBitmap";
#line 228
  cmdnames[37] = 0;
#line 228
  cmdnames[38] = 0;
#line 228
  cmdnames[39] = "DelayProbe";
#line 228
  cmdnames[40] = "OutOfSync";
#line 228
  cmdnames[41] = 0;
#line 228
  cmdnames[42] = 0;
#line 271
  if ((unsigned int )cmd == 65521U) {
#line 272
    return ("HandShakeM");
  } else {

  }
#line 273
  if ((unsigned int )cmd == 65522U) {
#line 274
    return ("HandShakeS");
  } else {

  }
#line 275
  if ((unsigned int )cmd == 65534U) {
#line 276
    return ("HandShake");
  } else {

  }
#line 277
  if ((unsigned int )cmd > 41U) {
#line 278
    return ("Unknown");
  } else {

  }
#line 279
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 300
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 313
  c->word_offset = c->bit_offset >> 6;
#line 314
  return;
}
}
#line 585 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 587
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 598 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 600
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 610 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 612
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1194
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) ;
#line 1200
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) ;
#line 1209
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1219
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1221
void tl_clear(struct drbd_conf *mdev ) ;
#line 1225
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1228
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1229
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1232
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1234
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1243
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1245
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1246
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1250
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1252
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) ;
#line 1268
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1270
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) ;
#line 1279
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1296
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) ;
#line 1299
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1300
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1496
mempool_t *drbd_ee_mempool ;
#line 1498
struct page *drbd_pp_pool ;
#line 1499
spinlock_t drbd_pp_lock ;
#line 1500
int drbd_pp_vacant ;
#line 1521
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1523
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1524
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1525
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) ;
#line 1526
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) ;
#line 1530
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) ;
#line 1587
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1597
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1599
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1603
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1604
void drbd_free_tl_hash(struct drbd_conf *mdev ) ;
#line 1634 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1636
  val = 1;
#line 1637
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1639
  return;
}
}
#line 1641 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1643
  val = 2;
#line 1644
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1646
  return;
}
}
#line 1648
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1660
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1686
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1772 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1774
  page = e->pages;
#line 1775
  goto ldv_47663;
  ldv_47662: 
#line 1776
  tmp = page_count(page);
#line 1776
  if (tmp > 1) {
#line 1777
    return (1);
  } else {

  }
#line 1775
  page = page_chain_next(page);
  ldv_47663: ;
#line 1775
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1775
    tmp___0 = page_chain_next(page);
#line 1775
    __builtin_prefetch((void const   *)tmp___0);
#line 1775
    if (1 != 0) {
#line 1776
      goto ldv_47662;
    } else {
#line 1778
      goto ldv_47664;
    }
  } else {

  }
  ldv_47664: ;
#line 1779
  return (0);
}
}
#line 1818 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 1822
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1822
  return ((int )tmp);
}
}
#line 1878 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1880
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1883
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1886
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1921 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1924
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1928
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1928
  if (tmp___1 != 0UL) {
#line 1928
    __min1 = 2251799813685248UL;
#line 1928
    tmp___0 = drbd_md_first_sector(bdev);
#line 1928
    __min2 = tmp___0;
#line 1928
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1928
    s = 0UL;
  }
#line 1931
  goto ldv_47737;
  case -2: 
#line 1933
  __min1___0 = 2251799813685248UL;
#line 1933
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1933
  __min2___0 = tmp___2;
#line 1933
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1936
  __min1___1 = s;
#line 1936
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1936
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1939
  goto ldv_47737;
  default: 
#line 1941
  __min1___2 = 8587575296UL;
#line 1941
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1941
  __min2___2 = tmp___3;
#line 1941
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_47737: ;
#line 1944
  return (s);
}
}
#line 1978 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1981
  tmp = spinlock_check(& q->q_lock);
#line 1981
  flags = _raw_spin_lock_irqsave(tmp);
#line 1982
  list_add(& w->list, & q->q);
#line 1983
  up(& q->s);
#line 1985
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1986
  return;
}
}
#line 2018 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2021
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 2021
  return (tmp);
}
}
#line 2024 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2027
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 2027
  return (tmp);
}
}
#line 2109 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2111
  atomic_inc(& mdev->unacked_cnt);
#line 2112
  return;
}
}
#line 2125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2127
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2127
  if (tmp != 0) {
#line 2128
    __wake_up(& mdev->net_cnt_wait, 3U, 1, 0);
  } else {

  }
#line 2129
  return;
}
}
#line 2137 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2141
  atomic_inc(& mdev->net_cnt);
#line 2142
  have_net_conf = (int )mdev->state.ldv_37520.conn > 1;
#line 2143
  if (have_net_conf == 0) {
#line 2144
    put_net_conf(mdev);
  } else {

  }
#line 2145
  return (have_net_conf);
}
}
#line 2397 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  int changed ;

  {
#line 2399
  changed = mdev->ed_uuid != val;
#line 2400
  mdev->ed_uuid = val;
#line 2401
  return (changed);
}
}
#line 2404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2411
  return ((int )a - (int )b);
}
}
#line 2420 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2423
  spin_lock(& mdev->peer_seq_lock);
#line 2424
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2424
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2425
  mdev->peer_seq = m;
#line 2426
  spin_unlock(& mdev->peer_seq_lock);
#line 2427
  if (m == new_seq) {
#line 2428
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2429
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 50
  tmp = crypto_tfm_alg_type(tfm);
#line 50
  return ((tmp & 14U) == 8U);
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 229
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 229
  if (tmp != 0L) {
#line 229
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (229), "i" (12UL));
    ldv_48007: ;
#line 229
    goto ldv_48007;
  } else {

  }
#line 230
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 236 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 238
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 238
  if (tmp != 0L) {
#line 238
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (238), "i" (12UL));
    ldv_48012: ;
#line 238
    goto ldv_48012;
  } else {

  }
#line 239
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 244 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 246
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 252 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 255
  tmp = ar_hash_slot(mdev, sector);
#line 255
  slot = tmp;
#line 259
  n = slot->first;
#line 259
  goto ldv_48030;
  ldv_48029: ;
#line 260
  if ((unsigned long )req == (unsigned long )id) {
#line 261
    if (req->sector != sector) {
#line 261
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              261);
    } else {

    }
#line 262
    return (req);
  } else {

  }
#line 259
  n = n->next;
  ldv_48030: ;
#line 259
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 259
    __builtin_prefetch((void const   *)n->next);
#line 259
    if (1 != 0) {
#line 259
      __mptr = (struct hlist_node  const  *)n;
#line 259
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 259
      if (1 != 0) {
#line 260
        goto ldv_48029;
      } else {
#line 262
        goto ldv_48031;
      }
    } else {
#line 262
      goto ldv_48031;
    }
  } else {

  }
  ldv_48031: ;
#line 265
  return (0);
}
}
#line 306 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 308
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_48095: ;
#line 162
  goto ldv_48095;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 65 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 66
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 68
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 69
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 88
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 88
  if (tmp___0 != 0L) {
#line 88
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (88), "i" (12UL));
    ldv_48175: ;
#line 88
    goto ldv_48175;
  } else {

  }
#line 89
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 89
  if (tmp___1 != 0L) {
#line 89
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (89), "i" (12UL));
    ldv_48176: ;
#line 89
    goto ldv_48176;
  } else {

  }
#line 91
  page = *head;
#line 93
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 94
    return (0);
  } else {

  }
#line 96
  goto ldv_48179;
  ldv_48178: 
#line 97
  tmp = page_chain_next(page);
#line 98
  n = n - 1;
#line 98
  if (n == 0) {
#line 99
    goto ldv_48177;
  } else {

  }
#line 100
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 102
    return (0);
  } else {

  }
#line 103
  page = tmp;
  ldv_48179: ;
#line 96
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 97
    goto ldv_48178;
  } else {

  }
  ldv_48177: 
#line 107
  page->ldv_13007.ldv_13004.private = 0UL;
#line 109
  page = *head;
#line 110
  *head = tmp;
#line 111
  return (page);
}
}
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 120
  i = 1;
#line 121
  goto ldv_48187;
  ldv_48186: 
#line 122
  i = i + 1;
#line 122
  page = tmp;
  ldv_48187: 
#line 121
  tmp = page_chain_next(page);
#line 121
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 122
    goto ldv_48186;
  } else {

  }

#line 123
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 124
    *len = i;
  } else {

  }
#line 125
  return (page);
}
}
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 131
  i = 0;
#line 132
  goto ldv_48196;
  ldv_48195: 
#line 133
  put_page(page);
#line 134
  i = i + 1;
#line 132
  page = tmp;
  ldv_48196: ;
#line 132
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 132
    tmp = page_chain_next(page);
#line 132
    if (1 != 0) {
#line 133
      goto ldv_48195;
    } else {
#line 135
      goto ldv_48197;
    }
  } else {

  }
  ldv_48197: ;
#line 136
  return (i);
}
}
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 144
  tmp = page_chain_tail(chain_first, 0);
#line 145
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 145
  if (tmp___0 != 0L) {
#line 145
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (145), "i" (12UL));
    ldv_48204: ;
#line 145
    goto ldv_48204;
  } else {

  }
#line 149
  chain_last->ldv_13007.ldv_13004.private = (unsigned long )*head;
#line 150
  *head = chain_first;
#line 151
  return;
}
}
#line 153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 155
  page = 0;
#line 156
  tmp = 0;
#line 157
  i = 0;
#line 161
  if (drbd_pp_vacant >= number) {
#line 162
    spin_lock(& drbd_pp_lock);
#line 163
    page = page_chain_del(& drbd_pp_pool, number);
#line 164
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 165
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 166
    spin_unlock(& drbd_pp_lock);
#line 167
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 168
      return (page);
    } else {

    }
  } else {

  }
#line 174
  i = 0;
#line 174
  goto ldv_48214;
  ldv_48213: 
#line 175
  tmp = alloc_pages(514U, 0U);
#line 176
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 177
    goto ldv_48212;
  } else {

  }
#line 178
  tmp->ldv_13007.ldv_13004.private = (unsigned long )page;
#line 179
  page = tmp;
#line 174
  i = i + 1;
  ldv_48214: ;
#line 174
  if (i < number) {
#line 175
    goto ldv_48213;
  } else {

  }
  ldv_48212: ;
#line 182
  if (i == number) {
#line 183
    return (page);
  } else {

  }
#line 188
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 189
    tmp = page_chain_tail(page, 0);
#line 190
    spin_lock(& drbd_pp_lock);
#line 191
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 192
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 193
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 195
  return (0);
}
}
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 208
  le = mdev->net_ee.next;
#line 208
  tle = le->next;
#line 208
  goto ldv_48226;
  ldv_48225: 
#line 209
  __mptr = (struct list_head  const  *)le;
#line 209
  e = (struct drbd_epoch_entry *)__mptr;
#line 210
  tmp = drbd_ee_has_active_page___0(e);
#line 210
  if (tmp != 0) {
#line 211
    goto ldv_48224;
  } else {

  }
#line 212
  list_move(le, to_be_freed);
#line 208
  le = tle;
#line 208
  tle = le->next;
  ldv_48226: ;
#line 208
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 209
    goto ldv_48225;
  } else {

  }
  ldv_48224: ;
#line 213
  return;
}
}
#line 216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 218
  reclaimed.next = & reclaimed;
#line 218
  reclaimed.prev = & reclaimed;
#line 221
  spin_lock_irq(& mdev->req_lock);
#line 222
  reclaim_net_ee(mdev, & reclaimed);
#line 223
  spin_unlock_irq(& mdev->req_lock);
#line 225
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 225
  e = (struct drbd_epoch_entry *)__mptr;
#line 225
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 225
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 225
  goto ldv_48240;
  ldv_48239: 
#line 226
  drbd_free_some_ee(mdev, e, 1);
#line 225
  e = t;
#line 225
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 225
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_48240: ;
#line 225
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 226
    goto ldv_48239;
  } else {

  }

#line 230
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 243
  page = 0;
#line 244
  tmp = get_current();
#line 244
  wait.flags = 0U;
#line 244
  wait.private = (void *)tmp;
#line 244
  wait.func = & autoremove_wake_function;
#line 244
  wait.task_list.next = & wait.task_list;
#line 244
  wait.task_list.prev = & wait.task_list;
#line 248
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 248
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 249
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 251
  goto ldv_48251;
  ldv_48250: 
#line 252
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 254
  drbd_kick_lo_and_reclaim_net(mdev);
#line 256
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 256
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 257
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 258
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 259
      goto ldv_48249;
    } else {

    }
  } else {

  }
#line 262
  if (! retry) {
#line 263
    goto ldv_48249;
  } else {

  }
#line 265
  tmp___2 = get_current();
#line 265
  tmp___3 = signal_pending(tmp___2);
#line 265
  if (tmp___3 != 0) {
#line 266
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 267
    goto ldv_48249;
  } else {

  }
#line 270
  schedule();
  ldv_48251: ;
#line 251
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 252
    goto ldv_48250;
  } else {

  }
  ldv_48249: 
#line 272
  finish_wait(& drbd_pp_wait, & wait);
#line 274
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 275
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 276
  return (page);
}
}
#line 283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page , int is_net ) 
{ 
  atomic_t *a ;
  int i ;
  struct page *tmp ;

  {
#line 285
  a = is_net != 0 ? & mdev->pp_in_use_by_net : & mdev->pp_in_use;
#line 288
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 32UL) {
#line 289
    i = page_chain_free(page);
  } else {
#line 292
    tmp = page_chain_tail(page, & i);
#line 293
    spin_lock(& drbd_pp_lock);
#line 294
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 295
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 296
    spin_unlock(& drbd_pp_lock);
  }
#line 298
  i = atomic_sub_return(i, a);
#line 299
  if (i < 0) {
#line 300
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: %s: %d < 0\n",
             is_net != 0 ? (char *)"pp_in_use_by_net" : (char *)"pp_in_use", i);
  } else {

  }
#line 302
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 303
  return;
}
}
#line 320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 328
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 330
  tmp = drbd_insert_fault(mdev, 8U);
#line 330
  if (tmp != 0) {
#line 331
    return (0);
  } else {

  }
#line 333
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 333
  e = (struct drbd_epoch_entry *)tmp___0;
#line 334
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 335
    if ((gfp_mask & 512U) == 0U) {
#line 336
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 337
    return (0);
  } else {

  }
#line 340
  page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 341
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 342
    goto fail;
  } else {

  }
#line 344
  INIT_HLIST_NODE(& e->colision);
#line 345
  e->epoch = 0;
#line 346
  e->mdev = mdev;
#line 347
  e->pages = page;
#line 348
  atomic_set(& e->pending_bios, 0);
#line 349
  e->size = data_size;
#line 350
  e->flags = 0UL;
#line 351
  e->sector = sector;
#line 352
  e->ldv_45720.block_id = id;
#line 354
  return (e);
  fail: 
#line 357
  mempool_free((void *)e, drbd_ee_mempool);
#line 358
  return (0);
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 363
  if ((e->flags & 16UL) != 0UL) {
#line 364
    kfree((void const   *)e->ldv_45720.digest);
  } else {

  }
#line 365
  drbd_pp_free(mdev, e->pages, is_net);
#line 366
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 366
  if (tmp != 0) {
#line 366
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            366);
  } else {

  }
#line 367
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 367
  if (tmp___0 == 0) {
#line 367
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            367);
  } else {

  }
#line 368
  mempool_free((void *)e, drbd_ee_mempool);
#line 369
  return;
}
}
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  int is_net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 373
  work_list.next = & work_list;
#line 373
  work_list.prev = & work_list;
#line 375
  count = 0;
#line 376
  is_net = (unsigned long )(& mdev->net_ee) == (unsigned long )list;
#line 378
  spin_lock_irq(& mdev->req_lock);
#line 379
  list_splice_init(list, & work_list);
#line 380
  spin_unlock_irq(& mdev->req_lock);
#line 382
  __mptr = (struct list_head  const  *)work_list.next;
#line 382
  e = (struct drbd_epoch_entry *)__mptr;
#line 382
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 382
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 382
  goto ldv_48292;
  ldv_48291: 
#line 383
  drbd_free_some_ee(mdev, e, is_net);
#line 384
  count = count + 1;
#line 382
  e = t;
#line 382
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 382
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_48292: ;
#line 382
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 383
    goto ldv_48291;
  } else {

  }

#line 386
  return (count);
}
}
#line 399 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 401
  work_list.next = & work_list;
#line 401
  work_list.prev = & work_list;
#line 402
  reclaimed.next = & reclaimed;
#line 402
  reclaimed.prev = & reclaimed;
#line 404
  ok = (int )mdev->state.ldv_37520.conn > 8;
#line 406
  spin_lock_irq(& mdev->req_lock);
#line 407
  reclaim_net_ee(mdev, & reclaimed);
#line 408
  list_splice_init(& mdev->done_ee, & work_list);
#line 409
  spin_unlock_irq(& mdev->req_lock);
#line 411
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 411
  e = (struct drbd_epoch_entry *)__mptr;
#line 411
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 411
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 411
  goto ldv_48309;
  ldv_48308: 
#line 412
  drbd_free_some_ee(mdev, e, 1);
#line 411
  e = t;
#line 411
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 411
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_48309: ;
#line 411
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 412
    goto ldv_48308;
  } else {

  }
#line 418
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 418
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 418
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 418
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 418
  goto ldv_48318;
  ldv_48317: 
#line 420
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 420
  ok = tmp != 0 && ok != 0;
#line 421
  drbd_free_some_ee(mdev, e, 0);
#line 418
  e = t;
#line 418
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 418
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_48318: ;
#line 418
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 419
    goto ldv_48317;
  } else {

  }
#line 423
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 425
  return (ok);
}
}
#line 428 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 430
  tmp = get_current();
#line 430
  wait.flags = 0U;
#line 430
  wait.private = (void *)tmp;
#line 430
  wait.func = & autoremove_wake_function;
#line 430
  wait.task_list.next = & wait.task_list;
#line 430
  wait.task_list.prev = & wait.task_list;
#line 434
  goto ldv_48326;
  ldv_48325: 
#line 435
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 436
  spin_unlock_irq(& mdev->req_lock);
#line 437
  io_schedule();
#line 438
  finish_wait(& mdev->ee_wait, & wait);
#line 439
  spin_lock_irq(& mdev->req_lock);
  ldv_48326: 
#line 434
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 434
  if (tmp___0 == 0) {
#line 435
    goto ldv_48325;
  } else {

  }

#line 439
  return;
}
}
#line 443 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 445
  spin_lock_irq(& mdev->req_lock);
#line 446
  _drbd_wait_ee_list_empty(mdev, head);
#line 447
  spin_unlock_irq(& mdev->req_lock);
#line 448
  return;
}
}
#line 452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 455
  sk = sock->sk;
#line 456
  err = 0;
#line 458
  *what = "listen";
#line 459
  err = (*((sock->ops)->listen))(sock, 5);
#line 460
  if (err < 0) {
#line 461
    goto out;
  } else {

  }
#line 463
  *what = "sock_create_lite";
#line 464
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 466
  if (err < 0) {
#line 467
    goto out;
  } else {

  }
#line 469
  *what = "accept";
#line 470
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 471
  if (err < 0) {
#line 472
    sock_release(*newsock);
#line 473
    *newsock = 0;
#line 474
    goto out;
  } else {

  }
#line 476
  (*newsock)->ops = sock->ops;
  out: ;
#line 479
  return (err);
}
}
#line 482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 486
  iov.iov_base = buf;
#line 486
  iov.iov_len = size;
#line 490
  msg.msg_name = 0;
#line 490
  msg.msg_namelen = 0;
#line 490
  msg.msg_iov = (struct iovec *)(& iov);
#line 490
  msg.msg_iovlen = 1UL;
#line 490
  msg.msg_control = 0;
#line 490
  msg.msg_controllen = 0UL;
#line 490
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 497
  tmp = current_thread_info();
#line 497
  oldfs = tmp->addr_limit;
#line 498
  tmp___0 = current_thread_info();
#line 498
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 498
  tmp___0->addr_limit = __constr_expr_0;
#line 499
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 500
  tmp___1 = current_thread_info();
#line 500
  tmp___1->addr_limit = oldfs;
#line 502
  return (rv);
}
}
#line 505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 508
  iov.iov_base = buf;
#line 508
  iov.iov_len = size;
#line 512
  msg.msg_name = 0;
#line 512
  msg.msg_namelen = 0;
#line 512
  msg.msg_iov = (struct iovec *)(& iov);
#line 512
  msg.msg_iovlen = 1UL;
#line 512
  msg.msg_control = 0;
#line 512
  msg.msg_controllen = 0UL;
#line 512
  msg.msg_flags = 16640U;
#line 519
  tmp = current_thread_info();
#line 519
  oldfs = tmp->addr_limit;
#line 520
  tmp___0 = current_thread_info();
#line 520
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 520
  tmp___0->addr_limit = __constr_expr_0;
  ldv_48364: 
#line 523
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 524
  if ((size_t )rv == size) {
#line 525
    goto ldv_48363;
  } else {

  }
#line 532
  if (rv < 0) {
#line 533
    if (rv == -104) {
#line 534
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 535
    if (rv != -512) {
#line 536
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 537
    goto ldv_48363;
  } else
#line 538
  if (rv == 0) {
#line 539
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 540
    goto ldv_48363;
  } else {
#line 546
    goto ldv_48363;
  }
#line 548
  goto ldv_48364;
  ldv_48363: 
#line 550
  tmp___1 = current_thread_info();
#line 550
  tmp___1->addr_limit = oldfs;
#line 552
  if ((size_t )rv != size) {
#line 553
    val.i = 0U;
#line 553
    val.ldv_37520.conn = 4U;
#line 553
    mask.i = 0U;
#line 553
    mask.ldv_37520.conn = 31U;
#line 553
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 555
  return (rv);
}
}
#line 563 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 567
  if (snd != 0U) {
#line 568
    (sock->sk)->sk_sndbuf = (int )snd;
#line 569
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 571
  if (rcv != 0U) {
#line 572
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 573
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 575
  return;
}
}
#line 577 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 583
  disconnect_on_error = 1;
#line 585
  tmp = get_net_conf(mdev);
#line 585
  if (tmp == 0) {
#line 586
    return (0);
  } else {

  }
#line 588
  what = "sock_create_kern";
#line 589
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 591
  if (err < 0) {
#line 592
    sock = 0;
#line 593
    goto out;
  } else {

  }
#line 596
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 596
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 596
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 598
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 608
  __min1 = (mdev->net_conf)->my_addr_len;
#line 608
  __min2 = 28;
#line 608
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 608
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 610
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 611
    src_in6.sin6_port = 0U;
  } else {
#line 613
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 615
  what = "bind before connect";
#line 616
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 619
  if (err < 0) {
#line 620
    goto out;
  } else {

  }
#line 624
  disconnect_on_error = 0;
#line 625
  what = "connect";
#line 626
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 631
  if (err < 0) {
#line 632
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 633
      sock_release(sock);
#line 634
      sock = 0;
    } else {

    }
#line 636
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 643
    disconnect_on_error = 0;
#line 644
    goto ldv_48401;
    default: 
#line 646
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_48401: ;
#line 648
    if (disconnect_on_error != 0) {
#line 649
      val.i = 0U;
#line 649
      val.ldv_37520.conn = 1U;
#line 649
      mask.i = 0U;
#line 649
      mask.ldv_37520.conn = 31U;
#line 649
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 651
  put_net_conf(mdev);
#line 652
  return (sock);
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 658
  s_estab = 0;
#line 661
  tmp = get_net_conf(mdev);
#line 661
  if (tmp == 0) {
#line 662
    return (0);
  } else {

  }
#line 664
  what = "sock_create_kern";
#line 665
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 667
  if (err != 0) {
#line 668
    s_listen = 0;
#line 669
    goto out;
  } else {

  }
#line 672
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 673
  tmp___0 = random32();
#line 673
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 675
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 676
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 677
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 678
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 681
  what = "bind before listen";
#line 682
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 685
  if (err < 0) {
#line 686
    goto out;
  } else {

  }
#line 688
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 691
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 692
    sock_release(s_listen);
  } else {

  }
#line 693
  if (err < 0) {
#line 694
    if ((err != -11 && err != -4) && err != -512) {
#line 695
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 696
      val.i = 0U;
#line 696
      val.ldv_37520.conn = 1U;
#line 696
      mask.i = 0U;
#line 696
      mask.ldv_37520.conn = 31U;
#line 696
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 699
  put_net_conf(mdev);
#line 701
  return (s_estab);
}
}
#line 704 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header80 *h ;
  int tmp ;

  {
#line 707
  h = & mdev->data.sbuf.header.h80;
#line 709
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 709
  return (tmp);
}
}
#line 712 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header80 *h ;
  int rr ;
  __u16 tmp ;

  {
#line 714
  h = & mdev->data.rbuf.header.h80;
#line 717
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 719
  if (rr == 8 && h->magic == 1728214147U) {
#line 720
    tmp = __fswab16((int )h->command);
#line 720
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 722
  return (65535);
}
}
#line 730 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 735
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 736
    return (0);
  } else {

  }
#line 738
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 740
  if (rr > 0 || rr == -11) {
#line 741
    return (1);
  } else {
#line 743
    sock_release(*sock);
#line 744
    *sock = 0;
#line 745
    return (0);
  }
}
}
#line 757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int tmp___0 ;
  enum drbd_packets tmp___1 ;
  u32 tmp___2 ;
  struct task_struct *tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 762
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 762
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            762);
  } else {

  }
#line 764
  val.i = 0U;
#line 764
  val.ldv_37520.conn = 8U;
#line 764
  mask.i = 0U;
#line 764
  mask.ldv_37520.conn = 31U;
#line 764
  tmp = drbd_request_state(mdev, mask, val);
#line 764
  if (tmp <= 0) {
#line 765
    return (-2);
  } else {

  }
#line 767
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 769
  sock = 0;
#line 770
  msock = 0;
  ldv_48460: 
#line 773
  try = 0;
  ldv_48452: 
#line 775
  s = drbd_try_connect(mdev);
#line 776
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 777
    goto ldv_48451;
  } else {
#line 776
    try = try + 1;
#line 776
    if (try > 2) {
#line 777
      goto ldv_48451;
    } else {

    }
  }
#line 779
  schedule_timeout_interruptible(25L);
#line 780
  goto ldv_48452;
  ldv_48451: ;
#line 782
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 783
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 784
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 785
      sock = s;
#line 786
      s = 0;
    } else
#line 787
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 788
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 789
      msock = s;
#line 790
      s = 0;
    } else {
#line 792
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 793
      goto out_release_sockets;
    }
  } else {

  }
#line 797
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 798
    schedule_timeout_interruptible((long )(((mdev->net_conf)->ping_timeo * 250) / 10));
#line 799
    ok = drbd_socket_okay(mdev, & sock);
#line 800
    tmp___0 = drbd_socket_okay(mdev, & msock);
#line 800
    ok = tmp___0 != 0 && ok != 0;
#line 801
    if (ok != 0) {
#line 802
      goto ldv_48454;
    } else {

    }
  } else {

  }
  retry: 
#line 806
  s = drbd_wait_for_connect(mdev);
#line 807
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 808
    tmp___1 = drbd_recv_fp(mdev, s);
#line 808
    try = (int )tmp___1;
#line 809
    drbd_socket_okay(mdev, & sock);
#line 810
    drbd_socket_okay(mdev, & msock);
#line 811
    switch (try) {
    case 65522: ;
#line 813
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 814
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 815
      sock_release(sock);
    } else {

    }
#line 817
    sock = s;
#line 818
    goto ldv_48457;
    case 65521: ;
#line 820
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 821
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 822
      sock_release(msock);
    } else {

    }
#line 824
    msock = s;
#line 825
    set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 826
    goto ldv_48457;
    default: 
#line 828
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 829
    sock_release(s);
#line 830
    tmp___2 = random32();
#line 830
    if ((int )tmp___2 & 1) {
#line 831
      goto retry;
    } else {

    }
    }
    ldv_48457: ;
  } else {

  }
#line 835
  if ((int )mdev->state.ldv_37520.conn <= 1) {
#line 836
    goto out_release_sockets;
  } else {

  }
#line 837
  tmp___5 = get_current();
#line 837
  tmp___6 = signal_pending(tmp___5);
#line 837
  if (tmp___6 != 0) {
#line 838
    tmp___3 = get_current();
#line 838
    flush_signals(tmp___3);
#line 839
    __asm__  volatile   ("": : : "memory");
#line 840
    tmp___4 = get_t_state(& mdev->receiver);
#line 840
    if ((unsigned int )tmp___4 == 2U) {
#line 841
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 844
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 845
    ok = drbd_socket_okay(mdev, & sock);
#line 846
    tmp___7 = drbd_socket_okay(mdev, & msock);
#line 846
    ok = tmp___7 != 0 && ok != 0;
#line 847
    if (ok != 0) {
#line 848
      goto ldv_48454;
    } else {

    }
  } else {

  }
#line 850
  goto ldv_48460;
  ldv_48454: 
#line 852
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 853
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 855
  (sock->sk)->sk_allocation = 16U;
#line 856
  (msock->sk)->sk_allocation = 16U;
#line 858
  (sock->sk)->sk_priority = 4U;
#line 859
  (msock->sk)->sk_priority = 6U;
#line 866
  tmp___8 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 866
  (sock->sk)->sk_rcvtimeo = tmp___8;
#line 866
  (sock->sk)->sk_sndtimeo = tmp___8;
#line 869
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 870
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 874
  drbd_tcp_nodelay(sock);
#line 875
  drbd_tcp_nodelay(msock);
#line 877
  mdev->data.socket = sock;
#line 878
  mdev->meta.socket = msock;
#line 879
  mdev->last_received = jiffies;
#line 881
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 881
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            881);
  } else {

  }
#line 883
  h = drbd_do_handshake(mdev);
#line 884
  if (h <= 0) {
#line 885
    return (h);
  } else {

  }
#line 887
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 889
    tmp___9 = drbd_do_auth(mdev);
#line 889
    switch (tmp___9) {
    case -1: 
#line 891
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 892
    return (-1);
    case 0: 
#line 894
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 895
    return (0);
    }
  } else {

  }
#line 899
  val___0.i = 0U;
#line 899
  val___0.ldv_37520.conn = 9U;
#line 899
  mask___0.i = 0U;
#line 899
  mask___0.ldv_37520.conn = 31U;
#line 899
  tmp___10 = drbd_request_state(mdev, mask___0, val___0);
#line 899
  if (tmp___10 <= 0) {
#line 900
    return (0);
  } else {

  }
#line 902
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 903
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 905
  atomic_set(& mdev->packet_seq, 0);
#line 906
  mdev->peer_seq = 0U;
#line 908
  drbd_thread_start(& mdev->asender);
#line 910
  tmp___11 = drbd_send_protocol(mdev);
#line 910
  if (tmp___11 == -1) {
#line 911
    return (-1);
  } else {

  }
#line 912
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 913
  drbd_send_sizes(mdev, 0, 0);
#line 914
  drbd_send_uuids(mdev);
#line 915
  drbd_send_state(mdev);
#line 916
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 917
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 918
  mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
#line 920
  return (1);
  out_release_sockets: ;
#line 923
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 924
    sock_release(sock);
  } else {

  }
#line 925
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 926
    sock_release(msock);
  } else {

  }
#line 927
  return (-1);
}
}
#line 930 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , enum drbd_packets *cmd , unsigned int *packet_size ) 
{ 
  union p_header *h ;
  int r ;
  struct task_struct *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  __u32 tmp___5 ;
  __u16 tmp___6 ;
  __u16 tmp___7 ;
  __u32 tmp___8 ;
  long tmp___9 ;

  {
#line 932
  h = & mdev->data.rbuf.header;
#line 935
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 936
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 936
  if (tmp___1 != 0L) {
#line 937
    tmp = get_current();
#line 937
    tmp___0 = signal_pending(tmp);
#line 937
    if (tmp___0 == 0) {
#line 938
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
               r);
    } else {

    }
#line 939
    return (0);
  } else {

  }
#line 942
  tmp___9 = __builtin_expect(h->h80.magic == 1728214147U, 1L);
#line 942
  if (tmp___9 != 0L) {
#line 943
    tmp___2 = __fswab16((int )h->h80.command);
#line 943
    *cmd = (enum drbd_packets )tmp___2;
#line 944
    tmp___3 = __fswab16((int )h->h80.length);
#line 944
    *packet_size = (unsigned int )tmp___3;
  } else
#line 945
  if ((unsigned int )h->h95.magic == 23171U) {
#line 946
    tmp___4 = __fswab16((int )h->h95.command);
#line 946
    *cmd = (enum drbd_packets )tmp___4;
#line 947
    tmp___5 = __fswab32(h->h95.length);
#line 947
    *packet_size = tmp___5;
  } else {
#line 949
    tmp___6 = __fswab16((int )h->h80.length);
#line 949
    tmp___7 = __fswab16((int )h->h80.command);
#line 949
    tmp___8 = __fswab32(h->h80.magic);
#line 949
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%08x c: %d l: %d\n",
            tmp___8, (int )tmp___7, (int )tmp___6);
#line 953
    return (0);
  }
#line 955
  mdev->last_received = jiffies;
#line 957
  return (1);
}
}
#line 960 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_flush(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 964
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 964
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 964
    if (tmp != 0) {
#line 965
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0);
#line 967
      if (rv != 0) {
#line 968
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                rv);
#line 972
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 974
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 976
  return;
}
}
#line 984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 990
  rv = FE_STILL_LIVE;
#line 992
  spin_lock(& mdev->epoch_lock);
  ldv_48497: 
#line 994
  next_epoch = 0;
#line 996
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 998
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1000
  atomic_dec(& epoch->active);
#line 1001
  goto ldv_48487;
  case 1U: 
#line 1003
  set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1004
  goto ldv_48487;
  case 2U: ;
#line 1007
  goto ldv_48487;
  }
  ldv_48487: ;
#line 1010
  if (epoch_size != 0) {
#line 1010
    tmp___1 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1010
    if (tmp___1 == 0) {
#line 1010
      tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1010
      if (tmp___2 != 0) {
#line 1013
        if (((unsigned int )ev & 32U) == 0U) {
#line 1014
          spin_unlock(& mdev->epoch_lock);
#line 1015
          drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1016
          spin_lock(& mdev->epoch_lock);
        } else {

        }
#line 1018
        atomic_dec(& mdev->unacked_cnt);
#line 1018
        tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1018
        if (tmp___0 < 0) {
#line 1018
          tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1018
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
                  "drbd_may_finish_epoch", 1018, tmp);
        } else {

        }
#line 1020
        if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1021
          __mptr = (struct list_head  const  *)epoch->list.next;
#line 1021
          next_epoch = (struct drbd_epoch *)__mptr;
#line 1022
          list_del(& epoch->list);
#line 1023
          ev = (enum epoch_event )(((unsigned int )ev & 32U) | 2U);
#line 1024
          mdev->epochs = mdev->epochs - 1U;
#line 1025
          kfree((void const   *)epoch);
#line 1027
          if ((unsigned int )rv == 0U) {
#line 1028
            rv = FE_DESTROYED;
          } else {

          }
        } else {
#line 1030
          epoch->flags = 0UL;
#line 1031
          atomic_set(& epoch->epoch_size, 0);
#line 1033
          if ((unsigned int )rv == 0U) {
#line 1034
            rv = FE_RECYCLED;
          } else {

          }
#line 1035
          __wake_up(& mdev->ee_wait, 3U, 1, 0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1039
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1040
    goto ldv_48496;
  } else {

  }
#line 1042
  epoch = next_epoch;
#line 1043
  goto ldv_48497;
  ldv_48496: 
#line 1045
  spin_unlock(& mdev->epoch_lock);
#line 1047
  return (rv);
}
}
#line 1055 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[3U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1058
  write_ordering_str[0] = (char *)"none";
#line 1058
  write_ordering_str[1] = (char *)"drain";
#line 1058
  write_ordering_str[2] = (char *)"flush";
#line 1064
  pwo = mdev->write_ordering;
#line 1065
  _min1 = pwo;
#line 1065
  _min2 = wo;
#line 1065
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1066
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 372UL) != 0U) {
#line 1067
    wo = WO_drain_io;
  } else {

  }
#line 1068
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 380UL) != 0U) {
#line 1069
    wo = WO_none;
  } else {

  }
#line 1070
  mdev->write_ordering = wo;
#line 1071
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 2U) {
#line 1072
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1073
  return;
}
}
#line 1092 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  int err ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1095
  bios = 0;
#line 1097
  page = e->pages;
#line 1098
  sector = e->sector;
#line 1099
  ds = e->size;
#line 1100
  n_bios = 0U;
#line 1101
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
#line 1102
  err = -12;
  next_bio: 
#line 1109
  bio = bio_alloc(16U, (int )nr_pages);
#line 1110
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1111
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1112
    goto fail;
  } else {

  }
#line 1115
  bio->bi_sector = sector;
#line 1116
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1117
  bio->bi_rw = (unsigned long )rw;
#line 1118
  bio->bi_private = (void *)e;
#line 1119
  bio->bi_end_io = & drbd_endio_sec;
#line 1121
  bio->bi_next = bios;
#line 1122
  bios = bio;
#line 1123
  n_bios = n_bios + 1U;
#line 1125
  goto ldv_48529;
  ldv_48528: 
#line 1126
  __min1 = ds;
#line 1126
  __min2 = 4096U;
#line 1126
  len = __min1 < __min2 ? __min1 : __min2;
#line 1127
  tmp = bio_add_page(bio, page, len, 0U);
#line 1127
  if (tmp == 0) {
#line 1131
    if ((unsigned int )bio->bi_vcnt == 0U) {
#line 1132
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio_add_page failed for len=%u, bi_vcnt=0 (bi_sector=%llu)\n",
              len, (unsigned long long )bio->bi_sector);
#line 1136
      err = -28;
#line 1137
      goto fail;
    } else {

    }
#line 1139
    goto next_bio;
  } else {

  }
#line 1141
  ds = ds - len;
#line 1142
  sector = (sector_t )(len >> 9) + sector;
#line 1143
  nr_pages = nr_pages - 1U;
#line 1125
  page = page_chain_next(page);
  ldv_48529: ;
#line 1125
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1125
    tmp___0 = page_chain_next(page);
#line 1125
    __builtin_prefetch((void const   *)tmp___0);
#line 1125
    if (1 != 0) {
#line 1126
      goto ldv_48528;
    } else {
#line 1128
      goto ldv_48530;
    }
  } else {

  }
  ldv_48530: ;
#line 1145
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1145
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1145);
  } else {

  }
#line 1146
  if (ds != 0U) {
#line 1146
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1146);
  } else {

  }
#line 1148
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_48531: 
#line 1150
  bio = bios;
#line 1151
  bios = bios->bi_next;
#line 1152
  bio->bi_next = 0;
#line 1154
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1155
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1156
    goto ldv_48531;
  } else {

  }

#line 1156
  return (0);
  fail: ;
#line 1159
  goto ldv_48534;
  ldv_48533: 
#line 1160
  bio = bios;
#line 1161
  bios = bios->bi_next;
#line 1162
  bio_put(bio);
  ldv_48534: ;
#line 1159
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1160
    goto ldv_48533;
  } else {

  }

#line 1164
  return (err);
}
}
#line 1167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  int rv ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  enum finish_epoch tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1170
  p = & mdev->data.rbuf.barrier;
#line 1173
  inc_unacked(mdev);
#line 1175
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1176
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1176
  rv = (int )tmp;
#line 1183
  switch ((unsigned int )mdev->write_ordering) {
  case 0U: ;
#line 1185
  if (rv == 2) {
#line 1186
    return (1);
  } else {

  }
#line 1190
  tmp___0 = kmalloc(40UL, 16U);
#line 1190
  epoch = (struct drbd_epoch *)tmp___0;
#line 1191
  if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1192
    goto ldv_48545;
  } else {
#line 1194
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
  }
  case 2U: ;
  case 1U: 
#line 1199
  drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1200
  drbd_flush(mdev);
#line 1202
  tmp___2 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1202
  if (tmp___2 != 0) {
#line 1203
    tmp___1 = kmalloc(40UL, 16U);
#line 1203
    epoch = (struct drbd_epoch *)tmp___1;
#line 1204
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1205
      goto ldv_48545;
    } else {

    }
  } else {

  }
#line 1208
  epoch = mdev->current_epoch;
#line 1209
  tmp___3 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1209
  if (tmp___3 == 0) {
#line 1209
    goto ldv_48548;
  } else {

  }
#line 1209
  tmp___4 = get_current();
#line 1209
  __wait.flags = 0U;
#line 1209
  __wait.private = (void *)tmp___4;
#line 1209
  __wait.func = & autoremove_wake_function;
#line 1209
  __wait.task_list.next = & __wait.task_list;
#line 1209
  __wait.task_list.prev = & __wait.task_list;
  ldv_48551: 
#line 1209
  prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1209
  tmp___5 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1209
  if (tmp___5 == 0) {
#line 1209
    goto ldv_48550;
  } else {

  }
#line 1209
  schedule();
#line 1209
  goto ldv_48551;
  ldv_48550: 
#line 1209
  finish_wait(& mdev->ee_wait, & __wait);
  ldv_48548: 
#line 1211
  tmp___6 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1211
  if (tmp___6 != 0) {
#line 1211
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&epoch->active) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1211);
  } else {

  }
#line 1212
  if (epoch->flags != 0UL) {
#line 1212
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( epoch->flags == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1212);
  } else {

  }
#line 1214
  return (1);
  default: 
#line 1216
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Strangeness in mdev->write_ordering %d\n",
          (unsigned int )mdev->write_ordering);
#line 1217
  return (0);
  }
  ldv_48545: 
#line 1220
  epoch->flags = 0UL;
#line 1221
  atomic_set(& epoch->epoch_size, 0);
#line 1222
  atomic_set(& epoch->active, 0);
#line 1224
  spin_lock(& mdev->epoch_lock);
#line 1225
  tmp___7 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1225
  if (tmp___7 != 0) {
#line 1226
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1227
    mdev->current_epoch = epoch;
#line 1228
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1231
    kfree((void const   *)epoch);
  }
#line 1233
  spin_unlock(& mdev->epoch_lock);
#line 1235
  return (1);
}
}
#line 1241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int _b ;
  int _b___0 ;
  int _b___1 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  struct page *tmp___7 ;
  int tmp___8 ;

  {
#line 1243
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1243
  capacity = tmp;
#line 1247
  dig_in = mdev->int_dig_in;
#line 1248
  dig_vv = mdev->int_dig_vv;
#line 1251
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1251
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1251
    dgs = (int )tmp___0;
  } else {
#line 1251
    dgs = 0;
  }
#line 1254
  if (dgs != 0) {
#line 1255
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1256
    if (rr != dgs) {
#line 1257
      tmp___1 = get_current();
#line 1257
      tmp___2 = signal_pending(tmp___1);
#line 1257
      if (tmp___2 == 0) {
#line 1258
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1261
      return (0);
    } else {

    }
  } else {

  }
#line 1265
  data_size = data_size - dgs;
#line 1267
  _b = data_size == 0;
#line 1267
  if (_b != 0) {
#line 1267
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1267);
  } else {

  }
#line 1267
  if (_b != 0) {
#line 1267
    return (0);
  } else {

  }
#line 1268
  _b___0 = (data_size & 511) != 0;
#line 1268
  if (_b___0 != 0) {
#line 1268
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1268);
  } else {

  }
#line 1268
  if (_b___0 != 0) {
#line 1268
    return (0);
  } else {

  }
#line 1269
  _b___1 = (unsigned int )data_size > 131072U;
#line 1269
  if (_b___1 != 0) {
#line 1269
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_BIO_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1269);
  } else {

  }
#line 1269
  if (_b___1 != 0) {
#line 1269
    return (0);
  } else {

  }
#line 1273
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1274
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "request from peer beyond end of local disk: capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1278
    return (0);
  } else {

  }
#line 1284
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1285
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1286
    return (0);
  } else {

  }
#line 1288
  ds = data_size;
#line 1289
  page = e->pages;
#line 1290
  goto ldv_48581;
  ldv_48580: 
#line 1291
  __min1 = ds;
#line 1291
  __min2 = 4096;
#line 1291
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1292
  tmp___3 = kmap(page);
#line 1292
  data = (unsigned long *)tmp___3;
#line 1293
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1294
  tmp___4 = drbd_insert_fault(mdev, 9U);
#line 1294
  if (tmp___4 != 0) {
#line 1295
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1296
    *data = ~ *data;
  } else {

  }
#line 1298
  kunmap(page);
#line 1299
  if ((unsigned int )rr != len) {
#line 1300
    drbd_free_some_ee(mdev, e, 0);
#line 1301
    tmp___5 = get_current();
#line 1301
    tmp___6 = signal_pending(tmp___5);
#line 1301
    if (tmp___6 == 0) {
#line 1302
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, len);
    } else {

    }
#line 1304
    return (0);
  } else {

  }
#line 1306
  ds = ds - rr;
#line 1290
  page = page_chain_next(page);
  ldv_48581: ;
#line 1290
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1290
    tmp___7 = page_chain_next(page);
#line 1290
    __builtin_prefetch((void const   *)tmp___7);
#line 1290
    if (1 != 0) {
#line 1291
      goto ldv_48580;
    } else {
#line 1293
      goto ldv_48582;
    }
  } else {

  }
  ldv_48582: ;
#line 1309
  if (dgs != 0) {
#line 1310
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1311
    tmp___8 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1311
    if (tmp___8 != 0) {
#line 1312
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED: %llus +%u\n",
              (unsigned long long )sector, data_size);
#line 1314
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1316
      drbd_free_some_ee(mdev, e, 0);
#line 1317
      return (0);
    } else {

    }
  } else {

  }
#line 1320
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1321
  return (e);
}
}
#line 1327 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1330
  rv = 1;
#line 1333
  if (data_size == 0) {
#line 1334
    return (1);
  } else {

  }
#line 1336
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1338
  data = kmap(page);
#line 1339
  goto ldv_48602;
  ldv_48601: 
#line 1340
  __min1 = data_size;
#line 1340
  __min2 = 4096;
#line 1340
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1341
  __min1___1 = data_size;
#line 1341
  __min2___1 = 4096;
#line 1341
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1342
    rv = 0;
#line 1343
    tmp = get_current();
#line 1343
    tmp___0 = signal_pending(tmp);
#line 1343
    if (tmp___0 == 0) {
#line 1346
      __min1___0 = data_size;
#line 1346
      __min2___0 = 4096;
#line 1346
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
    } else {

    }
#line 1347
    goto ldv_48600;
  } else {

  }
#line 1349
  data_size = data_size - rr;
  ldv_48602: ;
#line 1339
  if (data_size != 0) {
#line 1340
    goto ldv_48601;
  } else {

  }
  ldv_48600: 
#line 1351
  kunmap(page);
#line 1352
  drbd_pp_free(mdev, page, 0);
#line 1353
  return (rv);
}
}
#line 1356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int __min1 ;
  int __min2 ;
  void *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1362
  dig_in = mdev->int_dig_in;
#line 1363
  dig_vv = mdev->int_dig_vv;
#line 1365
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1365
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1365
    dgs = (int )tmp;
  } else {
#line 1365
    dgs = 0;
  }
#line 1368
  if (dgs != 0) {
#line 1369
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1370
    if (rr != dgs) {
#line 1371
      tmp___0 = get_current();
#line 1371
      tmp___1 = signal_pending(tmp___0);
#line 1371
      if (tmp___1 == 0) {
#line 1372
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1375
      return (0);
    } else {

    }
  } else {

  }
#line 1379
  data_size = data_size - dgs;
#line 1383
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1385
  bio = req->master_bio;
#line 1386
  if (bio->bi_sector != sector) {
#line 1386
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1386);
  } else {

  }
#line 1388
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1388
  i = (int )bio->bi_idx;
#line 1388
  goto ldv_48621;
  ldv_48620: 
#line 1389
  __min1 = data_size;
#line 1389
  __min2 = (int )bvec->bv_len;
#line 1389
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1390
  tmp___2 = kmap(bvec->bv_page);
#line 1390
  rr = drbd_recv(mdev, tmp___2 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1393
  kunmap(bvec->bv_page);
#line 1394
  if (rr != expect) {
#line 1395
    tmp___3 = get_current();
#line 1395
    tmp___4 = signal_pending(tmp___3);
#line 1395
    if (tmp___4 == 0) {
#line 1396
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
               rr, expect);
    } else {

    }
#line 1399
    return (0);
  } else {

  }
#line 1401
  data_size = data_size - rr;
#line 1388
  bvec = bvec + 1;
#line 1388
  i = i + 1;
  ldv_48621: ;
#line 1388
  if ((int )bio->bi_vcnt > i) {
#line 1389
    goto ldv_48620;
  } else {

  }

#line 1404
  if (dgs != 0) {
#line 1405
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1406
    tmp___5 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1406
    if (tmp___5 != 0) {
#line 1407
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1408
      return (0);
    } else {

    }
  } else {

  }
#line 1412
  if (data_size != 0) {
#line 1412
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1412);
  } else {

  }
#line 1413
  return (1);
}
}
#line 1418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1420
  e = (struct drbd_epoch_entry *)w;
#line 1421
  sector = e->sector;
#line 1424
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1424
  if (tmp == 0) {
#line 1424
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1424);
  } else {

  }
#line 1426
  tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1426
  if (tmp___0 != 0L) {
#line 1427
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1427U);
#line 1428
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1431
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1433
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1435
  atomic_dec(& mdev->unacked_cnt);
#line 1435
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1435
  if (tmp___2 < 0) {
#line 1435
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1435
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1435, tmp___1);
  } else {

  }
#line 1437
  return (ok);
}
}
#line 1440 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1444
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1445
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1446
    goto fail;
  } else {

  }
#line 1448
  atomic_dec(& mdev->rs_pending_cnt);
#line 1448
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1448
  if (tmp___0 < 0) {
#line 1448
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1448
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1448, tmp);
  } else {

  }
#line 1450
  inc_unacked(mdev);
#line 1454
  e->w.cb = & e_end_resync_block;
#line 1456
  spin_lock_irq(& mdev->req_lock);
#line 1457
  list_add(& e->w.list, & mdev->sync_ee);
#line 1458
  spin_unlock_irq(& mdev->req_lock);
#line 1460
  atomic_add(data_size >> 9, & mdev->rs_sect_ev);
#line 1461
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1461
  if (tmp___1 == 0) {
#line 1462
    return (1);
  } else {

  }
#line 1465
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1466
  spin_lock_irq(& mdev->req_lock);
#line 1467
  list_del(& e->w.list);
#line 1468
  spin_unlock_irq(& mdev->req_lock);
#line 1470
  drbd_free_some_ee(mdev, e, 0);
  fail: 
#line 1472
  put_ldev(mdev);
#line 1473
  return (0);
}
}
#line 1476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  long tmp___0 ;

  {
#line 1481
  p = & mdev->data.rbuf.data;
#line 1483
  tmp = __fswab64(p->sector);
#line 1483
  sector = (sector_t )tmp;
#line 1485
  spin_lock_irq(& mdev->req_lock);
#line 1486
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1487
  spin_unlock_irq(& mdev->req_lock);
#line 1488
  tmp___0 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1488
  if (tmp___0 != 0L) {
#line 1489
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1490
    return (0);
  } else {

  }
#line 1496
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1498
  if (ok != 0) {
#line 1499
    req_mod(req, data_received);
  } else {

  }
#line 1504
  return (ok);
}
}
#line 1507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1511
  p = & mdev->data.rbuf.data;
#line 1513
  tmp = __fswab64(p->sector);
#line 1513
  sector = (sector_t )tmp;
#line 1514
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1514
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1514);
  } else {

  }
#line 1516
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1516
  if (tmp___1 != 0) {
#line 1520
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1522
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1522
    if (tmp___0 != 0) {
#line 1523
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1525
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1527
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
  }
#line 1530
  atomic_add((int )(data_size >> 9), & mdev->rs_sect_in);
#line 1532
  return (ok);
}
}
#line 1538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1540
  e = (struct drbd_epoch_entry *)w;
#line 1541
  sector = e->sector;
#line 1542
  ok = 1;
#line 1544
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1545
    tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1545
    if (tmp___0 != 0L) {
#line 1546
      pcmd = ((int )mdev->state.ldv_37520.conn > 15 && (int )mdev->state.ldv_37520.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1550
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1550
      ok = tmp & ok;
#line 1551
      if (pcmd == 23) {
#line 1552
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1552U);
      } else {

      }
    } else {
#line 1554
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1558
    atomic_dec(& mdev->unacked_cnt);
#line 1558
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1558
    if (tmp___2 < 0) {
#line 1558
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1558
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1558, tmp___1);
    } else {

    }
  } else {

  }
#line 1562
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 1563
    spin_lock_irq(& mdev->req_lock);
#line 1564
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1564
    if (tmp___3 != 0) {
#line 1564
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1564);
    } else {

    }
#line 1565
    hlist_del_init(& e->colision);
#line 1566
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1568
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1568
    if (tmp___4 == 0) {
#line 1568
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1568);
    } else {

    }
  }
#line 1571
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1573
  return (ok);
}
}
#line 1576 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1578
  e = (struct drbd_epoch_entry *)w;
#line 1579
  ok = 1;
#line 1581
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1581
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1581);
  } else {

  }
#line 1582
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1584
  spin_lock_irq(& mdev->req_lock);
#line 1585
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1585
  if (tmp != 0) {
#line 1585
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1585);
  } else {

  }
#line 1586
  hlist_del_init(& e->colision);
#line 1587
  spin_unlock_irq(& mdev->req_lock);
#line 1589
  atomic_dec(& mdev->unacked_cnt);
#line 1589
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1589
  if (tmp___1 < 0) {
#line 1589
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1589
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1589, tmp___0);
  } else {

  }
#line 1591
  return (ok);
}
}
#line 1615 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1617
  tmp = get_current();
#line 1617
  wait.flags = 0U;
#line 1617
  wait.private = (void *)tmp;
#line 1617
  wait.func = & autoremove_wake_function;
#line 1617
  wait.task_list.next = & wait.task_list;
#line 1617
  wait.task_list.prev = & wait.task_list;
#line 1620
  ret = 0;
#line 1621
  spin_lock(& mdev->peer_seq_lock);
  ldv_48697: 
#line 1623
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1624
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1624
  if (tmp___0 <= 0) {
#line 1625
    goto ldv_48696;
  } else {

  }
#line 1626
  tmp___1 = get_current();
#line 1626
  tmp___2 = signal_pending(tmp___1);
#line 1626
  if (tmp___2 != 0) {
#line 1627
    ret = -512;
#line 1628
    goto ldv_48696;
  } else {

  }
#line 1630
  p_seq = mdev->peer_seq;
#line 1631
  spin_unlock(& mdev->peer_seq_lock);
#line 1632
  timeout = schedule_timeout(7500L);
#line 1633
  spin_lock(& mdev->peer_seq_lock);
#line 1634
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1635
    ret = -110;
#line 1636
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1637
    goto ldv_48696;
  } else {

  }
#line 1639
  goto ldv_48697;
  ldv_48696: 
#line 1640
  finish_wait(& mdev->seq_wait, & wait);
#line 1641
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1642
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1643
  spin_unlock(& mdev->peer_seq_lock);
#line 1644
  return (ret);
}
}
#line 1650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static unsigned long wire_flags_to_bio(struct drbd_conf *mdev , u32 dpf ) 
{ 


  {
#line 1652
  return ((unsigned long )(((((dpf & 2U) != 0U ? 16 : 0) | ((dpf & 16U) != 0U ? 4096 : 0)) | ((dpf & 32U) != 0U ? 8388608 : 0)) | ((int )dpf & 64)));
}
}
#line 1659 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int rw ;
  u32 dp_flags ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u32 tmp___3 ;
  unsigned long tmp___4 ;
  int size ;
  int discard ;
  int tmp___5 ;
  wait_queue_t wait ;
  struct task_struct *tmp___6 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___7 ;
  long tmp___8 ;
  __u32 tmp___9 ;
  int tmp___10 ;
  struct hlist_head *tmp___11 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  struct hlist_node  const  *__mptr ;
  struct task_struct *tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;

  {
#line 1663
  p = & mdev->data.rbuf.data;
#line 1664
  rw = 1;
#line 1667
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1667
  if (tmp___1 == 0) {
#line 1668
    spin_lock(& mdev->peer_seq_lock);
#line 1669
    tmp = __fswab32(p->seq_num);
#line 1669
    if (mdev->peer_seq + 1U == tmp) {
#line 1670
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1671
    spin_unlock(& mdev->peer_seq_lock);
#line 1673
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
#line 1674
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1675
    tmp___0 = drbd_drain_block(mdev, (int )data_size);
#line 1675
    return (tmp___0);
  } else {

  }
#line 1683
  tmp___2 = __fswab64(p->sector);
#line 1683
  sector = (sector_t )tmp___2;
#line 1684
  e = read_in_block(mdev, p->block_id, sector, (int )data_size);
#line 1685
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1686
    put_ldev(mdev);
#line 1687
    return (0);
  } else {

  }
#line 1690
  e->w.cb = & e_end_block;
#line 1692
  tmp___3 = __fswab32(p->dp_flags);
#line 1692
  dp_flags = tmp___3;
#line 1693
  tmp___4 = wire_flags_to_bio(mdev, dp_flags);
#line 1693
  rw = (int )((unsigned int )tmp___4 | (unsigned int )rw);
#line 1695
  if ((dp_flags & 4U) != 0U) {
#line 1696
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1698
  spin_lock(& mdev->epoch_lock);
#line 1699
  e->epoch = mdev->current_epoch;
#line 1700
  atomic_inc(& (e->epoch)->epoch_size);
#line 1701
  atomic_inc(& (e->epoch)->active);
#line 1702
  spin_unlock(& mdev->epoch_lock);
#line 1705
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1706
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1710
    size = (int const   )e->size;
#line 1711
    tmp___5 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 1711
    discard = tmp___5;
#line 1712
    tmp___6 = get_current();
#line 1712
    wait.flags = 0U;
#line 1712
    wait.private = (void *)tmp___6;
#line 1712
    wait.func = & autoremove_wake_function;
#line 1712
    wait.task_list.next = & wait.task_list;
#line 1712
    wait.task_list.prev = & wait.task_list;
#line 1718
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1718
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1718);
    } else {

    }
#line 1719
    tmp___7 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1719
    if (tmp___7 != 0L) {
#line 1719
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1719), "i" (12UL));
      ldv_48719: ;
#line 1719
      goto ldv_48719;
    } else {

    }
#line 1720
    tmp___8 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1720
    if (tmp___8 != 0L) {
#line 1720
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1720), "i" (12UL));
      ldv_48720: ;
#line 1720
      goto ldv_48720;
    } else {

    }
#line 1756
    tmp___9 = __fswab32(p->seq_num);
#line 1756
    tmp___10 = drbd_wait_peer_seq(mdev, tmp___9);
#line 1756
    if (tmp___10 != 0) {
#line 1757
      goto out_interrupted;
    } else {

    }
#line 1759
    spin_lock_irq(& mdev->req_lock);
#line 1761
    tmp___11 = ee_hash_slot(mdev, sector);
#line 1761
    hlist_add_head(& e->colision, tmp___11);
#line 1764
    slot = tl_hash_slot(mdev, sector);
#line 1765
    first = 1;
    ldv_48732: 
#line 1767
    have_unacked = 0;
#line 1768
    have_conflict = 0;
#line 1769
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1771
    n = slot->first;
#line 1771
    goto ldv_48729;
    ldv_48728: 
#line 1772
    tmp___14 = overlaps(i->sector, (int )i->size, sector, size);
#line 1772
    if (tmp___14 != 0) {
#line 1775
      if (first != 0) {
#line 1776
        tmp___12 = get_current();
#line 1776
        tmp___13 = get_current();
#line 1776
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1781
      if ((i->rq_state & 8UL) != 0UL) {
#line 1782
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1783
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1771
    n = n->next;
    ldv_48729: ;
#line 1771
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1771
      __builtin_prefetch((void const   *)n->next);
#line 1771
      if (1 != 0) {
#line 1771
        __mptr = (struct hlist_node  const  *)n;
#line 1771
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 1771
        if (1 != 0) {
#line 1772
          goto ldv_48728;
        } else {
#line 1774
          goto ldv_48730;
        }
      } else {
#line 1774
        goto ldv_48730;
      }
    } else {

    }
    ldv_48730: ;
#line 1787
    if (have_conflict == 0) {
#line 1788
      goto ldv_48731;
    } else {

    }
#line 1791
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1792
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1794
      inc_unacked(mdev);
#line 1795
      e->w.cb = & e_send_discard_ack;
#line 1796
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1798
      spin_unlock_irq(& mdev->req_lock);
#line 1803
      put_ldev(mdev);
#line 1804
      wake_asender(mdev);
#line 1805
      finish_wait(& mdev->misc_wait, & wait);
#line 1806
      return (1);
    } else {

    }
#line 1809
    tmp___15 = get_current();
#line 1809
    tmp___16 = signal_pending(tmp___15);
#line 1809
    if (tmp___16 != 0) {
#line 1810
      hlist_del_init(& e->colision);
#line 1812
      spin_unlock_irq(& mdev->req_lock);
#line 1814
      finish_wait(& mdev->misc_wait, & wait);
#line 1815
      goto out_interrupted;
    } else {

    }
#line 1818
    spin_unlock_irq(& mdev->req_lock);
#line 1819
    if (first != 0) {
#line 1820
      first = 0;
#line 1821
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 1823
    if (discard != 0) {
#line 1826
      if (have_unacked != 0) {
#line 1826
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                1826);
      } else {

      }
    } else {

    }
#line 1828
    schedule();
#line 1829
    spin_lock_irq(& mdev->req_lock);
#line 1830
    goto ldv_48732;
    ldv_48731: 
#line 1831
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1834
  list_add(& e->w.list, & mdev->active_ee);
#line 1835
  spin_unlock_irq(& mdev->req_lock);
#line 1837
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1839
  inc_unacked(mdev);
#line 1842
  goto ldv_48734;
  case 2: 
#line 1846
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1847
  goto ldv_48734;
  case 1: ;
#line 1850
  goto ldv_48734;
  }
  ldv_48734: ;
#line 1853
  if ((int )mdev->state.ldv_37520.pdsk <= 3) {
#line 1855
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1855U);
#line 1856
    e->flags = e->flags | 1UL;
#line 1857
    e->flags = e->flags & 0xfffffffffffffffdUL;
#line 1858
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1861
  tmp___17 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 1861
  if (tmp___17 == 0) {
#line 1862
    return (1);
  } else {

  }
#line 1865
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1866
  spin_lock_irq(& mdev->req_lock);
#line 1867
  list_del(& e->w.list);
#line 1868
  hlist_del_init(& e->colision);
#line 1869
  spin_unlock_irq(& mdev->req_lock);
#line 1870
  if ((int )e->flags & 1) {
#line 1871
    drbd_al_complete_io(mdev, e->sector);
  } else {

  }
  out_interrupted: 
#line 1874
  drbd_may_finish_epoch(mdev, e->epoch, EV_CLEANUP);
#line 1875
  put_ldev(mdev);
#line 1876
  drbd_free_some_ee(mdev, e, 0);
#line 1877
  return (0);
}
}
#line 1891 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) 
{ 
  struct gendisk *disk ;
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  struct lc_element *tmp ;
  int curr_events ;
  int throttle ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned long res ;
  unsigned int _cpu ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned long res___0 ;
  unsigned int _cpu___0 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  int tmp___1 ;
  unsigned long rs_left ;
  int i ;
  unsigned long tmp___2 ;

  {
#line 1893
  disk = (((mdev->ldev)->backing_bdev)->bd_contains)->bd_disk;
#line 1897
  throttle = 0;
#line 1900
  if (mdev->sync_conf.c_min_rate == 0) {
#line 1901
    return (0);
  } else {

  }
#line 1903
  spin_lock_irq(& mdev->al_lock);
#line 1904
  tmp = lc_find(mdev->resync, (unsigned int )(sector >> 15));
#line 1905
  if ((unsigned long )tmp != (unsigned long )((struct lc_element *)0)) {
#line 1906
    __mptr = (struct lc_element  const  *)tmp;
#line 1906
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1907
    tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1907
    if (tmp___0 != 0) {
#line 1908
      spin_unlock_irq(& mdev->al_lock);
#line 1909
      return (0);
    } else {

    }
  } else {

  }
#line 1913
  spin_unlock_irq(& mdev->al_lock);
#line 1915
  res = 0UL;
#line 1915
  _cpu = 4294967295U;
#line 1915
  goto ldv_48758;
  ldv_48757: 
#line 1915
  __vpp_verify = 0;
#line 1915
  __asm__  ("": "=r" (__ptr): "0" (disk->part0.dkstats));
#line 1915
  res = ((struct disk_stats *)(__per_cpu_offset[_cpu] + __ptr))->sectors[0] + res;
  ldv_48758: 
#line 1915
  _cpu = cpumask_next((int )_cpu, cpu_possible_mask);
#line 1915
  if ((unsigned int )nr_cpu_ids > _cpu) {
#line 1916
    goto ldv_48757;
  } else {

  }
#line 1916
  res___0 = 0UL;
#line 1916
  _cpu___0 = 4294967295U;
#line 1916
  goto ldv_48768;
  ldv_48767: 
#line 1916
  __vpp_verify___0 = 0;
#line 1916
  __asm__  ("": "=r" (__ptr___0): "0" (disk->part0.dkstats));
#line 1916
  res___0 = ((struct disk_stats *)(__per_cpu_offset[_cpu___0] + __ptr___0))->sectors[1] + res___0;
  ldv_48768: 
#line 1916
  _cpu___0 = cpumask_next((int )_cpu___0, cpu_possible_mask);
#line 1916
  if ((unsigned int )nr_cpu_ids > _cpu___0) {
#line 1917
    goto ldv_48767;
  } else {

  }
#line 1916
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->rs_sect_ev));
#line 1916
  curr_events = ((int )res + (int )res___0) - tmp___1;
#line 1919
  if (mdev->rs_last_events == 0 || curr_events - mdev->rs_last_events > 64) {
#line 1923
    mdev->rs_last_events = curr_events;
#line 1927
    i = (mdev->rs_last_mark + 7) % 8;
#line 1929
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 1930
      rs_left = mdev->ov_left;
    } else {
#line 1932
      tmp___2 = drbd_bm_total_weight(mdev);
#line 1932
      rs_left = tmp___2 - mdev->rs_failed;
    }
#line 1934
    dt = (unsigned long )(((long )jiffies - (long )mdev->rs_mark_time[i]) / 250L);
#line 1935
    if (dt == 0UL) {
#line 1936
      dt = dt + 1UL;
    } else {

    }
#line 1937
    db = mdev->rs_mark_left[i] - rs_left;
#line 1938
    dbdt = db / dt << 2;
#line 1940
    if ((unsigned long )mdev->sync_conf.c_min_rate < dbdt) {
#line 1941
      throttle = 1;
    } else {

    }
  } else {

  }
#line 1943
  return (throttle);
}
}
#line 1947 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int digest_size ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int verb ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long now ;
  int i ;
  unsigned long tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 1950
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1950
  capacity = tmp;
#line 1952
  di = 0;
#line 1955
  p = & mdev->data.rbuf.block_req;
#line 1957
  tmp___0 = __fswab64(p->sector);
#line 1957
  sector = (sector_t )tmp___0;
#line 1958
  tmp___1 = __fswab32(p->blksize);
#line 1958
  size = (int )tmp___1;
#line 1960
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1961
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1961, (unsigned long long )sector, size);
#line 1963
    return (0);
  } else {

  }
#line 1965
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 1966
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1966, (unsigned long long )sector, size);
#line 1968
    return (0);
  } else {

  }
#line 1971
  tmp___7 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 1971
  if (tmp___7 == 0) {
#line 1972
    verb = 1;
#line 1973
    switch ((unsigned int )cmd) {
    case 8U: 
#line 1975
    drbd_send_ack_rp(mdev, P_NEG_DREPLY, p);
#line 1976
    goto ldv_48787;
    case 9U: ;
    case 33U: ;
    case 30U: 
#line 1980
    drbd_send_ack_rp(mdev, P_NEG_RS_DREPLY, p);
#line 1981
    goto ldv_48787;
    case 31U: 
#line 1983
    verb = 0;
#line 1984
    atomic_dec(& mdev->rs_pending_cnt);
#line 1984
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1984
    if (tmp___3 < 0) {
#line 1984
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1984
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 1984, tmp___2);
    } else {

    }
#line 1985
    drbd_send_ack_ex(mdev, P_OV_RESULT, sector, size, 4711ULL);
#line 1986
    goto ldv_48787;
    default: 
#line 1988
    tmp___4 = cmdname(cmd);
#line 1988
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
            tmp___4);
    }
    ldv_48787: ;
#line 1991
    if (verb != 0) {
#line 1991
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 1991
      if (tmp___5 != 0) {
#line 1992
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
      } else {

      }
    } else {

    }
#line 1996
    tmp___6 = drbd_drain_block(mdev, (int )digest_size);
#line 1996
    return (tmp___6);
  } else {

  }
#line 2002
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2003
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2004
    put_ldev(mdev);
#line 2005
    return (0);
  } else {

  }
#line 2008
  switch ((unsigned int )cmd) {
  case 8U: 
#line 2010
  e->w.cb = & w_e_end_data_req;
#line 2011
  fault_type = 5U;
#line 2013
  goto submit;
  case 9U: 
#line 2016
  e->w.cb = & w_e_end_rsdata_req;
#line 2017
  fault_type = 3U;
#line 2019
  mdev->bm_resync_fo = sector >> 3;
#line 2020
  goto ldv_48800;
  case 31U: ;
  case 33U: 
#line 2024
  fault_type = 3U;
#line 2025
  tmp___8 = kmalloc((unsigned long )digest_size + 16UL, 16U);
#line 2025
  di = (struct digest_info *)tmp___8;
#line 2026
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2027
    goto out_free_e;
  } else {

  }
#line 2029
  di->digest_size = (int )digest_size;
#line 2030
  di->digest = (void *)di + 16U;
#line 2032
  e->ldv_45720.digest = di;
#line 2033
  e->flags = e->flags | 16UL;
#line 2035
  tmp___9 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2035
  if ((unsigned int )tmp___9 != digest_size) {
#line 2036
    goto out_free_e;
  } else {

  }
#line 2038
  if ((unsigned int )cmd == 33U) {
#line 2039
    if (mdev->agreed_pro_version <= 88) {
#line 2039
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2039);
    } else {

    }
#line 2040
    e->w.cb = & w_e_end_csum_rs_req;
#line 2042
    mdev->bm_resync_fo = sector >> 3;
  } else
#line 2043
  if ((unsigned int )cmd == 31U) {
#line 2045
    atomic_add(size >> 9, & mdev->rs_sect_in);
#line 2046
    e->w.cb = & w_e_end_ov_reply;
#line 2047
    atomic_dec(& mdev->rs_pending_cnt);
#line 2047
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2047
    if (tmp___11 < 0) {
#line 2047
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2047
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2047, tmp___10);
    } else {

    }
#line 2050
    goto submit_for_resync;
  } else {

  }
#line 2052
  goto ldv_48800;
  case 30U: ;
#line 2055
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2057
    now = jiffies;
#line 2059
    mdev->ov_start_sector = sector;
#line 2060
    mdev->ov_position = sector;
#line 2061
    tmp___12 = drbd_bm_bits(mdev);
#line 2061
    mdev->ov_left = tmp___12 - (sector >> 3);
#line 2062
    mdev->rs_total = mdev->ov_left;
#line 2063
    i = 0;
#line 2063
    goto ldv_48812;
    ldv_48811: 
#line 2064
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 2065
    mdev->rs_mark_time[i] = now;
#line 2063
    i = i + 1;
    ldv_48812: ;
#line 2063
    if (i <= 7) {
#line 2064
      goto ldv_48811;
    } else {

    }
#line 2067
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2070
  e->w.cb = & w_e_end_ov_req;
#line 2071
  fault_type = 3U;
#line 2072
  goto ldv_48800;
  default: 
#line 2075
  tmp___13 = cmdname(cmd);
#line 2075
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___13);
#line 2077
  fault_type = 10U;
#line 2078
  goto out_free_e;
  }
  ldv_48800: ;
#line 2103
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 4U) {
#line 2103
    tmp___14 = drbd_rs_should_slow_down(mdev, sector);
#line 2103
    if (tmp___14 != 0) {
#line 2104
      schedule_timeout_uninterruptible(25L);
    } else {

    }
  } else {

  }
#line 2105
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 2105
  if (tmp___15 != 0) {
#line 2106
    goto out_free_e;
  } else {

  }
  submit_for_resync: 
#line 2109
  atomic_add(size >> 9, & mdev->rs_sect_ev);
  submit: 
#line 2112
  inc_unacked(mdev);
#line 2113
  spin_lock_irq(& mdev->req_lock);
#line 2114
  list_add_tail(& e->w.list, & mdev->read_ee);
#line 2115
  spin_unlock_irq(& mdev->req_lock);
#line 2117
  tmp___16 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2117
  if (tmp___16 == 0) {
#line 2118
    return (1);
  } else {

  }
#line 2121
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 2122
  spin_lock_irq(& mdev->req_lock);
#line 2123
  list_del(& e->w.list);
#line 2124
  spin_unlock_irq(& mdev->req_lock);
  out_free_e: 
#line 2128
  put_ldev(mdev);
#line 2129
  drbd_free_some_ee(mdev, e, 0);
#line 2130
  return (0);
}
}
#line 2133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2135
  rv = -100;
#line 2138
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2139
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2141
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2142
  ch_self = mdev->comm_bm_set;
#line 2144
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2148
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2149
  goto ldv_48826;
  case 0: ;
#line 2151
  goto ldv_48826;
  case 1: ;
#line 2153
  if (self == 0 && peer == 1) {
#line 2154
    rv = -1;
#line 2155
    goto ldv_48826;
  } else {

  }
#line 2157
  if (self == 1 && peer == 0) {
#line 2158
    rv = 1;
#line 2159
    goto ldv_48826;
  } else {

  }
  case 2: ;
#line 2163
  if (self == 0 && peer == 1) {
#line 2164
    rv = 1;
#line 2165
    goto ldv_48826;
  } else {

  }
#line 2167
  if (self == 1 && peer == 0) {
#line 2168
    rv = -1;
#line 2169
    goto ldv_48826;
  } else {

  }
#line 2172
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2175
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2176
    tmp = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2176
    rv = tmp != 0 ? -1 : 1;
#line 2178
    goto ldv_48826;
  } else {
#line 2180
    if (ch_peer == 0UL) {
#line 2180
      rv = 1;
#line 2180
      goto ldv_48826;
    } else {

    }
#line 2181
    if (ch_self == 0UL) {
#line 2181
      rv = -1;
#line 2181
      goto ldv_48826;
    } else {

    }
  }
#line 2183
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2184
    goto ldv_48826;
  } else {

  }
  case 4: ;
#line 2186
  if (ch_self < ch_peer) {
#line 2187
    rv = -1;
  } else
#line 2188
  if (ch_self > ch_peer) {
#line 2189
    rv = 1;
  } else {
#line 2192
    tmp___0 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2192
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2194
  goto ldv_48826;
  case 5: 
#line 2196
  rv = -1;
#line 2197
  goto ldv_48826;
  case 6: 
#line 2199
  rv = 1;
  }
  ldv_48826: ;
#line 2202
  return (rv);
}
}
#line 2205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2207
  rv = -100;
#line 2209
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2215
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2216
  goto ldv_48844;
  case 0: ;
#line 2218
  goto ldv_48844;
  case 7: 
#line 2220
  hg = drbd_asb_recover_0p(mdev);
#line 2221
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 2222
    rv = hg;
  } else {

  }
#line 2223
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2224
    rv = hg;
  } else {

  }
#line 2225
  goto ldv_48844;
  case 10: 
#line 2227
  rv = drbd_asb_recover_0p(mdev);
#line 2228
  goto ldv_48844;
  case 8: ;
#line 2230
  return ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U ? 1 : -1);
  case 9: 
#line 2232
  hg = drbd_asb_recover_0p(mdev);
#line 2233
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2236
    drbd_set_role(mdev, R_SECONDARY, 0);
#line 2240
    val.i = 0U;
#line 2240
    val.ldv_37520.role = 2U;
#line 2240
    mask.i = 0U;
#line 2240
    mask.ldv_37520.role = 3U;
#line 2240
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2241
    if ((int )rv2 != 1) {
#line 2242
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2244
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2245
      rv = hg;
    }
  } else {
#line 2248
    rv = hg;
  }
  }
  ldv_48844: ;
#line 2251
  return (rv);
}
}
#line 2254 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2256
  rv = -100;
#line 2258
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2266
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2267
  goto ldv_48867;
  case 10: 
#line 2269
  rv = drbd_asb_recover_0p(mdev);
#line 2270
  goto ldv_48867;
  case 0: ;
#line 2272
  goto ldv_48867;
  case 9: 
#line 2274
  hg = drbd_asb_recover_0p(mdev);
#line 2275
  if (hg == -1) {
#line 2281
    val.i = 0U;
#line 2281
    val.ldv_37520.role = 2U;
#line 2281
    mask.i = 0U;
#line 2281
    mask.ldv_37520.role = 3U;
#line 2281
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2282
    if ((int )rv2 != 1) {
#line 2283
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2285
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2286
      rv = hg;
    }
  } else {
#line 2289
    rv = hg;
  }
  }
  ldv_48867: ;
#line 2292
  return (rv);
}
}
#line 2295 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2298
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2299
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2300
    return;
  } else {

  }
#line 2302
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2303
  return;
}
}
#line 2324 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2329
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2330
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2332
  *rule_nr = 10;
#line 2333
  if (self == 4ULL && peer == 4ULL) {
#line 2334
    return (0);
  } else {

  }
#line 2336
  *rule_nr = 20;
#line 2337
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2339
    return (-2);
  } else {

  }
#line 2341
  *rule_nr = 30;
#line 2342
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2344
    return (2);
  } else {

  }
#line 2346
  if (self == peer) {
#line 2349
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2351
      if (mdev->agreed_pro_version <= 90) {
#line 2352
        return (-1091);
      } else {

      }
#line 2354
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2356
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2357
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2359
        if ((int )mdev->state.ldv_37520.disk > 2) {
#line 2359
          tmp = drbd_bm_total_weight(mdev);
#line 2359
          tmp___0 = (u64 )tmp;
        } else {
#line 2359
          tmp___0 = 0ULL;
        }
#line 2359
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2361
        *rule_nr = 34;
      } else {
#line 2363
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2364
        *rule_nr = 36;
      }
#line 2367
      return (1);
    } else {

    }
#line 2370
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2372
      if (mdev->agreed_pro_version <= 90) {
#line 2373
        return (-1091);
      } else {

      }
#line 2375
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2377
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2379
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2380
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2381
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2383
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2384
        *rule_nr = 35;
      } else {
#line 2386
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2387
        *rule_nr = 37;
      }
#line 2390
      return (-1);
    } else {

    }
#line 2394
    tmp___1 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 2394
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2398
    *rule_nr = 40;
#line 2400
    switch (rct) {
    case 0: ;
#line 2401
    return (0);
    case 1: ;
#line 2402
    return (1);
    case 2: ;
#line 2403
    return (-1);
    case 3: 
#line 2405
    dc = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2406
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2410
  *rule_nr = 50;
#line 2411
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2412
  if (self == peer) {
#line 2413
    return (-1);
  } else {

  }
#line 2415
  *rule_nr = 51;
#line 2416
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2417
  if (self == peer) {
#line 2418
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL : peer + 281474976710656ULL == (*(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL)) {
#line 2425
      if (mdev->agreed_pro_version <= 90) {
#line 2426
        return (-1091);
      } else {

      }
#line 2428
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2429
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2431
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Did not got last syncUUID packet, corrected:\n");
#line 2432
      drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2434
      return (-1);
    } else {

    }
  } else {

  }
#line 2438
  *rule_nr = 60;
#line 2439
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2440
  i = 2;
#line 2440
  goto ldv_48898;
  ldv_48897: 
#line 2441
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2442
  if (self == peer) {
#line 2443
    return (-2);
  } else {

  }
#line 2440
  i = i + 1;
  ldv_48898: ;
#line 2440
  if (i <= 3) {
#line 2441
    goto ldv_48897;
  } else {

  }
#line 2446
  *rule_nr = 70;
#line 2447
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2448
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2449
  if (self == peer) {
#line 2450
    return (1);
  } else {

  }
#line 2452
  *rule_nr = 71;
#line 2453
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2454
  if (self == peer) {
#line 2455
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL : self + 281474976710656ULL == ((mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL)) {
#line 2462
      if (mdev->agreed_pro_version <= 90) {
#line 2463
        return (-1091);
      } else {

      }
#line 2465
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2466
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2468
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Last syncUUID did not get through, corrected:\n");
#line 2469
      if ((int )mdev->state.ldv_37520.disk > 2) {
#line 2469
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2469
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2469
        tmp___3 = 0ULL;
      }
#line 2469
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2472
      return (1);
    } else {

    }
  } else {

  }
#line 2477
  *rule_nr = 80;
#line 2478
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2479
  i = 2;
#line 2479
  goto ldv_48901;
  ldv_48900: 
#line 2480
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2481
  if (self == peer) {
#line 2482
    return (2);
  } else {

  }
#line 2479
  i = i + 1;
  ldv_48901: ;
#line 2479
  if (i <= 3) {
#line 2480
    goto ldv_48900;
  } else {

  }
#line 2485
  *rule_nr = 90;
#line 2486
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2487
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2488
  if (self == peer && self != 0ULL) {
#line 2489
    return (100);
  } else {

  }
#line 2491
  *rule_nr = 100;
#line 2492
  i = 2;
#line 2492
  goto ldv_48907;
  ldv_48906: 
#line 2493
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2494
  j = 2;
#line 2494
  goto ldv_48904;
  ldv_48903: 
#line 2495
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2496
  if (self == peer) {
#line 2497
    return (-100);
  } else {

  }
#line 2494
  j = j + 1;
  ldv_48904: ;
#line 2494
  if (j <= 3) {
#line 2495
    goto ldv_48903;
  } else {

  }
#line 2492
  i = i + 1;
  ldv_48907: ;
#line 2492
  if (i <= 3) {
#line 2493
    goto ldv_48906;
  } else {

  }

#line 2501
  return (-1000);
}
}
#line 2507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long ret ;
  int __x___0 ;
  int tmp ;
  long ret___0 ;
  int __x___2 ;
  int pcount ;
  int forced ;
  long ret___1 ;
  int __x___4 ;
  long ret___2 ;
  int __x___6 ;
  long ret___3 ;
  int __x___8 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long ret___4 ;
  int __x___10 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2511
  rv = C_MASK;
#line 2514
  mydisk = (enum drbd_disk_state )mdev->state.ldv_37520.disk;
#line 2515
  if ((unsigned int )mydisk == 3U) {
#line 2516
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_37520.disk;
  } else {

  }
#line 2518
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2519
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2520
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2523
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2525
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2527
  if (hg == -1000) {
#line 2528
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2529
    return (C_MASK);
  } else {

  }
#line 2531
  if (hg < -1000) {
#line 2532
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol %d\n",
              -1000 - hg);
#line 2533
    return (C_MASK);
  } else {

  }
#line 2536
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2538
    if (hg == -100) {
#line 2538
      tmp = 1;
    } else {
#line 2538
      __x___0 = hg;
#line 2538
      ret = (long )(__x___0 < 0 ? - __x___0 : __x___0);
#line 2538
      if (ret == 2L) {
#line 2538
        tmp = 1;
      } else {
#line 2538
        tmp = 0;
      }
    }
#line 2538
    f = tmp;
#line 2539
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2540
    if (f != 0) {
#line 2541
      hg = hg * 2;
    } else {

    }
#line 2542
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2546
  __x___2 = hg;
#line 2546
  ret___0 = (long )(__x___2 < 0 ? - __x___2 : __x___2);
#line 2546
  if (ret___0 == 100L) {
#line 2547
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2549
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U)) {
#line 2550
    pcount = ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2552
    forced = hg == -100;
#line 2554
    switch (pcount) {
    case 0: 
#line 2556
    hg = drbd_asb_recover_0p(mdev);
#line 2557
    goto ldv_48930;
    case 1: 
#line 2559
    hg = drbd_asb_recover_1p(mdev);
#line 2560
    goto ldv_48930;
    case 2: 
#line 2562
    hg = drbd_asb_recover_2p(mdev);
#line 2563
    goto ldv_48930;
    }
    ldv_48930: 
#line 2565
    __x___4 = hg;
#line 2565
    ret___1 = (long )(__x___4 < 0 ? - __x___4 : __x___4);
#line 2565
    if (ret___1 <= 99L) {
#line 2566
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2569
      if (forced != 0) {
#line 2570
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2572
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2577
  if (hg == -100) {
#line 2578
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2579
      hg = -1;
    } else {

    }
#line 2580
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2581
      hg = 1;
    } else {

    }
#line 2583
    __x___6 = hg;
#line 2583
    ret___2 = (long )(__x___6 < 0 ? - __x___6 : __x___6);
#line 2583
    if (ret___2 <= 99L) {
#line 2584
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2589
  if (hg == -100) {
#line 2594
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2595
    drbd_khelper(mdev, (char *)"split-brain");
#line 2596
    return (C_MASK);
  } else {

  }
#line 2599
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2600
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2601
    return (C_MASK);
  } else {

  }
#line 2604
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && (int )mdev->state.ldv_37520.disk > 6) {
#line 2606
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2608
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2611
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2612
    return (C_MASK);
    case 10: 
#line 2614
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2619
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2619
    goto _L;
  } else {
#line 2619
    tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2619
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2620
      if (hg == 0) {
#line 2621
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2623
        __x___8 = hg;
#line 2623
        ret___3 = (long )(__x___8 < 0 ? - __x___8 : __x___8);
#line 2623
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2623
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, ret___3 > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2626
      return (C_MASK);
    } else {

    }
  }
#line 2629
  __x___10 = hg;
#line 2629
  ret___4 = (long )(__x___10 < 0 ? - __x___10 : __x___10);
#line 2629
  if (ret___4 > 1L) {
#line 2630
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2631
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake",
                             BM_DONT_CLEAR);
#line 2631
    if (tmp___2 != 0) {
#line 2633
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2636
  if (hg > 0) {
#line 2637
    rv = C_WF_BITMAP_S;
  } else
#line 2638
  if (hg < 0) {
#line 2639
    rv = C_WF_BITMAP_T;
  } else {
#line 2641
    rv = C_CONNECTED;
#line 2642
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2642
    if (tmp___4 != 0UL) {
#line 2643
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2643
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2648
  return (rv);
}
}
#line 2652 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2655
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2657
    return (0);
  } else {

  }
#line 2660
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2662
    return (1);
  } else {

  }
#line 2665
  if ((unsigned int )peer == (unsigned int )self) {
#line 2666
    return (0);
  } else {

  }
#line 2669
  return (1);
}
}
#line 2672 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_protocol *p ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *my_alg ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2674
  p = & mdev->data.rbuf.protocol;
#line 2677
  p_integrity_alg[0] = '\000';
#line 2677
  tmp = 1U;
#line 2677
  while (1) {
#line 2677
    if (tmp >= 64U) {
#line 2677
      break;
    } else {

    }
#line 2677
    p_integrity_alg[tmp] = (char)0;
#line 2677
    tmp = tmp + 1U;
  }
#line 2679
  tmp___0 = __fswab32(p->protocol);
#line 2679
  p_proto = (int )tmp___0;
#line 2680
  tmp___1 = __fswab32(p->after_sb_0p);
#line 2680
  p_after_sb_0p = (int )tmp___1;
#line 2681
  tmp___2 = __fswab32(p->after_sb_1p);
#line 2681
  p_after_sb_1p = (int )tmp___2;
#line 2682
  tmp___3 = __fswab32(p->after_sb_2p);
#line 2682
  p_after_sb_2p = (int )tmp___3;
#line 2683
  tmp___4 = __fswab32(p->two_primaries);
#line 2683
  p_two_primaries = (int )tmp___4;
#line 2684
  tmp___5 = __fswab32(p->conn_flags);
#line 2684
  cf = (int )tmp___5;
#line 2685
  p_want_lose = cf & 1;
#line 2687
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2689
  if ((cf & 2) != 0) {
#line 2690
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2692
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2693
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2694
    goto disconnect;
  } else {

  }
#line 2697
  tmp___6 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2697
  if (tmp___6 != 0) {
#line 2698
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2699
    goto disconnect;
  } else {

  }
#line 2702
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2702
  if (tmp___7 != 0) {
#line 2703
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2704
    goto disconnect;
  } else {

  }
#line 2707
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2707
  if (tmp___8 != 0) {
#line 2708
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2709
    goto disconnect;
  } else {

  }
#line 2712
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2713
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2714
    goto disconnect;
  } else {

  }
#line 2717
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2718
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2719
    goto disconnect;
  } else {

  }
#line 2722
  if (mdev->agreed_pro_version > 86) {
#line 2723
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2725
    tmp___9 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2725
    if ((unsigned int )tmp___9 != data_size) {
#line 2726
      return (0);
    } else {

    }
#line 2728
    p_integrity_alg[63] = 0;
#line 2729
    tmp___10 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2729
    if (tmp___10 != 0) {
#line 2730
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2731
      goto disconnect;
    } else {

    }
#line 2733
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2737
  return (1);
  disconnect: 
#line 2740
  val.i = 0U;
#line 2740
  val.ldv_37520.conn = 1U;
#line 2740
  mask.i = 0U;
#line 2740
  mask.ldv_37520.conn = 31U;
#line 2740
  drbd_force_state(mdev, mask, val);
#line 2741
  return (0);
}
}
#line 2749 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2754
  if ((int )((signed char )*alg) == 0) {
#line 2755
    return (0);
  } else {

  }
#line 2757
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2758
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2758
  if (tmp___0 != 0L) {
#line 2759
    tmp = PTR_ERR((void const   *)tfm);
#line 2759
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2761
    return (tfm);
  } else {

  }
#line 2763
  tmp___2 = crypto_hash_tfm(tfm);
#line 2763
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2763
  if (tmp___3 == 0) {
#line 2764
    crypto_free_hash(tfm);
#line 2765
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2766
    tmp___1 = ERR_PTR(-22L);
#line 2766
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2768
  return (tfm);
}
}
#line 2771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int packet_size ) 
{ 
  int ok ;
  struct p_rs_param_95 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int *rs_plan_s ;
  int fifo_size ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  void *tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2773
  ok = 1;
#line 2774
  p = & mdev->data.rbuf.rs_param_95;
#line 2776
  verify_tfm = 0;
#line 2777
  csums_tfm = 0;
#line 2778
  apv = mdev->agreed_pro_version;
#line 2779
  rs_plan_s = 0;
#line 2780
  fifo_size = 0;
#line 2782
  exp_max_sz = apv > 87 ? (apv != 88 ? (apv <= 94 ? 140U : 156U) : 76U) : 12U;
#line 2788
  if (packet_size > exp_max_sz) {
#line 2789
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            packet_size, exp_max_sz);
#line 2791
    return (0);
  } else {

  }
#line 2794
  if (apv <= 88) {
#line 2795
    header_size = 4U;
#line 2796
    data_size = packet_size - header_size;
  } else
#line 2797
  if (apv <= 94) {
#line 2798
    header_size = 132U;
#line 2799
    data_size = packet_size - header_size;
#line 2800
    if (data_size != 0U) {
#line 2800
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2800);
    } else {

    }
  } else {
#line 2802
    header_size = 148U;
#line 2803
    data_size = packet_size - header_size;
#line 2804
    if (data_size != 0U) {
#line 2804
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2804);
    } else {

    }
  }
#line 2808
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2810
  tmp = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )header_size);
#line 2810
  if ((unsigned int )tmp != header_size) {
#line 2811
    return (0);
  } else {

  }
#line 2813
  tmp___0 = __fswab32(p->rate);
#line 2813
  mdev->sync_conf.rate = (int )tmp___0;
#line 2815
  if (apv > 87) {
#line 2816
    if (apv == 88) {
#line 2817
      if (data_size > 64U) {
#line 2818
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg too long, peer wants %u, accepting only %u byte\n",
                data_size, 64);
#line 2821
        return (0);
      } else {

      }
#line 2824
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2824
      if ((unsigned int )tmp___1 != data_size) {
#line 2825
        return (0);
      } else {

      }
#line 2829
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2829
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2829);
      } else {

      }
#line 2830
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2835
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2835
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2835);
      } else {

      }
#line 2836
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2836
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2836);
      } else {

      }
#line 2837
      p->verify_alg[63] = 0;
#line 2838
      p->csums_alg[63] = 0;
    }
#line 2841
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2841
    if (tmp___3 != 0) {
#line 2842
      if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2843
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2845
        goto disconnect;
      } else {

      }
#line 2847
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2849
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2849
      if (tmp___2 != 0L) {
#line 2850
        verify_tfm = 0;
#line 2851
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2855
    if (apv > 88) {
#line 2855
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2855
      if (tmp___5 != 0) {
#line 2856
        if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2857
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2859
          goto disconnect;
        } else {

        }
#line 2861
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2863
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2863
        if (tmp___4 != 0L) {
#line 2864
          csums_tfm = 0;
#line 2865
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2869
    if (apv > 94) {
#line 2870
      tmp___6 = __fswab32(p->rate);
#line 2870
      mdev->sync_conf.rate = (int )tmp___6;
#line 2871
      tmp___7 = __fswab32(p->c_plan_ahead);
#line 2871
      mdev->sync_conf.c_plan_ahead = (int )tmp___7;
#line 2872
      tmp___8 = __fswab32(p->c_delay_target);
#line 2872
      mdev->sync_conf.c_delay_target = (int )tmp___8;
#line 2873
      tmp___9 = __fswab32(p->c_fill_target);
#line 2873
      mdev->sync_conf.c_fill_target = (int )tmp___9;
#line 2874
      tmp___10 = __fswab32(p->c_max_rate);
#line 2874
      mdev->sync_conf.c_max_rate = (int )tmp___10;
#line 2876
      fifo_size = (mdev->sync_conf.c_plan_ahead * 250) / 250;
#line 2877
      if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 2878
        tmp___11 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 2878
        rs_plan_s = (int *)tmp___11;
#line 2879
        if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 2880
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 2881
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2886
    spin_lock(& mdev->peer_seq_lock);
#line 2888
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2889
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2890
      tmp___12 = strlen((char const   *)(& p->verify_alg));
#line 2890
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___12 + 1U);
#line 2891
      crypto_free_hash(mdev->verify_tfm);
#line 2892
      mdev->verify_tfm = verify_tfm;
#line 2893
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 2895
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2896
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2897
      tmp___13 = strlen((char const   *)(& p->csums_alg));
#line 2897
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___13 + 1U);
#line 2898
      crypto_free_hash(mdev->csums_tfm);
#line 2899
      mdev->csums_tfm = csums_tfm;
#line 2900
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 2902
    if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 2903
      kfree((void const   *)mdev->rs_plan_s.values);
#line 2904
      mdev->rs_plan_s.values = rs_plan_s;
#line 2905
      mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 2906
      mdev->rs_planed = 0;
    } else {

    }
#line 2908
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2911
  return (ok);
  disconnect: 
#line 2915
  crypto_free_hash(csums_tfm);
#line 2917
  crypto_free_hash(verify_tfm);
#line 2918
  val.i = 0U;
#line 2918
  val.ldv_37520.conn = 1U;
#line 2918
  mask.i = 0U;
#line 2918
  mask.ldv_37520.conn = 31U;
#line 2918
  drbd_force_state(mdev, mask, val);
#line 2919
  return (0);
}
}
#line 2929 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 2933
  if (a == 0UL || b == 0UL) {
#line 2934
    return;
  } else {

  }
#line 2935
  d = a > b ? a - b : b - a;
#line 2936
  if (a >> 3 < d || b >> 3 < d) {
#line 2937
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2939
  return;
}
}
#line 2941 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  __u64 tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___1 ;
  unsigned long __x ;
  sector_t __y ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  __u32 tmp___9 ;
  sector_t tmp___10 ;
  int tmp___11 ;
  __u64 tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;

  {
#line 2943
  p = & mdev->data.rbuf.sizes;
#line 2944
  dd = 0;
#line 2946
  ldsc = 0;
#line 2949
  tmp = __fswab64(p->d_size);
#line 2949
  p_size = (sector_t )tmp;
#line 2950
  tmp___0 = __fswab64(p->u_size);
#line 2950
  p_usize = (sector_t )tmp___0;
#line 2952
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2953
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 2954
    val.i = 0U;
#line 2954
    val.ldv_37520.conn = 1U;
#line 2954
    mask.i = 0U;
#line 2954
    mask.ldv_37520.conn = 31U;
#line 2954
    drbd_force_state(mdev, mask, val);
#line 2955
    return (0);
  } else {

  }
#line 2960
  mdev->p_size = p_size;
#line 2962
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2962
  if (tmp___6 != 0) {
#line 2963
    tmp___1 = drbd_get_max_capacity(mdev->ldev);
#line 2963
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___1);
#line 2965
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 2970
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2971
      __x = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 2971
      __y = p_usize;
#line 2971
      if (__x != 0UL) {
#line 2971
        if (__y != 0UL) {
#line 2971
          _min1 = __x;
#line 2971
          _min2 = __y;
#line 2971
          tmp___2 = _min1 < _min2 ? _min1 : _min2;
        } else {
#line 2971
          tmp___2 = __x;
        }
#line 2971
        tmp___3 = tmp___2;
      } else {
#line 2971
        tmp___3 = __y;
      }
#line 2971
      p_usize = tmp___3;
    } else {

    }
#line 2974
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2976
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 2977
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 2978
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 2984
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 2984
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 2984
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_37520.disk > 4) && (int )mdev->state.ldv_37520.conn <= 9) {
#line 2988
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 2989
      val___0.i = 0U;
#line 2989
      val___0.ldv_37520.conn = 1U;
#line 2989
      mask___0.i = 0U;
#line 2989
      mask___0.ldv_37520.conn = 31U;
#line 2989
      drbd_force_state(mdev, mask___0, val___0);
#line 2990
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 2991
      put_ldev(mdev);
#line 2992
      return (0);
    } else {

    }
#line 2994
    put_ldev(mdev);
  } else {

  }
#line 2997
  tmp___7 = __fswab16((int )p->dds_flags);
#line 2997
  ddsf = (enum dds_flags )tmp___7;
#line 2998
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2998
  if (tmp___8 != 0) {
#line 2999
    dd = drbd_determin_dev_size(mdev, ddsf);
#line 3000
    put_ldev(mdev);
#line 3001
    if ((int )dd == -1) {
#line 3002
      return (0);
    } else {

    }
#line 3003
    drbd_md_sync(mdev);
  } else {
#line 3006
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3009
  tmp___9 = __fswab32(p->max_bio_size);
#line 3009
  mdev->peer_max_bio_size = (int )tmp___9;
#line 3010
  drbd_reconsider_max_bio_size(mdev);
#line 3012
  tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3012
  if (tmp___11 != 0) {
#line 3013
    tmp___10 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3013
    if ((mdev->ldev)->known_size != tmp___10) {
#line 3014
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3015
      ldsc = 1;
    } else {

    }
#line 3018
    put_ldev(mdev);
  } else {

  }
#line 3021
  if ((int )mdev->state.ldv_37520.conn > 9) {
#line 3022
    tmp___12 = __fswab64(p->c_size);
#line 3022
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3022
    if (tmp___12 != (unsigned long long )tmp___13 || ldsc != 0) {
#line 3026
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3028
    tmp___14 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3028
    if (tmp___14 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 160U)) {
#line 3030
      if ((int )mdev->state.ldv_37520.pdsk > 3 && (int )mdev->state.ldv_37520.disk > 3) {
#line 3032
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3033
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3035
          resync_after_online_grow(mdev);
        }
      } else {
#line 3037
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3041
  return (1);
}
}
#line 3044 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int updated_uuids ;
  void *tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3046
  p = & mdev->data.rbuf.uuids;
#line 3048
  updated_uuids = 0;
#line 3050
  tmp = kmalloc(48UL, 16U);
#line 3050
  p_uuid = (u64 *)tmp;
#line 3052
  i = 0;
#line 3052
  goto ldv_49049;
  ldv_49048: 
#line 3053
  tmp___0 = __fswab64(p->uuid[i]);
#line 3053
  *(p_uuid + (unsigned long )i) = tmp___0;
#line 3052
  i = i + 1;
  ldv_49049: ;
#line 3052
  if (i <= 5) {
#line 3053
    goto ldv_49048;
  } else {

  }
#line 3055
  kfree((void const   *)mdev->p_uuid);
#line 3056
  mdev->p_uuid = p_uuid;
#line 3058
  if ((((int )mdev->state.ldv_37520.conn <= 9 && (int )mdev->state.ldv_37520.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3062
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3064
    val.i = 0U;
#line 3064
    val.ldv_37520.conn = 1U;
#line 3064
    mask.i = 0U;
#line 3064
    mask.ldv_37520.conn = 31U;
#line 3064
    drbd_force_state(mdev, mask, val);
#line 3065
    return (0);
  } else {

  }
#line 3068
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3068
  if (tmp___1 != 0) {
#line 3069
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3074
    if (skip_initial_sync != 0) {
#line 3075
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3076
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids",
                     BM_LOCKED_TEST_ALLOWED);
#line 3079
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3080
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3081
      __ns.i = mdev->state.i;
#line 3081
      __ns.ldv_37520.disk = 8U;
#line 3081
      __ns.ldv_37520.pdsk = 8U;
#line 3081
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3083
      drbd_md_sync(mdev);
#line 3084
      updated_uuids = 1;
    } else {

    }
#line 3086
    put_ldev(mdev);
  } else
#line 3087
  if ((int )mdev->state.ldv_37520.disk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 3091
    updated_uuids = drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3098
  tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3098
  if (tmp___2 == 0) {
#line 3098
    goto ldv_49058;
  } else {

  }
#line 3098
  tmp___3 = get_current();
#line 3098
  __wait.flags = 0U;
#line 3098
  __wait.private = (void *)tmp___3;
#line 3098
  __wait.func = & autoremove_wake_function;
#line 3098
  __wait.task_list.next = & __wait.task_list;
#line 3098
  __wait.task_list.prev = & __wait.task_list;
  ldv_49061: 
#line 3098
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3098
  tmp___4 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3098
  if (tmp___4 == 0) {
#line 3098
    goto ldv_49060;
  } else {

  }
#line 3098
  schedule();
#line 3098
  goto ldv_49061;
  ldv_49060: 
#line 3098
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49058: ;
#line 3099
  if ((int )mdev->state.ldv_37520.conn > 9 && (int )mdev->state.ldv_37520.disk <= 3) {
#line 3100
    tmp___5 = drbd_set_ed_uuid(mdev, *p_uuid);
#line 3100
    updated_uuids = tmp___5 | updated_uuids;
  } else {

  }
#line 3102
  if (updated_uuids != 0) {
#line 3103
    drbd_print_uuids(mdev, "receiver updated UUIDs to");
  } else {

  }
#line 3105
  return (1);
}
}
#line 3112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3116
  c_tab[0] = 0;
#line 3116
  c_tab[1] = C_TEAR_DOWN;
#line 3116
  c_tab[2] = 0;
#line 3116
  c_tab[3] = 0;
#line 3116
  c_tab[4] = 0;
#line 3116
  c_tab[5] = 0;
#line 3116
  c_tab[6] = 0;
#line 3116
  c_tab[7] = 0;
#line 3116
  c_tab[8] = 0;
#line 3116
  c_tab[9] = 0;
#line 3116
  c_tab[10] = C_CONNECTED;
#line 3116
  c_tab[11] = C_STARTING_SYNC_T;
#line 3116
  c_tab[12] = C_STARTING_SYNC_S;
#line 3116
  c_tab[13] = 0;
#line 3116
  c_tab[14] = 0;
#line 3116
  c_tab[15] = 0;
#line 3116
  c_tab[16] = 0;
#line 3116
  c_tab[17] = 0;
#line 3116
  c_tab[18] = C_VERIFY_T;
#line 3116
  c_tab[19] = 0;
#line 3116
  c_tab[20] = 0;
#line 3116
  c_tab[21] = 0;
#line 3116
  c_tab[22] = 0;
#line 3116
  c_tab[23] = 0;
#line 3116
  c_tab[24] = 0;
#line 3116
  c_tab[25] = 0;
#line 3116
  c_tab[26] = 0;
#line 3116
  c_tab[27] = 0;
#line 3116
  c_tab[28] = 0;
#line 3116
  c_tab[29] = 0;
#line 3116
  c_tab[30] = 0;
#line 3116
  c_tab[31] = C_MASK;
#line 3126
  ms.i = ps.i;
#line 3128
  ms.ldv_37520.conn = (unsigned char )c_tab[(int )ps.ldv_37520.conn];
#line 3129
  ms.ldv_37520.peer = ps.ldv_37520.role;
#line 3130
  ms.ldv_37520.role = ps.ldv_37520.peer;
#line 3131
  ms.ldv_37520.pdsk = ps.ldv_37520.disk;
#line 3132
  ms.ldv_37520.disk = ps.ldv_37520.pdsk;
#line 3133
  ms.ldv_37520.peer_isp = (unsigned char )((int )ps.ldv_37520.aftr_isp | (int )ps.ldv_37520.user_isp);
#line 3135
  return (ms);
}
}
#line 3138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_state_rv rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3140
  p = & mdev->data.rbuf.req_state;
#line 3144
  tmp = __fswab32(p->mask);
#line 3144
  mask.i = tmp;
#line 3145
  tmp___0 = __fswab32(p->val);
#line 3145
  val.i = tmp___0;
#line 3147
  tmp___1 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 3147
  if (tmp___1 != 0) {
#line 3147
    tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3147
    if (tmp___2 != 0) {
#line 3149
      drbd_send_sr_reply(mdev, SS_CONCURRENT_ST_CHG);
#line 3150
      return (1);
    } else {

    }
  } else {

  }
#line 3153
  mask = convert_state(mask);
#line 3154
  val = convert_state(val);
#line 3156
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3158
  drbd_send_sr_reply(mdev, rv);
#line 3159
  drbd_md_sync(mdev);
#line 3161
  return (1);
}
}
#line 3164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_state *p ;
  union drbd_state os ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  enum chg_state_flags cs_flags ;
  int rv ;
  __u32 tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  int cr ;
  int tmp___2 ;
  enum drbd_conns tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  int tmp___7 ;
  enum drbd_state_rv tmp___8 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;

  {
#line 3166
  p = & mdev->data.rbuf.state;
#line 3172
  tmp = __fswab32(p->state);
#line 3172
  peer_state.i = tmp;
#line 3174
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_37520.disk;
#line 3175
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3176
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3177
    tmp___0 = drbd_disk_str(real_peer_disk);
#line 3177
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___0);
  } else {

  }
#line 3180
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3182
  ns = mdev->state;
#line 3182
  os = ns;
#line 3183
  spin_unlock_irq(& mdev->req_lock);
#line 3187
  if (((*((unsigned int *)(& os) + 0UL) == 32768U && (unsigned int )real_peer_disk == 8U) && (int )os.ldv_37520.conn > 10) && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) {
#line 3195
    if ((int )peer_state.ldv_37520.conn > 10 && (int )peer_state.ldv_37520.conn <= 15) {
#line 3197
      real_peer_disk = D_INCONSISTENT;
    } else
#line 3202
    if ((int )os.ldv_37520.conn > 15 && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) {
#line 3204
      tmp___1 = drbd_bm_total_weight(mdev);
#line 3204
      if (tmp___1 <= mdev->rs_failed) {
#line 3205
        drbd_resync_finished(mdev);
      } else {

      }
#line 3206
      return (1);
    } else {

    }
  } else {

  }
#line 3215
  if (((*((unsigned int *)(& os) + 0UL) == 65536U && (unsigned int )real_peer_disk == 4U) && (unsigned int )*((unsigned short *)(& os) + 0UL) == 160U) && (int )peer_state.ldv_37520.conn > 16) {
#line 3217
    real_peer_disk = D_UP_TO_DATE;
  } else {

  }
#line 3219
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 3220
    ns.ldv_37520.conn = 10U;
  } else {

  }
#line 3222
  if ((unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 352U) {
#line 3223
    ns.ldv_37520.conn = 23U;
  } else {

  }
#line 3225
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_37520.disk > 2) {
#line 3225
    tmp___5 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3225
    if (tmp___5 != 0) {
#line 3230
      cr = (int )os.ldv_37520.conn <= 9;
#line 3233
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U)) | cr;
#line 3238
      tmp___2 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 3238
      cr = tmp___2 | cr;
#line 3241
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((int )peer_state.ldv_37520.conn > 10 && (int )peer_state.ldv_37520.conn <= 14)) | cr;
#line 3245
      if (cr != 0) {
#line 3246
        tmp___3 = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_37520.role,
                                      real_peer_disk);
#line 3246
        ns.ldv_37520.conn = (unsigned char )tmp___3;
      } else {

      }
#line 3248
      put_ldev(mdev);
#line 3249
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 496U) {
#line 3250
        ns.ldv_37520.conn = 10U;
#line 3251
        if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 6U) {
#line 3252
          val.i = 0U;
#line 3252
          val.ldv_37520.disk = 2U;
#line 3252
          mask.i = 0U;
#line 3252
          mask.ldv_37520.disk = 15U;
#line 3252
          drbd_force_state(mdev, mask, val);
        } else
#line 3253
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3254
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3255
          peer_state.ldv_37520.disk = 0U;
#line 3256
          real_peer_disk = D_DISKLESS;
        } else {
#line 3258
          tmp___4 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3258
          if (tmp___4 != 0) {
#line 3259
            return (0);
          } else {

          }
#line 3260
          if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U) {
#line 3260
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( os.conn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3260);
          } else {

          }
#line 3261
          val___0.i = 0U;
#line 3261
          val___0.ldv_37520.conn = 1U;
#line 3261
          mask___0.i = 0U;
#line 3261
          mask___0.ldv_37520.conn = 31U;
#line 3261
          drbd_force_state(mdev, mask___0, val___0);
#line 3262
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3267
  spin_lock_irq(& mdev->req_lock);
#line 3268
  if (mdev->state.i != os.i) {
#line 3269
    goto retry;
  } else {

  }
#line 3270
  clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 3271
  ns.ldv_37520.peer = peer_state.ldv_37520.role;
#line 3272
  ns.ldv_37520.pdsk = (unsigned char )real_peer_disk;
#line 3273
  ns.ldv_37520.peer_isp = (unsigned char )((int )peer_state.ldv_37520.aftr_isp | (int )peer_state.ldv_37520.user_isp);
#line 3274
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3275
    ns.ldv_37520.disk = mdev->new_state_tmp.ldv_37520.disk;
  } else {

  }
#line 3276
  cs_flags = (enum chg_state_flags )(((int )os.ldv_37520.conn > 9 || (int )ns.ldv_37520.conn <= 9) + 2);
#line 3277
  if (*((unsigned int *)(& ns) + 0UL) == 57344U) {
#line 3277
    tmp___6 = is_susp(ns);
#line 3277
    if (tmp___6 != 0) {
#line 3277
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 3277
        if ((int )os.ldv_37520.conn <= 9) {
#line 3277
          tmp___7 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 3277
          if (tmp___7 != 0) {
#line 3281
            spin_unlock_irq(& mdev->req_lock);
#line 3282
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Aborting Connect, can not thaw IO with an only Consistent peer\n");
#line 3283
            tl_clear(mdev);
#line 3284
            drbd_uuid_new_current(mdev);
#line 3285
            clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 3286
            val___1.i = 0U;
#line 3286
            val___1.ldv_37520.conn = 6U;
#line 3286
            val___1.ldv_37520.susp = 0U;
#line 3286
            mask___1.i = 0U;
#line 3286
            mask___1.ldv_37520.conn = 31U;
#line 3286
            mask___1.ldv_37520.susp = 1U;
#line 3286
            drbd_force_state(mdev, mask___1, val___1);
#line 3287
            return (0);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3289
  tmp___8 = _drbd_set_state(mdev, ns, cs_flags, 0);
#line 3289
  rv = (int )tmp___8;
#line 3290
  ns = mdev->state;
#line 3291
  spin_unlock_irq(& mdev->req_lock);
#line 3293
  if (rv <= 0) {
#line 3294
    val___2.i = 0U;
#line 3294
    val___2.ldv_37520.conn = 1U;
#line 3294
    mask___2.i = 0U;
#line 3294
    mask___2.ldv_37520.conn = 31U;
#line 3294
    drbd_force_state(mdev, mask___2, val___2);
#line 3295
    return (0);
  } else {

  }
#line 3298
  if ((int )os.ldv_37520.conn > 9) {
#line 3299
    if (((int )ns.ldv_37520.conn > 10 && (int )peer_state.ldv_37520.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3304
      drbd_send_uuids(mdev);
#line 3305
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3309
  (mdev->net_conf)->want_lose = 0U;
#line 3311
  drbd_md_sync(mdev);
#line 3313
  return (1);
}
}
#line 3316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 3318
  p = & mdev->data.rbuf.rs_uuid;
#line 3320
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_37520.conn <= 9) || (int )mdev->state.ldv_37520.disk <= 2) {
#line 3320
    goto ldv_49112;
  } else {

  }
#line 3320
  tmp = get_current();
#line 3320
  __wait.flags = 0U;
#line 3320
  __wait.private = (void *)tmp;
#line 3320
  __wait.func = & autoremove_wake_function;
#line 3320
  __wait.task_list.next = & __wait.task_list;
#line 3320
  __wait.task_list.prev = & __wait.task_list;
  ldv_49115: 
#line 3320
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3320
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_37520.conn <= 9) || (int )mdev->state.ldv_37520.disk <= 2) {
#line 3320
    goto ldv_49114;
  } else {

  }
#line 3320
  schedule();
#line 3320
  goto ldv_49115;
  ldv_49114: 
#line 3320
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49112: 
#line 3330
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3330
  if (tmp___1 != 0) {
#line 3331
    tmp___0 = __fswab64(p->uuid);
#line 3331
    _drbd_uuid_set(mdev, 0, tmp___0);
#line 3332
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3334
    drbd_print_uuids(mdev, "updated sync uuid");
#line 3335
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3337
    put_ldev(mdev);
  } else {
#line 3339
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3341
  return (1);
}
}
#line 3351 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap_plain(struct drbd_conf *mdev , unsigned int data_size ,
                                unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int err ;

  {
#line 3354
  __min1 = 511UL;
#line 3354
  __min2 = c->bm_words - c->word_offset;
#line 3354
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3355
  want = num_words * 8U;
#line 3358
  if (want != data_size) {
#line 3359
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != data_size (%u)\n",
            "receive_bitmap_plain", want, data_size);
#line 3360
    return (-5);
  } else {

  }
#line 3362
  if (want == 0U) {
#line 3363
    return (0);
  } else {

  }
#line 3364
  err = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3365
  if ((unsigned int )err != want) {
#line 3366
    if (err >= 0) {
#line 3367
      err = -5;
    } else {

    }
#line 3368
    return (err);
  } else {

  }
#line 3371
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3373
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3374
  c->bit_offset = c->word_offset * 64UL;
#line 3375
  if (c->bit_offset > c->bm_bits) {
#line 3376
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3378
  return (1);
}
}
#line 3388 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  __u16 tmp___0 ;
  int toggle ;
  int tmp___1 ;
  int have ;
  int bits ;
  int tmp___2 ;

  {
#line 3396
  s = c->bit_offset;
#line 3398
  tmp___0 = __fswab16((int )p->head.length);
#line 3398
  len = (int )((unsigned int )tmp___0 - 1U);
#line 3399
  tmp___1 = DCBP_get_start(p);
#line 3399
  toggle = tmp___1;
#line 3403
  tmp___2 = DCBP_get_pad_bits(p);
#line 3403
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___2);
#line 3405
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3406
  if (bits < 0) {
#line 3407
    return (-5);
  } else {

  }
#line 3409
  have = bits;
#line 3409
  goto ldv_49145;
  ldv_49144: 
#line 3410
  bits = vli_decode_bits(& rl, look_ahead);
#line 3411
  if (bits <= 0) {
#line 3412
    return (-5);
  } else {

  }
#line 3414
  if (toggle != 0) {
#line 3415
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3416
    if (c->bm_bits <= e) {
#line 3417
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3418
      return (-5);
    } else {

    }
#line 3420
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3423
  if (have < bits) {
#line 3424
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3428
    return (-5);
  } else {

  }
#line 3430
  look_ahead = look_ahead >> bits;
#line 3431
  have = have - bits;
#line 3433
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3434
  if (bits < 0) {
#line 3435
    return (-5);
  } else {

  }
#line 3436
  look_ahead = (tmp << have) | look_ahead;
#line 3437
  have = have + bits;
#line 3409
  s = (unsigned long )((unsigned long long )s + rl);
#line 3409
  toggle = toggle == 0;
  ldv_49145: ;
#line 3409
  if (have > 0) {
#line 3410
    goto ldv_49144;
  } else {

  }
#line 3440
  c->bit_offset = s;
#line 3441
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3443
  return (c->bm_bits != s);
}
}
#line 3453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  int tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3457
  tmp___0 = DCBP_get_code(p);
#line 3457
  if ((unsigned int )tmp___0 == 2U) {
#line 3458
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3458
    return (tmp);
  } else {

  }
#line 3464
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3465
  val.i = 0U;
#line 3465
  val.ldv_37520.conn = 6U;
#line 3465
  mask.i = 0U;
#line 3465
  mask.ldv_37520.conn = 31U;
#line 3465
  drbd_force_state(mdev, mask, val);
#line 3466
  return (-5);
}
}
#line 3469 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3473
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3476
  total = c->bytes[0] + c->bytes[1];
#line 3480
  if (total == 0U) {
#line 3481
    return;
  } else {

  }
#line 3484
  if (total >= plain) {
#line 3485
    return;
  } else {

  }
#line 3488
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3491
  if (r > 1000U) {
#line 3492
    r = 1000U;
  } else {

  }
#line 3494
  r = 1000U - r;
#line 3495
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3496
  return;
}
}
#line 3511 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  int err ;
  int ok ;
  struct p_header80 *h ;
  unsigned long tmp ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_state_rv rv ;
  int tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___5 ;

  {
#line 3516
  ok = 0;
#line 3517
  h = & mdev->data.rbuf.header.h80;
#line 3519
  drbd_bm_lock(mdev, (char *)"receive bitmap", BM_DONT_CLEAR);
#line 3525
  tmp = __get_free_pages(16U, 0U);
#line 3525
  buffer = (void *)tmp;
#line 3526
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3527
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3528
    goto out;
  } else {

  }
#line 3531
  tmp___0 = drbd_bm_bits(mdev);
#line 3531
  tmp___1 = drbd_bm_words(mdev);
#line 3531
  __constr_expr_0.bm_bits = tmp___0;
#line 3531
  __constr_expr_0.bm_words = tmp___1;
#line 3531
  __constr_expr_0.bit_offset = 0UL;
#line 3531
  __constr_expr_0.word_offset = 0UL;
#line 3531
  __constr_expr_0.packets[0] = 0U;
#line 3531
  __constr_expr_0.packets[1] = 0U;
#line 3531
  __constr_expr_0.bytes[0] = 0U;
#line 3531
  __constr_expr_0.bytes[1] = 0U;
#line 3531
  c = __constr_expr_0;
  ldv_49182: ;
#line 3537
  if ((unsigned int )cmd == 4U) {
#line 3538
    err = receive_bitmap_plain(mdev, data_size, (unsigned long *)buffer, & c);
  } else
#line 3539
  if ((unsigned int )cmd == 36U) {
#line 3544
    if (data_size > 4088U) {
#line 3545
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3546
      goto out;
    } else {

    }
#line 3549
    p = (struct p_compressed_bm *)buffer;
#line 3550
    __len = 8UL;
#line 3550
    if (__len > 63UL) {
#line 3550
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3550
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3551
    tmp___2 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )data_size);
#line 3551
    if ((unsigned int )tmp___2 != data_size) {
#line 3552
      goto out;
    } else {

    }
#line 3553
    if (data_size <= 1U) {
#line 3554
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              data_size);
#line 3555
      goto out;
    } else {

    }
#line 3557
    err = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3559
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: cmd neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (unsigned int )cmd);
#line 3560
    goto out;
  }
#line 3563
  c.packets[(unsigned int )cmd == 4U] = c.packets[(unsigned int )cmd == 4U] + 1U;
#line 3564
  c.bytes[(unsigned int )cmd == 4U] = (c.bytes[(unsigned int )cmd == 4U] + data_size) + 8U;
#line 3566
  if (err <= 0) {
#line 3567
    if (err < 0) {
#line 3568
      goto out;
    } else {

    }
#line 3569
    goto ldv_49181;
  } else {

  }
#line 3571
  tmp___3 = drbd_recv_header(mdev, & cmd, & data_size);
#line 3571
  if (tmp___3 == 0) {
#line 3572
    goto out;
  } else {

  }
#line 3573
  goto ldv_49182;
  ldv_49181: 
#line 3575
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3577
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 224U) {
#line 3580
    tmp___4 = drbd_send_bitmap(mdev);
#line 3580
    ok = tmp___4 == 0;
#line 3581
    if (ok == 0) {
#line 3582
      goto out;
    } else {

    }
#line 3584
    val.i = 0U;
#line 3584
    val.ldv_37520.conn = 15U;
#line 3584
    mask.i = 0U;
#line 3584
    mask.ldv_37520.conn = 31U;
#line 3584
    rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3585
    if ((int )rv != 1) {
#line 3585
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              3585);
    } else {

    }
  } else
#line 3586
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 208U) {
#line 3589
    tmp___5 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_37520.conn);
#line 3589
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___5);
  } else {

  }
#line 3593
  ok = 1;
  out: 
#line 3595
  drbd_bm_unlock(mdev);
#line 3596
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 3597
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3598
  free_pages((unsigned long )buffer, 0U);
#line 3599
  return (ok);
}
}
#line 3602 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3608
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
           (unsigned int )cmd, data_size);
#line 3611
  size = (int )data_size;
#line 3612
  goto ldv_49205;
  ldv_49204: 
#line 3613
  __min1 = size;
#line 3613
  __min2 = 128;
#line 3613
  want = __min1 < __min2 ? __min1 : __min2;
#line 3614
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3615
  _b = r <= 0;
#line 3615
  if (_b != 0) {
#line 3615
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "receive_skip", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3615);
  } else {

  }
#line 3615
  if (_b != 0) {
#line 3615
    goto ldv_49203;
  } else {

  }
#line 3616
  size = size - r;
  ldv_49205: ;
#line 3612
  if (size > 0) {
#line 3613
    goto ldv_49204;
  } else {

  }
  ldv_49203: ;
#line 3618
  return (size == 0);
}
}
#line 3621 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 


  {
#line 3625
  drbd_tcp_quickack(mdev->data.socket);
#line 3627
  return (1);
}
}
#line 3630 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_out_of_sync(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_block_desc *p ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;

  {
#line 3632
  p = & mdev->data.rbuf.block_desc;
#line 3634
  switch ((int )mdev->state.ldv_37520.conn) {
  case 15: ;
  case 14: ;
  case 23: ;
#line 3638
  goto ldv_49220;
  default: 
#line 3640
  tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_37520.conn);
#line 3640
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected: WFSyncUUID|WFBitMapT|Behind\n",
          tmp);
  }
  ldv_49220: 
#line 3644
  tmp___0 = __fswab32(p->blksize);
#line 3644
  tmp___1 = __fswab64(p->sector);
#line 3644
  __drbd_set_out_of_sync(mdev, (sector_t )tmp___1, (int )tmp___0, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                         3644U);
#line 3646
  return (1);
}
}
#line 3657 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct data_cmd drbd_cmd_handler[43U]  = 
#line 3657
  {      {1, 32UL, & receive_Data}, 
        {1, 32UL, & receive_DataReply}, 
        {1, 32UL, & receive_RSDataReply}, 
        {0, 16UL, & receive_Barrier}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_UnplugRemote}, 
        {0, 32UL, & receive_DataRequest}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 32UL, & receive_protocol}, 
        {0, 56UL, & receive_uuids}, 
        {0, 40UL, & receive_sizes}, 
        {0, 12UL, & receive_state}, 
        {0, 16UL, & receive_sync_uuid}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_req_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_skip}, 
        {0, 24UL, & receive_out_of_sync}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}};
#line 3692 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  union p_header *header ;
  unsigned int packet_size ;
  enum drbd_packets cmd ;
  size_t shs ;
  int rv ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3694
  header = & mdev->data.rbuf.header;
#line 3700
  goto ldv_49241;
  ldv_49240: 
#line 3701
  drbd_thread_current_set_cpu(mdev);
#line 3702
  tmp = drbd_recv_header(mdev, & cmd, & packet_size);
#line 3702
  if (tmp == 0) {
#line 3703
    goto err_out;
  } else {

  }
#line 3705
  tmp___0 = __builtin_expect((unsigned int )cmd > 41U, 0L);
#line 3705
  if (tmp___0 != 0L) {
#line 3706
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (unsigned int )cmd, packet_size);
#line 3707
    goto err_out;
  } else {
#line 3705
    tmp___1 = __builtin_expect((unsigned long )drbd_cmd_handler[(unsigned int )cmd].function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                                          enum drbd_packets  ,
                                                                                                                          unsigned int  ))0),
                               0L);
#line 3705
    if (tmp___1 != 0L) {
#line 3706
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
              (unsigned int )cmd, packet_size);
#line 3707
      goto err_out;
    } else {

    }
  }
#line 3710
  shs = drbd_cmd_handler[(unsigned int )cmd].pkt_size - 8UL;
#line 3711
  if ((size_t )packet_size != shs && drbd_cmd_handler[(unsigned int )cmd].expect_payload == 0) {
#line 3712
    tmp___2 = cmdname(cmd);
#line 3712
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No payload expected %s l:%d\n",
            tmp___2, packet_size);
#line 3713
    goto err_out;
  } else {

  }
#line 3716
  if (shs != 0UL) {
#line 3717
    rv = drbd_recv(mdev, (void *)(& header->h80.payload), shs);
#line 3718
    tmp___5 = __builtin_expect((size_t )rv != shs, 0L);
#line 3718
    if (tmp___5 != 0L) {
#line 3719
      tmp___3 = get_current();
#line 3719
      tmp___4 = signal_pending(tmp___3);
#line 3719
      if (tmp___4 == 0) {
#line 3720
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read while reading sub header: rv=%d\n",
                 rv);
      } else {

      }
#line 3721
      goto err_out;
    } else {

    }
  } else {

  }
#line 3725
  rv = (*(drbd_cmd_handler[(unsigned int )cmd].function))(mdev, cmd, packet_size - (unsigned int )shs);
#line 3727
  tmp___7 = __builtin_expect(rv == 0, 0L);
#line 3727
  if (tmp___7 != 0L) {
#line 3728
    tmp___6 = cmdname(cmd);
#line 3728
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___6, packet_size);
#line 3730
    goto err_out;
  } else {

  }
  ldv_49241: 
#line 3700
  tmp___8 = get_t_state(& mdev->receiver);
#line 3700
  if ((unsigned int )tmp___8 == 1U) {
#line 3701
    goto ldv_49240;
  } else {

  }

#line 3734
  if (0) {
    err_out: 
#line 3736
    val.i = 0U;
#line 3736
    val.ldv_37520.conn = 6U;
#line 3736
    mask.i = 0U;
#line 3736
    mask.ldv_37520.conn = 31U;
#line 3736
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 3740
  drbd_md_sync(mdev);
#line 3741
  return;
}
}
#line 3743 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3747
  barr.w.cb = & w_prev_work_done;
#line 3748
  init_completion(& barr.done);
#line 3749
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3750
  wait_for_completion(& barr.done);
#line 3751
  return;
}
}
#line 3753 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_tl_hash(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *h ;

  {
#line 3757
  spin_lock_irq(& mdev->req_lock);
#line 3759
  if ((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0) || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 3760
    spin_unlock_irq(& mdev->req_lock);
#line 3761
    return;
  } else {

  }
#line 3764
  h = mdev->ee_hash;
#line 3764
  goto ldv_49256;
  ldv_49255: ;
#line 3765
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3766
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
  } else {

  }
#line 3764
  h = h + 1;
  ldv_49256: ;
#line 3764
  if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3765
    goto ldv_49255;
  } else {

  }
#line 3768
  kfree((void const   *)mdev->ee_hash);
#line 3769
  mdev->ee_hash = 0;
#line 3770
  mdev->ee_hash_s = 0U;
#line 3773
  h = mdev->tl_hash;
#line 3773
  goto ldv_49259;
  ldv_49258: ;
#line 3774
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3775
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED tl_hash[%u] == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
  } else {

  }
#line 3773
  h = h + 1;
  ldv_49259: ;
#line 3773
  if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3774
    goto ldv_49258;
  } else {

  }
#line 3777
  kfree((void const   *)mdev->tl_hash);
#line 3778
  mdev->tl_hash = 0;
#line 3779
  mdev->tl_hash_s = 0U;
#line 3780
  spin_unlock_irq(& mdev->req_lock);
#line 3781
  return;
}
}
#line 3783 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 3787
  rv = 0;
#line 3790
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) {
#line 3791
    return;
  } else {

  }
#line 3794
  drbd_thread_stop(& mdev->asender);
#line 3795
  drbd_free_sock(mdev);
#line 3798
  spin_lock_irq(& mdev->req_lock);
#line 3799
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3800
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3801
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3802
  spin_unlock_irq(& mdev->req_lock);
#line 3814
  drbd_rs_cancel_all(mdev);
#line 3815
  mdev->rs_total = 0UL;
#line 3816
  mdev->rs_failed = 0UL;
#line 3817
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3818
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3820
  del_timer(& mdev->request_timer);
#line 3823
  del_timer_sync(& mdev->resync_timer);
#line 3824
  resync_timer_fn((unsigned long )mdev);
#line 3829
  drbd_flush_workqueue(mdev);
#line 3833
  drbd_process_done_ee(mdev);
#line 3835
  kfree((void const   *)mdev->p_uuid);
#line 3836
  mdev->p_uuid = 0;
#line 3838
  tmp = is_susp(mdev->state);
#line 3838
  if (tmp == 0) {
#line 3839
    tl_clear(mdev);
  } else {

  }
#line 3841
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3843
  drbd_md_sync(mdev);
#line 3845
  fp = FP_DONT_CARE;
#line 3846
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3846
  if (tmp___0 != 0) {
#line 3847
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3848
    put_ldev(mdev);
  } else {

  }
#line 3851
  if (((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )fp != 0U) && (int )mdev->state.ldv_37520.pdsk > 5) {
#line 3852
    drbd_try_outdate_peer_async(mdev);
  } else {

  }
#line 3854
  spin_lock_irq(& mdev->req_lock);
#line 3855
  os = mdev->state;
#line 3856
  if ((int )os.ldv_37520.conn > 1) {
#line 3858
    ns = os;
#line 3859
    ns.ldv_37520.conn = 2U;
#line 3860
    tmp___1 = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 3860
    rv = (int )tmp___1;
  } else {

  }
#line 3862
  spin_unlock_irq(& mdev->req_lock);
#line 3864
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3865
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3865
    if (tmp___2 == 0) {
#line 3865
      goto ldv_49269;
    } else {

    }
#line 3865
    tmp___3 = get_current();
#line 3865
    __wait.flags = 0U;
#line 3865
    __wait.private = (void *)tmp___3;
#line 3865
    __wait.func = & autoremove_wake_function;
#line 3865
    __wait.task_list.next = & __wait.task_list;
#line 3865
    __wait.task_list.prev = & __wait.task_list;
    ldv_49272: 
#line 3865
    prepare_to_wait(& mdev->net_cnt_wait, & __wait, 2);
#line 3865
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3865
    if (tmp___4 == 0) {
#line 3865
      goto ldv_49271;
    } else {

    }
#line 3865
    schedule();
#line 3865
    goto ldv_49272;
    ldv_49271: 
#line 3865
    finish_wait(& mdev->net_cnt_wait, & __wait);
    ldv_49269: 
#line 3867
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3868
    mdev->cram_hmac_tfm = 0;
#line 3870
    kfree((void const   *)mdev->net_conf);
#line 3871
    mdev->net_conf = 0;
#line 3872
    val.i = 0U;
#line 3872
    val.ldv_37520.conn = 0U;
#line 3872
    mask.i = 0U;
#line 3872
    mask.ldv_37520.conn = 31U;
#line 3872
    drbd_request_state(mdev, mask, val);
  } else {

  }
#line 3877
  tmp___5 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 3877
  if (tmp___5 == 0) {
#line 3877
    goto ldv_49277;
  } else {

  }
#line 3877
  tmp___6 = get_current();
#line 3877
  __wait___0.flags = 0U;
#line 3877
  __wait___0.private = (void *)tmp___6;
#line 3877
  __wait___0.func = & autoremove_wake_function;
#line 3877
  __wait___0.task_list.next = & __wait___0.task_list;
#line 3877
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_49280: 
#line 3877
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3877
  tmp___7 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 3877
  if (tmp___7 == 0) {
#line 3877
    goto ldv_49279;
  } else {

  }
#line 3877
  schedule();
#line 3877
  goto ldv_49280;
  ldv_49279: 
#line 3877
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_49277: 
#line 3886
  tmp___8 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3886
  i = (unsigned int )tmp___8;
#line 3887
  if (i != 0U) {
#line 3888
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 3889
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->pp_in_use_by_net));
#line 3889
  i = (unsigned int )tmp___9;
#line 3890
  if (i != 0U) {
#line 3891
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use_by_net = %d, expected 0\n",
              i);
  } else {

  }
#line 3892
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3892
  i = (unsigned int )tmp___10;
#line 3893
  if (i != 0U) {
#line 3894
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 3896
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3896
  if (tmp___11 == 0) {
#line 3896
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3896);
  } else {

  }
#line 3897
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3897
  if (tmp___12 == 0) {
#line 3897
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3897);
  } else {

  }
#line 3898
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3898
  if (tmp___13 == 0) {
#line 3898
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3898);
  } else {

  }
#line 3899
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3899
  if (tmp___14 == 0) {
#line 3899
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3899);
  } else {

  }
#line 3902
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3903
  tmp___15 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3903
  if (tmp___15 == 0) {
#line 3903
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3903);
  } else {

  }
#line 3904
  return;
}
}
#line 3915 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 3918
  p = & mdev->data.sbuf.handshake;
#line 3921
  tmp = mutex_lock_interruptible_nested(& mdev->data.mutex, 0U);
#line 3921
  if (tmp != 0) {
#line 3922
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 3923
    return (0);
  } else {

  }
#line 3926
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 3927
    mutex_unlock(& mdev->data.mutex);
#line 3928
    return (0);
  } else {

  }
#line 3931
  memset((void *)p, 0, 80UL);
#line 3932
  p->protocol_min = 1442840576U;
#line 3933
  p->protocol_max = 1610612736U;
#line 3934
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header80 *)p,
                      80UL, 0U);
#line 3936
  mutex_unlock(& mdev->data.mutex);
#line 3937
  return (ok);
}
}
#line 3947 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  unsigned int length ;
  enum drbd_packets cmd ;
  int rv ;
  char const   *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int __min1 ;
  int __min2 ;

  {
#line 3950
  p = & mdev->data.rbuf.handshake;
#line 3951
  expect = 72;
#line 3956
  rv = drbd_send_handshake(mdev);
#line 3957
  if (rv == 0) {
#line 3958
    return (0);
  } else {

  }
#line 3960
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 3961
  if (rv == 0) {
#line 3962
    return (0);
  } else {

  }
#line 3964
  if ((unsigned int )cmd != 65534U) {
#line 3965
    tmp = cmdname(cmd);
#line 3965
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (unsigned int )cmd);
#line 3967
    return (-1);
  } else {

  }
#line 3970
  if ((unsigned int )expect != length) {
#line 3971
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, length);
#line 3973
    return (-1);
  } else {

  }
#line 3976
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 3978
  if (rv != expect) {
#line 3979
    tmp___0 = get_current();
#line 3979
    tmp___1 = signal_pending(tmp___0);
#line 3979
    if (tmp___1 == 0) {
#line 3980
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
               rv);
    } else {

    }
#line 3981
    return (0);
  } else {

  }
#line 3984
  tmp___2 = __fswab32(p->protocol_min);
#line 3984
  p->protocol_min = tmp___2;
#line 3985
  tmp___3 = __fswab32(p->protocol_max);
#line 3985
  p->protocol_max = tmp___3;
#line 3986
  if (p->protocol_max == 0U) {
#line 3987
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 3989
  if (p->protocol_min > 96U || p->protocol_max <= 85U) {
#line 3991
    goto incompat;
  } else {

  }
#line 3993
  __min1 = 96;
#line 3993
  __min2 = (int )p->protocol_max;
#line 3993
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 3995
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 3998
  return (1);
  incompat: 
#line 4001
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 96, p->protocol_min, p->protocol_max);
#line 4005
  return (-1);
}
}
#line 4024 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  enum drbd_packets cmd ;
  unsigned int length ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;

  {
#line 4028
  response = 0;
#line 4029
  right_response = 0;
#line 4030
  peers_ch = 0;
#line 4031
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4031
  key_len = (unsigned int )tmp;
#line 4038
  desc.tfm = mdev->cram_hmac_tfm;
#line 4039
  desc.flags = 0U;
#line 4041
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4043
  if (rv != 0) {
#line 4044
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 4045
    rv = -1;
#line 4046
    goto fail;
  } else {

  }
#line 4049
  get_random_bytes((void *)(& my_challenge), 64);
#line 4051
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4052
  if (rv == 0) {
#line 4053
    goto fail;
  } else {

  }
#line 4055
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4056
  if (rv == 0) {
#line 4057
    goto fail;
  } else {

  }
#line 4059
  if ((unsigned int )cmd != 16U) {
#line 4060
    tmp___0 = cmdname(cmd);
#line 4060
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (unsigned int )cmd);
#line 4062
    rv = 0;
#line 4063
    goto fail;
  } else {

  }
#line 4066
  if (length > 128U) {
#line 4067
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4068
    rv = -1;
#line 4069
    goto fail;
  } else {

  }
#line 4072
  tmp___1 = kmalloc((size_t )length, 16U);
#line 4072
  peers_ch = (char *)tmp___1;
#line 4073
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4074
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4075
    rv = -1;
#line 4076
    goto fail;
  } else {

  }
#line 4079
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )length);
#line 4081
  if ((unsigned int )rv != length) {
#line 4082
    tmp___2 = get_current();
#line 4082
    tmp___3 = signal_pending(tmp___2);
#line 4082
    if (tmp___3 == 0) {
#line 4083
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
               rv);
    } else {

    }
#line 4084
    rv = 0;
#line 4085
    goto fail;
  } else {

  }
#line 4088
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4089
  tmp___4 = kmalloc((size_t )resp_size, 16U);
#line 4089
  response = (char *)tmp___4;
#line 4090
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4091
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4092
    rv = -1;
#line 4093
    goto fail;
  } else {

  }
#line 4096
  sg_init_table(& sg, 1U);
#line 4097
  sg_set_buf(& sg, (void const   *)peers_ch, length);
#line 4099
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4100
  if (rv != 0) {
#line 4101
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4102
    rv = -1;
#line 4103
    goto fail;
  } else {

  }
#line 4106
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4107
  if (rv == 0) {
#line 4108
    goto fail;
  } else {

  }
#line 4110
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4111
  if (rv == 0) {
#line 4112
    goto fail;
  } else {

  }
#line 4114
  if ((unsigned int )cmd != 17U) {
#line 4115
    tmp___5 = cmdname(cmd);
#line 4115
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___5, (unsigned int )cmd);
#line 4117
    rv = 0;
#line 4118
    goto fail;
  } else {

  }
#line 4121
  if (length != resp_size) {
#line 4122
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4123
    rv = 0;
#line 4124
    goto fail;
  } else {

  }
#line 4127
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4129
  if ((unsigned int )rv != resp_size) {
#line 4130
    tmp___6 = get_current();
#line 4130
    tmp___7 = signal_pending(tmp___6);
#line 4130
    if (tmp___7 == 0) {
#line 4131
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
               rv);
    } else {

    }
#line 4132
    rv = 0;
#line 4133
    goto fail;
  } else {

  }
#line 4136
  tmp___8 = kmalloc((size_t )resp_size, 16U);
#line 4136
  right_response = (char *)tmp___8;
#line 4137
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4138
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4139
    rv = -1;
#line 4140
    goto fail;
  } else {

  }
#line 4143
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4145
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4146
  if (rv != 0) {
#line 4147
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4148
    rv = -1;
#line 4149
    goto fail;
  } else {

  }
#line 4152
  tmp___9 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4152
  rv = tmp___9 == 0;
#line 4154
  if (rv != 0) {
#line 4155
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4158
    rv = -1;
  }
  fail: 
#line 4161
  kfree((void const   *)peers_ch);
#line 4162
  kfree((void const   *)response);
#line 4163
  kfree((void const   *)right_response);
#line 4165
  return (rv);
}
}
#line 4169 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___1 ;

  {
#line 4171
  mdev = thi->mdev;
#line 4172
  tmp = mdev_to_minor(mdev);
#line 4172
  minor = tmp;
#line 4175
  tmp___0 = get_current();
#line 4175
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4177
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_49323: 
#line 4180
  h = drbd_connect(mdev);
#line 4181
  if (h == 0) {
#line 4182
    drbd_disconnect(mdev);
#line 4183
    schedule_timeout_interruptible(250L);
  } else {

  }
#line 4185
  if (h == -1) {
#line 4186
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4187
    val.i = 0U;
#line 4187
    val.ldv_37520.conn = 1U;
#line 4187
    mask.i = 0U;
#line 4187
    mask.ldv_37520.conn = 31U;
#line 4187
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4189
  if (h == 0) {
#line 4190
    goto ldv_49323;
  } else {

  }

#line 4191
  if (h > 0) {
#line 4192
    tmp___1 = get_net_conf(mdev);
#line 4192
    if (tmp___1 != 0) {
#line 4193
      drbdd(mdev);
#line 4194
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4198
  drbd_disconnect(mdev);
#line 4200
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4201
  return (0);
}
}
#line 4206 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4208
  p = (struct p_req_state_reply *)h;
#line 4210
  tmp = __fswab32(p->retcode);
#line 4210
  retcode = (int )tmp;
#line 4212
  if (retcode > 0) {
#line 4213
    set_bit(9U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4215
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
#line 4216
    tmp___0 = drbd_set_st_err_str((enum drbd_state_rv )retcode);
#line 4216
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4219
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4221
  return (1);
}
}
#line 4224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4226
  tmp = drbd_send_ping_ack(mdev);
#line 4226
  return (tmp);
}
}
#line 4230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4233
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4234
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4234
  if (tmp == 0) {
#line 4235
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4237
  return (1);
}
}
#line 4240 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4242
  p = (struct p_block_ack *)h;
#line 4243
  tmp = __fswab64(p->sector);
#line 4243
  sector = (sector_t )tmp;
#line 4244
  tmp___0 = __fswab32(p->blksize);
#line 4244
  blksize = (int )tmp___0;
#line 4246
  if (mdev->agreed_pro_version <= 88) {
#line 4246
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4246);
  } else {

  }
#line 4248
  tmp___1 = __fswab32(p->seq_num);
#line 4248
  update_peer_seq(mdev, tmp___1);
#line 4250
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4250
  if (tmp___2 != 0) {
#line 4251
    drbd_rs_complete_io(mdev, sector);
#line 4252
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4252U);
#line 4254
    mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4255
    put_ldev(mdev);
  } else {

  }
#line 4257
  atomic_dec(& mdev->rs_pending_cnt);
#line 4257
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4257
  if (tmp___4 < 0) {
#line 4257
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4257
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4257, tmp___3);
  } else {

  }
#line 4258
  atomic_add(blksize >> 9, & mdev->rs_sect_in);
#line 4260
  return (1);
}
}
#line 4265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4268
  tmp = tl_hash_slot(mdev, sector);
#line 4268
  slot = tmp;
#line 4272
  n = slot->first;
#line 4272
  goto ldv_49364;
  ldv_49363: ;
#line 4273
  if ((unsigned long )req == (unsigned long )id) {
#line 4274
    if (req->sector != sector) {
#line 4275
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4279
      goto ldv_49362;
    } else {

    }
#line 4281
    return (req);
  } else {

  }
#line 4272
  n = n->next;
  ldv_49364: ;
#line 4272
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4272
    __builtin_prefetch((void const   *)n->next);
#line 4272
    if (1 != 0) {
#line 4272
      __mptr = (struct hlist_node  const  *)n;
#line 4272
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4272
      if (1 != 0) {
#line 4273
        goto ldv_49363;
      } else {
#line 4275
        goto ldv_49362;
      }
    } else {
#line 4275
      goto ldv_49362;
    }
  } else {

  }
  ldv_49362: ;
#line 4284
  return (0);
}
}
#line 4290 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4297
  spin_lock_irq(& mdev->req_lock);
#line 4298
  req = (*validator)(mdev, id, sector);
#line 4299
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4299
  if (tmp != 0L) {
#line 4300
    spin_unlock_irq(& mdev->req_lock);
#line 4302
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
            func, (void *)id, (unsigned long long )sector);
#line 4304
    return (0);
  } else {

  }
#line 4306
  __req_mod(req, what, & m);
#line 4307
  spin_unlock_irq(& mdev->req_lock);
#line 4309
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4310
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4311
  return (1);
}
}
#line 4314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4316
  p = (struct p_block_ack *)h;
#line 4317
  tmp = __fswab64(p->sector);
#line 4317
  sector = (sector_t )tmp;
#line 4318
  tmp___0 = __fswab32(p->blksize);
#line 4318
  blksize = (int )tmp___0;
#line 4321
  tmp___1 = __fswab32(p->seq_num);
#line 4321
  update_peer_seq(mdev, tmp___1);
#line 4323
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4324
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4324U);
#line 4325
    atomic_dec(& mdev->rs_pending_cnt);
#line 4325
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4325
    if (tmp___3 < 0) {
#line 4325
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4325
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4325, tmp___2);
    } else {

    }
#line 4326
    return (1);
  } else {

  }
#line 4328
  tmp___4 = __fswab16((int )h->command);
#line 4328
  switch ((int )tmp___4) {
  case 23: ;
#line 4330
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4330
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4330);
  } else {

  }
#line 4331
  what = write_acked_by_peer_and_sis;
#line 4332
  goto ldv_49392;
  case 22: ;
#line 4334
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4334
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4334);
  } else {

  }
#line 4335
  what = write_acked_by_peer;
#line 4336
  goto ldv_49392;
  case 21: ;
#line 4338
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4338
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4338);
  } else {

  }
#line 4339
  what = recv_acked_by_peer;
#line 4340
  goto ldv_49392;
  case 24: ;
#line 4342
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4342
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4342);
  } else {

  }
#line 4343
  what = conflict_discarded_by_peer;
#line 4344
  goto ldv_49392;
  default: 
#line 4346
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
          4346);
#line 4347
  return (0);
  }
  ldv_49392: 
#line 4350
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4350
  return (tmp___5);
}
}
#line 4354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int size ;
  __u32 tmp___0 ;
  struct drbd_request *req ;
  struct bio_and_error m ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 4356
  p = (struct p_block_ack *)h;
#line 4357
  tmp = __fswab64(p->sector);
#line 4357
  sector = (sector_t )tmp;
#line 4358
  tmp___0 = __fswab32(p->blksize);
#line 4358
  size = (int )tmp___0;
#line 4362
  tmp___1 = __fswab32(p->seq_num);
#line 4362
  update_peer_seq(mdev, tmp___1);
#line 4364
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4365
    atomic_dec(& mdev->rs_pending_cnt);
#line 4365
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4365
    if (tmp___3 < 0) {
#line 4365
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4365
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4365, tmp___2);
    } else {

    }
#line 4366
    drbd_rs_failed_io(mdev, sector, size);
#line 4367
    return (1);
  } else {

  }
#line 4370
  spin_lock_irq(& mdev->req_lock);
#line 4371
  req = _ack_id_to_req(mdev, p->block_id, sector);
#line 4372
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 4373
    spin_unlock_irq(& mdev->req_lock);
#line 4374
    if ((mdev->net_conf)->wire_protocol == 1 || (mdev->net_conf)->wire_protocol == 2) {
#line 4382
      __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             4382U);
#line 4383
      return (1);
    } else {
#line 4385
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
              "got_NegAck", (void *)p->block_id, (unsigned long long )sector);
#line 4387
      return (0);
    }
  } else {

  }
#line 4390
  __req_mod(req, neg_acked, & m);
#line 4391
  spin_unlock_irq(& mdev->req_lock);
#line 4393
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4394
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4395
  return (1);
}
}
#line 4398 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4400
  p = (struct p_block_ack *)h;
#line 4401
  tmp = __fswab64(p->sector);
#line 4401
  sector = (sector_t )tmp;
#line 4403
  tmp___0 = __fswab32(p->seq_num);
#line 4403
  update_peer_seq(mdev, tmp___0);
#line 4404
  tmp___1 = __fswab32(p->blksize);
#line 4404
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4407
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4407
  return (tmp___2);
}
}
#line 4411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4415
  p = (struct p_block_ack *)h;
#line 4417
  tmp = __fswab64(p->sector);
#line 4417
  sector = (sector_t )tmp;
#line 4418
  tmp___0 = __fswab32(p->blksize);
#line 4418
  size = (int )tmp___0;
#line 4420
  tmp___1 = __fswab32(p->seq_num);
#line 4420
  update_peer_seq(mdev, tmp___1);
#line 4422
  atomic_dec(& mdev->rs_pending_cnt);
#line 4422
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4422
  if (tmp___3 < 0) {
#line 4422
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4422
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4422, tmp___2);
  } else {

  }
#line 4424
  tmp___5 = _get_ldev_if_state(mdev, D_FAILED);
#line 4424
  if (tmp___5 != 0) {
#line 4425
    drbd_rs_complete_io(mdev, sector);
#line 4426
    tmp___4 = __fswab16((int )h->command);
#line 4426
    switch ((int )tmp___4) {
    case 27: 
#line 4428
    drbd_rs_failed_io(mdev, sector, size);
    case 41: ;
#line 4430
    goto ldv_49430;
    default: 
#line 4432
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4432);
#line 4433
    put_ldev(mdev);
#line 4434
    return (0);
    }
    ldv_49430: 
#line 4436
    put_ldev(mdev);
  } else {

  }
#line 4439
  return (1);
}
}
#line 4442 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4444
  p = (struct p_barrier_ack *)h;
#line 4446
  tmp = __fswab32(p->set_size);
#line 4446
  tl_release(mdev, p->barrier, tmp);
#line 4448
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 4448
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 4448
    if (tmp___0 == 0) {
#line 4448
      tmp___1 = test_and_set_bit(29, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 4448
      if (tmp___1 == 0) {
#line 4451
        mdev->start_resync_timer.expires = (unsigned long )jiffies + 250UL;
#line 4452
        add_timer(& mdev->start_resync_timer);
      } else {

      }
    } else {

    }
  } else {

  }
#line 4455
  return (1);
}
}
#line 4458 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;

  {
#line 4460
  p = (struct p_block_ack *)h;
#line 4465
  tmp = __fswab64(p->sector);
#line 4465
  sector = (sector_t )tmp;
#line 4466
  tmp___0 = __fswab32(p->blksize);
#line 4466
  size = (int )tmp___0;
#line 4468
  tmp___1 = __fswab32(p->seq_num);
#line 4468
  update_peer_seq(mdev, tmp___1);
#line 4470
  tmp___2 = __fswab64(p->block_id);
#line 4470
  if (tmp___2 == 4712ULL) {
#line 4471
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4473
    ov_oos_print(mdev);
  }
#line 4475
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4475
  if (tmp___3 == 0) {
#line 4476
    return (1);
  } else {

  }
#line 4478
  drbd_rs_complete_io(mdev, sector);
#line 4479
  atomic_dec(& mdev->rs_pending_cnt);
#line 4479
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4479
  if (tmp___5 < 0) {
#line 4479
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4479
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4479, tmp___4);
  } else {

  }
#line 4481
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4484
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 4485
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 4487
  if (mdev->ov_left == 0UL) {
#line 4488
    tmp___6 = kmalloc(24UL, 16U);
#line 4488
    w = (struct drbd_work *)tmp___6;
#line 4489
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4490
      w->cb = & w_ov_finished;
#line 4491
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4493
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4494
      ov_oos_print(mdev);
#line 4495
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4498
  put_ldev(mdev);
#line 4499
  return (1);
}
}
#line 4502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_skip(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 


  {
#line 4504
  return (1);
}
}
#line 4512 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[43U] ;

  {
#line 4514
  asender_tbl[0].pkt_size = 0UL;
#line 4514
  asender_tbl[0].process = 0;
#line 4514
  asender_tbl[1].pkt_size = 0UL;
#line 4514
  asender_tbl[1].process = 0;
#line 4514
  asender_tbl[2].pkt_size = 0UL;
#line 4514
  asender_tbl[2].process = 0;
#line 4514
  asender_tbl[3].pkt_size = 0UL;
#line 4514
  asender_tbl[3].process = 0;
#line 4514
  asender_tbl[4].pkt_size = 0UL;
#line 4514
  asender_tbl[4].process = 0;
#line 4514
  asender_tbl[5].pkt_size = 0UL;
#line 4514
  asender_tbl[5].process = 0;
#line 4514
  asender_tbl[6].pkt_size = 0UL;
#line 4514
  asender_tbl[6].process = 0;
#line 4514
  asender_tbl[7].pkt_size = 0UL;
#line 4514
  asender_tbl[7].process = 0;
#line 4514
  asender_tbl[8].pkt_size = 0UL;
#line 4514
  asender_tbl[8].process = 0;
#line 4514
  asender_tbl[9].pkt_size = 0UL;
#line 4514
  asender_tbl[9].process = 0;
#line 4514
  asender_tbl[10].pkt_size = 0UL;
#line 4514
  asender_tbl[10].process = 0;
#line 4514
  asender_tbl[11].pkt_size = 0UL;
#line 4514
  asender_tbl[11].process = 0;
#line 4514
  asender_tbl[12].pkt_size = 0UL;
#line 4514
  asender_tbl[12].process = 0;
#line 4514
  asender_tbl[13].pkt_size = 0UL;
#line 4514
  asender_tbl[13].process = 0;
#line 4514
  asender_tbl[14].pkt_size = 0UL;
#line 4514
  asender_tbl[14].process = 0;
#line 4514
  asender_tbl[15].pkt_size = 0UL;
#line 4514
  asender_tbl[15].process = 0;
#line 4514
  asender_tbl[16].pkt_size = 0UL;
#line 4514
  asender_tbl[16].process = 0;
#line 4514
  asender_tbl[17].pkt_size = 0UL;
#line 4514
  asender_tbl[17].process = 0;
#line 4514
  asender_tbl[18].pkt_size = 0UL;
#line 4514
  asender_tbl[18].process = 0;
#line 4514
  asender_tbl[19].pkt_size = 8UL;
#line 4514
  asender_tbl[19].process = & got_Ping;
#line 4514
  asender_tbl[20].pkt_size = 8UL;
#line 4514
  asender_tbl[20].process = & got_PingAck;
#line 4514
  asender_tbl[21].pkt_size = 32UL;
#line 4514
  asender_tbl[21].process = & got_BlockAck;
#line 4514
  asender_tbl[22].pkt_size = 32UL;
#line 4514
  asender_tbl[22].process = & got_BlockAck;
#line 4514
  asender_tbl[23].pkt_size = 32UL;
#line 4514
  asender_tbl[23].process = & got_BlockAck;
#line 4514
  asender_tbl[24].pkt_size = 32UL;
#line 4514
  asender_tbl[24].process = & got_BlockAck;
#line 4514
  asender_tbl[25].pkt_size = 32UL;
#line 4514
  asender_tbl[25].process = & got_NegAck;
#line 4514
  asender_tbl[26].pkt_size = 32UL;
#line 4514
  asender_tbl[26].process = & got_NegDReply;
#line 4514
  asender_tbl[27].pkt_size = 32UL;
#line 4514
  asender_tbl[27].process = & got_NegRSDReply;
#line 4514
  asender_tbl[28].pkt_size = 16UL;
#line 4514
  asender_tbl[28].process = & got_BarrierAck;
#line 4514
  asender_tbl[29].pkt_size = 12UL;
#line 4514
  asender_tbl[29].process = & got_RqSReply;
#line 4514
  asender_tbl[30].pkt_size = 0UL;
#line 4514
  asender_tbl[30].process = 0;
#line 4514
  asender_tbl[31].pkt_size = 0UL;
#line 4514
  asender_tbl[31].process = 0;
#line 4514
  asender_tbl[32].pkt_size = 32UL;
#line 4514
  asender_tbl[32].process = & got_OVResult;
#line 4514
  asender_tbl[33].pkt_size = 0UL;
#line 4514
  asender_tbl[33].process = 0;
#line 4514
  asender_tbl[34].pkt_size = 32UL;
#line 4514
  asender_tbl[34].process = & got_IsInSync;
#line 4514
  asender_tbl[35].pkt_size = 0UL;
#line 4514
  asender_tbl[35].process = 0;
#line 4514
  asender_tbl[36].pkt_size = 0UL;
#line 4514
  asender_tbl[36].process = 0;
#line 4514
  asender_tbl[37].pkt_size = 0UL;
#line 4514
  asender_tbl[37].process = 0;
#line 4514
  asender_tbl[38].pkt_size = 0UL;
#line 4514
  asender_tbl[38].process = 0;
#line 4514
  asender_tbl[39].pkt_size = 16UL;
#line 4514
  asender_tbl[39].process = & got_skip;
#line 4514
  asender_tbl[40].pkt_size = 0UL;
#line 4514
  asender_tbl[40].process = 0;
#line 4514
  asender_tbl[41].pkt_size = 32UL;
#line 4514
  asender_tbl[41].process = & got_NegRSDReply;
#line 4514
  asender_tbl[42].pkt_size = 0UL;
#line 4514
  asender_tbl[42].process = 0;
#line 4535
  if (cmd > 42 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header80 * ))0)) {
#line 4536
    return (0);
  } else {

  }
#line 4537
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4540 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header80 *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  int ping_timeout_active ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u16 tmp___12 ;
  __u16 tmp___13 ;
  __u32 tmp___14 ;
  long tmp___15 ;
  __u16 tmp___16 ;
  __u16 tmp___17 ;
  __u16 tmp___18 ;
  __u16 tmp___19 ;
  __u32 tmp___20 ;
  long tmp___21 ;
  int _b___0 ;
  int tmp___22 ;
  struct asender_cmd *tmp___23 ;
  enum drbd_thread_state tmp___24 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4542
  mdev = thi->mdev;
#line 4543
  h = & mdev->meta.rbuf.header.h80;
#line 4544
  cmd = 0;
#line 4547
  buf = (void *)h;
#line 4548
  received = 0;
#line 4549
  expect = 8;
#line 4551
  ping_timeout_active = 0;
#line 4553
  tmp = mdev_to_minor(mdev);
#line 4553
  tmp___0 = get_current();
#line 4553
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4555
  tmp___1 = get_current();
#line 4555
  tmp___1->policy = 2U;
#line 4556
  tmp___2 = get_current();
#line 4556
  tmp___2->rt_priority = 2U;
#line 4558
  goto ldv_49481;
  ldv_49485: 
#line 4559
  drbd_thread_current_set_cpu(mdev);
#line 4560
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4560
  if (tmp___4 != 0) {
#line 4561
    tmp___3 = drbd_send_ping(mdev);
#line 4561
    _b = tmp___3 == 0;
#line 4561
    if (_b != 0) {
#line 4561
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4561);
    } else {

    }
#line 4561
    if (_b != 0) {
#line 4561
      goto reconnect;
    } else {

    }
#line 4562
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
#line 4564
    ping_timeout_active = 1;
  } else {

  }
#line 4569
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4569
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4569
    if (tmp___5 > 3) {
#line 4571
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_49480: 
#line 4573
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4574
  tmp___6 = get_current();
#line 4574
  flush_signals(tmp___6);
#line 4575
  tmp___7 = drbd_process_done_ee(mdev);
#line 4575
  if (tmp___7 == 0) {
#line 4576
    goto reconnect;
  } else {

  }
#line 4578
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4579
  spin_lock_irq(& mdev->req_lock);
#line 4580
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4581
  spin_unlock_irq(& mdev->req_lock);
#line 4585
  if (empty != 0) {
#line 4586
    goto ldv_49479;
  } else {

  }
#line 4587
  goto ldv_49480;
  ldv_49479: ;
#line 4589
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4590
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4593
  tmp___8 = get_current();
#line 4593
  tmp___9 = signal_pending(tmp___8);
#line 4593
  if (tmp___9 != 0) {
#line 4594
    goto ldv_49481;
  } else {

  }
#line 4596
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4598
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4600
  tmp___10 = get_current();
#line 4600
  flush_signals(tmp___10);
#line 4612
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4612
  if (tmp___11 != 0L) {
#line 4613
    received = received + rv;
#line 4614
    buf = buf + (unsigned long )rv;
  } else
#line 4615
  if (rv == 0) {
#line 4616
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4617
    goto reconnect;
  } else
#line 4618
  if (rv == -11) {
#line 4619
    if (ping_timeout_active != 0) {
#line 4620
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4621
      goto reconnect;
    } else {

    }
#line 4623
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4624
    goto ldv_49481;
  } else
#line 4625
  if (rv == -4) {
#line 4626
    goto ldv_49481;
  } else {
#line 4628
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4629
    goto reconnect;
  }
#line 4632
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4633
    tmp___15 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4633
    if (tmp___15 != 0L) {
#line 4634
      tmp___12 = __fswab16((int )h->length);
#line 4634
      tmp___13 = __fswab16((int )h->command);
#line 4634
      tmp___14 = __fswab32(h->magic);
#line 4634
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___14, (int )tmp___13, (int )tmp___12);
#line 4638
      goto reconnect;
    } else {

    }
#line 4640
    tmp___16 = __fswab16((int )h->command);
#line 4640
    cmd = get_asender_cmd((int )tmp___16);
#line 4641
    tmp___17 = __fswab16((int )h->length);
#line 4641
    len = (int )tmp___17;
#line 4642
    tmp___21 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4642
    if (tmp___21 != 0L) {
#line 4643
      tmp___18 = __fswab16((int )h->length);
#line 4643
      tmp___19 = __fswab16((int )h->command);
#line 4643
      tmp___20 = __fswab32(h->magic);
#line 4643
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___20, (int )tmp___19, (int )tmp___18);
#line 4647
      goto disconnect;
    } else {

    }
#line 4649
    expect = (int )cmd->pkt_size;
#line 4650
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4650
    if (_b___0 != 0) {
#line 4650
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header80)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4650);
    } else {

    }
#line 4650
    if (_b___0 != 0) {
#line 4651
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4653
  if (received == expect) {
#line 4654
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4654
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4654);
    } else {

    }
#line 4655
    tmp___22 = (*(cmd->process))(mdev, h);
#line 4655
    if (tmp___22 == 0) {
#line 4656
      goto reconnect;
    } else {

    }
#line 4660
    tmp___23 = get_asender_cmd(20);
#line 4660
    if ((unsigned long )tmp___23 == (unsigned long )cmd) {
#line 4661
      ping_timeout_active = 0;
    } else {

    }
#line 4663
    buf = (void *)h;
#line 4664
    received = 0;
#line 4665
    expect = 8;
#line 4666
    cmd = 0;
  } else {

  }
  ldv_49481: 
#line 4558
  tmp___24 = get_t_state(thi);
#line 4558
  if ((unsigned int )tmp___24 == 1U) {
#line 4559
    goto ldv_49485;
  } else {

  }

#line 4670
  if (0) {
    reconnect: 
#line 4672
    val.i = 0U;
#line 4672
    val.ldv_37520.conn = 5U;
#line 4672
    mask.i = 0U;
#line 4672
    mask.ldv_37520.conn = 31U;
#line 4672
    drbd_force_state(mdev, mask, val);
#line 4673
    drbd_md_sync(mdev);
  } else {

  }
#line 4675
  if (0) {
    disconnect: 
#line 4677
    val___0.i = 0U;
#line 4677
    val___0.ldv_37520.conn = 1U;
#line 4677
    mask___0.i = 0U;
#line 4677
    mask___0.ldv_37520.conn = 31U;
#line 4677
    drbd_force_state(mdev, mask___0, val___0);
#line 4678
    drbd_md_sync(mdev);
  } else {

  }
#line 4680
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4682
  if ((int )mdev->state.ldv_37520.conn > 9) {
#line 4682
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4682);
  } else {

  }
#line 4683
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4685
  return (0);
}
}
#line 4725 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4737
  LDV_IN_INTERRUPT = 1;
#line 4746
  ldv_initialize();
#line 4748
  goto ldv_49514;
  ldv_49513: 
#line 4751
  tmp = nondet_int();
#line 4751
  switch (tmp) {
  default: ;
#line 4753
  goto ldv_49512;
  }
  ldv_49512: ;
  ldv_49514: 
#line 4748
  tmp___0 = nondet_int();
#line 4748
  if (tmp___0 != 0) {
#line 4749
    goto ldv_49513;
  } else {

  }


#line 4762
  ldv_check_final_state();
#line 4765
  return;
}
}
#line 599 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 601
  __hlist_del(n);
#line 602
  n->next = 0xdead000000100100UL;
#line 603
  n->pprev = 0xdead000000200200UL;
#line 604
  return;
}
}
#line 315 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 319
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 99 "include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void) 
{ 


  {
#line 101
  return;
}
}
#line 173
extern struct lockdep_map rcu_lock_map ;
#line 579 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 581
  __rcu_read_lock();
#line 583
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 585
  return;
}
}
#line 601 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 603
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 605
  __rcu_read_lock();
#line 606
  return;
}
}
#line 195 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 197
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 197
  if (tmp != 0L) {
#line 198
    if (part->partno != 0) {
#line 199
      __mptr = (struct device  const  *)part->__dev.parent;
#line 199
      return ((struct gendisk *)__mptr + 0xffffffffffffff98UL);
    } else {
#line 201
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 201
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffff98UL);
    }
  } else {

  }
#line 203
  return (0);
}
}
#line 372 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 374
  atomic_inc((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 375
  if (part->partno != 0) {
#line 376
    tmp = part_to_disk(part);
#line 376
    atomic_inc((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 377
  return;
}
}
#line 379 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 381
  atomic_dec((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 382
  if (part->partno != 0) {
#line 383
    tmp = part_to_disk(part);
#line 383
    atomic_dec((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 384
  return;
}
}
#line 405
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 208 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 209
extern void bio_pair_release(struct bio_pair * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1224
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1495
mempool_t *drbd_request_mempool ;
#line 1511
int drbd_make_request(struct request_queue *q , struct bio *bio ) ;
#line 1513
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 2067 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2069
  atomic_inc(& mdev->ap_pending_cnt);
#line 2070
  return;
}
}
#line 2243 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2245
  mxb = 1000000;
#line 2246
  tmp = get_net_conf(mdev);
#line 2246
  if (tmp != 0) {
#line 2247
    mxb = (mdev->net_conf)->max_buffers;
#line 2248
    put_net_conf(mdev);
  } else {

  }
#line 2250
  return (mxb);
}
}
#line 2253 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2255
  s = mdev->state;
#line 2260
  switch ((unsigned int )s.ldv_37520.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2285
  goto ldv_46909;
  case 13U: ;
#line 2289
  if (mdev->agreed_pro_version <= 95) {
#line 2290
    return (0);
  } else {

  }
#line 2291
  goto ldv_46909;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2298
  return (0);
  }
  ldv_46909: ;
#line 2301
  switch ((unsigned int )s.ldv_37520.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2308
  goto ldv_46919;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2317
  return (0);
  }
  ldv_46919: ;
#line 2320
  return (1);
}
}
#line 2328 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2330
  tmp = drbd_get_max_buffers(mdev);
#line 2330
  mxb = tmp;
#line 2332
  tmp___0 = is_susp(mdev->state);
#line 2332
  if (tmp___0 != 0) {
#line 2333
    return (0);
  } else {

  }
#line 2334
  tmp___1 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2334
  if (tmp___1 != 0) {
#line 2335
    return (0);
  } else {

  }
#line 2342
  tmp___2 = drbd_state_is_stable(mdev);
#line 2342
  if (tmp___2 == 0) {
#line 2343
    return (0);
  } else {

  }
#line 2347
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2347
  if (tmp___3 > mxb) {
#line 2348
    return (0);
  } else {

  }
#line 2349
  tmp___4 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2349
  if (tmp___4 != 0) {
#line 2350
    return (0);
  } else {

  }
#line 2351
  return (1);
}
}
#line 2354 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool inc_ap_bio_cond(struct drbd_conf *mdev , int count ) 
{ 
  bool rv ;

  {
#line 2356
  rv = 0;
#line 2358
  spin_lock_irq(& mdev->req_lock);
#line 2359
  rv = may_inc_ap_bio(mdev);
#line 2360
  if ((int )rv) {
#line 2361
    atomic_add(count, & mdev->ap_bio_cnt);
  } else {

  }
#line 2362
  spin_unlock_irq(& mdev->req_lock);
#line 2364
  return (rv);
}
}
#line 2367 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  bool tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  bool tmp___1 ;

  {
#line 2377
  tmp = inc_ap_bio_cond(mdev, count);
#line 2377
  if ((int )tmp) {
#line 2377
    goto ldv_46941;
  } else {

  }
#line 2377
  tmp___0 = get_current();
#line 2377
  __wait.flags = 0U;
#line 2377
  __wait.private = (void *)tmp___0;
#line 2377
  __wait.func = & autoremove_wake_function;
#line 2377
  __wait.task_list.next = & __wait.task_list;
#line 2377
  __wait.task_list.prev = & __wait.task_list;
  ldv_46944: 
#line 2377
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2377
  tmp___1 = inc_ap_bio_cond(mdev, count);
#line 2377
  if ((int )tmp___1) {
#line 2377
    goto ldv_46943;
  } else {

  }
#line 2377
  schedule();
#line 2377
  goto ldv_46944;
  ldv_46943: 
#line 2377
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46941: ;
#line 2380
  return;
}
}
#line 2380 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2382
  tmp = drbd_get_max_buffers(mdev);
#line 2382
  mxb = tmp;
#line 2383
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2383
  ap_bio = tmp___0;
#line 2385
  if (ap_bio < 0) {
#line 2385
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2385);
  } else {

  }
#line 2389
  if (ap_bio < mxb) {
#line 2390
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2391
  if (ap_bio == 0) {
#line 2391
    tmp___2 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2391
    if (tmp___2 != 0) {
#line 2392
      tmp___1 = test_and_set_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 2392
      if (tmp___1 == 0) {
#line 2393
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2394
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 229
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 229
  if (tmp != 0L) {
#line 229
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (229), "i" (12UL));
    ldv_47048: ;
#line 229
    goto ldv_47048;
  } else {

  }
#line 230
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 236 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 238
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 238
  if (tmp != 0L) {
#line 238
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (238), "i" (12UL));
    ldv_47053: ;
#line 238
    goto ldv_47053;
  } else {

  }
#line 239
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 244 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 246
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 283
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 283
  req = (struct drbd_request *)tmp;
#line 285
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 285
  if (tmp___0 != 0L) {
#line 286
    drbd_req_make_private_bio(req, bio_src);
#line 288
    req->rq_state = (int )bio_src->bi_rw & 1 ? 1024UL : 0UL;
#line 289
    req->mdev = mdev;
#line 290
    req->master_bio = bio_src;
#line 291
    req->epoch = 0U;
#line 292
    req->sector = bio_src->bi_sector;
#line 293
    req->size = bio_src->bi_size;
#line 294
    INIT_HLIST_NODE(& req->colision);
#line 295
    INIT_LIST_HEAD(& req->tl_requests);
#line 296
    INIT_LIST_HEAD(& req->w.list);
  } else {

  }
#line 298
  return (req);
}
}
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 303
  mempool_free((void *)req, drbd_request_mempool);
#line 304
  return;
}
}
#line 319
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 325
void request_timer_fn(unsigned long data ) ;
#line 365 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_do_remote(union drbd_state s ) 
{ 


  {
#line 367
  return ((bool )(*((unsigned int *)(& s) + 0UL) == 65536U || (((int )s.ldv_37520.pdsk > 3 && (int )s.ldv_37520.conn > 13) && (int )s.ldv_37520.conn <= 21)));
}
}
#line 375 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_send_oos(union drbd_state s ) 
{ 


  {
#line 377
  return ((bool )((unsigned int )*((unsigned short *)(& s) + 0UL) == 352U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 208U));
}
}
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 44
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 46
  rcu_read_lock();
#line 46
  switch (4UL) {
  case 1UL: 
#line 46
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_47140;
  case 2UL: 
#line 46
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_47140;
  case 4UL: 
#line 46
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_47140;
  case 8UL: 
#line 46
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_47140;
  default: 
#line 46
  __bad_percpu_size();
  }
  ldv_47140: 
#line 46
  cpu = pfo_ret__;
#line 47
  __vpp_verify = 0;
#line 47
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 47
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 47
  if ((mdev->vdisk)->part0.partno != 0) {
#line 47
    __vpp_verify___0 = 0;
#line 47
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 47
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 47
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 48
  __vpp_verify___1 = 0;
#line 48
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 48
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 48
  if ((mdev->vdisk)->part0.partno != 0) {
#line 48
    __vpp_verify___2 = 0;
#line 48
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 48
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 48
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 49
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 50
  rcu_read_unlock();
#line 51
  return;
}
}
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 56
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 57
  duration = (unsigned long )jiffies - req->start_time;
#line 59
  rcu_read_lock();
#line 59
  switch (4UL) {
  case 1UL: 
#line 59
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_47173;
  case 2UL: 
#line 59
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_47173;
  case 4UL: 
#line 59
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_47173;
  case 8UL: 
#line 59
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_47173;
  default: 
#line 59
  __bad_percpu_size();
  }
  ldv_47173: 
#line 59
  cpu = pfo_ret__;
#line 60
  __vpp_verify = 0;
#line 60
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 60
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 60
  if ((mdev->vdisk)->part0.partno != 0) {
#line 60
    __vpp_verify___0 = 0;
#line 60
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 60
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 60
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 61
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 62
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 63
  rcu_read_unlock();
#line 64
  return;
}
}
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 68
  s = req->rq_state;
#line 76
  list_del(& req->tl_requests);
#line 81
  if ((int )rw == 1) {
#line 86
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 87
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                             87U);
    } else {

    }
#line 89
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 90
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         90U);
    } else {

    }
#line 102
    if ((s & 7UL) != 0UL) {
#line 103
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 103
      if (tmp___0 != 0) {
#line 104
        if ((s & 2048UL) != 0UL) {
#line 105
          drbd_al_complete_io(mdev, req->sector);
        } else {

        }
#line 106
        put_ldev(mdev);
      } else {
#line 107
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 107
        if (tmp != 0) {
#line 108
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 115
  drbd_req_free(req);
#line 116
  return;
}
}
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 127
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 127
  if (tmp != 0) {
#line 128
    return;
  } else {

  }
#line 130
  b = mdev->newest_tle;
#line 131
  b->w.cb = & w_send_barrier;
#line 136
  inc_ap_pending(mdev);
#line 137
  drbd_queue_work(& mdev->data.work, & b->w);
#line 138
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 139
  return;
}
}
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 144
  s = req->rq_state;
#line 156
  if (((int )mdev->state.ldv_37520.conn > 9 && (s & 32UL) != 0UL) && req->epoch == (mdev->newest_tle)->br_number) {
#line 159
    queue_barrier(mdev);
  } else {

  }
#line 164
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 165
    sector = req->sector;
#line 166
    size = (int const   )req->size;
#line 172
    slot = tl_hash_slot___0(mdev, sector);
#line 173
    n = slot->first;
#line 173
    goto ldv_47216;
    ldv_47215: 
#line 174
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 174
    if (tmp != 0) {
#line 175
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 173
    n = n->next;
    ldv_47216: ;
#line 173
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 173
      __builtin_prefetch((void const   *)n->next);
#line 173
      if (1 != 0) {
#line 173
        __mptr = (struct hlist_node  const  *)n;
#line 173
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 173
        if (1 != 0) {
#line 174
          goto ldv_47215;
        } else {
#line 176
          goto ldv_47217;
        }
      } else {
#line 176
        goto ldv_47217;
      }
    } else {

    }
    ldv_47217: 
#line 196
    slot = ee_hash_slot___0(mdev, req->sector);
#line 197
    n = slot->first;
#line 197
    goto ldv_47224;
    ldv_47223: 
#line 198
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 198
    if (tmp___0 != 0) {
#line 199
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 200
      goto ldv_47222;
    } else {

    }
#line 197
    n = n->next;
    ldv_47224: ;
#line 197
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 197
      __builtin_prefetch((void const   *)n->next);
#line 197
      if (1 != 0) {
#line 197
        __mptr___0 = (struct hlist_node  const  *)n;
#line 197
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 197
        if (1 != 0) {
#line 198
          goto ldv_47223;
        } else {
#line 200
          goto ldv_47222;
        }
      } else {
#line 200
        goto ldv_47222;
      }
    } else {

    }
    ldv_47222: ;
  } else {

  }
#line 203
  return;
}
}
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 210
  bio_endio(m->bio, m->error);
#line 211
  dec_ap_bio(mdev);
#line 212
  return;
}
}
#line 220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 222
  s = req->rq_state;
#line 223
  mdev = req->mdev;
#line 225
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 236
  if ((s & 16UL) != 0UL) {
#line 237
    return;
  } else {

  }
#line 238
  if ((s & 8UL) != 0UL) {
#line 239
    return;
  } else {

  }
#line 240
  if ((int )s & 1) {
#line 241
    return;
  } else {

  }
#line 243
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 265
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 266
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 266
    error = (int )tmp;
#line 270
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 270
    if (tmp___0 == 0) {
#line 271
      hlist_del(& req->colision);
    } else
#line 273
    if ((s & 440UL) != 0UL) {
#line 273
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & (RQ_NET_MASK & ~RQ_NET_DONE)) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              273);
    } else {

    }
#line 276
    if (rw == 1) {
#line 277
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 280
    _drbd_end_io_acct(mdev, req);
#line 282
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 283
    m->bio = req->master_bio;
#line 284
    req->master_bio = 0;
  } else {

  }
#line 287
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 292
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 293
  return;
}
}
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_may_be_done_not_susp(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 300
  mdev = req->mdev;
#line 302
  tmp = is_susp(mdev->state);
#line 302
  if (tmp == 0) {
#line 303
    _req_may_be_done(req, m);
  } else {

  }
#line 304
  return;
}
}
#line 329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 331
  mdev = req->mdev;
#line 332
  sector = req->sector;
#line 333
  size = (int const   )req->size;
#line 339
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 339
  if (tmp == 0) {
#line 339
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            339);
  } else {

  }
#line 341
  tmp___0 = get_net_conf(mdev);
#line 341
  if (tmp___0 == 0) {
#line 342
    return (0);
  } else {

  }
#line 345
  _b = mdev->tl_hash_s == 0U;
#line 345
  if (_b != 0) {
#line 345
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            345);
  } else {

  }
#line 345
  if (_b != 0) {
#line 346
    goto out_no_conflict;
  } else {

  }
#line 347
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 347
  if (tmp___1 != 0L) {
#line 347
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (347), "i" (12UL));
    ldv_47257: ;
#line 347
    goto ldv_47257;
  } else {

  }
#line 350
  slot = tl_hash_slot___0(mdev, sector);
#line 351
  n = slot->first;
#line 351
  goto ldv_47264;
  ldv_47263: 
#line 352
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 352
  if (tmp___4 != 0) {
#line 353
    tmp___2 = get_current();
#line 353
    tmp___3 = get_current();
#line 353
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 359
    goto out_conflict;
  } else {

  }
#line 351
  n = n->next;
  ldv_47264: ;
#line 351
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 351
    __builtin_prefetch((void const   *)n->next);
#line 351
    if (1 != 0) {
#line 351
      __mptr = (struct hlist_node  const  *)n;
#line 351
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 351
      if (1 != 0) {
#line 352
        goto ldv_47263;
      } else {
#line 354
        goto ldv_47265;
      }
    } else {
#line 354
      goto ldv_47265;
    }
  } else {

  }
  ldv_47265: ;
#line 363
  if (mdev->ee_hash_s != 0U) {
#line 365
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 365
    if (tmp___5 != 0L) {
#line 365
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (365), "i" (12UL));
      ldv_47266: ;
#line 365
      goto ldv_47266;
    } else {

    }
#line 368
    slot = ee_hash_slot___0(mdev, sector);
#line 369
    n = slot->first;
#line 369
    goto ldv_47272;
    ldv_47271: 
#line 370
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 370
    if (tmp___8 != 0) {
#line 371
      tmp___6 = get_current();
#line 371
      tmp___7 = get_current();
#line 371
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 377
      goto out_conflict;
    } else {

    }
#line 369
    n = n->next;
    ldv_47272: ;
#line 369
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 369
      __builtin_prefetch((void const   *)n->next);
#line 369
      if (1 != 0) {
#line 369
        __mptr___0 = (struct hlist_node  const  *)n;
#line 369
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 369
        if (1 != 0) {
#line 370
          goto ldv_47271;
        } else {
#line 372
          goto ldv_47273;
        }
      } else {
#line 372
        goto ldv_47273;
      }
    } else {

    }
    ldv_47273: ;
  } else {

  }
  out_no_conflict: 
#line 386
  put_net_conf(mdev);
#line 387
  return (0);
  out_conflict: 
#line 390
  put_net_conf(mdev);
#line 391
  return (1);
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int rv ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 409
  mdev = req->mdev;
#line 410
  rv = 0;
#line 411
  m->bio = 0;
#line 413
  switch ((unsigned int )what) {
  default: 
#line 415
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
          415);
#line 416
  goto ldv_47282;
  case 1U: ;
#line 427
  if ((req->rq_state & 504UL) != 0UL) {
#line 427
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            427);
  } else {

  }
#line 428
  req->rq_state = req->rq_state | 8UL;
#line 429
  inc_ap_pending(mdev);
#line 430
  goto ldv_47282;
  case 2U: ;
#line 434
  if ((req->rq_state & 7UL) != 0UL) {
#line 434
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            434);
  } else {

  }
#line 435
  req->rq_state = req->rq_state | 1UL;
#line 436
  goto ldv_47282;
  case 22U: ;
#line 439
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 440
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 442
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 444
  req->rq_state = req->rq_state | 6UL;
#line 445
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 447
  _req_may_be_done_not_susp(req, m);
#line 448
  put_ldev(mdev);
#line 449
  goto ldv_47282;
  case 21U: 
#line 452
  req->rq_state = req->rq_state | 2UL;
#line 453
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 455
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 456
  _req_may_be_done_not_susp(req, m);
#line 457
  put_ldev(mdev);
#line 458
  goto ldv_47282;
  case 20U: 
#line 462
  req->rq_state = req->rq_state | 2UL;
#line 463
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 464
  _req_may_be_done_not_susp(req, m);
#line 465
  put_ldev(mdev);
#line 466
  goto ldv_47282;
  case 19U: 
#line 469
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         469U);
#line 471
  req->rq_state = req->rq_state | 2UL;
#line 472
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 474
  if ((req->rq_state & 504UL) != 0UL) {
#line 474
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            474);
  } else {

  }
#line 476
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 477
  put_ldev(mdev);
#line 481
  if (*((unsigned int *)mdev + 569UL) != 65536U) {
#line 482
    _req_may_be_done_not_susp(req, m);
#line 483
    goto ldv_47282;
  } else {

  }
#line 487
  req->rq_state = req->rq_state | 8UL;
#line 488
  inc_ap_pending(mdev);
  case 4U: 
#line 501
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 501
  hlist_add_head(& req->colision, tmp);
#line 503
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 505
  if ((req->rq_state & 8UL) == 0UL) {
#line 505
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            505);
  } else {

  }
#line 506
  req->rq_state = req->rq_state | 16UL;
#line 507
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 510
  drbd_queue_work(& mdev->data.work, & req->w);
#line 511
  goto ldv_47282;
  case 3U: 
#line 517
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 517
  hlist_add_head(& req->colision, tmp___0);
#line 537
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 541
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 541
  if (tmp___1 != 0) {
#line 541
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            541);
  } else {

  }
#line 543
  req->epoch = (mdev->newest_tle)->br_number;
#line 546
  (mdev->newest_tle)->n_writes = (mdev->newest_tle)->n_writes + 1;
#line 549
  if ((req->rq_state & 8UL) == 0UL) {
#line 549
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            549);
  } else {

  }
#line 550
  req->rq_state = req->rq_state | 16UL;
#line 551
  req->w.cb = & w_send_dblock;
#line 552
  drbd_queue_work(& mdev->data.work, & req->w);
#line 555
  if ((mdev->newest_tle)->n_writes >= (mdev->net_conf)->max_epoch_size) {
#line 556
    queue_barrier(mdev);
  } else {

  }
#line 558
  goto ldv_47282;
  case 5U: 
#line 561
  req->rq_state = req->rq_state | 16UL;
#line 562
  req->w.cb = & w_send_oos;
#line 563
  drbd_queue_work(& mdev->data.work, & req->w);
#line 564
  goto ldv_47282;
  case 9U: ;
  case 6U: ;
  case 7U: 
#line 573
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 576
  _req_may_be_done_not_susp(req, m);
#line 577
  goto ldv_47282;
  case 8U: ;
#line 581
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 582
    atomic_add((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 584
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 588
    if ((req->rq_state & 8UL) != 0UL) {
#line 589
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 589
      if (tmp___2 != 0) {
#line 589
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 589
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 589
      if (tmp___4 < 0) {
#line 589
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 589
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 589, tmp___3);
      } else {

      }
#line 590
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 591
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 597
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 598
  req->rq_state = req->rq_state | 32UL;
#line 604
  _req_may_be_done_not_susp(req, m);
#line 605
  goto ldv_47282;
  case 11U: 
#line 608
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
  case 10U: ;
#line 613
  if ((req->rq_state & 8UL) != 0UL) {
#line 614
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 614
    if (tmp___5 != 0) {
#line 614
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 614
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 614
    if (tmp___7 < 0) {
#line 614
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 614
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 614, tmp___6);
    } else {

    }
  } else {

  }
#line 615
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 616
  req->rq_state = req->rq_state | 64UL;
#line 617
  if ((req->rq_state & 32UL) != 0UL && (req->rq_state & 1024UL) != 0UL) {
#line 618
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 622
  if ((req->rq_state & 16UL) == 0UL) {
#line 623
    _req_may_be_done(req, m);
  } else {

  }
#line 624
  goto ldv_47282;
  case 14U: 
#line 627
  req->rq_state = req->rq_state | 256UL;
  case 15U: ;
#line 632
  if ((unsigned int )what == 15U) {
#line 633
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 636
  req->rq_state = req->rq_state | 64UL;
  case 13U: ;
  case 12U: 
#line 654
  req->rq_state = req->rq_state | 128UL;
#line 655
  if ((req->rq_state & 8UL) == 0UL) {
#line 655
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            655);
  } else {

  }
#line 656
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 656
  if (tmp___8 != 0) {
#line 656
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 656
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 656
  if (tmp___10 < 0) {
#line 656
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 656
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 656, tmp___9);
  } else {

  }
#line 657
  atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
#line 658
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 659
  _req_may_be_done_not_susp(req, m);
#line 660
  goto ldv_47282;
  case 16U: ;
#line 664
  if ((req->rq_state & 8UL) != 0UL) {
#line 665
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 665
    if (tmp___11 != 0) {
#line 665
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 665
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 665
    if (tmp___13 < 0) {
#line 665
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 665
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 665, tmp___12);
    } else {

    }
#line 666
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 668
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 670
  req->rq_state = req->rq_state | 64UL;
#line 671
  _req_may_be_done_not_susp(req, m);
#line 673
  goto ldv_47282;
  case 24U: ;
#line 676
  if ((req->rq_state & 2UL) == 0UL) {
#line 677
    goto ldv_47282;
  } else {

  }
#line 679
  _req_may_be_done(req, m);
#line 680
  goto ldv_47282;
  case 25U: ;
#line 683
  if ((req->rq_state & 2UL) == 0UL) {
#line 684
    goto ldv_47282;
  } else {

  }
#line 686
  req->rq_state = req->rq_state & 0xfffffffffffffffdUL;
#line 688
  rv = 2;
#line 689
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 690
    rv = 1;
  } else {

  }
#line 692
  _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 693
  req->w.cb = & w_restart_disk_io;
#line 694
  drbd_queue_work(& mdev->data.work, & req->w);
#line 695
  goto ldv_47282;
  case 23U: ;
#line 702
  if ((req->rq_state & 128UL) == 0UL) {
#line 703
    if ((unsigned long )req->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 704
      drbd_queue_work(& mdev->data.work, & req->w);
#line 705
      rv = (req->rq_state & 1024UL) != 0UL ? 1 : 2;
    } else {

    }
#line 707
    goto ldv_47282;
  } else {

  }
  case 17U: ;
#line 712
  if ((req->rq_state & 1024UL) == 0UL) {
#line 713
    goto ldv_47282;
  } else {

  }
#line 715
  if ((req->rq_state & 8UL) != 0UL) {
#line 719
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 720
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 722
  if ((req->rq_state & 504UL) != 0UL) {
#line 723
    req->rq_state = req->rq_state | 64UL;
#line 724
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 725
      atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
    } else {

    }
  } else {

  }
#line 727
  _req_may_be_done(req, m);
#line 728
  goto ldv_47282;
  case 18U: ;
#line 731
  if ((req->rq_state & 8UL) == 0UL) {
#line 731
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            731);
  } else {

  }
#line 732
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 732
  if (tmp___14 != 0) {
#line 732
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 732
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 732
  if (tmp___16 < 0) {
#line 732
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 732
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 732, tmp___15);
  } else {

  }
#line 733
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 734
  req->rq_state = req->rq_state | 192UL;
#line 735
  _req_may_be_done_not_susp(req, m);
#line 736
  goto ldv_47282;
  }
  ldv_47282: ;
#line 739
  return (rv);
}
}
#line 749 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 754
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 755
    return (1);
  } else {

  }
#line 756
  if ((int )mdev->state.ldv_37520.disk > 4) {
#line 757
    return (0);
  } else {

  }
#line 758
  if ((int )mdev->state.ldv_37520.disk <= 3) {
#line 759
    return (0);
  } else {

  }
#line 761
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 762
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 764
  if (sector >= nr_sectors) {
#line 764
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            764);
  } else {

  }
#line 765
  if (esector >= nr_sectors) {
#line 765
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            765);
  } else {

  }
#line 767
  sbnr = sector >> 3;
#line 768
  ebnr = esector >> 3;
#line 770
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 770
  return (tmp == 0);
}
}
#line 773 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio , unsigned long start_time ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int send_oos ;
  int err ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  bool tmp___10 ;
  bool tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int congested ;
  int tmp___18 ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;

  {
#line 775
  rw = (int const   )bio->bi_rw & (int const   )257;
#line 776
  size = (int const   )bio->bi_size;
#line 777
  sector = bio->bi_sector;
#line 778
  b = 0;
#line 780
  send_oos = 0;
#line 781
  err = -5;
#line 782
  ret = 0;
#line 785
  req = drbd_req_new(mdev, bio);
#line 786
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 787
    dec_ap_bio(mdev);
#line 790
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 791
    bio_endio(bio, -12);
#line 792
    return (0);
  } else {

  }
#line 794
  req->start_time = start_time;
#line 796
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 797
  if (local == 0) {
#line 798
    bio_put(req->private_bio);
#line 799
    req->private_bio = 0;
  } else {

  }
#line 801
  if (rw == 1) {
#line 802
    remote = 1;
  } else {
#line 805
    if (local != 0) {
#line 806
      tmp = drbd_may_do_local_read(mdev, sector, size);
#line 806
      if (tmp == 0) {
#line 812
        local = 0;
#line 813
        bio_put(req->private_bio);
#line 814
        req->private_bio = 0;
#line 815
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 818
    remote = local == 0 && (int )mdev->state.ldv_37520.pdsk > 7;
  }
#line 829
  if ((rw == 256 && (int )mdev->state.ldv_37520.disk > 3) && local == 0) {
#line 830
    err = -11;
#line 831
    goto fail_and_free_req;
  } else {

  }
#line 839
  if (rw == 1 && local != 0) {
#line 839
    tmp___0 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 839
    if (tmp___0 == 0) {
#line 840
      req->rq_state = req->rq_state | 2048UL;
#line 841
      drbd_al_begin_io(mdev, sector);
    } else {

    }
  } else {

  }
#line 844
  if (remote != 0) {
#line 844
    tmp___1 = drbd_should_do_remote(mdev->state);
#line 844
    if ((int )tmp___1) {
#line 844
      tmp___2 = 1;
    } else {
#line 844
      tmp___2 = 0;
    }
  } else {
#line 844
    tmp___2 = 0;
  }
#line 844
  remote = tmp___2;
#line 845
  if (rw == 1) {
#line 845
    tmp___3 = drbd_should_send_oos(mdev->state);
#line 845
    if ((int )tmp___3) {
#line 845
      tmp___4 = 1;
    } else {
#line 845
      tmp___4 = 0;
    }
  } else {
#line 845
    tmp___4 = 0;
  }
#line 845
  send_oos = tmp___4;
#line 846
  if (remote != 0 && send_oos != 0) {
#line 846
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            846);
  } else {

  }
#line 848
  if (local == 0 && remote == 0) {
#line 848
    tmp___6 = is_susp(mdev->state);
#line 848
    if (tmp___6 == 0) {
#line 849
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "drbd_make_request_common");
#line 849
      if (tmp___5 != 0) {
#line 850
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
      } else {

      }
#line 851
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 860
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 860
    tmp___8 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 860
    if (tmp___8 != 0) {
      allocate_barrier: 
#line 864
      tmp___7 = kmalloc(56UL, 16U);
#line 864
      b = (struct drbd_tl_epoch *)tmp___7;
#line 865
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 866
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 867
        err = -12;
#line 868
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 873
  spin_lock_irq(& mdev->req_lock);
#line 875
  tmp___9 = is_susp(mdev->state);
#line 875
  if (tmp___9 != 0) {
#line 880
    ret = 1;
#line 881
    spin_unlock_irq(& mdev->req_lock);
#line 882
    goto fail_free_complete;
  } else {

  }
#line 885
  if (remote != 0 || send_oos != 0) {
#line 886
    tmp___10 = drbd_should_do_remote(mdev->state);
#line 886
    remote = (int )tmp___10;
#line 887
    if (rw == 1) {
#line 887
      tmp___11 = drbd_should_send_oos(mdev->state);
#line 887
      if ((int )tmp___11) {
#line 887
        tmp___12 = 1;
      } else {
#line 887
        tmp___12 = 0;
      }
    } else {
#line 887
      tmp___12 = 0;
    }
#line 887
    send_oos = tmp___12;
#line 888
    if (remote != 0 && send_oos != 0) {
#line 888
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              888);
    } else {

    }
#line 890
    if (remote == 0 && send_oos == 0) {
#line 891
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 892
    if (local == 0 && remote == 0) {
#line 893
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 894
      spin_unlock_irq(& mdev->req_lock);
#line 895
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 899
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 900
    mdev->unused_spare_tle = b;
#line 901
    b = 0;
  } else {

  }
#line 903
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 903
    tmp___13 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 903
    if (tmp___13 != 0) {
#line 908
      spin_unlock_irq(& mdev->req_lock);
#line 909
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 914
  _drbd_start_io_acct(mdev, req, bio);
#line 926
  if ((remote != 0 || send_oos != 0) && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 926
    tmp___15 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 926
    if (tmp___15 != 0) {
#line 928
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 929
      mdev->unused_spare_tle = 0;
    } else {
#line 926
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 931
  if (remote != 0 && rw == 1) {
#line 931
    tmp___14 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 931
    if (tmp___14 != 0) {
#line 931
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              932);
    } else {

    }
  } else {

  }
#line 950
  if (remote != 0) {
#line 951
    _req_mod(req, to_be_send);
  } else {

  }
#line 952
  if (local != 0) {
#line 953
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 958
  if (rw == 1) {
#line 958
    tmp___16 = _req_conflicts(req);
#line 958
    if (tmp___16 != 0) {
#line 959
      goto fail_conflicting;
    } else {

    }
  } else {

  }
#line 961
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 965
  if (remote != 0) {
#line 970
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 974
  if (send_oos != 0) {
#line 974
    tmp___17 = __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                                      974U);
#line 974
    if (tmp___17 != 0) {
#line 975
      _req_mod(req, queue_for_send_oos);
    } else {

    }
  } else {

  }
#line 977
  if ((remote != 0 && (mdev->net_conf)->on_congestion != 0) && mdev->agreed_pro_version > 95) {
#line 979
    congested = 0;
#line 981
    if ((mdev->net_conf)->cong_fill != 0) {
#line 981
      tmp___18 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 981
      if (tmp___18 >= (mdev->net_conf)->cong_fill) {
#line 983
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-fill threshold reached\n");
#line 984
        congested = 1;
      } else {

      }
    } else {

    }
#line 987
    if ((mdev->act_log)->used >= (unsigned int )(mdev->net_conf)->cong_extents) {
#line 988
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-extents threshold reached\n");
#line 989
      congested = 1;
    } else {

    }
#line 992
    if (congested != 0) {
#line 993
      queue_barrier(mdev);
#line 995
      if ((mdev->net_conf)->on_congestion == 1) {
#line 996
        __ns.i = mdev->state.i;
#line 996
        __ns.ldv_37520.conn = 22U;
#line 996
        _drbd_set_state(mdev, __ns, 0, 0);
      } else {
#line 998
        __ns___0.i = mdev->state.i;
#line 998
        __ns___0.ldv_37520.conn = 1U;
#line 998
        _drbd_set_state(mdev, __ns___0, 0, 0);
      }
    } else {

    }
  } else {

  }
#line 1002
  spin_unlock_irq(& mdev->req_lock);
#line 1003
  kfree((void const   *)b);
#line 1005
  if (local != 0) {
#line 1006
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1013
    tmp___20 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1013
    if (tmp___20 != 0) {
#line 1014
      tmp___19 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 1014
      if (tmp___19 != 0) {
#line 1017
        bio_endio(req->private_bio, -5);
      } else {
#line 1019
        generic_make_request(req->private_bio);
      }
#line 1020
      put_ldev(mdev);
    } else {
#line 1022
      bio_endio(req->private_bio, -5);
    }
  } else {

  }
#line 1025
  return (0);
  fail_conflicting: 
#line 1034
  _drbd_end_io_acct(mdev, req);
#line 1035
  spin_unlock_irq(& mdev->req_lock);
#line 1036
  if (remote != 0) {
#line 1037
    tmp___21 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 1037
    if (tmp___21 != 0) {
#line 1037
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 1037
    tmp___23 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1037
    if (tmp___23 < 0) {
#line 1037
      tmp___22 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1037
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "drbd_make_request_common", 1037, tmp___22);
    } else {

    }
  } else {

  }
#line 1040
  err = 0;
  fail_free_complete: ;
#line 1043
  if ((req->rq_state & 2048UL) != 0UL) {
#line 1044
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 1046
  if (local != 0) {
#line 1047
    bio_put(req->private_bio);
#line 1048
    req->private_bio = 0;
#line 1049
    put_ldev(mdev);
  } else {

  }
#line 1051
  if (ret == 0) {
#line 1052
    bio_endio(bio, err);
  } else {

  }
#line 1054
  drbd_req_free(req);
#line 1055
  dec_ap_bio(mdev);
#line 1056
  kfree((void const   *)b);
#line 1058
  return (ret);
}
}
#line 1066 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1068
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 1070
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1070
    if (tmp___1 != 0) {
#line 1071
      tmp = get_current();
#line 1071
      tmp___0 = get_current();
#line 1071
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1077
    return (1);
  } else {

  }
#line 1080
  return (0);
}
}
#line 1083 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  unsigned long start_time ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1086
  mdev = (struct drbd_conf *)q->queuedata;
#line 1089
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1089
  if (tmp != 0) {
#line 1090
    bio_endio(bio, -1);
#line 1091
    return (0);
  } else {

  }
#line 1094
  start_time = jiffies;
#line 1099
  if (bio->bi_size == 0U) {
#line 1099
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_size > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1099);
  } else {

  }
#line 1100
  if ((bio->bi_size & 511U) != 0U) {
#line 1100
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1100);
  } else {

  }
#line 1101
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1101
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_idx == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1101);
  } else {

  }
#line 1105
  s_enr = (unsigned int )(bio->bi_sector >> 8);
#line 1106
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 8);
#line 1108
  tmp___1 = __builtin_expect(s_enr == e_enr, 1L);
#line 1108
  if (tmp___1 != 0L) {
#line 1109
    inc_ap_bio(mdev, 1);
#line 1110
    tmp___0 = drbd_make_request_common(mdev, bio, start_time);
#line 1110
    return (tmp___0);
  } else {

  }
#line 1115
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 131072U) {
#line 1117
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1121
    bio_endio(bio, -22);
  } else {
#line 1133
    sect = bio->bi_sector;
#line 1134
    sps = 256;
#line 1135
    mask = sps + -1;
#line 1136
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1137
    bp = bio_split(bio, (int )first_sectors);
#line 1144
    inc_ap_bio(mdev, 3);
#line 1146
    if (s_enr + 1U != e_enr) {
#line 1146
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              1146);
    } else {

    }
#line 1148
    goto ldv_47380;
    ldv_47379: 
#line 1149
    inc_ap_bio(mdev, 1);
    ldv_47380: 
#line 1148
    tmp___2 = drbd_make_request_common(mdev, & bp->bio1, start_time);
#line 1148
    if (tmp___2 != 0) {
#line 1149
      goto ldv_47379;
    } else {

    }

#line 1151
    goto ldv_47383;
    ldv_47382: 
#line 1152
    inc_ap_bio(mdev, 1);
    ldv_47383: 
#line 1151
    tmp___3 = drbd_make_request_common(mdev, & bp->bio2, start_time);
#line 1151
    if (tmp___3 != 0) {
#line 1152
      goto ldv_47382;
    } else {

    }
#line 1154
    dec_ap_bio(mdev);
#line 1156
    bio_pair_release(bp);
  }
#line 1158
  return (0);
}
}
#line 1174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1176
  mdev = (struct drbd_conf *)q->queuedata;
#line 1177
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1179
  bio_size = bvm->bi_size;
#line 1182
  limit = (int )(131072U - ((bio_offset & 131071U) + bio_size));
#line 1184
  if (limit < 0) {
#line 1185
    limit = 0;
  } else {

  }
#line 1186
  if (bio_size == 0U) {
#line 1187
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1188
      limit = (int )bvec->bv_len;
    } else
#line 1189
    if (limit != 0) {
#line 1189
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1189
      if (tmp != 0) {
#line 1190
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1192
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1193
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1194
          _min1 = limit;
#line 1194
          _min2 = backing_limit;
#line 1194
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1196
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1198
  return (limit);
}
}
#line 1201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void request_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_request *req ;
  struct list_head *le ;
  unsigned long et ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  union drbd_state __ns ;

  {
#line 1203
  mdev = (struct drbd_conf *)data;
#line 1206
  et = 0UL;
#line 1208
  tmp = get_net_conf(mdev);
#line 1208
  if (tmp != 0) {
#line 1209
    et = (unsigned long )((((mdev->net_conf)->timeout * 250) / 10) * (mdev->net_conf)->ko_count);
#line 1210
    put_net_conf(mdev);
  } else {

  }
#line 1212
  if (et == 0UL || (int )mdev->state.ldv_37520.conn <= 8) {
#line 1213
    return;
  } else {

  }
#line 1215
  spin_lock_irq(& mdev->req_lock);
#line 1216
  le = & (mdev->oldest_tle)->requests;
#line 1217
  tmp___0 = list_empty((struct list_head  const  *)le);
#line 1217
  if (tmp___0 != 0) {
#line 1218
    spin_unlock_irq(& mdev->req_lock);
#line 1219
    mod_timer(& mdev->request_timer, (unsigned long )jiffies + et);
#line 1220
    return;
  } else {

  }
#line 1223
  le = le->prev;
#line 1224
  __mptr = (struct list_head  const  *)le;
#line 1224
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 1225
  if ((1 != 0 && 1 != 0) && (long )jiffies - (long )(req->start_time + et) >= 0L) {
#line 1226
    if ((req->rq_state & 8UL) != 0UL) {
#line 1227
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Remote failed to finish a request within ko-count * timeout\n");
#line 1228
      __ns.i = mdev->state.i;
#line 1228
      __ns.ldv_37520.conn = 3U;
#line 1228
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
    } else {
#line 1230
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local backing block device frozen?\n");
#line 1231
      mod_timer(& mdev->request_timer, (unsigned long )jiffies + et);
    }
  } else {
#line 1234
    mod_timer(& mdev->request_timer, req->start_time + et);
  }
#line 1237
  spin_unlock_irq(& mdev->req_lock);
#line 1238
  return;
}
}
#line 124 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 126
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 126
  return (tmp != 1);
}
}
#line 715 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 717
  return ((bdev->bd_disk)->queue);
}
}
#line 982 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 984
  retval = 512;
#line 986
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 987
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 989
  return ((unsigned short )retval);
}
}
#line 992 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 994
  tmp = bdev_get_queue(bdev);
#line 994
  tmp___0 = queue_logical_block_size(tmp);
#line 994
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1541 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1666
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1676
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1677
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1685
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 84
  md_io.mdev = mdev;
#line 85
  init_completion(& md_io.event);
#line 86
  md_io.error = 0;
#line 88
  if (rw & 1) {
#line 88
    tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 88
    if (tmp == 0) {
#line 89
      rw = rw | 4096;
    } else {

    }
  } else {

  }
#line 90
  rw = rw | 16;
#line 92
  bio = bio_alloc(16U, 1);
#line 93
  bio->bi_bdev = bdev->md_bdev;
#line 94
  bio->bi_sector = sector;
#line 95
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 95
  ok = tmp___0 == size;
#line 96
  if (ok == 0) {
#line 97
    goto out;
  } else {

  }
#line 98
  bio->bi_private = (void *)(& md_io);
#line 99
  bio->bi_end_io = & drbd_md_io_complete;
#line 100
  bio->bi_rw = (unsigned long )rw;
#line 102
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 102
  if (tmp___1 != 0) {
#line 103
    bio_endio(bio, -5);
  } else {
#line 105
    submit_bio(rw, bio);
  }
#line 106
  wait_for_completion(& md_io.event);
#line 107
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
  out: 
#line 110
  bio_put(bio);
#line 111
  return (ok);
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 118
  offset = 0;
#line 119
  iop = mdev->md_io_page;
#line 121
  tmp = mutex_is_locked(& mdev->md_io_mutex);
#line 121
  if (tmp == 0) {
#line 121
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            121);
  } else {

  }
#line 123
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 123
  if (tmp___0 != 0L) {
#line 123
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (123), "i" (12UL));
    ldv_47053: ;
#line 123
    goto ldv_47053;
  } else {

  }
#line 125
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 125
  logical_block_size = (int )tmp___1;
#line 126
  if (logical_block_size == 0) {
#line 127
    logical_block_size = 512;
  } else {

  }
#line 130
  if (logical_block_size != 512) {
#line 131
    mask = logical_block_size / 512 + -1;
#line 132
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 132
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              132);
    } else {

    }
#line 133
    if ((mask + 1) * 512 != logical_block_size) {
#line 133
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              133);
    } else {

    }
#line 134
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 135
    sector = (sector_t )(~ mask) & sector;
#line 136
    iop = mdev->md_io_tmpp;
#line 138
    if (rw & 1) {
#line 141
      tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 141
      p = tmp___2;
#line 142
      tmp___3 = lowmem_page_address(mdev->md_io_tmpp);
#line 142
      hp = tmp___3;
#line 144
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 147
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 147
      if (tmp___4 != 0L) {
#line 148
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 151
        return (0);
      } else {

      }
#line 154
      __len = 512UL;
#line 154
      if (__len > 63UL) {
#line 154
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 154
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 158
  tmp___7 = drbd_md_first_sector(bdev);
#line 158
  if (tmp___7 > sector) {
#line 160
    tmp___5 = get_current();
#line 160
    tmp___6 = get_current();
#line 160
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 158
    tmp___8 = drbd_md_last_sector(bdev);
#line 158
    if (tmp___8 < sector) {
#line 160
      tmp___5 = get_current();
#line 160
      tmp___6 = get_current();
#line 160
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 164
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 165
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 165
  if (tmp___9 != 0L) {
#line 166
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 168
    return (0);
  } else {

  }
#line 171
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 172
    tmp___10 = lowmem_page_address(mdev->md_io_page);
#line 172
    p___0 = tmp___10;
#line 173
    tmp___11 = lowmem_page_address(mdev->md_io_tmpp);
#line 173
    hp___0 = tmp___11;
#line 175
    __len___0 = 512UL;
#line 175
    if (__len___0 > 63UL) {
#line 175
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 175
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 178
  return (ok);
}
}
#line 181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  int wake ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
#line 185
  al_flags = 0UL;
#line 188
  spin_lock_irq(& mdev->al_lock);
#line 189
  tmp = lc_find(mdev->resync, enr / 4U);
#line 190
  tmp___2 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 190
  if (tmp___2 != 0L) {
#line 191
    __mptr = (struct lc_element  const  *)tmp;
#line 191
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 192
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 192
    if (tmp___1 != 0) {
#line 193
      tmp___0 = test_and_set_bit(2, (unsigned long volatile   *)(& bm_ext->flags));
#line 193
      wake = tmp___0 == 0;
#line 194
      spin_unlock_irq(& mdev->al_lock);
#line 195
      if (wake != 0) {
#line 196
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 197
      return (0);
    } else {

    }
  } else {

  }
#line 200
  al_ext = lc_get(mdev->act_log, enr);
#line 201
  al_flags = (mdev->act_log)->flags;
#line 202
  spin_unlock_irq(& mdev->al_lock);
#line 213
  return (al_ext);
}
}
#line 216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 218
  enr = (unsigned int )(sector >> 13);
#line 222
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 222
  if (tmp <= 0) {
#line 222
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            222);
  } else {

  }
#line 224
  al_ext = _al_get(mdev, enr);
#line 224
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 224
    goto ldv_47083;
  } else {

  }
#line 224
  tmp___0 = get_current();
#line 224
  __wait.flags = 0U;
#line 224
  __wait.private = (void *)tmp___0;
#line 224
  __wait.func = & autoremove_wake_function;
#line 224
  __wait.task_list.next = & __wait.task_list;
#line 224
  __wait.task_list.prev = & __wait.task_list;
  ldv_47086: 
#line 224
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 224
  al_ext = _al_get(mdev, enr);
#line 224
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 224
    goto ldv_47085;
  } else {

  }
#line 224
  schedule();
#line 224
  goto ldv_47086;
  ldv_47085: 
#line 224
  finish_wait(& mdev->al_wait, & __wait);
  ldv_47083: ;
#line 226
  if (al_ext->lc_number != enr) {
#line 233
    init_completion(& al_work.event);
#line 234
    al_work.al_ext = al_ext;
#line 235
    al_work.enr = enr;
#line 236
    al_work.old_enr = al_ext->lc_number;
#line 237
    al_work.w.cb = & w_al_write_transaction;
#line 238
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 239
    wait_for_completion(& al_work.event);
#line 241
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 243
    spin_lock_irq(& mdev->al_lock);
#line 244
    lc_changed(mdev->act_log, al_ext);
#line 245
    spin_unlock_irq(& mdev->al_lock);
#line 246
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 248
  return;
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 252
  enr = (unsigned int )(sector >> 13);
#line 256
  tmp = spinlock_check(& mdev->al_lock);
#line 256
  flags = _raw_spin_lock_irqsave(tmp);
#line 258
  extent = lc_find(mdev->act_log, enr);
#line 260
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 261
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 262
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 263
    return;
  } else {

  }
#line 266
  tmp___0 = lc_put(mdev->act_log, extent);
#line 266
  if (tmp___0 == 0U) {
#line 267
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 269
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 270
  return;
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int al_extent_to_bm_page(unsigned int al_enr ) 
{ 


  {
#line 283
  return (al_enr >> 5);
}
}
#line 290 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int rs_extent_to_bm_page(unsigned int rs_enr ) 
{ 


  {
#line 292
  return (rs_enr >> 3);
}
}
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  char const   *tmp___2 ;
  void *tmp___3 ;
  __u32 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  int tmp___12 ;

  {
#line 302
  __mptr = (struct drbd_work  const  *)w;
#line 302
  aw = (struct update_al_work *)__mptr;
#line 303
  updated = aw->al_ext;
#line 304
  new_enr = aw->enr;
#line 305
  evicted = aw->old_enr;
#line 310
  xor_sum = 0U;
#line 312
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 312
  if (tmp___0 == 0) {
#line 313
    tmp = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37520.disk);
#line 313
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot start al transaction (-%d +%d)\n",
            tmp, evicted, new_enr);
#line 316
    complete(& ((struct update_al_work *)w)->event);
#line 317
    return (1);
  } else {

  }
#line 325
  if ((int )mdev->state.ldv_37520.conn <= 9 && evicted != 4294967295U) {
#line 326
    tmp___1 = al_extent_to_bm_page(evicted);
#line 326
    drbd_bm_write_page(mdev, tmp___1);
  } else {

  }
#line 329
  if ((int )mdev->state.ldv_37520.disk <= 3) {
#line 330
    tmp___2 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37520.disk);
#line 330
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot write al transaction (-%d +%d)\n",
            tmp___2, evicted, new_enr);
#line 333
    complete(& ((struct update_al_work *)w)->event);
#line 334
    put_ldev(mdev);
#line 335
    return (1);
  } else {

  }
#line 338
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 339
  tmp___3 = lowmem_page_address(mdev->md_io_page);
#line 339
  buffer = (struct al_transaction *)tmp___3;
#line 341
  buffer->magic = 1728214147U;
#line 342
  tmp___4 = __fswab32(mdev->al_tr_number);
#line 342
  buffer->tr_number = tmp___4;
#line 344
  tmp___5 = lc_index_of(mdev->act_log, updated);
#line 344
  n = (int )tmp___5;
#line 346
  tmp___6 = __fswab32((__u32 )n);
#line 346
  buffer->updates[0].pos = tmp___6;
#line 347
  tmp___7 = __fswab32(new_enr);
#line 347
  buffer->updates[0].extent = tmp___7;
#line 349
  xor_sum = xor_sum ^ new_enr;
#line 351
  __min1 = 61;
#line 351
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 351
  mx = __min1 < __min2 ? __min1 : __min2;
#line 353
  i = 0;
#line 353
  goto ldv_47126;
  ldv_47125: 
#line 354
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 355
  tmp___8 = lc_element_by_index(mdev->act_log, idx);
#line 355
  extent_nr = tmp___8->lc_number;
#line 356
  tmp___9 = __fswab32(idx);
#line 356
  buffer->updates[i + 1].pos = tmp___9;
#line 357
  tmp___10 = __fswab32(extent_nr);
#line 357
  buffer->updates[i + 1].extent = tmp___10;
#line 358
  xor_sum = xor_sum ^ extent_nr;
#line 353
  i = i + 1;
  ldv_47126: ;
#line 353
  if (i < mx) {
#line 354
    goto ldv_47125;
  } else {

  }

#line 360
  goto ldv_47129;
  ldv_47128: 
#line 361
  buffer->updates[i + 1].pos = 4294967295U;
#line 362
  buffer->updates[i + 1].extent = 4294967295U;
#line 363
  xor_sum = ~ xor_sum;
#line 360
  i = i + 1;
  ldv_47129: ;
#line 360
  if (i <= 60) {
#line 361
    goto ldv_47128;
  } else {

  }
#line 365
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 366
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 367
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 369
  tmp___11 = __fswab32(xor_sum);
#line 369
  buffer->xor_sum = tmp___11;
#line 371
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 374
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 374
  if (tmp___12 == 0) {
#line 375
    drbd_chk_io_error_(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 377
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 377
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 379
    mdev->al_tr_pos = 0;
  } else {

  }
#line 381
  if (mdev->al_tr_pos > 63) {
#line 381
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            381);
  } else {

  }
#line 382
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 384
  mutex_unlock(& mdev->md_io_mutex);
#line 386
  complete(& ((struct update_al_work *)w)->event);
#line 387
  put_ldev(mdev);
#line 389
  return (1);
}
}
#line 401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 408
  xor_sum = 0U;
#line 410
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 414
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 414
  if (tmp == 0) {
#line 415
    return (-1);
  } else {

  }
#line 417
  tmp___0 = __fswab32(b->magic);
#line 417
  rv = tmp___0 == 2205418087U;
#line 419
  i = 0;
#line 419
  goto ldv_47143;
  ldv_47142: 
#line 420
  tmp___1 = __fswab32(b->updates[i].extent);
#line 420
  xor_sum = tmp___1 ^ xor_sum;
#line 419
  i = i + 1;
  ldv_47143: ;
#line 419
  if (i <= 61) {
#line 420
    goto ldv_47142;
  } else {

  }
#line 421
  tmp___2 = __fswab32(b->xor_sum);
#line 421
  rv = (tmp___2 == xor_sum) & rv;
#line 423
  return (rv);
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 439
  active_extents = 0;
#line 440
  transactions = 0;
#line 441
  found_valid = 0;
#line 442
  from = 0;
#line 443
  to = 0;
#line 444
  from_tnr = 0U;
#line 445
  to_tnr = 0U;
#line 448
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 453
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 454
  tmp = lowmem_page_address(mdev->md_io_page);
#line 454
  buffer = (struct al_transaction *)tmp;
#line 457
  i = 0;
#line 457
  goto ldv_47163;
  ldv_47162: 
#line 458
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 459
  if (rv == 0) {
#line 460
    goto ldv_47161;
  } else {

  }
#line 461
  if (rv == -1) {
#line 462
    mutex_unlock(& mdev->md_io_mutex);
#line 463
    return (0);
  } else {

  }
#line 465
  tmp___0 = __fswab32(buffer->tr_number);
#line 465
  cnr = tmp___0;
#line 467
  found_valid = found_valid + 1;
#line 467
  if (found_valid == 1) {
#line 468
    from = i;
#line 469
    to = i;
#line 470
    from_tnr = cnr;
#line 471
    to_tnr = cnr;
#line 472
    goto ldv_47161;
  } else {

  }
#line 474
  if ((int )cnr - (int )from_tnr < 0) {
#line 475
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 475
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              475);
    } else {

    }
#line 476
    from = i;
#line 477
    from_tnr = cnr;
  } else {

  }
#line 479
  if ((int )cnr - (int )to_tnr > 0) {
#line 480
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 480
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              480);
    } else {

    }
#line 481
    to = i;
#line 482
    to_tnr = cnr;
  } else {

  }
  ldv_47161: 
#line 457
  i = i + 1;
  ldv_47163: ;
#line 457
  if (i <= mx) {
#line 458
    goto ldv_47162;
  } else {

  }

#line 486
  if (found_valid == 0) {
#line 487
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 488
    mutex_unlock(& mdev->md_io_mutex);
#line 489
    return (1);
  } else {

  }
#line 494
  i = from;
  ldv_47178: 
#line 500
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 501
  _b = rv == 0;
#line 501
  if (_b != 0) {
#line 501
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            501);
  } else {

  }
#line 501
  if (_b != 0) {
#line 501
    goto cancel;
  } else {

  }
#line 502
  if (rv == -1) {
#line 503
    mutex_unlock(& mdev->md_io_mutex);
#line 504
    return (0);
  } else {

  }
#line 507
  tmp___1 = __fswab32(buffer->tr_number);
#line 507
  trn = tmp___1;
#line 509
  spin_lock_irq(& mdev->al_lock);
#line 515
  j = 61;
#line 515
  goto ldv_47175;
  ldv_47174: 
#line 516
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 516
  pos = (int )tmp___2;
#line 517
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 517
  extent_nr = tmp___3;
#line 519
  if (extent_nr == 4294967295U) {
#line 520
    goto ldv_47173;
  } else {

  }
#line 522
  lc_set(mdev->act_log, extent_nr, pos);
#line 523
  active_extents = active_extents + 1;
  ldv_47173: 
#line 515
  j = j - 1;
  ldv_47175: ;
#line 515
  if (j >= 0) {
#line 516
    goto ldv_47174;
  } else {

  }
#line 525
  spin_unlock_irq(& mdev->al_lock);
#line 527
  transactions = transactions + 1;
  cancel: ;
#line 530
  if (i == to) {
#line 531
    goto ldv_47177;
  } else {

  }
#line 532
  i = i + 1;
#line 533
  if (i > mx) {
#line 534
    i = 0;
  } else {

  }
#line 535
  goto ldv_47178;
  ldv_47177: 
#line 537
  mdev->al_tr_number = to_tnr + 1U;
#line 538
  mdev->al_tr_pos = to;
#line 539
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 539
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 541
    mdev->al_tr_pos = 0;
  } else {

  }
#line 544
  mutex_unlock(& mdev->md_io_mutex);
#line 546
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 549
  return (1);
}
}
#line 556 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct lc_element *tmp___3 ;
  unsigned long tmp___4 ;
  struct _ddebug descriptor ;
  long tmp___5 ;
  char *tmp___6 ;

  {
#line 559
  add = 0UL;
#line 563
  tmp___0 = lc_try_lock(mdev->act_log);
#line 563
  if (tmp___0 != 0) {
#line 563
    goto ldv_47187;
  } else {

  }
#line 563
  tmp___1 = get_current();
#line 563
  __wait.flags = 0U;
#line 563
  __wait.private = (void *)tmp___1;
#line 563
  __wait.func = & autoremove_wake_function;
#line 563
  __wait.task_list.next = & __wait.task_list;
#line 563
  __wait.task_list.prev = & __wait.task_list;
  ldv_47190: 
#line 563
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 563
  tmp___2 = lc_try_lock(mdev->act_log);
#line 563
  if (tmp___2 != 0) {
#line 563
    goto ldv_47189;
  } else {

  }
#line 563
  schedule();
#line 563
  goto ldv_47190;
  ldv_47189: 
#line 563
  finish_wait(& mdev->al_wait, & __wait);
  ldv_47187: 
#line 565
  i = 0;
#line 565
  goto ldv_47195;
  ldv_47194: 
#line 566
  tmp___3 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 566
  enr = tmp___3->lc_number;
#line 567
  if (enr == 4294967295U) {
#line 568
    goto ldv_47191;
  } else {

  }
#line 569
  tmp___4 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 569
  tmp = (int )tmp___4;
#line 570
  descriptor.modname = "drbd";
#line 570
  descriptor.function = "drbd_al_apply_to_bm";
#line 570
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared";
#line 570
  descriptor.format = "AL: set %d bits in extent %u\n";
#line 570
  descriptor.lineno = 570U;
#line 570
  descriptor.flags = 0U;
#line 570
  descriptor.enabled = (char)0;
#line 570
  tmp___5 = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 570
  if (tmp___5 != 0L) {
#line 570
    dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev), "AL: set %d bits in extent %u\n",
               tmp, enr);
  } else {

  }
#line 571
  add = (unsigned long )tmp + add;
  ldv_47191: 
#line 565
  i = i + 1;
  ldv_47195: ;
#line 565
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 566
    goto ldv_47194;
  } else {

  }
#line 574
  lc_unlock(mdev->act_log);
#line 575
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 577
  tmp___6 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 577
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___6);
#line 578
  return;
}
}
#line 581 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 585
  spin_lock_irq(& mdev->al_lock);
#line 586
  rv = al_ext->refcnt == 0U;
#line 587
  tmp = __builtin_expect(rv != 0, 1L);
#line 587
  if (tmp != 0L) {
#line 588
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 589
  spin_unlock_irq(& mdev->al_lock);
#line 591
  return (rv);
}
}
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 608
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 608
  if (tmp == 0) {
#line 608
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            608);
  } else {

  }
#line 610
  i = 0;
#line 610
  goto ldv_47213;
  ldv_47212: 
#line 611
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 612
  if (al_ext->lc_number == 4294967295U) {
#line 613
    goto ldv_47207;
  } else {

  }
#line 614
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 614
  if (tmp___0 != 0) {
#line 614
    goto ldv_47208;
  } else {

  }
#line 614
  tmp___1 = get_current();
#line 614
  __wait.flags = 0U;
#line 614
  __wait.private = (void *)tmp___1;
#line 614
  __wait.func = & autoremove_wake_function;
#line 614
  __wait.task_list.next = & __wait.task_list;
#line 614
  __wait.task_list.prev = & __wait.task_list;
  ldv_47211: 
#line 614
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 614
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 614
  if (tmp___2 != 0) {
#line 614
    goto ldv_47210;
  } else {

  }
#line 614
  schedule();
#line 614
  goto ldv_47211;
  ldv_47210: 
#line 614
  finish_wait(& mdev->al_wait, & __wait);
  ldv_47208: ;
  ldv_47207: 
#line 610
  i = i + 1;
  ldv_47213: ;
#line 610
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 611
    goto ldv_47212;
  } else {

  }
#line 617
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 618
  return;
}
}
#line 620 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 622
  __mptr = (struct drbd_work  const  *)w;
#line 622
  udw = (struct update_odbm_work *)__mptr;
#line 624
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 624
  if (tmp___0 == 0) {
#line 625
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 625
    if (tmp != 0) {
#line 626
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 627
    kfree((void const   *)udw);
#line 628
    return (1);
  } else {

  }
#line 631
  tmp___1 = rs_extent_to_bm_page(udw->enr);
#line 631
  drbd_bm_write_page(mdev, tmp___1);
#line 632
  put_ldev(mdev);
#line 634
  kfree((void const   *)udw);
#line 636
  tmp___2 = drbd_bm_total_weight(mdev);
#line 636
  if (tmp___2 <= mdev->rs_failed) {
#line 637
    switch ((int )mdev->state.ldv_37520.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 640
    drbd_resync_finished(mdev);
    default: ;
#line 643
    goto ldv_47229;
    }
    ldv_47229: ;
  } else {

  }
#line 646
  drbd_bcast_sync_progress(mdev);
#line 648
  return (1);
}
}
#line 658 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 666
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 666
  if (tmp == 0) {
#line 666
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            666);
  } else {

  }
#line 670
  enr = (unsigned int )(sector >> 15);
#line 672
  e = lc_get(mdev->resync, enr);
#line 673
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 674
    __mptr = (struct lc_element  const  *)e;
#line 674
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 675
    if (ext->lce.lc_number == enr) {
#line 676
      if (success != 0) {
#line 677
        ext->rs_left = ext->rs_left - count;
      } else {
#line 679
        ext->rs_failed = ext->rs_failed + count;
      }
#line 680
      if (ext->rs_left < ext->rs_failed) {
#line 681
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
                (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                count);
#line 686
        dump_stack();
#line 688
        lc_put(mdev->resync, & ext->lce);
#line 689
        val.i = 0U;
#line 689
        val.ldv_37520.conn = 1U;
#line 689
        mask.i = 0U;
#line 689
        mask.ldv_37520.conn = 31U;
#line 689
        drbd_force_state(mdev, mask, val);
#line 690
        return;
      } else {

      }
    } else {
#line 699
      tmp___0 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 699
      rs_left = tmp___0;
#line 700
      if (ext->flags != 0UL) {
#line 701
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 705
        ext->flags = 0UL;
      } else {

      }
#line 707
      if (ext->rs_failed != 0) {
#line 708
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
      } else {

      }
#line 712
      ext->rs_left = rs_left;
#line 713
      ext->rs_failed = success == 0 ? count : 0;
#line 714
      lc_changed(mdev->resync, & ext->lce);
    }
#line 716
    lc_put(mdev->resync, & ext->lce);
#line 719
    if (ext->rs_left == ext->rs_failed) {
#line 720
      ext->rs_failed = 0;
#line 722
      tmp___1 = kmalloc(32UL, 32U);
#line 722
      udw = (struct update_odbm_work *)tmp___1;
#line 723
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 724
        udw->enr = ext->lce.lc_number;
#line 725
        udw->w.cb = & w_update_odbm;
#line 726
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 728
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
      }
    } else {

    }
  } else {
#line 732
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 736
  return;
}
}
#line 739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) 
{ 
  unsigned long now ;
  unsigned long last ;
  int next ;

  {
#line 741
  now = jiffies;
#line 742
  last = mdev->rs_mark_time[mdev->rs_last_mark];
#line 743
  next = (mdev->rs_last_mark + 1) % 8;
#line 744
  if ((1 != 0 && 1 != 0) && (long )now - (long )(last + 750UL) >= 0L) {
#line 745
    if ((mdev->rs_mark_left[mdev->rs_last_mark] != still_to_go && (unsigned int )*((unsigned short *)mdev + 1138UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 1138UL) != 320U) {
#line 748
      mdev->rs_mark_time[next] = now;
#line 749
      mdev->rs_mark_left[next] = still_to_go;
#line 750
      mdev->rs_last_mark = next;
    } else {

    }
  } else {

  }
#line 752
  return;
}
}
#line 762 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 767
  count = 0UL;
#line 769
  wake_up = 0;
#line 772
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 773
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 775
    return;
  } else {

  }
#line 777
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 778
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 780
  _b = sector >= nr_sectors;
#line 780
  if (_b != 0) {
#line 780
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            780);
  } else {

  }
#line 780
  if (_b != 0) {
#line 780
    return;
  } else {

  }
#line 781
  _b___0 = esector >= nr_sectors;
#line 781
  if (_b___0 != 0) {
#line 781
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            781);
  } else {

  }
#line 781
  if (_b___0 != 0) {
#line 781
    esector = nr_sectors - 1UL;
  } else {

  }
#line 783
  lbnr = (nr_sectors - 1UL) >> 3;
#line 788
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 788
  if (tmp != 0L) {
#line 789
    return;
  } else {

  }
#line 790
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 790
  if (tmp___0 != 0L) {
#line 791
    ebnr = lbnr;
  } else {
#line 793
    ebnr = (esector - 7UL) >> 3;
  }
#line 794
  sbnr = (sector + 7UL) >> 3;
#line 796
  if (sbnr > ebnr) {
#line 797
    return;
  } else {

  }
#line 803
  tmp___1 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 803
  count = (unsigned long )tmp___1;
#line 804
  if (count != 0UL) {
#line 804
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 804
    if (tmp___4 != 0) {
#line 805
      tmp___2 = drbd_bm_total_weight(mdev);
#line 805
      drbd_advance_rs_marks(mdev, tmp___2);
#line 806
      tmp___3 = spinlock_check(& mdev->al_lock);
#line 806
      flags = _raw_spin_lock_irqsave(tmp___3);
#line 807
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 808
      spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 812
      wake_up = 1;
#line 813
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 815
  if (wake_up != 0) {
#line 816
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 817
  return;
}
}
#line 827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 832
  count = 0U;
#line 835
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 836
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 838
    return (0);
  } else {

  }
#line 841
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 841
  if (tmp == 0) {
#line 842
    return (0);
  } else {

  }
#line 844
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 845
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 847
  _b = sector >= nr_sectors;
#line 847
  if (_b != 0) {
#line 847
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            847);
  } else {

  }
#line 847
  if (_b != 0) {
#line 848
    goto out;
  } else {

  }
#line 849
  _b___0 = esector >= nr_sectors;
#line 849
  if (_b___0 != 0) {
#line 849
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            849);
  } else {

  }
#line 849
  if (_b___0 != 0) {
#line 850
    esector = nr_sectors - 1UL;
  } else {

  }
#line 852
  lbnr = (nr_sectors - 1UL) >> 3;
#line 856
  sbnr = sector >> 3;
#line 857
  ebnr = esector >> 3;
#line 861
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 861
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 862
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 862
  count = (unsigned int )tmp___1;
#line 864
  enr = (unsigned int )(sector >> 15);
#line 865
  e = lc_find(mdev->resync, enr);
#line 866
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 867
    __mptr = (struct lc_element  const  *)e;
#line 867
    __mptr___0 = (struct lc_element  const  *)e;
#line 867
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 868
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 871
  put_ldev(mdev);
#line 873
  return ((int )count);
}
}
#line 877 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 881
  wakeup = 0;
#line 884
  spin_lock_irq(& mdev->al_lock);
#line 885
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 886
    spin_unlock_irq(& mdev->al_lock);
#line 887
    return (0);
  } else {

  }
#line 889
  e = lc_get(mdev->resync, enr);
#line 890
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 890
    __mptr = (struct lc_element  const  *)e;
#line 890
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 890
    bm_ext = 0;
  }
#line 891
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 892
    if (bm_ext->lce.lc_number != enr) {
#line 893
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 894
      bm_ext->rs_failed = 0;
#line 895
      lc_changed(mdev->resync, & bm_ext->lce);
#line 896
      wakeup = 1;
    } else {

    }
#line 898
    if (bm_ext->lce.refcnt == 1U) {
#line 899
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 900
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 902
  rs_flags = (mdev->resync)->flags;
#line 903
  spin_unlock_irq(& mdev->al_lock);
#line 904
  if (wakeup != 0) {
#line 905
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 907
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 908
    if ((rs_flags & 4UL) != 0UL) {
#line 909
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 911
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 911
    if (tmp != 0L) {
#line 911
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (911), "i" (12UL));
      ldv_47320: ;
#line 911
      goto ldv_47320;
    } else {

    }
  } else {

  }
#line 914
  return (bm_ext);
}
}
#line 917 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 920
  rv = 0;
#line 922
  spin_lock_irq(& mdev->al_lock);
#line 923
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 923
  if (tmp != 0L) {
#line 924
    rv = 1;
  } else {
#line 926
    al_ext = lc_find(mdev->act_log, enr);
#line 927
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 928
      if (al_ext->refcnt != 0U) {
#line 929
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 932
  spin_unlock_irq(& mdev->al_lock);
#line 939
  return (rv);
}
}
#line 949 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int sa ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;

  {
#line 951
  enr = (unsigned int )(sector >> 15);
#line 954
  sa = 200;
  retry: 
#line 958
  __ret = 0;
#line 958
  bm_ext = _bme_get(mdev, enr);
#line 958
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 958
    tmp = get_current();
#line 958
    __wait.flags = 0U;
#line 958
    __wait.private = (void *)tmp;
#line 958
    __wait.func = & autoremove_wake_function;
#line 958
    __wait.task_list.next = & __wait.task_list;
#line 958
    __wait.task_list.prev = & __wait.task_list;
    ldv_47341: 
#line 958
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 958
    bm_ext = _bme_get(mdev, enr);
#line 958
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 958
      goto ldv_47339;
    } else {

    }
#line 958
    tmp___0 = get_current();
#line 958
    tmp___1 = signal_pending(tmp___0);
#line 958
    if (tmp___1 == 0) {
#line 958
      schedule();
#line 958
      goto ldv_47340;
    } else {

    }
#line 958
    __ret = -512;
#line 958
    goto ldv_47339;
    ldv_47340: ;
#line 958
    goto ldv_47341;
    ldv_47339: 
#line 958
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 958
  sig = __ret;
#line 960
  if (sig != 0) {
#line 961
    return (-4);
  } else {

  }
#line 963
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 963
  if (tmp___2 != 0) {
#line 964
    return (0);
  } else {

  }
#line 966
  i = 0;
#line 966
  goto ldv_47350;
  ldv_47349: 
#line 967
  __ret___0 = 0;
#line 967
  tmp___8 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 967
  if (tmp___8 != 0) {
#line 967
    tmp___9 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 967
    if (tmp___9 == 0) {
#line 967
      tmp___3 = get_current();
#line 967
      __wait___0.flags = 0U;
#line 967
      __wait___0.private = (void *)tmp___3;
#line 967
      __wait___0.func = & autoremove_wake_function;
#line 967
      __wait___0.task_list.next = & __wait___0.task_list;
#line 967
      __wait___0.task_list.prev = & __wait___0.task_list;
      ldv_47347: 
#line 967
      prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 967
      tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 967
      if (tmp___4 == 0) {
#line 967
        goto ldv_47345;
      } else {
#line 967
        tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 967
        if (tmp___5 != 0) {
#line 967
          goto ldv_47345;
        } else {

        }
      }
#line 967
      tmp___6 = get_current();
#line 967
      tmp___7 = signal_pending(tmp___6);
#line 967
      if (tmp___7 == 0) {
#line 967
        schedule();
#line 967
        goto ldv_47346;
      } else {

      }
#line 967
      __ret___0 = -512;
#line 967
      goto ldv_47345;
      ldv_47346: ;
#line 967
      goto ldv_47347;
      ldv_47345: 
#line 967
      finish_wait(& mdev->al_wait, & __wait___0);
    } else {

    }
  } else {

  }
#line 967
  sig = __ret___0;
#line 971
  if (sig != 0) {
#line 971
    goto _L;
  } else {
#line 971
    tmp___12 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 971
    if (tmp___12 != 0 && sa != 0) {
      _L: /* CIL Label */ 
#line 972
      spin_lock_irq(& mdev->al_lock);
#line 973
      tmp___10 = lc_put(mdev->resync, & bm_ext->lce);
#line 973
      if (tmp___10 == 0U) {
#line 974
        bm_ext->flags = 0UL;
#line 975
        mdev->resync_locked = mdev->resync_locked - 1U;
#line 976
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 978
      spin_unlock_irq(& mdev->al_lock);
#line 979
      if (sig != 0) {
#line 980
        return (-4);
      } else {

      }
#line 981
      tmp___11 = schedule_timeout_interruptible(25L);
#line 981
      if (tmp___11 != 0L) {
#line 982
        return (-4);
      } else {

      }
#line 983
      if (sa != 0) {
#line 983
        sa = sa - 1;
#line 983
        if (sa == 0) {
#line 984
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_begin_io() stepped aside for 20sec.Resync stalled?\n");
        } else {

        }
      } else {

      }
#line 986
      goto retry;
    } else {

    }
  }
#line 966
  i = i + 1;
  ldv_47350: ;
#line 966
  if (i <= 3) {
#line 967
    goto ldv_47349;
  } else {

  }
#line 989
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 990
  return (0);
}
}
#line 1002 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1004
  enr = (unsigned int )(sector >> 15);
#line 1005
  al_enr = enr * 4U;
#line 1010
  spin_lock_irq(& mdev->al_lock);
#line 1011
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1025
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1026
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1026
      __mptr = (struct lc_element  const  *)e;
#line 1026
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1026
      bm_ext = 0;
    }
#line 1027
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1028
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1028
      if (tmp != 0) {
#line 1028
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1028);
      } else {

      }
#line 1029
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1029
      if (tmp___0 == 0) {
#line 1029
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1029);
      } else {

      }
#line 1030
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1031
      mdev->resync_wenr = 4294967295U;
#line 1032
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1032
      if (tmp___1 == 0U) {
#line 1033
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1034
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1036
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1040
  e = lc_try_get(mdev->resync, enr);
#line 1041
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1041
    __mptr___0 = (struct lc_element  const  *)e;
#line 1041
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1041
    bm_ext = 0;
  }
#line 1042
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1043
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1043
    if (tmp___2 != 0) {
#line 1044
      goto proceed;
    } else {

    }
#line 1045
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1045
    if (tmp___3 == 0) {
#line 1046
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1052
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1053
      if (bm_ext->lce.refcnt == 0U) {
#line 1053
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1053);
      } else {

      }
    }
#line 1055
    goto check_al;
  } else {
#line 1058
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1059
      goto try_again;
    } else {

    }
#line 1061
    e = lc_get(mdev->resync, enr);
#line 1062
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1062
      __mptr___1 = (struct lc_element  const  *)e;
#line 1062
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1062
      bm_ext = 0;
    }
#line 1063
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1064
      rs_flags = (mdev->resync)->flags;
#line 1065
      if ((rs_flags & 4UL) != 0UL) {
#line 1066
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1068
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1068
      if (tmp___4 != 0L) {
#line 1068
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1068), "i" (12UL));
        ldv_47371: ;
#line 1068
        goto ldv_47371;
      } else {

      }
#line 1069
      goto try_again;
    } else {

    }
#line 1071
    if (bm_ext->lce.lc_number != enr) {
#line 1072
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1073
      bm_ext->rs_failed = 0;
#line 1074
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1075
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1076
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1076
      if (tmp___5 != 0) {
#line 1076
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1076);
      } else {

      }
    } else {

    }
#line 1078
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1079
    if (bm_ext->lce.refcnt != 1U) {
#line 1079
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1079);
    } else {

    }
#line 1080
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1081
    goto check_al;
  }
  check_al: 
#line 1084
  i = 0;
#line 1084
  goto ldv_47373;
  ldv_47372: 
#line 1085
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1085
  if (tmp___6 != 0L) {
#line 1086
    goto try_again;
  } else {

  }
#line 1087
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1087
  if (tmp___7 != 0) {
#line 1088
    goto try_again;
  } else {

  }
#line 1084
  i = i + 1;
  ldv_47373: ;
#line 1084
  if (i <= 3) {
#line 1085
    goto ldv_47372;
  } else {

  }
#line 1090
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1092
  mdev->resync_wenr = 4294967295U;
#line 1093
  spin_unlock_irq(& mdev->al_lock);
#line 1094
  return (0);
  try_again: ;
#line 1097
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1098
    mdev->resync_wenr = enr;
  } else {

  }
#line 1099
  spin_unlock_irq(& mdev->al_lock);
#line 1100
  return (-11);
}
}
#line 1103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1105
  enr = (unsigned int )(sector >> 15);
#line 1110
  tmp = spinlock_check(& mdev->al_lock);
#line 1110
  flags = _raw_spin_lock_irqsave(tmp);
#line 1111
  e = lc_find(mdev->resync, enr);
#line 1112
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1112
    __mptr = (struct lc_element  const  *)e;
#line 1112
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1112
    bm_ext = 0;
  }
#line 1113
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1114
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1115
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1115
    if (tmp___0 != 0) {
#line 1116
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1117
    return;
  } else {

  }
#line 1120
  if (bm_ext->lce.refcnt == 0U) {
#line 1121
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1122
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1125
    return;
  } else {

  }
#line 1128
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1128
  if (tmp___1 == 0U) {
#line 1129
    bm_ext->flags = 0UL;
#line 1130
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1131
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1134
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1135
  return;
}
}
#line 1141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1143
  spin_lock_irq(& mdev->al_lock);
#line 1145
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1145
  if (tmp != 0) {
#line 1146
    lc_reset(mdev->resync);
#line 1147
    put_ldev(mdev);
  } else {

  }
#line 1149
  mdev->resync_locked = 0U;
#line 1150
  mdev->resync_wenr = 4294967295U;
#line 1151
  spin_unlock_irq(& mdev->al_lock);
#line 1152
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1153
  return;
}
}
#line 1162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1168
  spin_lock_irq(& mdev->al_lock);
#line 1170
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1170
  if (tmp___3 != 0) {
#line 1172
    i = 0;
#line 1172
    goto ldv_47402;
    ldv_47401: 
#line 1173
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1174
    __mptr = (struct lc_element  const  *)e;
#line 1174
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1175
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1176
      goto ldv_47400;
    } else {

    }
#line 1177
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1178
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1181
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1181
      if (tmp != 0) {
#line 1181
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1181);
      } else {

      }
#line 1182
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1182
      if (tmp___0 == 0) {
#line 1182
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1182);
      } else {

      }
#line 1183
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1184
      mdev->resync_wenr = 4294967295U;
#line 1185
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1187
    if (bm_ext->lce.refcnt != 0U) {
#line 1188
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1190
      put_ldev(mdev);
#line 1191
      spin_unlock_irq(& mdev->al_lock);
#line 1192
      return (-11);
    } else {

    }
#line 1194
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1194
    if (tmp___1 != 0) {
#line 1194
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1194);
    } else {

    }
#line 1195
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1195
    if (tmp___2 != 0) {
#line 1195
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1195);
    } else {

    }
#line 1196
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_47400: 
#line 1172
    i = i + 1;
    ldv_47402: ;
#line 1172
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1173
      goto ldv_47401;
    } else {

    }

#line 1198
    if ((mdev->resync)->used != 0U) {
#line 1198
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1198);
    } else {

    }
#line 1199
    put_ldev(mdev);
  } else {

  }
#line 1201
  spin_unlock_irq(& mdev->al_lock);
#line 1203
  return (0);
}
}
#line 1212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1218
  wake_up = 0;
#line 1220
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1221
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1223
    return;
  } else {

  }
#line 1225
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1226
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1228
  _b = sector >= nr_sectors;
#line 1228
  if (_b != 0) {
#line 1228
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1228);
  } else {

  }
#line 1228
  if (_b != 0) {
#line 1228
    return;
  } else {

  }
#line 1229
  _b___0 = esector >= nr_sectors;
#line 1229
  if (_b___0 != 0) {
#line 1229
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1229);
  } else {

  }
#line 1229
  if (_b___0 != 0) {
#line 1229
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1231
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1236
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1236
  if (tmp != 0L) {
#line 1237
    return;
  } else {

  }
#line 1238
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1238
  if (tmp___0 != 0L) {
#line 1239
    ebnr = lbnr;
  } else {
#line 1241
    ebnr = (esector - 7UL) >> 3;
  }
#line 1242
  sbnr = (sector + 7UL) >> 3;
#line 1244
  if (sbnr > ebnr) {
#line 1245
    return;
  } else {

  }
#line 1251
  spin_lock_irq(& mdev->al_lock);
#line 1252
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1252
  count = (unsigned long )tmp___1;
#line 1253
  if (count != 0UL) {
#line 1254
    mdev->rs_failed = mdev->rs_failed + count;
#line 1256
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1256
    if (tmp___2 != 0) {
#line 1257
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1258
      put_ldev(mdev);
    } else {

    }
#line 1263
    wake_up = 1;
  } else {

  }
#line 1265
  spin_unlock_irq(& mdev->al_lock);
#line 1266
  if (wake_up != 0) {
#line 1267
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1268
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 112 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 164 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 166
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 168
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 169
  memset((void *)dst, 255, (size_t )len);
#line 171
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 172
  return;
}
}
#line 271 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 275
  tmp___0 = __bitmap_weight(src, nbits);
#line 275
  return (tmp___0);
}
}
#line 79 "include/linux/cpumask.h"
extern struct cpumask  const  * const  cpu_online_mask ;
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 612
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 614
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 292 "include/linux/list.h"
__inline static void list_splice(struct list_head  const  *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 295
  tmp = list_empty(list);
#line 295
  if (tmp == 0) {
#line 296
    __list_splice(list, head, head->next);
  } else {

  }
#line 297
  return;
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 91 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 534 "include/linux/module.h"
__inline static int ldv_try_module_get_1(struct module *module ) ;
#line 540
void ldv_module_put_3(struct module *ldv_func_arg1 ) ;
#line 544
void ldv_module_put_5(struct module *ldv_func_arg1 ) ;
#line 254 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 278
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 206 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 206
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 206
  return (tmp);
}
}
#line 1811 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2062
extern int wake_up_process(struct task_struct * ) ;
#line 2017 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 2018
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 2019
extern struct block_device *bdget(dev_t  ) ;
#line 2023
extern void bdput(struct block_device * ) ;
#line 2059
extern int blkdev_put(struct block_device * , fmode_t  ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create_on_node(int (*)(void * ) , void * , int  ,
                                                  char const   *  , ...) ;
#line 409 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 414
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 607
extern struct gendisk *alloc_disk(int  ) ;
#line 609
extern void put_disk(struct gendisk * ) ;
#line 255 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 257
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 258
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 258
    return (tmp);
  } else {

  }
#line 259
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 805 "include/linux/blkdev.h"
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 806
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 807
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 809
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 839
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 853
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 593
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 593
  if (tmp != 0L) {
#line 593
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (593), "i" (12UL));
    ldv_46366: ;
#line 593
    goto ldv_46366;
  } else {

  }
#line 594
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 595
  return;
}
}
#line 604 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 606
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 607
  return;
}
}
#line 616 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 618
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 618
  if (tmp != 0L) {
#line 618
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (618), "i" (12UL));
    ldv_46381: ;
#line 618
    goto ldv_46381;
  } else {

  }
#line 619
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 620
  return;
}
}
#line 1193
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1207
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) ;
#line 1213
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1218
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1223
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) ;
#line 1226
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1230
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1269
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1271
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1276
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1282
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1283
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1284
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1286
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1292
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) ;
#line 1491 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1492 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1493 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1494 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1495 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1496 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1498 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1499 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1500 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1501 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1505
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1506
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1508 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1518
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1519
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1682
void drbd_nl_cleanup(void) ;
#line 1683
int drbd_nl_init(void) ;
#line 1684
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1783 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1785
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1785
  if (tmp == 0) {
#line 1785
    goto ldv_47465;
  } else {

  }
#line 1785
  tmp___0 = get_current();
#line 1785
  __wait.flags = 0U;
#line 1785
  __wait.private = (void *)tmp___0;
#line 1785
  __wait.func = & autoremove_wake_function;
#line 1785
  __wait.task_list.next = & __wait.task_list;
#line 1785
  __wait.task_list.prev = & __wait.task_list;
  ldv_47468: 
#line 1785
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1785
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1785
  if (tmp___1 == 0) {
#line 1785
    goto ldv_47467;
  } else {

  }
#line 1785
  schedule();
#line 1785
  goto ldv_47468;
  ldv_47467: 
#line 1785
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_47465: ;
#line 1788
  return;
}
}
#line 1826 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1828
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1830
  if (forcedetach == 0) {
#line 1831
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1831
    if (tmp != 0) {
#line 1832
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1833
    if ((int )mdev->state.ldv_37520.disk > 4) {
#line 1834
      __ns.i = mdev->state.i;
#line 1834
      __ns.ldv_37520.disk = 4U;
#line 1834
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1835
    goto ldv_47493;
  } else {

  }
  case 2: ;
  case 1: 
#line 1840
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1841
  if ((int )mdev->state.ldv_37520.disk > 2) {
#line 1842
    __ns___0.i = mdev->state.i;
#line 1842
    __ns___0.ldv_37520.disk = 2U;
#line 1842
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1843
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1846
  goto ldv_47493;
  }
  ldv_47493: ;
#line 1849
  return;
}
}
#line 1859 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1862
  if (error != 0) {
#line 1864
    tmp = spinlock_check(& mdev->req_lock);
#line 1864
    flags = _raw_spin_lock_irqsave(tmp);
#line 1865
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1866
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1868
  return;
}
}
#line 1921 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1924
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1928
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1928
  if (tmp___1 != 0UL) {
#line 1928
    __min1 = 2251799813685248UL;
#line 1928
    tmp___0 = drbd_md_first_sector(bdev);
#line 1928
    __min2 = tmp___0;
#line 1928
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1928
    s = 0UL;
  }
#line 1931
  goto ldv_47534;
  case -2: 
#line 1933
  __min1___0 = 2251799813685248UL;
#line 1933
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1933
  __min2___0 = tmp___2;
#line 1933
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1936
  __min1___1 = s;
#line 1936
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1936
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1939
  goto ldv_47534;
  default: 
#line 1941
  __min1___2 = 8587575296UL;
#line 1941
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1941
  __min2___2 = tmp___3;
#line 1941
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_47534: ;
#line 1944
  return (s);
}
}
#line 1952 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1955
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1957
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1963
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1964
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1964
    if (tmp != 0) {
#line 1965
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 1966
      dump_stack();
    } else {

    }
#line 1968
    return (0UL);
  } else {

  }
#line 1970
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 1970
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1973
  return (0UL);
  }
}
}
#line 2035 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2037
  _drbd_thread_stop(thi, 0, 0);
#line 2038
  return;
}
}
#line 2040 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2042
  _drbd_thread_stop(thi, 1, 0);
#line 2043
  return;
}
}
#line 2253 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2255
  s = mdev->state;
#line 2260
  switch ((unsigned int )s.ldv_37520.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2285
  goto ldv_47665;
  case 13U: ;
#line 2289
  if (mdev->agreed_pro_version <= 95) {
#line 2290
    return (0);
  } else {

  }
#line 2291
  goto ldv_47665;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2298
  return (0);
  }
  ldv_47665: ;
#line 2301
  switch ((unsigned int )s.ldv_37520.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2308
  goto ldv_47675;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2317
  return (0);
  }
  ldv_47675: ;
#line 2320
  return (1);
}
}
#line 2328 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2330
  tmp = drbd_get_max_buffers(mdev);
#line 2330
  mxb = tmp;
#line 2332
  tmp___0 = is_susp(mdev->state);
#line 2332
  if (tmp___0 != 0) {
#line 2333
    return (0);
  } else {

  }
#line 2334
  tmp___1 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2334
  if (tmp___1 != 0) {
#line 2335
    return (0);
  } else {

  }
#line 2342
  tmp___2 = drbd_state_is_stable___0(mdev);
#line 2342
  if (tmp___2 == 0) {
#line 2343
    return (0);
  } else {

  }
#line 2347
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2347
  if (tmp___3 > mxb) {
#line 2348
    return (0);
  } else {

  }
#line 2349
  tmp___4 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2349
  if (tmp___4 != 0) {
#line 2350
    return (0);
  } else {

  }
#line 2351
  return (1);
}
}
#line 2431 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2433
  sk = (mdev->data.socket)->sk;
#line 2434
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2435
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2436
  return;
}
}
#line 2438 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2445
  return (0);
}
}
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_47925;
  ldv_47924: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_47925: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_47924;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_main_mutex.wait_lock",
                                                                   0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, {0, 0}, "drbd_main_mutex", 0, 0UL}};
#line 80
int drbd_init(void) ;
#line 81
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 82
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 83
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 84
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 86
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 87
static void md_sync_timer_fn(unsigned long data ) ;
#line 88
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 89
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 130 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 135 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 135
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}}}, 1250, 5,
    0, 0, 0UL};
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 164
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 206
  tmp = kmalloc(56UL, 208U);
#line 206
  b = (struct drbd_tl_epoch *)tmp;
#line 207
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 208
    return (0);
  } else {

  }
#line 209
  INIT_LIST_HEAD(& b->requests);
#line 210
  INIT_LIST_HEAD(& b->w.list);
#line 211
  b->next = 0;
#line 212
  b->br_number = 4711U;
#line 213
  b->n_writes = 0;
#line 214
  b->w.cb = 0;
#line 216
  mdev->oldest_tle = b;
#line 217
  mdev->newest_tle = b;
#line 218
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 220
  mdev->tl_hash = 0;
#line 221
  mdev->tl_hash_s = 0U;
#line 223
  return (1);
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 228
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 228
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            228);
  } else {

  }
#line 229
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 229
  if (tmp == 0) {
#line 229
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            229);
  } else {

  }
#line 230
  kfree((void const   *)mdev->oldest_tle);
#line 231
  mdev->oldest_tle = 0;
#line 232
  kfree((void const   *)mdev->unused_spare_tle);
#line 233
  mdev->unused_spare_tle = 0;
#line 234
  kfree((void const   *)mdev->tl_hash);
#line 235
  mdev->tl_hash = 0;
#line 236
  mdev->tl_hash_s = 0U;
#line 237
  return;
}
}
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 250
  INIT_LIST_HEAD(& new->requests);
#line 251
  INIT_LIST_HEAD(& new->w.list);
#line 252
  new->w.cb = 0;
#line 253
  new->next = 0;
#line 254
  new->n_writes = 0;
#line 256
  newest_before = mdev->newest_tle;
#line 259
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 260
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 261
    (mdev->newest_tle)->next = new;
#line 262
    mdev->newest_tle = new;
  } else {

  }
#line 264
  return;
}
}
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 283
  spin_lock_irq(& mdev->req_lock);
#line 285
  b = mdev->oldest_tle;
#line 288
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 289
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 291
    goto bail;
  } else {

  }
#line 293
  if (b->br_number != barrier_nr) {
#line 294
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 296
    goto bail;
  } else {

  }
#line 298
  if ((unsigned int )b->n_writes != set_size) {
#line 299
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_writes=%u, expected n_writes=%u!\n",
            barrier_nr, set_size, b->n_writes);
#line 301
    goto bail;
  } else {

  }
#line 305
  le = b->requests.next;
#line 305
  tle = le->next;
#line 305
  goto ldv_48153;
  ldv_48152: 
#line 306
  __mptr = (struct list_head  const  *)le;
#line 306
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 307
  _req_mod(r, barrier_acked);
#line 305
  le = tle;
#line 305
  tle = le->next;
  ldv_48153: ;
#line 305
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 306
    goto ldv_48152;
  } else {

  }
#line 322
  list_del_init(& b->requests);
#line 324
  nob = b->next;
#line 325
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 325
  if (tmp != 0) {
#line 326
    _tl_add_barrier(mdev, b);
#line 327
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 328
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 332
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 332
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              332);
    } else {

    }
#line 333
    mdev->oldest_tle = nob;
#line 334
    kfree((void const   *)b);
  }
#line 337
  spin_unlock_irq(& mdev->req_lock);
#line 338
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 338
  if (tmp___0 != 0) {
#line 338
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 338
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 338
  if (tmp___2 < 0) {
#line 338
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 338
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 338, tmp___1);
  } else {

  }
#line 340
  return;
  bail: 
#line 343
  spin_unlock_irq(& mdev->req_lock);
#line 344
  val.i = 0U;
#line 344
  val.ldv_37520.conn = 6U;
#line 344
  mask.i = 0U;
#line 344
  mask.ldv_37520.conn = 31U;
#line 344
  drbd_force_state(mdev, mask, val);
#line 346
  return;
}
}
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct drbd_tl_epoch **pn ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head carry_reads ;
  struct drbd_request *req ;
  int rv ;
  int n_writes ;
  int n_reads ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 363
  b = mdev->oldest_tle;
#line 364
  pn = & mdev->oldest_tle;
#line 365
  goto ldv_48188;
  ldv_48187: 
#line 366
  n_writes = 0;
#line 367
  n_reads = 0;
#line 368
  INIT_LIST_HEAD(& carry_reads);
#line 369
  le = b->requests.next;
#line 369
  tle = le->next;
#line 369
  goto ldv_48180;
  ldv_48179: 
#line 370
  __mptr = (struct list_head  const  *)le;
#line 370
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 371
  rv = _req_mod(req, what);
#line 373
  n_writes = (rv & 1) + n_writes;
#line 374
  n_reads = ((rv & 2) >> 1) + n_reads;
#line 369
  le = tle;
#line 369
  tle = le->next;
  ldv_48180: ;
#line 369
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 370
    goto ldv_48179;
  } else {

  }
#line 376
  tmp = b->next;
#line 378
  if (n_writes != 0) {
#line 379
    if ((unsigned int )what == 23U) {
#line 380
      b->n_writes = n_writes;
#line 381
      if ((unsigned long )b->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 382
        b->w.cb = & w_send_barrier;
#line 383
        inc_ap_pending(mdev);
#line 384
        set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 387
      drbd_queue_work(& mdev->data.work, & b->w);
    } else {

    }
#line 389
    pn = & b->next;
  } else {
#line 391
    if (n_reads != 0) {
#line 392
      list_add(& carry_reads, & b->requests);
    } else {

    }
#line 395
    list_del(& b->requests);
#line 400
    if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                             struct drbd_work * ,
                                                             int  ))0)) {
#line 401
      tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 401
      if (tmp___0 != 0) {
#line 401
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 401
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 401
      if (tmp___2 < 0) {
#line 401
        tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 401
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "_tl_restart", 401, tmp___1);
      } else {

      }
    } else {

    }
#line 403
    if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 405
      if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 405
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
                405);
      } else {

      }
#line 406
      INIT_LIST_HEAD(& b->requests);
#line 407
      list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
#line 408
      INIT_LIST_HEAD(& b->w.list);
#line 409
      b->w.cb = 0;
#line 410
      b->br_number = random32();
#line 411
      b->n_writes = 0;
#line 413
      *pn = b;
#line 414
      goto ldv_48186;
    } else {

    }
#line 416
    *pn = tmp;
#line 417
    kfree((void const   *)b);
  }
#line 419
  b = tmp;
#line 420
  list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
  ldv_48188: ;
#line 365
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 366
    goto ldv_48187;
  } else {

  }
  ldv_48186: ;
#line 370
  return;
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int tmp ;
  struct list_head  const  *__mptr ;

  {
#line 438
  spin_lock_irq(& mdev->req_lock);
#line 440
  _tl_restart(mdev, connection_lost_while_pending);
#line 443
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 443
  if (tmp == 0) {
#line 443
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            443);
  } else {

  }
#line 446
  le = mdev->out_of_sequence_requests.next;
#line 446
  tle = le->next;
#line 446
  goto ldv_48198;
  ldv_48197: 
#line 447
  __mptr = (struct list_head  const  *)le;
#line 447
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 450
  _req_mod(r, connection_lost_while_pending);
#line 446
  le = tle;
#line 446
  tle = le->next;
  ldv_48198: ;
#line 446
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 447
    goto ldv_48197;
  } else {

  }
#line 454
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 456
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 458
  spin_unlock_irq(& mdev->req_lock);
#line 459
  return;
}
}
#line 461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 


  {
#line 463
  spin_lock_irq(& mdev->req_lock);
#line 464
  _tl_restart(mdev, what);
#line 465
  spin_unlock_irq(& mdev->req_lock);
#line 466
  return;
}
}
#line 474 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 477
  return (((((int )os.ldv_37520.conn > 9 && (int )ns.ldv_37520.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_37520.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;

  {
#line 494
  tmp = spinlock_check(& mdev->req_lock);
#line 494
  flags = _raw_spin_lock_irqsave(tmp);
#line 495
  os = mdev->state;
#line 496
  ns.i = (os.i & ~ mask.i) | val.i;
#line 497
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 498
  ns = mdev->state;
#line 499
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 501
  return (rv);
}
}
#line 510 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 513
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 514
  return;
}
}
#line 516
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 517
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) ;
#line 520
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) ;
#line 522
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 526 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 533
  tmp = test_and_clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 533
  if (tmp != 0) {
#line 534
    return (SS_CW_SUCCESS);
  } else {

  }
#line 536
  tmp___0 = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 536
  if (tmp___0 != 0) {
#line 537
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 539
  rv = SS_UNKNOWN_ERROR;
#line 540
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 540
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 541
  os = mdev->state;
#line 542
  ns.i = (os.i & ~ mask.i) | val.i;
#line 543
  ns = sanitize_state(mdev, os, ns, 0);
#line 545
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 545
  if (tmp___2 == 0) {
#line 546
    rv = SS_CW_NO_NEED;
  } else {

  }
#line 547
  if ((int )rv == 0) {
#line 548
    rv = is_valid_state(mdev, ns);
#line 549
    if ((int )rv == 1) {
#line 550
      rv = is_valid_state_transition(mdev, ns, os);
#line 551
      if ((int )rv == 1) {
#line 552
        rv = SS_UNKNOWN_ERROR;
      } else {

      }
    } else {

    }
  } else {

  }
#line 555
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 557
  return (rv);
}
}
#line 571 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv drbd_req_state(struct drbd_conf *mdev , union drbd_state mask ,
                                         union drbd_state val , enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  raw_spinlock_t *tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;

  {
#line 579
  init_completion(& done);
#line 581
  if (((unsigned int )f & 8U) != 0U) {
#line 582
    mutex_lock_nested(& mdev->state_mutex, 0U);
  } else {

  }
#line 584
  tmp = spinlock_check(& mdev->req_lock);
#line 584
  flags = _raw_spin_lock_irqsave(tmp);
#line 585
  os = mdev->state;
#line 586
  ns.i = (os.i & ~ mask.i) | val.i;
#line 587
  ns = sanitize_state(mdev, os, ns, 0);
#line 589
  tmp___3 = cl_wide_st_chg(mdev, os, ns);
#line 589
  if (tmp___3 != 0) {
#line 590
    rv = is_valid_state(mdev, ns);
#line 591
    if ((int )rv == 1) {
#line 592
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 593
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 595
    if ((int )rv <= 0) {
#line 596
      if (((unsigned int )f & 2U) != 0U) {
#line 597
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 598
      goto abort;
    } else {

    }
#line 601
    drbd_state_lock___0(mdev);
#line 602
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 602
    if (tmp___0 == 0) {
#line 603
      drbd_state_unlock(mdev);
#line 604
      rv = SS_CW_FAILED_BY_PEER;
#line 605
      if (((unsigned int )f & 2U) != 0U) {
#line 606
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 607
      goto abort;
    } else {

    }
#line 610
    rv = _req_st_cond(mdev, mask, val);
#line 610
    if ((int )rv != 0) {
#line 610
      goto ldv_48270;
    } else {

    }
#line 610
    tmp___1 = get_current();
#line 610
    __wait.flags = 0U;
#line 610
    __wait.private = (void *)tmp___1;
#line 610
    __wait.func = & autoremove_wake_function;
#line 610
    __wait.task_list.next = & __wait.task_list;
#line 610
    __wait.task_list.prev = & __wait.task_list;
    ldv_48273: 
#line 610
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 610
    rv = _req_st_cond(mdev, mask, val);
#line 610
    if ((int )rv != 0) {
#line 610
      goto ldv_48272;
    } else {

    }
#line 610
    schedule();
#line 610
    goto ldv_48273;
    ldv_48272: 
#line 610
    finish_wait(& mdev->state_wait, & __wait);
    ldv_48270: ;
#line 613
    if ((int )rv <= 0) {
#line 614
      drbd_state_unlock(mdev);
#line 615
      if (((unsigned int )f & 2U) != 0U) {
#line 616
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 617
      goto abort;
    } else {

    }
#line 619
    tmp___2 = spinlock_check(& mdev->req_lock);
#line 619
    flags = _raw_spin_lock_irqsave(tmp___2);
#line 620
    os = mdev->state;
#line 621
    ns.i = (os.i & ~ mask.i) | val.i;
#line 622
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 623
    drbd_state_unlock(mdev);
  } else {
#line 625
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 628
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 630
  if (((unsigned int )f & 4U) != 0U && (int )rv == 1) {
#line 631
    tmp___4 = get_current();
#line 631
    if ((unsigned long )tmp___4 == (unsigned long )mdev->worker.task) {
#line 631
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              631);
    } else {

    }
#line 632
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 636
  if (((unsigned int )f & 8U) != 0U) {
#line 637
    mutex_unlock(& mdev->state_mutex);
  } else {

  }
#line 639
  return (rv);
}
}
#line 653 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) 
{ 
  enum drbd_state_rv rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 658
  rv = drbd_req_state(mdev, mask, val, f);
#line 658
  if ((int )rv != -18) {
#line 658
    goto ldv_48284;
  } else {

  }
#line 658
  tmp = get_current();
#line 658
  __wait.flags = 0U;
#line 658
  __wait.private = (void *)tmp;
#line 658
  __wait.func = & autoremove_wake_function;
#line 658
  __wait.task_list.next = & __wait.task_list;
#line 658
  __wait.task_list.prev = & __wait.task_list;
  ldv_48287: 
#line 658
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 658
  rv = drbd_req_state(mdev, mask, val, f);
#line 658
  if ((int )rv != -18) {
#line 658
    goto ldv_48286;
  } else {

  }
#line 658
  schedule();
#line 658
  goto ldv_48287;
  ldv_48286: 
#line 658
  finish_wait(& mdev->state_wait, & __wait);
  ldv_48284: ;
#line 661
  return (rv);
}
}
#line 664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 666
  tmp = is_susp(ns);
#line 666
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37520.pdsk);
#line 666
  tmp___1 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37520.disk);
#line 666
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_37520.peer);
#line 666
  tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_37520.role);
#line 666
  tmp___4 = drbd_conn_str((enum drbd_conns )ns.ldv_37520.conn);
#line 666
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___4, tmp___3, tmp___2, tmp___1, tmp___0, tmp != 0 ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 677
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) 
{ 
  char const   *tmp ;

  {
#line 683
  if ((int )err == -18) {
#line 684
    return;
  } else {

  }
#line 685
  tmp = drbd_set_st_err_str(err);
#line 685
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 686
  print_st(mdev, (char *)" state", os);
#line 687
  print_st(mdev, (char *)"wanted", ns);
#line 688
  return;
}
}
#line 697 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 702
  rv = 1;
#line 704
  fp = FP_DONT_CARE;
#line 705
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 705
  if (tmp != 0) {
#line 706
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 707
    put_ldev(mdev);
  } else {

  }
#line 710
  tmp___0 = get_net_conf(mdev);
#line 710
  if (tmp___0 != 0) {
#line 711
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 713
      rv = SS_TWO_PRIMARIES;
    } else {

    }
#line 714
    put_net_conf(mdev);
  } else {

  }
#line 717
  if ((int )rv <= 0) {

  } else
#line 719
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 720
    rv = SS_DEVICE_IN_USE;
  } else
#line 722
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37520.conn <= 9) && (int )ns.ldv_37520.disk <= 7) {
#line 723
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 725
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_37520.conn <= 9) && (int )ns.ldv_37520.pdsk > 5) {
#line 727
    rv = SS_PRIMARY_NOP;
  } else
#line 729
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37520.disk <= 4) && (int )ns.ldv_37520.pdsk <= 4) {
#line 730
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 732
  if ((int )ns.ldv_37520.conn > 10 && (int )ns.ldv_37520.disk <= 3) {
#line 733
    rv = SS_NO_LOCAL_DISK;
  } else
#line 735
  if ((int )ns.ldv_37520.conn > 10 && (int )ns.ldv_37520.pdsk <= 3) {
#line 736
    rv = SS_NO_REMOTE_DISK;
  } else
#line 738
  if (((int )ns.ldv_37520.conn > 10 && (int )ns.ldv_37520.disk <= 7) && (int )ns.ldv_37520.pdsk <= 7) {
#line 739
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 741
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 746
    rv = SS_CONNECTED_OUTDATES;
  } else
#line 748
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 750
    rv = SS_NO_VERIFY_ALG;
  } else
#line 752
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 754
    rv = SS_NOT_SUPPORTED;
  } else
#line 756
  if ((int )ns.ldv_37520.conn > 9 && *((unsigned int *)(& ns) + 0UL) == 49152U) {
#line 757
    rv = SS_CONNECTED_OUTDATES;
  } else {

  }
#line 759
  return (rv);
}
}
#line 769 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 772
  rv = 1;
#line 774
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_37520.conn > 10) {
#line 776
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 778
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 779
    rv = SS_ALREADY_STANDALONE;
  } else {

  }
#line 781
  if ((int )ns.ldv_37520.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 782
    rv = SS_IS_DISKLESS;
  } else {

  }
#line 784
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_37520.conn <= 1) {
#line 785
    rv = SS_NO_NET_CONFIG;
  } else {

  }
#line 787
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_37520.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 788
    rv = SS_LOWER_THAN_OUTDATED;
  } else {

  }
#line 790
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 791
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 793
  if ((int )ns.ldv_37520.conn == (int )os.ldv_37520.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 794
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 796
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_37520.conn <= 9) {
#line 797
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 799
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_37520.conn != (int )os.ldv_37520.conn) && (int )os.ldv_37520.conn > 10) {
#line 801
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 803
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_37520.conn <= 9) {
#line 805
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 807
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) && (int )os.ldv_37520.conn <= 8) {
#line 809
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 811
  return (rv);
}
}
#line 824 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_disk_state disk_min ;
  enum drbd_disk_state disk_max ;
  enum drbd_disk_state pdsk_min ;
  enum drbd_disk_state pdsk_max ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 830
  fp = FP_DONT_CARE;
#line 831
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 831
  if (tmp != 0) {
#line 832
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 833
    put_ldev(mdev);
  } else {

  }
#line 837
  if (((int )ns.ldv_37520.conn > 2 && (int )ns.ldv_37520.conn <= 7) && (int )os.ldv_37520.conn <= 1) {
#line 839
    ns.ldv_37520.conn = os.ldv_37520.conn;
  } else {

  }
#line 843
  if (((((int )os.ldv_37520.conn > 2 && (int )os.ldv_37520.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) && (int )ns.ldv_37520.conn <= 7) {
#line 845
    ns.ldv_37520.conn = os.ldv_37520.conn;
  } else {

  }
#line 848
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 849
    ns.ldv_37520.disk = 0U;
  } else {

  }
#line 853
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) {
#line 854
    ns.ldv_37520.disk = 0U;
  } else {

  }
#line 857
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 858
    ns.ldv_37520.conn = os.ldv_37520.conn;
  } else {

  }
#line 860
  if ((int )ns.ldv_37520.conn <= 9) {
#line 861
    ns.ldv_37520.peer_isp = 0U;
#line 862
    ns.ldv_37520.peer = 0U;
#line 863
    if ((int )ns.ldv_37520.pdsk > 6 || (int )ns.ldv_37520.pdsk <= 3) {
#line 864
      ns.ldv_37520.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 868
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 869
    ns.ldv_37520.aftr_isp = 0U;
  } else {

  }
#line 872
  if (((int )os.ldv_37520.conn > 10 && (int )ns.ldv_37520.conn > 10) && ((int )ns.ldv_37520.disk <= 2 || (int )ns.ldv_37520.pdsk <= 2)) {
#line 874
    if ((unsigned long )warn_sync_abort != (unsigned long )((char const   **)0)) {
#line 875
      *warn_sync_abort = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? "Online-verify" : "Resync";
    } else {

    }
#line 878
    ns.ldv_37520.conn = 10U;
  } else {

  }
#line 882
  if ((int )ns.ldv_37520.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 882
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 882
    if (tmp___0 != 0) {
#line 884
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 885
        ns.ldv_37520.disk = mdev->new_state_tmp.ldv_37520.disk;
#line 886
        ns.ldv_37520.pdsk = mdev->new_state_tmp.ldv_37520.pdsk;
      } else {
#line 888
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection lost while negotiating, no data!\n");
#line 889
        ns.ldv_37520.disk = 0U;
#line 890
        ns.ldv_37520.pdsk = 6U;
      }
#line 892
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 896
  if ((int )ns.ldv_37520.conn > 9 && (int )ns.ldv_37520.conn <= 21) {
#line 897
    if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 898
      ns.ldv_37520.disk = 8U;
    } else {

    }
#line 899
    if (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U) {
#line 900
      ns.ldv_37520.pdsk = 8U;
    } else {

    }
  } else {

  }
#line 904
  disk_min = D_DISKLESS;
#line 905
  disk_max = D_UP_TO_DATE;
#line 906
  pdsk_min = D_INCONSISTENT;
#line 907
  pdsk_max = D_UNKNOWN;
#line 908
  switch ((unsigned int )ns.ldv_37520.conn) {
  case 14U: ;
  case 21U: ;
  case 12U: ;
  case 15U: ;
  case 23U: 
#line 914
  disk_min = D_INCONSISTENT;
#line 915
  disk_max = D_OUTDATED;
#line 916
  pdsk_min = D_UP_TO_DATE;
#line 917
  pdsk_max = D_UP_TO_DATE;
#line 918
  goto ldv_48327;
  case 18U: ;
  case 19U: 
#line 921
  disk_min = D_UP_TO_DATE;
#line 922
  disk_max = D_UP_TO_DATE;
#line 923
  pdsk_min = D_UP_TO_DATE;
#line 924
  pdsk_max = D_UP_TO_DATE;
#line 925
  goto ldv_48327;
  case 10U: 
#line 927
  disk_min = D_DISKLESS;
#line 928
  disk_max = D_UP_TO_DATE;
#line 929
  pdsk_min = D_DISKLESS;
#line 930
  pdsk_max = D_UP_TO_DATE;
#line 931
  goto ldv_48327;
  case 13U: ;
  case 20U: ;
  case 11U: ;
  case 22U: 
#line 936
  disk_min = D_UP_TO_DATE;
#line 937
  disk_max = D_UP_TO_DATE;
#line 938
  pdsk_min = D_INCONSISTENT;
#line 939
  pdsk_max = D_CONSISTENT;
#line 940
  goto ldv_48327;
  case 17U: 
#line 942
  disk_min = D_INCONSISTENT;
#line 943
  disk_max = D_INCONSISTENT;
#line 944
  pdsk_min = D_UP_TO_DATE;
#line 945
  pdsk_max = D_UP_TO_DATE;
#line 946
  goto ldv_48327;
  case 16U: 
#line 948
  disk_min = D_UP_TO_DATE;
#line 949
  disk_max = D_UP_TO_DATE;
#line 950
  pdsk_min = D_INCONSISTENT;
#line 951
  pdsk_max = D_INCONSISTENT;
#line 952
  goto ldv_48327;
  case 0U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 8U: ;
  case 9U: ;
  case 31U: ;
#line 964
  goto ldv_48327;
  }
  ldv_48327: ;
#line 966
  if ((unsigned int )ns.ldv_37520.disk > (unsigned int )disk_max) {
#line 967
    ns.ldv_37520.disk = (unsigned char )disk_max;
  } else {

  }
#line 969
  if ((unsigned int )ns.ldv_37520.disk < (unsigned int )disk_min) {
#line 970
    tmp___1 = drbd_disk_str(disk_min);
#line 970
    tmp___2 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37520.disk);
#line 970
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk from %s to %s\n",
             tmp___2, tmp___1);
#line 972
    ns.ldv_37520.disk = (unsigned char )disk_min;
  } else {

  }
#line 974
  if ((unsigned int )ns.ldv_37520.pdsk > (unsigned int )pdsk_max) {
#line 975
    ns.ldv_37520.pdsk = (unsigned char )pdsk_max;
  } else {

  }
#line 977
  if ((unsigned int )ns.ldv_37520.pdsk < (unsigned int )pdsk_min) {
#line 978
    tmp___3 = drbd_disk_str(pdsk_min);
#line 978
    tmp___4 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37520.pdsk);
#line 978
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk from %s to %s\n",
             tmp___4, tmp___3);
#line 980
    ns.ldv_37520.pdsk = (unsigned char )pdsk_min;
  } else {

  }
#line 983
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37520.conn <= 9) && (int )ns.ldv_37520.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_37520.conn > 9) || (int )os.ldv_37520.pdsk <= 5)) {
#line 986
    ns.ldv_37520.susp_fen = 1U;
  } else {

  }
#line 988
  if ((mdev->sync_conf.on_no_data == 1 && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37520.disk <= 7) && (int )ns.ldv_37520.pdsk <= 7)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_37520.disk > 7) || (int )os.ldv_37520.pdsk > 7)) {
#line 991
    ns.ldv_37520.susp_nod = 1U;
  } else {

  }
#line 993
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 994
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 995
      ns.ldv_37520.conn = 20U;
    } else {

    }
#line 996
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 997
      ns.ldv_37520.conn = 21U;
    } else {

    }
  } else {
#line 999
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 1000
      ns.ldv_37520.conn = 16U;
    } else {

    }
#line 1001
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1002
      ns.ldv_37520.conn = 17U;
    } else {

    }
  }
#line 1005
  return (ns);
}
}
#line 1009 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 1011
  if (mdev->agreed_pro_version <= 89) {
#line 1012
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 1013
  mdev->rs_total = drbd_bm_bits(mdev);
#line 1014
  mdev->ov_position = 0UL;
#line 1015
  if ((unsigned int )cs == 19U) {
#line 1021
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 1023
    bit = mdev->ov_start_sector >> 3;
#line 1024
    if (mdev->rs_total <= bit) {
#line 1025
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
#line 1027
      mdev->rs_total = 1UL;
    } else {
#line 1029
      mdev->rs_total = mdev->rs_total - bit;
    }
#line 1030
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 1032
  mdev->ov_left = mdev->rs_total;
#line 1033
  return;
}
}
#line 1035 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_resume_al(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1037
  tmp = test_and_clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 1037
  if (tmp != 0) {
#line 1038
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resumed AL updates\n");
  } else {

  }
#line 1039
  return;
}
}
#line 1051 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  union drbd_state os ;
  enum drbd_state_rv rv ;
  char const   *warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  enum drbd_state_rv tmp ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned long tmp___24 ;
  unsigned long now ;
  int i ;
  u32 mdf ;
  int tmp___25 ;
  int tmp___26 ;
  void *tmp___27 ;

  {
#line 1055
  rv = 1;
#line 1056
  warn_sync_abort = 0;
#line 1059
  os = mdev->state;
#line 1061
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 1063
  if (ns.i == os.i) {
#line 1064
    return (SS_NOTHING_TO_DO);
  } else {

  }
#line 1066
  if (((unsigned int )flags & 1U) == 0U) {
#line 1070
    rv = is_valid_state(mdev, ns);
#line 1071
    if ((int )rv <= 0) {
#line 1075
      tmp = is_valid_state(mdev, os);
#line 1075
      if ((int )tmp == (int )rv) {
#line 1076
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1078
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1081
  if ((int )rv <= 0) {
#line 1082
    if (((unsigned int )flags & 2U) != 0U) {
#line 1083
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1084
    return (rv);
  } else {

  }
#line 1087
  if ((unsigned long )warn_sync_abort != (unsigned long )((char const   *)0)) {
#line 1088
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s aborted.\n",
             warn_sync_abort);
  } else {

  }
#line 1092
  pbp = (char *)(& pb);
#line 1093
  *pbp = 0;
#line 1094
  if ((int )ns.ldv_37520.role != (int )os.ldv_37520.role) {
#line 1095
    tmp___0 = drbd_role_str((enum drbd_role )ns.ldv_37520.role);
#line 1095
    tmp___1 = drbd_role_str((enum drbd_role )os.ldv_37520.role);
#line 1095
    tmp___2 = sprintf(pbp, "role( %s -> %s ) ", tmp___1, tmp___0);
#line 1095
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 1098
  if ((int )ns.ldv_37520.peer != (int )os.ldv_37520.peer) {
#line 1099
    tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_37520.peer);
#line 1099
    tmp___4 = drbd_role_str((enum drbd_role )os.ldv_37520.peer);
#line 1099
    tmp___5 = sprintf(pbp, "peer( %s -> %s ) ", tmp___4, tmp___3);
#line 1099
    pbp = pbp + (unsigned long )tmp___5;
  } else {

  }
#line 1102
  if ((int )ns.ldv_37520.conn != (int )os.ldv_37520.conn) {
#line 1103
    tmp___6 = drbd_conn_str((enum drbd_conns )ns.ldv_37520.conn);
#line 1103
    tmp___7 = drbd_conn_str((enum drbd_conns )os.ldv_37520.conn);
#line 1103
    tmp___8 = sprintf(pbp, "conn( %s -> %s ) ", tmp___7, tmp___6);
#line 1103
    pbp = pbp + (unsigned long )tmp___8;
  } else {

  }
#line 1106
  if ((int )ns.ldv_37520.disk != (int )os.ldv_37520.disk) {
#line 1107
    tmp___9 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37520.disk);
#line 1107
    tmp___10 = drbd_disk_str((enum drbd_disk_state )os.ldv_37520.disk);
#line 1107
    tmp___11 = sprintf(pbp, "disk( %s -> %s ) ", tmp___10, tmp___9);
#line 1107
    pbp = pbp + (unsigned long )tmp___11;
  } else {

  }
#line 1110
  if ((int )ns.ldv_37520.pdsk != (int )os.ldv_37520.pdsk) {
#line 1111
    tmp___12 = drbd_disk_str((enum drbd_disk_state )ns.ldv_37520.pdsk);
#line 1111
    tmp___13 = drbd_disk_str((enum drbd_disk_state )os.ldv_37520.pdsk);
#line 1111
    tmp___14 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___13, tmp___12);
#line 1111
    pbp = pbp + (unsigned long )tmp___14;
  } else {

  }
#line 1114
  tmp___18 = is_susp(ns);
#line 1114
  tmp___19 = is_susp(os);
#line 1114
  if (tmp___18 != tmp___19) {
#line 1115
    tmp___15 = is_susp(ns);
#line 1115
    tmp___16 = is_susp(os);
#line 1115
    tmp___17 = sprintf(pbp, "susp( %d -> %d ) ", tmp___16, tmp___15);
#line 1115
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1118
  if ((int )ns.ldv_37520.aftr_isp != (int )os.ldv_37520.aftr_isp) {
#line 1119
    tmp___20 = sprintf(pbp, "aftr_isp( %d -> %d ) ", (int )os.ldv_37520.aftr_isp,
                       (int )ns.ldv_37520.aftr_isp);
#line 1119
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1122
  if ((int )ns.ldv_37520.peer_isp != (int )os.ldv_37520.peer_isp) {
#line 1123
    tmp___21 = sprintf(pbp, "peer_isp( %d -> %d ) ", (int )os.ldv_37520.peer_isp,
                       (int )ns.ldv_37520.peer_isp);
#line 1123
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1126
  if ((int )ns.ldv_37520.user_isp != (int )os.ldv_37520.user_isp) {
#line 1127
    tmp___22 = sprintf(pbp, "user_isp( %d -> %d ) ", (int )os.ldv_37520.user_isp,
                       (int )ns.ldv_37520.user_isp);
#line 1127
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1130
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1141
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1141
    tmp___23 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1141
    if (tmp___23 == 0) {
#line 1145
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1151
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U)) {
#line 1153
    atomic_inc(& mdev->local_cnt);
  } else {

  }
#line 1155
  mdev->state = ns;
#line 1157
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_37520.disk > 2) {
#line 1158
    drbd_print_uuids(mdev, "attached to UUIDs");
  } else {

  }
#line 1160
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1161
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1164
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_37520.conn <= 9) {
#line 1166
    tmp___24 = drbd_bm_bits(mdev);
#line 1166
    mdev->ov_start_sector = (tmp___24 - mdev->ov_left) << 3;
#line 1168
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
              (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1172
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1174
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1175
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time[mdev->rs_last_mark]);
#line 1177
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1178
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1181
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1183
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1184
    mdev->rs_mark_time[mdev->rs_last_mark] = jiffies;
  } else {

  }
#line 1187
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1189
    now = jiffies;
#line 1192
    set_ov_position(mdev, (enum drbd_conns )ns.ldv_37520.conn);
#line 1193
    mdev->rs_start = now;
#line 1194
    mdev->rs_last_events = 0;
#line 1195
    mdev->rs_last_sect_ev = 0;
#line 1196
    mdev->ov_last_oos_size = 0UL;
#line 1197
    mdev->ov_last_oos_start = 0UL;
#line 1199
    i = 0;
#line 1199
    goto ldv_48371;
    ldv_48370: 
#line 1200
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 1201
    mdev->rs_mark_time[i] = now;
#line 1199
    i = i + 1;
    ldv_48371: ;
#line 1199
    if (i <= 7) {
#line 1200
      goto ldv_48370;
    } else {

    }
#line 1204
    drbd_rs_controller_reset(mdev);
#line 1206
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1207
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1209
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1213
  tmp___26 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1213
  if (tmp___26 != 0) {
#line 1214
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1218
    tmp___25 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 1218
    if (tmp___25 != 0) {
#line 1219
      mdf = mdf | 64U;
    } else {

    }
#line 1220
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U || ((int )mdev->state.ldv_37520.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 4U)) {
#line 1222
      mdf = mdf | 2U;
    } else {

    }
#line 1223
    if ((int )mdev->state.ldv_37520.conn > 9) {
#line 1224
      mdf = mdf | 4U;
    } else {

    }
#line 1225
    if ((int )mdev->state.ldv_37520.disk > 4) {
#line 1226
      mdf = mdf | 1U;
    } else {

    }
#line 1227
    if ((int )mdev->state.ldv_37520.disk > 5) {
#line 1228
      mdf = mdf | 16U;
    } else {

    }
#line 1229
    if ((int )mdev->state.ldv_37520.pdsk <= 5 && (int )mdev->state.ldv_37520.pdsk > 3) {
#line 1230
      mdf = mdf | 32U;
    } else {

    }
#line 1231
    if ((mdev->ldev)->md.flags != mdf) {
#line 1232
      (mdev->ldev)->md.flags = mdf;
#line 1233
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1235
    if ((int )os.ldv_37520.disk <= 6 && (int )ns.ldv_37520.disk > 6) {
#line 1236
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1237
    put_ldev(mdev);
  } else {

  }
#line 1241
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1243
    set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1246
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1247
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1250
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1251
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1254
  if (((int )os.ldv_37520.conn > 7 && (int )ns.ldv_37520.conn <= 7) && (int )ns.ldv_37520.conn > 2) {
#line 1256
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1259
  if ((int )os.ldv_37520.conn <= 9 && (int )ns.ldv_37520.conn > 9) {
#line 1260
    drbd_resume_al(mdev);
  } else {

  }
#line 1262
  tmp___27 = kmalloc(48UL, 32U);
#line 1262
  ascw = (struct after_state_chg_work *)tmp___27;
#line 1263
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1264
    ascw->os = os;
#line 1265
    ascw->ns = ns;
#line 1266
    ascw->flags = flags;
#line 1267
    ascw->w.cb = & w_after_state_ch;
#line 1268
    ascw->done = done;
#line 1269
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1271
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1274
  return (rv);
}
}
#line 1277 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1280
  __mptr = (struct drbd_work  const  *)w;
#line 1280
  ascw = (struct after_state_chg_work *)__mptr;
#line 1281
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1282
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1283
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1283
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              1283);
    } else {

    }
#line 1284
    complete(ascw->done);
  } else {

  }
#line 1286
  kfree((void const   *)ascw);
#line 1288
  return (1);
}
}
#line 1291 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1293
  if (rv != 0) {
#line 1294
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1295
    val.i = 0U;
#line 1295
    val.ldv_37520.conn = 10U;
#line 1295
    mask.i = 0U;
#line 1295
    mask.ldv_37520.conn = 31U;
#line 1295
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1296
    return;
  } else {

  }
#line 1299
  switch ((int )mdev->state.ldv_37520.conn) {
  case 12: 
#line 1301
  val___0.i = 0U;
#line 1301
  val___0.ldv_37520.conn = 15U;
#line 1301
  mask___0.i = 0U;
#line 1301
  mask___0.ldv_37520.conn = 31U;
#line 1301
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1302
  goto ldv_48395;
  case 11: 
#line 1304
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1305
  goto ldv_48395;
  }
  ldv_48395: ;
#line 1308
  return;
}
}
#line 1309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io_from_worker(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                               char *why , enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 1315
  tmp = get_current();
#line 1315
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 1315
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1315);
  } else {

  }
#line 1318
  set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 1320
  drbd_bm_lock(mdev, why, flags);
#line 1321
  rv = (*io_fn)(mdev);
#line 1322
  drbd_bm_unlock(mdev);
#line 1324
  drbd_resume_io(mdev);
#line 1326
  return (rv);
}
}
#line 1336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_req_event what ;
  union drbd_state nsm ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  enum drbd_io_error_p eh ;
  int was_io_error ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;

  {
#line 1340
  what = nothing;
#line 1341
  nsm.i = 4294967295U;
#line 1343
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1344
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 1345
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1346
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1349
  fp = FP_DONT_CARE;
#line 1350
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1350
  if (tmp != 0) {
#line 1351
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1352
    put_ldev(mdev);
  } else {

  }
#line 1356
  drbd_bcast_state(mdev, ns);
#line 1358
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_37520.disk > 7) || (int )os.ldv_37520.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_37520.disk <= 7) && (int )ns.ldv_37520.pdsk <= 7)) {
#line 1360
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1365
  nsm.i = 4294967295U;
#line 1366
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1367
    if ((int )os.ldv_37520.conn <= 9 && (int )ns.ldv_37520.conn > 9) {
#line 1368
      what = resend;
    } else {

    }
#line 1370
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_37520.disk > 1) {
#line 1371
      what = restart_frozen_disk_io;
    } else {

    }
#line 1373
    if ((unsigned int )what != 26U) {
#line 1374
      nsm.ldv_37520.susp_nod = 0U;
    } else {

    }
  } else {

  }
#line 1377
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1379
    if ((int )os.ldv_37520.pdsk > 5 && (int )ns.ldv_37520.pdsk <= 5) {
#line 1380
      tl_clear(mdev);
#line 1381
      tmp___0 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 1381
      if (tmp___0 != 0) {
#line 1382
        drbd_uuid_new_current(mdev);
#line 1383
        clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 1385
      spin_lock_irq(& mdev->req_lock);
#line 1386
      __ns.i = mdev->state.i;
#line 1386
      __ns.ldv_37520.susp_fen = 0U;
#line 1386
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1387
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
#line 1390
    if ((int )os.ldv_37520.conn <= 9 && (int )ns.ldv_37520.conn > 9) {
#line 1391
      clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1392
      what = resend;
#line 1393
      nsm.ldv_37520.susp_fen = 0U;
    } else {

    }
  } else {

  }
#line 1397
  if ((unsigned int )what != 26U) {
#line 1398
    spin_lock_irq(& mdev->req_lock);
#line 1399
    _tl_restart(mdev, what);
#line 1400
    nsm.i = nsm.i & mdev->state.i;
#line 1401
    _drbd_set_state(mdev, nsm, CS_VERBOSE, 0);
#line 1402
    spin_unlock_irq(& mdev->req_lock);
  } else {

  }
#line 1409
  if ((((unsigned int )*((unsigned short *)(& os) + 0UL) != 256U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) && mdev->agreed_pro_version > 95) {
#line 1409
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1409
    if (tmp___1 != 0) {
#line 1412
      drbd_gen_and_send_sync_uuid(mdev);
#line 1413
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1417
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_37520.pdsk > 0) {
#line 1418
    drbd_send_uuids(mdev);
#line 1419
    drbd_send_state(mdev);
  } else {

  }
#line 1424
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 1426
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1431
  if ((((int )os.ldv_37520.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_37520.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1437
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1437
    if (tmp___3 != 0) {
#line 1438
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_37520.disk > 7) {
#line 1440
        tmp___2 = is_susp(mdev->state);
#line 1440
        if (tmp___2 != 0) {
#line 1441
          set_bit(27U, (unsigned long volatile   *)(& mdev->flags));
        } else {
#line 1443
          drbd_uuid_new_current(mdev);
#line 1444
          drbd_send_uuids(mdev);
        }
      } else {

      }
#line 1447
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1451
  if ((int )ns.ldv_37520.pdsk <= 3) {
#line 1451
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1451
    if (tmp___4 != 0) {
#line 1452
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1453
        drbd_uuid_new_current(mdev);
#line 1454
        drbd_send_uuids(mdev);
      } else {

      }
#line 1458
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1462
        drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote diskless peer",
                                   BM_DONT_CLEAR);
      } else {

      }
#line 1464
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1470
  if (((unsigned int )*((unsigned char *)(& os) + 0UL) == 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) && (int )mdev->state.ldv_37520.conn <= 10) {
#line 1470
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1470
    if (tmp___5 != 0) {
#line 1474
      drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote", BM_LOCKED_TEST_ALLOWED);
#line 1476
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1480
  if (((int )ns.ldv_37520.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1482
    drbd_send_sizes(mdev, 0, 0);
#line 1483
    drbd_send_uuids(mdev);
#line 1484
    drbd_send_state(mdev);
  } else {

  }
#line 1488
  if ((int )ns.ldv_37520.conn > 9 && ((int )os.ldv_37520.aftr_isp != (int )ns.ldv_37520.aftr_isp || (int )os.ldv_37520.user_isp != (int )ns.ldv_37520.user_isp)) {
#line 1491
    drbd_send_state(mdev);
  } else {

  }
#line 1494
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1496
    suspend_other_sg(mdev);
  } else {

  }
#line 1500
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_37520.conn > 9) {
#line 1501
    drbd_send_state(mdev);
  } else {

  }
#line 1503
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 352U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 352U) {
#line 1504
    drbd_send_state(mdev);
  } else {

  }
#line 1507
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1510
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1515
  if ((((int )os.ldv_37520.conn <= 9 && (int )ns.ldv_37520.conn <= 9) && (int )os.ldv_37520.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1518
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate",
                         BM_LOCKED_MASK);
  } else {

  }
#line 1523
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1529
    eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1530
    was_io_error = test_and_clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 1535
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1536
      tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37520.disk);
#line 1536
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s during detach\n",
              tmp___6);
    } else {

    }
#line 1540
    tmp___7 = drbd_send_state(mdev);
#line 1540
    if (tmp___7 != 0) {
#line 1541
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that I am detaching my disk\n");
    } else {
#line 1543
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state for detaching disk failed\n");
    }
#line 1545
    drbd_rs_cancel_all(mdev);
#line 1550
    drbd_md_sync(mdev);
#line 1551
    put_ldev(mdev);
#line 1553
    if (was_io_error != 0 && (unsigned int )eh == 1U) {
#line 1554
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1560
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1563
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U) {
#line 1564
      tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_37520.disk);
#line 1564
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s while going diskless\n",
              tmp___8);
    } else {

    }
#line 1568
    mdev->rs_total = 0UL;
#line 1569
    mdev->rs_failed = 0UL;
#line 1570
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1572
    tmp___9 = drbd_send_state(mdev);
#line 1572
    if (tmp___9 != 0) {
#line 1573
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that I\'m now diskless.\n");
    } else {

    }
#line 1576
    put_ldev(mdev);
  } else {

  }
#line 1580
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 16U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1581
    drbd_send_state(mdev);
  } else {

  }
#line 1584
  if ((int )ns.ldv_37520.disk > 3 && (int )ns.ldv_37520.pdsk > 3) {
#line 1584
    tmp___10 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1584
    if (tmp___10 != 0) {
#line 1586
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1587
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1591
  if ((((int )os.ldv_37520.conn > 10 && (int )ns.ldv_37520.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1594
    resume_next_sg(mdev);
  } else {

  }
#line 1598
  if (((int )os.ldv_37520.disk <= 7 && (int )os.ldv_37520.conn > 15) && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1599
    drbd_send_state(mdev);
  } else {

  }
#line 1608
  if ((int )os.ldv_37520.conn > 10 && (int )ns.ldv_37520.conn <= 10) {
#line 1608
    tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1608
    if (tmp___11 != 0) {
#line 1609
      drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished",
                           BM_DONT_CLEAR);
#line 1611
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1615
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1615
    tmp___12 = is_susp(ns);
#line 1615
    if (tmp___12 == 0) {
#line 1615
      if ((unsigned long )mdev->tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1616
        drbd_free_tl_hash(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1619
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1620
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1624
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1627
    if ((int )os.ldv_37520.aftr_isp != (int )ns.ldv_37520.aftr_isp) {
#line 1628
      resume_next_sg(mdev);
    } else {

    }
#line 1630
    tmp___13 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1630
    if (tmp___13 != 0) {
#line 1631
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1634
  drbd_md_sync(mdev);
#line 1635
  return;
}
}
#line 1638 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1640
  thi = (struct drbd_thread *)arg;
#line 1641
  mdev = thi->mdev;
  restart: 
#line 1646
  retval = (*(thi->function))(thi);
#line 1648
  tmp = spinlock_check(& thi->t_lock);
#line 1648
  flags = _raw_spin_lock_irqsave(tmp);
#line 1660
  if ((unsigned int )thi->t_state == 3U) {
#line 1661
    tmp___0 = get_current();
#line 1661
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1662
    thi->t_state = Running;
#line 1663
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1664
    goto restart;
  } else {

  }
#line 1667
  thi->task = 0;
#line 1668
  thi->t_state = None;
#line 1669
  __asm__  volatile   ("mfence": : : "memory");
#line 1670
  complete(& thi->stop);
#line 1671
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1673
  tmp___1 = get_current();
#line 1673
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1676
  ldv_module_put_3(& __this_module);
#line 1677
  return (retval);
}
}
#line 1680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1683
  spinlock_check(& thi->t_lock);
#line 1683
  __raw_spin_lock_init(& thi->t_lock.ldv_5956.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1684
  thi->task = 0;
#line 1685
  thi->t_state = None;
#line 1686
  thi->function = func;
#line 1687
  thi->mdev = mdev;
#line 1688
  return;
}
}
#line 1690 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  unsigned int tmp___4 ;
  long tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 1692
  mdev = thi->mdev;
#line 1696
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1703
  tmp = spinlock_check(& thi->t_lock);
#line 1703
  flags = _raw_spin_lock_irqsave(tmp);
#line 1705
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1707
  tmp___0 = get_current();
#line 1707
  tmp___1 = get_current();
#line 1707
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1711
  tmp___2 = ldv_try_module_get_1(& __this_module);
#line 1711
  if (tmp___2 == 0) {
#line 1712
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1713
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1714
    return (0);
  } else {

  }
#line 1717
  init_completion(& thi->stop);
#line 1718
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1718
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1718);
  } else {

  }
#line 1719
  thi->reset_cpu_mask = 1;
#line 1720
  thi->t_state = Running;
#line 1721
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1722
  tmp___3 = get_current();
#line 1722
  flush_signals(tmp___3);
#line 1724
  tmp___4 = mdev_to_minor(mdev);
#line 1724
  nt = kthread_create_on_node(& drbd_thread_setup, (void *)thi, -1, "drbd%d_%s", tmp___4,
                              me);
#line 1727
  tmp___5 = IS_ERR((void const   *)nt);
#line 1727
  if (tmp___5 != 0L) {
#line 1728
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1730
    ldv_module_put_5(& __this_module);
#line 1731
    return (0);
  } else {

  }
#line 1733
  tmp___6 = spinlock_check(& thi->t_lock);
#line 1733
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1734
  thi->task = nt;
#line 1735
  thi->t_state = Running;
#line 1736
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1737
  wake_up_process(nt);
#line 1738
  goto ldv_48451;
  case 2U: 
#line 1740
  thi->t_state = Restarting;
#line 1741
  tmp___7 = get_current();
#line 1741
  tmp___8 = get_current();
#line 1741
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___8->comm), tmp___7->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1747
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1748
  goto ldv_48451;
  }
  ldv_48451: ;
#line 1751
  return (1);
}
}
#line 1755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1759
  ns = restart != 0 ? Restarting : Exiting;
#line 1762
  tmp = spinlock_check(& thi->t_lock);
#line 1762
  flags = _raw_spin_lock_irqsave(tmp);
#line 1764
  if ((unsigned int )thi->t_state == 0U) {
#line 1765
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1766
    if (restart != 0) {
#line 1767
      drbd_thread_start(thi);
    } else {

    }
#line 1768
    return;
  } else {

  }
#line 1771
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1772
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1773
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1774
      return;
    } else {

    }
#line 1777
    thi->t_state = ns;
#line 1778
    __asm__  volatile   ("mfence": : : "memory");
#line 1779
    init_completion(& thi->stop);
#line 1780
    tmp___0 = get_current();
#line 1780
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1781
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1785
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1787
  if (wait != 0) {
#line 1788
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1789
  return;
}
}
#line 1799 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1804
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1804
  if (tmp != 0U) {
#line 1805
    return;
  } else {

  }
#line 1807
  tmp___0 = mdev_to_minor(mdev);
#line 1807
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1807
  ord = (int )(tmp___0 % tmp___1);
#line 1808
  cpu = -1;
#line 1808
  goto ldv_48472;
  ldv_48471: 
#line 1809
  tmp___2 = ord;
#line 1809
  ord = ord - 1;
#line 1809
  if (tmp___2 == 0) {
#line 1810
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1811
    return;
  } else {

  }
  ldv_48472: 
#line 1808
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1808
  cpu = (int )tmp___3;
#line 1808
  if (cpu < nr_cpu_ids) {
#line 1809
    goto ldv_48471;
  } else {

  }
#line 1815
  cpumask_setall(mdev->cpu_mask);
#line 1816
  return;
}
}
#line 1825 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 1827
  tmp = get_current();
#line 1827
  p = tmp;
#line 1828
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1833
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1833
  if (_b != 0) {
#line 1833
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1833);
  } else {

  }
#line 1833
  if (_b != 0) {
#line 1834
    return;
  } else {

  }
#line 1835
  if (thi->reset_cpu_mask == 0) {
#line 1836
    return;
  } else {

  }
#line 1837
  thi->reset_cpu_mask = 0;
#line 1838
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1839
  return;
}
}
#line 1843 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 1849
  _b = (unsigned long )h == (unsigned long )((struct p_header80 *)0);
#line 1849
  if (_b != 0) {
#line 1849
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1849);
  } else {

  }
#line 1849
  if (_b != 0) {
#line 1849
    return (0);
  } else {

  }
#line 1850
  _b___0 = size == 0UL;
#line 1850
  if (_b___0 != 0) {
#line 1850
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1850);
  } else {

  }
#line 1850
  if (_b___0 != 0) {
#line 1850
    return (0);
  } else {

  }
#line 1852
  h->magic = 1728214147U;
#line 1853
  tmp = __fswab16((int )((__u16 )cmd));
#line 1853
  h->command = tmp;
#line 1854
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1854
  h->length = tmp___0;
#line 1856
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1858
  ok = (size_t )sent == size;
#line 1859
  if (ok == 0) {
#line 1859
    tmp___2 = get_current();
#line 1859
    tmp___3 = signal_pending(tmp___2);
#line 1859
    if (tmp___3 == 0) {
#line 1860
      tmp___1 = cmdname(cmd);
#line 1860
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
               tmp___1, (int )size, sent);
    } else {

    }
  } else {

  }
#line 1862
  return (ok);
}
}
#line 1868 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1871
  ok = 0;
#line 1874
  if (use_data_socket != 0) {
#line 1875
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1876
    sock = mdev->data.socket;
  } else {
#line 1878
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 1879
    sock = mdev->meta.socket;
  }
#line 1884
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1884
  if (tmp != 0L) {
#line 1885
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1887
  if (use_data_socket != 0) {
#line 1888
    mutex_unlock(& mdev->data.mutex);
  } else {
#line 1890
    mutex_unlock(& mdev->meta.mutex);
  }
#line 1891
  return (ok);
}
}
#line 1894 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header80 h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1900
  h.magic = 1728214147U;
#line 1901
  tmp = __fswab16((int )((__u16 )cmd));
#line 1901
  h.command = tmp;
#line 1902
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1902
  h.length = tmp___0;
#line 1904
  tmp___1 = drbd_get_data_sock(mdev);
#line 1904
  if (tmp___1 == 0) {
#line 1905
    return (0);
  } else {

  }
#line 1907
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1907
  ok = tmp___2 == 8;
#line 1909
  if (ok != 0) {
#line 1909
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1909
    if ((size_t )tmp___3 == size) {
#line 1909
      tmp___4 = 1;
    } else {
#line 1909
      tmp___4 = 0;
    }
  } else {
#line 1909
    tmp___4 = 0;
  }
#line 1909
  ok = tmp___4;
#line 1912
  drbd_put_data_sock(mdev);
#line 1914
  return (ok);
}
}
#line 1917 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_95 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  long tmp___6 ;

  {
#line 1922
  apv = mdev->agreed_pro_version;
#line 1924
  if (apv > 87) {
#line 1924
    if (apv == 88) {
#line 1924
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1924
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1924
      tmp___0 = apv <= 94 ? 140 : 156;
    }
#line 1924
    size = tmp___0;
  } else {
#line 1924
    size = 12;
  }
#line 1933
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1934
  sock = mdev->data.socket;
#line 1936
  tmp___6 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1936
  if (tmp___6 != 0L) {
#line 1937
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1939
    p = & mdev->data.sbuf.rs_param_95;
#line 1942
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1944
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1944
    p->rate = tmp___1;
#line 1945
    tmp___2 = __fswab32((__u32 )sc->c_plan_ahead);
#line 1945
    p->c_plan_ahead = tmp___2;
#line 1946
    tmp___3 = __fswab32((__u32 )sc->c_delay_target);
#line 1946
    p->c_delay_target = tmp___3;
#line 1947
    tmp___4 = __fswab32((__u32 )sc->c_fill_target);
#line 1947
    p->c_fill_target = tmp___4;
#line 1948
    tmp___5 = __fswab32((__u32 )sc->c_max_rate);
#line 1948
    p->c_max_rate = tmp___5;
#line 1950
    if (apv > 87) {
#line 1951
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1952
    if (apv > 88) {
#line 1953
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1955
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1957
    rv = 0;
  }
#line 1959
  mutex_unlock(& mdev->data.mutex);
#line 1961
  return (rv);
}
}
#line 1964 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 1969
  size = 32;
#line 1971
  if (mdev->agreed_pro_version > 86) {
#line 1972
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1972
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1976
  tmp___0 = kmalloc((size_t )size, 16U);
#line 1976
  p = (struct p_protocol *)tmp___0;
#line 1977
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1978
    return (0);
  } else {

  }
#line 1980
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1980
  p->protocol = tmp___1;
#line 1981
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1981
  p->after_sb_0p = tmp___2;
#line 1982
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1982
  p->after_sb_1p = tmp___3;
#line 1983
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1983
  p->after_sb_2p = tmp___4;
#line 1984
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1984
  p->two_primaries = tmp___5;
#line 1986
  cf = 0;
#line 1987
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 1988
    cf = cf | 1;
  } else {

  }
#line 1989
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 1990
    if (mdev->agreed_pro_version > 91) {
#line 1991
      cf = cf | 2;
    } else {
#line 1993
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 1994
      kfree((void const   *)p);
#line 1995
      return (-1);
    }
  } else {

  }
#line 1998
  tmp___6 = __fswab32((__u32 )cf);
#line 1998
  p->conn_flags = tmp___6;
#line 2000
  if (mdev->agreed_pro_version > 86) {
#line 2001
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 2003
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header80 *)p, (size_t )size);
#line 2005
  kfree((void const   *)p);
#line 2006
  return (rv);
}
}
#line 2009 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 2014
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2014
  if (tmp == 0) {
#line 2015
    return (1);
  } else {

  }
#line 2017
  i = 0;
#line 2017
  goto ldv_48538;
  ldv_48537: ;
#line 2018
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 2018
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 2018
    p.uuid[i] = tmp___0;
  } else {
#line 2018
    p.uuid[i] = 0ULL;
  }
#line 2017
  i = i + 1;
  ldv_48538: ;
#line 2017
  if (i <= 3) {
#line 2018
    goto ldv_48537;
  } else {

  }
#line 2020
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 2021
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 2021
  p.uuid[4] = tmp___1;
#line 2022
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 2023
  tmp___2 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 2023
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 2024
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 2273UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 2025
  tmp___3 = __fswab64(uuid_flags);
#line 2025
  p.uuid[5] = tmp___3;
#line 2027
  put_ldev(mdev);
#line 2029
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header80 *)(& p), 56UL);
#line 2029
  return (tmp___4);
}
}
#line 2033 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2035
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 2035
  return (tmp);
}
}
#line 2038 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2040
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 2040
  return (tmp);
}
}
#line 2043 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) 
{ 
  u64 *uuid ;
  int tmp ;

  {
#line 2045
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2045
  if (tmp != 0) {
#line 2046
    uuid = (u64 *)(& (mdev->ldev)->md.uuid);
#line 2047
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX\n",
              text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL));
#line 2053
    put_ldev(mdev);
  } else {
#line 2055
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s effective data uuid: %016llX\n",
              text, mdev->ed_uuid);
  }
#line 2056
  return;
}
}
#line 2061 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) 
{ 
  struct p_rs_uuid p ;
  u64 uuid ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 2066
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 16U) {
#line 2066
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2066);
  } else {

  }
#line 2068
  uuid = (mdev->ldev)->md.uuid[1] + 281474976710656ULL;
#line 2069
  drbd_uuid_set(mdev, 1, uuid);
#line 2070
  drbd_print_uuids(mdev, "updated sync UUID");
#line 2071
  drbd_md_sync(mdev);
#line 2072
  tmp = __fswab64(uuid);
#line 2072
  p.uuid = tmp;
#line 2074
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header80 *)(& p), 16UL);
#line 2074
  return (tmp___0);
}
}
#line 2078 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int max_bio_size ;
  int ok ;
  unsigned int tmp ;
  int __min1 ;
  int __min2 ;
  int tmp___0 ;
  __u64 tmp___1 ;
  __u64 tmp___2 ;
  sector_t tmp___3 ;
  __u64 tmp___4 ;
  __u64 tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 2085
  tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2085
  if (tmp___0 != 0) {
#line 2086
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 2086
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              2086);
    } else {

    }
#line 2087
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 2088
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2089
    q_order_type = drbd_queue_order_type(mdev);
#line 2090
    tmp = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 2090
    max_bio_size = (int )(tmp << 9);
#line 2091
    __min1 = max_bio_size;
#line 2091
    __min2 = 131072;
#line 2091
    max_bio_size = __min1 < __min2 ? __min1 : __min2;
#line 2092
    put_ldev(mdev);
  } else {
#line 2094
    d_size = 0UL;
#line 2095
    u_size = 0UL;
#line 2096
    q_order_type = 0;
#line 2097
    max_bio_size = 131072;
  }
#line 2100
  tmp___1 = __fswab64((__u64 )d_size);
#line 2100
  p.d_size = tmp___1;
#line 2101
  tmp___2 = __fswab64((__u64 )u_size);
#line 2101
  p.u_size = tmp___2;
#line 2102
  if (trigger_reply == 0) {
#line 2102
    tmp___3 = drbd_get_capacity(mdev->this_bdev);
#line 2102
    tmp___4 = (__u64 )tmp___3;
  } else {
#line 2102
    tmp___4 = 0ULL;
  }
#line 2102
  tmp___5 = __fswab64(tmp___4);
#line 2102
  p.c_size = tmp___5;
#line 2103
  tmp___6 = __fswab32((__u32 )max_bio_size);
#line 2103
  p.max_bio_size = tmp___6;
#line 2104
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 2104
  p.queue_order_type = tmp___7;
#line 2105
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 2105
  p.dds_flags = tmp___8;
#line 2107
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header80 *)(& p), 40UL);
#line 2109
  return (ok);
}
}
#line 2116 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 2120
  ok = 0;
#line 2124
  drbd_state_lock___0(mdev);
#line 2126
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2128
  tmp = __fswab32(mdev->state.i);
#line 2128
  p.state = tmp;
#line 2129
  sock = mdev->data.socket;
#line 2131
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2131
  if (tmp___0 != 0L) {
#line 2132
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2136
  mutex_unlock(& mdev->data.mutex);
#line 2138
  drbd_state_unlock(mdev);
#line 2139
  return (ok);
}
}
#line 2142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2147
  tmp = __fswab32(mask.i);
#line 2147
  p.mask = tmp;
#line 2148
  tmp___0 = __fswab32(val.i);
#line 2148
  p.val = tmp___0;
#line 2150
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header80 *)(& p), 16UL);
#line 2150
  return (tmp___1);
}
}
#line 2154 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2158
  tmp = __fswab32((__u32 )retcode);
#line 2158
  p.retcode = tmp;
#line 2160
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header80 *)(& p),
                          12UL);
#line 2160
  return (tmp___0);
}
}
#line 2164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2177
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 2179
    return (0);
  } else {

  }
#line 2181
  if (c->bit_offset >= c->bm_bits) {
#line 2182
    return (0);
  } else {

  }
#line 2185
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 2186
  memset((void *)(& p->code), 0, 4087UL);
#line 2188
  plain_bits = 0UL;
#line 2193
  toggle = 2U;
  ldv_48601: ;
#line 2198
  if (toggle == 0U) {
#line 2198
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 2198
    tmp = tmp___0;
  } else {
#line 2198
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 2198
    tmp = tmp___1;
  }
#line 2200
  if (tmp == 0xffffffffffffffffUL) {
#line 2201
    tmp = c->bm_bits;
  } else {

  }
#line 2202
  rl = tmp - c->bit_offset;
#line 2204
  if (toggle == 2U) {
#line 2205
    if (rl == 0UL) {
#line 2208
      DCBP_set_start(p, 1);
#line 2210
      toggle = toggle == 0U;
#line 2211
      goto ldv_48599;
    } else {

    }
#line 2213
    DCBP_set_start(p, 0);
  } else {

  }
#line 2218
  if (rl == 0UL) {
#line 2219
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 2221
    return (-1);
  } else {

  }
#line 2224
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 2225
  if (bits == -105) {
#line 2226
    goto ldv_48600;
  } else {

  }
#line 2227
  if (bits <= 0) {
#line 2228
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 2229
    return (0);
  } else {

  }
#line 2232
  toggle = toggle == 0U;
#line 2233
  plain_bits = plain_bits + rl;
#line 2234
  c->bit_offset = tmp;
  ldv_48599: ;
#line 2235
  if (c->bit_offset < c->bm_bits) {
#line 2236
    goto ldv_48601;
  } else {

  }
  ldv_48600: 
#line 2237
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 2239
  if ((unsigned long )(len << 3) > plain_bits) {
#line 2242
    c->bit_offset = c->bit_offset - plain_bits;
#line 2243
    bm_xfer_ctx_bit_to_word_offset(c);
#line 2244
    c->bit_offset = c->word_offset * 64UL;
#line 2245
    return (0);
  } else {

  }
#line 2250
  bm_xfer_ctx_bit_to_word_offset(c);
#line 2253
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 2255
  return ((int )len);
}
}
#line 2265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header80 *h ,
                                    struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2268
  p = (struct p_compressed_bm *)h;
#line 2273
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2275
  if (len < 0) {
#line 2276
    return (-5);
  } else {

  }
#line 2278
  if (len != 0) {
#line 2279
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2280
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2283
    c->packets[0] = c->packets[0] + 1U;
#line 2284
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2286
    if (c->bit_offset >= c->bm_bits) {
#line 2287
      len = 0;
    } else {

    }
  } else {
#line 2291
    __min1 = 511UL;
#line 2291
    __min2 = c->bm_words - c->word_offset;
#line 2291
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2292
    len = (int )((unsigned int )num_words * 8U);
#line 2293
    if (len != 0) {
#line 2294
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2295
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2297
    c->word_offset = c->word_offset + num_words;
#line 2298
    c->bit_offset = c->word_offset * 64UL;
#line 2300
    c->packets[1] = c->packets[1] + 1U;
#line 2301
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2303
    if (c->bit_offset > c->bm_bits) {
#line 2304
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2306
  if (ok != 0) {
#line 2307
    if (len == 0) {
#line 2308
      INFO_bm_xfer_stats(mdev, "send", c);
#line 2309
      return (0);
    } else {
#line 2311
      return (1);
    }
  } else {

  }
#line 2313
  return (-5);
}
}
#line 2317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header80 *p ;
  int err ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;

  {
#line 2323
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2323
  if (_b != 0) {
#line 2323
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2323);
  } else {

  }
#line 2323
  if (_b != 0) {
#line 2323
    return (0);
  } else {

  }
#line 2327
  tmp = __get_free_pages(16U, 0U);
#line 2327
  p = (struct p_header80 *)tmp;
#line 2328
  if ((unsigned long )p == (unsigned long )((struct p_header80 *)0)) {
#line 2329
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2330
    return (0);
  } else {

  }
#line 2333
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2333
  if (tmp___2 != 0) {
#line 2334
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2334
    if (tmp___1 != 0) {
#line 2335
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2336
      drbd_bm_set_all(mdev);
#line 2337
      tmp___0 = drbd_bm_write(mdev);
#line 2337
      if (tmp___0 != 0) {
#line 2341
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2343
        drbd_md_clear_flag(mdev, 8);
#line 2344
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2347
    put_ldev(mdev);
  } else {

  }
#line 2350
  tmp___3 = drbd_bm_bits(mdev);
#line 2350
  tmp___4 = drbd_bm_words(mdev);
#line 2350
  __constr_expr_0.bm_bits = tmp___3;
#line 2350
  __constr_expr_0.bm_words = tmp___4;
#line 2350
  __constr_expr_0.bit_offset = 0UL;
#line 2350
  __constr_expr_0.word_offset = 0UL;
#line 2350
  __constr_expr_0.packets[0] = 0U;
#line 2350
  __constr_expr_0.packets[1] = 0U;
#line 2350
  __constr_expr_0.bytes[0] = 0U;
#line 2350
  __constr_expr_0.bytes[1] = 0U;
#line 2350
  c = __constr_expr_0;
  ldv_48624: 
#line 2356
  err = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2357
  if (err > 0) {
#line 2358
    goto ldv_48624;
  } else {

  }
#line 2359
  free_pages((unsigned long )p, 0U);
#line 2360
  return (err == 0);
}
}
#line 2363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2367
  tmp = drbd_get_data_sock(mdev);
#line 2367
  if (tmp == 0) {
#line 2368
    return (-1);
  } else {

  }
#line 2369
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2369
  err = tmp___0 == 0;
#line 2370
  drbd_put_data_sock(mdev);
#line 2371
  return (err);
}
}
#line 2374 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2379
  p.barrier = barrier_nr;
#line 2380
  tmp = __fswab32(set_size);
#line 2380
  p.set_size = tmp;
#line 2382
  if ((int )mdev->state.ldv_37520.conn <= 9) {
#line 2383
    return (0);
  } else {

  }
#line 2384
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header80 *)(& p), 16UL);
#line 2386
  return (ok);
}
}
#line 2397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2405
  p.sector = sector;
#line 2406
  p.block_id = block_id;
#line 2407
  p.blksize = blksize;
#line 2408
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2408
  tmp___0 = __fswab32((__u32 )tmp);
#line 2408
  p.seq_num = tmp___0;
#line 2410
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_37520.conn <= 9) {
#line 2411
    return (0);
  } else {

  }
#line 2412
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header80 *)(& p), 32UL);
#line 2414
  return (ok);
}
}
#line 2420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 2423
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2423
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 2423
    tmp___0 = tmp;
  } else {
#line 2423
    tmp___0 = 0U;
  }
#line 2423
  data_size = (int )((unsigned int )data_size - tmp___0);
#line 2425
  tmp___1 = __fswab32((__u32 )data_size);
#line 2425
  tmp___2 = _drbd_send_ack(mdev, cmd, dp->sector, tmp___1, dp->block_id);
#line 2425
  return (tmp___2);
}
}
#line 2429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2432
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2432
  return (tmp);
}
}
#line 2441 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2444
  tmp = __fswab32(e->size);
#line 2444
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2444
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->ldv_45720.block_id);
#line 2444
  return (tmp___1);
}
}
#line 2452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2455
  tmp = __fswab64(block_id);
#line 2455
  tmp___0 = __fswab32((__u32 )blksize);
#line 2455
  tmp___1 = __fswab64((__u64 )sector);
#line 2455
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2455
  return (tmp___2);
}
}
#line 2461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2467
  tmp = __fswab64((__u64 )sector);
#line 2467
  p.sector = tmp;
#line 2468
  p.block_id = block_id;
#line 2469
  tmp___0 = __fswab32((__u32 )size);
#line 2469
  p.blksize = tmp___0;
#line 2471
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header80 *)(& p),
                     32UL);
#line 2473
  return (ok);
}
}
#line 2476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2484
  tmp = __fswab64((__u64 )sector);
#line 2484
  p.sector = tmp;
#line 2485
  p.block_id = 1728263026ULL;
#line 2486
  tmp___0 = __fswab32((__u32 )size);
#line 2486
  p.blksize = tmp___0;
#line 2488
  p.head.magic = 1728214147U;
#line 2489
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2489
  p.head.command = tmp___1;
#line 2490
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2490
  p.head.length = tmp___2;
#line 2492
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2494
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2494
  ok = tmp___3 == 32;
#line 2495
  if (ok != 0) {
#line 2495
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2495
    if (tmp___4 == digest_size) {
#line 2495
      tmp___5 = 1;
    } else {
#line 2495
      tmp___5 = 0;
    }
  } else {
#line 2495
    tmp___5 = 0;
  }
#line 2495
  ok = tmp___5;
#line 2497
  mutex_unlock(& mdev->data.mutex);
#line 2499
  return (ok);
}
}
#line 2502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2507
  tmp = __fswab64((__u64 )sector);
#line 2507
  p.sector = tmp;
#line 2508
  p.block_id = 1728261953ULL;
#line 2509
  tmp___0 = __fswab32((__u32 )size);
#line 2509
  p.blksize = tmp___0;
#line 2511
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header80 *)(& p), 32UL);
#line 2513
  return (ok);
}
}
#line 2520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2525
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2525
    tmp___0 = 1;
  } else {
#line 2525
    tmp = get_t_state(& mdev->asender);
#line 2525
    if ((unsigned int )tmp != 1U) {
#line 2525
      tmp___0 = 1;
    } else
#line 2525
    if ((int )mdev->state.ldv_37520.conn <= 9) {
#line 2525
      tmp___0 = 1;
    } else {
#line 2525
      tmp___0 = 0;
    }
  }
#line 2525
  drop_it = tmp___0;
#line 2530
  if (drop_it != 0) {
#line 2531
    return (1);
  } else {

  }
#line 2533
  mdev->ko_count = mdev->ko_count - 1U;
#line 2533
  drop_it = mdev->ko_count == 0U;
#line 2534
  if (drop_it == 0) {
#line 2535
    tmp___1 = get_current();
#line 2535
    tmp___2 = get_current();
#line 2535
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2537
    request_ping(mdev);
  } else {

  }
#line 2540
  return (drop_it);
}
}
#line 2564 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2567
  tmp = kmap(page);
#line 2567
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2567
  sent = tmp___0;
#line 2568
  kunmap(page);
#line 2569
  if ((size_t )sent == size) {
#line 2570
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2571
  return ((size_t )sent == size);
}
}
#line 2574 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2577
  tmp = current_thread_info();
#line 2577
  oldfs = tmp->addr_limit;
#line 2579
  len = (int )size;
#line 2587
  if (disable_sendpage != 0) {
#line 2588
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2588
    return (tmp___0);
  } else {
#line 2587
    tmp___1 = page_count(page);
#line 2587
    if (tmp___1 <= 0) {
#line 2588
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2588
      return (tmp___0);
    } else {
#line 2587
      tmp___2 = PageSlab(page);
#line 2587
      if (tmp___2 != 0) {
#line 2588
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2588
        return (tmp___0);
      } else {

      }
    }
  }
#line 2590
  msg_flags = msg_flags | 16384U;
#line 2591
  drbd_update_congested(mdev);
#line 2592
  tmp___3 = current_thread_info();
#line 2592
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2592
  tmp___3->addr_limit = __constr_expr_0;
  ldv_48723: 
#line 2594
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2594
  sent = (int )tmp___4;
#line 2597
  if (sent == -11) {
#line 2598
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2598
    if (tmp___5 != 0) {
#line 2600
      goto ldv_48720;
    } else {
#line 2602
      goto ldv_48721;
    }
  } else {

  }
#line 2604
  if (sent <= 0) {
#line 2605
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2607
    goto ldv_48720;
  } else {

  }
#line 2609
  len = len - sent;
#line 2610
  offset = offset + sent;
  ldv_48721: ;
#line 2611
  if (len > 0) {
#line 2612
    goto ldv_48723;
  } else {

  }
  ldv_48720: 
#line 2612
  tmp___6 = current_thread_info();
#line 2612
  tmp___6->addr_limit = oldfs;
#line 2613
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2615
  ok = len == 0;
#line 2616
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2616
  if (tmp___7 != 0L) {
#line 2617
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2618
  return (ok);
}
}
#line 2621 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2626
  bvec = bio->bi_io_vec;
#line 2626
  i = 0;
#line 2626
  goto ldv_48731;
  ldv_48730: 
#line 2627
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2627
  if (tmp == 0) {
#line 2630
    return (0);
  } else {

  }
#line 2626
  bvec = bvec + 1;
#line 2626
  i = i + 1;
  ldv_48731: ;
#line 2626
  if ((int )bio->bi_vcnt > i) {
#line 2627
    goto ldv_48730;
  } else {

  }

#line 2632
  return (1);
}
}
#line 2635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2640
  bvec = bio->bi_io_vec;
#line 2640
  i = 0;
#line 2640
  goto ldv_48740;
  ldv_48739: 
#line 2641
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2641
  if (tmp == 0) {
#line 2644
    return (0);
  } else {

  }
#line 2640
  bvec = bvec + 1;
#line 2640
  i = i + 1;
  ldv_48740: ;
#line 2640
  if ((int )bio->bi_vcnt > i) {
#line 2641
    goto ldv_48739;
  } else {

  }

#line 2646
  return (1);
}
}
#line 2649 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2651
  page = e->pages;
#line 2652
  len = e->size;
#line 2654
  goto ldv_48754;
  ldv_48753: 
#line 2655
  __min1 = len;
#line 2655
  __min2 = 4096U;
#line 2655
  l = __min1 < __min2 ? __min1 : __min2;
#line 2656
  tmp = page_chain_next(page);
#line 2656
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2656
  if (tmp___0 == 0) {
#line 2658
    return (0);
  } else {

  }
#line 2659
  len = len - l;
#line 2654
  page = page_chain_next(page);
  ldv_48754: ;
#line 2654
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2654
    tmp___1 = page_chain_next(page);
#line 2654
    __builtin_prefetch((void const   *)tmp___1);
#line 2654
    if (1 != 0) {
#line 2655
      goto ldv_48753;
    } else {
#line 2657
      goto ldv_48755;
    }
  } else {

  }
  ldv_48755: ;
#line 2661
  return (1);
}
}
#line 2664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static u32 bio_flags_to_wire(struct drbd_conf *mdev , unsigned long bi_rw ) 
{ 


  {
#line 2666
  if (mdev->agreed_pro_version > 94) {
#line 2667
    return ((u32 )(((((bi_rw & 16UL) != 0UL ? 2 : 0) | ((bi_rw & 4096UL) != 0UL ? 16 : 0)) | ((bi_rw & 8388608UL) != 0UL ? 32 : 0)) | ((int )bi_rw & 64)));
  } else {
#line 2672
    return ((bi_rw & 16UL) != 0UL ? 2U : 0U);
  }
}
}
#line 2678 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char digest[64U] ;
  int tmp___9 ;

  {
#line 2680
  ok = 1;
#line 2682
  dp_flags = 0U;
#line 2686
  tmp = drbd_get_data_sock(mdev);
#line 2686
  if (tmp == 0) {
#line 2687
    return (0);
  } else {

  }
#line 2689
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2689
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2689
    dgs = (int )tmp___0;
  } else {
#line 2689
    dgs = 0;
  }
#line 2692
  if (req->size <= 32768U) {
#line 2693
    p.head.h80.magic = 1728214147U;
#line 2694
    p.head.h80.command = 0U;
#line 2695
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2695
    p.head.h80.length = tmp___1;
  } else {
#line 2698
    p.head.h95.magic = 23171U;
#line 2699
    p.head.h95.command = 0U;
#line 2700
    tmp___2 = __fswab32((req->size + (__u32 )dgs) + 24U);
#line 2700
    p.head.h95.length = tmp___2;
  }
#line 2704
  tmp___3 = __fswab64((__u64 )req->sector);
#line 2704
  p.sector = tmp___3;
#line 2705
  p.block_id = (u64 )req;
#line 2706
  tmp___4 = atomic_add_return(1, & mdev->packet_seq);
#line 2706
  req->seq_num = tmp___4;
#line 2706
  tmp___5 = __fswab32((__u32 )tmp___4);
#line 2706
  p.seq_num = tmp___5;
#line 2709
  dp_flags = bio_flags_to_wire(mdev, (req->master_bio)->bi_rw);
#line 2711
  if ((int )mdev->state.ldv_37520.conn > 15 && (int )mdev->state.ldv_37520.conn <= 21) {
#line 2713
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2715
  tmp___6 = __fswab32(dp_flags);
#line 2715
  p.dp_flags = tmp___6;
#line 2716
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 2717
  tmp___7 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2717
  ok = tmp___7 == 32;
#line 2719
  if (ok != 0 && dgs != 0) {
#line 2720
    dgb = mdev->int_dig_out;
#line 2721
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2722
    tmp___8 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 2722
    ok = tmp___8 == dgs;
  } else {

  }
#line 2724
  if (ok != 0) {
#line 2736
    if ((mdev->net_conf)->wire_protocol == 1 || dgs != 0) {
#line 2737
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2739
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
#line 2742
    if (dgs > 0 && dgs <= 64) {
#line 2746
      drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, (void *)(& digest));
#line 2747
      tmp___9 = memcmp((void const   *)mdev->int_dig_out, (void const   *)(& digest),
                       (size_t )dgs);
#line 2747
      if (tmp___9 != 0) {
#line 2748
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest mismatch, buffer modified by upper layers during write: %llus +%u\n",
                 (unsigned long long )req->sector, req->size);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2757
  drbd_put_data_sock(mdev);
#line 2759
  return (ok);
}
}
#line 2766 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u64 tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 2774
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2774
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2774
    dgs = (int )tmp;
  } else {
#line 2774
    dgs = 0;
  }
#line 2777
  if (e->size <= 32768U) {
#line 2778
    p.head.h80.magic = 1728214147U;
#line 2779
    tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2779
    p.head.h80.command = tmp___0;
#line 2780
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2780
    p.head.h80.length = tmp___1;
  } else {
#line 2783
    p.head.h95.magic = 23171U;
#line 2784
    tmp___2 = __fswab16((int )((__u16 )cmd));
#line 2784
    p.head.h95.command = tmp___2;
#line 2785
    tmp___3 = __fswab32((e->size + (__u32 )dgs) + 24U);
#line 2785
    p.head.h95.length = tmp___3;
  }
#line 2789
  tmp___4 = __fswab64((__u64 )e->sector);
#line 2789
  p.sector = tmp___4;
#line 2790
  p.block_id = e->ldv_45720.block_id;
#line 2797
  tmp___5 = drbd_get_data_sock(mdev);
#line 2797
  if (tmp___5 == 0) {
#line 2798
    return (0);
  } else {

  }
#line 2800
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2800
  ok = tmp___6 == 32;
#line 2801
  if (ok != 0 && dgs != 0) {
#line 2802
    dgb = mdev->int_dig_out;
#line 2803
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 2804
    tmp___7 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 2804
    ok = tmp___7 == dgs;
  } else {

  }
#line 2806
  if (ok != 0) {
#line 2807
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 2809
  drbd_put_data_sock(mdev);
#line 2811
  return (ok);
}
}
#line 2814 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  struct p_block_desc p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2818
  tmp = __fswab64((__u64 )req->sector);
#line 2818
  p.sector = tmp;
#line 2819
  tmp___0 = __fswab32(req->size);
#line 2819
  p.blksize = tmp___0;
#line 2821
  tmp___1 = drbd_send_cmd(mdev, 1, P_OUT_OF_SYNC, & p.head, 24UL);
#line 2821
  return (tmp___1);
}
}
#line 2840 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2845
  sent = 0;
#line 2847
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2848
    return (-1000);
  } else {

  }
#line 2852
  iov.iov_base = buf;
#line 2853
  iov.iov_len = size;
#line 2855
  msg.msg_name = 0;
#line 2856
  msg.msg_namelen = 0;
#line 2857
  msg.msg_control = 0;
#line 2858
  msg.msg_controllen = 0UL;
#line 2859
  msg.msg_flags = msg_flags | 16384U;
#line 2861
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2862
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2863
    drbd_update_congested(mdev);
  } else {

  }
  ldv_48797: 
#line 2875
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2876
  if (rv == -11) {
#line 2877
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2877
    if (tmp != 0) {
#line 2878
      goto ldv_48795;
    } else {
#line 2880
      goto ldv_48796;
    }
  } else {

  }
#line 2882
  if (rv == 0) {
#line 2882
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2882);
  } else {

  }
#line 2883
  if (rv == -4) {
#line 2884
    tmp___0 = get_current();
#line 2884
    flush_signals(tmp___0);
#line 2885
    rv = 0;
  } else {

  }
#line 2887
  if (rv < 0) {
#line 2888
    goto ldv_48795;
  } else {

  }
#line 2889
  sent = sent + rv;
#line 2890
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2891
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_48796: ;
#line 2892
  if ((size_t )sent < size) {
#line 2893
    goto ldv_48797;
  } else {

  }
  ldv_48795: ;
#line 2894
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2895
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2897
  if (rv <= 0) {
#line 2898
    if (rv != -11) {
#line 2899
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 2902
      val.i = 0U;
#line 2902
      val.ldv_37520.conn = 4U;
#line 2902
      mask.i = 0U;
#line 2902
      mask.ldv_37520.conn = 31U;
#line 2902
      drbd_force_state(mdev, mask, val);
    } else {
#line 2904
      val___0.i = 0U;
#line 2904
      val___0.ldv_37520.conn = 3U;
#line 2904
      mask___0.i = 0U;
#line 2904
      mask___0.ldv_37520.conn = 31U;
#line 2904
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2907
  return (sent);
}
}
#line 2910 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2912
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2914
  rv = 0;
#line 2916
  mutex_lock_nested(& drbd_main_mutex, 0U);
#line 2917
  tmp = spinlock_check(& mdev->req_lock);
#line 2917
  flags = _raw_spin_lock_irqsave(tmp);
#line 2921
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 2922
    if ((mode & 2U) != 0U) {
#line 2923
      rv = -30;
    } else
#line 2924
    if (allow_oos == 0) {
#line 2925
      rv = -124;
    } else {

    }
  } else {

  }
#line 2928
  if (rv == 0) {
#line 2929
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2930
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2931
  mutex_unlock(& drbd_main_mutex);
#line 2933
  return (rv);
}
}
#line 2936 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2938
  mdev = (struct drbd_conf *)gd->private_data;
#line 2939
  mutex_lock_nested(& drbd_main_mutex, 0U);
#line 2940
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2941
  mutex_unlock(& drbd_main_mutex);
#line 2942
  return (0);
}
}
#line 2945 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 2949
  __constr_expr_0.rate = 250;
#line 2949
  __constr_expr_0.after = -1;
#line 2949
  __constr_expr_0.al_extents = 127;
#line 2949
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg_len = 0;
#line 2949
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask_len = 0;
#line 2949
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg_len = 0;
#line 2949
  __constr_expr_0.use_rle = 0U;
#line 2949
  __constr_expr_0.on_no_data = 0;
#line 2949
  __constr_expr_0.c_plan_ahead = 0;
#line 2949
  __constr_expr_0.c_delay_target = 10;
#line 2949
  __constr_expr_0.c_fill_target = 0;
#line 2949
  __constr_expr_0.c_max_rate = 102400;
#line 2949
  __constr_expr_0.c_min_rate = 4096;
#line 2949
  mdev->sync_conf = __constr_expr_0;
#line 2967
  __constr_expr_1.ldv_37520.role = 2U;
#line 2967
  __constr_expr_1.ldv_37520.peer = 0U;
#line 2967
  __constr_expr_1.ldv_37520.conn = 0U;
#line 2967
  __constr_expr_1.ldv_37520.disk = 0U;
#line 2967
  __constr_expr_1.ldv_37520.pdsk = 6U;
#line 2967
  __constr_expr_1.ldv_37520.susp = 0U;
#line 2967
  __constr_expr_1.ldv_37520.aftr_isp = (unsigned char)0;
#line 2967
  __constr_expr_1.ldv_37520.peer_isp = (unsigned char)0;
#line 2967
  __constr_expr_1.ldv_37520.user_isp = (unsigned char)0;
#line 2967
  __constr_expr_1.ldv_37520.susp_nod = 0U;
#line 2967
  __constr_expr_1.ldv_37520.susp_fen = 0U;
#line 2967
  __constr_expr_1.ldv_37520._pad = (unsigned short)0;
#line 2967
  mdev->state = __constr_expr_1;
#line 2968
  return;
}
}
#line 2979 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;
  struct lock_class_key __key___17 ;
  struct lock_class_key __key___18 ;

  {
#line 2984
  drbd_set_defaults(mdev);
#line 2986
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2987
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2988
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2989
  atomic_set(& mdev->unacked_cnt, 0);
#line 2990
  atomic_set(& mdev->local_cnt, 0);
#line 2991
  atomic_set(& mdev->net_cnt, 0);
#line 2992
  atomic_set(& mdev->packet_seq, 0);
#line 2993
  atomic_set(& mdev->pp_in_use, 0);
#line 2994
  atomic_set(& mdev->pp_in_use_by_net, 0);
#line 2995
  atomic_set(& mdev->rs_sect_in, 0);
#line 2996
  atomic_set(& mdev->rs_sect_ev, 0);
#line 2997
  atomic_set(& mdev->ap_in_flight, 0);
#line 2999
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 3000
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 3001
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 3002
  sema_init(& mdev->data.work.s, 0);
#line 3003
  sema_init(& mdev->meta.work.s, 0);
#line 3004
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 3006
  spinlock_check(& mdev->data.work.q_lock);
#line 3006
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5956.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 3007
  spinlock_check(& mdev->meta.work.q_lock);
#line 3007
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5956.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 3009
  spinlock_check(& mdev->al_lock);
#line 3009
  __raw_spin_lock_init(& mdev->al_lock.ldv_5956.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 3010
  spinlock_check(& mdev->req_lock);
#line 3010
  __raw_spin_lock_init(& mdev->req_lock.ldv_5956.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 3011
  spinlock_check(& mdev->peer_seq_lock);
#line 3011
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5956.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 3012
  spinlock_check(& mdev->epoch_lock);
#line 3012
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5956.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 3014
  INIT_LIST_HEAD(& mdev->active_ee);
#line 3015
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 3016
  INIT_LIST_HEAD(& mdev->done_ee);
#line 3017
  INIT_LIST_HEAD(& mdev->read_ee);
#line 3018
  INIT_LIST_HEAD(& mdev->net_ee);
#line 3019
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 3020
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 3021
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 3022
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 3023
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 3024
  INIT_LIST_HEAD(& mdev->go_diskless.list);
#line 3025
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 3026
  INIT_LIST_HEAD(& mdev->start_resync_work.list);
#line 3027
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 3029
  mdev->resync_work.cb = & w_resync_timer;
#line 3030
  mdev->unplug_work.cb = & w_send_write_hint;
#line 3031
  mdev->go_diskless.cb = & w_go_diskless;
#line 3032
  mdev->md_sync_work.cb = & w_md_sync;
#line 3033
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 3034
  mdev->start_resync_work.cb = & w_start_resync;
#line 3035
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 3036
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 3037
  init_timer_key(& mdev->start_resync_timer, "&mdev->start_resync_timer", & __key___11);
#line 3038
  init_timer_key(& mdev->request_timer, "&mdev->request_timer", & __key___12);
#line 3039
  mdev->resync_timer.function = & resync_timer_fn;
#line 3040
  mdev->resync_timer.data = (unsigned long )mdev;
#line 3041
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 3042
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 3043
  mdev->start_resync_timer.function = & start_resync_timer_fn;
#line 3044
  mdev->start_resync_timer.data = (unsigned long )mdev;
#line 3045
  mdev->request_timer.function = & request_timer_fn;
#line 3046
  mdev->request_timer.data = (unsigned long )mdev;
#line 3048
  __init_waitqueue_head(& mdev->misc_wait, & __key___13);
#line 3049
  __init_waitqueue_head(& mdev->state_wait, & __key___14);
#line 3050
  __init_waitqueue_head(& mdev->net_cnt_wait, & __key___15);
#line 3051
  __init_waitqueue_head(& mdev->ee_wait, & __key___16);
#line 3052
  __init_waitqueue_head(& mdev->al_wait, & __key___17);
#line 3053
  __init_waitqueue_head(& mdev->seq_wait, & __key___18);
#line 3055
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 3056
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 3057
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 3059
  mdev->agreed_pro_version = 96;
#line 3060
  mdev->write_ordering = WO_bdev_flush;
#line 3061
  mdev->resync_wenr = 4294967295U;
#line 3062
  mdev->peer_max_bio_size = 4096;
#line 3063
  mdev->local_max_bio_size = 4096;
#line 3064
  return;
}
}
#line 3066 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
#line 3069
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 3070
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 3074
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3074
  if (tmp___0 != 0) {
#line 3075
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3075
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 3076
  tmp___9 = 0UL;
#line 3076
  mdev->rs_failed = tmp___9;
#line 3076
  tmp___8 = tmp___9;
#line 3076
  mdev->rs_total = tmp___8;
#line 3076
  tmp___7 = tmp___8;
#line 3076
  mdev->rs_start = tmp___7;
#line 3076
  tmp___6 = tmp___7;
#line 3076
  mdev->p_size = tmp___6;
#line 3076
  tmp___5 = (unsigned int )tmp___6;
#line 3076
  mdev->writ_cnt = tmp___5;
#line 3076
  tmp___4 = tmp___5;
#line 3076
  mdev->send_cnt = tmp___4;
#line 3076
  tmp___3 = tmp___4;
#line 3076
  mdev->recv_cnt = tmp___3;
#line 3076
  tmp___2 = tmp___3;
#line 3076
  mdev->read_cnt = tmp___2;
#line 3076
  tmp___1 = tmp___2;
#line 3076
  mdev->bm_writ_cnt = tmp___1;
#line 3076
  mdev->al_writ_cnt = tmp___1;
#line 3086
  mdev->rs_last_events = 0;
#line 3087
  mdev->rs_last_sect_ev = 0;
#line 3088
  i = 0;
#line 3088
  goto ldv_48854;
  ldv_48853: 
#line 3089
  mdev->rs_mark_left[i] = 0UL;
#line 3090
  mdev->rs_mark_time[i] = 0UL;
#line 3088
  i = i + 1;
  ldv_48854: ;
#line 3088
  if (i <= 7) {
#line 3089
    goto ldv_48853;
  } else {

  }

#line 3092
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 3092
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3092);
  } else {

  }
#line 3094
  drbd_set_my_capacity(mdev, 0UL);
#line 3095
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3097
    drbd_bm_resize(mdev, 0UL, 1);
#line 3098
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3101
  drbd_free_resources(mdev);
#line 3102
  clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 3108
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3108
  if (tmp___10 == 0) {
#line 3108
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3108);
  } else {

  }
#line 3109
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3109
  if (tmp___11 == 0) {
#line 3109
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3109);
  } else {

  }
#line 3110
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3110
  if (tmp___12 == 0) {
#line 3110
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3110);
  } else {

  }
#line 3111
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3111
  if (tmp___13 == 0) {
#line 3111
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3111);
  } else {

  }
#line 3112
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 3112
  if (tmp___14 == 0) {
#line 3112
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3112);
  } else {

  }
#line 3113
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 3113
  if (tmp___15 == 0) {
#line 3113
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3113);
  } else {

  }
#line 3114
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3114
  if (tmp___16 == 0) {
#line 3114
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3114);
  } else {

  }
#line 3115
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 3115
  if (tmp___17 == 0) {
#line 3115
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3115);
  } else {

  }
#line 3116
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 3116
  if (tmp___18 == 0) {
#line 3116
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3116);
  } else {

  }
#line 3117
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 3117
  if (tmp___19 == 0) {
#line 3117
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3117);
  } else {

  }
#line 3118
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->go_diskless.list));
#line 3118
  if (tmp___20 == 0) {
#line 3118
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->go_diskless.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3118);
  } else {

  }
#line 3120
  drbd_set_defaults(mdev);
#line 3121
  return;
}
}
#line 3124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 3128
  goto ldv_48861;
  ldv_48860: 
#line 3129
  page = drbd_pp_pool;
#line 3130
  drbd_pp_pool = (struct page *)page->ldv_13007.ldv_13004.private;
#line 3131
  __free_pages(page, 0U);
#line 3132
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_48861: ;
#line 3128
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 3129
    goto ldv_48860;
  } else {

  }

#line 3137
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 3138
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 3139
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 3140
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 3141
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3142
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 3143
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3144
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 3145
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3146
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 3147
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3148
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 3150
  drbd_ee_mempool = 0;
#line 3151
  drbd_request_mempool = 0;
#line 3152
  drbd_ee_cache = 0;
#line 3153
  drbd_request_cache = 0;
#line 3154
  drbd_bm_ext_cache = 0;
#line 3155
  drbd_al_ext_cache = 0;
#line 3157
  return;
}
}
#line 3160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 3163
  number = (int const   )(minor_count * 32U);
#line 3167
  drbd_request_mempool = 0;
#line 3168
  drbd_ee_cache = 0;
#line 3169
  drbd_request_cache = 0;
#line 3170
  drbd_bm_ext_cache = 0;
#line 3171
  drbd_al_ext_cache = 0;
#line 3172
  drbd_pp_pool = 0;
#line 3175
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 3177
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3178
    goto Enomem;
  } else {

  }
#line 3180
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 3182
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3183
    goto Enomem;
  } else {

  }
#line 3185
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 3187
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3188
    goto Enomem;
  } else {

  }
#line 3190
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 3192
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3193
    goto Enomem;
  } else {

  }
#line 3196
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 3198
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 3199
    goto Enomem;
  } else {

  }
#line 3201
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 3203
  if ((unsigned long )drbd_ee_mempool == (unsigned long )((mempool_t *)0)) {
#line 3204
    goto Enomem;
  } else {

  }
#line 3207
  spinlock_check(& drbd_pp_lock);
#line 3207
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5956.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 3209
  i = 0;
#line 3209
  goto ldv_48872;
  ldv_48871: 
#line 3210
  page = alloc_pages(131282U, 0U);
#line 3211
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 3212
    goto Enomem;
  } else {

  }
#line 3213
  page->ldv_13007.ldv_13004.private = (unsigned long )drbd_pp_pool;
#line 3214
  drbd_pp_pool = page;
#line 3209
  i = i + 1;
  ldv_48872: ;
#line 3209
  if (i < number) {
#line 3210
    goto ldv_48871;
  } else {

  }
#line 3216
  drbd_pp_vacant = number;
#line 3218
  return (0);
  Enomem: 
#line 3221
  drbd_destroy_mempools();
#line 3222
  return (-12);
}
}
#line 3225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 3232
  return (0);
}
}
#line 3235 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 3239 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 3243
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 3244
  if (rr != 0) {
#line 3245
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 3247
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 3248
  if (rr != 0) {
#line 3249
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 3251
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 3252
  if (rr != 0) {
#line 3253
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 3255
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 3256
  if (rr != 0) {
#line 3257
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 3259
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 3260
  if (rr != 0) {
#line 3261
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 3262
  return;
}
}
#line 3266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 3268
  tmp = minor_to_mdev(minor);
#line 3268
  mdev = tmp;
#line 3270
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3271
    return;
  } else {

  }
#line 3274
  if (mdev->open_cnt != 0) {
#line 3275
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3276);
  } else {

  }
#line 3278
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3278
  _b = tmp___0 == 0;
#line 3278
  if (_b != 0) {
#line 3278
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3278);
  } else {

  }
#line 3278
  if (_b != 0) {
#line 3280
    lp = mdev->data.work.q.next;
#line 3280
    goto ldv_48893;
    ldv_48892: 
#line 3281
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 3280
    lp = lp->next;
    ldv_48893: 
#line 3280
    __builtin_prefetch((void const   *)lp->next);
#line 3280
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 3281
      goto ldv_48892;
    } else {

    }

  } else {

  }
#line 3286
  del_gendisk(mdev->vdisk);
#line 3291
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 3292
    bdput(mdev->this_bdev);
  } else {

  }
#line 3294
  drbd_free_resources(mdev);
#line 3296
  drbd_release_ee_lists(mdev);
#line 3299
  kfree((void const   *)mdev->ee_hash);
#line 3305
  lc_destroy(mdev->act_log);
#line 3306
  lc_destroy(mdev->resync);
#line 3308
  kfree((void const   *)mdev->p_uuid);
#line 3311
  kfree((void const   *)mdev->int_dig_out);
#line 3312
  kfree((void const   *)mdev->int_dig_in);
#line 3313
  kfree((void const   *)mdev->int_dig_vv);
#line 3318
  drbd_free_mdev(mdev);
#line 3319
  return;
}
}
#line 3321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3325
  unregister_reboot_notifier(& drbd_notifier);
#line 3335
  if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3336
    remove_proc_entry("drbd", 0);
  } else {

  }
#line 3338
  drbd_nl_cleanup();
#line 3340
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3341
    i = minor_count;
#line 3342
    goto ldv_48900;
    ldv_48899: 
#line 3343
    drbd_delete_device(i);
    ldv_48900: 
#line 3342
    tmp = i;
#line 3342
    i = i - 1U;
#line 3342
    if (tmp != 0U) {
#line 3343
      goto ldv_48899;
    } else {

    }
#line 3344
    drbd_destroy_mempools();
  } else {

  }
#line 3347
  kfree((void const   *)minor_table);
#line 3349
  unregister_blkdev(147U, "drbd");
#line 3351
  printk("<6>drbd: module cleanup done.\n");
#line 3352
  return;
}
}
#line 3361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3363
  mdev = (struct drbd_conf *)congested_data;
#line 3365
  reason = 45;
#line 3366
  r = 0;
#line 3368
  tmp = may_inc_ap_bio___0(mdev);
#line 3368
  if (tmp) {
#line 3368
    tmp___0 = 0;
  } else {
#line 3368
    tmp___0 = 1;
  }
#line 3368
  if (tmp___0) {
#line 3370
    r = bdi_bits;
#line 3371
    reason = 100;
#line 3372
    goto out;
  } else {

  }
#line 3375
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3375
  if (tmp___1 != 0) {
#line 3376
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3377
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3378
    put_ldev(mdev);
#line 3379
    if (r != 0) {
#line 3380
      reason = 98;
    } else {

    }
  } else {

  }
#line 3383
  if ((bdi_bits & 4) != 0) {
#line 3383
    tmp___2 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3383
    if (tmp___2 != 0) {
#line 3384
      r = r | 4;
#line 3385
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3389
  mdev->congestion_reason = reason;
#line 3390
  return (r);
}
}
#line 3393 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3400
  tmp = kzalloc(4848UL, 208U);
#line 3400
  mdev = (struct drbd_conf *)tmp;
#line 3401
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3402
    return (0);
  } else {

  }
#line 3403
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3403
  if (tmp___0) {
#line 3403
    tmp___1 = 0;
  } else {
#line 3403
    tmp___1 = 1;
  }
#line 3403
  if (tmp___1) {
#line 3404
    goto out_no_cpumask;
  } else {

  }
#line 3406
  mdev->minor = minor;
#line 3408
  drbd_init_set_defaults(mdev);
#line 3410
  q = blk_alloc_queue(208U);
#line 3411
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3412
    goto out_no_q;
  } else {

  }
#line 3413
  mdev->rq_queue = q;
#line 3414
  q->queuedata = (void *)mdev;
#line 3416
  disk = alloc_disk(1);
#line 3417
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3418
    goto out_no_disk;
  } else {

  }
#line 3419
  mdev->vdisk = disk;
#line 3421
  set_disk_ro(disk, 1);
#line 3423
  disk->queue = q;
#line 3424
  disk->major = 147;
#line 3425
  disk->first_minor = (int )minor;
#line 3426
  disk->fops = & drbd_ops;
#line 3427
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3428
  disk->private_data = (void *)mdev;
#line 3430
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3432
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3434
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3435
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3437
  blk_queue_make_request(q, & drbd_make_request);
#line 3440
  blk_queue_max_hw_sectors(q, 16U);
#line 3441
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3442
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3443
  q->queue_lock = & mdev->req_lock;
#line 3445
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3446
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3447
    goto out_no_io_page;
  } else {

  }
#line 3449
  tmp___2 = drbd_bm_init(mdev);
#line 3449
  if (tmp___2 != 0) {
#line 3450
    goto out_no_bitmap;
  } else {

  }
#line 3452
  tmp___3 = tl_init(mdev);
#line 3452
  if (tmp___3 == 0) {
#line 3453
    goto out_no_tl;
  } else {

  }
#line 3455
  tmp___4 = kzalloc(120UL, 208U);
#line 3455
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3456
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3457
    goto out_no_app_reads;
  } else {

  }
#line 3459
  tmp___5 = kzalloc(40UL, 208U);
#line 3459
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3460
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3461
    goto out_no_epoch;
  } else {

  }
#line 3463
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3464
  mdev->epochs = 1U;
#line 3466
  return (mdev);
  out_no_epoch: 
#line 3471
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3473
  tl_cleanup(mdev);
  out_no_tl: 
#line 3475
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3477
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3479
  put_disk(disk);
  out_no_disk: 
#line 3481
  blk_cleanup_queue(q);
  out_no_q: 
#line 3483
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3485
  kfree((void const   *)mdev);
#line 3486
  return (0);
}
}
#line 3491 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3493
  kfree((void const   *)mdev->current_epoch);
#line 3494
  kfree((void const   *)mdev->app_reads_hash);
#line 3495
  tl_cleanup(mdev);
#line 3496
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3497
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3498
  __free_pages(mdev->md_io_page, 0U);
#line 3499
  put_disk(mdev->vdisk);
#line 3500
  blk_cleanup_queue(mdev->rq_queue);
#line 3501
  free_cpumask_var(mdev->cpu_mask);
#line 3502
  drbd_free_tl_hash(mdev);
#line 3503
  kfree((void const   *)mdev);
#line 3504
  return;
}
}
#line 3507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3518
  if (minor_count == 0U || minor_count > 256U) {
#line 3519
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3522
    return (-22);
  } else {

  }
#line 3528
  err = drbd_nl_init();
#line 3529
  if (err != 0) {
#line 3530
    return (err);
  } else {

  }
#line 3532
  err = register_blkdev(147U, "drbd");
#line 3533
  if (err != 0) {
#line 3534
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3537
    return (err);
  } else {

  }
#line 3540
  register_reboot_notifier(& drbd_notifier);
#line 3545
  err = -12;
#line 3547
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3549
  drbd_proc = 0;
#line 3550
  tmp = kzalloc((unsigned long )minor_count * 8UL, 208U);
#line 3550
  minor_table = (struct drbd_conf **)tmp;
#line 3552
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3553
    goto Enomem;
  } else {

  }
#line 3555
  err = drbd_create_mempools();
#line 3556
  if (err != 0) {
#line 3557
    goto Enomem;
  } else {

  }
#line 3559
  drbd_proc = proc_create_data("drbd", 33060U, 0, & drbd_proc_fops, 0);
#line 3560
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3561
    printk("<3>drbd: unable to register proc file\n");
#line 3562
    goto Enomem;
  } else {

  }
#line 3565
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3567
  printk("<6>drbd: initialized. Version: 8.3.10 (api:%d/proto:%d-%d)\n", 88, 86, 96);
#line 3570
  tmp___0 = drbd_buildtag();
#line 3570
  printk("<6>drbd: %s\n", tmp___0);
#line 3571
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3573
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3575
  return (0);
  Enomem: 
#line 3578
  drbd_cleanup();
#line 3579
  if (err == -12) {
#line 3581
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3583
    printk("<3>drbd: initialization failure\n");
  }
#line 3584
  return (err);
}
}
#line 3587 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3589
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3590
    return;
  } else {

  }
#line 3592
  blkdev_put(ldev->backing_bdev, 131U);
#line 3593
  blkdev_put(ldev->md_bdev, 131U);
#line 3595
  kfree((void const   *)ldev);
#line 3596
  return;
}
}
#line 3598 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3600
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3601
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 3602
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3603
    sock_release(mdev->data.socket);
#line 3604
    mdev->data.socket = 0;
#line 3605
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 3607
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3608
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 3609
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3610
    sock_release(mdev->meta.socket);
#line 3611
    mdev->meta.socket = 0;
#line 3612
    mutex_unlock(& mdev->meta.mutex);
  } else {

  }
#line 3614
  return;
}
}
#line 3617 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3619
  crypto_free_hash(mdev->csums_tfm);
#line 3620
  mdev->csums_tfm = 0;
#line 3621
  crypto_free_hash(mdev->verify_tfm);
#line 3622
  mdev->verify_tfm = 0;
#line 3623
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3624
  mdev->cram_hmac_tfm = 0;
#line 3625
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3626
  mdev->integrity_w_tfm = 0;
#line 3627
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3628
  mdev->integrity_r_tfm = 0;
#line 3630
  drbd_free_sock(mdev);
#line 3632
  drbd_free_bc(mdev->ldev);
#line 3632
  mdev->ldev = 0;
#line 3633
  return;
}
}
#line 3661 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  sector_t tmp___12 ;
  int tmp___13 ;
  sector_t tmp___14 ;

  {
#line 3667
  del_timer(& mdev->md_sync_timer);
#line 3669
  tmp = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3669
  if (tmp == 0) {
#line 3670
    return;
  } else {

  }
#line 3674
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3674
  if (tmp___0 == 0) {
#line 3675
    return;
  } else {

  }
#line 3677
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3678
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3678
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3679
  memset((void *)buffer, 0, 512UL);
#line 3681
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3681
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3681
  buffer->la_size = tmp___3;
#line 3682
  i = 0;
#line 3682
  goto ldv_48965;
  ldv_48964: 
#line 3683
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3683
  buffer->uuid[i] = tmp___4;
#line 3682
  i = i + 1;
  ldv_48965: ;
#line 3682
  if (i <= 3) {
#line 3683
    goto ldv_48964;
  } else {

  }
#line 3684
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3684
  buffer->flags = tmp___5;
#line 3685
  buffer->magic = 1795323011U;
#line 3687
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3687
  buffer->md_size_sect = tmp___6;
#line 3688
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3688
  buffer->al_offset = tmp___7;
#line 3689
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3689
  buffer->al_nr_extents = tmp___8;
#line 3690
  buffer->bm_bytes_per_bit = 1048576U;
#line 3691
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3691
  buffer->device_uuid = tmp___9;
#line 3693
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3693
  buffer->bm_offset = tmp___10;
#line 3694
  tmp___11 = __fswab32((__u32 )mdev->peer_max_bio_size);
#line 3694
  buffer->la_peer_max_bio_size = tmp___11;
#line 3696
  tmp___12 = drbd_md_ss__(mdev, mdev->ldev);
#line 3696
  if ((unsigned long long )tmp___12 != (mdev->ldev)->md.md_offset) {
#line 3696
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3696);
  } else {

  }
#line 3697
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3699
  tmp___13 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3699
  if (tmp___13 == 0) {
#line 3701
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3702
    drbd_chk_io_error____1(mdev, 1, 1, "drbd_md_sync");
  } else {

  }
#line 3707
  tmp___14 = drbd_get_capacity(mdev->this_bdev);
#line 3707
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___14;
#line 3709
  mutex_unlock(& mdev->md_io_mutex);
#line 3710
  put_ldev(mdev);
#line 3711
  return;
}
}
#line 3721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;
  int peer ;
  __u32 tmp___16 ;
  int __max1 ;
  int __max2 ;

  {
#line 3724
  rv = 101;
#line 3726
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3726
  if (tmp == 0) {
#line 3727
    return (118);
  } else {

  }
#line 3729
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3730
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3730
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3732
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3732
  if (tmp___1 == 0) {
#line 3735
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3736
    rv = 118;
#line 3737
    goto err;
  } else {

  }
#line 3740
  tmp___2 = __fswab32(buffer->magic);
#line 3740
  if (tmp___2 != 2205418091U) {
#line 3741
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 3742
    rv = 119;
#line 3743
    goto err;
  } else {

  }
#line 3745
  tmp___4 = __fswab32(buffer->al_offset);
#line 3745
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 3746
    tmp___3 = __fswab32(buffer->al_offset);
#line 3746
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 3748
    rv = 119;
#line 3749
    goto err;
  } else {

  }
#line 3751
  tmp___6 = __fswab32(buffer->bm_offset);
#line 3751
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 3752
    tmp___5 = __fswab32(buffer->bm_offset);
#line 3752
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 3754
    rv = 119;
#line 3755
    goto err;
  } else {

  }
#line 3757
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 3757
  if (tmp___8 != bdev->md.md_size_sect) {
#line 3758
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 3758
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 3760
    rv = 119;
#line 3761
    goto err;
  } else {

  }
#line 3764
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 3764
  if (tmp___10 != 4096U) {
#line 3765
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 3765
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 3767
    rv = 119;
#line 3768
    goto err;
  } else {

  }
#line 3771
  tmp___11 = __fswab64(buffer->la_size);
#line 3771
  bdev->md.la_size_sect = tmp___11;
#line 3772
  i = 0;
#line 3772
  goto ldv_48977;
  ldv_48976: 
#line 3773
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 3773
  bdev->md.uuid[i] = tmp___12;
#line 3772
  i = i + 1;
  ldv_48977: ;
#line 3772
  if (i <= 3) {
#line 3773
    goto ldv_48976;
  } else {

  }
#line 3774
  tmp___13 = __fswab32(buffer->flags);
#line 3774
  bdev->md.flags = tmp___13;
#line 3775
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 3775
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 3776
  tmp___15 = __fswab64(buffer->device_uuid);
#line 3776
  bdev->md.device_uuid = tmp___15;
#line 3778
  spin_lock_irq(& mdev->req_lock);
#line 3779
  if ((int )mdev->state.ldv_37520.conn <= 9) {
#line 3781
    tmp___16 = __fswab32(buffer->la_peer_max_bio_size);
#line 3781
    peer = (int )tmp___16;
#line 3782
    __max1 = peer;
#line 3782
    __max2 = 4096;
#line 3782
    peer = __max1 > __max2 ? __max1 : __max2;
#line 3783
    mdev->peer_max_bio_size = peer;
  } else {

  }
#line 3785
  spin_unlock_irq(& mdev->req_lock);
#line 3787
  if (mdev->sync_conf.al_extents <= 6) {
#line 3788
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3791
  mutex_unlock(& mdev->md_io_mutex);
#line 3792
  put_ldev(mdev);
#line 3794
  return (rv);
}
}
#line 3815 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 3817
  tmp = test_and_set_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3817
  if (tmp == 0) {
#line 3818
    mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
  } else {

  }
#line 3819
  return;
}
}
#line 3822 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3826
  i = 2;
#line 3826
  goto ldv_48991;
  ldv_48990: 
#line 3827
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3826
  i = i + 1;
  ldv_48991: ;
#line 3826
  if (i <= 2) {
#line 3827
    goto ldv_48990;
  } else {

  }

#line 3831
  return;
}
}
#line 3830 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3832
  if (idx == 0) {
#line 3833
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 3834
      val = val | 1ULL;
    } else {
#line 3836
      val = val & 0xfffffffffffffffeULL;
    }
#line 3838
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3841
  (mdev->ldev)->md.uuid[idx] = val;
#line 3842
  drbd_md_mark_dirty(mdev);
#line 3843
  return;
}
}
#line 3846 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3848
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3849
    drbd_uuid_move_history(mdev);
#line 3850
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 3852
  _drbd_uuid_set(mdev, idx, val);
#line 3853
  return;
}
}
#line 3862 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  unsigned long long bm_uuid ;

  {
#line 3865
  bm_uuid = (mdev->ldev)->md.uuid[1];
#line 3867
  if (bm_uuid != 0ULL) {
#line 3868
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
             bm_uuid);
  } else {

  }
#line 3870
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3872
  get_random_bytes((void *)(& val), 8);
#line 3873
  _drbd_uuid_set(mdev, 0, val);
#line 3874
  drbd_print_uuids(mdev, "new current UUID");
#line 3876
  drbd_md_sync(mdev);
#line 3877
  return;
}
}
#line 3879 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  unsigned long long bm_uuid ;

  {
#line 3881
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3882
    return;
  } else {

  }
#line 3884
  if (val == 0ULL) {
#line 3885
    drbd_uuid_move_history(mdev);
#line 3886
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3887
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 3889
    bm_uuid = (mdev->ldev)->md.uuid[1];
#line 3890
    if (bm_uuid != 0ULL) {
#line 3891
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
               bm_uuid);
    } else {

    }
#line 3893
    (mdev->ldev)->md.uuid[1] = val & 0xfffffffffffffffeULL;
  }
#line 3895
  drbd_md_mark_dirty(mdev);
#line 3896
  return;
}
}
#line 3904 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3906
  rv = -5;
#line 3908
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3908
  if (tmp != 0) {
#line 3909
    drbd_md_set_flag(mdev, 8);
#line 3910
    drbd_md_sync(mdev);
#line 3911
    drbd_bm_set_all(mdev);
#line 3913
    rv = drbd_bm_write(mdev);
#line 3915
    if (rv == 0) {
#line 3916
      drbd_md_clear_flag(mdev, 8);
#line 3917
      drbd_md_sync(mdev);
    } else {

    }
#line 3920
    put_ldev(mdev);
  } else {

  }
#line 3923
  return (rv);
}
}
#line 3932 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3934
  rv = -5;
#line 3936
  drbd_resume_al(mdev);
#line 3937
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3937
  if (tmp != 0) {
#line 3938
    drbd_bm_clear_all(mdev);
#line 3939
    rv = drbd_bm_write(mdev);
#line 3940
    put_ldev(mdev);
  } else {

  }
#line 3943
  return (rv);
}
}
#line 3946 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 3948
  __mptr = (struct drbd_work  const  *)w;
#line 3948
  work = (struct bm_io_work *)__mptr;
#line 3949
  rv = -5;
#line 3951
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3951
  if (tmp != 0) {
#line 3951
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3951);
  } else {

  }
#line 3953
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3953
  if (tmp___0 != 0) {
#line 3954
    drbd_bm_lock(mdev, work->why, work->flags);
#line 3955
    rv = (*(work->io_fn))(mdev);
#line 3956
    drbd_bm_unlock(mdev);
#line 3957
    put_ldev(mdev);
  } else {

  }
#line 3960
  clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 3961
  __asm__  volatile   ("": : : "memory");
#line 3962
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3964
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3965
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3967
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 3968
  work->why = 0;
#line 3969
  work->flags = 0;
#line 3971
  return (1);
}
}
#line 3974 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_ldev_destroy(struct drbd_conf *mdev ) 
{ 


  {
#line 3976
  lc_destroy(mdev->resync);
#line 3977
  mdev->resync = 0;
#line 3978
  lc_destroy(mdev->act_log);
#line 3979
  mdev->act_log = 0;
#line 3980
  drbd_free_bc(mdev->ldev);
#line 3980
  mdev->ldev = 0;
#line 3984
  if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 3985
    __free_pages(mdev->md_io_tmpp, 0U);
#line 3986
    mdev->md_io_tmpp = 0;
  } else {

  }
#line 3988
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3989
  return;
}
}
#line 3991 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3993
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 3993
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3993);
  } else {

  }
#line 3998
  val.i = 0U;
#line 3998
  val.ldv_37520.disk = 0U;
#line 3998
  mask.i = 0U;
#line 3998
  mask.ldv_37520.disk = 15U;
#line 3998
  drbd_force_state(mdev, mask, val);
#line 3999
  return (1);
}
}
#line 4002 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_go_diskless(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 4004
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4004
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4004);
  } else {

  }
#line 4005
  tmp = test_and_set_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 4005
  if (tmp == 0) {
#line 4006
    drbd_queue_work(& mdev->data.work, & mdev->go_diskless);
  } else {

  }
#line 4007
  return;
}
}
#line 4021 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4026
  tmp = get_current();
#line 4026
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 4026
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4026);
  } else {

  }
#line 4028
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 4028
  if (tmp___0 != 0) {
#line 4028
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4028);
  } else {

  }
#line 4029
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 4029
  if (tmp___1 != 0) {
#line 4029
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4029);
  } else {

  }
#line 4030
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 4030
  if (tmp___2 == 0) {
#line 4030
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4030);
  } else {

  }
#line 4031
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 4032
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 4035
  mdev->bm_io_work.io_fn = io_fn;
#line 4036
  mdev->bm_io_work.done = done;
#line 4037
  mdev->bm_io_work.why = why;
#line 4038
  mdev->bm_io_work.flags = flags;
#line 4040
  spin_lock_irq(& mdev->req_lock);
#line 4041
  set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 4042
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4042
  if (tmp___4 == 0) {
#line 4043
    tmp___3 = test_and_set_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 4043
    if (tmp___3 == 0) {
#line 4044
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {

    }
  } else {

  }
#line 4046
  spin_unlock_irq(& mdev->req_lock);
#line 4047
  return;
}
}
#line 4058 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 4063
  tmp = get_current();
#line 4063
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 4063
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4063);
  } else {

  }
#line 4065
  if (((unsigned int )flags & 1U) == 0U) {
#line 4066
    drbd_suspend_io(mdev);
  } else {

  }
#line 4068
  drbd_bm_lock(mdev, why, flags);
#line 4069
  rv = (*io_fn)(mdev);
#line 4070
  drbd_bm_unlock(mdev);
#line 4072
  if (((unsigned int )flags & 1U) == 0U) {
#line 4073
    drbd_resume_io(mdev);
  } else {

  }
#line 4075
  return (rv);
}
}
#line 4078 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4080
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 4081
    drbd_md_mark_dirty(mdev);
#line 4082
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 4084
  return;
}
}
#line 4086 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4088
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 4089
    drbd_md_mark_dirty(mdev);
#line 4090
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 4092
  return;
}
}
#line 4093 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 4095
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 4098 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 4100
  mdev = (struct drbd_conf *)data;
#line 4102
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 4103
  return;
}
}
#line 4105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 4107
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 4112
  drbd_md_sync(mdev);
#line 4113
  return (1);
}
}
#line 4133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 4137
  tmp = rsp->count;
#line 4137
  rsp->count = rsp->count - 1UL;
#line 4137
  if (tmp == 0UL) {
#line 4138
    get_random_bytes((void *)(& refresh), 8);
#line 4139
    rsp->state = rsp->state + (unsigned long )refresh;
#line 4140
    rsp->count = 10000UL;
  } else {

  }
#line 4142
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 4143
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 4143
  return ((unsigned long )tmp___0);
}
}
#line 4147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 4148
  _faults[0] = (char *)"Meta-data write";
#line 4148
  _faults[1] = (char *)"Meta-data read";
#line 4148
  _faults[2] = (char *)"Resync write";
#line 4148
  _faults[3] = (char *)"Resync read";
#line 4148
  _faults[4] = (char *)"Data write";
#line 4148
  _faults[5] = (char *)"Data read";
#line 4148
  _faults[6] = (char *)"Data read ahead";
#line 4148
  _faults[7] = (char *)"BM allocation";
#line 4148
  _faults[8] = (char *)"EE allocation";
#line 4148
  _faults[9] = (char *)"receive data corruption";
#line 4161
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 4165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 4167
  rrs.state = 0UL;
#line 4167
  rrs.count = 0UL;
#line 4169
  if (fault_devs == 0) {
#line 4169
    goto _L;
  } else {
#line 4169
    tmp = mdev_to_minor(mdev);
#line 4169
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 4169
      tmp___0 = _drbd_fault_random(& rrs);
#line 4169
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 4169
        tmp___1 = 1;
      } else {
#line 4169
        tmp___1 = 0;
      }
    } else {
#line 4169
      tmp___1 = 0;
    }
  }
#line 4169
  ret = (unsigned int )tmp___1;
#line 4174
  if (ret != 0U) {
#line 4175
    fault_count = fault_count + 1;
#line 4177
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 4177
    if (tmp___3 != 0) {
#line 4178
      tmp___2 = _drbd_fault_str(type);
#line 4178
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 4182
  return (ret);
}
}
#line 4186 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 4191
  buildtag[0] = '\000';
#line 4191
  tmp = 1U;
#line 4191
  while (1) {
#line 4191
    if (tmp >= 38U) {
#line 4191
      break;
    } else {

    }
#line 4191
    buildtag[tmp] = (char)0;
#line 4191
    tmp = tmp + 1U;
  }
#line 4193
  if ((int )((signed char )buildtag[0]) == 0) {
#line 4195
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 4196
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 4199
      buildtag[0] = 98;
    }
  } else {

  }
#line 4202
  return ((char const   *)(& buildtag));
}
}
#line 4250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_68_p1 ;
  int res_drbd_open_68 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_69_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_75_p1 ;
  void *var_drbd_notify_sys_75_p2 ;
  unsigned long var_md_sync_timer_fn_104_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4439
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4398
  LDV_IN_INTERRUPT = 1;
#line 4407
  ldv_initialize();
#line 4422
  ldv_handler_precall();
#line 4423
  tmp = drbd_init();
#line 4423
  if (tmp != 0) {
#line 4424
    goto ldv_final;
  } else {

  }
#line 4446
  goto ldv_49171;
  ldv_49170: 
#line 4450
  tmp___0 = nondet_int();
#line 4450
  switch (tmp___0) {
  case 0: ;
#line 4455
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4469
    ldv_handler_precall();
#line 4470
    res_drbd_open_68 = drbd_open(var_group1, var_drbd_open_68_p1);
#line 4471
    ldv_check_return_value(res_drbd_open_68);
#line 4472
    if (res_drbd_open_68 != 0) {
#line 4473
      goto ldv_module_exit;
    } else {

    }
#line 4491
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4497
  goto ldv_49165;
  case 1: ;
#line 4501
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4515
    ldv_handler_precall();
#line 4516
    drbd_release(var_group2, var_drbd_release_69_p1);
#line 4534
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4540
  goto ldv_49165;
  case 2: 
#line 4558
  ldv_handler_precall();
#line 4559
  drbd_notify_sys(var_group3, var_drbd_notify_sys_75_p1, var_drbd_notify_sys_75_p2);
#line 4583
  goto ldv_49165;
  case 3: 
#line 4607
  ldv_handler_precall();
#line 4608
  md_sync_timer_fn(var_md_sync_timer_fn_104_p0);
#line 4626
  goto ldv_49165;
  default: ;
#line 4627
  goto ldv_49165;
  }
  ldv_49165: ;
  ldv_49171: 
#line 4446
  tmp___1 = nondet_int();
#line 4446
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4448
    goto ldv_49170;
  } else {

  }

  ldv_module_exit: 
#line 4648
  ldv_handler_precall();
#line 4649
  drbd_cleanup();
  ldv_final: 
#line 4669
  ldv_check_final_state();
#line 4672
  return;
}
}
#line 4676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_3(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4681
  ldv_module_put(ldv_func_arg1);
#line 4682
  return;
}
}
#line 4692 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_5(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4697
  ldv_module_put(ldv_func_arg1);
#line 4698
  return;
}
}
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[24U]  = 
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT",      "Ahead",      "Behind"};
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 68 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 68
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 80
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 101 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 104
  return ((unsigned int )s <= 23U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 109
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 114
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) 
{ 


  {
#line 119
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 264 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 92 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 124
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 174 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 180
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 181
  __len = (size_t )len;
#line 181
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 184
  return;
}
}
#line 228 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 234
  tmp = __bitmap_equal(src1, src2, nbits);
#line 234
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 70 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 74
extern void call_usermodehelper_setfns(struct subprocess_info * , int (*)(struct subprocess_info * ) ,
                                       void (*)(struct subprocess_info * ) , void * ) ;
#line 80
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 87 "include/linux/kmod.h"
__inline static int call_usermodehelper_fns(char *path , char **argv , char **envp ,
                                            enum umh_wait wait , int (*init)(struct subprocess_info * ) ,
                                            void (*cleanup)(struct subprocess_info * ) ,
                                            void *data ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 93
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 95
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 97
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 98
    return (-12);
  } else {

  }
#line 100
  call_usermodehelper_setfns(info, init, cleanup, data);
#line 102
  tmp = call_usermodehelper_exec(info, wait);
#line 102
  return (tmp);
}
}
#line 106 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  int tmp ;

  {
#line 108
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 108
  return (tmp);
}
}
#line 211 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 534 "include/linux/module.h"
__inline static int ldv_try_module_get_1(struct module *module ) ;
#line 540
void ldv_module_put_7(struct module *ldv_func_arg1 ) ;
#line 544
void ldv_module_put_8(struct module *ldv_func_arg1 ) ;
#line 2055 "include/linux/fs.h"
extern struct block_device *blkdev_get_by_path(char const   * , fmode_t  , void * ) ;
#line 123 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char const   * , void (*)(struct cn_msg * ,
                                                                      struct netlink_skb_parms * ) ) ;
#line 125
extern void cn_del_callback(struct cb_id * ) ;
#line 126
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 408 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 810 "include/linux/blkdev.h"
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 814
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 829
extern void blk_queue_stack_limits(struct request_queue * , struct request_queue * ) ;
#line 836
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1529 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1921 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1924
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1928
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1928
  if (tmp___1 != 0UL) {
#line 1928
    __min1 = 2251799813685248UL;
#line 1928
    tmp___0 = drbd_md_first_sector(bdev);
#line 1928
    __min2 = tmp___0;
#line 1928
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1928
    s = 0UL;
  }
#line 1931
  goto ldv_46839;
  case -2: 
#line 1933
  __min1___0 = 2251799813685248UL;
#line 1933
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1933
  __min2___0 = tmp___2;
#line 1933
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1936
  __min1___1 = s;
#line 1936
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1936
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1939
  goto ldv_46839;
  default: 
#line 1941
  __min1___2 = 8587575296UL;
#line 1941
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1941
  __min2___2 = tmp___3;
#line 1941
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_46839: ;
#line 1944
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 76 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[85U]  = 
#line 76 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"on_no_data", 0, 4}, 
        {"c_plan_ahead", 0, 4}, 
        {"c_delay_target", 0, 4}, 
        {"c_fill_target", 0, 4}, 
        {"c_max_rate", 0, 4}, 
        {"c_min_rate", 0, 4}, 
        {"on_congestion", 0, 4}, 
        {"cong_fill", 0, 4}, 
        {"cong_extents", 0, 4}, 
        {"force", 32768, 4}};
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 52
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 53
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_47607;
  ldv_47606: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_47604;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_47604: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_47607: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_47606;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  unsigned short *tmp___5 ;
  u16 tmp___6 ;

  {
#line 20
  goto ldv_47668;
  ldv_47667: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_47636;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_47636;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_47636;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_47636;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_47636;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_47636;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47636;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47636;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47636;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_47636;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47636;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_47636;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_47636: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_47668: 
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___6 = get_unaligned_le16((void const   *)tmp___5);
#line 20
  tag = (int )tmp___6;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_47667;
  } else {

  }

#line 20
  return (1);
}
}
#line 70
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 70 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  unsigned short *tmp___19 ;
  u16 tmp___20 ;

  {
#line 38
  goto ldv_47774;
  ldv_47773: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_47706;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_47706;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_47706;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_47706;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_47706;
  case 14: 
#line 38
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___1;
#line 38
  goto ldv_47706;
  case 15: 
#line 38
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___2;
#line 38
  goto ldv_47706;
  case 16: 
#line 38
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___3;
#line 38
  goto ldv_47706;
  case 17: 
#line 38
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___4;
#line 38
  goto ldv_47706;
  case 18: 
#line 38
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___5;
#line 38
  goto ldv_47706;
  case 19: 
#line 38
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___6;
#line 38
  goto ldv_47706;
  case 20: 
#line 38
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___7;
#line 38
  goto ldv_47706;
  case 21: 
#line 38
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___8;
#line 38
  goto ldv_47706;
  case 22: 
#line 38
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___9;
#line 38
  goto ldv_47706;
  case 24: 
#line 38
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___10;
#line 38
  goto ldv_47706;
  case 25: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___11;
#line 38
  goto ldv_47706;
  case 26: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___12;
#line 38
  goto ldv_47706;
  case 39: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___13;
#line 38
  goto ldv_47706;
  case 40: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___14;
#line 38
  goto ldv_47706;
  case 67: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___15;
#line 38
  goto ldv_47706;
  case 81: 
#line 38
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->on_congestion = (int )tmp___16;
#line 38
  goto ldv_47706;
  case 82: 
#line 38
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->cong_fill = (int )tmp___17;
#line 38
  goto ldv_47706;
  case 83: 
#line 38
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->cong_extents = (int )tmp___18;
#line 38
  goto ldv_47706;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47706;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47706;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47706;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47706;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47706;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47706;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_47706;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_47706: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_47774: 
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___20 = get_unaligned_le16((void const   *)tmp___19);
#line 38
  tag = (int )tmp___20;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_47773;
  } else {

  }

#line 38
  return (1);
}
}
#line 74
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) ;
#line 74 "include/linux/drbd_nl.h"
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 72
  goto ldv_47791;
  ldv_47790: 
#line 72
  tmp = tags;
#line 72
  tags = tags + 1;
#line 72
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 72
  dlen = (int )tmp___0;
#line 72
  switch (tag & 8191) {
  case 84: 
#line 72
  arg->force = (int )((signed char )*((char *)tags)) != 0;
#line 72
  goto ldv_47788;
  default: ;
#line 72
  if ((tag & 8192) != 0) {
#line 72
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 72
    return (0);
  } else {

  }
  }
  ldv_47788: 
#line 72
  tags = tags + (unsigned long )dlen;
  ldv_47791: 
#line 72
  tmp___1 = tags;
#line 72
  tags = tags + 1;
#line 72
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 72
  tag = (int )tmp___2;
#line 72
  if (tag != 0) {
#line 73
    goto ldv_47790;
  } else {

  }

#line 72
  return (1);
}
}
#line 80
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 80 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 76
  goto ldv_47810;
  ldv_47809: 
#line 76
  tmp = tags;
#line 76
  tags = tags + 1;
#line 76
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 76
  dlen = (int )tmp___0;
#line 76
  switch (tag & 8191) {
  case 29: 
#line 76
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 76
  goto ldv_47805;
  case 68: 
#line 76
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 76
  goto ldv_47805;
  case 69: 
#line 76
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 76
  goto ldv_47805;
  default: ;
#line 76
  if ((tag & 8192) != 0) {
#line 76
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 76
    return (0);
  } else {

  }
  }
  ldv_47805: 
#line 76
  tags = tags + (unsigned long )dlen;
  ldv_47810: 
#line 76
  tmp___1 = tags;
#line 76
  tags = tags + 1;
#line 76
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 76
  tag = (int )tmp___2;
#line 76
  if (tag != 0) {
#line 77
    goto ldv_47809;
  } else {

  }

#line 76
  return (1);
}
}
#line 101
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 101 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  unsigned short *tmp___10 ;
  u16 tmp___11 ;

  {
#line 82
  goto ldv_47866;
  ldv_47865: 
#line 82
  tmp = tags;
#line 82
  tags = tags + 1;
#line 82
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 82
  dlen = (int )tmp___0;
#line 82
  switch (tag & 8191) {
  case 30: 
#line 82
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->rate = (int )tmp___1;
#line 82
  goto ldv_47824;
  case 31: 
#line 82
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->after = (int )tmp___2;
#line 82
  goto ldv_47824;
  case 32: 
#line 82
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->al_extents = (int )tmp___3;
#line 82
  goto ldv_47824;
  case 52: ;
#line 82
  if (dlen > 64) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 82
    return (0);
  } else {

  }
#line 82
  arg->verify_alg_len = dlen;
#line 82
  __min1 = (size_t )dlen;
#line 82
  __min2 = 64UL;
#line 82
  __len = __min1 < __min2 ? __min1 : __min2;
#line 82
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 82
  goto ldv_47824;
  case 51: ;
#line 82
  if (dlen > 32) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 82
    return (0);
  } else {

  }
#line 82
  arg->cpu_mask_len = dlen;
#line 82
  __min1___0 = (size_t )dlen;
#line 82
  __min2___0 = 32UL;
#line 82
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 82
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 82
  goto ldv_47824;
  case 64: ;
#line 82
  if (dlen > 64) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 82
    return (0);
  } else {

  }
#line 82
  arg->csums_alg_len = dlen;
#line 82
  __min1___1 = (size_t )dlen;
#line 82
  __min2___1 = 64UL;
#line 82
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 82
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 82
  goto ldv_47824;
  case 65: 
#line 82
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 82
  goto ldv_47824;
  case 75: 
#line 82
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->on_no_data = (int )tmp___4;
#line 82
  goto ldv_47824;
  case 76: 
#line 82
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_plan_ahead = (int )tmp___5;
#line 82
  goto ldv_47824;
  case 77: 
#line 82
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_delay_target = (int )tmp___6;
#line 82
  goto ldv_47824;
  case 78: 
#line 82
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_fill_target = (int )tmp___7;
#line 82
  goto ldv_47824;
  case 79: 
#line 82
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_max_rate = (int )tmp___8;
#line 82
  goto ldv_47824;
  case 80: 
#line 82
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_min_rate = (int )tmp___9;
#line 82
  goto ldv_47824;
  default: ;
#line 82
  if ((tag & 8192) != 0) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 82
    return (0);
  } else {

  }
  }
  ldv_47824: 
#line 82
  tags = tags + (unsigned long )dlen;
  ldv_47866: 
#line 82
  tmp___10 = tags;
#line 82
  tags = tags + 1;
#line 82
  tmp___11 = get_unaligned_le16((void const   *)tmp___10);
#line 82
  tag = (int )tmp___11;
#line 82
  if (tag != 0) {
#line 83
    goto ldv_47865;
  } else {

  }

#line 82
  return (1);
}
}
#line 145
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 145 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 143
  goto ldv_48165;
  ldv_48164: 
#line 143
  tmp = tags;
#line 143
  tags = tags + 1;
#line 143
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 143
  dlen = (int )tmp___0;
#line 143
  switch (tag & 8191) {
  case 66: 
#line 143
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 143
  goto ldv_48162;
  default: ;
#line 143
  if ((tag & 8192) != 0) {
#line 143
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 143
    return (0);
  } else {

  }
  }
  ldv_48162: 
#line 143
  tags = tags + (unsigned long )dlen;
  ldv_48165: 
#line 143
  tmp___1 = tags;
#line 143
  tags = tags + 1;
#line 143
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 143
  tag = (int )tmp___2;
#line 143
  if (tag != 0) {
#line 144
    goto ldv_48164;
  } else {

  }

#line 143
  return (1);
}
}
#line 149
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 149 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 147
  goto ldv_48182;
  ldv_48181: 
#line 147
  tmp = tags;
#line 147
  tags = tags + 1;
#line 147
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 147
  dlen = (int )tmp___0;
#line 147
  switch (tag & 8191) {
  case 63: 
#line 147
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 147
  goto ldv_48179;
  default: ;
#line 147
  if ((tag & 8192) != 0) {
#line 147
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 147
    return (0);
  } else {

  }
  }
  ldv_48179: 
#line 147
  tags = tags + (unsigned long )dlen;
  ldv_48182: 
#line 147
  tmp___1 = tags;
#line 147
  tags = tags + 1;
#line 147
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 147
  tag = (int )tmp___2;
#line 147
  if (tag != 0) {
#line 148
    goto ldv_48181;
  } else {

  }

#line 147
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_48227;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_48227;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_48227;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_48227;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48227;
  }
  ldv_48227: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_48234;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_48234;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_48234;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_48234;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48234;
  }
  ldv_48234: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_48241;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_48241;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_48241;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_48241;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48241;
  }
  ldv_48241: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_48248;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_48248;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_48248;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_48248;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48248;
  }
  ldv_48248: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_48255;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_48255;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_48255;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_48255;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48255;
  }
  ldv_48255: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_48265;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_48265;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_48265;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_48265;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48265;
  }
  ldv_48265: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_48272;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_48272;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_48272;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_48272;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48272;
  }
  ldv_48272: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_48282;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_48282;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_48282;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_48282;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48282;
  }
  ldv_48282: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_48289;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_48289;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_48289;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_48289;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48289;
  }
  ldv_48289: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_48296;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_48296;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_48296;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_48296;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48296;
  }
  ldv_48296: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_48303;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_48303;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_48303;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_48303;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48303;
  }
  ldv_48303: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_48310;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_48310;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_48310;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_48310;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48310;
  }
  ldv_48310: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_48317;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_48317;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_48317;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_48317;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48317;
  }
  ldv_48317: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_48324;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_48324;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_48324;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_48324;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48324;
  }
  ldv_48324: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_48331;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_48331;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_48331;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_48331;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48331;
  }
  ldv_48331: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_48338;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_48338;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_48338;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_48338;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48338;
  }
  ldv_48338: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_48345;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_48345;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_48345;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_48345;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48345;
  }
  ldv_48345: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_48352;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_48352;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_48352;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_48352;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48352;
  }
  ldv_48352: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_48359;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_48359;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_48359;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_48359;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48359;
  }
  ldv_48359: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_48366;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_48366;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_48366;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_48366;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48366;
  }
  ldv_48366: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_48373;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_48373;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_48373;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_48373;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48373;
  }
  ldv_48373: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_48380;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_48380;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_48380;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_48380;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48380;
  }
  ldv_48380: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_48387;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_48387;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_48387;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_48387;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48387;
  }
  ldv_48387: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_48394;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_48394;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_48394;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_48394;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48394;
  }
  ldv_48394: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_48401;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_48401;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_48401;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_48401;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48401;
  }
  ldv_48401: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_48408;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_48408;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_48408;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_48408;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48408;
  }
  ldv_48408: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_48415;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_48415;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_48415;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_48415;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48415;
  }
  ldv_48415: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_48422;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_48422;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_48422;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_48422;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48422;
  }
  ldv_48422: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_48429;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_48429;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_48429;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_48429;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_48429;
  }
  ldv_48429: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 70
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 70 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  void *__gu_p___57 ;
  unsigned short *tmp___41 ;
  void *__gu_p___58 ;
  unsigned short *tmp___42 ;
  void *__gu_p___59 ;
  void *__gu_p___60 ;
  unsigned short *tmp___43 ;
  void *__gu_p___61 ;
  unsigned short *tmp___44 ;
  void *__gu_p___62 ;
  void *__gu_p___63 ;
  unsigned short *tmp___45 ;
  void *__gu_p___64 ;
  unsigned short *tmp___46 ;
  void *__gu_p___65 ;
  unsigned short *tmp___47 ;
  void *__gu_p___66 ;
  unsigned short *tmp___48 ;
  void *__gu_p___67 ;
  unsigned short *tmp___49 ;
  void *__gu_p___68 ;
  unsigned short *tmp___50 ;
  void *__gu_p___69 ;
  unsigned short *tmp___51 ;
  void *__gu_p___70 ;
  unsigned short *tmp___52 ;
  void *__gu_p___71 ;
  unsigned short *tmp___53 ;
  void *__gu_p___72 ;
  unsigned short *tmp___54 ;
  void *__gu_p___73 ;
  unsigned short *tmp___55 ;
  void *__gu_p___74 ;
  unsigned short *tmp___56 ;
  void *__gu_p___75 ;
  unsigned short *tmp___57 ;
  void *__gu_p___76 ;
  unsigned short *tmp___58 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_48454;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_48454;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_48454;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_48454;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48454;
  }
  ldv_48454: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_48461;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_48461;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_48461;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_48461;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48461;
  }
  ldv_48461: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_48471;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_48471;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_48471;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_48471;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48471;
  }
  ldv_48471: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_48478;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_48478;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_48478;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_48478;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48478;
  }
  ldv_48478: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_48488;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_48488;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_48488;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_48488;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48488;
  }
  ldv_48488: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_48495;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_48495;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_48495;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_48495;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48495;
  }
  ldv_48495: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_48505;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_48505;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_48505;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_48505;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48505;
  }
  ldv_48505: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_48512;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_48512;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_48512;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_48512;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48512;
  }
  ldv_48512: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_48522;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_48522;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_48522;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_48522;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48522;
  }
  ldv_48522: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_48529;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_48529;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_48529;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_48529;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48529;
  }
  ldv_48529: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_48539;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_48539;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_48539;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_48539;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48539;
  }
  ldv_48539: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_48546;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_48546;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_48546;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_48546;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48546;
  }
  ldv_48546: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_48553;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_48553;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_48553;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_48553;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48553;
  }
  ldv_48553: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_48560;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_48560;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_48560;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_48560;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48560;
  }
  ldv_48560: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_48567;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_48567;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_48567;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_48567;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48567;
  }
  ldv_48567: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_48574;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_48574;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_48574;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_48574;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48574;
  }
  ldv_48574: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_48581;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_48581;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_48581;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_48581;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48581;
  }
  ldv_48581: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_48588;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_48588;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_48588;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_48588;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48588;
  }
  ldv_48588: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_48595;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_48595;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_48595;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_48595;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48595;
  }
  ldv_48595: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_48602;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_48602;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_48602;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_48602;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48602;
  }
  ldv_48602: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_48609;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_48609;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_48609;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_48609;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48609;
  }
  ldv_48609: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_48616;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_48616;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_48616;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_48616;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48616;
  }
  ldv_48616: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_48623;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_48623;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_48623;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_48623;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48623;
  }
  ldv_48623: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_48630;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_48630;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_48630;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_48630;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48630;
  }
  ldv_48630: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_48637;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_48637;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_48637;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_48637;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48637;
  }
  ldv_48637: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_48644;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_48644;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_48644;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_48644;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48644;
  }
  ldv_48644: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_48651;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_48651;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_48651;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_48651;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48651;
  }
  ldv_48651: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_48658;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_48658;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_48658;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_48658;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48658;
  }
  ldv_48658: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_48665;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_48665;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_48665;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_48665;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48665;
  }
  ldv_48665: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_48672;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_48672;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_48672;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_48672;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48672;
  }
  ldv_48672: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_48679;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_48679;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_48679;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_48679;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48679;
  }
  ldv_48679: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_48686;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_48686;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_48686;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_48686;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48686;
  }
  ldv_48686: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_48693;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_48693;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_48693;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_48693;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48693;
  }
  ldv_48693: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_48700;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_48700;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_48700;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_48700;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48700;
  }
  ldv_48700: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_48707;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_48707;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_48707;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_48707;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48707;
  }
  ldv_48707: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_48714;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_48714;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_48714;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_48714;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48714;
  }
  ldv_48714: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_48721;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_48721;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_48721;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_48721;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48721;
  }
  ldv_48721: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_48728;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_48728;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_48728;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_48728;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48728;
  }
  ldv_48728: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_48735;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_48735;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_48735;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_48735;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48735;
  }
  ldv_48735: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_48742;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_48742;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_48742;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_48742;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48742;
  }
  ldv_48742: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_48749;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_48749;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_48749;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_48749;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48749;
  }
  ldv_48749: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_48756;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_48756;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_48756;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_48756;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48756;
  }
  ldv_48756: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_48763;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_48763;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_48763;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_48763;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48763;
  }
  ldv_48763: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_48770;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_48770;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_48770;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_48770;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48770;
  }
  ldv_48770: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_48777;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_48777;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_48777;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_48777;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48777;
  }
  ldv_48777: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_48784;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_48784;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_48784;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_48784;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48784;
  }
  ldv_48784: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_48791;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_48791;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_48791;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_48791;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48791;
  }
  ldv_48791: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_48798;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_48798;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_48798;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_48798;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48798;
  }
  ldv_48798: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_48805;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_48805;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_48805;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_48805;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48805;
  }
  ldv_48805: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_48812;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_48812;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_48812;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_48812;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48812;
  }
  ldv_48812: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_48819;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_48819;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_48819;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_48819;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48819;
  }
  ldv_48819: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_48826;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_48826;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_48826;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_48826;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48826;
  }
  ldv_48826: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_48833;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_48833;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_48833;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_48833;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48833;
  }
  ldv_48833: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_48840;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_48840;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_48840;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_48840;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48840;
  }
  ldv_48840: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_48847;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_48847;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_48847;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_48847;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48847;
  }
  ldv_48847: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 81U;
#line 38
  goto ldv_48854;
  case 2UL: 
#line 38
  put_unaligned_le16(81, __gu_p___54);
#line 38
  goto ldv_48854;
  case 4UL: 
#line 38
  put_unaligned_le32(81U, __gu_p___54);
#line 38
  goto ldv_48854;
  case 8UL: 
#line 38
  put_unaligned_le64(81ULL, __gu_p___54);
#line 38
  goto ldv_48854;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48854;
  }
  ldv_48854: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 4U;
#line 38
  goto ldv_48861;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___55);
#line 38
  goto ldv_48861;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___55);
#line 38
  goto ldv_48861;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___55);
#line 38
  goto ldv_48861;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48861;
  }
  ldv_48861: 
#line 38
  __gu_p___56 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = (unsigned char )arg->on_congestion;
#line 38
  goto ldv_48868;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->on_congestion), __gu_p___56);
#line 38
  goto ldv_48868;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->on_congestion, __gu_p___56);
#line 38
  goto ldv_48868;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->on_congestion, __gu_p___56);
#line 38
  goto ldv_48868;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48868;
  }
  ldv_48868: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 82U;
#line 38
  goto ldv_48875;
  case 2UL: 
#line 38
  put_unaligned_le16(82, __gu_p___57);
#line 38
  goto ldv_48875;
  case 4UL: 
#line 38
  put_unaligned_le32(82U, __gu_p___57);
#line 38
  goto ldv_48875;
  case 8UL: 
#line 38
  put_unaligned_le64(82ULL, __gu_p___57);
#line 38
  goto ldv_48875;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48875;
  }
  ldv_48875: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 4U;
#line 38
  goto ldv_48882;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___58);
#line 38
  goto ldv_48882;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___58);
#line 38
  goto ldv_48882;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___58);
#line 38
  goto ldv_48882;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48882;
  }
  ldv_48882: 
#line 38
  __gu_p___59 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = (unsigned char )arg->cong_fill;
#line 38
  goto ldv_48889;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cong_fill), __gu_p___59);
#line 38
  goto ldv_48889;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cong_fill, __gu_p___59);
#line 38
  goto ldv_48889;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cong_fill, __gu_p___59);
#line 38
  goto ldv_48889;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48889;
  }
  ldv_48889: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 83U;
#line 38
  goto ldv_48896;
  case 2UL: 
#line 38
  put_unaligned_le16(83, __gu_p___60);
#line 38
  goto ldv_48896;
  case 4UL: 
#line 38
  put_unaligned_le32(83U, __gu_p___60);
#line 38
  goto ldv_48896;
  case 8UL: 
#line 38
  put_unaligned_le64(83ULL, __gu_p___60);
#line 38
  goto ldv_48896;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48896;
  }
  ldv_48896: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 4U;
#line 38
  goto ldv_48903;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___61);
#line 38
  goto ldv_48903;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___61);
#line 38
  goto ldv_48903;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___61);
#line 38
  goto ldv_48903;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48903;
  }
  ldv_48903: 
#line 38
  __gu_p___62 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = (unsigned char )arg->cong_extents;
#line 38
  goto ldv_48910;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cong_extents), __gu_p___62);
#line 38
  goto ldv_48910;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cong_extents, __gu_p___62);
#line 38
  goto ldv_48910;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cong_extents, __gu_p___62);
#line 38
  goto ldv_48910;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48910;
  }
  ldv_48910: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 60U;
#line 38
  goto ldv_48917;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___63);
#line 38
  goto ldv_48917;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___63);
#line 38
  goto ldv_48917;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___63);
#line 38
  goto ldv_48917;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48917;
  }
  ldv_48917: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 1U;
#line 38
  goto ldv_48924;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___64);
#line 38
  goto ldv_48924;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___64);
#line 38
  goto ldv_48924;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___64);
#line 38
  goto ldv_48924;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48924;
  }
  ldv_48924: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 27U;
#line 38
  goto ldv_48931;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___65);
#line 38
  goto ldv_48931;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___65);
#line 38
  goto ldv_48931;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___65);
#line 38
  goto ldv_48931;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48931;
  }
  ldv_48931: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 1U;
#line 38
  goto ldv_48938;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___66);
#line 38
  goto ldv_48938;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___66);
#line 38
  goto ldv_48938;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___66);
#line 38
  goto ldv_48938;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48938;
  }
  ldv_48938: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 28U;
#line 38
  goto ldv_48945;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___67);
#line 38
  goto ldv_48945;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___67);
#line 38
  goto ldv_48945;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___67);
#line 38
  goto ldv_48945;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48945;
  }
  ldv_48945: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___68 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___68) = 1U;
#line 38
  goto ldv_48952;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___68);
#line 38
  goto ldv_48952;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___68);
#line 38
  goto ldv_48952;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___68);
#line 38
  goto ldv_48952;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48952;
  }
  ldv_48952: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___69 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___69) = 41U;
#line 38
  goto ldv_48959;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___69);
#line 38
  goto ldv_48959;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___69);
#line 38
  goto ldv_48959;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___69);
#line 38
  goto ldv_48959;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48959;
  }
  ldv_48959: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___70 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___70) = 1U;
#line 38
  goto ldv_48966;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___70);
#line 38
  goto ldv_48966;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___70);
#line 38
  goto ldv_48966;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___70);
#line 38
  goto ldv_48966;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48966;
  }
  ldv_48966: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___53 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___71 = (void *)tmp___53;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___71) = 61U;
#line 38
  goto ldv_48973;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___71);
#line 38
  goto ldv_48973;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___71);
#line 38
  goto ldv_48973;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___71);
#line 38
  goto ldv_48973;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48973;
  }
  ldv_48973: 
#line 38
  tmp___54 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___72 = (void *)tmp___54;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___72) = 1U;
#line 38
  goto ldv_48980;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___72);
#line 38
  goto ldv_48980;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___72);
#line 38
  goto ldv_48980;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___72);
#line 38
  goto ldv_48980;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48980;
  }
  ldv_48980: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___55 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___73 = (void *)tmp___55;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___73) = 62U;
#line 38
  goto ldv_48987;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___73);
#line 38
  goto ldv_48987;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___73);
#line 38
  goto ldv_48987;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___73);
#line 38
  goto ldv_48987;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48987;
  }
  ldv_48987: 
#line 38
  tmp___56 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___74 = (void *)tmp___56;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___74) = 1U;
#line 38
  goto ldv_48994;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___74);
#line 38
  goto ldv_48994;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___74);
#line 38
  goto ldv_48994;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___74);
#line 38
  goto ldv_48994;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_48994;
  }
  ldv_48994: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___57 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___75 = (void *)tmp___57;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___75) = 70U;
#line 38
  goto ldv_49001;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___75);
#line 38
  goto ldv_49001;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___75);
#line 38
  goto ldv_49001;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___75);
#line 38
  goto ldv_49001;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49001;
  }
  ldv_49001: 
#line 38
  tmp___58 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___76 = (void *)tmp___58;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___76) = 1U;
#line 38
  goto ldv_49008;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___76);
#line 38
  goto ldv_49008;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___76);
#line 38
  goto ldv_49008;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___76);
#line 38
  goto ldv_49008;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_49008;
  }
  ldv_49008: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 101
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 101 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;
  void *__gu_p___16 ;
  unsigned short *tmp___13 ;
  void *__gu_p___17 ;
  unsigned short *tmp___14 ;
  void *__gu_p___18 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  void *__gu_p___22 ;
  unsigned short *tmp___17 ;
  void *__gu_p___23 ;
  unsigned short *tmp___18 ;
  void *__gu_p___24 ;
  void *__gu_p___25 ;
  unsigned short *tmp___19 ;
  void *__gu_p___26 ;
  unsigned short *tmp___20 ;
  void *__gu_p___27 ;
  void *__gu_p___28 ;
  unsigned short *tmp___21 ;
  void *__gu_p___29 ;
  unsigned short *tmp___22 ;
  void *__gu_p___30 ;
  void *__gu_p___31 ;
  unsigned short *tmp___23 ;
  void *__gu_p___32 ;
  unsigned short *tmp___24 ;
  void *__gu_p___33 ;

  {
#line 82
  tmp = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p = (void *)tmp;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p) = 30U;
#line 82
  goto ldv_49105;
  case 2UL: 
#line 82
  put_unaligned_le16(30, __gu_p);
#line 82
  goto ldv_49105;
  case 4UL: 
#line 82
  put_unaligned_le32(30U, __gu_p);
#line 82
  goto ldv_49105;
  case 8UL: 
#line 82
  put_unaligned_le64(30ULL, __gu_p);
#line 82
  goto ldv_49105;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49105;
  }
  ldv_49105: 
#line 82
  tmp___0 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___0 = (void *)tmp___0;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___0) = 4U;
#line 82
  goto ldv_49112;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___0);
#line 82
  goto ldv_49112;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___0);
#line 82
  goto ldv_49112;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___0);
#line 82
  goto ldv_49112;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49112;
  }
  ldv_49112: 
#line 82
  __gu_p___1 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 82
  goto ldv_49119;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 82
  goto ldv_49119;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 82
  goto ldv_49119;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 82
  goto ldv_49119;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49119;
  }
  ldv_49119: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___1 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___2 = (void *)tmp___1;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___2) = 31U;
#line 82
  goto ldv_49126;
  case 2UL: 
#line 82
  put_unaligned_le16(31, __gu_p___2);
#line 82
  goto ldv_49126;
  case 4UL: 
#line 82
  put_unaligned_le32(31U, __gu_p___2);
#line 82
  goto ldv_49126;
  case 8UL: 
#line 82
  put_unaligned_le64(31ULL, __gu_p___2);
#line 82
  goto ldv_49126;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49126;
  }
  ldv_49126: 
#line 82
  tmp___2 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___3 = (void *)tmp___2;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___3) = 4U;
#line 82
  goto ldv_49133;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___3);
#line 82
  goto ldv_49133;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___3);
#line 82
  goto ldv_49133;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___3);
#line 82
  goto ldv_49133;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49133;
  }
  ldv_49133: 
#line 82
  __gu_p___4 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 82
  goto ldv_49140;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 82
  goto ldv_49140;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 82
  goto ldv_49140;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 82
  goto ldv_49140;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49140;
  }
  ldv_49140: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___3 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___5 = (void *)tmp___3;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___5) = 32U;
#line 82
  goto ldv_49147;
  case 2UL: 
#line 82
  put_unaligned_le16(32, __gu_p___5);
#line 82
  goto ldv_49147;
  case 4UL: 
#line 82
  put_unaligned_le32(32U, __gu_p___5);
#line 82
  goto ldv_49147;
  case 8UL: 
#line 82
  put_unaligned_le64(32ULL, __gu_p___5);
#line 82
  goto ldv_49147;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49147;
  }
  ldv_49147: 
#line 82
  tmp___4 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___6 = (void *)tmp___4;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___6) = 4U;
#line 82
  goto ldv_49154;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___6);
#line 82
  goto ldv_49154;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___6);
#line 82
  goto ldv_49154;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___6);
#line 82
  goto ldv_49154;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49154;
  }
  ldv_49154: 
#line 82
  __gu_p___7 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 82
  goto ldv_49161;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 82
  goto ldv_49161;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 82
  goto ldv_49161;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 82
  goto ldv_49161;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49161;
  }
  ldv_49161: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___5 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___8 = (void *)tmp___5;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___8) = 52U;
#line 82
  goto ldv_49168;
  case 2UL: 
#line 82
  put_unaligned_le16(49204, __gu_p___8);
#line 82
  goto ldv_49168;
  case 4UL: 
#line 82
  put_unaligned_le32(49204U, __gu_p___8);
#line 82
  goto ldv_49168;
  case 8UL: 
#line 82
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 82
  goto ldv_49168;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49168;
  }
  ldv_49168: 
#line 82
  tmp___6 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___9 = (void *)tmp___6;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 82
  goto ldv_49175;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 82
  goto ldv_49175;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 82
  goto ldv_49175;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 82
  goto ldv_49175;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49175;
  }
  ldv_49175: 
#line 82
  __len = (size_t )arg->verify_alg_len;
#line 82
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 82
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 82
  tmp___7 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___10 = (void *)tmp___7;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___10) = 51U;
#line 82
  goto ldv_49185;
  case 2UL: 
#line 82
  put_unaligned_le16(49203, __gu_p___10);
#line 82
  goto ldv_49185;
  case 4UL: 
#line 82
  put_unaligned_le32(49203U, __gu_p___10);
#line 82
  goto ldv_49185;
  case 8UL: 
#line 82
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 82
  goto ldv_49185;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49185;
  }
  ldv_49185: 
#line 82
  tmp___8 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___11 = (void *)tmp___8;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 82
  goto ldv_49192;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 82
  goto ldv_49192;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 82
  goto ldv_49192;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 82
  goto ldv_49192;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49192;
  }
  ldv_49192: 
#line 82
  __len___0 = (size_t )arg->cpu_mask_len;
#line 82
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 82
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 82
  tmp___9 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___12 = (void *)tmp___9;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___12) = 64U;
#line 82
  goto ldv_49202;
  case 2UL: 
#line 82
  put_unaligned_le16(49216, __gu_p___12);
#line 82
  goto ldv_49202;
  case 4UL: 
#line 82
  put_unaligned_le32(49216U, __gu_p___12);
#line 82
  goto ldv_49202;
  case 8UL: 
#line 82
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 82
  goto ldv_49202;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49202;
  }
  ldv_49202: 
#line 82
  tmp___10 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___13 = (void *)tmp___10;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 82
  goto ldv_49209;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 82
  goto ldv_49209;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 82
  goto ldv_49209;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 82
  goto ldv_49209;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49209;
  }
  ldv_49209: 
#line 82
  __len___1 = (size_t )arg->csums_alg_len;
#line 82
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 82
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 82
  tmp___11 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___14 = (void *)tmp___11;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___14) = 65U;
#line 82
  goto ldv_49219;
  case 2UL: 
#line 82
  put_unaligned_le16(32833, __gu_p___14);
#line 82
  goto ldv_49219;
  case 4UL: 
#line 82
  put_unaligned_le32(32833U, __gu_p___14);
#line 82
  goto ldv_49219;
  case 8UL: 
#line 82
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 82
  goto ldv_49219;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49219;
  }
  ldv_49219: 
#line 82
  tmp___12 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___15 = (void *)tmp___12;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___15) = 1U;
#line 82
  goto ldv_49226;
  case 2UL: 
#line 82
  put_unaligned_le16(1, __gu_p___15);
#line 82
  goto ldv_49226;
  case 4UL: 
#line 82
  put_unaligned_le32(1U, __gu_p___15);
#line 82
  goto ldv_49226;
  case 8UL: 
#line 82
  put_unaligned_le64(1ULL, __gu_p___15);
#line 82
  goto ldv_49226;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49226;
  }
  ldv_49226: 
#line 82
  *((char *)tags) = (char )arg->use_rle;
#line 82
  tags = tags + 1U;
#line 82
  tmp___13 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___16 = (void *)tmp___13;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___16) = 75U;
#line 82
  goto ldv_49233;
  case 2UL: 
#line 82
  put_unaligned_le16(75, __gu_p___16);
#line 82
  goto ldv_49233;
  case 4UL: 
#line 82
  put_unaligned_le32(75U, __gu_p___16);
#line 82
  goto ldv_49233;
  case 8UL: 
#line 82
  put_unaligned_le64(75ULL, __gu_p___16);
#line 82
  goto ldv_49233;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49233;
  }
  ldv_49233: 
#line 82
  tmp___14 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___17 = (void *)tmp___14;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___17) = 4U;
#line 82
  goto ldv_49240;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___17);
#line 82
  goto ldv_49240;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___17);
#line 82
  goto ldv_49240;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___17);
#line 82
  goto ldv_49240;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49240;
  }
  ldv_49240: 
#line 82
  __gu_p___18 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___18) = (unsigned char )arg->on_no_data;
#line 82
  goto ldv_49247;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->on_no_data), __gu_p___18);
#line 82
  goto ldv_49247;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->on_no_data, __gu_p___18);
#line 82
  goto ldv_49247;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->on_no_data, __gu_p___18);
#line 82
  goto ldv_49247;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49247;
  }
  ldv_49247: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___15 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___19 = (void *)tmp___15;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___19) = 76U;
#line 82
  goto ldv_49254;
  case 2UL: 
#line 82
  put_unaligned_le16(76, __gu_p___19);
#line 82
  goto ldv_49254;
  case 4UL: 
#line 82
  put_unaligned_le32(76U, __gu_p___19);
#line 82
  goto ldv_49254;
  case 8UL: 
#line 82
  put_unaligned_le64(76ULL, __gu_p___19);
#line 82
  goto ldv_49254;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49254;
  }
  ldv_49254: 
#line 82
  tmp___16 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___20 = (void *)tmp___16;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___20) = 4U;
#line 82
  goto ldv_49261;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___20);
#line 82
  goto ldv_49261;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___20);
#line 82
  goto ldv_49261;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___20);
#line 82
  goto ldv_49261;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49261;
  }
  ldv_49261: 
#line 82
  __gu_p___21 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___21) = (unsigned char )arg->c_plan_ahead;
#line 82
  goto ldv_49268;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_plan_ahead), __gu_p___21);
#line 82
  goto ldv_49268;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_plan_ahead, __gu_p___21);
#line 82
  goto ldv_49268;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_plan_ahead, __gu_p___21);
#line 82
  goto ldv_49268;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49268;
  }
  ldv_49268: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___17 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___22 = (void *)tmp___17;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___22) = 77U;
#line 82
  goto ldv_49275;
  case 2UL: 
#line 82
  put_unaligned_le16(77, __gu_p___22);
#line 82
  goto ldv_49275;
  case 4UL: 
#line 82
  put_unaligned_le32(77U, __gu_p___22);
#line 82
  goto ldv_49275;
  case 8UL: 
#line 82
  put_unaligned_le64(77ULL, __gu_p___22);
#line 82
  goto ldv_49275;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49275;
  }
  ldv_49275: 
#line 82
  tmp___18 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___23 = (void *)tmp___18;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___23) = 4U;
#line 82
  goto ldv_49282;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___23);
#line 82
  goto ldv_49282;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___23);
#line 82
  goto ldv_49282;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___23);
#line 82
  goto ldv_49282;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49282;
  }
  ldv_49282: 
#line 82
  __gu_p___24 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___24) = (unsigned char )arg->c_delay_target;
#line 82
  goto ldv_49289;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_delay_target), __gu_p___24);
#line 82
  goto ldv_49289;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_delay_target, __gu_p___24);
#line 82
  goto ldv_49289;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_delay_target, __gu_p___24);
#line 82
  goto ldv_49289;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49289;
  }
  ldv_49289: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___19 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___25 = (void *)tmp___19;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___25) = 78U;
#line 82
  goto ldv_49296;
  case 2UL: 
#line 82
  put_unaligned_le16(78, __gu_p___25);
#line 82
  goto ldv_49296;
  case 4UL: 
#line 82
  put_unaligned_le32(78U, __gu_p___25);
#line 82
  goto ldv_49296;
  case 8UL: 
#line 82
  put_unaligned_le64(78ULL, __gu_p___25);
#line 82
  goto ldv_49296;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49296;
  }
  ldv_49296: 
#line 82
  tmp___20 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___26 = (void *)tmp___20;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___26) = 4U;
#line 82
  goto ldv_49303;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___26);
#line 82
  goto ldv_49303;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___26);
#line 82
  goto ldv_49303;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___26);
#line 82
  goto ldv_49303;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49303;
  }
  ldv_49303: 
#line 82
  __gu_p___27 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___27) = (unsigned char )arg->c_fill_target;
#line 82
  goto ldv_49310;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_fill_target), __gu_p___27);
#line 82
  goto ldv_49310;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_fill_target, __gu_p___27);
#line 82
  goto ldv_49310;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_fill_target, __gu_p___27);
#line 82
  goto ldv_49310;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49310;
  }
  ldv_49310: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___21 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___28 = (void *)tmp___21;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___28) = 79U;
#line 82
  goto ldv_49317;
  case 2UL: 
#line 82
  put_unaligned_le16(79, __gu_p___28);
#line 82
  goto ldv_49317;
  case 4UL: 
#line 82
  put_unaligned_le32(79U, __gu_p___28);
#line 82
  goto ldv_49317;
  case 8UL: 
#line 82
  put_unaligned_le64(79ULL, __gu_p___28);
#line 82
  goto ldv_49317;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49317;
  }
  ldv_49317: 
#line 82
  tmp___22 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___29 = (void *)tmp___22;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___29) = 4U;
#line 82
  goto ldv_49324;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___29);
#line 82
  goto ldv_49324;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___29);
#line 82
  goto ldv_49324;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___29);
#line 82
  goto ldv_49324;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49324;
  }
  ldv_49324: 
#line 82
  __gu_p___30 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___30) = (unsigned char )arg->c_max_rate;
#line 82
  goto ldv_49331;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_max_rate), __gu_p___30);
#line 82
  goto ldv_49331;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_max_rate, __gu_p___30);
#line 82
  goto ldv_49331;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_max_rate, __gu_p___30);
#line 82
  goto ldv_49331;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49331;
  }
  ldv_49331: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___23 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___31 = (void *)tmp___23;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___31) = 80U;
#line 82
  goto ldv_49338;
  case 2UL: 
#line 82
  put_unaligned_le16(80, __gu_p___31);
#line 82
  goto ldv_49338;
  case 4UL: 
#line 82
  put_unaligned_le32(80U, __gu_p___31);
#line 82
  goto ldv_49338;
  case 8UL: 
#line 82
  put_unaligned_le64(80ULL, __gu_p___31);
#line 82
  goto ldv_49338;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49338;
  }
  ldv_49338: 
#line 82
  tmp___24 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___32 = (void *)tmp___24;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___32) = 4U;
#line 82
  goto ldv_49345;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___32);
#line 82
  goto ldv_49345;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___32);
#line 82
  goto ldv_49345;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___32);
#line 82
  goto ldv_49345;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49345;
  }
  ldv_49345: 
#line 82
  __gu_p___33 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___33) = (unsigned char )arg->c_min_rate;
#line 82
  goto ldv_49352;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_min_rate), __gu_p___33);
#line 82
  goto ldv_49352;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_min_rate, __gu_p___33);
#line 82
  goto ldv_49352;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_min_rate, __gu_p___33);
#line 82
  goto ldv_49352;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_49352;
  }
  ldv_49352: 
#line 82
  tags = tags + 4U;
#line 82
  return (tags);
}
}
#line 113
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 113 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 111
  tmp = tags;
#line 111
  tags = tags + 1;
#line 111
  __gu_p = (void *)tmp;
#line 111
  switch (2UL) {
  case 1UL: 
#line 111
  *((u8 *)__gu_p) = 33U;
#line 111
  goto ldv_49440;
  case 2UL: 
#line 111
  put_unaligned_le16(33, __gu_p);
#line 111
  goto ldv_49440;
  case 4UL: 
#line 111
  put_unaligned_le32(33U, __gu_p);
#line 111
  goto ldv_49440;
  case 8UL: 
#line 111
  put_unaligned_le64(33ULL, __gu_p);
#line 111
  goto ldv_49440;
  default: 
#line 111
  __bad_unaligned_access_size();
#line 111
  goto ldv_49440;
  }
  ldv_49440: 
#line 111
  tmp___0 = tags;
#line 111
  tags = tags + 1;
#line 111
  __gu_p___0 = (void *)tmp___0;
#line 111
  switch (2UL) {
  case 1UL: 
#line 111
  *((u8 *)__gu_p___0) = 4U;
#line 111
  goto ldv_49447;
  case 2UL: 
#line 111
  put_unaligned_le16(4, __gu_p___0);
#line 111
  goto ldv_49447;
  case 4UL: 
#line 111
  put_unaligned_le32(4U, __gu_p___0);
#line 111
  goto ldv_49447;
  case 8UL: 
#line 111
  put_unaligned_le64(4ULL, __gu_p___0);
#line 111
  goto ldv_49447;
  default: 
#line 111
  __bad_unaligned_access_size();
#line 111
  goto ldv_49447;
  }
  ldv_49447: 
#line 111
  __gu_p___1 = (void *)tags;
#line 111
  switch (4UL) {
  case 1UL: 
#line 111
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 111
  goto ldv_49454;
  case 2UL: 
#line 111
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 111
  goto ldv_49454;
  case 4UL: 
#line 111
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 111
  goto ldv_49454;
  case 8UL: 
#line 111
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 111
  goto ldv_49454;
  default: 
#line 111
  __bad_unaligned_access_size();
#line 111
  goto ldv_49454;
  }
  ldv_49454: 
#line 111
  tags = tags + 4U;
#line 111
  return (tags);
}
}
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 142
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 146
  envp[0] = (char *)"HOME=/";
#line 146
  envp[1] = (char *)"TERM=linux";
#line 146
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 146
  envp[3] = 0;
#line 146
  envp[4] = 0;
#line 146
  envp[5] = 0;
#line 154
  argv[0] = (char *)(& usermode_helper);
#line 154
  argv[1] = cmd;
#line 154
  argv[2] = (char *)(& mb);
#line 154
  argv[3] = 0;
#line 157
  tmp = mdev_to_minor(mdev);
#line 157
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 159
  tmp___0 = get_net_conf(mdev);
#line 159
  if (tmp___0 != 0) {
#line 160
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 162
    afs = (char *)"ipv6";
#line 163
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 165
    goto ldv_49775;
    case 2: 
#line 167
    afs = (char *)"ipv4";
#line 168
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 170
    goto ldv_49775;
    default: 
#line 172
    afs = (char *)"ssocks";
#line 173
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_49775: 
#line 176
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 177
    envp[3] = (char *)(& af);
#line 178
    envp[4] = (char *)(& ad);
#line 179
    put_net_conf(mdev);
  } else {

  }
#line 184
  drbd_md_sync(mdev);
#line 186
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 188
  drbd_bcast_ev_helper(mdev, cmd);
#line 189
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 190
  if (ret != 0) {
#line 191
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 195
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 199
  if (ret < 0) {
#line 200
    ret = 0;
  } else {

  }
#line 202
  return (ret);
}
}
#line 205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 212
  if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 212
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            212);
  } else {

  }
#line 214
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 214
  if (tmp != 0) {
#line 215
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 216
    put_ldev(mdev);
  } else {
#line 218
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 219
    nps = (enum drbd_disk_state )mdev->state.ldv_37520.pdsk;
#line 220
    goto out;
  }
#line 223
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 225
  switch ((r >> 8) & 255) {
  case 3: 
#line 227
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 228
  nps = D_INCONSISTENT;
#line 229
  goto ldv_49787;
  case 4: 
#line 231
  ex_to_string = (char *)"peer was fenced";
#line 232
  nps = D_OUTDATED;
#line 233
  goto ldv_49787;
  case 5: ;
#line 235
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 237
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 238
    nps = D_OUTDATED;
  } else {
#line 240
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 241
    nps = (enum drbd_disk_state )mdev->state.ldv_37520.pdsk;
  }
#line 243
  goto ldv_49787;
  case 6: 
#line 247
  ex_to_string = (char *)"peer is active";
#line 248
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 249
  nps = D_UNKNOWN;
#line 250
  val.i = 0U;
#line 250
  val.ldv_37520.disk = 5U;
#line 250
  mask.i = 0U;
#line 250
  mask.ldv_37520.disk = 15U;
#line 250
  _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 251
  goto ldv_49787;
  case 7: ;
#line 253
  if ((unsigned int )fp != 2U) {
#line 254
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 255
  ex_to_string = (char *)"peer was stonithed";
#line 256
  nps = D_OUTDATED;
#line 257
  goto ldv_49787;
  default: 
#line 260
  nps = D_UNKNOWN;
#line 261
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 262
  return (nps);
  }
  ldv_49787: 
#line 265
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
  out: ;
#line 269
  if ((unsigned int )*((unsigned char *)mdev + 2278UL) != 0U && (unsigned int )nps > 5U) {
#line 272
    val___0.i = 0U;
#line 272
    val___0.ldv_37520.susp_fen = 0U;
#line 272
    mask___0.i = 0U;
#line 272
    mask___0.ldv_37520.susp_fen = 1U;
#line 272
    _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
  } else {

  }
#line 275
  return (nps);
}
}
#line 278 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int _try_outdate_peer_async(void *data ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_disk_state nps ;
  union drbd_state ns ;

  {
#line 280
  mdev = (struct drbd_conf *)data;
#line 284
  nps = drbd_try_outdate_peer(mdev);
#line 297
  spin_lock_irq(& mdev->req_lock);
#line 298
  ns = mdev->state;
#line 299
  if ((int )ns.ldv_37520.conn <= 8) {
#line 300
    ns.ldv_37520.pdsk = (unsigned char )nps;
#line 301
    _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 303
  spin_unlock_irq(& mdev->req_lock);
#line 305
  return (0);
}
}
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) 
{ 
  struct task_struct *opa ;
  struct task_struct *__k ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 312
  tmp = mdev_to_minor(mdev);
#line 312
  tmp___0 = kthread_create_on_node(& _try_outdate_peer_async, (void *)mdev, -1, "drbd%d_a_helper",
                                   tmp);
#line 312
  __k = tmp___0;
#line 312
  tmp___1 = IS_ERR((void const   *)__k);
#line 312
  if (tmp___1 == 0L) {
#line 312
    wake_up_process(__k);
  } else {

  }
#line 312
  opa = __k;
#line 313
  tmp___2 = IS_ERR((void const   *)opa);
#line 313
  if (tmp___2 != 0L) {
#line 314
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "out of mem, failed to invoke fence-peer helper\n");
  } else {

  }
#line 315
  return;
}
}
#line 318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) 
{ 
  int max_tries ;
  enum drbd_state_rv rv ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 320
  max_tries = 4;
#line 321
  rv = 0;
#line 322
  try = 0;
#line 323
  forced = 0;
#line 327
  if ((unsigned int )new_role == 1U) {
#line 328
    request_ping(mdev);
  } else {

  }
#line 330
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 332
  mask.i = 0U;
#line 332
  mask.ldv_37520.role = 3U;
#line 333
  val.i = 0U;
#line 333
  val.ldv_37520.role = (unsigned char )new_role;
#line 335
  goto ldv_49825;
  ldv_49828: 
#line 336
  rv = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 340
  if ((int )rv == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 341
    val.ldv_37520.pdsk = 0U;
#line 342
    mask.ldv_37520.pdsk = 0U;
#line 343
    goto ldv_49825;
  } else {

  }
#line 346
  if (((int )rv == -2 && force != 0) && ((int )mdev->state.ldv_37520.disk <= 7 && (int )mdev->state.ldv_37520.disk > 3)) {
#line 349
    mask.ldv_37520.disk = 15U;
#line 350
    val.ldv_37520.disk = 8U;
#line 351
    forced = 1;
#line 352
    goto ldv_49825;
  } else {

  }
#line 355
  if (((int )rv == -2 && (unsigned int )*((unsigned char *)mdev + 2277UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 357
    if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 357
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
              357);
    } else {

    }
#line 358
    nps = drbd_try_outdate_peer(mdev);
#line 360
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 361
      val.ldv_37520.disk = 8U;
#line 362
      mask.ldv_37520.disk = 15U;
    } else {

    }
#line 365
    val.ldv_37520.pdsk = (unsigned char )nps;
#line 366
    mask.ldv_37520.pdsk = 15U;
#line 368
    goto ldv_49825;
  } else {

  }
#line 371
  if ((int )rv == 2) {
#line 372
    goto fail;
  } else {

  }
#line 373
  if ((int )rv == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 374
    nps = drbd_try_outdate_peer(mdev);
#line 376
    if (force != 0 && (unsigned int )nps > 5U) {
#line 377
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 378
      nps = D_OUTDATED;
    } else {

    }
#line 381
    mask.ldv_37520.pdsk = 15U;
#line 382
    val.ldv_37520.pdsk = (unsigned char )nps;
#line 384
    goto ldv_49825;
  } else {

  }
#line 386
  if ((int )rv == -1) {
#line 389
    schedule_timeout_interruptible((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 390
    if (try < max_tries) {
#line 391
      try = max_tries + -1;
    } else {

    }
#line 392
    goto ldv_49825;
  } else {

  }
#line 394
  if ((int )rv <= 0) {
#line 395
    rv = _drbd_request_state(mdev, mask, val, 6);
#line 397
    if ((int )rv <= 0) {
#line 398
      goto fail;
    } else {

    }
  } else {

  }
#line 400
  goto ldv_49827;
  ldv_49825: 
#line 335
  tmp = try;
#line 335
  try = try + 1;
#line 335
  if (tmp < max_tries) {
#line 336
    goto ldv_49828;
  } else {

  }
  ldv_49827: ;
#line 403
  if ((int )rv <= 0) {
#line 404
    goto fail;
  } else {

  }
#line 406
  if (forced != 0) {
#line 407
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 410
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 410
  if (tmp___0 == 0) {
#line 410
    goto ldv_49829;
  } else {

  }
#line 410
  tmp___1 = get_current();
#line 410
  __wait.flags = 0U;
#line 410
  __wait.private = (void *)tmp___1;
#line 410
  __wait.func = & autoremove_wake_function;
#line 410
  __wait.task_list.next = & __wait.task_list;
#line 410
  __wait.task_list.prev = & __wait.task_list;
  ldv_49832: 
#line 410
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 410
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 410
  if (tmp___2 == 0) {
#line 410
    goto ldv_49831;
  } else {

  }
#line 410
  schedule();
#line 410
  goto ldv_49832;
  ldv_49831: 
#line 410
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49829: ;
#line 412
  if ((unsigned int )new_role == 2U) {
#line 413
    set_disk_ro(mdev->vdisk, 1);
#line 414
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 414
    if (tmp___3 != 0) {
#line 415
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 416
      put_ldev(mdev);
    } else {

    }
  } else {
#line 419
    tmp___4 = get_net_conf(mdev);
#line 419
    if (tmp___4 != 0) {
#line 420
      (mdev->net_conf)->want_lose = 0U;
#line 421
      put_net_conf(mdev);
    } else {

    }
#line 423
    set_disk_ro(mdev->vdisk, 0);
#line 424
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 424
    if (tmp___5 != 0) {
#line 425
      if ((((int )mdev->state.ldv_37520.conn <= 9 || (int )mdev->state.ldv_37520.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 428
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 430
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 431
      put_ldev(mdev);
    } else {

    }
  }
#line 438
  if ((int )mdev->state.ldv_37520.conn > 8) {
#line 440
    if (forced != 0) {
#line 441
      drbd_send_uuids(mdev);
    } else {

    }
#line 442
    drbd_send_state(mdev);
  } else {

  }
#line 445
  drbd_md_sync(mdev);
#line 447
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 449
  mutex_unlock(& mdev->state_mutex);
#line 450
  return (rv);
}
}
#line 453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(int minor , int create ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 457
  if ((unsigned int )minor >= minor_count) {
#line 458
    return (0);
  } else {

  }
#line 460
  mdev = minor_to_mdev((unsigned int )minor);
#line 462
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && create != 0) {
#line 463
    disk = 0;
#line 464
    mdev = drbd_new_device((unsigned int )minor);
#line 466
    spin_lock_irq(& drbd_pp_lock);
#line 467
    if ((unsigned long )*(minor_table + (unsigned long )minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 468
      *(minor_table + (unsigned long )minor) = mdev;
#line 469
      disk = mdev->vdisk;
#line 470
      mdev = 0;
    } else {

    }
#line 472
    spin_unlock_irq(& drbd_pp_lock);
#line 474
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 477
      add_disk(disk);
    } else {
#line 479
      drbd_free_mdev(mdev);
    }
#line 481
    mdev = minor_to_mdev((unsigned int )minor);
  } else {

  }
#line 484
  return (mdev);
}
}
#line 487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;
  enum drbd_state_rv tmp___0 ;

  {
#line 492
  memset((void *)(& primary_args), 0, 4UL);
#line 493
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 493
  if (tmp == 0) {
#line 494
    reply->ret_code = 126;
#line 495
    return (0);
  } else {

  }
#line 498
  tmp___0 = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 498
  reply->ret_code = (int )tmp___0;
#line 501
  return (0);
}
}
#line 504 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 507
  tmp = drbd_set_role(mdev, R_SECONDARY, 0);
#line 507
  reply->ret_code = (int )tmp;
#line 509
  return (0);
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 517
  md_size_sect = 0UL;
#line 518
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 521
  bdev->md.md_size_sect = 262144U;
#line 522
  tmp = drbd_md_ss__(mdev, bdev);
#line 522
  bdev->md.md_offset = (u64 )tmp;
#line 523
  bdev->md.al_offset = 8;
#line 524
  bdev->md.bm_offset = 72;
#line 525
  goto ldv_49856;
  case -2: 
#line 528
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 528
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 529
  bdev->md.md_offset = 0ULL;
#line 530
  bdev->md.al_offset = 8;
#line 531
  bdev->md.bm_offset = 72;
#line 532
  goto ldv_49856;
  case -1: ;
  case -3: 
#line 535
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 535
  bdev->md.md_offset = (u64 )tmp___1;
#line 537
  bdev->md.al_offset = -64;
#line 539
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 540
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 541
  md_size_sect = md_size_sect >> 15;
#line 542
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 546
  md_size_sect = md_size_sect + 72UL;
#line 548
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 550
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 551
  goto ldv_49856;
  }
  ldv_49856: ;
#line 554
  return;
}
}
#line 556 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 560
  units[0] = 75;
#line 560
  units[1] = 77;
#line 560
  units[2] = 71;
#line 560
  units[3] = 84;
#line 560
  units[4] = 80;
#line 560
  units[5] = 69;
#line 561
  base = 0;
#line 562
  goto ldv_49867;
  ldv_49866: 
#line 564
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 565
  base = base + 1;
  ldv_49867: ;
#line 562
  if (size > 9999ULL && (unsigned int )base <= 4U) {
#line 563
    goto ldv_49866;
  } else {

  }
#line 567
  sprintf(buf, "%u %cB", (unsigned int )size, (int )units[base]);
#line 569
  return (buf);
}
}
#line 585 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 587
  set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 588
  tmp = is_susp(mdev->state);
#line 588
  if (tmp != 0) {
#line 589
    return;
  } else {

  }
#line 590
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 590
  if (tmp___0 == 0) {
#line 590
    goto ldv_49872;
  } else {

  }
#line 590
  tmp___1 = get_current();
#line 590
  __wait.flags = 0U;
#line 590
  __wait.private = (void *)tmp___1;
#line 590
  __wait.func = & autoremove_wake_function;
#line 590
  __wait.task_list.next = & __wait.task_list;
#line 590
  __wait.task_list.prev = & __wait.task_list;
  ldv_49875: 
#line 590
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 590
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 590
  if (tmp___2 == 0) {
#line 590
    goto ldv_49874;
  } else {

  }
#line 590
  schedule();
#line 590
  goto ldv_49875;
  ldv_49874: 
#line 590
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49872: ;
#line 593
  return;
}
}
#line 593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 595
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 596
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 597
  return;
}
}
#line 606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int err___0 ;

  {
#line 614
  rv = 0;
#line 625
  drbd_suspend_io(mdev);
#line 628
  tmp = lc_try_lock(mdev->act_log);
#line 628
  if (tmp != 0) {
#line 628
    goto ldv_49891;
  } else {

  }
#line 628
  tmp___0 = get_current();
#line 628
  __wait.flags = 0U;
#line 628
  __wait.private = (void *)tmp___0;
#line 628
  __wait.func = & autoremove_wake_function;
#line 628
  __wait.task_list.next = & __wait.task_list;
#line 628
  __wait.task_list.prev = & __wait.task_list;
  ldv_49894: 
#line 628
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 628
  tmp___1 = lc_try_lock(mdev->act_log);
#line 628
  if (tmp___1 != 0) {
#line 628
    goto ldv_49893;
  } else {

  }
#line 628
  schedule();
#line 628
  goto ldv_49894;
  ldv_49893: 
#line 628
  finish_wait(& mdev->al_wait, & __wait);
  ldv_49891: 
#line 630
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 631
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 632
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 635
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 637
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 639
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 639
  if (tmp___5 != size) {
#line 639
    goto _L;
  } else {
#line 639
    tmp___6 = drbd_bm_capacity(mdev);
#line 639
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 642
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 643
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 643
      if (tmp___3 != 0L) {
#line 645
        tmp___2 = drbd_bm_capacity(mdev);
#line 645
        size = tmp___2 >> 1;
#line 646
        if (size == 0UL) {
#line 647
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 650
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 654
        rv = dev_size_error;
      } else {

      }
#line 657
      drbd_set_my_capacity(mdev, size);
#line 658
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 659
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 659
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 662
  if ((int )rv == -1) {
#line 663
    goto out;
  } else {

  }
#line 665
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 667
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 667
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 670
  if (la_size_changed != 0 || md_moved != 0) {
#line 673
    drbd_al_shrink(mdev);
#line 674
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 678
    err___0 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed", BM_LOCKED_MASK);
#line 680
    if (err___0 != 0) {
#line 681
      rv = dev_size_error;
#line 682
      goto out;
    } else {

    }
#line 684
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 687
  if (size > la_size) {
#line 688
    rv = grew;
  } else {

  }
#line 689
  if (size < la_size) {
#line 690
    rv = shrunk;
  } else {

  }
  out: 
#line 692
  lc_unlock(mdev->act_log);
#line 693
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 694
  drbd_resume_io(mdev);
#line 696
  return (rv);
}
}
#line 700 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 702
  p_size = mdev->p_size;
#line 703
  la_size = (sector_t )bdev->md.la_size_sect;
#line 705
  u_size = (sector_t )bdev->dc.disk_size;
#line 706
  size = 0UL;
#line 708
  m_size = drbd_get_max_capacity___1(bdev);
#line 710
  if ((int )mdev->state.ldv_37520.conn <= 9 && assume_peer_has_space != 0) {
#line 711
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 712
    p_size = m_size;
  } else {

  }
#line 715
  if (p_size != 0UL && m_size != 0UL) {
#line 716
    __min1 = p_size;
#line 716
    __min2 = m_size;
#line 716
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 718
  if (la_size != 0UL) {
#line 719
    size = la_size;
#line 720
    if (m_size != 0UL && m_size < size) {
#line 721
      size = m_size;
    } else {

    }
#line 722
    if (p_size != 0UL && p_size < size) {
#line 723
      size = p_size;
    } else {

    }
  } else {
#line 725
    if (m_size != 0UL) {
#line 726
      size = m_size;
    } else {

    }
#line 727
    if (p_size != 0UL) {
#line 728
      size = p_size;
    } else {

    }
  }
#line 732
  if (size == 0UL) {
#line 733
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 735
  if (u_size != 0UL) {
#line 736
    if (u_size > size) {
#line 737
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 740
      size = u_size;
    }
  } else {

  }
#line 743
  return (size);
}
}
#line 754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 761
  _b = mdev->sync_conf.al_extents <= 6;
#line 761
  if (_b != 0) {
#line 761
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            761);
  } else {

  }
#line 761
  if (_b != 0) {
#line 762
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 764
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 766
    return (0);
  } else {

  }
#line 768
  in_use = 0U;
#line 769
  t = mdev->act_log;
#line 770
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 773
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 774
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 775
    return (-12);
  } else {

  }
#line 777
  spin_lock_irq(& mdev->al_lock);
#line 778
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 779
    i = 0;
#line 779
    goto ldv_49923;
    ldv_49922: 
#line 780
    e = lc_element_by_index(t, (unsigned int )i);
#line 781
    if (e->refcnt != 0U) {
#line 782
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 784
    in_use = e->refcnt + in_use;
#line 779
    i = i + 1;
    ldv_49923: ;
#line 779
    if ((unsigned int )i < t->nr_elements) {
#line 780
      goto ldv_49922;
    } else {

    }

  } else {

  }
#line 787
  if (in_use == 0U) {
#line 788
    mdev->act_log = n;
  } else {

  }
#line 789
  spin_unlock_irq(& mdev->al_lock);
#line 790
  if (in_use != 0U) {
#line 791
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 792
    lc_destroy(n);
#line 793
    return (-16);
  } else
#line 795
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 796
    lc_destroy(t);
  } else {

  }
#line 798
  drbd_md_mark_dirty(mdev);
#line 799
  return (0);
}
}
#line 802 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_bio_size ) 
{ 
  struct request_queue *q ;
  int max_hw_sectors ;
  int max_segments ;
  struct request_queue *b ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned int _min2 ;
  int tmp___0 ;
  struct request_queue *b___0 ;
  int tmp___1 ;

  {
#line 804
  q = mdev->rq_queue;
#line 805
  max_hw_sectors = (int )(max_bio_size >> 9);
#line 806
  max_segments = 0;
#line 808
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 808
  if (tmp___0 != 0) {
#line 809
    b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 811
    tmp = queue_max_hw_sectors(b);
#line 811
    _min1 = tmp;
#line 811
    _min2 = max_bio_size >> 9;
#line 811
    max_hw_sectors = (int )(_min1 < _min2 ? _min1 : _min2);
#line 812
    max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 813
    put_ldev(mdev);
  } else {

  }
#line 816
  blk_queue_logical_block_size(q, 512);
#line 817
  blk_queue_max_hw_sectors(q, (unsigned int )max_hw_sectors);
#line 819
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 820
  blk_queue_segment_boundary(q, 4095UL);
#line 822
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 822
  if (tmp___1 != 0) {
#line 823
    b___0 = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 825
    blk_queue_stack_limits(q, b___0);
#line 827
    if (q->backing_dev_info.ra_pages != b___0->backing_dev_info.ra_pages) {
#line 828
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
                q->backing_dev_info.ra_pages, b___0->backing_dev_info.ra_pages);
#line 831
      q->backing_dev_info.ra_pages = b___0->backing_dev_info.ra_pages;
    } else {

    }
#line 833
    put_ldev(mdev);
  } else {

  }
#line 835
  return;
}
}
#line 837 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) 
{ 
  int now ;
  int new ;
  int local ;
  int peer ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int __min1 ;
  int __min2 ;

  {
#line 841
  tmp = queue_max_hw_sectors(mdev->rq_queue);
#line 841
  now = (int )(tmp << 9);
#line 842
  local = mdev->local_max_bio_size;
#line 843
  peer = mdev->peer_max_bio_size;
#line 845
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 845
  if (tmp___1 != 0) {
#line 846
    tmp___0 = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 846
    local = (int )(tmp___0 << 9);
#line 847
    mdev->local_max_bio_size = local;
#line 848
    put_ldev(mdev);
  } else {

  }
#line 854
  if ((int )mdev->state.ldv_37520.conn > 9) {
#line 855
    if (mdev->agreed_pro_version <= 93) {
#line 856
      peer = mdev->peer_max_bio_size;
    } else
#line 857
    if (mdev->agreed_pro_version == 94) {
#line 858
      peer = 32768;
    } else {
#line 860
      peer = 131072;
    }
  } else {

  }
#line 863
  __min1 = local;
#line 863
  __min2 = peer;
#line 863
  new = __min1 < __min2 ? __min1 : __min2;
#line 865
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && new < now) {
#line 866
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED new < now; (%d < %d)\n",
            new, now);
  } else {

  }
#line 868
  if (new != now) {
#line 869
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max BIO size = %u\n",
              new);
  } else {

  }
#line 871
  drbd_setup_queue_param(mdev, (unsigned int )new);
#line 872
  return;
}
}
#line 881 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 883
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 883
  if (tmp == 0) {
#line 883
    goto ldv_49950;
  } else {

  }
#line 883
  tmp___0 = get_current();
#line 883
  __wait.flags = 0U;
#line 883
  __wait.private = (void *)tmp___0;
#line 883
  __wait.func = & autoremove_wake_function;
#line 883
  __wait.task_list.next = & __wait.task_list;
#line 883
  __wait.task_list.prev = & __wait.task_list;
  ldv_49953: 
#line 883
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 883
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 883
  if (tmp___1 == 0) {
#line 883
    goto ldv_49952;
  } else {

  }
#line 883
  schedule();
#line 883
  goto ldv_49953;
  ldv_49952: 
#line 883
  finish_wait(& mdev->state_wait, & __wait);
  ldv_49950: 
#line 884
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 884
  if (tmp___2 == 0) {
#line 884
    goto ldv_49954;
  } else {

  }
#line 884
  tmp___3 = get_current();
#line 884
  __wait___0.flags = 0U;
#line 884
  __wait___0.private = (void *)tmp___3;
#line 884
  __wait___0.func = & autoremove_wake_function;
#line 884
  __wait___0.task_list.next = & __wait___0.task_list;
#line 884
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_49957: 
#line 884
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 884
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 884
  if (tmp___4 == 0) {
#line 884
    goto ldv_49956;
  } else {

  }
#line 884
  schedule();
#line 884
  goto ldv_49957;
  ldv_49956: 
#line 884
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_49954: 
#line 885
  drbd_thread_start(& mdev->worker);
#line 886
  drbd_flush_workqueue(mdev);
#line 887
  return;
}
}
#line 892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 894
  spin_lock_irq(& mdev->req_lock);
#line 895
  if (((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U && (unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 898
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 899
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 901
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 902
  spin_unlock_irq(& mdev->req_lock);
#line 903
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 904
  return;
}
}
#line 907 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_suspend_al(struct drbd_conf *mdev ) 
{ 
  int s ;
  int tmp ;
  int tmp___0 ;

  {
#line 909
  s = 0;
#line 911
  tmp = lc_try_lock(mdev->act_log);
#line 911
  if (tmp != 0) {
#line 912
    drbd_al_shrink(mdev);
#line 913
    lc_unlock(mdev->act_log);
  } else {
#line 915
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to lock al in drbd_suspend_al()\n");
#line 916
    return;
  }
#line 919
  spin_lock_irq(& mdev->req_lock);
#line 920
  if ((int )mdev->state.ldv_37520.conn <= 9) {
#line 921
    tmp___0 = test_and_set_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 921
    s = tmp___0 == 0;
  } else {

  }
#line 923
  spin_unlock_irq(& mdev->req_lock);
#line 925
  if (s != 0) {
#line 926
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Suspended AL updates\n");
  } else {

  }
#line 927
  return;
}
}
#line 931 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct block_device *bdev ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  enum drbd_state_rv rv ;
  int cp_discovered ;
  int logical_block_size ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int prot ;
  int tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___19 ;
  unsigned short tmp___20 ;
  struct page *page ;
  struct page *tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  sector_t tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  unsigned long tmp___36 ;
  unsigned long tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 938
  nbc = 0;
#line 940
  resync_lru = 0;
#line 943
  cp_discovered = 0;
#line 946
  drbd_reconfig_start(mdev);
#line 949
  if ((int )mdev->state.ldv_37520.disk > 0) {
#line 950
    retcode = ERR_DISK_CONFIGURED;
#line 951
    goto fail;
  } else {

  }
#line 957
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 957
  if (tmp == 0) {
#line 957
    goto ldv_49983;
  } else {

  }
#line 957
  tmp___0 = get_current();
#line 957
  __wait.flags = 0U;
#line 957
  __wait.private = (void *)tmp___0;
#line 957
  __wait.func = & autoremove_wake_function;
#line 957
  __wait.task_list.next = & __wait.task_list;
#line 957
  __wait.task_list.prev = & __wait.task_list;
  ldv_49986: 
#line 957
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 957
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 957
  if (tmp___1 == 0) {
#line 957
    goto ldv_49985;
  } else {

  }
#line 957
  schedule();
#line 957
  goto ldv_49986;
  ldv_49985: 
#line 957
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49983: 
#line 960
  tmp___2 = kzalloc(392UL, 208U);
#line 960
  nbc = (struct drbd_backing_dev *)tmp___2;
#line 961
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 962
    retcode = ERR_NOMEM;
#line 963
    goto fail;
  } else {

  }
#line 966
  nbc->dc.disk_size = 0ULL;
#line 967
  nbc->dc.on_io_error = 0;
#line 968
  nbc->dc.fencing = 0;
#line 969
  nbc->dc.max_bio_bvecs = 0;
#line 971
  tmp___3 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 971
  if (tmp___3 == 0) {
#line 972
    retcode = ERR_MANDATORY_TAG;
#line 973
    goto fail;
  } else {

  }
#line 976
  if (nbc->dc.meta_dev_idx < -3) {
#line 977
    retcode = ERR_MD_IDX_INVALID;
#line 978
    goto fail;
  } else {

  }
#line 981
  tmp___4 = get_net_conf(mdev);
#line 981
  if (tmp___4 != 0) {
#line 982
    prot = (mdev->net_conf)->wire_protocol;
#line 983
    put_net_conf(mdev);
#line 984
    if (nbc->dc.fencing == 2 && prot == 1) {
#line 985
      retcode = ERR_STONITH_AND_PROT_A;
#line 986
      goto fail;
    } else {

    }
  } else {

  }
#line 990
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.backing_dev), 131U, (void *)mdev);
#line 992
  tmp___6 = IS_ERR((void const   *)bdev);
#line 992
  if (tmp___6 != 0L) {
#line 993
    tmp___5 = PTR_ERR((void const   *)bdev);
#line 993
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___5);
#line 995
    retcode = ERR_OPEN_DISK;
#line 996
    goto fail;
  } else {

  }
#line 998
  nbc->backing_bdev = bdev;
#line 1008
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.meta_dev), 131U, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 1012
  tmp___8 = IS_ERR((void const   *)bdev);
#line 1012
  if (tmp___8 != 0L) {
#line 1013
    tmp___7 = PTR_ERR((void const   *)bdev);
#line 1013
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___7);
#line 1015
    retcode = ERR_OPEN_MD_DISK;
#line 1016
    goto fail;
  } else {

  }
#line 1018
  nbc->md_bdev = bdev;
#line 1020
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 1023
    retcode = ERR_MD_IDX_INVALID;
#line 1024
    goto fail;
  } else {

  }
#line 1027
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 1030
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 1031
    retcode = ERR_NOMEM;
#line 1032
    goto fail;
  } else {

  }
#line 1036
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1038
  tmp___10 = drbd_get_max_capacity___1(nbc);
#line 1038
  if ((unsigned long long )tmp___10 < nbc->dc.disk_size) {
#line 1039
    tmp___9 = drbd_get_max_capacity___1(nbc);
#line 1039
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___9, nbc->dc.disk_size);
#line 1042
    retcode = ERR_DISK_TO_SMALL;
#line 1043
    goto fail;
  } else {

  }
#line 1046
  if (nbc->dc.meta_dev_idx < 0) {
#line 1047
    max_possible_sectors = 2251799813685248UL;
#line 1049
    min_md_device_sectors = 2048UL;
  } else {
#line 1051
    max_possible_sectors = 8587575296UL;
#line 1052
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 1055
  tmp___11 = drbd_get_capacity(nbc->md_bdev);
#line 1055
  if (tmp___11 < min_md_device_sectors) {
#line 1056
    retcode = ERR_MD_DISK_TO_SMALL;
#line 1057
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 1060
    goto fail;
  } else {

  }
#line 1065
  tmp___12 = drbd_get_max_capacity___1(nbc);
#line 1065
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 1065
  if (tmp___12 < tmp___13) {
#line 1067
    retcode = ERR_DISK_TO_SMALL;
#line 1068
    goto fail;
  } else {

  }
#line 1071
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 1073
  if (nbc->known_size > max_possible_sectors) {
#line 1074
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 1077
    if (nbc->dc.meta_dev_idx >= 0) {
#line 1078
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 1082
  drbd_suspend_io(mdev);
#line 1084
  tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1084
  if (tmp___14 == 0) {
#line 1084
    goto ldv_49988;
  } else {
#line 1084
    tmp___15 = is_susp(mdev->state);
#line 1084
    if (tmp___15 != 0) {
#line 1084
      goto ldv_49988;
    } else {

    }
  }
#line 1084
  tmp___16 = get_current();
#line 1084
  __wait___0.flags = 0U;
#line 1084
  __wait___0.private = (void *)tmp___16;
#line 1084
  __wait___0.func = & autoremove_wake_function;
#line 1084
  __wait___0.task_list.next = & __wait___0.task_list;
#line 1084
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_49991: 
#line 1084
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1084
  tmp___17 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1084
  if (tmp___17 == 0) {
#line 1084
    goto ldv_49990;
  } else {
#line 1084
    tmp___18 = is_susp(mdev->state);
#line 1084
    if (tmp___18 != 0) {
#line 1084
      goto ldv_49990;
    } else {

    }
  }
#line 1084
  schedule();
#line 1084
  goto ldv_49991;
  ldv_49990: 
#line 1084
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_49988: 
#line 1086
  drbd_flush_workqueue(mdev);
#line 1088
  val.i = 0U;
#line 1088
  val.ldv_37520.disk = 1U;
#line 1088
  mask.i = 0U;
#line 1088
  mask.ldv_37520.disk = 15U;
#line 1088
  rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1089
  retcode = (enum drbd_ret_code )rv;
#line 1090
  drbd_resume_io(mdev);
#line 1091
  if ((int )rv <= 0) {
#line 1092
    goto fail;
  } else {

  }
#line 1094
  tmp___19 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1094
  if (tmp___19 == 0) {
#line 1095
    goto force_diskless;
  } else {

  }
#line 1097
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1100
  tmp___20 = bdev_logical_block_size(nbc->md_bdev);
#line 1100
  logical_block_size = (int )tmp___20;
#line 1101
  if (logical_block_size == 0) {
#line 1102
    logical_block_size = 512;
  } else {

  }
#line 1104
  if (logical_block_size != 512) {
#line 1105
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1106
      tmp___21 = alloc_pages(16U, 0U);
#line 1106
      page = tmp___21;
#line 1107
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1108
        goto force_diskless_dec;
      } else {

      }
#line 1110
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1112
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1114
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1118
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1119
    tmp___22 = drbd_bm_init(mdev);
#line 1119
    if (tmp___22 != 0) {
#line 1120
      retcode = ERR_NOMEM;
#line 1121
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1125
  tmp___23 = drbd_md_read(mdev, nbc);
#line 1125
  retcode = (enum drbd_ret_code )tmp___23;
#line 1126
  if ((unsigned int )retcode != 101U) {
#line 1127
    goto force_diskless_dec;
  } else {

  }
#line 1129
  if (((int )mdev->state.ldv_37520.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1132
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1134
    retcode = ERR_DATA_NOT_CURRENT;
#line 1135
    goto force_diskless_dec;
  } else {

  }
#line 1139
  tmp___24 = drbd_check_al_size(mdev);
#line 1139
  if (tmp___24 != 0) {
#line 1140
    retcode = ERR_NOMEM;
#line 1141
    goto force_diskless_dec;
  } else {

  }
#line 1145
  tmp___25 = drbd_md_test_flag(nbc, 1);
#line 1145
  if (tmp___25 != 0) {
#line 1145
    tmp___26 = drbd_new_dev_size(mdev, nbc, 0);
#line 1145
    if ((unsigned long long )tmp___26 < nbc->md.la_size_sect) {
#line 1147
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1148
      retcode = ERR_DISK_TO_SMALL;
#line 1149
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1152
  tmp___27 = drbd_al_read_log(mdev, nbc);
#line 1152
  if (tmp___27 == 0) {
#line 1153
    retcode = ERR_IO_MD_DISK;
#line 1154
    goto force_diskless_dec;
  } else {

  }
#line 1159
  if ((unsigned int )*((unsigned char *)nbc + 372UL) != 0U) {
#line 1160
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1162
    clear_bit(14, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1168
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1168
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1168);
  } else {

  }
#line 1169
  mdev->ldev = nbc;
#line 1170
  mdev->resync = resync_lru;
#line 1171
  nbc = 0;
#line 1172
  resync_lru = 0;
#line 1174
  mdev->write_ordering = WO_bdev_flush;
#line 1175
  drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 1177
  tmp___28 = drbd_md_test_flag(mdev->ldev, 64);
#line 1177
  if (tmp___28 != 0) {
#line 1178
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1180
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1182
  tmp___29 = drbd_md_test_flag(mdev->ldev, 2);
#line 1182
  if (tmp___29 != 0 && ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U || (unsigned int )*((unsigned char *)mdev + 2278UL) == 0U)) {
#line 1184
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 1185
    cp_discovered = 1;
  } else {

  }
#line 1188
  mdev->send_cnt = 0U;
#line 1189
  mdev->recv_cnt = 0U;
#line 1190
  mdev->read_cnt = 0U;
#line 1191
  mdev->writ_cnt = 0U;
#line 1193
  drbd_reconsider_max_bio_size(mdev);
#line 1209
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1210
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 1210
    tmp___30 = drbd_md_test_flag(mdev->ldev, 2);
#line 1210
    if (tmp___30 != 0) {
#line 1210
      tmp___31 = drbd_md_test_flag(mdev->ldev, 4);
#line 1210
      if (tmp___31 == 0) {
#line 1213
        set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1215
  dd = drbd_determin_dev_size(mdev, 0);
#line 1216
  if ((int )dd == -1) {
#line 1217
    retcode = ERR_NOMEM_BITMAP;
#line 1218
    goto force_diskless_dec;
  } else
#line 1219
  if ((int )dd == 2) {
#line 1220
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1222
  tmp___34 = drbd_md_test_flag(mdev->ldev, 8);
#line 1222
  if (tmp___34 != 0) {
#line 1223
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1225
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching",
                              BM_LOCKED_MASK);
#line 1225
    if (tmp___32 != 0) {
#line 1227
      retcode = ERR_IO_MD_DISK;
#line 1228
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1231
    tmp___33 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching",
                              BM_LOCKED_MASK);
#line 1231
    if (tmp___33 < 0) {
#line 1233
      retcode = ERR_IO_MD_DISK;
#line 1234
      goto force_diskless_dec;
    } else {

    }
  }
#line 1238
  if (cp_discovered != 0) {
#line 1239
    drbd_al_apply_to_bm(mdev);
#line 1240
    tmp___35 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"crashed primary apply AL",
                              BM_LOCKED_MASK);
#line 1240
    if (tmp___35 != 0) {
#line 1242
      retcode = ERR_IO_MD_DISK;
#line 1243
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1247
  tmp___36 = _drbd_bm_total_weight(mdev);
#line 1247
  tmp___37 = drbd_bm_bits(mdev);
#line 1247
  if (tmp___36 == tmp___37) {
#line 1248
    drbd_suspend_al(mdev);
  } else {

  }
#line 1250
  spin_lock_irq(& mdev->req_lock);
#line 1251
  os = mdev->state;
#line 1252
  ns.i = os.i;
#line 1258
  tmp___39 = drbd_md_test_flag(mdev->ldev, 1);
#line 1258
  if (tmp___39 != 0) {
#line 1259
    tmp___38 = drbd_md_test_flag(mdev->ldev, 16);
#line 1259
    if (tmp___38 != 0) {
#line 1260
      ns.ldv_37520.disk = 7U;
    } else {
#line 1262
      ns.ldv_37520.disk = 5U;
    }
  } else {
#line 1264
    ns.ldv_37520.disk = 4U;
  }
#line 1267
  tmp___40 = drbd_md_test_flag(mdev->ldev, 32);
#line 1267
  if (tmp___40 != 0) {
#line 1268
    ns.ldv_37520.pdsk = 5U;
  } else {

  }
#line 1270
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1272
    ns.ldv_37520.disk = 8U;
  } else {

  }
#line 1281
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1282
    mdev->new_state_tmp.i = ns.i;
#line 1283
    ns.i = os.i;
#line 1284
    ns.ldv_37520.disk = 3U;
#line 1289
    kfree((void const   *)mdev->p_uuid);
#line 1290
    mdev->p_uuid = 0;
  } else {

  }
#line 1293
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1294
  ns = mdev->state;
#line 1295
  spin_unlock_irq(& mdev->req_lock);
#line 1297
  if ((int )rv <= 0) {
#line 1298
    goto force_diskless_dec;
  } else {

  }
#line 1300
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 1301
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1303
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1305
  drbd_md_mark_dirty(mdev);
#line 1306
  drbd_md_sync(mdev);
#line 1308
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1309
  put_ldev(mdev);
#line 1310
  reply->ret_code = (int )retcode;
#line 1311
  drbd_reconfig_done(mdev);
#line 1312
  return (0);
  force_diskless_dec: 
#line 1315
  put_ldev(mdev);
  force_diskless: 
#line 1317
  val___0.i = 0U;
#line 1317
  val___0.ldv_37520.disk = 2U;
#line 1317
  mask___0.i = 0U;
#line 1317
  mask___0.ldv_37520.disk = 15U;
#line 1317
  drbd_force_state(mdev, mask___0, val___0);
#line 1318
  drbd_md_sync(mdev);
  fail: ;
#line 1320
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1321
    if ((unsigned long )nbc->backing_bdev != (unsigned long )((struct block_device *)0)) {
#line 1322
      blkdev_put(nbc->backing_bdev, 131U);
    } else {

    }
#line 1324
    if ((unsigned long )nbc->md_bdev != (unsigned long )((struct block_device *)0)) {
#line 1325
      blkdev_put(nbc->md_bdev, 131U);
    } else {

    }
#line 1327
    kfree((void const   *)nbc);
  } else {

  }
#line 1329
  lc_destroy(resync_lru);
#line 1331
  reply->ret_code = (int )retcode;
#line 1332
  drbd_reconfig_done(mdev);
#line 1333
  return (0);
}
}
#line 1341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1344
  drbd_suspend_io(mdev);
#line 1345
  val.i = 0U;
#line 1345
  val.ldv_37520.disk = 0U;
#line 1345
  mask.i = 0U;
#line 1345
  mask.ldv_37520.disk = 15U;
#line 1345
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1346
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 1347
    tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1347
    if (tmp == 0) {
#line 1347
      goto ldv_50012;
    } else {

    }
#line 1347
    tmp___0 = get_current();
#line 1347
    __wait.flags = 0U;
#line 1347
    __wait.private = (void *)tmp___0;
#line 1347
    __wait.func = & autoremove_wake_function;
#line 1347
    __wait.task_list.next = & __wait.task_list;
#line 1347
    __wait.task_list.prev = & __wait.task_list;
    ldv_50015: 
#line 1347
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1347
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1347
    if (tmp___1 == 0) {
#line 1347
      goto ldv_50014;
    } else {

    }
#line 1347
    schedule();
#line 1347
    goto ldv_50015;
    ldv_50014: 
#line 1347
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_50012: ;
  } else {

  }
#line 1348
  drbd_resume_io(mdev);
#line 1349
  return (0);
}
}
#line 1352 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_code retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  enum drbd_fencing_p fp ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  struct crypto_tfm *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___16 ;

  {
#line 1357
  new_conf = 0;
#line 1358
  tfm = 0;
#line 1359
  integrity_w_tfm = 0;
#line 1360
  integrity_r_tfm = 0;
#line 1361
  new_tl_hash = 0;
#line 1362
  new_ee_hash = 0;
#line 1365
  int_dig_out = 0;
#line 1366
  int_dig_in = 0;
#line 1367
  int_dig_vv = 0;
#line 1370
  drbd_reconfig_start(mdev);
#line 1372
  if ((int )mdev->state.ldv_37520.conn > 0) {
#line 1373
    retcode = ERR_NET_CONFIGURED;
#line 1374
    goto fail;
  } else {

  }
#line 1378
  tmp = kzalloc(544UL, 208U);
#line 1378
  new_conf = (struct net_conf *)tmp;
#line 1379
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1380
    retcode = ERR_NOMEM;
#line 1381
    goto fail;
  } else {

  }
#line 1384
  new_conf->timeout = 60;
#line 1385
  new_conf->try_connect_int = 10;
#line 1386
  new_conf->ping_int = 10;
#line 1387
  new_conf->max_epoch_size = 2048;
#line 1388
  new_conf->max_buffers = 2048;
#line 1389
  new_conf->unplug_watermark = 128;
#line 1390
  new_conf->sndbuf_size = 0;
#line 1391
  new_conf->rcvbuf_size = 0;
#line 1392
  new_conf->ko_count = 0;
#line 1393
  new_conf->after_sb_0p = 0;
#line 1394
  new_conf->after_sb_1p = 0;
#line 1395
  new_conf->after_sb_2p = 0;
#line 1396
  new_conf->want_lose = 0U;
#line 1397
  new_conf->two_primaries = 0U;
#line 1398
  new_conf->wire_protocol = 3;
#line 1399
  new_conf->ping_timeo = 5;
#line 1400
  new_conf->rr_conflict = 0;
#line 1401
  new_conf->on_congestion = 0;
#line 1402
  new_conf->cong_extents = 127;
#line 1404
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1404
  if (tmp___0 == 0) {
#line 1405
    retcode = ERR_MANDATORY_TAG;
#line 1406
    goto fail;
  } else {

  }
#line 1409
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && new_conf->wire_protocol != 3) {
#line 1411
    retcode = ERR_NOT_PROTO_C;
#line 1412
    goto fail;
  } else {

  }
#line 1415
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1415
  if (tmp___1 != 0) {
#line 1416
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1417
    put_ldev(mdev);
#line 1418
    if (new_conf->wire_protocol == 1 && (unsigned int )fp == 2U) {
#line 1419
      retcode = ERR_STONITH_AND_PROT_A;
#line 1420
      goto fail;
    } else {

    }
  } else {

  }
#line 1424
  if (new_conf->on_congestion != 0 && new_conf->wire_protocol != 1) {
#line 1425
    retcode = ERR_CONG_NOT_PROTO_A;
#line 1426
    goto fail;
  } else {

  }
#line 1429
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 540UL) != 0U) {
#line 1430
    retcode = ERR_DISCARD;
#line 1431
    goto fail;
  } else {

  }
#line 1434
  retcode = NO_ERROR;
#line 1436
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1437
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1438
  i = 0;
#line 1438
  goto ldv_50042;
  ldv_50041: 
#line 1439
  odev = minor_to_mdev((unsigned int )i);
#line 1440
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1441
    goto ldv_50040;
  } else {

  }
#line 1442
  tmp___4 = get_net_conf(odev);
#line 1442
  if (tmp___4 != 0) {
#line 1443
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1444
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1444
      tmp___2 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1444
      if (tmp___2 == 0) {
#line 1446
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1448
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1449
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1449
      tmp___3 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1449
      if (tmp___3 == 0) {
#line 1451
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1453
    put_net_conf(odev);
#line 1454
    if ((unsigned int )retcode != 101U) {
#line 1455
      goto fail;
    } else {

    }
  } else {

  }
  ldv_50040: 
#line 1438
  i = i + 1;
  ldv_50042: ;
#line 1438
  if ((unsigned int )i < minor_count) {
#line 1439
    goto ldv_50041;
  } else {

  }

#line 1459
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1460
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1462
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1463
    tmp___5 = IS_ERR((void const   *)tfm);
#line 1463
    if (tmp___5 != 0L) {
#line 1464
      tfm = 0;
#line 1465
      retcode = ERR_AUTH_ALG;
#line 1466
      goto fail;
    } else {

    }
#line 1469
    tmp___6 = crypto_hash_tfm(tfm);
#line 1469
    tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 1469
    if (tmp___7 == 0) {
#line 1470
      retcode = ERR_AUTH_ALG_ND;
#line 1471
      goto fail;
    } else {

    }
  } else {

  }
#line 1475
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1476
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1477
    tmp___8 = IS_ERR((void const   *)integrity_w_tfm);
#line 1477
    if (tmp___8 != 0L) {
#line 1478
      integrity_w_tfm = 0;
#line 1479
      retcode = ERR_INTEGRITY_ALG;
#line 1480
      goto fail;
    } else {

    }
#line 1483
    tmp___9 = crypto_hash_tfm(integrity_w_tfm);
#line 1483
    tmp___10 = drbd_crypto_is_hash(tmp___9);
#line 1483
    if (tmp___10 == 0) {
#line 1484
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1485
      goto fail;
    } else {

    }
#line 1488
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1489
    tmp___11 = IS_ERR((void const   *)integrity_r_tfm);
#line 1489
    if (tmp___11 != 0L) {
#line 1490
      integrity_r_tfm = 0;
#line 1491
      retcode = ERR_INTEGRITY_ALG;
#line 1492
      goto fail;
    } else {

    }
  } else {

  }
#line 1496
  ns = new_conf->max_epoch_size / 8;
#line 1497
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1498
    tmp___12 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1498
    new_tl_hash = (struct hlist_head *)tmp___12;
#line 1499
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1500
      retcode = ERR_NOMEM;
#line 1501
      goto fail;
    } else {

    }
  } else {

  }
#line 1505
  ns = new_conf->max_buffers / 8;
#line 1506
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1507
    tmp___13 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1507
    new_ee_hash = (struct hlist_head *)tmp___13;
#line 1508
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1509
      retcode = ERR_NOMEM;
#line 1510
      goto fail;
    } else {

    }
  } else {

  }
#line 1514
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1516
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1517
    tmp___14 = crypto_hash_digestsize(integrity_w_tfm);
#line 1517
    i = (int )tmp___14;
#line 1518
    int_dig_out = kmalloc((size_t )i, 208U);
#line 1519
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1520
      retcode = ERR_NOMEM;
#line 1521
      goto fail;
    } else {

    }
#line 1523
    int_dig_in = kmalloc((size_t )i, 208U);
#line 1524
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1525
      retcode = ERR_NOMEM;
#line 1526
      goto fail;
    } else {

    }
#line 1528
    int_dig_vv = kmalloc((size_t )i, 208U);
#line 1529
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1530
      retcode = ERR_NOMEM;
#line 1531
      goto fail;
    } else {

    }
  } else {

  }
#line 1535
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1536
    tmp___15 = drbd_bm_init(mdev);
#line 1536
    if (tmp___15 != 0) {
#line 1537
      retcode = ERR_NOMEM;
#line 1538
      goto fail;
    } else {

    }
  } else {

  }
#line 1542
  drbd_flush_workqueue(mdev);
#line 1543
  spin_lock_irq(& mdev->req_lock);
#line 1544
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1545
    retcode = ERR_NET_CONFIGURED;
#line 1546
    spin_unlock_irq(& mdev->req_lock);
#line 1547
    goto fail;
  } else {

  }
#line 1549
  mdev->net_conf = new_conf;
#line 1551
  mdev->send_cnt = 0U;
#line 1552
  mdev->recv_cnt = 0U;
#line 1554
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1555
    kfree((void const   *)mdev->tl_hash);
#line 1556
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1557
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1560
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1561
    kfree((void const   *)mdev->ee_hash);
#line 1562
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1563
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1566
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1567
  mdev->cram_hmac_tfm = tfm;
#line 1569
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1570
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1572
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1573
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1575
  kfree((void const   *)mdev->int_dig_out);
#line 1576
  kfree((void const   *)mdev->int_dig_in);
#line 1577
  kfree((void const   *)mdev->int_dig_vv);
#line 1578
  mdev->int_dig_out = int_dig_out;
#line 1579
  mdev->int_dig_in = int_dig_in;
#line 1580
  mdev->int_dig_vv = int_dig_vv;
#line 1581
  __ns.i = mdev->state.i;
#line 1581
  __ns.ldv_37520.conn = 2U;
#line 1581
  tmp___16 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1581
  retcode = (enum drbd_ret_code )tmp___16;
#line 1582
  spin_unlock_irq(& mdev->req_lock);
#line 1584
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1585
  reply->ret_code = (int )retcode;
#line 1586
  drbd_reconfig_done(mdev);
#line 1587
  return (0);
  fail: 
#line 1590
  kfree((void const   *)int_dig_out);
#line 1591
  kfree((void const   *)int_dig_in);
#line 1592
  kfree((void const   *)int_dig_vv);
#line 1593
  crypto_free_hash(tfm);
#line 1594
  crypto_free_hash(integrity_w_tfm);
#line 1595
  crypto_free_hash(integrity_r_tfm);
#line 1596
  kfree((void const   *)new_tl_hash);
#line 1597
  kfree((void const   *)new_ee_hash);
#line 1598
  kfree((void const   *)new_conf);
#line 1600
  reply->ret_code = (int )retcode;
#line 1601
  drbd_reconfig_done(mdev);
#line 1602
  return (0);
}
}
#line 1605 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  struct disconnect dc ;
  int tmp ;
  union drbd_state __ns ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___0 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  enum drbd_state_rv tmp___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 1611
  memset((void *)(& dc), 0, 4UL);
#line 1612
  tmp = disconnect_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & dc);
#line 1612
  if (tmp == 0) {
#line 1613
    retcode = 126;
#line 1614
    goto fail;
  } else {

  }
#line 1617
  if ((unsigned int )*((unsigned char *)(& dc) + 0UL) != 0U) {
#line 1618
    spin_lock_irq(& mdev->req_lock);
#line 1619
    if ((int )mdev->state.ldv_37520.conn > 7) {
#line 1620
      __ns.i = mdev->state.i;
#line 1620
      __ns.ldv_37520.conn = 1U;
#line 1620
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1621
    spin_unlock_irq(& mdev->req_lock);
#line 1622
    goto done;
  } else {

  }
#line 1625
  val.i = 0U;
#line 1625
  val.ldv_37520.conn = 1U;
#line 1625
  mask.i = 0U;
#line 1625
  mask.ldv_37520.conn = 31U;
#line 1625
  tmp___0 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1625
  retcode = (int )tmp___0;
#line 1627
  if (retcode == 2) {
#line 1628
    goto done;
  } else
#line 1629
  if (retcode == -9) {
#line 1630
    goto done;
  } else
#line 1631
  if (retcode == -7) {
#line 1634
    val___0.i = 0U;
#line 1634
    val___0.ldv_37520.conn = 1U;
#line 1634
    val___0.ldv_37520.pdsk = 5U;
#line 1633
    mask___0.i = 0U;
#line 1633
    mask___0.ldv_37520.conn = 31U;
#line 1634
    mask___0.ldv_37520.pdsk = 15U;
#line 1634
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1635
  if (retcode == -10) {
#line 1638
    val___1.i = 0U;
#line 1638
    val___1.ldv_37520.conn = 1U;
#line 1638
    val___1.ldv_37520.disk = 5U;
#line 1637
    mask___1.i = 0U;
#line 1637
    mask___1.ldv_37520.conn = 31U;
#line 1638
    mask___1.ldv_37520.disk = 15U;
#line 1638
    tmp___1 = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1638
    retcode = (int )tmp___1;
#line 1640
    if (retcode == -11 || retcode == -16) {
#line 1641
      val___2.i = 0U;
#line 1641
      val___2.ldv_37520.conn = 1U;
#line 1641
      mask___2.i = 0U;
#line 1641
      mask___2.ldv_37520.conn = 31U;
#line 1641
      drbd_force_state(mdev, mask___2, val___2);
#line 1642
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1646
  if (retcode <= 0) {
#line 1647
    goto fail;
  } else {

  }
#line 1649
  __ret = 0;
#line 1649
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 16U) {
#line 1649
    tmp___2 = get_current();
#line 1649
    __wait.flags = 0U;
#line 1649
    __wait.private = (void *)tmp___2;
#line 1649
    __wait.func = & autoremove_wake_function;
#line 1649
    __wait.task_list.next = & __wait.task_list;
#line 1649
    __wait.task_list.prev = & __wait.task_list;
    ldv_50077: 
#line 1649
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1649
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 16U) {
#line 1649
      goto ldv_50075;
    } else {

    }
#line 1649
    tmp___3 = get_current();
#line 1649
    tmp___4 = signal_pending(tmp___3);
#line 1649
    if (tmp___4 == 0) {
#line 1649
      schedule();
#line 1649
      goto ldv_50076;
    } else {

    }
#line 1649
    __ret = -512;
#line 1649
    goto ldv_50075;
    ldv_50076: ;
#line 1649
    goto ldv_50077;
    ldv_50075: 
#line 1649
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1649
  if (__ret != 0) {
#line 1653
    retcode = 129;
#line 1654
    goto fail;
  } else {

  }
  done: 
#line 1658
  retcode = 101;
  fail: 
#line 1660
  drbd_md_sync(mdev);
#line 1661
  reply->ret_code = retcode;
#line 1662
  return (0);
}
}
#line 1665 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1669
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1670
  if ((int )mdev->state.ldv_37520.role != (int )mdev->state.ldv_37520.peer) {
#line 1671
    iass = (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U;
  } else {
#line 1673
    iass = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1675
  if (iass != 0) {
#line 1676
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1678
    val.i = 0U;
#line 1678
    val.ldv_37520.conn = 15U;
#line 1678
    mask.i = 0U;
#line 1678
    mask.ldv_37520.conn = 31U;
#line 1678
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1680
  return;
}
}
#line 1681 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1685
  retcode = 101;
#line 1689
  memset((void *)(& rs), 0, 16UL);
#line 1690
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1690
  if (tmp == 0) {
#line 1691
    retcode = 126;
#line 1692
    goto fail;
  } else {

  }
#line 1695
  if ((int )mdev->state.ldv_37520.conn > 10) {
#line 1696
    retcode = 130;
#line 1697
    goto fail;
  } else {

  }
#line 1700
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 2U && (unsigned int )*((unsigned char *)mdev + 2276UL) == 8U) {
#line 1702
    retcode = 131;
#line 1703
    goto fail;
  } else {

  }
#line 1706
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1706
  if (tmp___0 == 0) {
#line 1707
    retcode = 138;
#line 1708
    goto fail;
  } else {

  }
#line 1711
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1712
    retcode = 153;
#line 1713
    goto fail;
  } else {

  }
#line 1716
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1716
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1717
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1719
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1720
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1721
  dd = drbd_determin_dev_size(mdev, ddsf);
#line 1722
  drbd_md_sync(mdev);
#line 1723
  put_ldev(mdev);
#line 1724
  if ((int )dd == -1) {
#line 1725
    retcode = 140;
#line 1726
    goto fail;
  } else {

  }
#line 1729
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1730
    if ((int )dd == 2) {
#line 1731
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1733
    drbd_send_uuids(mdev);
#line 1734
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1738
  reply->ret_code = retcode;
#line 1739
  return (0);
}
}
#line 1742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  int *rs_plan_s ;
  int fifo_size ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  void *tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  bool tmp___15 ;
  int tmp___16 ;

  {
#line 1745
  retcode = 101;
#line 1749
  verify_tfm = 0;
#line 1750
  csums_tfm = 0;
#line 1753
  rs_plan_s = 0;
#line 1756
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1756
  if (tmp) {
#line 1756
    tmp___0 = 0;
  } else {
#line 1756
    tmp___0 = 1;
  }
#line 1756
  if (tmp___0) {
#line 1757
    retcode = 122;
#line 1758
    goto fail;
  } else {

  }
#line 1761
  if ((nlp->flags & 2) != 0) {
#line 1762
    memset((void *)(& sc), 0, 212UL);
#line 1763
    sc.rate = 250;
#line 1764
    sc.after = -1;
#line 1765
    sc.al_extents = 127;
#line 1766
    sc.on_no_data = 0;
#line 1767
    sc.c_plan_ahead = 0;
#line 1768
    sc.c_delay_target = 10;
#line 1769
    sc.c_fill_target = 0;
#line 1770
    sc.c_max_rate = 102400;
#line 1771
    sc.c_min_rate = 4096;
  } else {
#line 1773
    __len = 212UL;
#line 1773
    if (__len > 63UL) {
#line 1773
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1773
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1775
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1775
  if (tmp___1 == 0) {
#line 1776
    retcode = 126;
#line 1777
    goto fail;
  } else {

  }
#line 1781
  rsr = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 336U;
#line 1786
  if (rsr != 0) {
#line 1786
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1786
    if (tmp___2 != 0) {
#line 1787
      retcode = 148;
#line 1788
      goto fail;
    } else {

    }
  } else {

  }
#line 1791
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1792
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1793
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1793
    if (tmp___3 != 0L) {
#line 1794
      csums_tfm = 0;
#line 1795
      retcode = 144;
#line 1796
      goto fail;
    } else {

    }
#line 1799
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1799
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1799
    if (tmp___5 == 0) {
#line 1800
      retcode = 145;
#line 1801
      goto fail;
    } else {

    }
  } else {

  }
#line 1806
  ovr = (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U;
#line 1808
  if (ovr != 0) {
#line 1809
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1809
    if (tmp___6 != 0) {
#line 1810
      retcode = 149;
#line 1811
      goto fail;
    } else {

    }
  } else {

  }
#line 1815
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1816
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1817
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1817
    if (tmp___7 != 0L) {
#line 1818
      verify_tfm = 0;
#line 1819
      retcode = 146;
#line 1820
      goto fail;
    } else {

    }
#line 1823
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1823
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1823
    if (tmp___9 == 0) {
#line 1824
      retcode = 147;
#line 1825
      goto fail;
    } else {

    }
  } else {

  }
#line 1830
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1831
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1833
    if (err != 0) {
#line 1834
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "__bitmap_parse() failed with %d\n",
               err);
#line 1835
      retcode = 143;
#line 1836
      goto fail;
    } else {

    }
  } else {

  }
#line 1840
  _b = sc.rate <= 0;
#line 1840
  if (_b != 0) {
#line 1840
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1840);
  } else {

  }
#line 1840
  if (_b != 0) {
#line 1840
    sc.rate = 1;
  } else {

  }
#line 1841
  _b___0 = sc.al_extents <= 6;
#line 1841
  if (_b___0 != 0) {
#line 1841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1841);
  } else {

  }
#line 1841
  if (_b___0 != 0) {
#line 1841
    sc.al_extents = 127;
  } else {

  }
#line 1843
  if (sc.al_extents > 3843) {
#line 1844
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1845
    sc.al_extents = 3843;
  } else {

  }
#line 1852
  if (sc.after >= 0) {
#line 1853
    ensure_mdev(sc.after, 1);
  } else {

  }
#line 1858
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1859
  if (retcode != 101) {
#line 1860
    goto fail;
  } else {

  }
#line 1862
  fifo_size = (sc.c_plan_ahead * 250) / 250;
#line 1863
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 1864
    tmp___10 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 1864
    rs_plan_s = (int *)tmp___10;
#line 1865
    if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 1866
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 1867
      retcode = 122;
#line 1868
      goto fail;
    } else {

    }
  } else {

  }
#line 1874
  spin_lock(& mdev->peer_seq_lock);
#line 1875
  mdev->sync_conf = sc;
#line 1877
  if (rsr == 0) {
#line 1878
    crypto_free_hash(mdev->csums_tfm);
#line 1879
    mdev->csums_tfm = csums_tfm;
#line 1880
    csums_tfm = 0;
  } else {

  }
#line 1883
  if (ovr == 0) {
#line 1884
    crypto_free_hash(mdev->verify_tfm);
#line 1885
    mdev->verify_tfm = verify_tfm;
#line 1886
    verify_tfm = 0;
  } else {

  }
#line 1889
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 1890
    kfree((void const   *)mdev->rs_plan_s.values);
#line 1891
    mdev->rs_plan_s.values = rs_plan_s;
#line 1892
    mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 1893
    mdev->rs_planed = 0;
#line 1894
    rs_plan_s = 0;
  } else {

  }
#line 1897
  spin_unlock(& mdev->peer_seq_lock);
#line 1899
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1899
  if (tmp___14 != 0) {
#line 1900
    tmp___11 = lc_try_lock(mdev->act_log);
#line 1900
    if (tmp___11 != 0) {
#line 1900
      goto ldv_50121;
    } else {

    }
#line 1900
    tmp___12 = get_current();
#line 1900
    __wait.flags = 0U;
#line 1900
    __wait.private = (void *)tmp___12;
#line 1900
    __wait.func = & autoremove_wake_function;
#line 1900
    __wait.task_list.next = & __wait.task_list;
#line 1900
    __wait.task_list.prev = & __wait.task_list;
    ldv_50124: 
#line 1900
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1900
    tmp___13 = lc_try_lock(mdev->act_log);
#line 1900
    if (tmp___13 != 0) {
#line 1900
      goto ldv_50123;
    } else {

    }
#line 1900
    schedule();
#line 1900
    goto ldv_50124;
    ldv_50123: 
#line 1900
    finish_wait(& mdev->al_wait, & __wait);
    ldv_50121: 
#line 1901
    drbd_al_shrink(mdev);
#line 1902
    err = drbd_check_al_size(mdev);
#line 1903
    lc_unlock(mdev->act_log);
#line 1904
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1906
    put_ldev(mdev);
#line 1907
    drbd_md_sync(mdev);
#line 1909
    if (err != 0) {
#line 1910
      retcode = 122;
#line 1911
      goto fail;
    } else {

    }
  } else {

  }
#line 1915
  if ((int )mdev->state.ldv_37520.conn > 9) {
#line 1916
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1918
  tmp___15 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1918
  if (tmp___15) {
#line 1918
    tmp___16 = 0;
  } else {
#line 1918
    tmp___16 = 1;
  }
#line 1918
  if (tmp___16) {
#line 1919
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1920
    drbd_calc_cpu_mask(mdev);
#line 1921
    mdev->receiver.reset_cpu_mask = 1;
#line 1922
    mdev->asender.reset_cpu_mask = 1;
#line 1923
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1926
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1928
  kfree((void const   *)rs_plan_s);
#line 1929
  free_cpumask_var(new_cpu_mask);
#line 1930
  crypto_free_hash(csums_tfm);
#line 1931
  crypto_free_hash(verify_tfm);
#line 1932
  reply->ret_code = retcode;
#line 1933
  return (0);
}
}
#line 1936 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1943
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 1943
  if (tmp == 0) {
#line 1943
    goto ldv_50131;
  } else {

  }
#line 1943
  tmp___0 = get_current();
#line 1943
  __wait.flags = 0U;
#line 1943
  __wait.private = (void *)tmp___0;
#line 1943
  __wait.func = & autoremove_wake_function;
#line 1943
  __wait.task_list.next = & __wait.task_list;
#line 1943
  __wait.task_list.prev = & __wait.task_list;
  ldv_50134: 
#line 1943
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1943
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 1943
  if (tmp___1 == 0) {
#line 1943
    goto ldv_50133;
  } else {

  }
#line 1943
  schedule();
#line 1943
  goto ldv_50134;
  ldv_50133: 
#line 1943
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50131: 
#line 1945
  val.i = 0U;
#line 1945
  val.ldv_37520.conn = 12U;
#line 1945
  mask.i = 0U;
#line 1945
  mask.ldv_37520.conn = 31U;
#line 1945
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1945
  retcode = (int )tmp___2;
#line 1947
  if (retcode <= 0 && retcode != -15) {
#line 1948
    val___0.i = 0U;
#line 1948
    val___0.ldv_37520.conn = 12U;
#line 1948
    mask___0.i = 0U;
#line 1948
    mask___0.ldv_37520.conn = 31U;
#line 1948
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1950
  goto ldv_50151;
  ldv_50150: 
#line 1951
  spin_lock_irq(& mdev->req_lock);
#line 1952
  if ((int )mdev->state.ldv_37520.conn <= 9) {
#line 1953
    __ns.i = mdev->state.i;
#line 1953
    __ns.ldv_37520.disk = 4U;
#line 1953
    tmp___3 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1953
    retcode = (int )tmp___3;
  } else {

  }
#line 1954
  spin_unlock_irq(& mdev->req_lock);
#line 1956
  if (retcode != -15) {
#line 1957
    goto ldv_50145;
  } else {

  }
#line 1959
  val___1.i = 0U;
#line 1959
  val___1.ldv_37520.conn = 12U;
#line 1959
  mask___1.i = 0U;
#line 1959
  mask___1.ldv_37520.conn = 31U;
#line 1959
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_50151: ;
#line 1950
  if (retcode == -15) {
#line 1951
    goto ldv_50150;
  } else {

  }
  ldv_50145: 
#line 1962
  reply->ret_code = retcode;
#line 1963
  return (0);
}
}
#line 1966 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_bmio_set_susp_al(struct drbd_conf *mdev ) 
{ 
  int rv ;

  {
#line 1970
  rv = drbd_bmio_set_n_write(mdev);
#line 1971
  drbd_suspend_al(mdev);
#line 1972
  return (rv);
}
}
#line 1975 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1982
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 1982
  if (tmp == 0) {
#line 1982
    goto ldv_50162;
  } else {

  }
#line 1982
  tmp___0 = get_current();
#line 1982
  __wait.flags = 0U;
#line 1982
  __wait.private = (void *)tmp___0;
#line 1982
  __wait.func = & autoremove_wake_function;
#line 1982
  __wait.task_list.next = & __wait.task_list;
#line 1982
  __wait.task_list.prev = & __wait.task_list;
  ldv_50165: 
#line 1982
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1982
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 1982
  if (tmp___1 == 0) {
#line 1982
    goto ldv_50164;
  } else {

  }
#line 1982
  schedule();
#line 1982
  goto ldv_50165;
  ldv_50164: 
#line 1982
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50162: 
#line 1984
  val.i = 0U;
#line 1984
  val.ldv_37520.conn = 11U;
#line 1984
  mask.i = 0U;
#line 1984
  mask.ldv_37520.conn = 31U;
#line 1984
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1984
  retcode = (int )tmp___2;
#line 1986
  if (retcode <= 0) {
#line 1987
    if (retcode == -15 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 1990
      val___0.i = 0U;
#line 1990
      val___0.ldv_37520.pdsk = 4U;
#line 1990
      mask___0.i = 0U;
#line 1990
      mask___0.ldv_37520.pdsk = 15U;
#line 1990
      retcode = drbd_request_state(mdev, mask___0, val___0);
#line 1991
      if (retcode > 0) {
#line 1992
        tmp___3 = drbd_bitmap_io(mdev, & drbd_bmio_set_susp_al, (char *)"set_n_write from invalidate_peer",
                                 BM_DONT_CLEAR);
#line 1992
        if (tmp___3 != 0) {
#line 1995
          retcode = 118;
        } else {

        }
      } else {

      }
    } else {
#line 1998
      val___1.i = 0U;
#line 1998
      val___1.ldv_37520.conn = 11U;
#line 1998
      mask___1.i = 0U;
#line 1998
      mask___1.ldv_37520.conn = 31U;
#line 1998
      retcode = drbd_request_state(mdev, mask___1, val___1);
    }
  } else {

  }
#line 2001
  reply->ret_code = retcode;
#line 2002
  return (0);
}
}
#line 2005 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2008
  retcode = 101;
#line 2010
  val.i = 0U;
#line 2010
  val.ldv_37520.user_isp = 1U;
#line 2010
  mask.i = 0U;
#line 2010
  mask.ldv_37520.user_isp = 1U;
#line 2010
  tmp = drbd_request_state(mdev, mask, val);
#line 2010
  if (tmp == 2) {
#line 2011
    retcode = 134;
  } else {

  }
#line 2013
  reply->ret_code = retcode;
#line 2014
  return (0);
}
}
#line 2017 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state s ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2020
  retcode = 101;
#line 2023
  val.i = 0U;
#line 2023
  val.ldv_37520.user_isp = 0U;
#line 2023
  mask.i = 0U;
#line 2023
  mask.ldv_37520.user_isp = 1U;
#line 2023
  tmp = drbd_request_state(mdev, mask, val);
#line 2023
  if (tmp == 2) {
#line 2024
    s = mdev->state;
#line 2025
    if ((unsigned int )*((unsigned short *)(& s) + 0UL) == 320U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 336U) {
#line 2026
      retcode = (unsigned int )*((unsigned char *)(& s) + 2UL) == 0U ? ((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U ? 157 : 135) : 156;
    } else {
#line 2029
      retcode = 135;
    }
  } else {

  }
#line 2033
  reply->ret_code = retcode;
#line 2034
  return (0);
}
}
#line 2037 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2040
  val.i = 0U;
#line 2040
  val.ldv_37520.susp = 1U;
#line 2040
  mask.i = 0U;
#line 2040
  mask.ldv_37520.susp = 1U;
#line 2040
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2042
  return (0);
}
}
#line 2045 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2048
  tmp = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 2048
  if (tmp != 0) {
#line 2049
    drbd_uuid_new_current(mdev);
#line 2050
    clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2052
  drbd_suspend_io(mdev);
#line 2053
  val.i = 0U;
#line 2053
  val.ldv_37520.susp = 0U;
#line 2053
  val.ldv_37520.susp_nod = 0U;
#line 2053
  val.ldv_37520.susp_fen = 0U;
#line 2053
  mask.i = 0U;
#line 2053
  mask.ldv_37520.susp = 1U;
#line 2053
  mask.ldv_37520.susp_nod = 1U;
#line 2053
  mask.ldv_37520.susp_fen = 1U;
#line 2053
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2054
  if (reply->ret_code == 1) {
#line 2055
    if ((int )mdev->state.ldv_37520.conn <= 9) {
#line 2056
      tl_clear(mdev);
    } else {

    }
#line 2057
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U || (unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2058
      tl_restart(mdev, fail_frozen_disk_io);
    } else {

    }
  } else {

  }
#line 2060
  drbd_resume_io(mdev);
#line 2062
  return (0);
}
}
#line 2065 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2068
  val.i = 0U;
#line 2068
  val.ldv_37520.disk = 5U;
#line 2068
  mask.i = 0U;
#line 2068
  mask.ldv_37520.disk = 15U;
#line 2068
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2069
  return (0);
}
}
#line 2072 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 2077
  tl = (unsigned short *)(& reply->tag_list);
#line 2079
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2079
  if (tmp != 0) {
#line 2080
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 2081
    put_ldev(mdev);
  } else {

  }
#line 2084
  tmp___0 = get_net_conf(mdev);
#line 2084
  if (tmp___0 != 0) {
#line 2085
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 2086
    put_net_conf(mdev);
  } else {

  }
#line 2088
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 2090
  tmp___1 = tl;
#line 2090
  tl = tl + 1;
#line 2090
  __gu_p = (void *)tmp___1;
#line 2090
  switch (2UL) {
  case 1UL: 
#line 2090
  *((u8 *)__gu_p) = 0U;
#line 2090
  goto ldv_50234;
  case 2UL: 
#line 2090
  put_unaligned_le16(0, __gu_p);
#line 2090
  goto ldv_50234;
  case 4UL: 
#line 2090
  put_unaligned_le32(0U, __gu_p);
#line 2090
  goto ldv_50234;
  case 8UL: 
#line 2090
  put_unaligned_le64(0ULL, __gu_p);
#line 2090
  goto ldv_50234;
  default: 
#line 2090
  __bad_unaligned_access_size();
#line 2090
  goto ldv_50234;
  }
  ldv_50234: ;
#line 2092
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2095 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2098
  tl = (unsigned short *)(& reply->tag_list);
#line 2099
  s = mdev->state;
#line 2103
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 2106
  if ((int )s.ldv_37520.conn > 15 && (int )s.ldv_37520.conn <= 21) {
#line 2107
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2107
    if (tmp != 0) {
#line 2108
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2109
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2110
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 2113
  tmp___0 = tl;
#line 2113
  tl = tl + 1;
#line 2113
  __gu_p = (void *)tmp___0;
#line 2113
  switch (2UL) {
  case 1UL: 
#line 2113
  *((u8 *)__gu_p) = 0U;
#line 2113
  goto ldv_50250;
  case 2UL: 
#line 2113
  put_unaligned_le16(0, __gu_p);
#line 2113
  goto ldv_50250;
  case 4UL: 
#line 2113
  put_unaligned_le32(0U, __gu_p);
#line 2113
  goto ldv_50250;
  case 8UL: 
#line 2113
  put_unaligned_le64(0ULL, __gu_p);
#line 2113
  goto ldv_50250;
  default: 
#line 2113
  __bad_unaligned_access_size();
#line 2113
  goto ldv_50250;
  }
  ldv_50250: ;
#line 2115
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2123
  tl = (unsigned short *)(& reply->tag_list);
#line 2125
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2125
  if (tmp != 0) {
#line 2126
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 2127
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 2128
    put_ldev(mdev);
  } else {

  }
#line 2130
  tmp___0 = tl;
#line 2130
  tl = tl + 1;
#line 2130
  __gu_p = (void *)tmp___0;
#line 2130
  switch (2UL) {
  case 1UL: 
#line 2130
  *((u8 *)__gu_p) = 0U;
#line 2130
  goto ldv_50263;
  case 2UL: 
#line 2130
  put_unaligned_le16(0, __gu_p);
#line 2130
  goto ldv_50263;
  case 4UL: 
#line 2130
  put_unaligned_le32(0U, __gu_p);
#line 2130
  goto ldv_50263;
  case 8UL: 
#line 2130
  put_unaligned_le64(0ULL, __gu_p);
#line 2130
  goto ldv_50263;
  default: 
#line 2130
  __bad_unaligned_access_size();
#line 2130
  goto ldv_50263;
  }
  ldv_50263: ;
#line 2132
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2147
  tl = (unsigned short *)(& reply->tag_list);
#line 2149
  if (*((unsigned int *)mdev + 569UL) != 40960U) {
#line 2149
    tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2149
    rv = tmp != 0;
  } else {
#line 2149
    rv = 2;
  }
#line 2152
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 2153
  tmp___0 = tl;
#line 2153
  tl = tl + 1;
#line 2153
  __gu_p = (void *)tmp___0;
#line 2153
  switch (2UL) {
  case 1UL: 
#line 2153
  *((u8 *)__gu_p) = 0U;
#line 2153
  goto ldv_50277;
  case 2UL: 
#line 2153
  put_unaligned_le16(0, __gu_p);
#line 2153
  goto ldv_50277;
  case 4UL: 
#line 2153
  put_unaligned_le32(0U, __gu_p);
#line 2153
  goto ldv_50277;
  case 8UL: 
#line 2153
  put_unaligned_le64(0ULL, __gu_p);
#line 2153
  goto ldv_50277;
  default: 
#line 2153
  __bad_unaligned_access_size();
#line 2153
  goto ldv_50277;
  }
  ldv_50277: ;
#line 2155
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2162
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 2165
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2165
  if (tmp == 0) {
#line 2166
    reply->ret_code = 126;
#line 2167
    return (0);
  } else {

  }
#line 2172
  tmp___0 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2172
  if (tmp___0 == 0) {
#line 2172
    goto ldv_50288;
  } else {

  }
#line 2172
  tmp___1 = get_current();
#line 2172
  __wait.flags = 0U;
#line 2172
  __wait.private = (void *)tmp___1;
#line 2172
  __wait.func = & autoremove_wake_function;
#line 2172
  __wait.task_list.next = & __wait.task_list;
#line 2172
  __wait.task_list.prev = & __wait.task_list;
  ldv_50291: 
#line 2172
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2172
  tmp___2 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2172
  if (tmp___2 == 0) {
#line 2172
    goto ldv_50290;
  } else {

  }
#line 2172
  schedule();
#line 2172
  goto ldv_50291;
  ldv_50290: 
#line 2172
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50288: 
#line 2175
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 2176
  val.i = 0U;
#line 2176
  val.ldv_37520.conn = 18U;
#line 2176
  mask.i = 0U;
#line 2176
  mask.ldv_37520.conn = 31U;
#line 2176
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2177
  return (0);
}
}
#line 2181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 2184
  retcode = 101;
#line 2185
  skip_initial_sync = 0;
#line 2190
  memset((void *)(& args), 0, 4UL);
#line 2191
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2191
  if (tmp == 0) {
#line 2192
    reply->ret_code = 126;
#line 2193
    return (0);
  } else {

  }
#line 2196
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 2198
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2198
  if (tmp___0 == 0) {
#line 2199
    retcode = 138;
#line 2200
    goto out;
  } else {

  }
#line 2204
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2206
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 2207
    skip_initial_sync = 1;
  } else
#line 2208
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 2209
    retcode = 151;
#line 2210
    goto out_dec;
  } else {

  }
#line 2213
  drbd_uuid_set(mdev, 1, 0ULL);
#line 2214
  drbd_uuid_new_current(mdev);
#line 2216
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2217
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid",
                         BM_LOCKED_MASK);
#line 2219
    if (err != 0) {
#line 2220
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 2221
      retcode = 118;
    } else {

    }
#line 2223
    if (skip_initial_sync != 0) {
#line 2224
      drbd_send_uuids_skip_initial_sync(mdev);
#line 2225
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 2226
      drbd_print_uuids(mdev, "cleared bitmap UUID");
#line 2227
      spin_lock_irq(& mdev->req_lock);
#line 2228
      __ns.i = mdev->state.i;
#line 2228
      __ns.ldv_37520.disk = 8U;
#line 2228
      __ns.ldv_37520.pdsk = 8U;
#line 2228
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2230
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 2234
  drbd_md_sync(mdev);
  out_dec: 
#line 2236
  put_ldev(mdev);
  out: 
#line 2238
  mutex_unlock(& mdev->state_mutex);
#line 2240
  reply->ret_code = retcode;
#line 2241
  return (0);
}
}
#line 2251 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2251
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1312}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  struct task_struct *tmp___0 ;
  void *tmp___1 ;

  {
#line 2284
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2290
  reply_size = 34;
#line 2294
  tmp = ldv_try_module_get_1(& __this_module);
#line 2294
  if (tmp == 0) {
#line 2295
    printk("<3>drbd: try_module_get() failed!\n");
#line 2296
    return;
  } else {

  }
#line 2299
  tmp___0 = get_current();
#line 2299
  if (((tmp___0->cred)->cap_effective.cap[0] & 2097152U) == 0U) {
#line 2300
    retcode = 152;
#line 2301
    goto fail;
  } else {

  }
#line 2304
  mdev = ensure_mdev((int )nlp->drbd_minor, nlp->flags & 1);
#line 2306
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2307
    retcode = 127;
#line 2308
    goto fail;
  } else {

  }
#line 2311
  if (nlp->packet_type > 27 || nlp->packet_type == 27) {
#line 2313
    retcode = 137;
#line 2314
    goto fail;
  } else {

  }
#line 2317
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2320
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2321
    retcode = 137;
#line 2322
    goto fail;
  } else {

  }
#line 2325
  reply_size = cm->reply_body_size + reply_size;
#line 2328
  tmp___1 = kzalloc((size_t )reply_size, 208U);
#line 2328
  cn_reply = (struct cn_msg *)tmp___1;
#line 2329
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2330
    retcode = 122;
#line 2331
    goto fail;
  } else {

  }
#line 2333
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2335
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2337
  reply->minor = nlp->drbd_minor;
#line 2338
  reply->ret_code = 101;
#line 2341
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2343
  cn_reply->id = req->id;
#line 2344
  cn_reply->seq = req->seq;
#line 2345
  cn_reply->ack = req->ack + 1U;
#line 2346
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2347
  cn_reply->flags = 0U;
#line 2349
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2350
  if (rr != 0 && rr != -3) {
#line 2351
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2353
  kfree((void const   *)cn_reply);
#line 2354
  ldv_module_put_7(& __this_module);
#line 2355
  return;
  fail: 
#line 2357
  drbd_nl_send_reply(req, retcode);
#line 2358
  ldv_module_put_8(& __this_module);
#line 2359
  return;
}
}
#line 2361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2364 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2367
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2368
  len = (int )len < (int )l ? len : l;
#line 2369
  tmp = tl;
#line 2369
  tl = tl + 1;
#line 2369
  __gu_p = (void *)tmp;
#line 2369
  switch (2UL) {
  case 1UL: 
#line 2369
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2369
  goto ldv_50340;
  case 2UL: 
#line 2369
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2369
  goto ldv_50340;
  case 4UL: 
#line 2369
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2369
  goto ldv_50340;
  case 8UL: 
#line 2369
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2369
  goto ldv_50340;
  default: 
#line 2369
  __bad_unaligned_access_size();
#line 2369
  goto ldv_50340;
  }
  ldv_50340: 
#line 2370
  tmp___0 = tl;
#line 2370
  tl = tl + 1;
#line 2370
  __gu_p___0 = (void *)tmp___0;
#line 2370
  switch (2UL) {
  case 1UL: 
#line 2370
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2370
  goto ldv_50347;
  case 2UL: 
#line 2370
  put_unaligned_le16((int )len, __gu_p___0);
#line 2370
  goto ldv_50347;
  case 4UL: 
#line 2370
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2370
  goto ldv_50347;
  case 8UL: 
#line 2370
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2370
  goto ldv_50347;
  default: 
#line 2370
  __bad_unaligned_access_size();
#line 2370
  goto ldv_50347;
  }
  ldv_50347: 
#line 2371
  __len = (size_t )len;
#line 2371
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2372
  tl = tl + (unsigned long )len;
#line 2373
  if (nul_terminated != 0) {
#line 2374
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2375
  return (tl);
}
}
#line 2379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2381
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2381
  return (tmp);
}
}
#line 2385 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2387
  tmp = strlen(str);
#line 2387
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2387
  return (tmp___0);
}
}
#line 2391 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2393
  tmp = tl;
#line 2393
  tl = tl + 1;
#line 2393
  __gu_p = (void *)tmp;
#line 2393
  switch (2UL) {
  case 1UL: 
#line 2393
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2393
  goto ldv_50373;
  case 2UL: 
#line 2393
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2393
  goto ldv_50373;
  case 4UL: 
#line 2393
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2393
  goto ldv_50373;
  case 8UL: 
#line 2393
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2393
  goto ldv_50373;
  default: 
#line 2393
  __bad_unaligned_access_size();
#line 2393
  goto ldv_50373;
  }
  ldv_50373: ;
#line 2394
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2396
  tmp___0 = tl;
#line 2396
  tl = tl + 1;
#line 2396
  __gu_p___0 = (void *)tmp___0;
#line 2396
  switch (2UL) {
  case 1UL: 
#line 2396
  *((u8 *)__gu_p___0) = 4U;
#line 2396
  goto ldv_50381;
  case 2UL: 
#line 2396
  put_unaligned_le16(4, __gu_p___0);
#line 2396
  goto ldv_50381;
  case 4UL: 
#line 2396
  put_unaligned_le32(4U, __gu_p___0);
#line 2396
  goto ldv_50381;
  case 8UL: 
#line 2396
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2396
  goto ldv_50381;
  default: 
#line 2396
  __bad_unaligned_access_size();
#line 2396
  goto ldv_50381;
  }
  ldv_50381: 
#line 2397
  __gu_p___1 = (void *)tl;
#line 2397
  switch (4UL) {
  case 1UL: 
#line 2397
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2397
  goto ldv_50388;
  case 2UL: 
#line 2397
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2397
  goto ldv_50388;
  case 4UL: 
#line 2397
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2397
  goto ldv_50388;
  case 8UL: 
#line 2397
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2397
  goto ldv_50388;
  default: 
#line 2397
  __bad_unaligned_access_size();
#line 2397
  goto ldv_50388;
  }
  ldv_50388: 
#line 2398
  tl = tl + 4U;
#line 2399
  goto ldv_50393;
  case 16384U: 
#line 2401
  tmp___1 = tl;
#line 2401
  tl = tl + 1;
#line 2401
  __gu_p___2 = (void *)tmp___1;
#line 2401
  switch (2UL) {
  case 1UL: 
#line 2401
  *((u8 *)__gu_p___2) = 8U;
#line 2401
  goto ldv_50397;
  case 2UL: 
#line 2401
  put_unaligned_le16(8, __gu_p___2);
#line 2401
  goto ldv_50397;
  case 4UL: 
#line 2401
  put_unaligned_le32(8U, __gu_p___2);
#line 2401
  goto ldv_50397;
  case 8UL: 
#line 2401
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2401
  goto ldv_50397;
  default: 
#line 2401
  __bad_unaligned_access_size();
#line 2401
  goto ldv_50397;
  }
  ldv_50397: 
#line 2402
  __gu_p___3 = (void *)tl;
#line 2402
  switch (8UL) {
  case 1UL: 
#line 2402
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2402
  goto ldv_50404;
  case 2UL: 
#line 2402
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2402
  goto ldv_50404;
  case 4UL: 
#line 2402
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2402
  goto ldv_50404;
  case 8UL: 
#line 2402
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2402
  goto ldv_50404;
  default: 
#line 2402
  __bad_unaligned_access_size();
#line 2402
  goto ldv_50404;
  }
  ldv_50404: 
#line 2403
  tl = tl + 8U;
#line 2404
  goto ldv_50393;
  default: ;
  }
  ldv_50393: ;
#line 2409
  return (tl);
}
}
#line 2412 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2418
  cn_reply = (struct cn_msg *)(& buffer);
#line 2419
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2421
  tl = (unsigned short *)(& reply->tag_list);
#line 2425
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2427
  tmp = tl;
#line 2427
  tl = tl + 1;
#line 2427
  __gu_p = (void *)tmp;
#line 2427
  switch (2UL) {
  case 1UL: 
#line 2427
  *((u8 *)__gu_p) = 0U;
#line 2427
  goto ldv_50420;
  case 2UL: 
#line 2427
  put_unaligned_le16(0, __gu_p);
#line 2427
  goto ldv_50420;
  case 4UL: 
#line 2427
  put_unaligned_le32(0U, __gu_p);
#line 2427
  goto ldv_50420;
  case 8UL: 
#line 2427
  put_unaligned_le64(0ULL, __gu_p);
#line 2427
  goto ldv_50420;
  default: 
#line 2427
  __bad_unaligned_access_size();
#line 2427
  goto ldv_50420;
  }
  ldv_50420: 
#line 2429
  cn_reply->id.idx = 8U;
#line 2430
  cn_reply->id.val = 1U;
#line 2432
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2432
  cn_reply->seq = (__u32 )tmp___0;
#line 2433
  cn_reply->ack = 0U;
#line 2434
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2436
  cn_reply->flags = 0U;
#line 2438
  reply->packet_type = 17;
#line 2439
  reply->minor = mdev_to_minor(mdev);
#line 2440
  reply->ret_code = 101;
#line 2442
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2443
  return;
}
}
#line 2445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2451
  cn_reply = (struct cn_msg *)(& buffer);
#line 2452
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2454
  tl = (unsigned short *)(& reply->tag_list);
#line 2458
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2459
  tmp = tl;
#line 2459
  tl = tl + 1;
#line 2459
  __gu_p = (void *)tmp;
#line 2459
  switch (2UL) {
  case 1UL: 
#line 2459
  *((u8 *)__gu_p) = 0U;
#line 2459
  goto ldv_50435;
  case 2UL: 
#line 2459
  put_unaligned_le16(0, __gu_p);
#line 2459
  goto ldv_50435;
  case 4UL: 
#line 2459
  put_unaligned_le32(0U, __gu_p);
#line 2459
  goto ldv_50435;
  case 8UL: 
#line 2459
  put_unaligned_le64(0ULL, __gu_p);
#line 2459
  goto ldv_50435;
  default: 
#line 2459
  __bad_unaligned_access_size();
#line 2459
  goto ldv_50435;
  }
  ldv_50435: 
#line 2461
  cn_reply->id.idx = 8U;
#line 2462
  cn_reply->id.val = 1U;
#line 2464
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2464
  cn_reply->seq = (__u32 )tmp___0;
#line 2465
  cn_reply->ack = 0U;
#line 2466
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2468
  cn_reply->flags = 0U;
#line 2470
  reply->packet_type = 20;
#line 2471
  reply->minor = mdev_to_minor(mdev);
#line 2472
  reply->ret_code = 101;
#line 2474
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2475
  return;
}
}
#line 2477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1___0 ;
  unsigned int __min2___0 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2488
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2489
    return;
  } else {

  }
#line 2490
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2491
    return;
  } else {

  }
#line 2499
  tmp = kzalloc(33026UL, 16U);
#line 2499
  cn_reply = (struct cn_msg *)tmp;
#line 2506
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2507
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2509
    return;
  } else {

  }
#line 2512
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2513
  tl = (unsigned short *)(& reply->tag_list);
#line 2515
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2516
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2517
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2518
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2519
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->ldv_45720.block_id));
#line 2522
  __min1 = e->size;
#line 2522
  __min2 = 32768U;
#line 2522
  len = __min1 < __min2 ? __min1 : __min2;
#line 2523
  tmp___0 = tl;
#line 2523
  tl = tl + 1;
#line 2523
  __gu_p = (void *)tmp___0;
#line 2523
  switch (2UL) {
  case 1UL: 
#line 2523
  *((u8 *)__gu_p) = 50U;
#line 2523
  goto ldv_50458;
  case 2UL: 
#line 2523
  put_unaligned_le16(49202, __gu_p);
#line 2523
  goto ldv_50458;
  case 4UL: 
#line 2523
  put_unaligned_le32(49202U, __gu_p);
#line 2523
  goto ldv_50458;
  case 8UL: 
#line 2523
  put_unaligned_le64(49202ULL, __gu_p);
#line 2523
  goto ldv_50458;
  default: 
#line 2523
  __bad_unaligned_access_size();
#line 2523
  goto ldv_50458;
  }
  ldv_50458: 
#line 2524
  tmp___1 = tl;
#line 2524
  tl = tl + 1;
#line 2524
  __gu_p___0 = (void *)tmp___1;
#line 2524
  switch (2UL) {
  case 1UL: 
#line 2524
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2524
  goto ldv_50465;
  case 2UL: 
#line 2524
  put_unaligned_le16((int )((unsigned short )len), __gu_p___0);
#line 2524
  goto ldv_50465;
  case 4UL: 
#line 2524
  put_unaligned_le32(len, __gu_p___0);
#line 2524
  goto ldv_50465;
  case 8UL: 
#line 2524
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2524
  goto ldv_50465;
  default: 
#line 2524
  __bad_unaligned_access_size();
#line 2524
  goto ldv_50465;
  }
  ldv_50465: 
#line 2526
  page = e->pages;
#line 2527
  goto ldv_50481;
  ldv_50480: 
#line 2528
  tmp___2 = __kmap_atomic(page);
#line 2528
  d = tmp___2;
#line 2529
  __min1___0 = len;
#line 2529
  __min2___0 = 4096U;
#line 2529
  l = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 2530
  __len = (size_t )l;
#line 2530
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2531
  __kunmap_atomic(d);
#line 2532
  tl = tl + (unsigned long )l;
#line 2533
  len = len - l;
#line 2534
  if (len == 0U) {
#line 2535
    goto ldv_50479;
  } else {

  }
#line 2527
  page = page_chain_next(page);
  ldv_50481: ;
#line 2527
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2527
    tmp___3 = page_chain_next(page);
#line 2527
    __builtin_prefetch((void const   *)tmp___3);
#line 2527
    if (1 != 0) {
#line 2528
      goto ldv_50480;
    } else {
#line 2530
      goto ldv_50479;
    }
  } else {

  }
  ldv_50479: 
#line 2537
  tmp___4 = tl;
#line 2537
  tl = tl + 1;
#line 2537
  __gu_p___1 = (void *)tmp___4;
#line 2537
  switch (2UL) {
  case 1UL: 
#line 2537
  *((u8 *)__gu_p___1) = 0U;
#line 2537
  goto ldv_50484;
  case 2UL: 
#line 2537
  put_unaligned_le16(0, __gu_p___1);
#line 2537
  goto ldv_50484;
  case 4UL: 
#line 2537
  put_unaligned_le32(0U, __gu_p___1);
#line 2537
  goto ldv_50484;
  case 8UL: 
#line 2537
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2537
  goto ldv_50484;
  default: 
#line 2537
  __bad_unaligned_access_size();
#line 2537
  goto ldv_50484;
  }
  ldv_50484: 
#line 2539
  cn_reply->id.idx = 8U;
#line 2540
  cn_reply->id.val = 1U;
#line 2542
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2542
  cn_reply->seq = (__u32 )tmp___5;
#line 2543
  cn_reply->ack = 0U;
#line 2544
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2546
  cn_reply->flags = 0U;
#line 2548
  reply->packet_type = 24;
#line 2549
  reply->minor = mdev_to_minor(mdev);
#line 2550
  reply->ret_code = 101;
#line 2552
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2553
  kfree((void const   *)cn_reply);
#line 2554
  return;
}
}
#line 2556 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2562
  cn_reply = (struct cn_msg *)(& buffer);
#line 2563
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2565
  tl = (unsigned short *)(& reply->tag_list);
#line 2570
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2570
  if (tmp == 0) {
#line 2571
    return;
  } else {

  }
#line 2572
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2573
  put_ldev(mdev);
#line 2575
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2576
  tmp___0 = tl;
#line 2576
  tl = tl + 1;
#line 2576
  __gu_p = (void *)tmp___0;
#line 2576
  switch (2UL) {
  case 1UL: 
#line 2576
  *((u8 *)__gu_p) = 0U;
#line 2576
  goto ldv_50500;
  case 2UL: 
#line 2576
  put_unaligned_le16(0, __gu_p);
#line 2576
  goto ldv_50500;
  case 4UL: 
#line 2576
  put_unaligned_le32(0U, __gu_p);
#line 2576
  goto ldv_50500;
  case 8UL: 
#line 2576
  put_unaligned_le64(0ULL, __gu_p);
#line 2576
  goto ldv_50500;
  default: 
#line 2576
  __bad_unaligned_access_size();
#line 2576
  goto ldv_50500;
  }
  ldv_50500: 
#line 2578
  cn_reply->id.idx = 8U;
#line 2579
  cn_reply->id.val = 1U;
#line 2581
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2581
  cn_reply->seq = (__u32 )tmp___1;
#line 2582
  cn_reply->ack = 0U;
#line 2583
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2585
  cn_reply->flags = 0U;
#line 2587
  reply->packet_type = 23;
#line 2588
  reply->minor = mdev_to_minor(mdev);
#line 2589
  reply->ret_code = 101;
#line 2591
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2592
  return;
}
}
#line 2594 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2597
  try = 10;
#line 2599
  cn_id_drbd.val = 1U;
  ldv_50512: 
#line 2601
  cn_id_drbd.idx = cn_idx;
#line 2602
  err = cn_add_callback(& cn_id_drbd, "cn_drbd", & drbd_connector_callback);
#line 2603
  if (err == 0) {
#line 2604
    goto ldv_50511;
  } else {

  }
#line 2605
  cn_idx = cn_idx + 6977U;
#line 2606
  tmp = try;
#line 2606
  try = try - 1;
#line 2606
  if (tmp != 0) {
#line 2607
    goto ldv_50512;
  } else {

  }
  ldv_50511: ;
#line 2608
  if (err != 0) {
#line 2609
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2610
    return (err);
  } else {

  }
#line 2613
  return (0);
}
}
#line 2616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2620
  cn_id_drbd.idx = cn_idx;
#line 2621
  cn_id_drbd.val = 1U;
#line 2623
  cn_del_callback(& cn_id_drbd);
#line 2624
  return;
}
}
#line 2626 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2629
  cn_reply = (struct cn_msg *)(& buffer);
#line 2630
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2634
  memset((void *)(& buffer), 0, 32UL);
#line 2635
  cn_reply->id = req->id;
#line 2637
  cn_reply->seq = req->seq;
#line 2638
  cn_reply->ack = req->ack + 1U;
#line 2639
  cn_reply->len = 12U;
#line 2640
  cn_reply->flags = 0U;
#line 2642
  reply->packet_type = 27;
#line 2643
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2644
  reply->ret_code = ret_code;
#line 2646
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2647
  if (rr != 0 && rr != -3) {
#line 2648
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2649
  return;
}
}
#line 2659 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_7(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2664
  ldv_module_put(ldv_func_arg1);
#line 2665
  return;
}
}
#line 2667 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_8(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2672
  ldv_module_put(ldv_func_arg1);
#line 2673
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
