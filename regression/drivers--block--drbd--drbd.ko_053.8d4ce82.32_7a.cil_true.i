/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 24 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 25 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 168 "include/linux/types.h"
typedef __u16 __le16;
#line 169 "include/linux/types.h"
typedef __u16 __be16;
#line 171 "include/linux/types.h"
typedef __u32 __be32;
#line 176 "include/linux/types.h"
typedef __u32 __wsum;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 192 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
#line 192 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 197 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
#line 197 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 119 "include/linux/kernel.h"
struct completion;
#line 120
struct pt_regs;
#line 220
struct pid;
#line 741
struct task_struct;
#line 742
struct mm_struct;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1829_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1829_8 ldv_1829 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 277
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2048_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2063_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2064_14 {
   struct __anonstruct_ldv_2048_15 ldv_2048 ;
   struct __anonstruct_ldv_2063_16 ldv_2063 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2064_14 ldv_2064 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_TYPE_NR = 19
} ;
#line 121
struct thread_struct;
#line 123
struct cpumask;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 607 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 152 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 284 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4658_20 {
   u64 rip ;
   u64 rdp ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4664_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4665_19 {
   struct __anonstruct_ldv_4658_20 ldv_4658 ;
   struct __anonstruct_ldv_4664_21 ldv_4664 ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4674_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4665_19 ldv_4665 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4674_22 ldv_4674 ;
};
#line 336 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 357 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 362 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 368 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 374 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 424
struct kmem_cache;
#line 425
struct perf_event;
#line 426
struct ds_context;
#line 426 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
};
#line 629 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 629 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 341 "include/linux/list.h"
struct hlist_node;
#line 341 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 557 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 648 "include/linux/list.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_25 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_25 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 42 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 46 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 131 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 174 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 543 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5574_27 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5575_26 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5574_27 ldv_5574 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5575_26 ldv_5575 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_28 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_28 rwlock_t;
#line 23
struct thread_info;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 52 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct timespec;
#line 53
struct compat_timespec;
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_ldv_5743_30 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_futex_31 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_nanosleep_32 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 54
struct pollfd;
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_poll_33 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
union __anonunion_ldv_5766_29 {
   struct __anonstruct_ldv_5743_30 ldv_5743 ;
   struct __anonstruct_futex_31 futex ;
   struct __anonstruct_nanosleep_32 nanosleep ;
   struct __anonstruct_poll_33 poll ;
};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5766_29 ldv_5766 ;
};
#line 54 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 396 "include/linux/spinlock.h"
struct vm_area_struct;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_34 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_34 seqlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 311 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 240 "include/linux/timer.h"
struct hrtimer;
#line 241
enum hrtimer_restart;
#line 253
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 36 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 299
struct hlist_nulls_node;
#line 299 "include/linux/workqueue.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 632 "include/linux/mmzone.h"
struct rw_semaphore;
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
typedef long rwsem_count_t;
#line 78 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
struct rw_semaphore {
   rwsem_count_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 741 "include/linux/mmzone.h"
struct ctl_table;
#line 172 "include/linux/ioport.h"
struct device;
#line 53 "include/linux/delay.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 37 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 46 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 47 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 266
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 276
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 283
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 290 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct completion completion ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_100 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_100 mm_context_t;
#line 15 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 34 "include/linux/kmod.h"
struct key;
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 442
struct kobject;
#line 443 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 37 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 101 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 119
struct sysfs_dirent;
#line 176 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 112 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 119 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 136 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 210
struct kernel_param;
#line 38 "include/linux/moduleparam.h"
struct kparam_string;
#line 38
struct kparam_array;
#line 38 "include/linux/moduleparam.h"
union __anonunion_ldv_10870_110 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 38 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   union __anonunion_ldv_10870_110 ldv_10870 ;
};
#line 54 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 60 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 242 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 502 "include/linux/rcupdate.h"
struct tracepoint;
#line 503 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   void **funcs ;
};
#line 230 "include/linux/percpu.h"
struct mod_arch_specific {

};
#line 92 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 60
struct module_param_attrs;
#line 60 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 182
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 188 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 374
struct module_sect_attrs;
#line 374
struct module_notes_attrs;
#line 374
struct ftrace_event_call;
#line 374 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 540
struct device_driver;
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 37 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 38 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 52 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 141 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_111 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_111 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_112 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_112 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_113 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_113 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_114 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_114 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_115 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_115 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_116 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_116 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_117 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_117 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 137 "include/linux/if.h"
union __anonunion_ifs_ifsu_118 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 137 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_118 ifs_ifsu ;
};
#line 155 "include/linux/if.h"
union __anonunion_ifr_ifrn_119 {
   char ifrn_name[16U] ;
};
#line 155 "include/linux/if.h"
union __anonunion_ifr_ifru_120 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 155 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_119 ifr_ifrn ;
   union __anonunion_ifr_ifru_120 ifr_ifru ;
};
#line 122 "include/linux/if_ether.h"
struct prio_tree_node;
#line 122 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 164
struct address_space;
#line 165 "include/linux/rbtree.h"
struct __anonstruct_ldv_12081_123 {
   u16 inuse ;
   u16 objects ;
};
#line 165 "include/linux/rbtree.h"
union __anonunion_ldv_12082_122 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_12081_123 ldv_12081 ;
};
#line 165 "include/linux/rbtree.h"
struct __anonstruct_ldv_12087_125 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 165 "include/linux/rbtree.h"
union __anonunion_ldv_12090_124 {
   struct __anonstruct_ldv_12087_125 ldv_12087 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 165 "include/linux/rbtree.h"
union __anonunion_ldv_12094_126 {
   unsigned long index ;
   void *freelist ;
};
#line 165 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_12082_122 ldv_12082 ;
   union __anonunion_ldv_12090_124 ldv_12090 ;
   union __anonunion_ldv_12094_126 ldv_12094 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_128 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_127 {
   struct __anonstruct_vm_set_128 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_127 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_12789 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 52 "include/linux/net.h"
typedef enum ldv_12789 socket_state;
#line 163 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 164
struct pipe_inode_info;
#line 165
struct inode;
#line 166
struct net;
#line 183
struct fasync_struct;
#line 183
struct sock;
#line 183
struct proto_ops;
#line 183 "include/asm-generic/fcntl.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct fasync_struct *fasync_list ;
   wait_queue_head_t wait ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 148 "include/linux/net.h"
struct kiocb;
#line 149 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 946
struct ctl_table_header;
#line 964 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 982 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1024 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1032 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 1066 "include/linux/sysctl.h"
struct ratelimit_state {
   spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 117 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int stat[18U] ;
};
#line 44 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 55 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct dma_map_ops;
#line 48 "include/linux/semaphore.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct driver_private;
#line 19
struct class;
#line 20
struct class_private;
#line 21
struct bus_type;
#line 22
struct bus_type_private;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 153 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 183
struct class_attribute;
#line 183 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 210
struct device_type;
#line 249 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 300 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 327 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 388 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 397
struct dma_coherent_mem;
#line 397 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 16 "include/asm-generic/scatterlist.h"
struct file_ra_state;
#line 17
struct user_struct;
#line 18
struct writeback_control;
#line 19
struct rlimit;
#line 158 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 175 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_cpu)(struct device * , dma_addr_t  , unsigned long  ,
                                     size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_device)(struct device * , dma_addr_t  , unsigned long  ,
                                        size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 633
struct hrtimer_clock_base;
#line 634
struct hrtimer_cpu_base;
#line 643
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 648 "include/linux/dmaengine.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 442
struct net_device;
#line 443 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 247 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 248
struct sec_path;
#line 248 "include/linux/skbuff.h"
struct __anonstruct_ldv_18503_132 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 248 "include/linux/skbuff.h"
union __anonunion_ldv_18504_131 {
   __wsum csum ;
   struct __anonstruct_ldv_18503_132 ldv_18503 ;
};
#line 248 "include/linux/skbuff.h"
union __anonunion_ldv_18532_133 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 248 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_dst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_18504_131 ldv_18504 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_18532_133 ldv_18532 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 414
struct dst_entry;
#line 424
struct rtable;
#line 114 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 96 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 99 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 564
struct dentry;
#line 221 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
};
#line 408 "include/linux/rculist.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 51 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 77 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 92 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 100 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 109 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 205 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 227 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 275 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 287 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 305 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 327 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 334 "include/linux/ethtool.h"
struct ethtool_rawip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __u8 hdata[64U] ;
};
#line 340 "include/linux/ethtool.h"
struct ethtool_ether_spec {
   __be16 ether_type ;
   __u8 frame_size ;
   __u8 eframe[16U] ;
};
#line 346 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 358 "include/linux/ethtool.h"
union __anonunion_h_u_135 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 358 "include/linux/ethtool.h"
union __anonunion_m_u_136 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 358 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_135 h_u ;
   union __anonunion_m_u_136 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 375 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 385 "include/linux/ethtool.h"
union __anonunion_h_u_137 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 385 "include/linux/ethtool.h"
union __anonunion_m_u_138 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 385 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_137 h_u ;
   union __anonunion_m_u_138 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 408 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 418 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 435 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_list {
   struct list_head list ;
   unsigned int count ;
};
#line 461 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rx_ntuple)(struct net_device * , u32  , void * ) ;
};
#line 583
struct prot_inuse;
#line 584 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct ipstats_mib {
   unsigned long mibs[31U] ;
};
#line 75 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 83 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 88 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[4U] ;
};
#line 94 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 99 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 106 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 112 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[77U] ;
};
#line 118 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 124
struct proc_dir_entry;
#line 124 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 72 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 73
struct fib_rules_ops;
#line 74
struct xt_table;
#line 74
struct mfc_cache;
#line 74
struct vif_device;
#line 74 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   struct timer_list rt_secret_timer ;
   atomic_t rt_genid ;
   struct sock *mroute_sk ;
   struct mfc_cache **mfc_cache_array ;
   struct vif_device *vif_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
#line 73 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
};
#line 28 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29
struct mfc6_cache;
#line 29
struct mif_device;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mroute6_sk ;
   struct mfc6_cache **mfc6_cache_array ;
   struct mif_device *vif6_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
#line 72 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 314 "include/linux/in.h"
union __anonunion_in6_u_139 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 314 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_139 in6_u ;
};
#line 247 "include/linux/netfilter.h"
struct flowi;
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip4_u_141 {
   __be32 daddr ;
   __be32 saddr ;
   __u8 tos ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip6_u_142 {
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dn_u_143 {
   __le16 daddr ;
   __le16 saddr ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_nl_u_140 {
   struct __anonstruct_ip4_u_141 ip4_u ;
   struct __anonstruct_ip6_u_142 ip6_u ;
   struct __anonstruct_dn_u_143 dn_u ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ports_145 {
   __be16 sport ;
   __be16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_icmpt_146 {
   __u8 type ;
   __u8 code ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dnports_147 {
   __le16 sport ;
   __le16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_mht_148 {
   __u8 type ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_uli_u_144 {
   struct __anonstruct_ports_145 ports ;
   struct __anonstruct_icmpt_146 icmpt ;
   struct __anonstruct_dnports_147 dnports ;
   __be32 spi ;
   struct __anonstruct_mht_148 mht ;
};
#line 308 "include/linux/netfilter.h"
struct flowi {
   int oif ;
   int iif ;
   __u32 mark ;
   union __anonunion_nl_u_140 nl_u ;
   __u8 proto ;
   __u8 flags ;
   union __anonunion_uli_u_144 uli_u ;
   __u32 secid ;
};
#line 89 "include/linux/kdev_t.h"
struct nameidata;
#line 90
struct path;
#line 91
struct vfsmount;
#line 92 "include/linux/kdev_t.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_149 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_149 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 382 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 200
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 207
struct pid_namespace;
#line 207 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 164 "include/linux/pid.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 41
struct cred;
#line 418 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 477 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156
struct dquot;
#line 184 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 185 "include/linux/quota.h"
typedef long long qsize_t;
#line 188 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 210
struct quota_format_type;
#line 211 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 253 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 281 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 292 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 306 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 321 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 367 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 567 "include/linux/fs.h"
union __anonunion_arg_151 {
   char *buf ;
   void *data ;
};
#line 567 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_150 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_151 arg ;
   int error ;
};
#line 567 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_150 read_descriptor_t;
#line 570 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 619
struct backing_dev_info;
#line 620 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 641
struct hd_struct;
#line 641
struct gendisk;
#line 641 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 710
struct posix_acl;
#line 711
struct inode_operations;
#line 711
struct file_operations;
#line 711
struct file_lock;
#line 711
struct cdev;
#line 711 "include/linux/fs.h"
union __anonunion_ldv_22098_152 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 711 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_22098_152 ldv_22098 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_mark_entries ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 879 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 887 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 910 "include/linux/fs.h"
union __anonunion_f_u_153 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 910 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_153 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1033
struct files_struct;
#line 1033 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1034 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1039 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_155 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_154 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_155 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_154 fl_u ;
};
#line 1138 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1317
struct file_system_type;
#line 1317
struct super_operations;
#line 1317
struct xattr_handler;
#line 1317
struct mtd_info;
#line 1317 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
};
#line 1435 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1473
struct block_device_operations;
#line 1474 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1514 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1557 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1735 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 2187
struct bio;
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 361 "include/linux/netfilter.h"
struct ebt_table;
#line 362 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
   char *slabname ;
};
#line 470 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
#line 61
struct net_generic;
#line 62 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct netns_xfrm xfrm ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
};
#line 95 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
};
#line 54 "include/net/dcbnl.h"
struct vlan_group;
#line 55
struct netpoll_info;
#line 56
struct wireless_dev;
#line 57
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 110 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 129 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 209
struct neighbour;
#line 210
struct neigh_parms;
#line 229 "include/linux/netdevice.h"
struct dev_addr_list {
   struct dev_addr_list *next ;
   u8 da_addr[32U] ;
   u8 da_addrlen ;
   u8 da_synced ;
   int da_users ;
   int da_gusers ;
};
#line 261 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 266 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 304 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 510
struct Qdisc;
#line 510 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long tx_bytes ;
   unsigned long tx_packets ;
   unsigned long tx_dropped ;
};
#line 532 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
};
#line 707
struct iw_handler_def;
#line 707
struct iw_public_data;
#line 707
struct net_bridge_port;
#line 707
struct macvlan_port;
#line 707
struct garp_port;
#line 707
struct rtnl_link_ops;
#line 707 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   struct netdev_hw_addr_list uc ;
   int uc_promisc ;
   spinlock_t addr_list_lock ;
   struct dev_addr_list *mc_list ;
   int mc_count ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct netdev_queue rx_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned short reg_state ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct net_bridge_port *br_port ;
   struct macvlan_port *macvlan_port ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
   struct ethtool_rx_ntuple_list ethtool_ntuple_list ;
};
#line 1141
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 144 "include/linux/irq.h"
struct timer_rand_state;
#line 146
struct irqaction;
#line 81 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 2133 "include/linux/netdevice.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char *filename ;
   char *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 61 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 79 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
#line 135
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_158 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_158 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_160 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_161 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_162 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_163 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_164 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_165 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_159 {
   int _pad[28U] ;
   struct __anonstruct__kill_160 _kill ;
   struct __anonstruct__timer_161 _timer ;
   struct __anonstruct__rt_162 _rt ;
   struct __anonstruct__sigchld_163 _sigchld ;
   struct __anonstruct__sigfault_164 _sigfault ;
   struct __anonstruct__sigpoll_165 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_159 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 40 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 116 "include/linux/sem.h"
struct sem_undo_list;
#line 129 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 138 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 26 "include/asm-generic/cputime.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_168 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_168 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 87 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 100 "include/linux/rtmutex.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_27783_169 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_170 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_171 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_27783_169 ldv_27783 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_170 type_data ;
   union __anonunion_payload_171 payload ;
};
#line 291
struct audit_context;
#line 69 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 263
struct futex_pi_state;
#line 264
struct robust_list_head;
#line 265
struct bio_list;
#line 266
struct fs_struct;
#line 267
struct bts_context;
#line 268
struct perf_event_context;
#line 150 "include/linux/sched.h"
struct cfs_rq;
#line 365
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_172 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_172 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 406 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 448 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 456 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 463 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 480 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 516
struct tty_struct;
#line 516
struct taskstats;
#line 516
struct tty_audit_buf;
#line 516 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
};
#line 661 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 703
struct reclaim_state;
#line 704 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 722 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 993
struct io_context;
#line 1016
struct rq;
#line 1017 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  , bool  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*moved_group)(struct task_struct * , int  ) ;
};
#line 1074 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1079 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 nr_migrations ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1150
struct rt_rq;
#line 1150 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1167
struct mem_cgroup;
#line 1167 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long bytes ;
   unsigned long memsw_bytes ;
};
#line 1508
struct css_set;
#line 1508
struct compat_robust_list_head;
#line 1508 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_context *bts ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned long stack_start ;
   struct memcg_batch_info memcg_batch ;
};
#line 81 "include/linux/security.h"
struct xfrm_policy;
#line 82
struct xfrm_state;
#line 103
struct request_sock;
#line 3181 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 37 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 95 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 777 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 93
struct neigh_table;
#line 93 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   struct net_device *dev ;
   unsigned long used ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t probes ;
   rwlock_t lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   atomic_t refcnt ;
   int (*output)(struct sk_buff * ) ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   struct neigh_ops  const  *ops ;
   u8 primary_key[0U] ;
};
#line 116 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 126 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 136 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct pneigh_entry **phash_buckets ;
};
#line 348
struct dn_route;
#line 348 "include/net/neighbour.h"
union __anonunion_ldv_32160_177 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 348 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[14U] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[1U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_32160_177 ldv_32160 ;
};
#line 100 "include/net/sock.h"
struct __anonstruct_socket_lock_t_178 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 100 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_178 socket_lock_t;
#line 100
struct proto;
#line 101 "include/net/sock.h"
union __anonunion_ldv_32290_179 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_32296_180 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_32304_181 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 101 "include/net/sock.h"
struct sock_common {
   union __anonunion_ldv_32290_179 ldv_32290 ;
   atomic_t skc_refcnt ;
   int skc_tx_queue_mapping ;
   union __anonunion_ldv_32296_180 ldv_32296 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_32304_181 ldv_32304 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
#line 153 "include/net/sock.h"
struct __anonstruct_sk_backlog_182 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   int len ;
   int limit ;
};
#line 153 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_182 sk_backlog ;
   wait_queue_head_t *sk_sleep ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2U] ;
   rwlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct ucred sk_peercred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 642
struct request_sock_ops;
#line 643
struct timewait_sock_ops;
#line 644
struct inet_hashinfo;
#line 645
struct raw_hashinfo;
#line 646
struct udp_table;
#line 646 "include/net/sock.h"
union __anonunion_h_183 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 646 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_183 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 171 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 184 "include/linux/drbd.h"
struct __anonstruct_ldv_33380_184 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned short _pad : 11 ;
};
#line 184 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_33380_184 ldv_33380 ;
   unsigned int i ;
};
#line 110 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 111
struct crypto_async_request;
#line 112
struct crypto_aead;
#line 113
struct crypto_blkcipher;
#line 114
struct crypto_hash;
#line 115
struct crypto_rng;
#line 116
struct crypto_tfm;
#line 117
struct crypto_type;
#line 118
struct aead_givcrypt_request;
#line 119
struct skcipher_givcrypt_request;
#line 125 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 134 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 147 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 173 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 187 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 192 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 211 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 226 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 243 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 252 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 258 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 267 "include/linux/crypto.h"
union __anonunion_cra_u_185 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 267 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_185 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 319 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 339 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 354 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 363 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 371 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 383 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 390 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 398 "include/linux/crypto.h"
union __anonunion_crt_u_186 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 398 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_186 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 427 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 431 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 435 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 447 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 451 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 142 "include/linux/jhash.h"
struct request_values {

};
#line 145 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 364 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 80 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 89 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   int make_it_fail ;
   unsigned long stamp ;
   int in_flight[2U] ;
   struct disk_stats *dkstats ;
   struct rcu_head rcu_head ;
};
#line 128 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 135
struct request_queue;
#line 135
struct blk_integrity;
#line 135 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct work_struct async_notify ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 15 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 20 "include/linux/writeback.h"
struct writeback_control {
   struct backing_dev_info *bdi ;
   struct super_block *sb ;
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   unsigned long wb_start ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
   unsigned char no_nrwrite_index_update : 1 ;
   unsigned char sb_pinned : 1 ;
};
#line 78
struct bdi_writeback;
#line 37 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 44 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct list_head list ;
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   struct task_struct *task ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 60 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   struct rcu_head rcu_head ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   void (*unplug_io_fn)(struct backing_dev_info * , struct page * ) ;
   void *unplug_io_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head wb_list ;
   unsigned long wb_mask ;
   unsigned int wb_cnt ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 30 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned short cgroup_changed ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 90 "include/linux/ioprio.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 52 "include/linux/bio.h"
struct bio_integrity_payload;
#line 55 "include/linux/bio.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 56 "include/linux/bio.h"
typedef void bio_destructor_t(struct bio * );
#line 57 "include/linux/bio.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 236 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 513 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_LINUX_BLOCK = 8,
    REQ_TYPE_ATA_TASKFILE = 9,
    REQ_TYPE_ATA_PC = 10
} ;
#line 99 "include/linux/blkdev.h"
union __anonunion_ldv_37003_194 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 99 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_37003_194 ldv_37003 ;
   void *elevator_private ;
   void *elevator_private2 ;
   void *elevator_private3 ;
   struct gendisk *rq_disk ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 20 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 22 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef int elevator_queue_empty_fn(struct request_queue * );
#line 24 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 28 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 29 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 30 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 31 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 33 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 34 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 35 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_queue_empty_fn *elevator_queue_empty_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 64 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 72 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 84 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
};
#line 264 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 265 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 266 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 267 "include/linux/blkdev.h"
typedef void unplug_fn(struct request_queue * );
#line 268 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 276 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 278 "include/linux/blkdev.h"
typedef void prepare_flush_fn(struct request_queue * , struct request * );
#line 279 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 280 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 281 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 282
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 289 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 295 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 304 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char no_cluster ;
   signed char discard_zeroes_data ;
};
#line 331 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unplug_fn *unplug_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   prepare_flush_fn *prepare_flush_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct timer_list unplug_timer ;
   int unplug_thresh ;
   unsigned long unplug_delay ;
   struct work_struct unplug_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   unsigned int ordered ;
   unsigned int next_ordered ;
   unsigned int ordseq ;
   int orderr ;
   int ordcolor ;
   struct request pre_flush_rq ;
   struct request bar_rq ;
   struct request post_flush_rq ;
   struct request *orig_bar_rq ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 1244 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1265 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1266 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1267 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1268 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1269 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1310 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*locked_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   int (*media_changed)(struct gendisk * ) ;
   unsigned long long (*set_capacity)(struct gendisk * , unsigned long long  ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   struct module *owner ;
};
#line 126 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 480 "include/linux/ipv6.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   __be32 v4daddr ;
   __u32 avl_height ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 49 "include/linux/route.h"
union __anonunion_u_200 {
   struct dst_entry dst ;
};
#line 49
struct in_device;
#line 49 "include/linux/route.h"
struct rtable {
   union __anonunion_u_200 u ;
   struct flowi fl ;
   struct in_device *idev ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_iif ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   struct inet_peer *peer ;
};
#line 212 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1566 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 314 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 341 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 387 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 396 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 419 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header head ;
   u32 barrier ;
   u32 pad ;
};
#line 426 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header head ;
   u32 barrier ;
   u32 set_size ;
};
#line 440 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 453 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 466 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header head ;
   u64 uuid[6U] ;
};
#line 477 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_segment_size ;
   u32 queue_order_type ;
};
#line 486 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header head ;
   u32 state ;
};
#line 491 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header head ;
   u32 mask ;
   u32 val ;
};
#line 497 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header head ;
   u32 retcode ;
};
#line 579 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   struct p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
};
#line 609
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 616 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 637
struct drbd_work;
#line 647 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 651
struct drbd_tl_epoch;
#line 682 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_req ;
};
#line 690 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 723 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   struct drbd_epoch *epoch ;
   unsigned int flags ;
   u64 block_id ;
};
#line 787
struct drbd_bitmap;
#line 788 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 823 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 833 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 73 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
};
#line 132 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct file *lo_file ;
   struct file *md_file ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 875 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 882
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2,
    WO_bio_barrier = 3
} ;
#line 889 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work md_sync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_mark_left ;
   unsigned long rs_mark_time ;
   unsigned long rs_same_csum ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
};
#line 1069
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2261 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   atomic_t bm_async_io ;
   wait_queue_head_t bm_io_wait ;
   unsigned long bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 1401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___2;
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 138 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 145
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_MASK = 31
} ;
#line 1179 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 54 "include/linux/smp_lock.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 146 "include/linux/idr.h"
struct cgroupfs_root;
#line 148
struct cgroup;
#line 149
struct css_id;
#line 56 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 190 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 243 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 113 "include/linux/bio.h"
enum bio_rw_flags {
    BIO_RW = 0,
    BIO_RW_FAILFAST_DEV = 1,
    BIO_RW_FAILFAST_TRANSPORT = 2,
    BIO_RW_FAILFAST_DRIVER = 3,
    BIO_RW_AHEAD = 4,
    BIO_RW_BARRIER = 5,
    BIO_RW_SYNCIO = 6,
    BIO_RW_UNPLUG = 7,
    BIO_RW_META = 8,
    BIO_RW_DISCARD = 9,
    BIO_RW_NOIDLE = 10
} ;
#line 165 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_MAX_CMD = 37,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 652 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 740 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 745 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 869 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    send_canceled = 5,
    send_failed = 6,
    handed_over_to_network = 7,
    connection_lost_while_pending = 8,
    recv_acked_by_peer = 9,
    write_acked_by_peer = 10,
    write_acked_by_peer_and_sis = 11,
    conflict_discarded_by_peer = 12,
    neg_acked = 13,
    barrier_acked = 14,
    data_received = 15,
    read_completed_with_error = 16,
    read_ahead_completed_with_error = 17,
    write_completed_with_error = 18,
    completed_ok = 19,
    nothing = 20
} ;
#line 283 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 180 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 250
enum drbd_state_ret_codes {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 472 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header head ;
   u64 uuid ;
};
#line 519
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 523 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 715
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BARRIER_DONE = 2,
    EV_BECAME_LAST = 3,
    EV_CLEANUP = 32
} ;
#line 1385
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct flush_work {
   struct drbd_work w ;
   struct drbd_epoch *epoch ;
};
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3271
enum receive_bitmap_ret {
    OK = 0,
    DONE = 1,
    FAILED = 2
} ;
#line 3537 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef int (*drbd_cmd_handler_f)(struct drbd_conf * , struct p_header * );
#line 4173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header * ) ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 332 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_202 {
   u32 pos ;
   u32 extent ;
};
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_202 updates[62U] ;
   u32 xor_sum ;
};
#line 82 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 87 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct drbd_atodb_wait {
   atomic_t count ;
   struct completion io_done ;
   struct drbd_conf *mdev ;
   int error ;
};
#line 144 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 482 "include/linux/module.h"
typedef unsigned int pao_T_____3;
#line 482 "include/linux/module.h"
typedef unsigned int pao_T_____4;
#line 482 "include/linux/module.h"
typedef unsigned int pao_T_____5;
#line 482 "include/linux/module.h"
typedef unsigned int pao_T_____6;
#line 177 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 1982 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_29545 {
    OK___0 = 0,
    FAILED___0 = 1,
    DONE___0 = 2
} ;
#line 3258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 reserved_u32[4U] ;
};
#line 3669 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 170 "include/linux/types.h"
typedef __u32 __le32;
#line 172 "include/linux/types.h"
typedef __u64 __le64;
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 35 "include/linux/kmod.h"
struct subprocess_info;
#line 60
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 38 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 718 "include/linux/module.h"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 63 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 158 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
   kernel_cap_t eff_cap ;
   __u32 loginuid ;
   __u32 sessionid ;
   __u32 sid ;
};
#line 88 "include/linux/drbd.h"
enum drbd_ret_codes {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    AFTER_LAST_ERR_CODE = 153
} ;
#line 299 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 335 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 846 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
};
#line 102 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 119 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 128 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 34 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 100 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2010 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )(*((unsigned long *)addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 9 "include/asm-generic/bitops/hweight.h"
extern unsigned long hweight64(__u64  ) ;
#line 42 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 44
  tmp = hweight64((__u64 )w);
#line 44
  return (tmp);
}
}
#line 202
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 212
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 63 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 137 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 251
extern int printk(char const   *  , ...) ;
#line 254
extern int __printk_ratelimit(char const   * ) ;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1905;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1905;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1905;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1905;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1905: ;
#line 14
  return (pfo_ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4325: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4325;
  } else {

  }

#line 19
  return (order);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )v->counter);
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 542 "include/linux/lockdep.h"
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 107 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 151
extern int mutex_trylock(struct mutex * ) ;
#line 154
int ldv_mutex_trylock_4(struct mutex *ldv_func_arg1 ) ;
#line 156
extern void mutex_unlock(struct mutex * ) ;
#line 159
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_8(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_5(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_7(struct mutex *ldv_func_arg1 ) ;
#line 23
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 24
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 27
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 31
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 35
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 39
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 43
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 218
  switch (8UL) {
  case 1UL: 
#line 218
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5787;
  case 2UL: 
#line 218
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5787;
  case 4UL: 
#line 218
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5787;
  case 8UL: 
#line 218
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5787;
  default: 
#line 218
  __bad_percpu_size();
  }
  ldv_5787: 
#line 218
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 220
  return (ti);
}
}
#line 92 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 271 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 273
  return (& lock->ldv_5575.rlock);
}
}
#line 307 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 309
  _raw_spin_lock_irq(& lock->ldv_5575.rlock);
#line 310
  return;
}
}
#line 332 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 334
  _raw_spin_unlock_irq(& lock->ldv_5575.rlock);
#line 335
  return;
}
}
#line 337 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 339
  _raw_spin_unlock_irqrestore(& lock->ldv_5575.rlock, flags);
#line 340
  return;
}
}
#line 53 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 62
extern void vfree(void const   * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 142
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 440
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 442
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 445
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 300 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 303 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 305
  tmp = alloc_pages_current(gfp_mask, order);
#line 305
  return (tmp);
}
}
#line 316
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 328
extern void __free_pages(struct page * , unsigned int  ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return ((char const   *)kobj->name);
}
}
#line 104 "include/linux/rcupdate.h"
extern int debug_lockdep_rcu_enabled(void) ;
#line 152 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 


  {
#line 154
  return (1);
}
}
#line 370 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 374
  return;
}
}
#line 28 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 144 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 87 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13476: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13476;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 62 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 64
  return;
}
}
#line 146 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[22U] ;
#line 152 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 154
  if (size == 0UL) {
#line 155
    return (0);
  } else {

  }
#line 157
  if (size <= 8UL) {
#line 158
    return (3);
  } else {

  }
#line 160
  if (size > 64UL && size <= 96UL) {
#line 161
    return (1);
  } else {

  }
#line 162
  if (size > 128UL && size <= 192UL) {
#line 163
    return (2);
  } else {

  }
#line 164
  if (size <= 8UL) {
#line 164
    return (3);
  } else {

  }
#line 165
  if (size <= 16UL) {
#line 165
    return (4);
  } else {

  }
#line 166
  if (size <= 32UL) {
#line 166
    return (5);
  } else {

  }
#line 167
  if (size <= 64UL) {
#line 167
    return (6);
  } else {

  }
#line 168
  if (size <= 128UL) {
#line 168
    return (7);
  } else {

  }
#line 169
  if (size <= 256UL) {
#line 169
    return (8);
  } else {

  }
#line 170
  if (size <= 512UL) {
#line 170
    return (9);
  } else {

  }
#line 171
  if (size <= 1024UL) {
#line 171
    return (10);
  } else {

  }
#line 172
  if (size <= 2048UL) {
#line 172
    return (11);
  } else {

  }
#line 173
  if (size <= 4096UL) {
#line 173
    return (12);
  } else {

  }
#line 178
  if (size <= 8192UL) {
#line 178
    return (13);
  } else {

  }
#line 179
  if (size <= 16384UL) {
#line 179
    return (14);
  } else {

  }
#line 180
  if (size <= 32768UL) {
#line 180
    return (15);
  } else {

  }
#line 181
  if (size <= 65536UL) {
#line 181
    return (16);
  } else {

  }
#line 182
  if (size <= 131072UL) {
#line 182
    return (17);
  } else {

  }
#line 183
  if (size <= 262144UL) {
#line 183
    return (18);
  } else {

  }
#line 184
  if (size <= 524288UL) {
#line 184
    return (19);
  } else {

  }
#line 185
  if (size <= 1048576UL) {
#line 185
    return (20);
  } else {

  }
#line 186
  if (size <= 2097152UL) {
#line 186
    return (21);
  } else {

  }
#line 187
  return (-1);
}
}
#line 204 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 206
  tmp = kmalloc_index(size);
#line 206
  index = tmp;
#line 208
  if (index == 0) {
#line 209
    return (0);
  } else {

  }
#line 211
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 215
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 218
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 452 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 454
  tmp = kobject_name(& dev->kobj);
#line 454
  return (tmp);
}
}
#line 626
extern char const   *dev_driver_string(struct device  const  * ) ;
#line 593 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 595
  return ((void *)(((unsigned long )(((long )page + 24189255811072L) / 56L) << 12) + 0xffff880000000000UL));
}
}
#line 2189 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 363 "include/linux/sched.h"
extern void schedule(void) ;
#line 2349
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 68 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 70
  pagefault_disable();
#line 71
  tmp = lowmem_page_address(page);
#line 71
  return (tmp);
}
}
#line 360 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 363
extern void bio_put(struct bio * ) ;
#line 366
extern void bio_endio(struct bio * , int  ) ;
#line 375
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 841 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 843
  return ((bdev->bd_disk)->queue);
}
}
#line 1012
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * , unsigned long  ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 141
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 143 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 144
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 144
    tmp = _drbd_insert_fault(mdev, type);
#line 144
    if (tmp != 0U) {
#line 144
      tmp___0 = 1;
    } else {
#line 144
      tmp___0 = 0;
    }
  } else {
#line 144
    tmp___0 = 0;
  }
#line 144
  return (tmp___0);
}
}
#line 164
struct ratelimit_state drbd_ratelimit_state ;
#line 1091
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) ;
#line 1313
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1314
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity ) ;
#line 1315
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1316
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1317
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1318
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1320
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1323
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1325
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1326
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1327
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1328
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1329
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1330
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1332
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1333
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1334
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1335
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1337
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1338
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1339
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1342
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1345
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1348
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) ;
#line 1349
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1351
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1366
rwlock_t global_state_lock ;
#line 1383
char *ppsize(char *buf , unsigned long long size ) ;
#line 1402
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1608 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  int rv ;

  {
#line 1614
  _raw_read_lock(& global_state_lock);
#line 1615
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1616
  _raw_read_unlock(& global_state_lock);
#line 1618
  return (rv);
}
}
#line 1639 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1641
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1643
  if (forcedetach == 0) {
#line 1644
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1644
    if (tmp___1 != 0) {
#line 1645
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1647
    goto ldv_41617;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1652
  if ((int )mdev->state.ldv_33380.disk > 2) {
#line 1653
    __ns.i = mdev->state.i;
#line 1653
    __ns.ldv_33380.disk = 2U;
#line 1653
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1654
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1657
  goto ldv_41617;
  }
  ldv_41617: ;
#line 1660
  return;
}
}
#line 1670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1673
  if (error != 0) {
#line 1675
    tmp = spinlock_check(& mdev->req_lock);
#line 1675
    flags = _raw_spin_lock_irqsave(tmp);
#line 1676
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1677
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1679
  return;
}
}
#line 1705 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1707
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1710
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1713
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 1975 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 1978
  tmp = atomic_dec_and_test(& mdev->local_cnt);
#line 1978
  if (tmp != 0) {
#line 1979
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 1980
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1980
  if (tmp___2 < 0) {
#line 1980
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1980
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1980
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) >= 0 ) in %s:%d\n", tmp___1,
           tmp___0, (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
           1980);
  } else {

  }
#line 1981
  return;
}
}
#line 1984 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 1988
  atomic_inc(& mdev->local_cnt);
#line 1989
  io_allowed = (unsigned int )mdev->state.ldv_33380.disk >= (unsigned int )mins;
#line 1990
  if (io_allowed == 0) {
#line 1991
    put_ldev(mdev);
  } else {

  }
#line 1992
  return (io_allowed);
}
}
#line 2233 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_blk_run_queue(struct request_queue *q ) 
{ 


  {
#line 2235
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned long )q->unplug_fn != (unsigned long )((unplug_fn *)0)) {
#line 2236
    (*(q->unplug_fn))(q);
  } else {

  }
#line 2237
  return;
}
}
#line 2247 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 2251
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2251
  if (tmp != 0) {
#line 2252
    return;
  } else {

  }
#line 2254
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0, 1UL);
#line 2256
  if (r != 0) {
#line 2257
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 2258
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2258
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2258
    printk("<3>%s %s: meta data flush failed with status %d, disabling md-flushes\n",
           tmp___1, tmp___0, r);
  } else {

  }
#line 2260
  return;
}
}
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_is_locked(struct drbd_bitmap *b ) 
{ 
  int tmp ;

  {
#line 128
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& b->bm_flags));
#line 128
  return (tmp);
}
}
#line 132 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 134
  b = mdev->bitmap;
#line 135
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 135
  if (tmp == 0) {
#line 136
    return;
  } else {

  }
#line 137
  tmp___9 = get_current();
#line 137
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 137
    tmp___7 = get_current();
#line 137
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 137
      tmp___5 = get_current();
#line 137
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 137
        tmp___3 = get_current();
#line 137
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 137
        tmp___4 = (char *)"worker";
      }
#line 137
      tmp___6 = tmp___4;
    } else {
#line 137
      tmp___6 = (char *)"asender";
    }
#line 137
    tmp___8 = tmp___6;
  } else {
#line 137
    tmp___8 = (char *)"receiver";
  }
#line 137
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 137
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 137
  printk("<3>%s %s: FIXME %s in %s, bitmap locked for \'%s\' by %s\n", tmp___11, tmp___10,
         tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
         (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 138
  return;
}
}
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  char *tmp___10 ;
  struct task_struct *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;

  {
#line 149
  b = mdev->bitmap;
#line 152
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 153
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 153
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 153
    printk("<3>%s %s: FIXME no bitmap in drbd_bm_lock!?\n", tmp___0, tmp);
#line 154
    return;
  } else {

  }
#line 157
  tmp___1 = ldv_mutex_trylock_4(& b->bm_change);
#line 157
  trylock_failed = tmp___1 == 0;
#line 159
  if (trylock_failed != 0) {
#line 160
    tmp___11 = get_current();
#line 160
    if ((unsigned long )tmp___11 != (unsigned long )mdev->receiver.task) {
#line 160
      tmp___9 = get_current();
#line 160
      if ((unsigned long )tmp___9 != (unsigned long )mdev->asender.task) {
#line 160
        tmp___7 = get_current();
#line 160
        if ((unsigned long )tmp___7 != (unsigned long )mdev->worker.task) {
#line 160
          tmp___5 = get_current();
#line 160
          tmp___6 = (char *)(& tmp___5->comm);
        } else {
#line 160
          tmp___6 = (char *)"worker";
        }
#line 160
        tmp___8 = tmp___6;
      } else {
#line 160
        tmp___8 = (char *)"asender";
      }
#line 160
      tmp___10 = tmp___8;
    } else {
#line 160
      tmp___10 = (char *)"receiver";
    }
#line 160
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 160
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 160
    printk("<4>%s %s: %s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
           tmp___13, tmp___12, tmp___10, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
           (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 168
    ldv_mutex_lock_5(& b->bm_change);
  } else {

  }
#line 170
  tmp___16 = __test_and_set_bit(0, (unsigned long volatile   *)(& b->bm_flags));
#line 170
  if (tmp___16 != 0) {
#line 171
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 171
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 171
    printk("<3>%s %s: FIXME bitmap already locked in bm_lock\n", tmp___15, tmp___14);
  } else {

  }
#line 173
  b->bm_why = why;
#line 174
  b->bm_task = get_current();
#line 175
  return;
}
}
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 179
  b = mdev->bitmap;
#line 180
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 181
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 181
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 181
    printk("<3>%s %s: FIXME no bitmap in drbd_bm_unlock!?\n", tmp___0, tmp);
#line 182
    return;
  } else {

  }
#line 185
  tmp___3 = __test_and_clear_bit(0, (unsigned long volatile   *)(& (mdev->bitmap)->bm_flags));
#line 185
  if (tmp___3 == 0) {
#line 186
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 186
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 186
    printk("<3>%s %s: FIXME bitmap not locked in bm_unlock\n", tmp___2, tmp___1);
  } else {

  }
#line 188
  b->bm_why = 0;
#line 189
  b->bm_task = 0;
#line 190
  ldv_mutex_unlock_6(& b->bm_change);
#line 191
  return;
}
}
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ,
                                     enum km_type  const  km ) 
{ 
  struct page *page ;
  unsigned long page_nr ;
  long tmp ;
  void *tmp___0 ;

  {
#line 200
  page_nr = offset >> 9;
#line 201
  tmp = __builtin_expect(b->bm_number_of_pages <= page_nr, 0L);
#line 201
  if (tmp != 0L) {
#line 201
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (201), "i" (12UL));
    ldv_41888: ;
#line 201
    goto ldv_41888;
  } else {

  }
#line 202
  page = *(b->bm_pages + page_nr);
#line 204
  tmp___0 = kmap_atomic(page, km);
#line 204
  return ((unsigned long *)tmp___0);
}
}
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ) 
{ 
  unsigned long *tmp ;

  {
#line 209
  tmp = __bm_map_paddr(b, offset, KM_IRQ1);
#line 209
  return (tmp);
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 214
  pagefault_enable();
#line 215
  return;
}
}
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 219
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 244
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 245
    return;
  } else {

  }
#line 247
  i = 0UL;
#line 247
  goto ldv_41907;
  ldv_41906: ;
#line 248
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 249
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 252
    goto ldv_41905;
  } else {

  }
#line 254
  __free_pages(*(pages + i), 0U);
#line 255
  *(pages + i) = 0;
  ldv_41905: 
#line 247
  i = i + 1UL;
  ldv_41907: ;
#line 247
  if (i < number) {
#line 248
    goto ldv_41906;
  } else {

  }

#line 252
  return;
}
}
#line 259 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 261
  if (v != 0) {
#line 262
    vfree((void const   *)ptr);
  } else {
#line 264
    kfree((void const   *)ptr);
  }
#line 265
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 272
  old_pages = b->bm_pages;
#line 274
  vmalloced = 0U;
#line 275
  have = b->bm_number_of_pages;
#line 277
  tmp = __builtin_expect(have == 0UL, 0L);
#line 277
  if (tmp != 0L) {
#line 277
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 277
    if (tmp___0 != 0L) {
#line 277
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (277), "i" (12UL));
      ldv_41924: ;
#line 277
      goto ldv_41924;
    } else {

    }
  } else {

  }
#line 278
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 278
  if (tmp___1 != 0L) {
#line 278
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 278
    if (tmp___2 != 0L) {
#line 278
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (278), "i" (12UL));
      ldv_41925: ;
#line 278
      goto ldv_41925;
    } else {

    }
  } else {

  }
#line 280
  if (have == want) {
#line 281
    return (old_pages);
  } else {

  }
#line 288
  bytes = (unsigned int )want * 8U;
#line 289
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 289
  new_pages = (struct page **)tmp___3;
#line 290
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 291
    tmp___4 = vmalloc((unsigned long )bytes);
#line 291
    new_pages = (struct page **)tmp___4;
#line 292
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 293
      return (0);
    } else {

    }
#line 294
    vmalloced = 1U;
  } else {

  }
#line 297
  memset((void *)new_pages, 0, (size_t )bytes);
#line 298
  if (want >= have) {
#line 299
    i = 0U;
#line 299
    goto ldv_41927;
    ldv_41926: 
#line 300
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 299
    i = i + 1U;
    ldv_41927: ;
#line 299
    if ((unsigned long )i < have) {
#line 300
      goto ldv_41926;
    } else {

    }

#line 301
    goto ldv_41930;
    ldv_41929: 
#line 302
    page = alloc_pages(131282U, 0U);
#line 303
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 304
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 305
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 306
      return (0);
    } else {

    }
#line 308
    *(new_pages + (unsigned long )i) = page;
#line 301
    i = i + 1U;
    ldv_41930: ;
#line 301
    if ((unsigned long )i < want) {
#line 302
      goto ldv_41929;
    } else {

    }

  } else {
#line 311
    i = 0U;
#line 311
    goto ldv_41933;
    ldv_41932: 
#line 312
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 311
    i = i + 1U;
    ldv_41933: ;
#line 311
    if ((unsigned long )i < want) {
#line 312
      goto ldv_41932;
    } else {

    }

  }
#line 318
  if (vmalloced != 0U) {
#line 319
    set_bit(2U, (unsigned long volatile   *)(& b->bm_flags));
  } else {
#line 321
    clear_bit(2, (unsigned long volatile   *)(& b->bm_flags));
  }
#line 323
  return (new_pages);
}
}
#line 330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 332
  b = mdev->bitmap;
#line 333
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 333
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 333
  if (tmp != 0L) {
#line 333
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       333);
  } else {

  }
#line 333
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 334
  tmp___0 = kzalloc(376UL, 208U);
#line 334
  b = (struct drbd_bitmap *)tmp___0;
#line 335
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 336
    return (-12);
  } else {

  }
#line 337
  spinlock_check(& b->bm_lock);
#line 337
  __raw_spin_lock_init(& b->bm_lock.ldv_5575.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 338
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 339
  __init_waitqueue_head(& b->bm_io_wait, & __key___1);
#line 341
  mdev->bitmap = b;
#line 343
  return (0);
}
}
#line 346 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 348
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 348
  if (_b != 0) {
#line 348
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 348
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 348
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_capacity", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           348);
  } else {

  }
#line 348
  if (_b != 0) {
#line 348
    return (0UL);
  } else {

  }
#line 349
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 356
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 356
  if (_b != 0) {
#line 356
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 356
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 356
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_cleanup", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           356);
  } else {

  }
#line 356
  if (_b != 0) {
#line 356
    return;
  } else {

  }
#line 357
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 358
  tmp___1 = constant_test_bit(2U, (unsigned long const volatile   *)(& (mdev->bitmap)->bm_flags));
#line 358
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, tmp___1);
#line 359
  kfree((void const   *)mdev->bitmap);
#line 360
  mdev->bitmap = 0;
#line 361
  return;
}
}
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  int cleared ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 370
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 371
  w = b->bm_bits >> 6;
#line 372
  cleared = 0;
#line 375
  p_addr = bm_map_paddr(b, w);
#line 376
  bm = p_addr + (w & 511UL);
#line 377
  if (b->bm_words > w) {
#line 378
    tmp = hweight_long(*bm & ~ mask);
#line 378
    cleared = (int )tmp;
#line 379
    *bm = *bm & mask;
#line 380
    w = w + (size_t )1;
#line 380
    bm = bm + 1;
  } else {

  }
#line 383
  if (b->bm_words > w) {
#line 384
    tmp___0 = hweight_long(*bm);
#line 384
    cleared = (int )((unsigned int )tmp___0 + (unsigned int )cleared);
#line 385
    *bm = 0UL;
  } else {

  }
#line 387
  bm_unmap(p_addr);
#line 388
  return (cleared);
}
}
#line 391 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  unsigned long *p_addr ;
  unsigned long *bm ;

  {
#line 393
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 394
  w = b->bm_bits >> 6;
#line 397
  p_addr = bm_map_paddr(b, w);
#line 398
  bm = p_addr + (w & 511UL);
#line 399
  if (b->bm_words > w) {
#line 400
    *bm = *bm | ~ mask;
#line 401
    bm = bm + 1;
#line 401
    w = w + (size_t )1;
  } else {

  }
#line 404
  if (b->bm_words > w) {
#line 405
    *bm = 0xffffffffffffffffUL;
  } else {

  }
#line 407
  bm_unmap(p_addr);
#line 408
  return;
}
}
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_count_bits(struct drbd_bitmap *b , int const   swap_endian ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long offset ;
  unsigned long bits ;
  unsigned long i ;
  unsigned long do_now ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 412
  offset = 0UL;
#line 413
  bits = 0UL;
#line 416
  goto ldv_41989;
  ldv_41988: 
#line 417
  __min1 = b->bm_words - offset;
#line 417
  __min2 = 512UL;
#line 417
  do_now = __min1 < __min2 ? __min1 : __min2;
#line 417
  i = do_now;
#line 418
  p_addr = __bm_map_paddr(b, offset, KM_USER0);
#line 419
  bm = p_addr + (offset & 511UL);
#line 420
  goto ldv_41985;
  ldv_41984: 
#line 425
  tmp = bm;
#line 425
  bm = bm + 1;
#line 425
  tmp___0 = hweight_long(*tmp);
#line 425
  bits = tmp___0 + bits;
  ldv_41985: 
#line 420
  tmp___1 = i;
#line 420
  i = i - 1UL;
#line 420
  if (tmp___1 != 0UL) {
#line 421
    goto ldv_41984;
  } else {

  }
#line 427
  __bm_unmap(p_addr, KM_USER0);
#line 428
  offset = offset + do_now;
#line 429
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                429, 0);
#line 429
  _cond_resched();
  ldv_41989: ;
#line 416
  if (b->bm_words > offset) {
#line 417
    goto ldv_41988;
  } else {

  }

#line 432
  return (bits);
}
}
#line 435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 437
  tmp = __bm_count_bits(b, 0);
#line 437
  return (tmp);
}
}
#line 440 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits_swap_endian(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 442
  tmp = __bm_count_bits(b, 1);
#line 442
  return (tmp);
}
}
#line 446 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 453
  end = offset + len;
#line 455
  if (b->bm_words < end) {
#line 456
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 457
    return;
  } else {

  }
#line 460
  goto ldv_42012;
  ldv_42011: 
#line 461
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 461
  __min2 = end;
#line 461
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 462
  p_addr = bm_map_paddr(b, offset);
#line 463
  bm = p_addr + (offset & 511UL);
#line 464
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 465
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
#line 467
    goto ldv_42010;
  } else {

  }
#line 469
  memset((void *)bm, c, do_now * 8UL);
#line 470
  bm_unmap(p_addr);
#line 471
  offset = offset + do_now;
  ldv_42012: ;
#line 460
  if (offset < end) {
#line 461
    goto ldv_42011;
  } else {

  }
  ldv_42010: ;
#line 465
  return;
}
}
#line 483 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;
  size_t tmp___5 ;
  sector_t tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;

  {
#line 485
  b = mdev->bitmap;
#line 488
  opages = 0;
#line 489
  err = 0;
#line 492
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 492
  if (_b != 0) {
#line 492
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 492
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 492
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_resize", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           492);
  } else {

  }
#line 492
  if (_b != 0) {
#line 492
    return (-12);
  } else {

  }
#line 494
  drbd_bm_lock(mdev, (char *)"resize");
#line 496
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 496
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 496
  printk("<6>%s %s: drbd_bm_resize called with capacity == %llu\n", tmp___2, tmp___1,
         (unsigned long long )capacity);
#line 499
  if (b->bm_dev_capacity == capacity) {
#line 500
    goto out;
  } else {

  }
#line 502
  opages_vmalloced = constant_test_bit(2U, (unsigned long const volatile   *)(& b->bm_flags));
#line 504
  if (capacity == 0UL) {
#line 505
    spin_lock_irq(& b->bm_lock);
#line 506
    opages = b->bm_pages;
#line 507
    onpages = b->bm_number_of_pages;
#line 508
    owords = b->bm_words;
#line 509
    b->bm_pages = 0;
#line 510
    tmp___6 = 0UL;
#line 510
    b->bm_dev_capacity = tmp___6;
#line 510
    tmp___5 = tmp___6;
#line 510
    b->bm_words = tmp___5;
#line 510
    tmp___4 = tmp___5;
#line 510
    b->bm_bits = tmp___4;
#line 510
    tmp___3 = tmp___4;
#line 510
    b->bm_set = tmp___3;
#line 510
    b->bm_number_of_pages = tmp___3;
#line 515
    spin_unlock_irq(& b->bm_lock);
#line 516
    bm_free_pages(opages, onpages);
#line 517
    bm_vk_free((void *)opages, opages_vmalloced);
#line 518
    goto out;
  } else {

  }
#line 520
  bits = (capacity + 7UL) >> 3;
#line 527
  words = (bits + 63UL) >> 6;
#line 529
  tmp___9 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 529
  if (tmp___9 != 0) {
#line 530
    if (((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12 < (unsigned long long )bits) {
#line 530
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 530
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 530
      printk("<3>%s %s: ASSERT( (u64)bits <= (((u64)mdev->ldev->md.md_size_sect-MD_BM_OFFSET) << 12) ) in %s:%d\n",
             tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
             530);
    } else {

    }
#line 531
    put_ldev(mdev);
  } else {

  }
#line 535
  want = ((words + 1UL) * 8UL + 4095UL) >> 12;
#line 536
  have = b->bm_number_of_pages;
#line 537
  if (want == have) {
#line 538
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 538
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 538
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 538
      printk("<3>%s %s: ASSERT( b->bm_pages != NULL ) in %s:%d\n", tmp___11, tmp___10,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
             538);
    } else {

    }
#line 539
    npages = b->bm_pages;
  } else {
#line 541
    tmp___12 = drbd_insert_fault(mdev, 7U);
#line 541
    if (tmp___12 != 0) {
#line 542
      npages = 0;
    } else {
#line 544
      npages = bm_realloc_pages(b, want);
    }
  }
#line 547
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 548
    err = -12;
#line 549
    goto out;
  } else {

  }
#line 552
  spin_lock_irq(& b->bm_lock);
#line 553
  opages = b->bm_pages;
#line 554
  owords = b->bm_words;
#line 555
  obits = b->bm_bits;
#line 557
  growing = bits > obits;
#line 558
  if ((unsigned long )opages != (unsigned long )((struct page **)0)) {
#line 559
    bm_set_surplus(b);
  } else {

  }
#line 561
  b->bm_pages = npages;
#line 562
  b->bm_number_of_pages = want;
#line 563
  b->bm_bits = bits;
#line 564
  b->bm_words = words;
#line 565
  b->bm_dev_capacity = capacity;
#line 567
  if (growing != 0) {
#line 568
    bm_memset(b, owords, 255, words - owords);
#line 569
    b->bm_set = b->bm_set + (bits - obits);
  } else {

  }
#line 572
  if (want < have) {
#line 574
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 577
  p_addr = bm_map_paddr(b, words);
#line 578
  bm = p_addr + (words & 511UL);
#line 579
  *bm = 2205418087UL;
#line 580
  bm_unmap(p_addr);
#line 582
  bm_clear_surplus(b);
#line 584
  spin_unlock_irq(& b->bm_lock);
#line 585
  if ((unsigned long )opages != (unsigned long )npages) {
#line 586
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 587
  if (growing == 0) {
#line 588
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 589
  tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 589
  tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 589
  printk("<6>%s %s: resync bitmap: bits=%lu words=%lu\n", tmp___14, tmp___13, bits,
         words);
  out: 
#line 592
  drbd_bm_unlock(mdev);
#line 593
  return (err);
}
}
#line 604 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;

  {
#line 606
  b = mdev->bitmap;
#line 610
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 610
  if (_b != 0) {
#line 610
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 610
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 610
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_bm_total_weight",
           (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           610);
  } else {

  }
#line 610
  if (_b != 0) {
#line 610
    return (0UL);
  } else {

  }
#line 611
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 611
  if (_b___0 != 0) {
#line 611
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 611
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 611
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "_drbd_bm_total_weight",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           611);
  } else {

  }
#line 611
  if (_b___0 != 0) {
#line 611
    return (0UL);
  } else {

  }
#line 613
  tmp___3 = spinlock_check(& b->bm_lock);
#line 613
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 614
  s = b->bm_set;
#line 615
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 617
  return (s);
}
}
#line 620 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 624
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 624
  if (tmp == 0) {
#line 625
    return (0UL);
  } else {

  }
#line 626
  s = _drbd_bm_total_weight(mdev);
#line 627
  put_ldev(mdev);
#line 628
  return (s);
}
}
#line 631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 633
  b = mdev->bitmap;
#line 634
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 634
  if (_b != 0) {
#line 634
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 634
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 634
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_words", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           634);
  } else {

  }
#line 634
  if (_b != 0) {
#line 634
    return (0UL);
  } else {

  }
#line 635
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 635
  if (_b___0 != 0) {
#line 635
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 635
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 635
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_words", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           635);
  } else {

  }
#line 635
  if (_b___0 != 0) {
#line 635
    return (0UL);
  } else {

  }
#line 637
  return (b->bm_words);
}
}
#line 640 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 642
  b = mdev->bitmap;
#line 643
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 643
  if (_b != 0) {
#line 643
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 643
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 643
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_bits", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           643);
  } else {

  }
#line 643
  if (_b != 0) {
#line 643
    return (0UL);
  } else {

  }
#line 645
  return (b->bm_bits);
}
}
#line 653 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  size_t end ;
  size_t do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int __ret_warn_on ;
  long tmp___3 ;
  int __ret_warn_on___0 ;
  long tmp___4 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___5 ;
  unsigned long *tmp___6 ;
  unsigned long tmp___7 ;
  size_t tmp___8 ;
  int tmp___9 ;

  {
#line 656
  b = mdev->bitmap;
#line 661
  end = offset + number;
#line 663
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 663
  if (_b != 0) {
#line 663
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 663
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 663
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_merge_lel", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           663);
  } else {

  }
#line 663
  if (_b != 0) {
#line 663
    return;
  } else {

  }
#line 664
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 664
  if (_b___0 != 0) {
#line 664
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 664
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 664
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_merge_lel",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           664);
  } else {

  }
#line 664
  if (_b___0 != 0) {
#line 664
    return;
  } else {

  }
#line 665
  if (number == 0UL) {
#line 666
    return;
  } else {

  }
#line 667
  __ret_warn_on = b->bm_words <= offset;
#line 667
  tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 667
  if (tmp___3 != 0L) {
#line 667
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       667);
  } else {

  }
#line 667
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 668
  __ret_warn_on___0 = b->bm_words < end;
#line 668
  tmp___4 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 668
  if (tmp___4 != 0L) {
#line 668
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       668);
  } else {

  }
#line 668
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 670
  spin_lock_irq(& b->bm_lock);
#line 671
  goto ldv_42099;
  ldv_42098: 
#line 672
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 672
  __min2 = end;
#line 672
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 673
  p_addr = bm_map_paddr(b, offset);
#line 674
  bm = p_addr + (offset & 511UL);
#line 675
  offset = offset + do_now;
#line 676
  goto ldv_42096;
  ldv_42095: 
#line 677
  bits = hweight_long(*bm);
#line 678
  tmp___5 = buffer;
#line 678
  buffer = buffer + 1;
#line 678
  word = (unsigned long )((unsigned long long )*bm | (unsigned long long )*tmp___5);
#line 679
  tmp___6 = bm;
#line 679
  bm = bm + 1;
#line 679
  *tmp___6 = word;
#line 680
  tmp___7 = hweight_long(word);
#line 680
  b->bm_set = b->bm_set + (tmp___7 - bits);
  ldv_42096: 
#line 676
  tmp___8 = do_now;
#line 676
  do_now = do_now - (size_t )1;
#line 676
  if (tmp___8 != 0UL) {
#line 677
    goto ldv_42095;
  } else {

  }
#line 682
  bm_unmap(p_addr);
  ldv_42099: ;
#line 671
  if (offset < end) {
#line 672
    goto ldv_42098;
  } else {

  }

#line 689
  if (b->bm_words == end) {
#line 690
    tmp___9 = bm_clear_surplus(b);
#line 690
    b->bm_set = b->bm_set - (unsigned long )tmp___9;
  } else {

  }
#line 692
  spin_unlock_irq(& b->bm_lock);
#line 693
  return;
}
}
#line 698 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___5 ;
  unsigned long *tmp___6 ;
  size_t tmp___7 ;

  {
#line 701
  b = mdev->bitmap;
#line 705
  end = offset + number;
#line 707
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 707
  if (_b != 0) {
#line 707
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 707
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 707
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_get_lel", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           707);
  } else {

  }
#line 707
  if (_b != 0) {
#line 707
    return;
  } else {

  }
#line 708
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 708
  if (_b___0 != 0) {
#line 708
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 708
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 708
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_get_lel", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           708);
  } else {

  }
#line 708
  if (_b___0 != 0) {
#line 708
    return;
  } else {

  }
#line 710
  spin_lock_irq(& b->bm_lock);
#line 711
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 714
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 714
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 714
    printk("<3>%s %s: offset=%lu number=%lu bm_words=%lu\n", tmp___4, tmp___3, offset,
           number, b->bm_words);
  } else {
#line 719
    goto ldv_42124;
    ldv_42123: 
#line 720
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 720
    __min2 = end;
#line 720
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 721
    p_addr = bm_map_paddr(b, offset);
#line 722
    bm = p_addr + (offset & 511UL);
#line 723
    offset = offset + do_now;
#line 724
    goto ldv_42121;
    ldv_42120: 
#line 725
    tmp___5 = buffer;
#line 725
    buffer = buffer + 1;
#line 725
    tmp___6 = bm;
#line 725
    bm = bm + 1;
#line 725
    *tmp___5 = *tmp___6;
    ldv_42121: 
#line 724
    tmp___7 = do_now;
#line 724
    do_now = do_now - (size_t )1;
#line 724
    if (tmp___7 != 0UL) {
#line 725
      goto ldv_42120;
    } else {

    }
#line 726
    bm_unmap(p_addr);
    ldv_42124: ;
#line 719
    if (offset < end) {
#line 720
      goto ldv_42123;
    } else {

    }

  }
#line 729
  spin_unlock_irq(& b->bm_lock);
#line 730
  return;
}
}
#line 733 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 735
  b = mdev->bitmap;
#line 736
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 736
  if (_b != 0) {
#line 736
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 736
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 736
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_set_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           736);
  } else {

  }
#line 736
  if (_b != 0) {
#line 736
    return;
  } else {

  }
#line 737
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 737
  if (_b___0 != 0) {
#line 737
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 737
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 737
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_set_all", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           737);
  } else {

  }
#line 737
  if (_b___0 != 0) {
#line 737
    return;
  } else {

  }
#line 739
  spin_lock_irq(& b->bm_lock);
#line 740
  bm_memset(b, 0UL, 255, b->bm_words);
#line 741
  bm_clear_surplus(b);
#line 742
  b->bm_set = b->bm_bits;
#line 743
  spin_unlock_irq(& b->bm_lock);
#line 744
  return;
}
}
#line 747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 749
  b = mdev->bitmap;
#line 750
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 750
  if (_b != 0) {
#line 750
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 750
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 750
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_clear_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           750);
  } else {

  }
#line 750
  if (_b != 0) {
#line 750
    return;
  } else {

  }
#line 751
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 751
  if (_b___0 != 0) {
#line 751
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 751
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 751
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_clear_all",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           751);
  } else {

  }
#line 751
  if (_b___0 != 0) {
#line 751
    return;
  } else {

  }
#line 753
  spin_lock_irq(& b->bm_lock);
#line 754
  bm_memset(b, 0UL, 0, b->bm_words);
#line 755
  b->bm_set = 0UL;
#line 756
  spin_unlock_irq(& b->bm_lock);
#line 757
  return;
}
}
#line 759 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_bitmap *b ;
  int uptodate ;
  int tmp ;

  {
#line 761
  b = (struct drbd_bitmap *)bio->bi_private;
#line 762
  uptodate = (int )bio->bi_flags & 1;
#line 769
  if (error == 0 && uptodate == 0) {
#line 770
    error = -5;
  } else {

  }
#line 772
  if (error != 0) {
#line 775
    __set_bit(1, (unsigned long volatile   *)(& b->bm_flags));
  } else {

  }
#line 777
  tmp = atomic_dec_and_test(& b->bm_async_io);
#line 777
  if (tmp != 0) {
#line 778
    __wake_up(& b->bm_io_wait, 3U, 1, 0);
  } else {

  }
#line 780
  bio_put(bio);
#line 781
  return;
}
}
#line 783 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct drbd_conf *mdev , struct drbd_bitmap *b , int page_nr ,
                             int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  int tmp___1 ;

  {
#line 786
  tmp = bio_alloc(208U, 1);
#line 786
  bio = tmp;
#line 788
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 790
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 794
  __min1 = 4096U;
#line 794
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 794
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 794
  len = __min1 < __min2 ? __min1 : __min2;
#line 797
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 798
  bio->bi_sector = on_disk_sector;
#line 799
  bio_add_page(bio, *(b->bm_pages + (unsigned long )page_nr), len, 0U);
#line 800
  bio->bi_private = (void *)b;
#line 801
  bio->bi_end_io = & bm_async_io_complete;
#line 803
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 803
  if (tmp___1 != 0) {
#line 804
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 805
    bio_endio(bio, -5);
  } else {
#line 807
    submit_bio(rw, bio);
  }
#line 808
  return;
}
}
#line 847 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw ) 
{ 
  struct drbd_bitmap *b ;
  int bm_words ;
  int num_pages ;
  int i ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;
  size_t tmp___1 ;
  struct request_queue *tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 849
  b = mdev->bitmap;
#line 854
  err = 0;
#line 856
  tmp = bm_is_locked(b);
#line 856
  __ret_warn_on = tmp == 0;
#line 856
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 856
  if (tmp___0 != 0L) {
#line 856
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       856);
  } else {

  }
#line 856
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 860
  tmp___1 = drbd_bm_words(mdev);
#line 860
  bm_words = (int )tmp___1;
#line 861
  num_pages = (int )((((unsigned long )bm_words + 512UL) * 8UL - 1UL) >> 12);
#line 867
  now = jiffies;
#line 868
  atomic_set(& b->bm_async_io, num_pages);
#line 869
  __clear_bit(1, (unsigned long volatile   *)(& b->bm_flags));
#line 872
  i = 0;
#line 872
  goto ldv_42176;
  ldv_42175: 
#line 873
  bm_page_io_async(mdev, b, i, rw);
#line 872
  i = i + 1;
  ldv_42176: ;
#line 872
  if (i < num_pages) {
#line 873
    goto ldv_42175;
  } else {

  }
#line 875
  tmp___2 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 875
  drbd_blk_run_queue(tmp___2);
#line 876
  tmp___3 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 876
  if (tmp___3 == 0) {
#line 876
    goto ldv_42178;
  } else {

  }
#line 876
  tmp___4 = get_current();
#line 876
  __wait.flags = 0U;
#line 876
  __wait.private = (void *)tmp___4;
#line 876
  __wait.func = & autoremove_wake_function;
#line 876
  __wait.task_list.next = & __wait.task_list;
#line 876
  __wait.task_list.prev = & __wait.task_list;
  ldv_42181: 
#line 876
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 876
  tmp___5 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 876
  if (tmp___5 == 0) {
#line 876
    goto ldv_42180;
  } else {

  }
#line 876
  schedule();
#line 876
  goto ldv_42181;
  ldv_42180: 
#line 876
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_42178: 
#line 878
  tmp___8 = constant_test_bit(1U, (unsigned long const volatile   *)(& b->bm_flags));
#line 878
  if (tmp___8 != 0) {
#line 879
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 879
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 879
    printk("<1>%s %s: we had at least one MD IO ERROR during bitmap IO\n", tmp___7,
           tmp___6);
#line 880
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 881
    err = -5;
  } else {

  }
#line 884
  now = jiffies;
#line 885
  if (rw == 1) {
#line 889
    drbd_md_flush(mdev);
  } else {
#line 892
    b->bm_set = bm_count_bits_swap_endian(b);
#line 893
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 893
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 893
    printk("<6>%s %s: recounting of set bits took additional %lu jiffies\n", tmp___10,
           tmp___9, (unsigned long )jiffies - now);
  }
#line 896
  now = b->bm_set;
#line 898
  tmp___11 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 898
  tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 898
  tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 898
  printk("<6>%s %s: %s (%lu bits) marked out-of-sync by on disk bit-map.\n", tmp___13,
         tmp___12, tmp___11, now);
#line 901
  return (err);
}
}
#line 908 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 910
  tmp = bm_rw(mdev, 0);
#line 910
  return (tmp);
}
}
#line 917 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 919
  tmp = bm_rw(mdev, 1);
#line 919
  return (tmp);
}
}
#line 931 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  sector_t on_disk_sector ;
  int bm_words ;
  int num_words ;
  int offset ;
  int err ;
  size_t tmp ;
  int _min1 ;
  int _min2 ;
  void *tmp___0 ;
  void *tmp___1 ;
  int i ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
#line 933
  on_disk_sector = (sector_t )(((mdev->ldev)->md.md_offset + (unsigned long long )enr) + (unsigned long long )(mdev->ldev)->md.bm_offset);
#line 936
  err = 0;
#line 938
  ldv_mutex_lock_7(& mdev->md_io_mutex);
#line 939
  tmp = drbd_bm_words(mdev);
#line 939
  bm_words = (int )tmp;
#line 940
  offset = (int )(enr << 6);
#line 941
  _min1 = 64;
#line 941
  _min2 = bm_words - offset;
#line 941
  num_words = _min1 < _min2 ? _min1 : _min2;
#line 942
  if (num_words <= 63) {
#line 943
    tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 943
    memset(tmp___0, 0, 512UL);
  } else {

  }
#line 944
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 944
  drbd_bm_get_lel(mdev, (size_t )offset, (size_t )num_words, (unsigned long *)tmp___1);
#line 946
  tmp___4 = drbd_md_sync_page_io(mdev, mdev->ldev, on_disk_sector, 1);
#line 946
  if (tmp___4 == 0) {
#line 948
    err = -5;
#line 949
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 949
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 949
    printk("<3>%s %s: IO ERROR writing bitmap sector %lu (meta-disk sector %llus)\n",
           tmp___3, tmp___2, enr, (unsigned long long )on_disk_sector);
#line 952
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_sect");
#line 953
    i = 0;
#line 953
    goto ldv_42204;
    ldv_42203: 
#line 954
    drbd_bm_ALe_set_all(mdev, enr * 4UL + (unsigned long )i);
#line 953
    i = i + 1;
    ldv_42204: ;
#line 953
    if (i <= 3) {
#line 954
      goto ldv_42203;
    } else {

    }

  } else {

  }
#line 956
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 957
  ldv_mutex_unlock_8(& mdev->md_io_mutex);
#line 958
  return (err);
}
}
#line 968 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long offset ;

  {
#line 971
  b = mdev->bitmap;
#line 972
  i = 0xffffffffffffffffUL;
#line 976
  if (b->bm_bits < bm_fo) {
#line 977
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 977
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 977
    printk("<3>%s %s: bm_fo=%lu bm_bits=%lu\n", tmp___0, tmp, bm_fo, b->bm_bits);
  } else {
#line 979
    goto ldv_42220;
    ldv_42219: 
#line 981
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 982
    offset = bit_offset >> 6;
#line 983
    p_addr = __bm_map_paddr(b, offset, km);
#line 985
    if ((int )find_zero_bit != 0) {
#line 986
      i = find_next_zero_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    } else {
#line 988
      i = find_next_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    }
#line 990
    __bm_unmap(p_addr, km);
#line 991
    if (i <= 32767UL) {
#line 992
      i = bit_offset + i;
#line 993
      if (b->bm_bits <= i) {
#line 994
        goto ldv_42217;
      } else {

      }
#line 995
      goto found;
    } else {

    }
#line 997
    bm_fo = bit_offset + 32768UL;
    ldv_42220: ;
#line 979
    if (b->bm_bits > bm_fo) {
#line 980
      goto ldv_42219;
    } else {

    }
    ldv_42217: 
#line 999
    i = 0xffffffffffffffffUL;
  }
  found: ;
#line 1002
  return (i);
}
}
#line 1005 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 1008
  b = mdev->bitmap;
#line 1009
  i = 0xffffffffffffffffUL;
#line 1011
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1011
  if (_b != 0) {
#line 1011
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1011
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1011
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "bm_find_next", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1011);
  } else {

  }
#line 1011
  if (_b != 0) {
#line 1011
    return (i);
  } else {

  }
#line 1012
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1012
  if (_b___0 != 0) {
#line 1012
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1012
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1012
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "bm_find_next", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1012);
  } else {

  }
#line 1012
  if (_b___0 != 0) {
#line 1012
    return (i);
  } else {

  }
#line 1014
  spin_lock_irq(& b->bm_lock);
#line 1015
  tmp___3 = bm_is_locked(b);
#line 1015
  if (tmp___3 != 0) {
#line 1016
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1018
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 1020
  spin_unlock_irq(& b->bm_lock);
#line 1021
  return (i);
}
}
#line 1024 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1026
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1026
  return (tmp);
}
}
#line 1039 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1042
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1042
  return (tmp);
}
}
#line 1045 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1048
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1048
  return (tmp);
}
}
#line 1057 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long e ,
                        int val , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned long last_page_nr ;
  int c ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long offset ;
  unsigned long page_nr ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1060
  b = mdev->bitmap;
#line 1061
  p_addr = 0;
#line 1063
  last_page_nr = 0xffffffffffffffffUL;
#line 1064
  c = 0;
#line 1066
  if (b->bm_bits <= e) {
#line 1067
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1067
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1067
    printk("<3>%s %s: ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n", tmp___0,
           tmp, s, e, b->bm_bits);
#line 1069
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1071
  bitnr = s;
#line 1071
  goto ldv_42260;
  ldv_42259: 
#line 1072
  offset = bitnr >> 6;
#line 1073
  page_nr = offset >> 9;
#line 1074
  if (page_nr != last_page_nr) {
#line 1075
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1076
      __bm_unmap(p_addr, km);
    } else {

    }
#line 1077
    p_addr = __bm_map_paddr(b, offset, km);
#line 1078
    last_page_nr = page_nr;
  } else {

  }
#line 1080
  if (val != 0) {
#line 1081
    tmp___1 = __test_and_set_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1081
    c = (tmp___1 == 0) + c;
  } else {
#line 1083
    tmp___2 = __test_and_clear_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1083
    c = c - (tmp___2 != 0);
  }
#line 1071
  bitnr = bitnr + 1UL;
  ldv_42260: ;
#line 1071
  if (bitnr <= e) {
#line 1072
    goto ldv_42259;
  } else {

  }

#line 1085
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1086
    __bm_unmap(p_addr, km);
  } else {

  }
#line 1087
  b->bm_set = b->bm_set + (unsigned long )c;
#line 1088
  return (c);
}
}
#line 1095 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                      int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 1099
  b = mdev->bitmap;
#line 1100
  c = 0;
#line 1102
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1102
  if (_b != 0) {
#line 1102
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1102
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1102
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "bm_change_bits_to", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1102);
  } else {

  }
#line 1102
  if (_b != 0) {
#line 1102
    return (1);
  } else {

  }
#line 1103
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1103
  if (_b___0 != 0) {
#line 1103
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1103
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1103
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "bm_change_bits_to",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1103);
  } else {

  }
#line 1103
  if (_b___0 != 0) {
#line 1103
    return (0);
  } else {

  }
#line 1105
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1105
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1106
  tmp___4 = bm_is_locked(b);
#line 1106
  if (tmp___4 != 0) {
#line 1107
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1109
  c = __bm_change_bits_to(mdev, s, e, val, KM_IRQ1);
#line 1111
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1112
  return (c);
}
}
#line 1116 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1118
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1118
  return (tmp);
}
}
#line 1122 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1124
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1124
  return (- tmp);
}
}
#line 1129 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1134
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr), KM_USER0);
#line 1134
  paddr = (unsigned long *)tmp;
#line 1135
  i = first_word;
#line 1135
  goto ldv_42299;
  ldv_42298: 
#line 1136
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1136
  bits = (int )tmp___0;
#line 1137
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1138
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1135
  i = i + 1;
  ldv_42299: ;
#line 1135
  if (i < last_word) {
#line 1136
    goto ldv_42298;
  } else {

  }
#line 1140
  pagefault_enable();
#line 1141
  return;
}
}
#line 1147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1157
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1158
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1165
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1167
    __bm_change_bits_to(mdev, s, e, 1, KM_USER0);
#line 1168
    return;
  } else {

  }
#line 1174
  if (sl != 0UL) {
#line 1175
    __bm_change_bits_to(mdev, s, sl - 1UL, 1, KM_USER0);
  } else {

  }
#line 1177
  first_page = (int )(sl >> 15);
#line 1178
  last_page = (int )(el >> 15);
#line 1182
  first_word = (int )(sl >> 6) & 511;
#line 1183
  last_word = 512;
#line 1186
  page_nr = first_page;
#line 1186
  goto ldv_42315;
  ldv_42314: 
#line 1187
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1188
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1188, 0);
#line 1188
  _cond_resched();
#line 1189
  first_word = 0;
#line 1186
  page_nr = page_nr + 1;
  ldv_42315: ;
#line 1186
  if (page_nr < last_page) {
#line 1187
    goto ldv_42314;
  } else {

  }
#line 1193
  last_word = (int )(el >> 6) & 511;
#line 1194
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1201
  if (el <= (unsigned long )e) {
#line 1202
    __bm_change_bits_to(mdev, el, e, 1, KM_USER0);
  } else {

  }
#line 1203
  return;
}
}
#line 1212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  unsigned long offset ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 1215
  b = mdev->bitmap;
#line 1219
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1219
  if (_b != 0) {
#line 1219
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1219
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1219
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_test_bit", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1219);
  } else {

  }
#line 1219
  if (_b != 0) {
#line 1219
    return (0);
  } else {

  }
#line 1220
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1220
  if (_b___0 != 0) {
#line 1220
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1220
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1220
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_test_bit",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1220);
  } else {

  }
#line 1220
  if (_b___0 != 0) {
#line 1220
    return (0);
  } else {

  }
#line 1222
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1222
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1223
  tmp___4 = bm_is_locked(b);
#line 1223
  if (tmp___4 != 0) {
#line 1224
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1225
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1226
    offset = bitnr >> 6;
#line 1227
    p_addr = bm_map_paddr(b, offset);
#line 1228
    tmp___5 = variable_test_bit((int )bitnr & 32767, (unsigned long const volatile   *)p_addr);
#line 1228
    i = tmp___5 != 0;
#line 1229
    bm_unmap(p_addr);
  } else
#line 1230
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1231
    i = -1;
  } else {
#line 1233
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1233
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1233
    printk("<3>%s %s: bitnr=%lu > bm_bits=%lu\n", tmp___7, tmp___6, bitnr, b->bm_bits);
#line 1234
    i = 0;
  }
#line 1237
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1238
  return (i);
}
}
#line 1242 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long page_nr ;
  unsigned long bitnr ;
  int c ;
  size_t w ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int _b___1 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 1245
  b = mdev->bitmap;
#line 1246
  p_addr = 0;
#line 1246
  page_nr = 0xffffffffffffffffUL;
#line 1248
  c = 0;
#line 1255
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1255
  if (_b != 0) {
#line 1255
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1255
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1255
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_count_bits", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1255);
  } else {

  }
#line 1255
  if (_b != 0) {
#line 1255
    return (1);
  } else {

  }
#line 1256
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1256
  if (_b___0 != 0) {
#line 1256
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1256
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1256
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_count_bits",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1256);
  } else {

  }
#line 1256
  if (_b___0 != 0) {
#line 1256
    return (1);
  } else {

  }
#line 1258
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1258
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1259
  tmp___4 = bm_is_locked(b);
#line 1259
  if (tmp___4 != 0) {
#line 1260
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1261
  bitnr = s;
#line 1261
  goto ldv_42357;
  ldv_42356: 
#line 1262
  w = bitnr >> 6;
#line 1263
  if (w >> 9 != page_nr) {
#line 1264
    page_nr = w >> 9;
#line 1265
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1266
      bm_unmap(p_addr);
    } else {

    }
#line 1267
    p_addr = bm_map_paddr(b, w);
  } else {

  }
#line 1269
  _b___1 = b->bm_bits <= bitnr;
#line 1269
  if (_b___1 != 0) {
#line 1269
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1269
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1269
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___9, tmp___8, "drbd_bm_count_bits",
           (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1269);
  } else {

  }
#line 1269
  if (_b___1 != 0) {
#line 1270
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1270
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1270
    printk("<3>%s %s: bitnr=%lu bm_bits=%lu\n", tmp___6, tmp___5, bitnr, b->bm_bits);
  } else {
#line 1272
    tmp___7 = variable_test_bit((int )((unsigned int )bitnr - ((unsigned int )page_nr << 15U)),
                                (unsigned long const volatile   *)p_addr);
#line 1272
    c = (tmp___7 != 0) + c;
  }
#line 1261
  bitnr = bitnr + 1UL;
  ldv_42357: ;
#line 1261
  if (bitnr <= (unsigned long )e) {
#line 1262
    goto ldv_42356;
  } else {

  }

#line 1275
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1276
    bm_unmap(p_addr);
  } else {

  }
#line 1277
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1278
  return (c);
}
}
#line 1296 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned long *tmp___5 ;
  unsigned long tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 1298
  b = mdev->bitmap;
#line 1303
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1303
  if (_b != 0) {
#line 1303
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1303
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1303
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_e_weight", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1303);
  } else {

  }
#line 1303
  if (_b != 0) {
#line 1303
    return (0);
  } else {

  }
#line 1304
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1304
  if (_b___0 != 0) {
#line 1304
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1304
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1304
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_e_weight",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1304);
  } else {

  }
#line 1304
  if (_b___0 != 0) {
#line 1304
    return (0);
  } else {

  }
#line 1306
  tmp___3 = spinlock_check(& b->bm_lock);
#line 1306
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 1307
  tmp___4 = bm_is_locked(b);
#line 1307
  if (tmp___4 != 0) {
#line 1308
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1310
  s = (int )(enr << 6);
#line 1311
  _min1 = (enr + 1UL) << 6;
#line 1311
  _min2 = b->bm_words;
#line 1311
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1312
  count = 0;
#line 1313
  if ((size_t )s < b->bm_words) {
#line 1314
    n = e - s;
#line 1315
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1316
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1317
    goto ldv_42383;
    ldv_42382: 
#line 1318
    tmp___5 = bm;
#line 1318
    bm = bm + 1;
#line 1318
    tmp___6 = hweight_long(*tmp___5);
#line 1318
    count = (int )((unsigned int )tmp___6 + (unsigned int )count);
    ldv_42383: 
#line 1317
    tmp___7 = n;
#line 1317
    n = n - 1;
#line 1317
    if (tmp___7 != 0) {
#line 1318
      goto ldv_42382;
    } else {

    }
#line 1319
    bm_unmap(p_addr);
  } else {
#line 1321
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1321
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1321
    printk("<3>%s %s: start offset (%d) too large in drbd_bm_e_weight\n", tmp___9,
           tmp___8, s);
  }
#line 1323
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1324
  return (count);
}
}
#line 1328 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  int count ;
  int s ;
  int e ;
  int i ;
  int do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  size_t __min1 ;
  size_t __min2 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  unsigned long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;

  {
#line 1330
  b = mdev->bitmap;
#line 1334
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1334
  if (_b != 0) {
#line 1334
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1334
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1334
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_ALe_set_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1334);
  } else {

  }
#line 1334
  if (_b != 0) {
#line 1334
    return (0UL);
  } else {

  }
#line 1335
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1335
  if (_b___0 != 0) {
#line 1335
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1335
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1335
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_ALe_set_all",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1335);
  } else {

  }
#line 1335
  if (_b___0 != 0) {
#line 1335
    return (0UL);
  } else {

  }
#line 1337
  spin_lock_irq(& b->bm_lock);
#line 1338
  tmp___3 = bm_is_locked(b);
#line 1338
  if (tmp___3 != 0) {
#line 1339
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1340
  weight = b->bm_set;
#line 1342
  s = (int )((unsigned int )al_enr * 16U);
#line 1343
  __min1 = (size_t )(s + 16);
#line 1343
  __min2 = b->bm_words;
#line 1343
  e = (int )(__min1 < __min2 ? __min1 : __min2);
#line 1345
  if ((e + -1) >> 9 != s >> 9) {
#line 1345
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1345
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1345
    printk("<3>%s %s: ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
           tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1346);
  } else {

  }
#line 1347
  count = 0;
#line 1348
  if ((size_t )s < b->bm_words) {
#line 1349
    do_now = e - s;
#line 1349
    i = do_now;
#line 1350
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1351
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1352
    goto ldv_42407;
    ldv_42406: 
#line 1353
    tmp___6 = hweight_long(*bm);
#line 1353
    count = (int )((unsigned int )tmp___6 + (unsigned int )count);
#line 1354
    *bm = 0xffffffffffffffffUL;
#line 1355
    bm = bm + 1;
    ldv_42407: 
#line 1352
    tmp___7 = i;
#line 1352
    i = i - 1;
#line 1352
    if (tmp___7 != 0) {
#line 1353
      goto ldv_42406;
    } else {

    }
#line 1357
    bm_unmap(p_addr);
#line 1358
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1359
    if ((size_t )e == b->bm_words) {
#line 1360
      tmp___8 = bm_clear_surplus(b);
#line 1360
      b->bm_set = b->bm_set - (unsigned long )tmp___8;
    } else {

    }
  } else {
#line 1362
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1362
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1362
    printk("<3>%s %s: start offset (%d) too large in drbd_bm_ALe_set_all\n", tmp___10,
           tmp___9, s);
  }
#line 1364
  weight = b->bm_set - weight;
#line 1365
  spin_unlock_irq(& b->bm_lock);
#line 1366
  return (weight);
}
}
#line 1369 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1374
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1376
  mutex_lock(ldv_func_arg1);
#line 1377
  return;
}
}
#line 1379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1384
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1386
  mutex_unlock(ldv_func_arg1);
#line 1387
  return;
}
}
#line 1389 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1394
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1396
  mutex_unlock(ldv_func_arg1);
#line 1397
  return;
}
}
#line 1399 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_4(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1404
  tmp = mutex_trylock(ldv_func_arg1);
#line 1404
  ldv_func_res = tmp;
#line 1406
  tmp___0 = ldv_mutex_trylock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1406
  return (tmp___0);
#line 1408
  return (ldv_func_res);
}
}
#line 1411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1416
  ldv_mutex_lock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1418
  mutex_lock(ldv_func_arg1);
#line 1419
  return;
}
}
#line 1421 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1426
  ldv_mutex_unlock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1428
  mutex_unlock(ldv_func_arg1);
#line 1429
  return;
}
}
#line 1431 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_7(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1436
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1438
  mutex_lock(ldv_func_arg1);
#line 1439
  return;
}
}
#line 1441 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1446
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1448
  mutex_unlock(ldv_func_arg1);
#line 1449
  return;
}
}
#line 155 "include/linux/mutex.h"
void ldv_mutex_unlock_18(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_19(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_17(struct mutex *ldv_func_arg1 ) ;
#line 90 "include/linux/module.h"
extern struct module __this_module ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 279
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 280
char const   *drbd_role_str(enum drbd_role s ) ;
#line 281
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 163
struct drbd_conf **minor_table ;
#line 1031 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1035
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1037
  return (mdev);
}
}
#line 1371
int proc_details ;
#line 1501 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1502
struct file_operations  const  drbd_proc_fops ;
#line 1999 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned long tmp___3 ;

  {
#line 2012
  tmp = drbd_bm_total_weight(mdev);
#line 2012
  *bits_left = tmp - mdev->rs_failed;
#line 2015
  if (*bits_left > mdev->rs_total) {
#line 2021
    __asm__  volatile   ("": : : "memory");
#line 2022
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33380.conn);
#line 2022
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2022
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2022
    printk("<4>%s %s: cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n", tmp___2,
           tmp___1, tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2025
    *per_mil_done = 0U;
  } else {
#line 2028
    tmp___3 = 1000UL - ((*bits_left >> 10) * 1000UL) / ((mdev->rs_total >> 10) + 1UL);
#line 2031
    *per_mil_done = (unsigned int )tmp___3;
  }
#line 2033
  return;
}
}
#line 76 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 80
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & single_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 95 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;

  {
#line 101
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 103
  x = (int )(res / 50U);
#line 104
  y = 20 - x;
#line 105
  seq_printf(seq, "\t[");
#line 106
  i = 1;
#line 106
  goto ldv_41882;
  ldv_41881: 
#line 107
  seq_printf(seq, "=");
#line 106
  i = i + 1;
  ldv_41882: ;
#line 106
  if (i < x) {
#line 107
    goto ldv_41881;
  } else {

  }
#line 108
  seq_printf(seq, ">");
#line 109
  i = 0;
#line 109
  goto ldv_41885;
  ldv_41884: 
#line 110
  seq_printf(seq, ".");
#line 109
  i = i + 1;
  ldv_41885: ;
#line 109
  if (i < y) {
#line 110
    goto ldv_41884;
  } else {

  }
#line 111
  seq_printf(seq, "] ");
#line 113
  seq_printf(seq, "sync\'ed:%3u.%u%% ", res / 10U, res % 10U);
#line 115
  if (mdev->rs_total > 1048576UL) {
#line 116
    seq_printf(seq, "(%lu/%lu)M\n\t", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 120
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 133
  dt = ((unsigned long )jiffies - mdev->rs_mark_time) / 250UL;
#line 135
  if (dt > 20UL) {
#line 138
    seq_printf(seq, "stalled\n");
#line 139
    return;
  } else {

  }
#line 142
  if (dt == 0UL) {
#line 143
    dt = dt + 1UL;
  } else {

  }
#line 144
  db = mdev->rs_mark_left - rs_left;
#line 145
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 147
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 151
  dbdt = db / dt << 2;
#line 152
  if (dbdt > 1000UL) {
#line 153
    seq_printf(seq, " speed: %ld,%03ld", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 156
    seq_printf(seq, " speed: %ld", dbdt);
  }
#line 160
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 161
  if (dt == 0UL) {
#line 162
    dt = 1UL;
  } else {

  }
#line 163
  db = mdev->rs_total - rs_left;
#line 164
  dbdt = db / dt << 2;
#line 165
  if (dbdt > 1000UL) {
#line 166
    seq_printf(seq, " (%ld,%03ld)", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 169
    seq_printf(seq, " (%ld)", dbdt);
  }
#line 171
  seq_printf(seq, " K/sec\n");
#line 172
  return;
}
}
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 176
  __mptr = (struct lc_element  const  *)e;
#line 176
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 178
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 181
  return;
}
}
#line 184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[4U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;

  {
#line 186
  hole = 0;
#line 190
  write_ordering_chars[0] = 110;
#line 190
  write_ordering_chars[1] = 100;
#line 190
  write_ordering_chars[2] = 102;
#line 190
  write_ordering_chars[3] = 98;
#line 197
  tmp = drbd_buildtag();
#line 197
  seq_printf(seq, "version: 8.3.7 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 92, tmp);
#line 220
  i = 0;
#line 220
  goto ldv_41905;
  ldv_41904: 
#line 221
  mdev = minor_to_mdev((unsigned int )i);
#line 222
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 223
    hole = 1;
#line 224
    goto ldv_41903;
  } else {

  }
#line 226
  if (hole != 0) {
#line 227
    hole = 0;
#line 228
    seq_printf(seq, "\n");
  } else {

  }
#line 231
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33380.conn);
#line 233
  if (((unsigned int )*((unsigned short *)mdev + 902UL) == 0U && (unsigned int )*((unsigned char *)mdev + 1805UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1804UL) == 2U) {
#line 236
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 238
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 238
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 238
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 238
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 238
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 238
    tmp___5 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_33380.pdsk);
#line 238
    tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_33380.disk);
#line 238
    tmp___7 = drbd_role_str((enum drbd_role )mdev->state.ldv_33380.peer);
#line 238
    tmp___8 = drbd_role_str((enum drbd_role )mdev->state.ldv_33380.role);
#line 238
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___8, tmp___7, tmp___6, tmp___5, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 115 : 114,
               (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               mdev->send_cnt / 2U, mdev->recv_cnt / 2U, mdev->writ_cnt / 2U, mdev->read_cnt / 2U,
               mdev->al_writ_cnt, mdev->bm_writ_cnt, tmp___4, tmp___2 + tmp___3, tmp___1,
               tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 268
    tmp___9 = drbd_bm_total_weight(mdev);
#line 268
    seq_printf(seq, " oos:%lu\n", tmp___9 << 2);
  }
#line 271
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 256U || (unsigned int )*((unsigned short *)mdev + 902UL) == 272U) {
#line 273
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 275
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 288U || (unsigned int )*((unsigned short *)mdev + 902UL) == 304U) {
#line 276
    seq_printf(seq, "\t%3d%%      %lu/%lu\n", (int )((mdev->rs_total - mdev->ov_left) / (mdev->rs_total / 100UL + 1UL)),
               mdev->rs_total - mdev->ov_left, mdev->rs_total);
  } else {

  }
#line 282
  if (proc_details > 0) {
#line 282
    tmp___10 = _get_ldev_if_state(mdev, D_FAILED);
#line 282
    if (tmp___10 != 0) {
#line 283
      lc_seq_printf_stats(seq, mdev->resync);
#line 284
      lc_seq_printf_stats(seq, mdev->act_log);
#line 285
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 288
  if (proc_details > 1) {
#line 289
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 290
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_41903: 
#line 220
  i = i + 1;
  ldv_41905: ;
#line 220
  if ((unsigned int )i < minor_count) {
#line 221
    goto ldv_41904;
  } else {

  }

#line 296
  return (0);
}
}
#line 299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;

  {
#line 301
  tmp = PDE((struct inode  const  *)inode);
#line 301
  tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 301
  return (tmp___0);
}
}
#line 322
void ldv_check_final_state(void) ;
#line 325
extern void ldv_check_return_value(int  ) ;
#line 331
void ldv_initialize(void) ;
#line 334
extern void ldv_handler_precall(void) ;
#line 337
extern int nondet_int(void) ;
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void main(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_3 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 375
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 365
  LDV_IN_INTERRUPT = 1;
#line 374
  ldv_initialize();
#line 378
  goto ldv_41936;
  ldv_41935: 
#line 382
  tmp = nondet_int();
#line 382
  switch (tmp) {
  case 0: ;
#line 387
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 392
    ldv_handler_precall();
#line 393
    res_drbd_proc_open_3 = drbd_proc_open(var_group1, var_group2);
#line 394
    ldv_check_return_value(res_drbd_proc_open_3);
#line 395
    if (res_drbd_proc_open_3 != 0) {
#line 396
      goto ldv_module_exit;
    } else {

    }
#line 397
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 403
  goto ldv_41933;
  default: ;
#line 404
  goto ldv_41933;
  }
  ldv_41933: ;
  ldv_41936: 
#line 378
  tmp___0 = nondet_int();
#line 378
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 380
    goto ldv_41935;
  } else {

  }

  ldv_module_exit: ;
#line 413
  ldv_check_final_state();
#line 416
  return;
}
}
#line 420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_17(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 425
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 427
  mutex_lock(ldv_func_arg1);
#line 428
  return;
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_18(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 435
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 437
  mutex_unlock(ldv_func_arg1);
#line 438
  return;
}
}
#line 440 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_19(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 445
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 447
  mutex_unlock(ldv_func_arg1);
#line 448
  return;
}
}
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 191 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 348
extern void dump_stack(void) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 51
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 64 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 66
  __list_add(new, head, head->next);
#line 67
  return;
}
}
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 90 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 92
  next->prev = prev;
#line 93
  prev->next = next;
#line 94
  return;
}
}
#line 110
extern void list_del(struct list_head * ) ;
#line 140 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 142
  __list_del(entry->prev, entry->next);
#line 143
  INIT_LIST_HEAD(entry);
#line 144
  return;
}
}
#line 184 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 186
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 271 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 275
  first = list->next;
#line 276
  last = list->prev;
#line 278
  first->prev = prev;
#line 279
  prev->next = first;
#line 281
  last->next = next;
#line 282
  next->prev = last;
#line 283
  return;
}
}
#line 316 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 319
  tmp = list_empty((struct list_head  const  *)list);
#line 319
  if (tmp == 0) {
#line 320
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 321
    INIT_LIST_HEAD(list);
  } else {

  }
#line 323
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 248 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 155 "include/linux/mutex.h"
void ldv_mutex_unlock_24(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_29(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_31(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_33(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_28(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_30(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_32(struct mutex *ldv_func_arg1 ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 164 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 89 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 53 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___0(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13362: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13362;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___0(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___0(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___0(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.ldv_5575.rlock.raw_lock.slock = 0U;
#line 35
  __constr_expr_0.lock.ldv_5575.rlock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.ldv_5575.rlock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.ldv_5575.rlock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.ldv_5575.rlock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.ldv_5575.rlock.dep_map.class_cache = 0;
#line 35
  __constr_expr_0.lock.ldv_5575.rlock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.ldv_5575.rlock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.ldv_5575.rlock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.ldv_5575.ldv_5574.dep_map, "semaphore->lock", & __key,
                   0);
#line 37
  return;
}
}
#line 43
extern int down_interruptible(struct semaphore * ) ;
#line 45
extern int down_trylock(struct semaphore * ) ;
#line 47
extern void up(struct semaphore * ) ;
#line 350 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 350
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 350
  return (tmp);
}
}
#line 300 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 302
  tmp = PageTail(page);
#line 302
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 302
  if (tmp___0 != 0L) {
#line 303
    return (page->ldv_12090.first_page);
  } else {

  }
#line 304
  return (page);
}
}
#line 307 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 309
  tmp = compound_head(page);
#line 309
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 309
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17290: ;
#line 63
    goto ldv_17290;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17291: ;
#line 65
    goto ldv_17291;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17292: ;
#line 66
    goto ldv_17292;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 359 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 2006
extern void flush_signals(struct task_struct * ) ;
#line 2039
extern void force_sig(int  , struct task_struct * ) ;
#line 994 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1133 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1135
  return (& tfm->base);
}
}
#line 1153 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1155
  tmp = crypto_hash_tfm(tfm);
#line 1155
  return (& tmp->crt_u.hash);
}
}
#line 1168 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1170
  tmp = crypto_hash_crt(tfm);
#line 1170
  return (tmp->digestsize);
}
}
#line 1188 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1190
  tmp = crypto_hash_crt(desc->tfm);
#line 1190
  tmp___0 = (*(tmp->init))(desc);
#line 1190
  return (tmp___0);
}
}
#line 1193 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1197
  tmp = crypto_hash_crt(desc->tfm);
#line 1197
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1197
  return (tmp___0);
}
}
#line 1200 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1202
  tmp = crypto_hash_crt(desc->tfm);
#line 1202
  tmp___0 = (*(tmp->final))(desc, out);
#line 1202
  return (tmp___0);
}
}
#line 34 "include/linux/mempool.h"
extern void mempool_free(void * , mempool_t * ) ;
#line 186 "include/linux/bio.h"
__inline static bool bio_rw_flagged(struct bio *bio , enum bio_rw_flags flag ) 
{ 


  {
#line 188
  return ((bio->bi_rw & (unsigned long )(1 << (int )flag)) != 0UL);
}
}
#line 775 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 1064 "include/linux/blkdev.h"
__inline static unsigned int queue_max_segment_size(struct request_queue *q ) 
{ 


  {
#line 1066
  return (q->limits.max_segment_size);
}
}
#line 628 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 634
  __asm__  volatile   ("": : : "memory");
#line 635
  return (thi->t_state);
}
}
#line 1040 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1042
  return (mdev->minor);
}
}
#line 1053 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1055
  ldv_mutex_lock_23(& mdev->data.mutex);
#line 1058
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1058
  if (tmp != 0L) {
#line 1059
    ldv_mutex_unlock_24(& mdev->data.mutex);
#line 1060
    return (0);
  } else {

  }
#line 1062
  return (1);
}
}
#line 1065 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1067
  ldv_mutex_unlock_25(& mdev->data.mutex);
#line 1068
  return;
}
}
#line 1087
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1096
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1098
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1115
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) ;
#line 1119
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) ;
#line 1124
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) ;
#line 1132
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1138
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1140
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1142
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1145
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1147
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1151
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1157
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1160
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1163
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1164
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1167
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1172
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) ;
#line 1358
mempool_t *drbd_request_mempool ;
#line 1366 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1392
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1395
int drbd_worker(struct drbd_thread *thi ) ;
#line 1396
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1397
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1398
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1399
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1400
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1404
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1406 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1408
  if (mdev->ov_last_oos_size != 0UL) {
#line 1409
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1409
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1409
    printk("<3>%s %s: Out of sync: start=%llu, size=%lu (sectors)\n", tmp___0, tmp,
           (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1413
  mdev->ov_last_oos_size = 0UL;
#line 1414
  return;
}
}
#line 1417
void drbd_csum(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
               void *digest ) ;
#line 1420
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1421
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1422
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1423
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1424
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1425
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1426
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1427
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1429
int w_io_error(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1430
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1431
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1432
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1433
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1434
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1435
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1436
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1438
void resync_timer_fn(unsigned long data ) ;
#line 1442
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1447
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) ;
#line 1458 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1462
  if (level == 1) {
#line 1463
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1465
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1467
  return (err);
}
}
#line 1470 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1472
  val = 1;
#line 1473
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1475
  return;
}
}
#line 1477 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1479
  val = 0;
#line 1480
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1482
  return;
}
}
#line 1498
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1508
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1509
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1511
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1512
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1513
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1514
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1517
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1521
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) ;
#line 1596 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1598
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1598
  if (tmp == 0) {
#line 1598
    goto ldv_42274;
  } else {

  }
#line 1598
  tmp___0 = get_current();
#line 1598
  __wait.flags = 0U;
#line 1598
  __wait.private = (void *)tmp___0;
#line 1598
  __wait.func = & autoremove_wake_function;
#line 1598
  __wait.task_list.next = & __wait.task_list;
#line 1598
  __wait.task_list.prev = & __wait.task_list;
  ldv_42277: 
#line 1598
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1598
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1598
  if (tmp___1 == 0) {
#line 1598
    goto ldv_42276;
  } else {

  }
#line 1598
  schedule();
#line 1598
  goto ldv_42277;
  ldv_42276: 
#line 1598
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42274: ;
#line 1601
  return;
}
}
#line 1602 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1604
  clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1605
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1606
  return;
}
}
#line 1639 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1641
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1643
  if (forcedetach == 0) {
#line 1644
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1644
    if (tmp___1 != 0) {
#line 1645
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1647
    goto ldv_42300;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1652
  if ((int )mdev->state.ldv_33380.disk > 2) {
#line 1653
    __ns.i = mdev->state.i;
#line 1653
    __ns.ldv_33380.disk = 2U;
#line 1653
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1654
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1657
  goto ldv_42300;
  }
  ldv_42300: ;
#line 1660
  return;
}
}
#line 1670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1673
  if (error != 0) {
#line 1675
    tmp = spinlock_check(& mdev->req_lock);
#line 1675
    flags = _raw_spin_lock_irqsave(tmp);
#line 1676
    __drbd_chk_io_error____0(mdev, forcedetach, where);
#line 1677
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1679
  return;
}
}
#line 1718 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 


  {
#line 1721
  return ((unsigned long )bdev != (unsigned long )((struct block_device *)0) ? (sector_t )((bdev->bd_inode)->i_size >> 9) : 0UL);
}
}
#line 1807 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1810
  tmp = spinlock_check(& q->q_lock);
#line 1810
  flags = _raw_spin_lock_irqsave(tmp);
#line 1811
  list_add_tail(& w->list, & q->q);
#line 1812
  up(& q->s);
#line 1814
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1815
  return;
}
}
#line 1817 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1819
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1819
  if (tmp != 0) {
#line 1820
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 1821
  return;
}
}
#line 1823 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 1825
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 1826
  wake_asender(mdev);
#line 1827
  return;
}
}
#line 1829 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1833
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 1833
  return (tmp);
}
}
#line 1848 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 1850
  _drbd_thread_stop(thi, 0, 1);
#line 1851
  return;
}
}
#line 1908 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1910
  atomic_inc(& mdev->rs_pending_cnt);
#line 1911
  return;
}
}
#line 2239 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_kick_lo(struct drbd_conf *mdev ) 
{ 
  struct request_queue *tmp ;
  int tmp___0 ;

  {
#line 2241
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2241
  if (tmp___0 != 0) {
#line 2242
    tmp = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2242
    drbd_blk_run_queue(tmp);
#line 2243
    put_ldev(mdev);
  } else {

  }
#line 2245
  return;
}
}
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_bio_has_active_page(struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 26
  bvec = bio->bi_io_vec;
#line 26
  i = 0;
#line 26
  goto ldv_42550;
  ldv_42549: 
#line 27
  tmp = page_count(bvec->bv_page);
#line 27
  if (tmp > 1) {
#line 28
    return (1);
  } else {

  }
#line 26
  bvec = bvec + 1;
#line 26
  i = i + 1;
  ldv_42550: ;
#line 26
  if ((int )bio->bi_vcnt > i) {
#line 27
    goto ldv_42549;
  } else {

  }

#line 31
  return (0);
}
}
#line 35
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 36
void drbd_endio_read_sec(struct bio *bio , int error ) ;
#line 37
void drbd_endio_write_sec(struct bio *bio , int error ) ;
#line 38
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 43 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 47
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 48
    tmp = mdev_to_minor(mdev);
#line 48
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 51
    dump_stack();
#line 52
    bio_endio(bio, -19);
#line 53
    return;
  } else {

  }
#line 56
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 56
  if (tmp___0 != 0) {
#line 57
    bio_endio(bio, -5);
  } else {
#line 59
    generic_make_request(bio);
  }
#line 60
  return;
}
}
#line 274 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 276
  mempool_free((void *)req, drbd_request_mempool);
#line 277
  return;
}
}
#line 294
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 296
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 303
  mdev = req->mdev;
#line 307
  __req_mod(req, what, & m);
#line 308
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 309
    complete_master_bio(mdev, & m);
  } else {

  }
#line 310
  return;
}
}
#line 314 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 317
  mdev = req->mdev;
#line 319
  spin_lock_irq(& mdev->req_lock);
#line 320
  __req_mod(req, what, & m);
#line 321
  spin_unlock_irq(& mdev->req_lock);
#line 323
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 324
    complete_master_bio(mdev, & m);
  } else {

  }
#line 325
  return;
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 118
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 119
  md_io->error = error;
#line 121
  complete(& md_io->event);
#line 122
  return;
}
}
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  raw_spinlock_t *tmp___5 ;
  int tmp___6 ;

  {
#line 129
  flags = 0UL;
#line 130
  e = 0;
#line 132
  uptodate = (int )bio->bi_flags & 1;
#line 134
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 135
  mdev = e->mdev;
#line 137
  if (error != 0) {
#line 138
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 138
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 138
    printk("<4>%s %s: read: error=%d s=%llus\n", tmp___0, tmp, error, (unsigned long long )e->sector);
  } else {

  }
#line 140
  if (error == 0 && uptodate == 0) {
#line 141
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 141
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 141
    printk("<4>%s %s: read: setting error to -EIO s=%llus\n", tmp___2, tmp___1, (unsigned long long )e->sector);
#line 146
    error = -5;
  } else {

  }
#line 149
  if (e->block_id == 0ULL) {
#line 149
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 149
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 149
    printk("<3>%s %s: ASSERT( e->block_id != ID_VACANT ) in %s:%d\n", tmp___4, tmp___3,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           149);
  } else {

  }
#line 151
  tmp___5 = spinlock_check(& mdev->req_lock);
#line 151
  flags = _raw_spin_lock_irqsave(tmp___5);
#line 152
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 153
  list_del(& e->w.list);
#line 154
  tmp___6 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 154
  if (tmp___6 != 0) {
#line 155
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 156
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 158
  drbd_chk_io_error____0(mdev, error, 0, "drbd_endio_read_sec");
#line 159
  drbd_queue_work(& mdev->data.work, & e->w);
#line 160
  put_ldev(mdev);
#line 161
  return;
}
}
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_write_sec(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  int uptodate ;
  int is_barrier ;
  bool tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  raw_spinlock_t *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 168
  flags = 0UL;
#line 169
  e = 0;
#line 175
  uptodate = (int )bio->bi_flags & 1;
#line 176
  tmp = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 176
  is_barrier = (int )tmp;
#line 178
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 179
  mdev = e->mdev;
#line 181
  if (error != 0) {
#line 182
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 182
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 182
    printk("<4>%s %s: write: error=%d s=%llus\n", tmp___1, tmp___0, error, (unsigned long long )e->sector);
  } else {

  }
#line 184
  if (error == 0 && uptodate == 0) {
#line 185
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 185
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 185
    printk("<4>%s %s: write: setting error to -EIO s=%llus\n", tmp___3, tmp___2, (unsigned long long )e->sector);
#line 190
    error = -5;
  } else {

  }
#line 195
  if ((error != 0 && is_barrier != 0) && (e->flags & 8U) != 0U) {
#line 196
    drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 197
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 197
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 198
    list_del(& e->w.list);
#line 199
    e->w.cb = & w_e_reissue;
#line 202
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 203
    drbd_queue_work(& mdev->data.work, & e->w);
#line 204
    return;
  } else {

  }
#line 207
  if (e->block_id == 0ULL) {
#line 207
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 207
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 207
    printk("<3>%s %s: ASSERT( e->block_id != ID_VACANT ) in %s:%d\n", tmp___6, tmp___5,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           207);
  } else {

  }
#line 209
  tmp___7 = spinlock_check(& mdev->req_lock);
#line 209
  flags = _raw_spin_lock_irqsave(tmp___7);
#line 210
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 211
  is_syncer_req = e->block_id == 0xffffffffffffffffULL;
#line 217
  e_sector = e->sector;
#line 218
  do_al_complete_io = (int )e->flags & 1;
#line 220
  list_del(& e->w.list);
#line 221
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 228
  if (is_syncer_req != 0) {
#line 228
    tmp___8 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 228
    do_wake = tmp___8;
  } else {
#line 228
    tmp___9 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 228
    do_wake = tmp___9;
  }
#line 232
  if (error != 0) {
#line 233
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec");
  } else {

  }
#line 234
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 236
  if (is_syncer_req != 0) {
#line 237
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 239
  if (do_wake != 0) {
#line 240
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 242
  if (do_al_complete_io != 0) {
#line 243
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 245
  wake_asender(mdev);
#line 246
  put_ldev(mdev);
#line 247
  return;
}
}
#line 252 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  void *tmp___4 ;
  raw_spinlock_t *tmp___5 ;

  {
#line 255
  req = (struct drbd_request *)bio->bi_private;
#line 256
  mdev = req->mdev;
#line 259
  uptodate = (int )bio->bi_flags & 1;
#line 261
  if (error != 0) {
#line 262
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 262
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 262
    printk("<4>%s %s: p %s: error=%d\n", tmp___0, tmp, (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read",
           error);
  } else {

  }
#line 264
  if (error == 0 && uptodate == 0) {
#line 265
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 265
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 265
    printk("<4>%s %s: p %s: setting error to -EIO\n", tmp___2, tmp___1, (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 270
    error = -5;
  } else {

  }
#line 274
  tmp___3 = __builtin_expect(error != 0, 0L);
#line 274
  if (tmp___3 != 0L) {
#line 275
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 3UL) == 2UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 281
    what = completed_ok;
  }
#line 283
  bio_put(req->private_bio);
#line 284
  tmp___4 = ERR_PTR((long )error);
#line 284
  req->private_bio = (struct bio *)tmp___4;
#line 286
  tmp___5 = spinlock_check(& mdev->req_lock);
#line 286
  flags = _raw_spin_lock_irqsave(tmp___5);
#line 287
  __req_mod(req, what, & m);
#line 288
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 290
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 291
    complete_master_bio(mdev, & m);
  } else {

  }
#line 292
  return;
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_io_error(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 296
  __mptr = (struct drbd_work  const  *)w;
#line 296
  req = (struct drbd_request *)__mptr;
#line 303
  drbd_req_free(req);
#line 305
  return (1);
}
}
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 310
  __mptr = (struct drbd_work  const  *)w;
#line 310
  req = (struct drbd_request *)__mptr;
#line 316
  spin_lock_irq(& mdev->req_lock);
#line 317
  if ((cancel != 0 || (int )mdev->state.ldv_33380.conn <= 9) || (int )mdev->state.ldv_33380.pdsk <= 4) {
#line 320
    _req_mod(req, send_canceled);
#line 321
    spin_unlock_irq(& mdev->req_lock);
#line 322
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 322
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 322
    printk("<1>%s %s: WE ARE LOST. Local IO failure, no peer.\n", tmp___0, tmp);
#line 323
    return (1);
  } else {

  }
#line 325
  spin_unlock_irq(& mdev->req_lock);
#line 327
  tmp___1 = w_send_read_req(mdev, w, 0);
#line 327
  return (tmp___1);
}
}
#line 330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 332
  _b = cancel != 0;
#line 332
  if (_b != 0) {
#line 332
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 332
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 332
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "w_resync_inactive", (char *)"cancel",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           332);
  } else {

  }
#line 332
  if (_b != 0) {
#line 332
    return (1);
  } else {

  }
#line 333
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 333
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 333
  printk("<3>%s %s: resync inactive, but callback triggered??\n", tmp___2, tmp___1);
#line 334
  return (1);
}
}
#line 337 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
               void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 344
  desc.tfm = tfm;
#line 345
  desc.flags = 0U;
#line 347
  sg_init_table(& sg, 1U);
#line 348
  crypto_hash_init(& desc);
#line 350
  bvec = bio->bi_io_vec;
#line 350
  i = 0;
#line 350
  goto ldv_42768;
  ldv_42767: 
#line 351
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 352
  crypto_hash_update(& desc, & sg, sg.length);
#line 350
  bvec = bvec + 1;
#line 350
  i = i + 1;
  ldv_42768: ;
#line 350
  if ((int )bio->bi_vcnt > i) {
#line 351
    goto ldv_42767;
  } else {

  }
#line 354
  crypto_hash_final(& desc, (u8 *)digest);
#line 355
  return;
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;
  unsigned int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  long tmp___8 ;

  {
#line 359
  __mptr = (struct drbd_work  const  *)w;
#line 359
  e = (struct drbd_epoch_entry *)__mptr;
#line 364
  if (e->block_id != 2205466966ULL) {
#line 364
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 364
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 364
    printk("<3>%s %s: ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           364);
  } else {

  }
#line 366
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 366
  if (tmp___1 != 0L) {
#line 367
    drbd_free_ee(mdev, e);
#line 368
    return (1);
  } else {

  }
#line 371
  tmp___5 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 371
  if (tmp___5 != 0L) {
#line 372
    tmp___2 = crypto_hash_digestsize(mdev->csums_tfm);
#line 372
    digest_size = (int )tmp___2;
#line 373
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 374
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 375
      drbd_csum(mdev, mdev->csums_tfm, e->private_bio, digest);
#line 377
      inc_rs_pending(mdev);
#line 378
      ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                   P_CSUM_RS_REQUEST);
#line 384
      kfree((void const   *)digest);
    } else {
#line 386
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 386
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 386
      printk("<3>%s %s: kmalloc() of digest failed.\n", tmp___4, tmp___3);
#line 387
      ok = 0;
    }
  } else {
#line 390
    ok = 1;
  }
#line 392
  drbd_free_ee(mdev, e);
#line 394
  tmp___8 = __builtin_expect(ok == 0, 0L);
#line 394
  if (tmp___8 != 0L) {
#line 395
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 395
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 395
    printk("<3>%s %s: drbd_send_drequest(..., csum) failed\n", tmp___7, tmp___6);
  } else {

  }
#line 396
  return (ok);
}
}
#line 401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;

  {
#line 405
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 405
  if (tmp == 0) {
#line 406
    return (0);
  } else {

  }
#line 410
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 411
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 412
    put_ldev(mdev);
#line 413
    return (2);
  } else {

  }
#line 416
  spin_lock_irq(& mdev->req_lock);
#line 417
  list_add(& e->w.list, & mdev->read_ee);
#line 418
  spin_unlock_irq(& mdev->req_lock);
#line 420
  (e->private_bio)->bi_end_io = & drbd_endio_read_sec;
#line 421
  (e->private_bio)->bi_rw = 0UL;
#line 422
  e->w.cb = & w_e_send_csum;
#line 424
  mdev->read_cnt = mdev->read_cnt + (unsigned int )(size >> 9);
#line 425
  drbd_generic_make_request(mdev, 3, e->private_bio);
#line 427
  return (1);
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  int queue ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;

  {
#line 433
  mdev = (struct drbd_conf *)data;
#line 436
  tmp = spinlock_check(& mdev->req_lock);
#line 436
  flags = _raw_spin_lock_irqsave(tmp);
#line 438
  tmp___0 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 438
  tmp___1 = __builtin_expect(tmp___0 == 0, 1L);
#line 438
  if (tmp___1 != 0L) {
#line 439
    queue = 1;
#line 440
    if ((unsigned int )*((unsigned short *)mdev + 902UL) == 288U) {
#line 441
      mdev->resync_work.cb = & w_make_ov_request;
    } else {
#line 443
      mdev->resync_work.cb = & w_make_resync_request;
    }
  } else {
#line 445
    queue = 0;
#line 446
    mdev->resync_work.cb = & w_resync_inactive;
  }
#line 449
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 452
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 452
  if (tmp___2 != 0 && queue != 0) {
#line 453
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 454
  return;
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_segment_size ;
  unsigned int tmp___0 ;
  int number ;
  int i ;
  int size ;
  int pe ;
  int mx ;
  int align ;
  int queued ;
  int sndbuf ;
  long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  long tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  long tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned long tmp___23 ;

  {
#line 461
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 461
  capacity = tmp;
#line 462
  tmp___0 = queue_max_segment_size(mdev->rq_queue);
#line 462
  max_segment_size = (int )tmp___0;
#line 466
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 466
  if (tmp___1 != 0L) {
#line 467
    return (1);
  } else {

  }
#line 469
  tmp___4 = __builtin_expect((int )mdev->state.ldv_33380.conn <= 9, 0L);
#line 469
  if (tmp___4 != 0L) {
#line 470
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 470
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 470
    printk("<3>%s %s: Confused in w_make_resync_request()! cstate < Connected", tmp___3,
           tmp___2);
#line 471
    return (0);
  } else {

  }
#line 474
  if ((unsigned int )*((unsigned short *)mdev + 902UL) != 272U) {
#line 475
    tmp___5 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33380.conn);
#line 475
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 475
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 475
    printk("<3>%s %s: %s in w_make_resync_request\n", tmp___7, tmp___6, tmp___5);
  } else {

  }
#line 478
  tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 478
  if (tmp___10 == 0) {
#line 483
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 483
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 483
    printk("<3>%s %s: Disk broke down during resync!\n", tmp___9, tmp___8);
#line 484
    mdev->resync_work.cb = & w_resync_inactive;
#line 485
    return (1);
  } else {

  }
#line 488
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 489
  pe = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 491
  ldv_mutex_lock_26(& mdev->data.mutex);
#line 492
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 493
    mx = (int )((unsigned long )((mdev->data.socket)->sk)->sk_rcvbuf / 32UL);
  } else {
#line 495
    mx = 1;
  }
#line 496
  ldv_mutex_unlock_27(& mdev->data.mutex);
#line 499
  if (number > mx) {
#line 500
    mx = number;
  } else {

  }
#line 503
  if (pe + number > mx) {
#line 504
    number = mx - pe;
  } else {

  }
#line 507
  i = 0;
#line 507
  goto ldv_42824;
  ldv_42823: 
#line 509
  ldv_mutex_lock_28(& mdev->data.mutex);
#line 510
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 511
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 512
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 514
    queued = 1;
#line 515
    sndbuf = 0;
  }
#line 517
  ldv_mutex_unlock_29(& mdev->data.mutex);
#line 518
  if (sndbuf / 2 < queued) {
#line 519
    goto requeue;
  } else {

  }
  next_sector: 
#line 522
  size = 4096;
#line 523
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 525
  if (bit == 0xffffffffffffffffUL) {
#line 526
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 527
    mdev->resync_work.cb = & w_resync_inactive;
#line 528
    put_ldev(mdev);
#line 529
    return (1);
  } else {

  }
#line 532
  sector = bit << 3;
#line 534
  tmp___11 = drbd_try_rs_begin_io(mdev, sector);
#line 534
  if (tmp___11 != 0) {
#line 535
    mdev->bm_resync_fo = bit;
#line 536
    goto requeue;
  } else {

  }
#line 538
  mdev->bm_resync_fo = bit + 1UL;
#line 540
  tmp___12 = drbd_bm_test_bit(mdev, bit);
#line 540
  tmp___13 = __builtin_expect(tmp___12 == 0, 0L);
#line 540
  if (tmp___13 != 0L) {
#line 541
    drbd_rs_complete_io(mdev, sector);
#line 542
    goto next_sector;
  } else {

  }
#line 558
  align = 1;
  ldv_42816: ;
#line 560
  if (size + 4096 > max_segment_size) {
#line 561
    goto ldv_42815;
  } else {

  }
#line 564
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 565
    goto ldv_42815;
  } else {

  }
#line 568
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 569
    goto ldv_42815;
  } else {

  }
#line 575
  tmp___14 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 575
  if (tmp___14 != 1) {
#line 576
    goto ldv_42815;
  } else {

  }
#line 577
  bit = bit + 1UL;
#line 578
  size = size + 4096;
#line 579
  if (4096 << align <= size) {
#line 580
    align = align + 1;
  } else {

  }
#line 581
  i = i + 1;
#line 582
  goto ldv_42816;
  ldv_42815: ;
#line 585
  if (size > 4096) {
#line 586
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 590
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 591
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 592
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 593
    tmp___15 = read_for_csum(mdev, sector, size);
#line 593
    switch (tmp___15) {
    case 0: 
#line 595
    put_ldev(mdev);
#line 596
    return (0);
    case 2: 
#line 598
    drbd_rs_complete_io(mdev, sector);
#line 599
    mdev->bm_resync_fo = sector >> 3;
#line 600
    goto requeue;
    }
  } else {
#line 604
    inc_rs_pending(mdev);
#line 605
    tmp___22 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 605
    if (tmp___22 == 0) {
#line 607
      tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 607
      tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 607
      printk("<3>%s %s: drbd_send_drequest() failed, aborting...\n", tmp___17, tmp___16);
#line 608
      atomic_dec(& mdev->rs_pending_cnt);
#line 608
      tmp___21 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 608
      if (tmp___21 < 0) {
#line 608
        tmp___18 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 608
        tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 608
        tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 608
        printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___20, tmp___19,
               "w_make_resync_request", 608, tmp___18);
      } else {

      }
#line 609
      put_ldev(mdev);
#line 610
      return (0);
    } else {

    }
  }
#line 507
  i = i + 1;
  ldv_42824: ;
#line 507
  if (i < number) {
#line 508
    goto ldv_42823;
  } else {

  }
#line 615
  tmp___23 = drbd_bm_bits(mdev);
#line 615
  if (mdev->bm_resync_fo >= tmp___23) {
#line 622
    mdev->resync_work.cb = & w_resync_inactive;
#line 623
    put_ldev(mdev);
#line 624
    return (1);
  } else {

  }
  requeue: 
#line 628
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 629
  put_ldev(mdev);
#line 630
  return (1);
}
}
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 637
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 637
  capacity = tmp;
#line 639
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 639
  if (tmp___0 != 0L) {
#line 640
    return (1);
  } else {

  }
#line 642
  tmp___3 = __builtin_expect((int )mdev->state.ldv_33380.conn <= 9, 0L);
#line 642
  if (tmp___3 != 0L) {
#line 643
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 643
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 643
    printk("<3>%s %s: Confused in w_make_ov_request()! cstate < Connected", tmp___2,
           tmp___1);
#line 644
    return (0);
  } else {

  }
#line 647
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 648
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 648
  if (tmp___4 > number) {
#line 649
    goto requeue;
  } else {

  }
#line 651
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 651
  number = number - tmp___5;
#line 653
  sector = mdev->ov_position;
#line 654
  i = 0;
#line 654
  goto ldv_42842;
  ldv_42841: ;
#line 655
  if (sector >= capacity) {
#line 656
    mdev->resync_work.cb = & w_resync_inactive;
#line 657
    return (1);
  } else {

  }
#line 660
  size = 4096;
#line 662
  tmp___6 = drbd_try_rs_begin_io(mdev, sector);
#line 662
  if (tmp___6 != 0) {
#line 663
    mdev->ov_position = sector;
#line 664
    goto requeue;
  } else {

  }
#line 667
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 668
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 670
  inc_rs_pending(mdev);
#line 671
  tmp___11 = drbd_send_ov_request(mdev, sector, size);
#line 671
  if (tmp___11 == 0) {
#line 672
    atomic_dec(& mdev->rs_pending_cnt);
#line 672
    tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 672
    if (tmp___10 < 0) {
#line 672
      tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 672
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 672
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 672
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___9, tmp___8,
             "w_make_ov_request", 672, tmp___7);
    } else {

    }
#line 673
    return (0);
  } else {

  }
#line 675
  sector = sector + 8UL;
#line 654
  i = i + 1;
  ldv_42842: ;
#line 654
  if (i < number) {
#line 655
    goto ldv_42841;
  } else {

  }
#line 677
  mdev->ov_position = sector;
  requeue: 
#line 680
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 681
  return (1);
}
}
#line 685 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 687
  kfree((void const   *)w);
#line 688
  ov_oos_print(mdev);
#line 689
  drbd_resync_finished(mdev);
#line 691
  return (1);
}
}
#line 694 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 696
  kfree((void const   *)w);
#line 698
  drbd_resync_finished(mdev);
#line 700
  return (1);
}
}
#line 703 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int i ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int i___0 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;

  {
#line 709
  khelper_cmd = 0;
#line 714
  tmp___3 = drbd_rs_del_all(mdev);
#line 714
  if (tmp___3 != 0) {
#line 720
    drbd_kick_lo(mdev);
#line 721
    tmp = get_current();
#line 721
    tmp->state = 1L;
#line 722
    schedule_timeout(25L);
#line 723
    tmp___0 = kmalloc___0(24UL, 32U);
#line 723
    w = (struct drbd_work *)tmp___0;
#line 724
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 725
      w->cb = & w_resync_finished;
#line 726
      drbd_queue_work(& mdev->data.work, w);
#line 727
      return (1);
    } else {

    }
#line 729
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 729
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 729
    printk("<3>%s %s: Warn failed to drbd_rs_del_all() and to kmalloc(w).\n", tmp___2,
           tmp___1);
  } else {

  }
#line 732
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 733
  if (dt == 0UL) {
#line 734
    dt = 1UL;
  } else {

  }
#line 735
  db = mdev->rs_total;
#line 736
  dbdt = db / dt << 2;
#line 737
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 739
  tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 739
  if (tmp___4 == 0) {
#line 740
    goto out;
  } else {

  }
#line 742
  spin_lock_irq(& mdev->req_lock);
#line 743
  os = mdev->state;
#line 747
  if ((int )os.ldv_33380.conn <= 10) {
#line 748
    goto out_unlock;
  } else {

  }
#line 750
  ns = os;
#line 751
  ns.ldv_33380.conn = 10U;
#line 753
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 753
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 753
  printk("<6>%s %s: %s done (total %lu sec; paused %lu sec; %lu K/sec)\n", tmp___6,
         tmp___5, (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? (char *)"Online verify " : (char *)"Resync",
         mdev->rs_paused + dt, mdev->rs_paused, dbdt);
#line 758
  n_oos = drbd_bm_total_weight(mdev);
#line 760
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 761
    if (n_oos != 0UL) {
#line 762
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 762
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 762
      printk("<1>%s %s: Online verify found %lu %dk block out of sync!\n", tmp___8,
             tmp___7, n_oos, 4);
#line 764
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 767
      if (mdev->rs_failed != n_oos) {
#line 767
        tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 767
        tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 767
        printk("<3>%s %s: ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n", tmp___10,
               tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
               767);
      } else {

      }
#line 769
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 770
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 772
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 773
        s = mdev->rs_same_csum;
#line 774
        t = mdev->rs_total;
#line 775
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 778
        tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 778
        tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 778
        printk("<6>%s %s: %u %% had equal check sums, eliminated: %luK; transferred %luK total %luK\n",
               tmp___12, tmp___11, ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
               mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 787
  if (mdev->rs_failed != 0UL) {
#line 788
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 788
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 788
    printk("<6>%s %s:             %lu failed blocks\n", tmp___14, tmp___13, mdev->rs_failed);
#line 790
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 791
      ns.ldv_33380.disk = 4U;
#line 792
      ns.ldv_33380.pdsk = 8U;
    } else {
#line 794
      ns.ldv_33380.disk = 8U;
#line 795
      ns.ldv_33380.pdsk = 4U;
    }
  } else {
#line 798
    ns.ldv_33380.disk = 8U;
#line 799
    ns.ldv_33380.pdsk = 8U;
#line 801
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 802
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 804
        i = 1;
#line 804
        goto ldv_42872;
        ldv_42871: 
#line 805
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 804
        i = i + 1;
        ldv_42872: ;
#line 804
        if (i <= 3) {
#line 805
          goto ldv_42871;
        } else {

        }
#line 806
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 807
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 809
        tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 809
        tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 809
        printk("<3>%s %s: mdev->p_uuid is NULL! BUG\n", tmp___16, tmp___15);
      }
    } else {

    }
#line 813
    drbd_uuid_set_bm(mdev, 0ULL);
#line 815
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 819
      i___0 = 0;
#line 819
      goto ldv_42876;
      ldv_42875: 
#line 820
      *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 819
      i___0 = i___0 + 1;
      ldv_42876: ;
#line 819
      if (i___0 <= 3) {
#line 820
        goto ldv_42875;
      } else {

      }

    } else {

    }
  }
#line 824
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 826
  spin_unlock_irq(& mdev->req_lock);
#line 827
  put_ldev(mdev);
  out: 
#line 829
  mdev->rs_total = 0UL;
#line 830
  mdev->rs_failed = 0UL;
#line 831
  mdev->rs_paused = 0UL;
#line 832
  mdev->ov_start_sector = 0UL;
#line 834
  tmp___19 = test_and_clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 834
  if (tmp___19 != 0) {
#line 835
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 835
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 835
    printk("<4>%s %s: Writing the whole bitmap, due to failed kmalloc\n", tmp___18,
           tmp___17);
#line 836
    drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished");
  } else {

  }
#line 839
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 840
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 842
  return (1);
}
}
#line 846 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int tmp ;

  {
#line 848
  tmp = drbd_bio_has_active_page(e->private_bio);
#line 848
  if (tmp != 0) {
#line 850
    spin_lock_irq(& mdev->req_lock);
#line 851
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 852
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 854
    drbd_free_ee(mdev, e);
  }
#line 855
  return;
}
}
#line 863 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long tmp___14 ;

  {
#line 865
  __mptr = (struct drbd_work  const  *)w;
#line 865
  e = (struct drbd_epoch_entry *)__mptr;
#line 868
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 868
  if (tmp___3 != 0L) {
#line 869
    drbd_free_ee(mdev, e);
#line 870
    atomic_dec(& mdev->unacked_cnt);
#line 870
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 870
    if (tmp___2 < 0) {
#line 870
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 870
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 870
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 870
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_data_req",
             870, tmp);
    } else {

    }
#line 871
    return (1);
  } else {

  }
#line 874
  tmp___7 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 874
  if (tmp___7 != 0L) {
#line 875
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 877
    tmp___6 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 877
    if (tmp___6 != 0) {
#line 878
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 878
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 878
      printk("<3>%s %s: Sending NegDReply. sector=%llus.\n", tmp___5, tmp___4, (unsigned long long )e->sector);
    } else {

    }
#line 881
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 884
  atomic_dec(& mdev->unacked_cnt);
#line 884
  tmp___11 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 884
  if (tmp___11 < 0) {
#line 884
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 884
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 884
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 884
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___10, tmp___9, "w_e_end_data_req",
           884, tmp___8);
  } else {

  }
#line 886
  move_to_net_ee_or_free(mdev, e);
#line 888
  tmp___14 = __builtin_expect(ok == 0, 0L);
#line 888
  if (tmp___14 != 0L) {
#line 889
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 889
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 889
    printk("<3>%s %s: drbd_send_block() failed\n", tmp___13, tmp___12);
  } else {

  }
#line 890
  return (ok);
}
}
#line 899 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  long tmp___12 ;
  int tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  long tmp___19 ;

  {
#line 901
  __mptr = (struct drbd_work  const  *)w;
#line 901
  e = (struct drbd_epoch_entry *)__mptr;
#line 904
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 904
  if (tmp___3 != 0L) {
#line 905
    drbd_free_ee(mdev, e);
#line 906
    atomic_dec(& mdev->unacked_cnt);
#line 906
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 906
    if (tmp___2 < 0) {
#line 906
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 906
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 906
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 906
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_rsdata_req",
             906, tmp);
    } else {

    }
#line 907
    return (1);
  } else {

  }
#line 910
  tmp___4 = _get_ldev_if_state(mdev, D_FAILED);
#line 910
  if (tmp___4 != 0) {
#line 911
    drbd_rs_complete_io(mdev, e->sector);
#line 912
    put_ldev(mdev);
  } else {

  }
#line 915
  tmp___12 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 915
  if (tmp___12 != 0L) {
#line 916
    tmp___8 = __builtin_expect((int )mdev->state.ldv_33380.pdsk > 3, 1L);
#line 916
    if (tmp___8 != 0L) {
#line 917
      inc_rs_pending(mdev);
#line 918
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    } else {
#line 920
      tmp___7 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 920
      if (tmp___7 != 0) {
#line 921
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 921
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 921
        printk("<3>%s %s: Not sending RSDataReply, partner DISKLESS!\n", tmp___6,
               tmp___5);
      } else {

      }
#line 923
      ok = 1;
    }
  } else {
#line 926
    tmp___11 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 926
    if (tmp___11 != 0) {
#line 927
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 927
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 927
      printk("<3>%s %s: Sending NegRSDReply. sector %llus.\n", tmp___10, tmp___9,
             (unsigned long long )e->sector);
    } else {

    }
#line 930
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 933
    drbd_rs_failed_io(mdev, e->sector, (int )e->size);
  }
#line 936
  atomic_dec(& mdev->unacked_cnt);
#line 936
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 936
  if (tmp___16 < 0) {
#line 936
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 936
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 936
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 936
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___15, tmp___14, "w_e_end_rsdata_req",
           936, tmp___13);
  } else {

  }
#line 938
  move_to_net_ee_or_free(mdev, e);
#line 940
  tmp___19 = __builtin_expect(ok == 0, 0L);
#line 940
  if (tmp___19 != 0L) {
#line 941
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 941
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 941
    printk("<3>%s %s: drbd_send_block() failed\n", tmp___18, tmp___17);
  } else {

  }
#line 942
  return (ok);
}
}
#line 945 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  unsigned int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  long tmp___18 ;

  {
#line 947
  __mptr = (struct drbd_work  const  *)w;
#line 947
  e = (struct drbd_epoch_entry *)__mptr;
#line 950
  digest = 0;
#line 951
  eq = 0;
#line 953
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 953
  if (tmp___3 != 0L) {
#line 954
    drbd_free_ee(mdev, e);
#line 955
    atomic_dec(& mdev->unacked_cnt);
#line 955
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 955
    if (tmp___2 < 0) {
#line 955
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 955
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 955
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 955
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_csum_rs_req",
             955, tmp);
    } else {

    }
#line 956
    return (1);
  } else {

  }
#line 959
  drbd_rs_complete_io(mdev, e->sector);
#line 961
  di = (struct digest_info *)e->block_id;
#line 963
  tmp___11 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 963
  if (tmp___11 != 0L) {
#line 967
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 968
      tmp___4 = crypto_hash_digestsize(mdev->csums_tfm);
#line 968
      digest_size = (int )tmp___4;
#line 969
      if (di->digest_size != digest_size) {
#line 969
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 969
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 969
        printk("<3>%s %s: ASSERT( digest_size == di->digest_size ) in %s:%d\n", tmp___6,
               tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
               969);
      } else {

      }
#line 970
      digest = kmalloc___0((size_t )digest_size, 16U);
    } else {

    }
#line 972
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 973
      drbd_csum(mdev, mdev->csums_tfm, e->private_bio, digest);
#line 974
      tmp___7 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 974
      eq = tmp___7 == 0;
#line 975
      kfree((void const   *)digest);
    } else {

    }
#line 978
    if (eq != 0) {
#line 979
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         979U);
#line 981
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 982
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 984
      inc_rs_pending(mdev);
#line 985
      e->block_id = 0xffffffffffffffffULL;
#line 986
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 989
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 990
    tmp___10 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 990
    if (tmp___10 != 0) {
#line 991
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 991
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 991
      printk("<3>%s %s: Sending NegDReply. I guess it gets messy.\n", tmp___9, tmp___8);
    } else {

    }
  }
#line 994
  atomic_dec(& mdev->unacked_cnt);
#line 994
  tmp___15 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 994
  if (tmp___15 < 0) {
#line 994
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 994
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 994
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 994
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___14, tmp___13, "w_e_end_csum_rs_req",
           994, tmp___12);
  } else {

  }
#line 996
  kfree((void const   *)di);
#line 998
  move_to_net_ee_or_free(mdev, e);
#line 1000
  tmp___18 = __builtin_expect(ok == 0, 0L);
#line 1000
  if (tmp___18 != 0L) {
#line 1001
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1001
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1001
    printk("<3>%s %s: drbd_send_block/ack() failed\n", tmp___17, tmp___16);
  } else {

  }
#line 1002
  return (ok);
}
}
#line 1005 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;

  {
#line 1007
  __mptr = (struct drbd_work  const  *)w;
#line 1007
  e = (struct drbd_epoch_entry *)__mptr;
#line 1010
  ok = 1;
#line 1012
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1012
  if (tmp != 0L) {
#line 1013
    goto out;
  } else {

  }
#line 1015
  tmp___0 = __builtin_expect(((e->private_bio)->bi_flags & 1UL) == 0UL, 0L);
#line 1015
  if (tmp___0 != 0L) {
#line 1016
    goto out;
  } else {

  }
#line 1018
  tmp___1 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1018
  digest_size = (int )tmp___1;
#line 1020
  digest = kmalloc___0((size_t )digest_size, 16U);
#line 1021
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1022
    drbd_csum(mdev, mdev->verify_tfm, e->private_bio, digest);
#line 1023
    inc_rs_pending(mdev);
#line 1024
    ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                 P_OV_REPLY);
#line 1026
    if (ok == 0) {
#line 1027
      atomic_dec(& mdev->rs_pending_cnt);
#line 1027
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1027
      if (tmp___5 < 0) {
#line 1027
        tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1027
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1027
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1027
        printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
               "w_e_end_ov_req", 1027, tmp___2);
      } else {

      }
    } else {

    }
#line 1028
    kfree((void const   *)digest);
  } else {

  }
  out: 
#line 1032
  drbd_free_ee(mdev, e);
#line 1034
  atomic_dec(& mdev->unacked_cnt);
#line 1034
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1034
  if (tmp___9 < 0) {
#line 1034
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1034
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1034
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1034
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___8, tmp___7, "w_e_end_ov_req",
           1034, tmp___6);
  } else {

  }
#line 1036
  return (ok);
}
}
#line 1039 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1041
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1042
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1044
    mdev->ov_last_oos_start = sector;
#line 1045
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1047
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1047U);
#line 1048
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 1049
  return;
}
}
#line 1051 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  unsigned int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;

  {
#line 1053
  __mptr = (struct drbd_work  const  *)w;
#line 1053
  e = (struct drbd_epoch_entry *)__mptr;
#line 1057
  eq = 0;
#line 1059
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 1059
  if (tmp___3 != 0L) {
#line 1060
    drbd_free_ee(mdev, e);
#line 1061
    atomic_dec(& mdev->unacked_cnt);
#line 1061
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1061
    if (tmp___2 < 0) {
#line 1061
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1061
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1061
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1061
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_ov_reply",
             1061, tmp);
    } else {

    }
#line 1062
    return (1);
  } else {

  }
#line 1067
  drbd_rs_complete_io(mdev, e->sector);
#line 1069
  di = (struct digest_info *)e->block_id;
#line 1071
  tmp___11 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 1071
  if (tmp___11 != 0L) {
#line 1072
    tmp___4 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1072
    digest_size = (int )tmp___4;
#line 1073
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 1074
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1075
      drbd_csum(mdev, mdev->verify_tfm, e->private_bio, digest);
#line 1077
      if (di->digest_size != digest_size) {
#line 1077
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1077
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1077
        printk("<3>%s %s: ASSERT( digest_size == di->digest_size ) in %s:%d\n", tmp___6,
               tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
               1077);
      } else {

      }
#line 1078
      tmp___7 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1078
      eq = tmp___7 == 0;
#line 1079
      kfree((void const   *)digest);
    } else {

    }
  } else {
#line 1082
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1083
    tmp___10 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_ov_reply");
#line 1083
    if (tmp___10 != 0) {
#line 1084
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1084
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1084
      printk("<3>%s %s: Sending NegDReply. I guess it gets messy.\n", tmp___9, tmp___8);
    } else {

    }
  }
#line 1087
  atomic_dec(& mdev->unacked_cnt);
#line 1087
  tmp___15 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1087
  if (tmp___15 < 0) {
#line 1087
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1087
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1087
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1087
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___14, tmp___13, "w_e_end_ov_reply",
           1087, tmp___12);
  } else {

  }
#line 1089
  kfree((void const   *)di);
#line 1091
  if (eq == 0) {
#line 1092
    drbd_ov_oos_found(mdev, e->sector, (int )e->size);
  } else {
#line 1094
    ov_oos_print(mdev);
  }
#line 1096
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, e->sector, (int )e->size, eq != 0 ? 4711ULL : 4712ULL);
#line 1099
  drbd_free_ee(mdev, e);
#line 1101
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1101
  if (mdev->ov_left == 0UL) {
#line 1102
    ov_oos_print(mdev);
#line 1103
    drbd_resync_finished(mdev);
  } else {

  }
#line 1106
  return (ok);
}
}
#line 1109 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1111
  __mptr = (struct drbd_work  const  *)w;
#line 1111
  b = (struct drbd_wq_barrier *)__mptr;
#line 1112
  complete(& b->done);
#line 1113
  return (1);
}
}
#line 1116 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1118
  __mptr = (struct drbd_work  const  *)w;
#line 1118
  b = (struct drbd_tl_epoch *)__mptr;
#line 1119
  p = & mdev->data.sbuf.barrier;
#line 1120
  ok = 1;
#line 1127
  spin_lock_irq(& mdev->req_lock);
#line 1128
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_33380.conn <= 9) {
#line 1129
    cancel = 1;
  } else {

  }
#line 1130
  spin_unlock_irq(& mdev->req_lock);
#line 1131
  if (cancel != 0) {
#line 1132
    return (1);
  } else {

  }
#line 1134
  tmp = drbd_get_data_sock(mdev);
#line 1134
  if (tmp == 0) {
#line 1135
    return (0);
  } else {

  }
#line 1136
  p->barrier = b->br_number;
#line 1140
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header *)p, 16UL,
                      0U);
#line 1142
  drbd_put_data_sock(mdev);
#line 1144
  return (ok);
}
}
#line 1147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1149
  if (cancel != 0) {
#line 1150
    return (1);
  } else {

  }
#line 1151
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1151
  return (tmp);
}
}
#line 1160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1162
  __mptr = (struct drbd_work  const  *)w;
#line 1162
  req = (struct drbd_request *)__mptr;
#line 1165
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1165
  if (tmp != 0L) {
#line 1166
    req_mod(req, send_canceled);
#line 1167
    return (1);
  } else {

  }
#line 1170
  ok = drbd_send_dblock(mdev, req);
#line 1171
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1173
  return (ok);
}
}
#line 1182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1184
  __mptr = (struct drbd_work  const  *)w;
#line 1184
  req = (struct drbd_request *)__mptr;
#line 1187
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1187
  if (tmp != 0L) {
#line 1188
    req_mod(req, send_canceled);
#line 1189
    return (1);
  } else {

  }
#line 1192
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1195
  if (ok == 0) {
#line 1198
    if ((int )mdev->state.ldv_33380.conn > 9) {
#line 1199
      val.i = 0U;
#line 1199
      val.ldv_33380.conn = 5U;
#line 1199
      mask.i = 0U;
#line 1199
      mask.ldv_33380.conn = 31U;
#line 1199
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1201
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1203
  return (ok);
}
}
#line 1206 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1208
  odev = mdev;
  ldv_43030: ;
#line 1211
  if (odev->sync_conf.after == -1) {
#line 1212
    return (1);
  } else {

  }
#line 1213
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1214
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1214
  if (_b != 0) {
#line 1214
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1214
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1214
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_may_sync_now", (char *)"!odev",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1214);
  } else {

  }
#line 1214
  if (_b != 0) {
#line 1214
    return (1);
  } else {

  }
#line 1215
  if (((((int )odev->state.ldv_33380.conn > 15 && (int )odev->state.ldv_33380.conn <= 21) || (unsigned int )*((unsigned char *)odev + 1806UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1806UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1806UL) != 0U) {
#line 1219
    return (0);
  } else {

  }
#line 1220
  goto ldv_43030;
}
}
#line 1229 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1232
  rv = 0;
#line 1234
  i = 0;
#line 1234
  goto ldv_43041;
  ldv_43040: 
#line 1235
  odev = minor_to_mdev((unsigned int )i);
#line 1236
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1237
    goto ldv_43037;
  } else {

  }
#line 1238
  if ((unsigned int )*((unsigned short *)odev + 902UL) == 0U && (unsigned int )*((unsigned char *)odev + 1805UL) == 0U) {
#line 1239
    goto ldv_43037;
  } else {

  }
#line 1240
  tmp___0 = _drbd_may_sync_now(odev);
#line 1240
  if (tmp___0 == 0) {
#line 1241
    __ns.i = odev->state.i;
#line 1241
    __ns.ldv_33380.aftr_isp = 1U;
#line 1241
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1241
    rv = (tmp != 2) | rv;
  } else {

  }
  ldv_43037: 
#line 1234
  i = i + 1;
  ldv_43041: ;
#line 1234
  if ((unsigned int )i < minor_count) {
#line 1235
    goto ldv_43040;
  } else {

  }

#line 1245
  return (rv);
}
}
#line 1254 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1257
  rv = 0;
#line 1259
  i = 0;
#line 1259
  goto ldv_43053;
  ldv_43052: 
#line 1260
  odev = minor_to_mdev((unsigned int )i);
#line 1261
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1262
    goto ldv_43049;
  } else {

  }
#line 1263
  if ((unsigned int )*((unsigned short *)odev + 902UL) == 0U && (unsigned int )*((unsigned char *)odev + 1805UL) == 0U) {
#line 1264
    goto ldv_43049;
  } else {

  }
#line 1265
  if ((unsigned int )*((unsigned char *)odev + 1806UL) != 0U) {
#line 1266
    tmp___0 = _drbd_may_sync_now(odev);
#line 1266
    if (tmp___0 != 0) {
#line 1267
      __ns.i = odev->state.i;
#line 1267
      __ns.ldv_33380.aftr_isp = 0U;
#line 1267
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1267
      rv = (tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_43049: 
#line 1259
  i = i + 1;
  ldv_43053: ;
#line 1259
  if ((unsigned int )i < minor_count) {
#line 1260
    goto ldv_43052;
  } else {

  }

#line 1272
  return (rv);
}
}
#line 1275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1277
  _raw_write_lock_irq(& global_state_lock);
#line 1278
  _drbd_resume_next(mdev);
#line 1279
  _raw_write_unlock_irq(& global_state_lock);
#line 1280
  return;
}
}
#line 1282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1284
  _raw_write_lock_irq(& global_state_lock);
#line 1285
  _drbd_pause_after(mdev);
#line 1286
  _raw_write_unlock_irq(& global_state_lock);
#line 1287
  return;
}
}
#line 1289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1293
  if (o_minor == -1) {
#line 1294
    return (101);
  } else {

  }
#line 1295
  if (o_minor < -1) {
#line 1296
    return (132);
  } else {
#line 1295
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1295
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1296
      return (132);
    } else {

    }
  }
#line 1299
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_43066: ;
#line 1301
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1302
    return (133);
  } else {

  }
#line 1305
  if (odev->sync_conf.after == -1) {
#line 1306
    return (101);
  } else {

  }
#line 1309
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1310
  goto ldv_43066;
}
}
#line 1313 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1318
  _raw_write_lock_irq(& global_state_lock);
#line 1319
  retcode = sync_after_error(mdev, na);
#line 1320
  if (retcode == 101) {
#line 1321
    mdev->sync_conf.after = na;
    ldv_43073: 
#line 1323
    changes = _drbd_pause_after(mdev);
#line 1324
    tmp = _drbd_resume_next(mdev);
#line 1324
    changes = tmp | changes;
#line 1325
    if (changes != 0) {
#line 1326
      goto ldv_43073;
    } else {

    }

  } else {

  }
#line 1327
  _raw_write_unlock_irq(& global_state_lock);
#line 1328
  return (retcode);
}
}
#line 1331 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1333
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 1334
  request_ping(mdev);
#line 1335
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1335
  if (tmp != 0 || (int )mdev->state.ldv_33380.conn <= 9) {
#line 1335
    goto ldv_43078;
  } else {

  }
#line 1335
  tmp___0 = get_current();
#line 1335
  __wait.flags = 0U;
#line 1335
  __wait.private = (void *)tmp___0;
#line 1335
  __wait.func = & autoremove_wake_function;
#line 1335
  __wait.task_list.next = & __wait.task_list;
#line 1335
  __wait.task_list.prev = & __wait.task_list;
  ldv_43081: 
#line 1335
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1335
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1335
  if (tmp___1 != 0 || (int )mdev->state.ldv_33380.conn <= 9) {
#line 1335
    goto ldv_43080;
  } else {

  }
#line 1335
  schedule();
#line 1335
  goto ldv_43081;
  ldv_43080: 
#line 1335
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43078: ;
#line 1338
  return;
}
}
#line 1347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___3 ;
  u64 uuid ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 1352
  if ((int )mdev->state.ldv_33380.conn > 15) {
#line 1353
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1353
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1353
    printk("<3>%s %s: Resync already running!\n", tmp___0, tmp);
#line 1354
    return;
  } else {

  }
#line 1358
  drbd_rs_cancel_all(mdev);
#line 1360
  if ((unsigned int )side == 17U) {
#line 1364
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1365
    r = (r >> 8) & 255;
#line 1366
    if (r > 0) {
#line 1367
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1367
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1367
      printk("<6>%s %s: before-resync-target handler returned %d, dropping connection.\n",
             tmp___2, tmp___1, r);
#line 1369
      val.i = 0U;
#line 1369
      val.ldv_33380.conn = 1U;
#line 1369
      mask.i = 0U;
#line 1369
      mask.ldv_33380.conn = 31U;
#line 1369
      drbd_force_state(mdev, mask, val);
#line 1370
      return;
    } else {

    }
  } else {

  }
#line 1374
  drbd_state_lock(mdev);
#line 1376
  tmp___3 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1376
  if (tmp___3 == 0) {
#line 1377
    drbd_state_unlock(mdev);
#line 1378
    return;
  } else {

  }
#line 1381
  if ((unsigned int )side == 17U) {
#line 1382
    mdev->bm_resync_fo = 0UL;
  } else {
#line 1386
    get_random_bytes((void *)(& uuid), 8);
#line 1387
    drbd_uuid_set(mdev, 1, uuid);
#line 1388
    drbd_send_sync_uuid(mdev, uuid);
#line 1390
    if ((unsigned int )*((unsigned char *)mdev + 1805UL) != 16U) {
#line 1390
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1390
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1390
      printk("<3>%s %s: ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n", tmp___5,
             tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
             1390);
    } else {

    }
  }
#line 1393
  _raw_write_lock_irq(& global_state_lock);
#line 1394
  ns = mdev->state;
#line 1396
  tmp___6 = _drbd_may_sync_now(mdev);
#line 1396
  ns.ldv_33380.aftr_isp = tmp___6 == 0;
#line 1398
  ns.ldv_33380.conn = (unsigned char )side;
#line 1400
  if ((unsigned int )side == 17U) {
#line 1401
    ns.ldv_33380.disk = 4U;
  } else {
#line 1403
    ns.ldv_33380.pdsk = 4U;
  }
#line 1405
  r = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1406
  ns = mdev->state;
#line 1408
  if ((int )ns.ldv_33380.conn <= 9) {
#line 1409
    r = 0;
  } else {

  }
#line 1411
  if (r == 1) {
#line 1412
    tmp___7 = drbd_bm_total_weight(mdev);
#line 1412
    mdev->rs_mark_left = tmp___7;
#line 1412
    mdev->rs_total = tmp___7;
#line 1414
    mdev->rs_failed = 0UL;
#line 1415
    mdev->rs_paused = 0UL;
#line 1416
    tmp___8 = jiffies;
#line 1416
    mdev->rs_mark_time = tmp___8;
#line 1416
    mdev->rs_start = tmp___8;
#line 1418
    mdev->rs_same_csum = 0UL;
#line 1419
    _drbd_pause_after(mdev);
  } else {

  }
#line 1421
  _raw_write_unlock_irq(& global_state_lock);
#line 1422
  put_ldev(mdev);
#line 1424
  if (r == 1) {
#line 1425
    tmp___9 = drbd_conn_str((enum drbd_conns )ns.ldv_33380.conn);
#line 1425
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1425
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1425
    printk("<6>%s %s: Began resync as %s (will sync %lu KB [%lu bits set]).\n", tmp___11,
           tmp___10, tmp___9, mdev->rs_total << 2, mdev->rs_total);
#line 1430
    if (mdev->rs_total == 0UL) {
#line 1432
      ping_peer(mdev);
#line 1433
      drbd_resync_finished(mdev);
    } else {

    }
#line 1440
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1441
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1443
    drbd_md_sync(mdev);
  } else {

  }
#line 1445
  drbd_state_unlock(mdev);
#line 1446
  return;
}
}
#line 1448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  struct task_struct *tmp___4 ;
  int _b ;
  enum drbd_thread_state tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  int _b___0 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___12 ;
  enum drbd_thread_state tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;

  {
#line 1450
  mdev = thi->mdev;
#line 1451
  w = 0;
#line 1452
  work_list.next = & work_list;
#line 1452
  work_list.prev = & work_list;
#line 1453
  intr = 0;
#line 1455
  tmp = mdev_to_minor(mdev);
#line 1455
  tmp___0 = get_current();
#line 1455
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1457
  goto ldv_43104;
  ldv_43114: 
#line 1458
  drbd_thread_current_set_cpu(mdev);
#line 1460
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1460
  if (tmp___1 != 0) {
#line 1461
    ldv_mutex_lock_30(& mdev->data.mutex);
#line 1462
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1463
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1464
    ldv_mutex_unlock_31(& mdev->data.mutex);
#line 1466
    intr = down_interruptible(& mdev->data.work.s);
#line 1468
    ldv_mutex_lock_32(& mdev->data.mutex);
#line 1469
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1470
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1471
    ldv_mutex_unlock_33(& mdev->data.mutex);
  } else {

  }
#line 1474
  if (intr != 0) {
#line 1475
    if (intr != -4) {
#line 1475
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1475
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1475
      printk("<3>%s %s: ASSERT( intr == -EINTR ) in %s:%d\n", tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
             1475);
    } else {

    }
#line 1476
    tmp___4 = get_current();
#line 1476
    flush_signals(tmp___4);
#line 1477
    tmp___5 = get_t_state(thi);
#line 1477
    _b = (unsigned int )tmp___5 == 1U;
#line 1477
    if (_b != 0) {
#line 1477
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1477
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1477
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___7, tmp___6, "drbd_worker", (char *)"get_t_state(thi) == Running",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
             1477);
    } else {

    }
#line 1477
    if (_b != 0) {
#line 1478
      goto ldv_43104;
    } else {

    }
#line 1479
    goto ldv_43105;
  } else {

  }
#line 1482
  tmp___8 = get_t_state(thi);
#line 1482
  if ((unsigned int )tmp___8 != 1U) {
#line 1483
    goto ldv_43105;
  } else {

  }
#line 1488
  w = 0;
#line 1489
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1490
  tmp___9 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1490
  _b___0 = tmp___9 != 0;
#line 1490
  if (_b___0 != 0) {
#line 1490
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1490
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1490
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___11, tmp___10, "drbd_worker", (char *)"list_empty(&mdev->data.work.q)",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1490);
  } else {

  }
#line 1490
  if (_b___0 != 0) {
#line 1502
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1503
    goto ldv_43104;
  } else {

  }
#line 1505
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1505
  w = (struct drbd_work *)__mptr;
#line 1506
  list_del_init(& w->list);
#line 1507
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1509
  tmp___12 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_33380.conn <= 9);
#line 1509
  if (tmp___12 == 0) {
#line 1511
    if ((int )mdev->state.ldv_33380.conn > 9) {
#line 1513
      val.i = 0U;
#line 1513
      val.ldv_33380.conn = 5U;
#line 1513
      mask.i = 0U;
#line 1513
      mask.ldv_33380.conn = 31U;
#line 1513
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_43104: 
#line 1457
  tmp___13 = get_t_state(thi);
#line 1457
  if ((unsigned int )tmp___13 == 1U) {
#line 1458
    goto ldv_43114;
  } else {

  }
  ldv_43105: 
#line 1516
  tmp___16 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1516
  if (tmp___16 == 0) {
#line 1516
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1516
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1516
    printk("<3>%s %s: ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
           tmp___15, tmp___14, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1516);
  } else {

  }
#line 1517
  tmp___19 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1517
  if (tmp___19 == 0) {
#line 1517
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1517
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1517
    printk("<3>%s %s: ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
           tmp___18, tmp___17, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1517);
  } else {

  }
#line 1519
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1520
  i = 0;
#line 1521
  goto ldv_43121;
  ldv_43120: 
#line 1522
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1523
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1525
  goto ldv_43118;
  ldv_43117: 
#line 1526
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1526
  w = (struct drbd_work *)__mptr___0;
#line 1527
  list_del_init(& w->list);
#line 1528
  (*(w->cb))(mdev, w, 1);
#line 1529
  i = i + 1;
  ldv_43118: 
#line 1525
  tmp___20 = list_empty((struct list_head  const  *)(& work_list));
#line 1525
  if (tmp___20 == 0) {
#line 1526
    goto ldv_43117;
  } else {

  }
#line 1532
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_43121: 
#line 1521
  tmp___21 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1521
  if (tmp___21 == 0) {
#line 1522
    goto ldv_43120;
  } else {

  }
#line 1534
  sema_init(& mdev->data.work.s, 0);
#line 1540
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1542
  if ((unsigned int )*((unsigned char *)mdev + 1805UL) != 0U || (unsigned int )*((unsigned short *)mdev + 902UL) != 0U) {
#line 1542
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1542
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1542
    printk("<3>%s %s: ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
           tmp___23, tmp___22, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
           1542);
  } else {

  }
#line 1545
  drbd_thread_stop(& mdev->receiver);
#line 1546
  drbd_mdev_cleanup(mdev);
#line 1548
  tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1548
  tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1548
  printk("<6>%s %s: worker terminated\n", tmp___25, tmp___24);
#line 1550
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1551
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1552
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1554
  return (0);
}
}
#line 1557 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_23(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1562
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1564
  mutex_lock(ldv_func_arg1);
#line 1565
  return;
}
}
#line 1567 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_24(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1572
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1574
  mutex_unlock(ldv_func_arg1);
#line 1575
  return;
}
}
#line 1577 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_25(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1582
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1584
  mutex_unlock(ldv_func_arg1);
#line 1585
  return;
}
}
#line 1587 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_26(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1592
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1594
  mutex_lock(ldv_func_arg1);
#line 1595
  return;
}
}
#line 1597 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_27(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1602
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1604
  mutex_unlock(ldv_func_arg1);
#line 1605
  return;
}
}
#line 1607 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_28(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1612
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1614
  mutex_lock(ldv_func_arg1);
#line 1615
  return;
}
}
#line 1617 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_29(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1622
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1624
  mutex_unlock(ldv_func_arg1);
#line 1625
  return;
}
}
#line 1627 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_30(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1632
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1634
  mutex_lock(ldv_func_arg1);
#line 1635
  return;
}
}
#line 1637 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_31(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1642
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1644
  mutex_unlock(ldv_func_arg1);
#line 1645
  return;
}
}
#line 1647 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_32(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1652
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1654
  mutex_lock(ldv_func_arg1);
#line 1655
  return;
}
}
#line 1657 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_33(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1662
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1664
  mutex_unlock(ldv_func_arg1);
#line 1665
  return;
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
void __builtin_prefetch(void const   *  , ...) ;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 151 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 153
  __list_del(list->prev, list->next);
#line 154
  list_add(list, head);
#line 155
  return;
}
}
#line 565 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 567
  h->next = 0;
#line 568
  h->pprev = 0;
#line 569
  return;
}
}
#line 571 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 573
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 576 "include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 578
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
#line 581 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 583
  next = n->next;
#line 584
  pprev = n->pprev;
#line 585
  *pprev = next;
#line 586
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 587
    next->pprev = pprev;
  } else {

  }
#line 588
  return;
}
}
#line 597 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 599
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 599
  if (tmp == 0) {
#line 600
    __hlist_del(n);
#line 601
    INIT_HLIST_NODE(n);
  } else {

  }
#line 603
  return;
}
}
#line 605 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 607
  first = h->first;
#line 608
  n->next = first;
#line 609
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 610
    first->pprev = & n->next;
  } else {

  }
#line 611
  h->first = n;
#line 612
  n->pprev = & h->first;
#line 613
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 155 "include/linux/mutex.h"
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_47(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_49(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_50(struct mutex *ldv_func_arg1 ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
extern int mutex_lock_interruptible(struct mutex * ) ;
#line 8
int ldv_mutex_lock_interruptible_48(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_45(struct mutex *ldv_func_arg1 ) ;
#line 32
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 218
  switch (8UL) {
  case 1UL: 
#line 218
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5810;
  case 2UL: 
#line 218
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5810;
  case 4UL: 
#line 218
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5810;
  case 8UL: 
#line 218
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5810;
  default: 
#line 218
  __bad_percpu_size();
  }
  ldv_5810: 
#line 218
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 220
  return (ti);
}
}
#line 85 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 87
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 87
  return (tmp);
}
}
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 282 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 284
  _raw_spin_lock(& lock->ldv_5575.rlock);
#line 285
  return;
}
}
#line 322 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 324
  _raw_spin_unlock(& lock->ldv_5575.rlock);
#line 325
  return;
}
}
#line 230 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 329 "include/linux/gfp.h"
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 74 "include/linux/random.h"
extern u32 random32(void) ;
#line 231 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 233
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 235
extern void sock_release(struct socket * ) ;
#line 238
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___1(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13490: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13490;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___1(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___1(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___1(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 334 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17260: ;
#line 63
    goto ldv_17260;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17261: ;
#line 65
    goto ldv_17261;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17262: ;
#line 66
    goto ldv_17262;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 2286 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2288
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2288
  return (tmp);
}
}
#line 2312 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2314
  tmp = test_tsk_thread_flag(p, 2);
#line 2314
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2314
  return ((int )tmp___0);
}
}
#line 282 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) ;
#line 486 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 489 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 491
  return;
}
}
#line 519 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 521
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1110 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1112
  return ((struct crypto_hash *)tfm);
}
}
#line 1122 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1125
  type = type & 4294967280U;
#line 1126
  mask = mask & 4294967280U;
#line 1127
  type = type | 8U;
#line 1128
  mask = mask | 14U;
#line 1130
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1130
  tmp___0 = __crypto_hash_cast(tmp);
#line 1130
  return (tmp___0);
}
}
#line 1138 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1140
  tmp = crypto_hash_tfm(tfm);
#line 1140
  crypto_free_tfm(tmp);
#line 1141
  return;
}
}
#line 1205 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(desc->tfm);
#line 1209
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1209
  return (tmp___0);
}
}
#line 1212 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1215
  tmp = crypto_hash_crt(hash);
#line 1215
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1215
  return (tmp___0);
}
}
#line 375 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 377
  disk->part0.nr_sects = size;
#line 378
  return;
}
}
#line 58 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 60
  __might_sleep("include/linux/highmem.h", 60, 0);
#line 61
  tmp = lowmem_page_address(page);
#line 61
  return (tmp);
}
}
#line 64 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 66
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 224 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[38U] ;

  {
#line 229
  cmdnames[0] = "Data";
#line 229
  cmdnames[1] = "DataReply";
#line 229
  cmdnames[2] = "RSDataReply";
#line 229
  cmdnames[3] = "Barrier";
#line 229
  cmdnames[4] = "ReportBitMap";
#line 229
  cmdnames[5] = "BecomeSyncTarget";
#line 229
  cmdnames[6] = "BecomeSyncSource";
#line 229
  cmdnames[7] = "UnplugRemote";
#line 229
  cmdnames[8] = "DataRequest";
#line 229
  cmdnames[9] = "RSDataRequest";
#line 229
  cmdnames[10] = "SyncParam";
#line 229
  cmdnames[11] = "ReportProtocol";
#line 229
  cmdnames[12] = "ReportUUIDs";
#line 229
  cmdnames[13] = "ReportSizes";
#line 229
  cmdnames[14] = "ReportState";
#line 229
  cmdnames[15] = "ReportSyncUUID";
#line 229
  cmdnames[16] = "AuthChallenge";
#line 229
  cmdnames[17] = "AuthResponse";
#line 229
  cmdnames[18] = "StateChgRequest";
#line 229
  cmdnames[19] = "Ping";
#line 229
  cmdnames[20] = "PingAck";
#line 229
  cmdnames[21] = "RecvAck";
#line 229
  cmdnames[22] = "WriteAck";
#line 229
  cmdnames[23] = "RSWriteAck";
#line 229
  cmdnames[24] = "DiscardAck";
#line 229
  cmdnames[25] = "NegAck";
#line 229
  cmdnames[26] = "NegDReply";
#line 229
  cmdnames[27] = "NegRSDReply";
#line 229
  cmdnames[28] = "BarrierAck";
#line 229
  cmdnames[29] = "StateChgReply";
#line 229
  cmdnames[30] = "OVRequest";
#line 229
  cmdnames[31] = "OVReply";
#line 229
  cmdnames[32] = "OVResult";
#line 229
  cmdnames[33] = "CsumRSRequest";
#line 229
  cmdnames[34] = "CsumRSIsInSync";
#line 229
  cmdnames[35] = "SyncParam89";
#line 229
  cmdnames[36] = "CBitmap";
#line 229
  cmdnames[37] = 0;
#line 270
  if ((unsigned int )cmd == 65521U) {
#line 271
    return ("HandShakeM");
  } else {

  }
#line 272
  if ((unsigned int )cmd == 65522U) {
#line 273
    return ("HandShakeS");
  } else {

  }
#line 274
  if ((unsigned int )cmd == 65534U) {
#line 275
    return ("HandShake");
  } else {

  }
#line 276
  if ((unsigned int )cmd > 36U) {
#line 277
    return ("Unknown");
  } else {

  }
#line 278
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 299
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 312
  c->word_offset = c->bit_offset >> 6;
#line 313
  return;
}
}
#line 543 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 545
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 556 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 558
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 568 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 570
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1085
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) ;
#line 1089
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) ;
#line 1095
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1105
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1107
void tl_clear(struct drbd_conf *mdev ) ;
#line 1109
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1112
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1113
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1116
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply ) ;
#line 1118
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1127
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1129
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1130
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1134
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1136
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) ;
#line 1153
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1155
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) ;
#line 1176
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1177
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1178
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) ;
#line 1359
mempool_t *drbd_ee_mempool ;
#line 1361
struct page *drbd_pp_pool ;
#line 1362
spinlock_t drbd_pp_lock ;
#line 1363
int drbd_pp_vacant ;
#line 1364
wait_queue_head_t drbd_pp_wait ;
#line 1384
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1386
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , int force ) ;
#line 1387
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1388
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) ;
#line 1389
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) ;
#line 1391
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1441
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1448
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1450
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1454
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1484 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1486
  val = 1;
#line 1487
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1489
  return;
}
}
#line 1491 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1493
  val = 1;
#line 1494
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1496
  return;
}
}
#line 1507
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1510
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1536
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1631 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  int tmp ;

  {
#line 1635
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1635
  return (tmp);
}
}
#line 1689 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1691
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1694
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1697
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1732 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1735
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1739
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1739
  if (tmp___1 != 0UL) {
#line 1739
    __min1 = 34359738368UL;
#line 1739
    tmp___0 = drbd_md_first_sector(bdev);
#line 1739
    __min2 = tmp___0;
#line 1739
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1739
    s = 0UL;
  }
#line 1742
  goto ldv_42598;
  case -2: 
#line 1744
  __min1___0 = 34359738368UL;
#line 1744
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1744
  __min2___0 = tmp___2;
#line 1744
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1747
  __min1___1 = s;
#line 1747
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1747
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1750
  goto ldv_42598;
  default: 
#line 1752
  __min1___2 = 8587575296UL;
#line 1752
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1752
  __min2___2 = tmp___3;
#line 1752
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_42598: ;
#line 1755
  return (s);
}
}
#line 1796 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1799
  tmp = spinlock_check(& q->q_lock);
#line 1799
  flags = _raw_spin_lock_irqsave(tmp);
#line 1800
  list_add(& w->list, & q->q);
#line 1801
  up(& q->s);
#line 1803
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1804
  return;
}
}
#line 1836 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1839
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 1839
  return (tmp);
}
}
#line 1842 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1845
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 1845
  return (tmp);
}
}
#line 1927 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 1929
  atomic_inc(& mdev->unacked_cnt);
#line 1930
  return;
}
}
#line 1943 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1945
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 1945
  if (tmp != 0) {
#line 1946
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 1947
  return;
}
}
#line 1955 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 1959
  atomic_inc(& mdev->net_cnt);
#line 1960
  have_net_conf = (int )mdev->state.ldv_33380.conn > 1;
#line 1961
  if (have_net_conf == 0) {
#line 1962
    put_net_conf(mdev);
  } else {

  }
#line 1963
  return (have_net_conf);
}
}
#line 2184 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 2186
  mdev->ed_uuid = val;
#line 2187
  return;
}
}
#line 2189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2196
  return ((int )a - (int )b);
}
}
#line 2205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2208
  spin_lock(& mdev->peer_seq_lock);
#line 2209
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2209
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2210
  mdev->peer_seq = m;
#line 2211
  spin_unlock(& mdev->peer_seq_lock);
#line 2212
  if (m == new_seq) {
#line 2213
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2214
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_bio_has_active_page___0(struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 26
  bvec = bio->bi_io_vec;
#line 26
  i = 0;
#line 26
  goto ldv_42807;
  ldv_42806: 
#line 27
  tmp = page_count(bvec->bv_page);
#line 27
  if (tmp > 1) {
#line 28
    return (1);
  } else {

  }
#line 26
  bvec = bvec + 1;
#line 26
  i = i + 1;
  ldv_42807: ;
#line 26
  if ((int )bio->bi_vcnt > i) {
#line 27
    goto ldv_42806;
  } else {

  }

#line 31
  return (0);
}
}
#line 80 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 82
  tmp = crypto_tfm_alg_type(tfm);
#line 82
  return ((tmp & 14U) == 8U);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 207
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 207
  if (tmp != 0L) {
#line 207
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (207), "i" (12UL));
    ldv_42870: ;
#line 207
    goto ldv_42870;
  } else {

  }
#line 208
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 216
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 216
  if (tmp != 0L) {
#line 216
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (216), "i" (12UL));
    ldv_42875: ;
#line 216
    goto ldv_42875;
  } else {

  }
#line 217
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 224
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 230 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct hlist_node  const  *__mptr ;

  {
#line 233
  tmp = ar_hash_slot(mdev, sector);
#line 233
  slot = tmp;
#line 237
  n = slot->first;
#line 237
  goto ldv_42893;
  ldv_42892: ;
#line 238
  if ((unsigned long )req == (unsigned long )id) {
#line 239
    if (req->sector != sector) {
#line 239
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 239
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 239
      printk("<3>%s %s: ASSERT( req->sector == sector ) in %s:%d\n", tmp___1, tmp___0,
             (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
             239);
    } else {

    }
#line 240
    return (req);
  } else {

  }
#line 237
  n = n->next;
  ldv_42893: ;
#line 237
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 237
    __builtin_prefetch((void const   *)n->next);
#line 237
    if (1 != 0) {
#line 237
      __mptr = (struct hlist_node  const  *)n;
#line 237
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 237
      if (1 != 0) {
#line 238
        goto ldv_42892;
      } else {
#line 240
        goto ldv_42894;
      }
    } else {
#line 240
      goto ldv_42894;
    }
  } else {

  }
  ldv_42894: ;
#line 243
  return (0);
}
}
#line 279 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 281
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_42940: ;
#line 162
  goto ldv_42940;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 105
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 107
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 108
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch *previous_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  struct drbd_epoch *prev ;
  struct list_head  const  *__mptr ;

  {
#line 113
  spin_lock(& mdev->epoch_lock);
#line 114
  __mptr = (struct list_head  const  *)epoch->list.prev;
#line 114
  prev = (struct drbd_epoch *)__mptr;
#line 115
  if ((unsigned long )prev == (unsigned long )epoch || (unsigned long )mdev->current_epoch == (unsigned long )prev) {
#line 116
    prev = 0;
  } else {

  }
#line 117
  spin_unlock(& mdev->epoch_lock);
#line 118
  return (prev);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_page_or_try_alloc(struct drbd_conf *mdev ) 
{ 
  struct page *page ;

  {
#line 125
  page = 0;
#line 129
  if (drbd_pp_vacant > 0) {
#line 130
    spin_lock(& drbd_pp_lock);
#line 131
    page = drbd_pp_pool;
#line 132
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 133
      drbd_pp_pool = (struct page *)page->ldv_12090.ldv_12087.private;
#line 134
      page->ldv_12090.ldv_12087.private = 0UL;
#line 135
      drbd_pp_vacant = drbd_pp_vacant - 1;
    } else {

    }
#line 137
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 142
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 143
    page = alloc_pages(514U, 0U);
  } else {

  }
#line 144
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 145
    atomic_inc(& mdev->pp_in_use);
  } else {

  }
#line 146
  return (page);
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void maybe_kick_lo(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 154
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 154
  if (tmp >= (mdev->net_conf)->unplug_watermark) {
#line 155
    drbd_kick_lo(mdev);
  } else {

  }
#line 156
  return;
}
}
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 168
  le = mdev->net_ee.next;
#line 168
  tle = le->next;
#line 168
  goto ldv_43042;
  ldv_43041: 
#line 169
  __mptr = (struct list_head  const  *)le;
#line 169
  e = (struct drbd_epoch_entry *)__mptr;
#line 170
  tmp = drbd_bio_has_active_page___0(e->private_bio);
#line 170
  if (tmp != 0) {
#line 171
    goto ldv_43040;
  } else {

  }
#line 172
  list_move(le, to_be_freed);
#line 168
  le = tle;
#line 168
  tle = le->next;
  ldv_43042: ;
#line 168
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 169
    goto ldv_43041;
  } else {

  }
  ldv_43040: ;
#line 173
  return;
}
}
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 178
  reclaimed.next = & reclaimed;
#line 178
  reclaimed.prev = & reclaimed;
#line 181
  maybe_kick_lo(mdev);
#line 182
  spin_lock_irq(& mdev->req_lock);
#line 183
  reclaim_net_ee(mdev, & reclaimed);
#line 184
  spin_unlock_irq(& mdev->req_lock);
#line 186
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 186
  e = (struct drbd_epoch_entry *)__mptr;
#line 186
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 186
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 186
  goto ldv_43056;
  ldv_43055: 
#line 187
  drbd_free_ee(mdev, e);
#line 186
  e = t;
#line 186
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 186
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_43056: ;
#line 186
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 187
    goto ldv_43055;
  } else {

  }

#line 191
  return;
}
}
#line 199 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , int retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;

  {
#line 201
  page = 0;
#line 202
  tmp = get_current();
#line 202
  wait.flags = 0U;
#line 202
  wait.private = (void *)tmp;
#line 202
  wait.func = & autoremove_wake_function;
#line 202
  wait.task_list.next = & wait.task_list;
#line 202
  wait.task_list.prev = & wait.task_list;
#line 204
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 204
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 205
    page = drbd_pp_first_page_or_try_alloc(mdev);
#line 206
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 207
      return (page);
    } else {

    }
  } else {

  }
  ldv_43065: 
#line 211
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 213
  drbd_kick_lo_and_reclaim_net(mdev);
#line 215
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 215
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 216
    page = drbd_pp_first_page_or_try_alloc(mdev);
#line 217
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 218
      goto ldv_43064;
    } else {

    }
  } else {

  }
#line 221
  if (retry == 0) {
#line 222
    goto ldv_43064;
  } else {

  }
#line 224
  tmp___4 = get_current();
#line 224
  tmp___5 = signal_pending(tmp___4);
#line 224
  if (tmp___5 != 0) {
#line 225
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 225
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 225
    printk("<4>%s %s: drbd_pp_alloc interrupted!\n", tmp___3, tmp___2);
#line 226
    goto ldv_43064;
  } else {

  }
#line 229
  schedule();
#line 230
  goto ldv_43065;
  ldv_43064: 
#line 231
  finish_wait(& drbd_pp_wait, & wait);
#line 233
  return (page);
}
}
#line 238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page ) 
{ 
  int free_it ;

  {
#line 242
  spin_lock(& drbd_pp_lock);
#line 243
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 8UL) {
#line 244
    free_it = 1;
  } else {
#line 246
    page->ldv_12090.ldv_12087.private = (unsigned long )drbd_pp_pool;
#line 247
    drbd_pp_pool = page;
#line 248
    drbd_pp_vacant = drbd_pp_vacant + 1;
#line 249
    free_it = 0;
  }
#line 251
  spin_unlock(& drbd_pp_lock);
#line 253
  atomic_dec(& mdev->pp_in_use);
#line 255
  if (free_it != 0) {
#line 256
    __free_pages(page, 0U);
  } else {

  }
#line 258
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 259
  return;
}
}
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free_bio_pages(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct page *p_to_be_freed ;
  struct page *page ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 263
  p_to_be_freed = 0;
#line 268
  spin_lock(& drbd_pp_lock);
#line 269
  bvec = bio->bi_io_vec;
#line 269
  i = 0;
#line 269
  goto ldv_43080;
  ldv_43079: ;
#line 270
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 8UL) {
#line 271
    (bvec->bv_page)->ldv_12090.ldv_12087.private = (unsigned long )p_to_be_freed;
#line 272
    p_to_be_freed = bvec->bv_page;
  } else {
#line 274
    (bvec->bv_page)->ldv_12090.ldv_12087.private = (unsigned long )drbd_pp_pool;
#line 275
    drbd_pp_pool = bvec->bv_page;
#line 276
    drbd_pp_vacant = drbd_pp_vacant + 1;
  }
#line 269
  bvec = bvec + 1;
#line 269
  i = i + 1;
  ldv_43080: ;
#line 269
  if ((int )bio->bi_vcnt > i) {
#line 270
    goto ldv_43079;
  } else {

  }
#line 279
  spin_unlock(& drbd_pp_lock);
#line 280
  atomic_sub((int )bio->bi_vcnt, & mdev->pp_in_use);
#line 282
  goto ldv_43083;
  ldv_43082: 
#line 283
  page = p_to_be_freed;
#line 284
  p_to_be_freed = (struct page *)page->ldv_12090.ldv_12087.private;
#line 285
  page->ldv_12090.ldv_12087.private = 0UL;
#line 286
  put_page(page);
  ldv_43083: ;
#line 282
  if ((unsigned long )p_to_be_freed != (unsigned long )((struct page *)0)) {
#line 283
    goto ldv_43082;
  } else {

  }
#line 289
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 290
  return;
}
}
#line 307 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct request_queue *q ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  struct bio *bio ;
  unsigned int ds ;
  int tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  struct bvec_merge_data bvm ;
  int l ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int __min1 ;
  int __min2 ;
  int tmp___20 ;
  int __min1___0 ;
  int __min2___0 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;

  {
#line 319
  tmp = drbd_insert_fault(mdev, 8U);
#line 319
  if (tmp != 0) {
#line 320
    return (0);
  } else {

  }
#line 322
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 322
  e = (struct drbd_epoch_entry *)tmp___0;
#line 323
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 324
    if ((gfp_mask & 512U) == 0U) {
#line 325
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 325
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 325
      printk("<3>%s %s: alloc_ee: Allocation of an EE failed\n", tmp___2, tmp___1);
    } else {

    }
#line 326
    return (0);
  } else {

  }
#line 329
  bio = bio_alloc(gfp_mask & 4294967293U, (int )(data_size / 4096U + ((data_size & 4095U) != 0U ? 1U : 0U)));
#line 330
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 331
    if ((gfp_mask & 512U) == 0U) {
#line 332
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 332
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 332
      printk("<3>%s %s: alloc_ee: Allocation of a bio failed\n", tmp___4, tmp___3);
    } else {

    }
#line 333
    goto fail1;
  } else {

  }
#line 336
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 337
  bio->bi_sector = sector;
#line 339
  ds = data_size;
#line 340
  goto ldv_43108;
  ldv_43107: 
#line 341
  page = drbd_pp_alloc(mdev, (int )gfp_mask & 16);
#line 342
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 343
    if ((gfp_mask & 512U) == 0U) {
#line 344
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 344
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 344
      printk("<3>%s %s: alloc_ee: Allocation of a page failed\n", tmp___6, tmp___5);
    } else {

    }
#line 345
    goto fail2;
  } else {

  }
#line 347
  __min1 = (int )ds;
#line 347
  __min2 = 4096;
#line 347
  tmp___20 = bio_add_page(bio, page, (unsigned int )(__min1 < __min2 ? __min1 : __min2),
                          0U);
#line 347
  if (tmp___20 == 0) {
#line 348
    drbd_pp_free(mdev, page);
#line 349
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 349
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 349
    printk("<3>%s %s: alloc_ee: bio_add_page(s=%llu,data_size=%u,ds=%u) failed\n",
           tmp___8, tmp___7, (unsigned long long )sector, data_size, ds);
#line 353
    q = bdev_get_queue(bio->bi_bdev);
#line 354
    if ((unsigned long )q->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 355
      bvm.bi_bdev = bio->bi_bdev;
#line 355
      bvm.bi_sector = bio->bi_sector;
#line 355
      bvm.bi_size = bio->bi_size;
#line 355
      bvm.bi_rw = bio->bi_rw;
#line 361
      tmp___9 = (*(q->merge_bvec_fn))(q, & bvm, bio->bi_io_vec + (unsigned long )bio->bi_vcnt);
#line 361
      l = tmp___9;
#line 363
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 363
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 363
      printk("<3>%s %s: merge_bvec_fn() = %d\n", tmp___11, tmp___10, l);
    } else {

    }
#line 367
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 367
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 367
    printk("<3>%s %s: bio->bi_max_vecs = %d\n", tmp___13, tmp___12, bio->bi_max_vecs);
#line 368
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 368
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 368
    printk("<3>%s %s: bio->bi_vcnt = %d\n", tmp___15, tmp___14, (int )bio->bi_vcnt);
#line 369
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 369
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 369
    printk("<3>%s %s: bio->bi_size = %d\n", tmp___17, tmp___16, bio->bi_size);
#line 370
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 370
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 370
    printk("<3>%s %s: bio->bi_phys_segments = %d\n", tmp___19, tmp___18, bio->bi_phys_segments);
#line 372
    goto fail2;
  } else {

  }
#line 375
  __min1___0 = (int )ds;
#line 375
  __min2___0 = 4096;
#line 375
  ds = ds - (unsigned int )(__min1___0 < __min2___0 ? __min1___0 : __min2___0);
  ldv_43108: ;
#line 340
  if (ds != 0U) {
#line 341
    goto ldv_43107;
  } else {

  }

#line 378
  if (bio->bi_size != data_size) {
#line 378
    tmp___21 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 378
    tmp___22 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 378
    printk("<3>%s %s: ASSERT( data_size == bio->bi_size ) in %s:%d\n", tmp___22, tmp___21,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           378);
  } else {

  }
#line 380
  bio->bi_private = (void *)e;
#line 381
  e->mdev = mdev;
#line 382
  e->sector = sector;
#line 383
  e->size = bio->bi_size;
#line 385
  e->private_bio = bio;
#line 386
  e->block_id = id;
#line 387
  INIT_HLIST_NODE(& e->colision);
#line 388
  e->epoch = 0;
#line 389
  e->flags = 0U;
#line 391
  return (e);
  fail2: 
#line 394
  drbd_pp_free_bio_pages(mdev, bio);
#line 395
  bio_put(bio);
  fail1: 
#line 397
  mempool_free((void *)e, drbd_ee_mempool);
#line 399
  return (0);
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct bio *bio ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 404
  bio = e->private_bio;
#line 405
  drbd_pp_free_bio_pages(mdev, bio);
#line 406
  bio_put(bio);
#line 407
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 407
  if (tmp___1 == 0) {
#line 407
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 407
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 407
    printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           407);
  } else {

  }
#line 408
  mempool_free((void *)e, drbd_ee_mempool);
#line 409
  return;
}
}
#line 411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 413
  work_list.next = & work_list;
#line 413
  work_list.prev = & work_list;
#line 415
  count = 0;
#line 417
  spin_lock_irq(& mdev->req_lock);
#line 418
  list_splice_init(list, & work_list);
#line 419
  spin_unlock_irq(& mdev->req_lock);
#line 421
  __mptr = (struct list_head  const  *)work_list.next;
#line 421
  e = (struct drbd_epoch_entry *)__mptr;
#line 421
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 421
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 421
  goto ldv_43130;
  ldv_43129: 
#line 422
  drbd_free_ee(mdev, e);
#line 423
  count = count + 1;
#line 421
  e = t;
#line 421
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 421
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_43130: ;
#line 421
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 422
    goto ldv_43129;
  } else {

  }

#line 425
  return (count);
}
}
#line 438 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 440
  work_list.next = & work_list;
#line 440
  work_list.prev = & work_list;
#line 441
  reclaimed.next = & reclaimed;
#line 441
  reclaimed.prev = & reclaimed;
#line 443
  ok = (int )mdev->state.ldv_33380.conn > 8;
#line 445
  spin_lock_irq(& mdev->req_lock);
#line 446
  reclaim_net_ee(mdev, & reclaimed);
#line 447
  list_splice_init(& mdev->done_ee, & work_list);
#line 448
  spin_unlock_irq(& mdev->req_lock);
#line 450
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 450
  e = (struct drbd_epoch_entry *)__mptr;
#line 450
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 450
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 450
  goto ldv_43147;
  ldv_43146: 
#line 451
  drbd_free_ee(mdev, e);
#line 450
  e = t;
#line 450
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 450
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_43147: ;
#line 450
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 451
    goto ldv_43146;
  } else {

  }
#line 457
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 457
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 457
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 457
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 457
  goto ldv_43156;
  ldv_43155: 
#line 459
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 459
  ok = tmp != 0 && ok != 0;
#line 460
  drbd_free_ee(mdev, e);
#line 457
  e = t;
#line 457
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 457
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_43156: ;
#line 457
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 458
    goto ldv_43155;
  } else {

  }
#line 462
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 464
  return (ok);
}
}
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 469
  tmp = get_current();
#line 469
  wait.flags = 0U;
#line 469
  wait.private = (void *)tmp;
#line 469
  wait.func = & autoremove_wake_function;
#line 469
  wait.task_list.next = & wait.task_list;
#line 469
  wait.task_list.prev = & wait.task_list;
#line 473
  goto ldv_43164;
  ldv_43163: 
#line 474
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 475
  spin_unlock_irq(& mdev->req_lock);
#line 476
  drbd_kick_lo(mdev);
#line 477
  schedule();
#line 478
  finish_wait(& mdev->ee_wait, & wait);
#line 479
  spin_lock_irq(& mdev->req_lock);
  ldv_43164: 
#line 473
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 473
  if (tmp___0 == 0) {
#line 474
    goto ldv_43163;
  } else {

  }

#line 478
  return;
}
}
#line 483 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 485
  spin_lock_irq(& mdev->req_lock);
#line 486
  _drbd_wait_ee_list_empty(mdev, head);
#line 487
  spin_unlock_irq(& mdev->req_lock);
#line 488
  return;
}
}
#line 492 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 495
  sk = sock->sk;
#line 496
  err = 0;
#line 498
  *what = "listen";
#line 499
  err = (*((sock->ops)->listen))(sock, 5);
#line 500
  if (err < 0) {
#line 501
    goto out;
  } else {

  }
#line 503
  *what = "sock_create_lite";
#line 504
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 506
  if (err < 0) {
#line 507
    goto out;
  } else {

  }
#line 509
  *what = "accept";
#line 510
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 511
  if (err < 0) {
#line 512
    sock_release(*newsock);
#line 513
    *newsock = 0;
#line 514
    goto out;
  } else {

  }
#line 516
  (*newsock)->ops = sock->ops;
  out: ;
#line 519
  return (err);
}
}
#line 522 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 526
  iov.iov_base = buf;
#line 526
  iov.iov_len = size;
#line 530
  msg.msg_name = 0;
#line 530
  msg.msg_namelen = 0;
#line 530
  msg.msg_iov = (struct iovec *)(& iov);
#line 530
  msg.msg_iovlen = 1UL;
#line 530
  msg.msg_control = 0;
#line 530
  msg.msg_controllen = 0UL;
#line 530
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 537
  tmp = current_thread_info___0();
#line 537
  oldfs = tmp->addr_limit;
#line 538
  tmp___0 = current_thread_info___0();
#line 538
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 538
  tmp___0->addr_limit = __constr_expr_0;
#line 539
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 540
  tmp___1 = current_thread_info___0();
#line 540
  tmp___1->addr_limit = oldfs;
#line 542
  return (rv);
}
}
#line 545 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  struct thread_info *tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 548
  iov.iov_base = buf;
#line 548
  iov.iov_len = size;
#line 552
  msg.msg_name = 0;
#line 552
  msg.msg_namelen = 0;
#line 552
  msg.msg_iov = (struct iovec *)(& iov);
#line 552
  msg.msg_iovlen = 1UL;
#line 552
  msg.msg_control = 0;
#line 552
  msg.msg_controllen = 0UL;
#line 552
  msg.msg_flags = 16640U;
#line 559
  tmp = current_thread_info___0();
#line 559
  oldfs = tmp->addr_limit;
#line 560
  tmp___0 = current_thread_info___0();
#line 560
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 560
  tmp___0->addr_limit = __constr_expr_0;
  ldv_43202: 
#line 563
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 564
  if ((size_t )rv == size) {
#line 565
    goto ldv_43201;
  } else {

  }
#line 572
  if (rv < 0) {
#line 573
    if (rv == -104) {
#line 574
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 574
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 574
      printk("<6>%s %s: sock was reset by peer\n", tmp___2, tmp___1);
    } else
#line 575
    if (rv != -512) {
#line 576
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 576
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 576
      printk("<3>%s %s: sock_recvmsg returned %d\n", tmp___4, tmp___3, rv);
    } else {

    }
#line 577
    goto ldv_43201;
  } else
#line 578
  if (rv == 0) {
#line 579
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 579
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 579
    printk("<6>%s %s: sock was shut down by peer\n", tmp___6, tmp___5);
#line 580
    goto ldv_43201;
  } else {
#line 586
    goto ldv_43201;
  }
#line 588
  goto ldv_43202;
  ldv_43201: 
#line 590
  tmp___7 = current_thread_info___0();
#line 590
  tmp___7->addr_limit = oldfs;
#line 592
  if ((size_t )rv != size) {
#line 593
    val.i = 0U;
#line 593
    val.ldv_33380.conn = 4U;
#line 593
    mask.i = 0U;
#line 593
    mask.ldv_33380.conn = 31U;
#line 593
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 595
  return (rv);
}
}
#line 598 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 604
  disconnect_on_error = 1;
#line 606
  tmp = get_net_conf(mdev);
#line 606
  if (tmp == 0) {
#line 607
    return (0);
  } else {

  }
#line 609
  what = "sock_create_kern";
#line 610
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 612
  if (err < 0) {
#line 613
    sock = 0;
#line 614
    goto out;
  } else {

  }
#line 617
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 617
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 617
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 627
  __min1 = (mdev->net_conf)->my_addr_len;
#line 627
  __min2 = 28;
#line 627
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 627
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 629
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 630
    src_in6.sin6_port = 0U;
  } else {
#line 632
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 634
  what = "bind before connect";
#line 635
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 638
  if (err < 0) {
#line 639
    goto out;
  } else {

  }
#line 643
  disconnect_on_error = 0;
#line 644
  what = "connect";
#line 645
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 650
  if (err < 0) {
#line 651
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 652
      sock_release(sock);
#line 653
      sock = 0;
    } else {

    }
#line 655
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 662
    disconnect_on_error = 0;
#line 663
    goto ldv_43234;
    default: 
#line 665
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 665
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 665
    printk("<3>%s %s: %s failed, err = %d\n", tmp___2, tmp___1, what, err);
    }
    ldv_43234: ;
#line 667
    if (disconnect_on_error != 0) {
#line 668
      val.i = 0U;
#line 668
      val.ldv_33380.conn = 1U;
#line 668
      mask.i = 0U;
#line 668
      mask.ldv_33380.conn = 31U;
#line 668
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 670
  put_net_conf(mdev);
#line 671
  return (sock);
}
}
#line 674 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 677
  s_estab = 0;
#line 680
  tmp = get_net_conf(mdev);
#line 680
  if (tmp == 0) {
#line 681
    return (0);
  } else {

  }
#line 683
  what = "sock_create_kern";
#line 684
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 686
  if (err != 0) {
#line 687
    s_listen = 0;
#line 688
    goto out;
  } else {

  }
#line 691
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 692
  tmp___0 = random32();
#line 692
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 694
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 695
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 696
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 698
  what = "bind before listen";
#line 699
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 702
  if (err < 0) {
#line 703
    goto out;
  } else {

  }
#line 705
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 708
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 709
    sock_release(s_listen);
  } else {

  }
#line 710
  if (err < 0) {
#line 711
    if ((err != -11 && err != -4) && err != -512) {
#line 712
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 712
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 712
      printk("<3>%s %s: %s failed, err = %d\n", tmp___2, tmp___1, what, err);
#line 713
      val.i = 0U;
#line 713
      val.ldv_33380.conn = 1U;
#line 713
      mask.i = 0U;
#line 713
      mask.ldv_33380.conn = 31U;
#line 713
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 716
  put_net_conf(mdev);
#line 718
  return (s_estab);
}
}
#line 721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header *h ;
  int tmp ;

  {
#line 724
  h = & mdev->data.sbuf.header;
#line 726
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 726
  return (tmp);
}
}
#line 729 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header *h ;
  int rr ;
  __u16 tmp ;

  {
#line 731
  h = & mdev->data.sbuf.header;
#line 734
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 736
  if (rr == 8 && h->magic == 1728214147U) {
#line 737
    tmp = __fswab16((int )h->command);
#line 737
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 739
  return (65535);
}
}
#line 747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 752
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 753
    return (0);
  } else {

  }
#line 755
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 757
  if (rr > 0 || rr == -11) {
#line 758
    return (1);
  } else {
#line 760
    sock_release(*sock);
#line 761
    *sock = 0;
#line 762
    return (0);
  }
}
}
#line 774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  enum drbd_packets tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  u32 tmp___17 ;
  struct task_struct *tmp___18 ;
  enum drbd_thread_state tmp___19 ;
  struct task_struct *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  long tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___31 ;
  int tmp___32 ;

  {
#line 779
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 779
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 779
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 779
    printk("<3>%s %s: ASSERT( !mdev->data.socket ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           779);
  } else {

  }
#line 781
  tmp___3 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 781
  if (tmp___3 != 0) {
#line 782
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 782
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 782
    printk("<3>%s %s: CREATE_BARRIER flag was set in drbd_connect - now cleared!\n",
           tmp___2, tmp___1);
  } else {

  }
#line 784
  val.i = 0U;
#line 784
  val.ldv_33380.conn = 8U;
#line 784
  mask.i = 0U;
#line 784
  mask.ldv_33380.conn = 31U;
#line 784
  tmp___4 = drbd_request_state(mdev, mask, val);
#line 784
  if (tmp___4 <= 0) {
#line 785
    return (-2);
  } else {

  }
#line 787
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 789
  sock = 0;
#line 790
  msock = 0;
  ldv_43293: 
#line 793
  try = 0;
  ldv_43285: 
#line 795
  s = drbd_try_connect(mdev);
#line 796
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 797
    goto ldv_43284;
  } else {
#line 796
    try = try + 1;
#line 796
    if (try > 2) {
#line 797
      goto ldv_43284;
    } else {

    }
  }
#line 799
  tmp___5 = get_current();
#line 799
  tmp___5->state = 1L;
#line 800
  schedule_timeout(25L);
#line 801
  goto ldv_43285;
  ldv_43284: ;
#line 803
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 804
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 805
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 806
      sock = s;
#line 807
      s = 0;
    } else
#line 808
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 809
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 810
      msock = s;
#line 811
      s = 0;
    } else {
#line 813
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 813
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 813
      printk("<3>%s %s: Logic error in drbd_connect()\n", tmp___7, tmp___6);
#line 814
      goto out_release_sockets;
    }
  } else {

  }
#line 818
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 819
    tmp___8 = get_current();
#line 819
    tmp___8->state = 1L;
#line 820
    schedule_timeout(25L);
#line 821
    ok = drbd_socket_okay(mdev, & sock);
#line 822
    tmp___9 = drbd_socket_okay(mdev, & msock);
#line 822
    ok = tmp___9 != 0 && ok != 0;
#line 823
    if (ok != 0) {
#line 824
      goto ldv_43287;
    } else {

    }
  } else {

  }
  retry: 
#line 828
  s = drbd_wait_for_connect(mdev);
#line 829
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 830
    tmp___10 = drbd_recv_fp(mdev, s);
#line 830
    try = (int )tmp___10;
#line 831
    drbd_socket_okay(mdev, & sock);
#line 832
    drbd_socket_okay(mdev, & msock);
#line 833
    switch (try) {
    case 65522: ;
#line 835
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 836
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 836
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 836
      printk("<4>%s %s: initial packet S crossed\n", tmp___12, tmp___11);
#line 837
      sock_release(sock);
    } else {

    }
#line 839
    sock = s;
#line 840
    goto ldv_43290;
    case 65521: ;
#line 842
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 843
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 843
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 843
      printk("<4>%s %s: initial packet M crossed\n", tmp___14, tmp___13);
#line 844
      sock_release(msock);
    } else {

    }
#line 846
    msock = s;
#line 847
    set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
#line 848
    goto ldv_43290;
    default: 
#line 850
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 850
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 850
    printk("<4>%s %s: Error receiving initial packet\n", tmp___16, tmp___15);
#line 851
    sock_release(s);
#line 852
    tmp___17 = random32();
#line 852
    if ((int )tmp___17 & 1) {
#line 853
      goto retry;
    } else {

    }
    }
    ldv_43290: ;
  } else {

  }
#line 857
  if ((int )mdev->state.ldv_33380.conn <= 1) {
#line 858
    goto out_release_sockets;
  } else {

  }
#line 859
  tmp___20 = get_current();
#line 859
  tmp___21 = signal_pending(tmp___20);
#line 859
  if (tmp___21 != 0) {
#line 860
    tmp___18 = get_current();
#line 860
    flush_signals(tmp___18);
#line 861
    __asm__  volatile   ("": : : "memory");
#line 862
    tmp___19 = get_t_state(& mdev->receiver);
#line 862
    if ((unsigned int )tmp___19 == 2U) {
#line 863
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 866
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 867
    ok = drbd_socket_okay(mdev, & sock);
#line 868
    tmp___22 = drbd_socket_okay(mdev, & msock);
#line 868
    ok = tmp___22 != 0 && ok != 0;
#line 869
    if (ok != 0) {
#line 870
      goto ldv_43287;
    } else {

    }
  } else {

  }
#line 872
  goto ldv_43293;
  ldv_43287: 
#line 874
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 875
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 877
  (sock->sk)->sk_allocation = 16U;
#line 878
  (msock->sk)->sk_allocation = 16U;
#line 880
  (sock->sk)->sk_priority = 4U;
#line 881
  (msock->sk)->sk_priority = 6U;
#line 883
  if ((mdev->net_conf)->sndbuf_size != 0) {
#line 884
    (sock->sk)->sk_sndbuf = (mdev->net_conf)->sndbuf_size;
#line 885
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 888
  if ((mdev->net_conf)->rcvbuf_size != 0) {
#line 889
    (sock->sk)->sk_rcvbuf = (mdev->net_conf)->rcvbuf_size;
#line 890
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 898
  tmp___23 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 898
  (sock->sk)->sk_rcvtimeo = tmp___23;
#line 898
  (sock->sk)->sk_sndtimeo = tmp___23;
#line 901
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 902
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 906
  drbd_tcp_nodelay(sock);
#line 907
  drbd_tcp_nodelay(msock);
#line 909
  mdev->data.socket = sock;
#line 910
  mdev->meta.socket = msock;
#line 911
  mdev->last_received = jiffies;
#line 913
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 913
    tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 913
    tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 913
    printk("<3>%s %s: ASSERT( mdev->asender.task == NULL ) in %s:%d\n", tmp___25,
           tmp___24, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           913);
  } else {

  }
#line 915
  h = drbd_do_handshake(mdev);
#line 916
  if (h <= 0) {
#line 917
    return (h);
  } else {

  }
#line 919
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 921
    tmp___26 = drbd_do_auth(mdev);
#line 921
    switch (tmp___26) {
    case -1: 
#line 923
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 923
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 923
    printk("<3>%s %s: Authentication of peer failed\n", tmp___28, tmp___27);
#line 924
    return (-1);
    case 0: 
#line 926
    tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 926
    tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 926
    printk("<3>%s %s: Authentication of peer failed, trying again.\n", tmp___30, tmp___29);
#line 927
    return (0);
    }
  } else {

  }
#line 931
  val___0.i = 0U;
#line 931
  val___0.ldv_33380.conn = 9U;
#line 931
  mask___0.i = 0U;
#line 931
  mask___0.ldv_33380.conn = 31U;
#line 931
  tmp___31 = drbd_request_state(mdev, mask___0, val___0);
#line 931
  if (tmp___31 <= 0) {
#line 932
    return (0);
  } else {

  }
#line 934
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 935
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 937
  atomic_set(& mdev->packet_seq, 0);
#line 938
  mdev->peer_seq = 0U;
#line 940
  drbd_thread_start(& mdev->asender);
#line 942
  tmp___32 = drbd_send_protocol(mdev);
#line 942
  if (tmp___32 == 0) {
#line 943
    return (-1);
  } else {

  }
#line 944
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 945
  drbd_send_sizes(mdev, 0);
#line 946
  drbd_send_uuids(mdev);
#line 947
  drbd_send_state(mdev);
#line 948
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 949
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 951
  return (1);
  out_release_sockets: ;
#line 954
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 955
    sock_release(sock);
  } else {

  }
#line 956
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 957
    sock_release(msock);
  } else {

  }
#line 958
  return (-1);
}
}
#line 961 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;

  {
#line 965
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 967
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 967
  if (tmp___1 != 0L) {
#line 968
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 968
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 968
    printk("<3>%s %s: short read expecting header on sock: r=%d\n", tmp___0, tmp,
           r);
#line 969
    return (0);
  } else {

  }
#line 971
  tmp___2 = __fswab16((int )h->command);
#line 971
  h->command = tmp___2;
#line 972
  tmp___3 = __fswab16((int )h->length);
#line 972
  h->length = tmp___3;
#line 973
  tmp___7 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 973
  if (tmp___7 != 0L) {
#line 974
    tmp___4 = __fswab32(h->magic);
#line 974
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 974
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 974
    printk("<3>%s %s: magic?? on data m: 0x%lx c: %d l: %d\n", tmp___6, tmp___5, (long )tmp___4,
           (int )h->command, (int )h->length);
#line 977
    return (0);
  } else {

  }
#line 979
  mdev->last_received = jiffies;
#line 981
  return (1);
}
}
#line 984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_flush_after_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  enum finish_epoch tmp___2 ;

  {
#line 988
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 988
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 988
    if (tmp___1 != 0) {
#line 989
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0, 1UL);
#line 991
      if (rv != 0) {
#line 992
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 992
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 992
        printk("<3>%s %s: local disk flush failed with status %d\n", tmp___0, tmp,
               rv);
#line 996
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 998
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1001
  tmp___2 = drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1001
  return (tmp___2);
}
}
#line 1004 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int w_flush(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct flush_work *fw ;
  struct drbd_epoch *epoch ;
  int tmp ;

  {
#line 1006
  fw = (struct flush_work *)w;
#line 1007
  epoch = fw->epoch;
#line 1009
  kfree((void const   *)w);
#line 1011
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& epoch->flags));
#line 1011
  if (tmp == 0) {
#line 1012
    drbd_flush_after_epoch(mdev, epoch);
  } else {

  }
#line 1014
  drbd_may_finish_epoch(mdev, epoch, (int )mdev->state.ldv_33380.conn <= 9 ? EV_CLEANUP : EV_PUT);
#line 1017
  return (1);
}
}
#line 1026 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int finish ;
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  int schedule_flush ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr ;
  struct flush_work *fw ;
  void *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;

  {
#line 1032
  schedule_flush = 0;
#line 1033
  rv = FE_STILL_LIVE;
#line 1035
  spin_lock(& mdev->epoch_lock);
  ldv_43339: 
#line 1037
  next_epoch = 0;
#line 1038
  finish = 0;
#line 1040
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1042
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1044
  atomic_dec(& epoch->active);
#line 1045
  goto ldv_43328;
  case 1U: 
#line 1047
  set_bit(3U, (unsigned long volatile   *)(& epoch->flags));
#line 1051
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1051
  if (((tmp != 0 && epoch_size == 1) && (unsigned int )mdev->write_ordering != 3U) && (unsigned long )mdev->current_epoch == (unsigned long )epoch) {
#line 1054
    clear_bit(2, (unsigned long volatile   *)(& epoch->flags));
  } else {

  }
#line 1055
  goto ldv_43328;
  case 2U: 
#line 1057
  set_bit(1U, (unsigned long volatile   *)(& epoch->flags));
#line 1058
  goto ldv_43328;
  case 3U: ;
#line 1061
  goto ldv_43328;
  }
  ldv_43328: ;
#line 1064
  if (epoch_size != 0) {
#line 1064
    tmp___3 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1064
    if (tmp___3 == 0) {
#line 1064
      tmp___4 = constant_test_bit(3U, (unsigned long const volatile   *)(& epoch->flags));
#line 1064
      if (tmp___4 != 0) {
#line 1064
        if ((unsigned long )epoch->list.prev == (unsigned long )(& (mdev->current_epoch)->list)) {
#line 1064
          tmp___5 = constant_test_bit(4U, (unsigned long const volatile   *)(& epoch->flags));
#line 1064
          if (tmp___5 == 0) {
#line 1070
            tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& epoch->flags));
#line 1070
            if (tmp___1 != 0 || (unsigned int )mdev->write_ordering == 0U) {
#line 1074
              finish = 1;
#line 1075
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else
#line 1070
            if (epoch_size == 1) {
#line 1070
              tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1070
              if (tmp___2 != 0) {
#line 1074
                finish = 1;
#line 1075
                set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
              } else {
#line 1070
                goto _L;
              }
            } else
            _L: /* CIL Label */ 
#line 1070
            if (((unsigned int )ev & 32U) != 0U) {
#line 1074
              finish = 1;
#line 1075
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else {
#line 1076
              tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1076
              if (tmp___0 == 0 && (unsigned int )mdev->write_ordering == 3U) {
#line 1078
                atomic_inc(& epoch->active);
#line 1079
                schedule_flush = 1;
              } else {

              }
            }
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1082
  if (finish != 0) {
#line 1083
    if (((unsigned int )ev & 32U) == 0U) {
#line 1084
      spin_unlock(& mdev->epoch_lock);
#line 1085
      drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1086
      spin_lock(& mdev->epoch_lock);
    } else {

    }
#line 1088
    atomic_dec(& mdev->unacked_cnt);
#line 1088
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1088
    if (tmp___9 < 0) {
#line 1088
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1088
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1088
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1088
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___8, tmp___7, "drbd_may_finish_epoch",
             1088, tmp___6);
    } else {

    }
#line 1090
    if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1091
      __mptr = (struct list_head  const  *)epoch->list.next;
#line 1091
      next_epoch = (struct drbd_epoch *)__mptr;
#line 1092
      list_del(& epoch->list);
#line 1093
      ev = (enum epoch_event )(((unsigned int )ev & 32U) | 3U);
#line 1094
      mdev->epochs = mdev->epochs - 1U;
#line 1095
      kfree((void const   *)epoch);
#line 1097
      if ((unsigned int )rv == 0U) {
#line 1098
        rv = FE_DESTROYED;
      } else {

      }
    } else {
#line 1100
      epoch->flags = 0UL;
#line 1101
      atomic_set(& epoch->epoch_size, 0);
#line 1103
      if ((unsigned int )rv == 0U) {
#line 1104
        rv = FE_RECYCLED;
      } else {

      }
    }
  } else {

  }
#line 1108
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1109
    goto ldv_43338;
  } else {

  }
#line 1111
  epoch = next_epoch;
#line 1112
  goto ldv_43339;
  ldv_43338: 
#line 1114
  spin_unlock(& mdev->epoch_lock);
#line 1116
  if (schedule_flush != 0) {
#line 1118
    tmp___10 = kmalloc___1(32UL, 32U);
#line 1118
    fw = (struct flush_work *)tmp___10;
#line 1119
    if ((unsigned long )fw != (unsigned long )((struct flush_work *)0)) {
#line 1120
      fw->w.cb = & w_flush;
#line 1121
      fw->epoch = epoch;
#line 1122
      drbd_queue_work(& mdev->data.work, & fw->w);
    } else {
#line 1124
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1124
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1124
      printk("<4>%s %s: Could not kmalloc a flush_work obj\n", tmp___12, tmp___11);
#line 1125
      set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1127
      drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1128
      drbd_may_finish_epoch(mdev, epoch, EV_PUT);
    }
  } else {

  }
#line 1132
  return (rv);
}
}
#line 1140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[4U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1143
  write_ordering_str[0] = (char *)"none";
#line 1143
  write_ordering_str[1] = (char *)"drain";
#line 1143
  write_ordering_str[2] = (char *)"flush";
#line 1143
  write_ordering_str[3] = (char *)"barrier";
#line 1150
  pwo = mdev->write_ordering;
#line 1151
  _min1 = pwo;
#line 1151
  _min2 = wo;
#line 1151
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1152
  if ((unsigned int )wo == 3U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1153
    wo = WO_bdev_flush;
  } else {

  }
#line 1154
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1155
    wo = WO_drain_io;
  } else {

  }
#line 1156
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1157
    wo = WO_none;
  } else {

  }
#line 1158
  mdev->write_ordering = wo;
#line 1159
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 3U) {
#line 1160
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1160
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1160
    printk("<6>%s %s: Method to ensure write ordering: %s\n", tmp___0, tmp, write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1161
  return;
}
}
#line 1169 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct bio *bio ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct drbd_epoch *tmp___1 ;

  {
#line 1171
  e = (struct drbd_epoch_entry *)w;
#line 1172
  bio = e->private_bio;
#line 1184
  tmp___1 = previous_epoch(mdev, e->epoch);
#line 1184
  if ((unsigned long )tmp___1 != (unsigned long )((struct drbd_epoch *)0)) {
#line 1185
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1185
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1185
    printk("<4>%s %s: Write ordering was not enforced (one time event)\n", tmp___0,
           tmp);
  } else {

  }
#line 1191
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1192
  bio->bi_sector = e->sector;
#line 1193
  bio->bi_size = e->size;
#line 1194
  bio->bi_idx = 0U;
#line 1196
  bio->bi_flags = bio->bi_flags & 0xf000000000000000UL;
#line 1197
  bio->bi_flags = bio->bi_flags | 1UL;
#line 1200
  bio->bi_phys_segments = 0U;
#line 1201
  bio->bi_next = 0;
#line 1207
  e->w.cb = & e_end_block;
#line 1210
  bio->bi_rw = bio->bi_rw & 0xffffffffffffffdfUL;
#line 1212
  drbd_generic_make_request(mdev, 4, bio);
#line 1214
  return (1);
}
}
#line 1217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int rv ;
  int issue_flush ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  enum finish_epoch tmp___3 ;
  enum finish_epoch tmp___4 ;
  void *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  enum finish_epoch tmp___9 ;
  int tmp___10 ;

  {
#line 1220
  p = (struct p_barrier *)h;
#line 1223
  _b = (unsigned int )h->length != 8U;
#line 1223
  if (_b != 0) {
#line 1223
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1223
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1223
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_Barrier", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1223);
  } else {

  }
#line 1223
  if (_b != 0) {
#line 1223
    return (0);
  } else {

  }
#line 1225
  rv = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 1226
  _b___0 = (int )h->length != rv;
#line 1226
  if (_b___0 != 0) {
#line 1226
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1226
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1226
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "receive_Barrier", (char *)"rv != h->length",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1226);
  } else {

  }
#line 1226
  if (_b___0 != 0) {
#line 1226
    return (0);
  } else {

  }
#line 1228
  inc_unacked(mdev);
#line 1230
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1231
    drbd_kick_lo(mdev);
  } else {

  }
#line 1233
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1234
  tmp___3 = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1234
  rv = (int )tmp___3;
#line 1241
  switch ((unsigned int )mdev->write_ordering) {
  case 3U: ;
  case 0U: ;
#line 1244
  if (rv == 2) {
#line 1245
    return (1);
  } else {

  }
#line 1246
  goto ldv_43372;
  case 2U: ;
  case 1U: ;
#line 1250
  if (rv == 0) {
#line 1251
    set_bit(0U, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1252
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1253
    tmp___4 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1253
    rv = (int )tmp___4;
  } else {

  }
#line 1255
  if (rv == 2) {
#line 1256
    return (1);
  } else {

  }
#line 1261
  goto ldv_43372;
  }
  ldv_43372: 
#line 1266
  tmp___5 = kmalloc___1(40UL, 16U);
#line 1266
  epoch = (struct drbd_epoch *)tmp___5;
#line 1267
  if ((unsigned long )epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1268
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1268
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1268
    printk("<4>%s %s: Allocation of an epoch failed, slowing down\n", tmp___7, tmp___6);
#line 1269
    tmp___8 = test_and_set_bit(0, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1269
    issue_flush = tmp___8 == 0;
#line 1270
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1271
    if (issue_flush != 0) {
#line 1272
      tmp___9 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1272
      rv = (int )tmp___9;
#line 1273
      if (rv == 2) {
#line 1274
        return (1);
      } else {

      }
    } else {

    }
#line 1277
    drbd_wait_ee_list_empty(mdev, & mdev->done_ee);
#line 1279
    return (1);
  } else {

  }
#line 1282
  epoch->flags = 0UL;
#line 1283
  atomic_set(& epoch->epoch_size, 0);
#line 1284
  atomic_set(& epoch->active, 0);
#line 1286
  spin_lock(& mdev->epoch_lock);
#line 1287
  tmp___10 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1287
  if (tmp___10 != 0) {
#line 1288
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1289
    mdev->current_epoch = epoch;
#line 1290
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1293
    kfree((void const   *)epoch);
  }
#line 1295
  spin_unlock(& mdev->epoch_lock);
#line 1297
  return (1);
}
}
#line 1303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  struct bio_vec *bvec ;
  struct page *page ;
  struct bio *bio ;
  int dgs ;
  int ds ;
  int i ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int _b ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b___0 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int __min1 ;
  int __min2 ;
  void *tmp___6 ;
  int __min1___0 ;
  int __min2___0 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int __min1___1 ;
  int __min2___1 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;

  {
#line 1310
  dig_in = mdev->int_dig_in;
#line 1311
  dig_vv = mdev->int_dig_vv;
#line 1313
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1313
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1313
    dgs = (int )tmp;
  } else {
#line 1313
    dgs = 0;
  }
#line 1316
  if (dgs != 0) {
#line 1317
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1318
    if (rr != dgs) {
#line 1319
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1319
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1319
      printk("<4>%s %s: short read receiving data digest: read %d expected %d\n",
             tmp___1, tmp___0, rr, dgs);
#line 1321
      return (0);
    } else {

    }
  } else {

  }
#line 1325
  data_size = data_size - dgs;
#line 1327
  _b = (data_size & 511) != 0;
#line 1327
  if (_b != 0) {
#line 1327
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1327
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1327
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___3, tmp___2, "read_in_block", (char *)"data_size & 0x1ff",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1327);
  } else {

  }
#line 1327
  if (_b != 0) {
#line 1327
    return (0);
  } else {

  }
#line 1328
  _b___0 = (unsigned int )data_size > 32768U;
#line 1328
  if (_b___0 != 0) {
#line 1328
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1328
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1328
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "read_in_block", (char *)"data_size > DRBD_MAX_SEGMENT_SIZE",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1328);
  } else {

  }
#line 1328
  if (_b___0 != 0) {
#line 1328
    return (0);
  } else {

  }
#line 1333
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1334
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1335
    return (0);
  } else {

  }
#line 1336
  bio = e->private_bio;
#line 1337
  ds = data_size;
#line 1338
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1338
  i = (int )bio->bi_idx;
#line 1338
  goto ldv_43406;
  ldv_43405: 
#line 1339
  page = bvec->bv_page;
#line 1340
  __min1 = ds;
#line 1340
  __min2 = 4096;
#line 1340
  tmp___6 = kmap(page);
#line 1340
  rr = drbd_recv(mdev, tmp___6, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1341
  kunmap(page);
#line 1342
  __min1___1 = ds;
#line 1342
  __min2___1 = 4096;
#line 1342
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1343
    drbd_free_ee(mdev, e);
#line 1344
    __min1___0 = ds;
#line 1344
    __min2___0 = 4096;
#line 1344
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1344
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1344
    printk("<4>%s %s: short read receiving data: read %d expected %d\n", tmp___8,
           tmp___7, rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1346
    return (0);
  } else {

  }
#line 1348
  ds = ds - rr;
#line 1338
  bvec = bvec + 1;
#line 1338
  i = i + 1;
  ldv_43406: ;
#line 1338
  if ((int )bio->bi_vcnt > i) {
#line 1339
    goto ldv_43405;
  } else {

  }

#line 1351
  if (dgs != 0) {
#line 1352
    drbd_csum(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1353
    tmp___11 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1353
    if (tmp___11 != 0) {
#line 1354
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1354
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1354
      printk("<3>%s %s: Digest integrity check FAILED.\n", tmp___10, tmp___9);
#line 1355
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1357
      drbd_free_ee(mdev, e);
#line 1358
      return (0);
    } else {

    }
  } else {

  }
#line 1361
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1362
  return (e);
}
}
#line 1368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1371
  rv = 1;
#line 1374
  if (data_size == 0) {
#line 1375
    return (1);
  } else {

  }
#line 1377
  page = drbd_pp_alloc(mdev, 1);
#line 1379
  data = kmap(page);
#line 1380
  goto ldv_43427;
  ldv_43426: 
#line 1381
  __min1 = data_size;
#line 1381
  __min2 = 4096;
#line 1381
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1382
  __min1___1 = data_size;
#line 1382
  __min2___1 = 4096;
#line 1382
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1383
    rv = 0;
#line 1384
    __min1___0 = data_size;
#line 1384
    __min2___0 = 4096;
#line 1384
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1384
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1384
    printk("<4>%s %s: short read receiving data: read %d expected %d\n", tmp___0,
           tmp, rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1386
    goto ldv_43425;
  } else {

  }
#line 1388
  data_size = data_size - rr;
  ldv_43427: ;
#line 1380
  if (data_size != 0) {
#line 1381
    goto ldv_43426;
  } else {

  }
  ldv_43425: 
#line 1390
  kunmap(page);
#line 1391
  drbd_pp_free(mdev, page);
#line 1392
  return (rv);
}
}
#line 1395 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int __min1 ;
  int __min2 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 1401
  dig_in = mdev->int_dig_in;
#line 1402
  dig_vv = mdev->int_dig_vv;
#line 1404
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1404
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1404
    dgs = (int )tmp;
  } else {
#line 1404
    dgs = 0;
  }
#line 1407
  if (dgs != 0) {
#line 1408
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1409
    if (rr != dgs) {
#line 1410
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1410
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1410
      printk("<4>%s %s: short read receiving data reply digest: read %d expected %d\n",
             tmp___1, tmp___0, rr, dgs);
#line 1412
      return (0);
    } else {

    }
  } else {

  }
#line 1416
  data_size = data_size - dgs;
#line 1420
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1422
  bio = req->master_bio;
#line 1423
  if (bio->bi_sector != sector) {
#line 1423
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1423
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1423
    printk("<3>%s %s: ASSERT( sector == bio->bi_sector ) in %s:%d\n", tmp___3, tmp___2,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1423);
  } else {

  }
#line 1425
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1425
  i = (int )bio->bi_idx;
#line 1425
  goto ldv_43446;
  ldv_43445: 
#line 1426
  __min1 = data_size;
#line 1426
  __min2 = (int )bvec->bv_len;
#line 1426
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1427
  tmp___4 = kmap(bvec->bv_page);
#line 1427
  rr = drbd_recv(mdev, tmp___4 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1430
  kunmap(bvec->bv_page);
#line 1431
  if (rr != expect) {
#line 1432
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1432
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1432
    printk("<4>%s %s: short read receiving data reply: read %d expected %d\n", tmp___6,
           tmp___5, rr, expect);
#line 1435
    return (0);
  } else {

  }
#line 1437
  data_size = data_size - rr;
#line 1425
  bvec = bvec + 1;
#line 1425
  i = i + 1;
  ldv_43446: ;
#line 1425
  if ((int )bio->bi_vcnt > i) {
#line 1426
    goto ldv_43445;
  } else {

  }

#line 1440
  if (dgs != 0) {
#line 1441
    drbd_csum(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1442
    tmp___9 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1442
    if (tmp___9 != 0) {
#line 1443
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1443
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1443
      printk("<3>%s %s: Digest integrity check FAILED. Broken NICs?\n", tmp___8, tmp___7);
#line 1444
      return (0);
    } else {

    }
  } else {

  }
#line 1448
  if (data_size != 0) {
#line 1448
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1448
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1448
    printk("<3>%s %s: ASSERT( data_size == 0 ) in %s:%d\n", tmp___11, tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1448);
  } else {

  }
#line 1449
  return (1);
}
}
#line 1454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 1456
  e = (struct drbd_epoch_entry *)w;
#line 1457
  sector = e->sector;
#line 1460
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1460
  if (tmp___1 == 0) {
#line 1460
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1460
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1460
    printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1460);
  } else {

  }
#line 1462
  tmp___2 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 1462
  if (tmp___2 != 0L) {
#line 1463
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1463U);
#line 1464
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1467
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1469
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1471
  atomic_dec(& mdev->unacked_cnt);
#line 1471
  tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1471
  if (tmp___6 < 0) {
#line 1471
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1471
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1471
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1471
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___5, tmp___4, "e_end_resync_block",
           1471, tmp___3);
  } else {

  }
#line 1473
  return (ok);
}
}
#line 1476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 1480
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1481
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1482
    put_ldev(mdev);
#line 1483
    return (0);
  } else {

  }
#line 1486
  atomic_dec(& mdev->rs_pending_cnt);
#line 1486
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1486
  if (tmp___2 < 0) {
#line 1486
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1486
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1486
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1486
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___1, tmp___0, "recv_resync_read",
           1486, tmp);
  } else {

  }
#line 1488
  (e->private_bio)->bi_end_io = & drbd_endio_write_sec;
#line 1489
  (e->private_bio)->bi_rw = 1UL;
#line 1490
  e->w.cb = & e_end_resync_block;
#line 1492
  inc_unacked(mdev);
#line 1496
  spin_lock_irq(& mdev->req_lock);
#line 1497
  list_add(& e->w.list, & mdev->sync_ee);
#line 1498
  spin_unlock_irq(& mdev->req_lock);
#line 1500
  drbd_generic_make_request(mdev, 2, e->private_bio);
#line 1503
  maybe_kick_lo(mdev);
#line 1504
  return (1);
}
}
#line 1507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;

  {
#line 1513
  p = (struct p_data *)h;
#line 1515
  header_size = 24U;
#line 1516
  data_size = (unsigned int )h->length - header_size;
#line 1518
  _b = data_size == 0U;
#line 1518
  if (_b != 0) {
#line 1518
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1518
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1518
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_DataReply", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1518);
  } else {

  }
#line 1518
  if (_b != 0) {
#line 1518
    return (0);
  } else {

  }
#line 1520
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1520
  if ((unsigned int )tmp___1 != header_size) {
#line 1521
    return (0);
  } else {

  }
#line 1523
  tmp___2 = __fswab64(p->sector);
#line 1523
  sector = (sector_t )tmp___2;
#line 1525
  spin_lock_irq(& mdev->req_lock);
#line 1526
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1527
  spin_unlock_irq(& mdev->req_lock);
#line 1528
  tmp___5 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1528
  if (tmp___5 != 0L) {
#line 1529
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1529
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1529
    printk("<3>%s %s: Got a corrupt block_id/sector pair(1).\n", tmp___4, tmp___3);
#line 1530
    return (0);
  } else {

  }
#line 1536
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1538
  if (ok != 0) {
#line 1539
    req_mod(req, data_received);
  } else {

  }
#line 1544
  return (ok);
}
}
#line 1547 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1552
  p = (struct p_data *)h;
#line 1554
  header_size = 24U;
#line 1555
  data_size = (unsigned int )h->length - header_size;
#line 1557
  _b = data_size == 0U;
#line 1557
  if (_b != 0) {
#line 1557
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1557
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1557
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_RSDataReply", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1557);
  } else {

  }
#line 1557
  if (_b != 0) {
#line 1557
    return (0);
  } else {

  }
#line 1559
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1559
  if ((unsigned int )tmp___1 != header_size) {
#line 1560
    return (0);
  } else {

  }
#line 1562
  tmp___2 = __fswab64(p->sector);
#line 1562
  sector = (sector_t )tmp___2;
#line 1563
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1563
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1563
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1563
    printk("<3>%s %s: ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n", tmp___4, tmp___3,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1563);
  } else {

  }
#line 1565
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1565
  if (tmp___8 != 0) {
#line 1569
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1571
    tmp___7 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1571
    if (tmp___7 != 0) {
#line 1572
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1572
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1572
      printk("<3>%s %s: Can not write resync data to local disk.\n", tmp___6, tmp___5);
    } else {

    }
#line 1574
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1576
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
  }
#line 1579
  return (ok);
}
}
#line 1585 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  struct drbd_epoch *epoch ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;

  {
#line 1587
  e = (struct drbd_epoch_entry *)w;
#line 1588
  sector = e->sector;
#line 1590
  ok = 1;
#line 1592
  if ((e->flags & 8U) != 0U) {
#line 1593
    epoch = previous_epoch(mdev, e->epoch);
#line 1594
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1595
      drbd_may_finish_epoch(mdev, epoch, cancel != 0 ? 34 : EV_BARRIER_DONE);
    } else {

    }
  } else {

  }
#line 1598
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1599
    tmp___0 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 1599
    if (tmp___0 != 0L) {
#line 1600
      pcmd = ((int )mdev->state.ldv_33380.conn > 15 && (int )mdev->state.ldv_33380.conn <= 21) && (e->flags & 4U) != 0U ? 23 : 22;
#line 1604
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1604
      ok = tmp & ok;
#line 1605
      if (pcmd == 23) {
#line 1606
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1606U);
      } else {

      }
    } else {
#line 1608
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1612
    atomic_dec(& mdev->unacked_cnt);
#line 1612
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1612
    if (tmp___4 < 0) {
#line 1612
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1612
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1612
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1612
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___3, tmp___2, "e_end_block",
             1612, tmp___1);
    } else {

    }
  } else {

  }
#line 1616
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1617
    spin_lock_irq(& mdev->req_lock);
#line 1618
    tmp___7 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1618
    if (tmp___7 != 0) {
#line 1618
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1618
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1618
      printk("<3>%s %s: ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___6,
             tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             1618);
    } else {

    }
#line 1619
    hlist_del_init(& e->colision);
#line 1620
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1622
    tmp___10 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1622
    if (tmp___10 == 0) {
#line 1622
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1622
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1622
      printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___9,
             tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             1622);
    } else {

    }
  }
#line 1625
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1627
  return (ok);
}
}
#line 1630 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 1632
  e = (struct drbd_epoch_entry *)w;
#line 1633
  ok = 1;
#line 1635
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1635
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1635
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1635
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1635);
  } else {

  }
#line 1636
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1638
  spin_lock_irq(& mdev->req_lock);
#line 1639
  tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1639
  if (tmp___3 != 0) {
#line 1639
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1639
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1639
    printk("<3>%s %s: ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1639);
  } else {

  }
#line 1640
  hlist_del_init(& e->colision);
#line 1641
  spin_unlock_irq(& mdev->req_lock);
#line 1643
  atomic_dec(& mdev->unacked_cnt);
#line 1643
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1643
  if (tmp___7 < 0) {
#line 1643
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1643
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1643
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1643
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___6, tmp___5, "e_send_discard_ack",
           1643, tmp___4);
  } else {

  }
#line 1645
  return (ok);
}
}
#line 1669 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 1671
  tmp = get_current();
#line 1671
  wait.flags = 0U;
#line 1671
  wait.private = (void *)tmp;
#line 1671
  wait.func = & autoremove_wake_function;
#line 1671
  wait.task_list.next = & wait.task_list;
#line 1671
  wait.task_list.prev = & wait.task_list;
#line 1674
  ret = 0;
#line 1675
  spin_lock(& mdev->peer_seq_lock);
  ldv_43529: 
#line 1677
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1678
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1678
  if (tmp___0 <= 0) {
#line 1679
    goto ldv_43528;
  } else {

  }
#line 1680
  tmp___1 = get_current();
#line 1680
  tmp___2 = signal_pending(tmp___1);
#line 1680
  if (tmp___2 != 0) {
#line 1681
    ret = -512;
#line 1682
    goto ldv_43528;
  } else {

  }
#line 1684
  p_seq = mdev->peer_seq;
#line 1685
  spin_unlock(& mdev->peer_seq_lock);
#line 1686
  timeout = schedule_timeout(7500L);
#line 1687
  spin_lock(& mdev->peer_seq_lock);
#line 1688
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1689
    ret = -110;
#line 1690
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1690
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1690
    printk("<3>%s %s: ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n",
           tmp___4, tmp___3);
#line 1691
    goto ldv_43528;
  } else {

  }
#line 1693
  goto ldv_43529;
  ldv_43528: 
#line 1694
  finish_wait(& mdev->seq_wait, & wait);
#line 1695
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1696
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1697
  spin_unlock(& mdev->peer_seq_lock);
#line 1698
  return (ret);
}
}
#line 1702 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int header_size ;
  int data_size ;
  int rw ;
  u32 dp_flags ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  __u64 tmp___8 ;
  struct drbd_epoch *epoch ;
  struct list_head  const  *__mptr ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  __u32 tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int size ;
  int discard ;
  int tmp___15 ;
  wait_queue_t wait ;
  struct task_struct *tmp___16 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  long tmp___19 ;
  long tmp___20 ;
  __u32 tmp___21 ;
  int tmp___22 ;
  struct hlist_head *tmp___23 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___24 ;
  struct task_struct *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  int tmp___28 ;
  struct hlist_node  const  *__mptr___0 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  struct task_struct *tmp___31 ;
  int tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  char const   *tmp___36 ;

  {
#line 1706
  p = (struct p_data *)h;
#line 1708
  rw = 1;
#line 1711
  header_size = 24;
#line 1712
  data_size = (int )h->length - header_size;
#line 1714
  _b = data_size == 0;
#line 1714
  if (_b != 0) {
#line 1714
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1714
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1714
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_Data", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1714);
  } else {

  }
#line 1714
  if (_b != 0) {
#line 1714
    return (0);
  } else {

  }
#line 1716
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1716
  if (tmp___1 != header_size) {
#line 1717
    return (0);
  } else {

  }
#line 1719
  tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1719
  if (tmp___7 == 0) {
#line 1720
    tmp___4 = ___ratelimit(& drbd_ratelimit_state, "receive_Data");
#line 1720
    if (tmp___4 != 0) {
#line 1721
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1721
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1721
      printk("<3>%s %s: Can not write mirrored data block to local disk.\n", tmp___3,
             tmp___2);
    } else {

    }
#line 1723
    spin_lock(& mdev->peer_seq_lock);
#line 1724
    tmp___5 = __fswab32(p->seq_num);
#line 1724
    if (mdev->peer_seq + 1U == tmp___5) {
#line 1725
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1726
    spin_unlock(& mdev->peer_seq_lock);
#line 1728
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
#line 1729
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1730
    tmp___6 = drbd_drain_block(mdev, data_size);
#line 1730
    return (tmp___6);
  } else {

  }
#line 1738
  tmp___8 = __fswab64(p->sector);
#line 1738
  sector = (sector_t )tmp___8;
#line 1739
  e = read_in_block(mdev, p->block_id, sector, data_size);
#line 1740
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1741
    put_ldev(mdev);
#line 1742
    return (0);
  } else {

  }
#line 1745
  (e->private_bio)->bi_end_io = & drbd_endio_write_sec;
#line 1746
  e->w.cb = & e_end_block;
#line 1748
  spin_lock(& mdev->epoch_lock);
#line 1749
  e->epoch = mdev->current_epoch;
#line 1750
  atomic_inc(& (e->epoch)->epoch_size);
#line 1751
  atomic_inc(& (e->epoch)->active);
#line 1753
  if ((unsigned int )mdev->write_ordering == 3U) {
#line 1753
    tmp___11 = atomic_read((atomic_t const   *)(& (e->epoch)->epoch_size));
#line 1753
    if (tmp___11 == 1) {
#line 1758
      __mptr = (struct list_head  const  *)(e->epoch)->list.prev;
#line 1758
      epoch = (struct drbd_epoch *)__mptr;
#line 1759
      if ((unsigned long )e->epoch == (unsigned long )epoch) {
#line 1760
        set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1761
        rw = rw | 32;
#line 1762
        e->flags = e->flags | 8U;
      } else {
#line 1764
        tmp___9 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1764
        if (tmp___9 > 1) {
#line 1766
          set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1767
          set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1768
          rw = rw | 32;
#line 1769
          e->flags = e->flags | 8U;
        } else {
#line 1764
          tmp___10 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1764
          if (tmp___10 == 0) {
#line 1766
            set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1767
            set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1768
            rw = rw | 32;
#line 1769
            e->flags = e->flags | 8U;
          } else {

          }
        }
      }
    } else {

    }
  } else {

  }
#line 1773
  spin_unlock(& mdev->epoch_lock);
#line 1775
  tmp___12 = __fswab32(p->dp_flags);
#line 1775
  dp_flags = tmp___12;
#line 1776
  if ((int )dp_flags & 1) {
#line 1777
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1777
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1777
    printk("<3>%s %s: ASSERT FAILED would have submitted barrier request\n", tmp___14,
           tmp___13);
  } else {

  }
#line 1780
  if ((dp_flags & 2U) != 0U) {
#line 1781
    rw = rw | 192;
  } else {

  }
#line 1782
  if ((dp_flags & 4U) != 0U) {
#line 1783
    e->flags = e->flags | 4U;
  } else {

  }
#line 1786
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1787
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1791
    size = (int const   )e->size;
#line 1792
    tmp___15 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 1792
    discard = tmp___15;
#line 1793
    tmp___16 = get_current();
#line 1793
    wait.flags = 0U;
#line 1793
    wait.private = (void *)tmp___16;
#line 1793
    wait.func = & autoremove_wake_function;
#line 1793
    wait.task_list.next = & wait.task_list;
#line 1793
    wait.task_list.prev = & wait.task_list;
#line 1799
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1799
      tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1799
      tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1799
      printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
             tmp___18, tmp___17, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             1799);
    } else {

    }
#line 1800
    tmp___19 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1800
    if (tmp___19 != 0L) {
#line 1800
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1800), "i" (12UL));
      ldv_43554: ;
#line 1800
      goto ldv_43554;
    } else {

    }
#line 1801
    tmp___20 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1801
    if (tmp___20 != 0L) {
#line 1801
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1801), "i" (12UL));
      ldv_43555: ;
#line 1801
      goto ldv_43555;
    } else {

    }
#line 1837
    tmp___21 = __fswab32(p->seq_num);
#line 1837
    tmp___22 = drbd_wait_peer_seq(mdev, tmp___21);
#line 1837
    if (tmp___22 != 0) {
#line 1838
      goto out_interrupted;
    } else {

    }
#line 1840
    spin_lock_irq(& mdev->req_lock);
#line 1842
    tmp___23 = ee_hash_slot(mdev, sector);
#line 1842
    hlist_add_head(& e->colision, tmp___23);
#line 1845
    slot = tl_hash_slot(mdev, sector);
#line 1846
    first = 1;
    ldv_43567: 
#line 1848
    have_unacked = 0;
#line 1849
    have_conflict = 0;
#line 1850
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1852
    n = slot->first;
#line 1852
    goto ldv_43564;
    ldv_43563: 
#line 1853
    tmp___28 = overlaps(i->sector, (int )i->size, sector, size);
#line 1853
    if (tmp___28 != 0) {
#line 1856
      if (first != 0) {
#line 1857
        tmp___24 = get_current();
#line 1857
        tmp___25 = get_current();
#line 1857
        tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1857
        tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1857
        printk("<1>%s %s: %s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
               tmp___27, tmp___26, (char *)(& tmp___25->comm), tmp___24->pid, (unsigned long long )sector,
               size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1862
      if ((i->rq_state & 8UL) != 0UL) {
#line 1863
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1864
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1852
    n = n->next;
    ldv_43564: ;
#line 1852
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1852
      __builtin_prefetch((void const   *)n->next);
#line 1852
      if (1 != 0) {
#line 1852
        __mptr___0 = (struct hlist_node  const  *)n;
#line 1852
        i = (struct drbd_request *)__mptr___0 + 0xffffffffffffffd8UL;
#line 1852
        if (1 != 0) {
#line 1853
          goto ldv_43563;
        } else {
#line 1855
          goto ldv_43565;
        }
      } else {
#line 1855
        goto ldv_43565;
      }
    } else {

    }
    ldv_43565: ;
#line 1868
    if (have_conflict == 0) {
#line 1869
      goto ldv_43566;
    } else {

    }
#line 1872
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1873
      tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1873
      tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1873
      printk("<1>%s %s: Concurrent write! [DISCARD BY FLAG] sec=%llus\n", tmp___30,
             tmp___29, (unsigned long long )sector);
#line 1875
      inc_unacked(mdev);
#line 1876
      e->w.cb = & e_send_discard_ack;
#line 1877
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1879
      spin_unlock_irq(& mdev->req_lock);
#line 1884
      put_ldev(mdev);
#line 1885
      wake_asender(mdev);
#line 1886
      finish_wait(& mdev->misc_wait, & wait);
#line 1887
      return (1);
    } else {

    }
#line 1890
    tmp___31 = get_current();
#line 1890
    tmp___32 = signal_pending(tmp___31);
#line 1890
    if (tmp___32 != 0) {
#line 1891
      hlist_del_init(& e->colision);
#line 1893
      spin_unlock_irq(& mdev->req_lock);
#line 1895
      finish_wait(& mdev->misc_wait, & wait);
#line 1896
      goto out_interrupted;
    } else {

    }
#line 1899
    spin_unlock_irq(& mdev->req_lock);
#line 1900
    if (first != 0) {
#line 1901
      first = 0;
#line 1902
      tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1902
      tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1902
      printk("<1>%s %s: Concurrent write! [W AFTERWARDS] sec=%llus\n", tmp___34, tmp___33,
             (unsigned long long )sector);
    } else
#line 1904
    if (discard != 0) {
#line 1907
      if (have_unacked != 0) {
#line 1907
        tmp___35 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1907
        tmp___36 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1907
        printk("<3>%s %s: ASSERT( have_unacked == 0 ) in %s:%d\n", tmp___36, tmp___35,
               (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
               1907);
      } else {

      }
    } else {

    }
#line 1909
    schedule();
#line 1910
    spin_lock_irq(& mdev->req_lock);
#line 1911
    goto ldv_43567;
    ldv_43566: 
#line 1912
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1915
  list_add(& e->w.list, & mdev->active_ee);
#line 1916
  spin_unlock_irq(& mdev->req_lock);
#line 1918
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1920
  inc_unacked(mdev);
#line 1923
  goto ldv_43569;
  case 2: 
#line 1927
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1928
  goto ldv_43569;
  case 1: ;
#line 1931
  goto ldv_43569;
  }
  ldv_43569: ;
#line 1934
  if (*((unsigned int *)mdev + 451UL) == 0U) {
#line 1936
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1936U);
#line 1937
    e->flags = e->flags | 1U;
#line 1938
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1941
  (e->private_bio)->bi_rw = (unsigned long )rw;
#line 1942
  drbd_generic_make_request(mdev, 4, e->private_bio);
#line 1945
  maybe_kick_lo(mdev);
#line 1946
  return (1);
  out_interrupted: 
#line 1952
  put_ldev(mdev);
#line 1953
  drbd_free_ee(mdev, e);
#line 1954
  return (0);
}
}
#line 1957 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int digest_size ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  int brps ;
  int tmp___0 ;
  __u64 tmp___1 ;
  __u32 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct task_struct *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  void *tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  struct task_struct *tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  char const   *tmp___36 ;
  struct task_struct *tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;

  {
#line 1960
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1960
  capacity = tmp;
#line 1962
  di = 0;
#line 1965
  p = (struct p_block_req *)h;
#line 1967
  brps = 24;
#line 1969
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )brps);
#line 1969
  if (tmp___0 != brps) {
#line 1970
    return (0);
  } else {

  }
#line 1972
  tmp___1 = __fswab64(p->sector);
#line 1972
  sector = (sector_t )tmp___1;
#line 1973
  tmp___2 = __fswab32(p->blksize);
#line 1973
  size = (int )tmp___2;
#line 1975
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1976
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1976
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1976
    printk("<3>%s %s: %s:%d: sector: %llus, size: %u\n", tmp___4, tmp___3, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1977, (unsigned long long )sector, size);
#line 1978
    return (0);
  } else {

  }
#line 1980
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 1981
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1981
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1981
    printk("<3>%s %s: %s:%d: sector: %llus, size: %u\n", tmp___6, tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           1982, (unsigned long long )sector, size);
#line 1983
    return (0);
  } else {

  }
#line 1986
  tmp___11 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 1986
  if (tmp___11 == 0) {
#line 1987
    tmp___9 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 1987
    if (tmp___9 != 0) {
#line 1988
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1988
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1988
      printk("<3>%s %s: Can not satisfy peer\'s read request, no local data.\n", tmp___8,
             tmp___7);
    } else {

    }
#line 1990
    drbd_send_ack_rp(mdev, (unsigned int )h->command == 8U ? P_NEG_DREPLY : P_NEG_RS_DREPLY,
                     p);
#line 1992
    tmp___10 = drbd_drain_block(mdev, (int )h->length - brps);
#line 1992
    return (tmp___10);
  } else {

  }
#line 1998
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 1999
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2000
    put_ldev(mdev);
#line 2001
    return (0);
  } else {

  }
#line 2004
  (e->private_bio)->bi_rw = 0UL;
#line 2005
  (e->private_bio)->bi_end_io = & drbd_endio_read_sec;
#line 2007
  switch ((int )h->command) {
  case 8: 
#line 2009
  e->w.cb = & w_e_end_data_req;
#line 2010
  fault_type = 5U;
#line 2011
  goto ldv_43587;
  case 9: 
#line 2013
  e->w.cb = & w_e_end_rsdata_req;
#line 2014
  fault_type = 3U;
#line 2020
  tmp___16 = drbd_rs_begin_io(mdev, sector);
#line 2020
  if (tmp___16 == 0) {
#line 2023
    tmp___14 = get_current();
#line 2023
    tmp___15 = signal_pending(tmp___14);
#line 2023
    if (tmp___15 == 0) {
#line 2023
      tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2023
      tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2023
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___13, tmp___12,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2023);
    } else {

    }
#line 2024
    goto out_free_e;
  } else {

  }
#line 2026
  goto ldv_43587;
  case 31: ;
  case 33: 
#line 2030
  fault_type = 3U;
#line 2031
  digest_size = (int )h->length - brps;
#line 2032
  tmp___17 = kmalloc___1((unsigned long )digest_size + 16UL, 16U);
#line 2032
  di = (struct digest_info *)tmp___17;
#line 2033
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2034
    goto out_free_e;
  } else {

  }
#line 2036
  di->digest_size = digest_size;
#line 2037
  di->digest = (void *)di + 16U;
#line 2039
  tmp___18 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2039
  if (tmp___18 != digest_size) {
#line 2040
    goto out_free_e;
  } else {

  }
#line 2042
  e->block_id = (unsigned long long )di;
#line 2043
  if ((unsigned int )h->command == 33U) {
#line 2044
    if (mdev->agreed_pro_version <= 88) {
#line 2044
      tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2044
      tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2044
      printk("<3>%s %s: ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n", tmp___20,
             tmp___19, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2044);
    } else {

    }
#line 2045
    e->w.cb = & w_e_end_csum_rs_req;
  } else
#line 2046
  if ((unsigned int )h->command == 31U) {
#line 2047
    e->w.cb = & w_e_end_ov_reply;
#line 2048
    atomic_dec(& mdev->rs_pending_cnt);
#line 2048
    tmp___24 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2048
    if (tmp___24 < 0) {
#line 2048
      tmp___21 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2048
      tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2048
      tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2048
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___23, tmp___22,
             "receive_DataRequest", 2048, tmp___21);
    } else {

    }
#line 2049
    goto ldv_43587;
  } else {

  }
#line 2052
  tmp___29 = drbd_rs_begin_io(mdev, sector);
#line 2052
  if (tmp___29 == 0) {
#line 2054
    tmp___27 = get_current();
#line 2054
    tmp___28 = signal_pending(tmp___27);
#line 2054
    if (tmp___28 == 0) {
#line 2054
      tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2054
      tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2054
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___26, tmp___25,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2054);
    } else {

    }
#line 2055
    goto out_free_e;
  } else {

  }
#line 2057
  goto ldv_43587;
  case 30: ;
#line 2060
  if ((int )mdev->state.ldv_33380.conn > 9 && (unsigned int )*((unsigned short *)mdev + 902UL) != 304U) {
#line 2062
    tmp___30 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33380.conn);
#line 2062
    tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2062
    tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2062
    printk("<4>%s %s: ASSERT FAILED: got P_OV_REQUEST while being %s\n", tmp___32,
           tmp___31, tmp___30);
  } else {

  }
#line 2064
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2066
    mdev->ov_start_sector = sector;
#line 2067
    mdev->ov_position = sector;
#line 2068
    mdev->ov_left = mdev->rs_total - (sector >> 3);
#line 2069
    tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2069
    tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2069
    printk("<6>%s %s: Online Verify start sector: %llu\n", tmp___34, tmp___33, (unsigned long long )sector);
  } else {

  }
#line 2072
  e->w.cb = & w_e_end_ov_req;
#line 2073
  fault_type = 3U;
#line 2079
  tmp___39 = drbd_rs_begin_io(mdev, sector);
#line 2079
  if (tmp___39 == 0) {
#line 2082
    tmp___37 = get_current();
#line 2082
    tmp___38 = signal_pending(tmp___37);
#line 2082
    if (tmp___38 == 0) {
#line 2082
      tmp___35 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2082
      tmp___36 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2082
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___36, tmp___35,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2082);
    } else {

    }
#line 2083
    goto out_free_e;
  } else {

  }
#line 2085
  goto ldv_43587;
  default: 
#line 2089
  tmp___40 = cmdname((enum drbd_packets )h->command);
#line 2089
  tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2089
  tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2089
  printk("<3>%s %s: unexpected command (%s) in receive_DataRequest\n", tmp___42, tmp___41,
         tmp___40);
#line 2091
  fault_type = 9U;
  }
  ldv_43587: 
#line 2094
  spin_lock_irq(& mdev->req_lock);
#line 2095
  list_add(& e->w.list, & mdev->read_ee);
#line 2096
  spin_unlock_irq(& mdev->req_lock);
#line 2098
  inc_unacked(mdev);
#line 2100
  drbd_generic_make_request(mdev, (int )fault_type, e->private_bio);
#line 2101
  maybe_kick_lo(mdev);
#line 2103
  return (1);
  out_free_e: 
#line 2106
  kfree((void const   *)di);
#line 2107
  put_ldev(mdev);
#line 2108
  drbd_free_ee(mdev, e);
#line 2109
  return (0);
}
}
#line 2112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2114
  rv = -100;
#line 2117
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2118
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2120
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2121
  ch_self = mdev->comm_bm_set;
#line 2123
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2127
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2127
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2127
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2128
  goto ldv_43608;
  case 0: ;
#line 2130
  goto ldv_43608;
  case 1: ;
#line 2132
  if (self == 0 && peer == 1) {
#line 2133
    rv = -1;
#line 2134
    goto ldv_43608;
  } else {

  }
#line 2136
  if (self == 1 && peer == 0) {
#line 2137
    rv = 1;
#line 2138
    goto ldv_43608;
  } else {

  }
  case 2: ;
#line 2142
  if (self == 0 && peer == 1) {
#line 2143
    rv = 1;
#line 2144
    goto ldv_43608;
  } else {

  }
#line 2146
  if (self == 1 && peer == 0) {
#line 2147
    rv = -1;
#line 2148
    goto ldv_43608;
  } else {

  }
#line 2151
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2151
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2151
  printk("<4>%s %s: Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n",
         tmp___2, tmp___1);
  case 3: ;
#line 2154
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2155
    tmp___3 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2155
    rv = tmp___3 != 0 ? -1 : 1;
#line 2157
    goto ldv_43608;
  } else {
#line 2159
    if (ch_peer == 0UL) {
#line 2159
      rv = 1;
#line 2159
      goto ldv_43608;
    } else {

    }
#line 2160
    if (ch_self == 0UL) {
#line 2160
      rv = -1;
#line 2160
      goto ldv_43608;
    } else {

    }
  }
#line 2162
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2163
    goto ldv_43608;
  } else {

  }
  case 4: ;
#line 2165
  if (ch_self < ch_peer) {
#line 2166
    rv = -1;
  } else
#line 2167
  if (ch_self > ch_peer) {
#line 2168
    rv = 1;
  } else {
#line 2171
    tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2171
    rv = tmp___4 != 0 ? -1 : 1;
  }
#line 2173
  goto ldv_43608;
  case 5: 
#line 2175
  rv = -1;
#line 2176
  goto ldv_43608;
  case 6: 
#line 2178
  rv = 1;
  }
  ldv_43608: ;
#line 2181
  return (rv);
}
}
#line 2184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2186
  rv = -100;
#line 2188
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2189
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2191
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2197
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2197
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2197
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2198
  goto ldv_43628;
  case 0: ;
#line 2200
  goto ldv_43628;
  case 7: 
#line 2202
  hg = drbd_asb_recover_0p(mdev);
#line 2203
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 2U) {
#line 2204
    rv = hg;
  } else {

  }
#line 2205
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 2206
    rv = hg;
  } else {

  }
#line 2207
  goto ldv_43628;
  case 10: 
#line 2209
  rv = drbd_asb_recover_0p(mdev);
#line 2210
  goto ldv_43628;
  case 8: ;
#line 2212
  return ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U ? 1 : -1);
  case 9: 
#line 2214
  hg = drbd_asb_recover_0p(mdev);
#line 2215
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 2216
    self = drbd_set_role(mdev, R_SECONDARY, 0);
#line 2220
    val.i = 0U;
#line 2220
    val.ldv_33380.role = 2U;
#line 2220
    mask.i = 0U;
#line 2220
    mask.ldv_33380.role = 3U;
#line 2220
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2221
    if (self != 1) {
#line 2222
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2224
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2224
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2224
      printk("<4>%s %s: Successfully gave up primary role.\n", tmp___2, tmp___1);
#line 2225
      rv = hg;
    }
  } else {
#line 2228
    rv = hg;
  }
  }
  ldv_43628: ;
#line 2231
  return (rv);
}
}
#line 2234 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2236
  rv = -100;
#line 2238
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2239
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2241
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2249
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2249
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2249
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2250
  goto ldv_43652;
  case 10: 
#line 2252
  rv = drbd_asb_recover_0p(mdev);
#line 2253
  goto ldv_43652;
  case 0: ;
#line 2255
  goto ldv_43652;
  case 9: 
#line 2257
  hg = drbd_asb_recover_0p(mdev);
#line 2258
  if (hg == -1) {
#line 2262
    val.i = 0U;
#line 2262
    val.ldv_33380.role = 2U;
#line 2262
    mask.i = 0U;
#line 2262
    mask.ldv_33380.role = 3U;
#line 2262
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2263
    if (self != 1) {
#line 2264
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2266
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2266
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2266
      printk("<4>%s %s: Successfully gave up primary role.\n", tmp___2, tmp___1);
#line 2267
      rv = hg;
    }
  } else {
#line 2270
    rv = hg;
  }
  }
  ldv_43652: ;
#line 2273
  return (rv);
}
}
#line 2276 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2279
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2280
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2280
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2280
    printk("<6>%s %s: %s uuid info vanished while I was looking!\n", tmp___0, tmp,
           text);
#line 2281
    return;
  } else {

  }
#line 2283
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2283
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2283
  printk("<6>%s %s: %s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n", tmp___2,
         tmp___1, text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits,
         flags);
#line 2284
  return;
}
}
#line 2303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  unsigned long tmp___12 ;
  u64 tmp___13 ;

  {
#line 2308
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2309
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2311
  *rule_nr = 10;
#line 2312
  if (self == 4ULL && peer == 4ULL) {
#line 2313
    return (0);
  } else {

  }
#line 2315
  *rule_nr = 20;
#line 2316
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2318
    return (-2);
  } else {

  }
#line 2320
  *rule_nr = 30;
#line 2321
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2323
    return (2);
  } else {

  }
#line 2325
  if (self == peer) {
#line 2328
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2330
      if (mdev->agreed_pro_version <= 90) {
#line 2331
        return (-1001);
      } else {

      }
#line 2333
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2335
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2335
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2335
        printk("<6>%s %s: was SyncSource, missed the resync finished event, corrected myself:\n",
               tmp___0, tmp);
#line 2336
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2338
        if ((int )mdev->state.ldv_33380.disk > 2) {
#line 2338
          tmp___1 = drbd_bm_total_weight(mdev);
#line 2338
          tmp___2 = (u64 )tmp___1;
        } else {
#line 2338
          tmp___2 = 0ULL;
        }
#line 2338
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___2,
                       0ULL);
#line 2340
        *rule_nr = 34;
      } else {
#line 2342
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2342
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2342
        printk("<6>%s %s: was SyncSource (peer failed to write sync_uuid)\n", tmp___4,
               tmp___3);
#line 2343
        *rule_nr = 36;
      }
#line 2346
      return (1);
    } else {

    }
#line 2349
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2351
      if (mdev->agreed_pro_version <= 90) {
#line 2352
        return (-1001);
      } else {

      }
#line 2354
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2356
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2356
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2356
        printk("<6>%s %s: was SyncTarget, peer missed the resync finished event, corrected peer:\n",
               tmp___6, tmp___5);
#line 2358
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2359
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2360
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2362
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2363
        *rule_nr = 35;
      } else {
#line 2365
        tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2365
        tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2365
        printk("<6>%s %s: was SyncTarget (failed to write sync_uuid)\n", tmp___8,
               tmp___7);
#line 2366
        *rule_nr = 37;
      }
#line 2369
      return (-1);
    } else {

    }
#line 2373
    tmp___9 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 2373
    rct = (int )((tmp___9 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2377
    *rule_nr = 40;
#line 2379
    switch (rct) {
    case 0: ;
#line 2380
    return (0);
    case 1: ;
#line 2381
    return (1);
    case 2: ;
#line 2382
    return (-1);
    case 3: 
#line 2384
    dc = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2385
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2389
  *rule_nr = 50;
#line 2390
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2391
  if (self == peer) {
#line 2392
    return (-1);
  } else {

  }
#line 2394
  *rule_nr = 51;
#line 2395
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2396
  if (self == peer) {
#line 2397
    self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2398
    peer = *(mdev->p_uuid + 3UL) & 0xfffffffffffffffeULL;
#line 2399
    if (self == peer) {
#line 2403
      if (mdev->agreed_pro_version <= 90) {
#line 2404
        return (-1001);
      } else {

      }
#line 2406
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2407
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2408
      return (-1);
    } else {

    }
  } else {

  }
#line 2412
  *rule_nr = 60;
#line 2413
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2414
  i = 2;
#line 2414
  goto ldv_43682;
  ldv_43681: 
#line 2415
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2416
  if (self == peer) {
#line 2417
    return (-2);
  } else {

  }
#line 2414
  i = i + 1;
  ldv_43682: ;
#line 2414
  if (i <= 3) {
#line 2415
    goto ldv_43681;
  } else {

  }
#line 2420
  *rule_nr = 70;
#line 2421
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2422
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2423
  if (self == peer) {
#line 2424
    return (1);
  } else {

  }
#line 2426
  *rule_nr = 71;
#line 2427
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2428
  if (self == peer) {
#line 2429
    self = (mdev->ldev)->md.uuid[3] & 0xfffffffffffffffeULL;
#line 2430
    peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2431
    if (self == peer) {
#line 2435
      if (mdev->agreed_pro_version <= 90) {
#line 2436
        return (-1001);
      } else {

      }
#line 2438
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2439
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2441
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2441
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2441
      printk("<6>%s %s: Undid last start of resync:\n", tmp___11, tmp___10);
#line 2443
      if ((int )mdev->state.ldv_33380.disk > 2) {
#line 2443
        tmp___12 = drbd_bm_total_weight(mdev);
#line 2443
        tmp___13 = (u64 )tmp___12;
      } else {
#line 2443
        tmp___13 = 0ULL;
      }
#line 2443
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___13,
                     0ULL);
#line 2446
      return (1);
    } else {

    }
  } else {

  }
#line 2451
  *rule_nr = 80;
#line 2452
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2453
  i = 2;
#line 2453
  goto ldv_43685;
  ldv_43684: 
#line 2454
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2455
  if (self == peer) {
#line 2456
    return (2);
  } else {

  }
#line 2453
  i = i + 1;
  ldv_43685: ;
#line 2453
  if (i <= 3) {
#line 2454
    goto ldv_43684;
  } else {

  }
#line 2459
  *rule_nr = 90;
#line 2460
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2461
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2462
  if (self == peer && self != 0ULL) {
#line 2463
    return (100);
  } else {

  }
#line 2465
  *rule_nr = 100;
#line 2466
  i = 2;
#line 2466
  goto ldv_43691;
  ldv_43690: 
#line 2467
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2468
  j = 2;
#line 2468
  goto ldv_43688;
  ldv_43687: 
#line 2469
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2470
  if (self == peer) {
#line 2471
    return (-100);
  } else {

  }
#line 2468
  j = j + 1;
  ldv_43688: ;
#line 2468
  if (j <= 3) {
#line 2469
    goto ldv_43687;
  } else {

  }
#line 2466
  i = i + 1;
  ldv_43691: ;
#line 2466
  if (i <= 3) {
#line 2467
    goto ldv_43690;
  } else {

  }

#line 2475
  return (-1000);
}
}
#line 2481 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int f ;
  long __x ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int pcount ;
  int forced ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long __x___0 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  long __x___1 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  long __x___2 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  int tmp___32 ;
  long __x___3 ;
  unsigned long tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  unsigned long tmp___36 ;

  {
#line 2485
  rv = C_MASK;
#line 2488
  mydisk = (enum drbd_disk_state )mdev->state.ldv_33380.disk;
#line 2489
  if ((unsigned int )mydisk == 3U) {
#line 2490
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_33380.disk;
  } else {

  }
#line 2492
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2492
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2492
  printk("<6>%s %s: drbd_sync_handshake:\n", tmp___0, tmp);
#line 2493
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2494
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2497
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2499
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2499
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2499
  printk("<6>%s %s: uuid_compare()=%d by rule %d\n", tmp___2, tmp___1, hg, rule_nr);
#line 2501
  if (hg == -1000) {
#line 2502
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2502
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2502
    printk("<1>%s %s: Unrelated data, aborting!\n", tmp___4, tmp___3);
#line 2503
    return (C_MASK);
  } else {

  }
#line 2505
  if (hg == -1001) {
#line 2506
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2506
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2506
    printk("<1>%s %s: To resolve this both sides have to support at least protocol\n",
           tmp___6, tmp___5);
#line 2507
    return (C_MASK);
  } else {

  }
#line 2510
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2512
    if (hg == -100) {
#line 2512
      tmp___7 = 1;
    } else {
#line 2512
      __x = (long )hg;
#line 2512
      if ((__x < 0L ? - __x : __x) == 2L) {
#line 2512
        tmp___7 = 1;
      } else {
#line 2512
        tmp___7 = 0;
      }
    }
#line 2512
    f = tmp___7;
#line 2513
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2514
    if (f != 0) {
#line 2515
      hg = hg * 2;
    } else {

    }
#line 2516
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2516
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2516
    printk("<6>%s %s: Becoming sync %s due to disk states.\n", tmp___9, tmp___8, hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2520
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U)) {
#line 2521
    pcount = ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2523
    forced = hg == -100;
#line 2525
    switch (pcount) {
    case 0: 
#line 2527
    hg = drbd_asb_recover_0p(mdev);
#line 2528
    goto ldv_43708;
    case 1: 
#line 2530
    hg = drbd_asb_recover_1p(mdev);
#line 2531
    goto ldv_43708;
    case 2: 
#line 2533
    hg = drbd_asb_recover_2p(mdev);
#line 2534
    goto ldv_43708;
    }
    ldv_43708: 
#line 2536
    __x___0 = (long )hg;
#line 2536
    if ((__x___0 < 0L ? - __x___0 : __x___0) <= 99L) {
#line 2537
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2537
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2537
      printk("<4>%s %s: Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
             tmp___11, tmp___10, pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2540
      if (forced != 0) {
#line 2541
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2541
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2541
        printk("<4>%s %s: Doing a full sync, since UUIDs where ambiguous.\n", tmp___13,
               tmp___12);
#line 2543
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2548
  if (hg == -100) {
#line 2549
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2550
      hg = -1;
    } else {

    }
#line 2551
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2552
      hg = 1;
    } else {

    }
#line 2554
    __x___1 = (long )hg;
#line 2554
    if ((__x___1 < 0L ? - __x___1 : __x___1) <= 99L) {
#line 2555
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2555
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2555
      printk("<4>%s %s: Split-Brain detected, manually solved. Sync from %s node\n",
             tmp___15, tmp___14, hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2560
  if (hg == -100) {
#line 2565
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2565
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2565
    printk("<1>%s %s: Split-Brain detected, dropping connection!\n", tmp___17, tmp___16);
#line 2566
    drbd_khelper(mdev, (char *)"split-brain");
#line 2567
    return (C_MASK);
  } else {

  }
#line 2570
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2571
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2571
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2571
    printk("<3>%s %s: I shall become SyncSource, but I am inconsistent!\n", tmp___19,
           tmp___18);
#line 2572
    return (C_MASK);
  } else {

  }
#line 2575
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) && (int )mdev->state.ldv_33380.disk > 6) {
#line 2577
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2579
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2582
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2582
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2582
    printk("<3>%s %s: I shall become SyncTarget, but I am primary!\n", tmp___21, tmp___20);
#line 2583
    return (C_MASK);
    case 10: 
#line 2585
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2585
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2585
    printk("<4>%s %s: Becoming SyncTarget, violating the stable-dataassumption\n",
           tmp___23, tmp___22);
    }
  } else {

  }
#line 2590
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2590
    goto _L;
  } else {
#line 2590
    tmp___29 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2590
    if (tmp___29 != 0) {
      _L: /* CIL Label */ 
#line 2591
      if (hg == 0) {
#line 2592
        tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2592
        tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2592
        printk("<6>%s %s: dry-run connect: No resync, would become Connected immediately.\n",
               tmp___25, tmp___24);
      } else {
#line 2594
        __x___2 = (long )hg;
#line 2594
        tmp___26 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2594
        tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2594
        tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2594
        printk("<6>%s %s: dry-run connect: Would become %s, doing a %s resync.", tmp___28,
               tmp___27, tmp___26, (__x___2 < 0L ? - __x___2 : __x___2) > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2597
      return (C_MASK);
    } else {

    }
  }
#line 2600
  __x___3 = (long )hg;
#line 2600
  if ((__x___3 < 0L ? - __x___3 : __x___3) > 1L) {
#line 2601
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2601
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2601
    printk("<6>%s %s: Writing the whole bitmap, full sync required after drbd_sync_handshake.\n",
           tmp___31, tmp___30);
#line 2602
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake");
#line 2602
    if (tmp___32 != 0) {
#line 2603
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2606
  if (hg > 0) {
#line 2607
    rv = C_WF_BITMAP_S;
  } else
#line 2608
  if (hg < 0) {
#line 2609
    rv = C_WF_BITMAP_T;
  } else {
#line 2611
    rv = C_CONNECTED;
#line 2612
    tmp___36 = drbd_bm_total_weight(mdev);
#line 2612
    if (tmp___36 != 0UL) {
#line 2613
      tmp___33 = drbd_bm_total_weight(mdev);
#line 2613
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2613
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2613
      printk("<6>%s %s: No resync, but %lu bits in bitmap!\n", tmp___35, tmp___34,
             tmp___33);
    } else {

    }
  }
#line 2618
  return (rv);
}
}
#line 2622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2625
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2627
    return (0);
  } else {

  }
#line 2630
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2632
    return (1);
  } else {

  }
#line 2635
  if ((unsigned int )peer == (unsigned int )self) {
#line 2636
    return (0);
  } else {

  }
#line 2639
  return (1);
}
}
#line 2642 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_protocol *p ;
  int header_size ;
  int data_size ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  unsigned char *my_alg ;
  int tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  int tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2644
  p = (struct p_protocol *)h;
#line 2648
  p_integrity_alg[0] = '\000';
#line 2648
  tmp = 1U;
#line 2648
  while (1) {
#line 2648
    if (tmp >= 64U) {
#line 2648
      break;
    } else {

    }
#line 2648
    p_integrity_alg[tmp] = (char)0;
#line 2648
    tmp = tmp + 1U;
  }
#line 2650
  header_size = 24;
#line 2651
  data_size = (int )h->length - header_size;
#line 2653
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2653
  if (tmp___0 != header_size) {
#line 2654
    return (0);
  } else {

  }
#line 2656
  tmp___1 = __fswab32(p->protocol);
#line 2656
  p_proto = (int )tmp___1;
#line 2657
  tmp___2 = __fswab32(p->after_sb_0p);
#line 2657
  p_after_sb_0p = (int )tmp___2;
#line 2658
  tmp___3 = __fswab32(p->after_sb_1p);
#line 2658
  p_after_sb_1p = (int )tmp___3;
#line 2659
  tmp___4 = __fswab32(p->after_sb_2p);
#line 2659
  p_after_sb_2p = (int )tmp___4;
#line 2660
  tmp___5 = __fswab32(p->two_primaries);
#line 2660
  p_two_primaries = (int )tmp___5;
#line 2661
  tmp___6 = __fswab32(p->conn_flags);
#line 2661
  cf = (int )tmp___6;
#line 2662
  p_want_lose = cf & 1;
#line 2664
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2666
  if ((cf & 2) != 0) {
#line 2667
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2669
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2670
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2670
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2670
    printk("<3>%s %s: incompatible communication protocols\n", tmp___8, tmp___7);
#line 2671
    goto disconnect;
  } else {

  }
#line 2674
  tmp___11 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2674
  if (tmp___11 != 0) {
#line 2675
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2675
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2675
    printk("<3>%s %s: incompatible after-sb-0pri settings\n", tmp___10, tmp___9);
#line 2676
    goto disconnect;
  } else {

  }
#line 2679
  tmp___14 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2679
  if (tmp___14 != 0) {
#line 2680
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2680
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2680
    printk("<3>%s %s: incompatible after-sb-1pri settings\n", tmp___13, tmp___12);
#line 2681
    goto disconnect;
  } else {

  }
#line 2684
  tmp___17 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2684
  if (tmp___17 != 0) {
#line 2685
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2685
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2685
    printk("<3>%s %s: incompatible after-sb-2pri settings\n", tmp___16, tmp___15);
#line 2686
    goto disconnect;
  } else {

  }
#line 2689
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2690
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2690
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2690
    printk("<3>%s %s: both sides have the \'want_lose\' flag set\n", tmp___19, tmp___18);
#line 2691
    goto disconnect;
  } else {

  }
#line 2694
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2695
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2695
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2695
    printk("<3>%s %s: incompatible setting of the two-primaries options\n", tmp___21,
           tmp___20);
#line 2696
    goto disconnect;
  } else {

  }
#line 2699
  if (mdev->agreed_pro_version > 86) {
#line 2700
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2702
    tmp___22 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2702
    if (tmp___22 != data_size) {
#line 2703
      return (0);
    } else {

    }
#line 2705
    p_integrity_alg[63] = 0;
#line 2706
    tmp___25 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2706
    if (tmp___25 != 0) {
#line 2707
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2707
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2707
      printk("<3>%s %s: incompatible setting of the data-integrity-alg\n", tmp___24,
             tmp___23);
#line 2708
      goto disconnect;
    } else {

    }
#line 2710
    tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2710
    tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2710
    printk("<6>%s %s: data-integrity-alg: %s\n", tmp___27, tmp___26, (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2714
  return (1);
  disconnect: 
#line 2717
  val.i = 0U;
#line 2717
  val.ldv_33380.conn = 1U;
#line 2717
  mask.i = 0U;
#line 2717
  mask.ldv_33380.conn = 31U;
#line 2717
  drbd_force_state(mdev, mask, val);
#line 2718
  return (0);
}
}
#line 2726 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  void *tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;

  {
#line 2731
  if ((int )((signed char )*alg) == 0) {
#line 2732
    return (0);
  } else {

  }
#line 2734
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2735
  tmp___2 = IS_ERR((void const   *)tfm);
#line 2735
  if (tmp___2 != 0L) {
#line 2736
    tmp = PTR_ERR((void const   *)tfm);
#line 2736
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2736
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2736
    printk("<3>%s %s: Can not allocate \"%s\" as %s (reason: %ld)\n", tmp___1, tmp___0,
           alg, name, tmp);
#line 2738
    return (tfm);
  } else {

  }
#line 2740
  tmp___6 = crypto_hash_tfm(tfm);
#line 2740
  tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 2740
  if (tmp___7 == 0) {
#line 2741
    crypto_free_hash(tfm);
#line 2742
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2742
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2742
    printk("<3>%s %s: \"%s\" is not a digest (%s)\n", tmp___4, tmp___3, alg, name);
#line 2743
    tmp___5 = ERR_PTR(-22L);
#line 2743
    return ((struct crypto_hash *)tmp___5);
  } else {

  }
#line 2745
  return (tfm);
}
}
#line 2748 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int ok ;
  struct p_rs_param_89 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  long tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  long tmp___20 ;
  int tmp___21 ;
  size_t tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  size_t tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2750
  ok = 1;
#line 2751
  p = (struct p_rs_param_89 *)h;
#line 2753
  verify_tfm = 0;
#line 2754
  csums_tfm = 0;
#line 2755
  apv = mdev->agreed_pro_version;
#line 2757
  exp_max_sz = apv > 87 ? (apv == 88 ? 76U : 140U) : 12U;
#line 2762
  if ((unsigned int )h->length > exp_max_sz) {
#line 2763
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2763
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2763
    printk("<3>%s %s: SyncParam packet too long: received %u, expected <= %u bytes\n",
           tmp___0, tmp, (int )h->length, exp_max_sz);
#line 2765
    return (0);
  } else {

  }
#line 2768
  if (apv <= 88) {
#line 2769
    header_size = 4U;
#line 2770
    data_size = (unsigned int )h->length - header_size;
  } else {
#line 2772
    header_size = 132U;
#line 2773
    data_size = (unsigned int )h->length - header_size;
#line 2774
    if (data_size != 0U) {
#line 2774
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2774
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2774
      printk("<3>%s %s: ASSERT( data_size == 0 ) in %s:%d\n", tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             2774);
    } else {

    }
  }
#line 2778
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2780
  tmp___3 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2780
  if ((unsigned int )tmp___3 != header_size) {
#line 2781
    return (0);
  } else {

  }
#line 2783
  tmp___4 = __fswab32(p->rate);
#line 2783
  mdev->sync_conf.rate = (int )tmp___4;
#line 2785
  if (apv > 87) {
#line 2786
    if (apv == 88) {
#line 2787
      if (data_size > 64U) {
#line 2788
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2788
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2788
        printk("<3>%s %s: verify-alg too long, peer wants %u, accepting only %u byte\n",
               tmp___6, tmp___5, data_size, 64);
#line 2791
        return (0);
      } else {

      }
#line 2794
      tmp___7 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2794
      if ((unsigned int )tmp___7 != data_size) {
#line 2795
        return (0);
      } else {

      }
#line 2799
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2799
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2799
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2799
        printk("<3>%s %s: ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n", tmp___9,
               tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
               2799);
      } else {

      }
#line 2800
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2805
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2805
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2805
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2805
        printk("<3>%s %s: ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
               tmp___11, tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
               2805);
      } else {

      }
#line 2806
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2806
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2806
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2806
        printk("<3>%s %s: ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
               tmp___13, tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
               2806);
      } else {

      }
#line 2807
      p->verify_alg[63] = 0;
#line 2808
      p->csums_alg[63] = 0;
    }
#line 2811
    tmp___17 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2811
    if (tmp___17 != 0) {
#line 2812
      if ((unsigned int )*((unsigned short *)mdev + 902UL) == 144U) {
#line 2813
        tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2813
        tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2813
        printk("<3>%s %s: Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
               tmp___15, tmp___14, (unsigned char *)(& mdev->sync_conf.verify_alg),
               (char *)(& p->verify_alg));
#line 2815
        goto disconnect;
      } else {

      }
#line 2817
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2819
      tmp___16 = IS_ERR((void const   *)verify_tfm);
#line 2819
      if (tmp___16 != 0L) {
#line 2820
        verify_tfm = 0;
#line 2821
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2825
    if (apv > 88) {
#line 2825
      tmp___21 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2825
      if (tmp___21 != 0) {
#line 2826
        if ((unsigned int )*((unsigned short *)mdev + 902UL) == 144U) {
#line 2827
          tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2827
          tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2827
          printk("<3>%s %s: Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                 tmp___19, tmp___18, (unsigned char *)(& mdev->sync_conf.csums_alg),
                 (char *)(& p->csums_alg));
#line 2829
          goto disconnect;
        } else {

        }
#line 2831
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2833
        tmp___20 = IS_ERR((void const   *)csums_tfm);
#line 2833
        if (tmp___20 != 0L) {
#line 2834
          csums_tfm = 0;
#line 2835
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2840
    spin_lock(& mdev->peer_seq_lock);
#line 2842
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2843
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2844
      tmp___22 = strlen((char const   *)(& p->verify_alg));
#line 2844
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___22 + 1U);
#line 2845
      crypto_free_hash(mdev->verify_tfm);
#line 2846
      mdev->verify_tfm = verify_tfm;
#line 2847
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2847
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2847
      printk("<6>%s %s: using verify-alg: \"%s\"\n", tmp___24, tmp___23, (char *)(& p->verify_alg));
    } else {

    }
#line 2849
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2850
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2851
      tmp___25 = strlen((char const   *)(& p->csums_alg));
#line 2851
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___25 + 1U);
#line 2852
      crypto_free_hash(mdev->csums_tfm);
#line 2853
      mdev->csums_tfm = csums_tfm;
#line 2854
      tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2854
      tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2854
      printk("<6>%s %s: using csums-alg: \"%s\"\n", tmp___27, tmp___26, (char *)(& p->csums_alg));
    } else {

    }
#line 2856
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2859
  return (ok);
  disconnect: 
#line 2863
  crypto_free_hash(csums_tfm);
#line 2865
  crypto_free_hash(verify_tfm);
#line 2866
  val.i = 0U;
#line 2866
  val.ldv_33380.conn = 1U;
#line 2866
  mask.i = 0U;
#line 2866
  mask.ldv_33380.conn = 31U;
#line 2866
  drbd_force_state(mdev, mask, val);
#line 2867
  return (0);
}
}
#line 2870 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setup_order_type(struct drbd_conf *mdev , int peer ) 
{ 


  {
#line 2872
  return;
}
}
#line 2877 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 2881
  if (a == 0UL || b == 0UL) {
#line 2882
    return;
  } else {

  }
#line 2883
  d = a > b ? a - b : b - a;
#line 2884
  if (a >> 3 < d || b >> 3 < d) {
#line 2885
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2885
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2885
    printk("<4>%s %s: Considerable difference in %s: %llus vs. %llus\n", tmp___0,
           tmp, s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2886
  return;
}
}
#line 2889 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  unsigned int max_seg_s ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum drbd_conns nconn ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___6 ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  union drbd_state val___3 ;
  union drbd_state mask___3 ;
  int tmp___16 ;
  int tmp___17 ;
  sector_t tmp___18 ;
  __u32 tmp___19 ;
  unsigned int tmp___20 ;
  __u32 tmp___21 ;
  int tmp___22 ;
  __u64 tmp___23 ;
  sector_t tmp___24 ;
  int tmp___25 ;

  {
#line 2891
  p = (struct p_sizes *)h;
#line 2892
  dd = 0;
#line 2895
  ldsc = 0;
#line 2898
  _b = (unsigned int )h->length != 32U;
#line 2898
  if (_b != 0) {
#line 2898
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2898
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2898
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_sizes", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           2898);
  } else {

  }
#line 2898
  if (_b != 0) {
#line 2898
    return (0);
  } else {

  }
#line 2899
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 2899
  if (tmp___1 != (int )h->length) {
#line 2900
    return (0);
  } else {

  }
#line 2902
  tmp___2 = __fswab64(p->d_size);
#line 2902
  p_size = (sector_t )tmp___2;
#line 2903
  tmp___3 = __fswab64(p->u_size);
#line 2903
  p_usize = (sector_t )tmp___3;
#line 2905
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 1805UL) == 0U) {
#line 2906
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2906
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2906
    printk("<3>%s %s: some backing storage is needed\n", tmp___5, tmp___4);
#line 2907
    val.i = 0U;
#line 2907
    val.ldv_33380.conn = 1U;
#line 2907
    mask.i = 0U;
#line 2907
    mask.ldv_33380.conn = 31U;
#line 2907
    drbd_force_state(mdev, mask, val);
#line 2908
    return (0);
  } else {

  }
#line 2913
  mdev->p_size = p_size;
#line 2916
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2916
  if (tmp___14 != 0) {
#line 2917
    tmp___6 = drbd_get_max_capacity(mdev->ldev);
#line 2917
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___6);
#line 2919
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 2924
    if ((unsigned int )*((unsigned short *)mdev + 902UL) == 144U) {
#line 2925
      if ((unsigned long )(mdev->ldev)->dc.disk_size != 0UL) {
#line 2925
        if (p_usize == 0UL) {
#line 2925
          tmp___7 = (unsigned long )(mdev->ldev)->dc.disk_size;
        } else {
#line 2925
          _min1 = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 2925
          _min2 = p_usize;
#line 2925
          tmp___7 = _min1 < _min2 ? _min1 : _min2;
        }
#line 2925
        p_usize = tmp___7;
      } else {
#line 2925
        p_usize = p_usize;
      }
    } else {

    }
#line 2928
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2930
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 2931
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 2932
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2932
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2932
      printk("<6>%s %s: Peer sets u_size to %lu sectors\n", tmp___9, tmp___8, (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 2938
    tmp___12 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 2938
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 2938
    if ((tmp___12 < tmp___13 && (int )mdev->state.ldv_33380.disk > 4) && (int )mdev->state.ldv_33380.conn <= 9) {
#line 2942
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2942
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2942
      printk("<3>%s %s: The peer\'s disk size is too small!\n", tmp___11, tmp___10);
#line 2943
      val___0.i = 0U;
#line 2943
      val___0.ldv_33380.conn = 1U;
#line 2943
      mask___0.i = 0U;
#line 2943
      mask___0.ldv_33380.conn = 31U;
#line 2943
      drbd_force_state(mdev, mask___0, val___0);
#line 2944
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 2945
      put_ldev(mdev);
#line 2946
      return (0);
    } else {

    }
#line 2948
    put_ldev(mdev);
  } else {

  }
#line 2952
  tmp___15 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2952
  if (tmp___15 != 0) {
#line 2953
    dd = drbd_determin_dev_size(mdev, 0);
#line 2954
    put_ldev(mdev);
#line 2955
    if ((int )dd == -1) {
#line 2956
      return (0);
    } else {

    }
#line 2957
    drbd_md_sync(mdev);
  } else {
#line 2960
    drbd_set_my_capacity(mdev, p_size);
  }
#line 2963
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )mdev->state.ldv_33380.conn <= 10) {
#line 2963
    tmp___17 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2963
    if (tmp___17 != 0) {
#line 2964
      nconn = drbd_sync_handshake(mdev, (enum drbd_role )mdev->state.ldv_33380.peer,
                                  (enum drbd_disk_state )mdev->state.ldv_33380.pdsk);
#line 2966
      put_ldev(mdev);
#line 2968
      if ((unsigned int )nconn == 31U) {
#line 2969
        val___1.i = 0U;
#line 2969
        val___1.ldv_33380.conn = 1U;
#line 2969
        mask___1.i = 0U;
#line 2969
        mask___1.ldv_33380.conn = 31U;
#line 2969
        drbd_force_state(mdev, mask___1, val___1);
#line 2970
        return (0);
      } else {

      }
#line 2973
      val___3.i = 0U;
#line 2973
      val___3.ldv_33380.conn = (unsigned char )nconn;
#line 2973
      mask___3.i = 0U;
#line 2973
      mask___3.ldv_33380.conn = 31U;
#line 2973
      tmp___16 = drbd_request_state(mdev, mask___3, val___3);
#line 2973
      if (tmp___16 <= 0) {
#line 2974
        val___2.i = 0U;
#line 2974
        val___2.ldv_33380.conn = 1U;
#line 2974
        mask___2.i = 0U;
#line 2974
        mask___2.ldv_33380.conn = 31U;
#line 2974
        drbd_force_state(mdev, mask___2, val___2);
#line 2975
        return (0);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2979
  tmp___22 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2979
  if (tmp___22 != 0) {
#line 2980
    tmp___18 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 2980
    if ((mdev->ldev)->known_size != tmp___18) {
#line 2981
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 2982
      ldsc = 1;
    } else {

    }
#line 2985
    tmp___19 = __fswab32(p->max_segment_size);
#line 2985
    max_seg_s = tmp___19;
#line 2986
    tmp___20 = queue_max_segment_size(mdev->rq_queue);
#line 2986
    if (tmp___20 != max_seg_s) {
#line 2987
      drbd_setup_queue_param(mdev, max_seg_s);
    } else {

    }
#line 2989
    tmp___21 = __fswab32(p->queue_order_type);
#line 2989
    drbd_setup_order_type(mdev, (int )tmp___21);
#line 2990
    put_ldev(mdev);
  } else {

  }
#line 2993
  if ((int )mdev->state.ldv_33380.conn > 9) {
#line 2994
    tmp___23 = __fswab64(p->c_size);
#line 2994
    tmp___24 = drbd_get_capacity(mdev->this_bdev);
#line 2994
    if (tmp___23 != (unsigned long long )tmp___24 || ldsc != 0) {
#line 2998
      drbd_send_sizes(mdev, 0);
    } else {

    }
#line 3000
    tmp___25 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3000
    if (tmp___25 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 902UL) == 160U)) {
#line 3002
      if ((int )mdev->state.ldv_33380.pdsk > 3 && (int )mdev->state.ldv_33380.disk > 3) {
#line 3004
        resync_after_online_grow(mdev);
      } else {
#line 3006
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3010
  return (1);
}
}
#line 3013 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  union drbd_state __ns ;
  int tmp___8 ;
  int tmp___9 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___10 ;
  int tmp___11 ;

  {
#line 3015
  p = (struct p_uuids *)h;
#line 3019
  _b = (unsigned int )h->length != 48U;
#line 3019
  if (_b != 0) {
#line 3019
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3019
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3019
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_uuids", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3019);
  } else {

  }
#line 3019
  if (_b != 0) {
#line 3019
    return (0);
  } else {

  }
#line 3020
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3020
  if (tmp___1 != (int )h->length) {
#line 3021
    return (0);
  } else {

  }
#line 3023
  tmp___2 = kmalloc___1(48UL, 16U);
#line 3023
  p_uuid = (u64 *)tmp___2;
#line 3025
  i = 0;
#line 3025
  goto ldv_43830;
  ldv_43829: 
#line 3026
  tmp___3 = __fswab64(p->uuid[i]);
#line 3026
  *(p_uuid + (unsigned long )i) = tmp___3;
#line 3025
  i = i + 1;
  ldv_43830: ;
#line 3025
  if (i <= 5) {
#line 3026
    goto ldv_43829;
  } else {

  }
#line 3028
  kfree((void const   *)mdev->p_uuid);
#line 3029
  mdev->p_uuid = p_uuid;
#line 3031
  if ((((int )mdev->state.ldv_33380.conn <= 9 && (int )mdev->state.ldv_33380.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3035
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3035
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3035
    printk("<3>%s %s: Can only connect to data with current UUID=%016llX\n", tmp___5,
           tmp___4, mdev->ed_uuid);
#line 3037
    val.i = 0U;
#line 3037
    val.ldv_33380.conn = 1U;
#line 3037
    mask.i = 0U;
#line 3037
    mask.ldv_33380.conn = 31U;
#line 3037
    drbd_force_state(mdev, mask, val);
#line 3038
    return (0);
  } else {

  }
#line 3041
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3041
  if (tmp___8 != 0) {
#line 3042
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 902UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3047
    if (skip_initial_sync != 0) {
#line 3048
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3048
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3048
      printk("<6>%s %s: Accepted new current UUID, preparing to skip initial sync\n",
             tmp___7, tmp___6);
#line 3049
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids");
#line 3051
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3052
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3053
      __ns.i = mdev->state.i;
#line 3053
      __ns.ldv_33380.disk = 8U;
#line 3053
      __ns.ldv_33380.pdsk = 8U;
#line 3053
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3055
      drbd_md_sync(mdev);
    } else {

    }
#line 3057
    put_ldev(mdev);
  } else {

  }
#line 3064
  tmp___9 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3064
  if (tmp___9 == 0) {
#line 3064
    goto ldv_43839;
  } else {

  }
#line 3064
  tmp___10 = get_current();
#line 3064
  __wait.flags = 0U;
#line 3064
  __wait.private = (void *)tmp___10;
#line 3064
  __wait.func = & autoremove_wake_function;
#line 3064
  __wait.task_list.next = & __wait.task_list;
#line 3064
  __wait.task_list.prev = & __wait.task_list;
  ldv_43842: 
#line 3064
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3064
  tmp___11 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3064
  if (tmp___11 == 0) {
#line 3064
    goto ldv_43841;
  } else {

  }
#line 3064
  schedule();
#line 3064
  goto ldv_43842;
  ldv_43841: 
#line 3064
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43839: ;
#line 3065
  if ((int )mdev->state.ldv_33380.conn > 9 && (int )mdev->state.ldv_33380.disk <= 3) {
#line 3066
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3068
  return (1);
}
}
#line 3075 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3079
  c_tab[0] = 0;
#line 3079
  c_tab[1] = C_TEAR_DOWN;
#line 3079
  c_tab[2] = 0;
#line 3079
  c_tab[3] = 0;
#line 3079
  c_tab[4] = 0;
#line 3079
  c_tab[5] = 0;
#line 3079
  c_tab[6] = 0;
#line 3079
  c_tab[7] = 0;
#line 3079
  c_tab[8] = 0;
#line 3079
  c_tab[9] = 0;
#line 3079
  c_tab[10] = C_CONNECTED;
#line 3079
  c_tab[11] = C_STARTING_SYNC_T;
#line 3079
  c_tab[12] = C_STARTING_SYNC_S;
#line 3079
  c_tab[13] = 0;
#line 3079
  c_tab[14] = 0;
#line 3079
  c_tab[15] = 0;
#line 3079
  c_tab[16] = 0;
#line 3079
  c_tab[17] = 0;
#line 3079
  c_tab[18] = C_VERIFY_T;
#line 3079
  c_tab[19] = 0;
#line 3079
  c_tab[20] = 0;
#line 3079
  c_tab[21] = 0;
#line 3079
  c_tab[22] = 0;
#line 3079
  c_tab[23] = 0;
#line 3079
  c_tab[24] = 0;
#line 3079
  c_tab[25] = 0;
#line 3079
  c_tab[26] = 0;
#line 3079
  c_tab[27] = 0;
#line 3079
  c_tab[28] = 0;
#line 3079
  c_tab[29] = 0;
#line 3079
  c_tab[30] = 0;
#line 3079
  c_tab[31] = C_MASK;
#line 3089
  ms.i = ps.i;
#line 3091
  ms.ldv_33380.conn = (unsigned char )c_tab[(int )ps.ldv_33380.conn];
#line 3092
  ms.ldv_33380.peer = ps.ldv_33380.role;
#line 3093
  ms.ldv_33380.role = ps.ldv_33380.peer;
#line 3094
  ms.ldv_33380.pdsk = ps.ldv_33380.disk;
#line 3095
  ms.ldv_33380.disk = ps.ldv_33380.pdsk;
#line 3096
  ms.ldv_33380.peer_isp = (unsigned char )((int )ps.ldv_33380.aftr_isp | (int )ps.ldv_33380.user_isp);
#line 3098
  return (ms);
}
}
#line 3101 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  int rv ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3103
  p = (struct p_req_state *)h;
#line 3107
  _b = (unsigned int )h->length != 8U;
#line 3107
  if (_b != 0) {
#line 3107
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3107
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3107
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_req_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3107);
  } else {

  }
#line 3107
  if (_b != 0) {
#line 3107
    return (0);
  } else {

  }
#line 3108
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3108
  if (tmp___1 != (int )h->length) {
#line 3109
    return (0);
  } else {

  }
#line 3111
  tmp___2 = __fswab32(p->mask);
#line 3111
  mask.i = tmp___2;
#line 3112
  tmp___3 = __fswab32(p->val);
#line 3112
  val.i = tmp___3;
#line 3114
  tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3114
  if (tmp___4 != 0) {
#line 3114
    tmp___5 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3114
    if (tmp___5 != 0) {
#line 3116
      drbd_send_sr_reply(mdev, -19);
#line 3117
      return (1);
    } else {

    }
  } else {

  }
#line 3120
  mask = convert_state(mask);
#line 3121
  val = convert_state(val);
#line 3123
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3125
  drbd_send_sr_reply(mdev, rv);
#line 3126
  drbd_md_sync(mdev);
#line 3128
  return (1);
}
}
#line 3131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_state *p ;
  enum drbd_conns nconn ;
  enum drbd_conns oconn ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  int rv ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int cr ;
  int tmp___6 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___12 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 3133
  p = (struct p_state *)h;
#line 3139
  _b = (unsigned int )h->length != 4U;
#line 3139
  if (_b != 0) {
#line 3139
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3139
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3139
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3139);
  } else {

  }
#line 3139
  if (_b != 0) {
#line 3140
    return (0);
  } else {

  }
#line 3142
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3142
  if (tmp___1 != (int )h->length) {
#line 3143
    return (0);
  } else {

  }
#line 3145
  tmp___2 = __fswab32(p->state);
#line 3145
  peer_state.i = tmp___2;
#line 3147
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_33380.disk;
#line 3148
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3149
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3150
    tmp___3 = drbd_disk_str(real_peer_disk);
#line 3150
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3150
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3150
    printk("<6>%s %s: real peer disk state = %s\n", tmp___5, tmp___4, tmp___3);
  } else {

  }
#line 3153
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3155
  nconn = (enum drbd_conns )mdev->state.ldv_33380.conn;
#line 3155
  oconn = nconn;
#line 3156
  spin_unlock_irq(& mdev->req_lock);
#line 3158
  if ((unsigned int )nconn == 9U) {
#line 3159
    nconn = C_CONNECTED;
  } else {

  }
#line 3161
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_33380.disk > 2) {
#line 3161
    tmp___12 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3161
    if (tmp___12 != 0) {
#line 3166
      cr = (unsigned int )oconn <= 9U;
#line 3169
      cr = ((unsigned int )oconn == 10U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)mdev + 1805UL) == 6U)) | cr;
#line 3174
      tmp___6 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 3174
      cr = tmp___6 | cr;
#line 3177
      cr = ((unsigned int )oconn == 10U && ((int )peer_state.ldv_33380.conn > 10 && (int )peer_state.ldv_33380.conn <= 14)) | cr;
#line 3181
      if (cr != 0) {
#line 3182
        nconn = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_33380.role,
                                    real_peer_disk);
      } else {

      }
#line 3184
      put_ldev(mdev);
#line 3185
      if ((unsigned int )nconn == 31U) {
#line 3186
        nconn = C_CONNECTED;
#line 3187
        if ((unsigned int )*((unsigned char *)mdev + 1805UL) == 6U) {
#line 3188
          val.i = 0U;
#line 3188
          val.ldv_33380.disk = 0U;
#line 3188
          mask.i = 0U;
#line 3188
          mask.ldv_33380.disk = 15U;
#line 3188
          drbd_force_state(mdev, mask, val);
        } else
#line 3189
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3190
          tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3190
          tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3190
          printk("<3>%s %s: Disk attach process on the peer node was aborted.\n",
                 tmp___8, tmp___7);
#line 3191
          peer_state.ldv_33380.disk = 0U;
#line 3192
          real_peer_disk = D_DISKLESS;
        } else {
#line 3194
          tmp___9 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3194
          if (tmp___9 != 0) {
#line 3195
            return (0);
          } else {

          }
#line 3196
          if ((unsigned int )oconn != 9U) {
#line 3196
            tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3196
            tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3196
            printk("<3>%s %s: ASSERT( oconn == C_WF_REPORT_PARAMS ) in %s:%d\n", tmp___11,
                   tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                   3196);
          } else {

          }
#line 3197
          val___0.i = 0U;
#line 3197
          val___0.ldv_33380.conn = 1U;
#line 3197
          mask___0.i = 0U;
#line 3197
          mask___0.ldv_33380.conn = 31U;
#line 3197
          drbd_force_state(mdev, mask___0, val___0);
#line 3198
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3203
  spin_lock_irq(& mdev->req_lock);
#line 3204
  if ((unsigned int )mdev->state.ldv_33380.conn != (unsigned int )oconn) {
#line 3205
    goto retry;
  } else {

  }
#line 3206
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 3207
  ns.i = mdev->state.i;
#line 3208
  ns.ldv_33380.conn = (unsigned char )nconn;
#line 3209
  ns.ldv_33380.peer = peer_state.ldv_33380.role;
#line 3210
  ns.ldv_33380.pdsk = (unsigned char )real_peer_disk;
#line 3211
  ns.ldv_33380.peer_isp = (unsigned char )((int )peer_state.ldv_33380.aftr_isp | (int )peer_state.ldv_33380.user_isp);
#line 3212
  if (((unsigned int )nconn == 10U || (unsigned int )nconn == 13U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3213
    ns.ldv_33380.disk = mdev->new_state_tmp.ldv_33380.disk;
  } else {

  }
#line 3215
  rv = _drbd_set_state(mdev, ns, 3, 0);
#line 3216
  ns = mdev->state;
#line 3217
  spin_unlock_irq(& mdev->req_lock);
#line 3219
  if (rv <= 0) {
#line 3220
    val___1.i = 0U;
#line 3220
    val___1.ldv_33380.conn = 1U;
#line 3220
    mask___1.i = 0U;
#line 3220
    mask___1.ldv_33380.conn = 31U;
#line 3220
    drbd_force_state(mdev, mask___1, val___1);
#line 3221
    return (0);
  } else {

  }
#line 3224
  if ((unsigned int )oconn > 9U) {
#line 3225
    if (((unsigned int )nconn > 10U && (int )peer_state.ldv_33380.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3230
      drbd_send_uuids(mdev);
#line 3231
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3235
  (mdev->net_conf)->want_lose = 0U;
#line 3237
  drbd_md_sync(mdev);
#line 3239
  return (1);
}
}
#line 3242 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int _b ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 3244
  p = (struct p_rs_uuid *)h;
#line 3246
  if (((unsigned int )*((unsigned short *)mdev + 902UL) == 240U || (int )mdev->state.ldv_33380.conn <= 9) || (int )mdev->state.ldv_33380.disk <= 2) {
#line 3246
    goto ldv_43892;
  } else {

  }
#line 3246
  tmp = get_current();
#line 3246
  __wait.flags = 0U;
#line 3246
  __wait.private = (void *)tmp;
#line 3246
  __wait.func = & autoremove_wake_function;
#line 3246
  __wait.task_list.next = & __wait.task_list;
#line 3246
  __wait.task_list.prev = & __wait.task_list;
  ldv_43895: 
#line 3246
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3246
  if (((unsigned int )*((unsigned short *)mdev + 902UL) == 240U || (int )mdev->state.ldv_33380.conn <= 9) || (int )mdev->state.ldv_33380.disk <= 2) {
#line 3246
    goto ldv_43894;
  } else {

  }
#line 3246
  schedule();
#line 3246
  goto ldv_43895;
  ldv_43894: 
#line 3246
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43892: 
#line 3253
  _b = (unsigned int )h->length != 8U;
#line 3253
  if (_b != 0) {
#line 3253
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3253
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3253
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "receive_sync_uuid",
           (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3253);
  } else {

  }
#line 3253
  if (_b != 0) {
#line 3253
    return (0);
  } else {

  }
#line 3254
  tmp___2 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3254
  if (tmp___2 != (int )h->length) {
#line 3255
    return (0);
  } else {

  }
#line 3259
  tmp___6 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3259
  if (tmp___6 != 0) {
#line 3260
    tmp___3 = __fswab64(p->uuid);
#line 3260
    _drbd_uuid_set(mdev, 0, tmp___3);
#line 3261
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3263
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3265
    put_ldev(mdev);
  } else {
#line 3267
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3267
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3267
    printk("<3>%s %s: Ignoring SyncUUID packet!\n", tmp___5, tmp___4);
  }
#line 3269
  return (1);
}
}
#line 3275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret receive_bitmap_plain(struct drbd_conf *mdev , struct p_header *h ,
                                                    unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3278
  __min1 = 511UL;
#line 3278
  __min2 = c->bm_words - c->word_offset;
#line 3278
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3279
  want = num_words * 8U;
#line 3281
  if ((unsigned int )h->length != want) {
#line 3282
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3282
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3282
    printk("<3>%s %s: %s:want (%u) != h->length (%u)\n", tmp___0, tmp, "receive_bitmap_plain",
           want, (int )h->length);
#line 3283
    return (FAILED);
  } else {

  }
#line 3285
  if (want == 0U) {
#line 3286
    return (DONE);
  } else {

  }
#line 3287
  tmp___1 = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3287
  if ((unsigned int )tmp___1 != want) {
#line 3288
    return (FAILED);
  } else {

  }
#line 3290
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3292
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3293
  c->bit_offset = c->word_offset * 64UL;
#line 3294
  if (c->bit_offset > c->bm_bits) {
#line 3295
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3297
  return (OK);
}
}
#line 3301 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                                struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  int toggle ;
  int tmp___0 ;
  int have ;
  int bits ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 3309
  s = c->bit_offset;
#line 3311
  len = (int )((unsigned int )p->head.length - 1U);
#line 3312
  tmp___0 = DCBP_get_start(p);
#line 3312
  toggle = tmp___0;
#line 3316
  tmp___1 = DCBP_get_pad_bits(p);
#line 3316
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___1);
#line 3318
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3319
  if (bits < 0) {
#line 3320
    return (FAILED);
  } else {

  }
#line 3322
  have = bits;
#line 3322
  goto ldv_43931;
  ldv_43930: 
#line 3323
  bits = vli_decode_bits(& rl, look_ahead);
#line 3324
  if (bits <= 0) {
#line 3325
    return (FAILED);
  } else {

  }
#line 3327
  if (toggle != 0) {
#line 3328
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3329
    if (c->bm_bits <= e) {
#line 3330
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3330
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3330
      printk("<3>%s %s: bitmap overflow (e:%lu) while decoding bm RLE packet\n", tmp___3,
             tmp___2, e);
#line 3331
      return (FAILED);
    } else {

    }
#line 3333
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3336
  if (have < bits) {
#line 3337
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3337
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3337
    printk("<3>%s %s: bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n", tmp___5,
           tmp___4, have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
           (unsigned int )bs.buf_len);
#line 3341
    return (FAILED);
  } else {

  }
#line 3343
  look_ahead = look_ahead >> bits;
#line 3344
  have = have - bits;
#line 3346
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3347
  if (bits < 0) {
#line 3348
    return (FAILED);
  } else {

  }
#line 3349
  look_ahead = (tmp << have) | look_ahead;
#line 3350
  have = have + bits;
#line 3322
  s = (unsigned long )((unsigned long long )s + rl);
#line 3322
  toggle = toggle == 0;
  ldv_43931: ;
#line 3322
  if (have > 0) {
#line 3323
    goto ldv_43930;
  } else {

  }
#line 3353
  c->bit_offset = s;
#line 3354
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3356
  return (c->bm_bits == s);
}
}
#line 3360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                               struct bm_xfer_ctx *c ) 
{ 
  enum receive_bitmap_ret tmp ;
  enum drbd_bitmap_code tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3364
  tmp___0 = DCBP_get_code(p);
#line 3364
  if ((unsigned int )tmp___0 == 2U) {
#line 3365
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3365
    return (tmp);
  } else {

  }
#line 3371
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3371
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3371
  printk("<3>%s %s: receive_bitmap_c: unknown encoding %u\n", tmp___2, tmp___1, (int )p->encoding);
#line 3372
  val.i = 0U;
#line 3372
  val.ldv_33380.conn = 6U;
#line 3372
  mask.i = 0U;
#line 3372
  mask.ldv_33380.conn = 31U;
#line 3372
  drbd_force_state(mdev, mask, val);
#line 3373
  return (FAILED);
}
}
#line 3376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3380
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3383
  total = c->bytes[0] + c->bytes[1];
#line 3387
  if (total == 0U) {
#line 3388
    return;
  } else {

  }
#line 3391
  if (total >= plain) {
#line 3392
    return;
  } else {

  }
#line 3395
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3398
  if (r > 1000U) {
#line 3399
    r = 1000U;
  } else {

  }
#line 3401
  r = 1000U - r;
#line 3402
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3402
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3402
  printk("<6>%s %s: %s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
         tmp___0, tmp, direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0],
         total, r / 10U, r % 10U);
#line 3403
  return;
}
}
#line 3418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  enum receive_bitmap_ret ret ;
  int ok ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___5 ;
  size_t tmp___6 ;
  struct p_compressed_bm *p ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  size_t __len ;
  void *__ret ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;

  {
#line 3423
  ok = 0;
#line 3425
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3425
  if (tmp == 0) {
#line 3425
    goto ldv_43958;
  } else {

  }
#line 3425
  tmp___0 = get_current();
#line 3425
  __wait.flags = 0U;
#line 3425
  __wait.private = (void *)tmp___0;
#line 3425
  __wait.func = & autoremove_wake_function;
#line 3425
  __wait.task_list.next = & __wait.task_list;
#line 3425
  __wait.task_list.prev = & __wait.task_list;
  ldv_43961: 
#line 3425
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3425
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3425
  if (tmp___1 == 0) {
#line 3425
    goto ldv_43960;
  } else {

  }
#line 3425
  schedule();
#line 3425
  goto ldv_43961;
  ldv_43960: 
#line 3425
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_43958: 
#line 3427
  drbd_bm_lock(mdev, (char *)"receive bitmap");
#line 3431
  tmp___2 = __get_free_pages(16U, 0U);
#line 3431
  buffer = (void *)tmp___2;
#line 3432
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3433
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3433
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3433
    printk("<3>%s %s: failed to allocate one page buffer in %s\n", tmp___4, tmp___3,
           "receive_bitmap");
#line 3434
    goto out;
  } else {

  }
#line 3437
  tmp___5 = drbd_bm_bits(mdev);
#line 3437
  tmp___6 = drbd_bm_words(mdev);
#line 3437
  __constr_expr_0.bm_bits = tmp___5;
#line 3437
  __constr_expr_0.bm_words = tmp___6;
#line 3437
  __constr_expr_0.bit_offset = 0UL;
#line 3437
  __constr_expr_0.word_offset = 0UL;
#line 3437
  __constr_expr_0.packets[0] = 0U;
#line 3437
  __constr_expr_0.packets[1] = 0U;
#line 3437
  __constr_expr_0.bytes[0] = 0U;
#line 3437
  __constr_expr_0.bytes[1] = 0U;
#line 3437
  c = __constr_expr_0;
  ldv_43970: ;
#line 3443
  if ((unsigned int )h->command == 4U) {
#line 3444
    ret = receive_bitmap_plain(mdev, h, (unsigned long *)buffer, & c);
  } else
#line 3445
  if ((unsigned int )h->command == 36U) {
#line 3450
    if ((unsigned int )h->length > 4088U) {
#line 3451
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3451
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3451
      printk("<3>%s %s: ReportCBitmap packet too large\n", tmp___8, tmp___7);
#line 3452
      goto out;
    } else {

    }
#line 3455
    p = (struct p_compressed_bm *)buffer;
#line 3456
    __len = 8UL;
#line 3456
    if (__len > 63UL) {
#line 3456
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3456
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3457
    tmp___9 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )h->length);
#line 3457
    if (tmp___9 != (int )h->length) {
#line 3458
      goto out;
    } else {

    }
#line 3459
    if ((unsigned int )p->head.length <= 1U) {
#line 3460
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3460
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3460
      printk("<3>%s %s: ReportCBitmap packet too small (l:%u)\n", tmp___11, tmp___10,
             (int )p->head.length);
#line 3461
      return (2);
    } else {

    }
#line 3463
    ret = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3465
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3465
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3465
    printk("<4>%s %s: receive_bitmap: h->command neither ReportBitMap nor ReportCBitMap (is 0x%x)",
           tmp___13, tmp___12, (int )h->command);
#line 3466
    goto out;
  }
#line 3469
  c.packets[(unsigned int )h->command == 4U] = c.packets[(unsigned int )h->command == 4U] + 1U;
#line 3470
  c.bytes[(unsigned int )h->command == 4U] = (c.bytes[(unsigned int )h->command == 4U] + (unsigned int )h->length) + 8U;
#line 3472
  if ((unsigned int )ret != 0U) {
#line 3473
    goto ldv_43969;
  } else {

  }
#line 3475
  tmp___14 = drbd_recv_header(mdev, h);
#line 3475
  if (tmp___14 == 0) {
#line 3476
    goto out;
  } else {

  }
#line 3477
  if ((unsigned int )ret == 0U) {
#line 3478
    goto ldv_43970;
  } else {

  }
  ldv_43969: ;
#line 3478
  if ((unsigned int )ret == 2U) {
#line 3479
    goto out;
  } else {

  }
#line 3481
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3483
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 224U) {
#line 3484
    tmp___15 = drbd_send_bitmap(mdev);
#line 3484
    ok = tmp___15 == 0;
#line 3485
    if (ok == 0) {
#line 3486
      goto out;
    } else {

    }
#line 3488
    val.i = 0U;
#line 3488
    val.ldv_33380.conn = 15U;
#line 3488
    mask.i = 0U;
#line 3488
    mask.ldv_33380.conn = 31U;
#line 3488
    ok = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3489
    if (ok != 1) {
#line 3489
      tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3489
      tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3489
      printk("<3>%s %s: ASSERT( ok == SS_SUCCESS ) in %s:%d\n", tmp___17, tmp___16,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             3489);
    } else {

    }
  } else
#line 3490
  if ((unsigned int )*((unsigned short *)mdev + 902UL) != 208U) {
#line 3493
    tmp___18 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33380.conn);
#line 3493
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3493
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3493
    printk("<6>%s %s: unexpected cstate (%s) in receive_bitmap\n", tmp___20, tmp___19,
           tmp___18);
  } else {

  }
#line 3497
  ok = 1;
  out: 
#line 3499
  drbd_bm_unlock(mdev);
#line 3500
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 902UL) == 208U) {
#line 3501
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3502
  free_pages((unsigned long )buffer, 0U);
#line 3503
  return (ok);
}
}
#line 3506 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int __min1 ;
  int __min2 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 3512
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3512
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3512
  printk("<4>%s %s: skipping unknown optional packet type %d, l: %d!\n", tmp___0,
         tmp, (int )h->command, (int )h->length);
#line 3515
  size = (int )h->length;
#line 3516
  goto ldv_43991;
  ldv_43990: 
#line 3517
  __min1 = size;
#line 3517
  __min2 = 128;
#line 3517
  want = __min1 < __min2 ? __min1 : __min2;
#line 3518
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3519
  _b = r <= 0;
#line 3519
  if (_b != 0) {
#line 3519
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3519
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3519
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "receive_skip", (char *)"r <= 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3519);
  } else {

  }
#line 3519
  if (_b != 0) {
#line 3519
    goto ldv_43989;
  } else {

  }
#line 3520
  size = size - r;
  ldv_43991: ;
#line 3516
  if (size > 0) {
#line 3517
    goto ldv_43990;
  } else {

  }
  ldv_43989: ;
#line 3522
  return (size == 0);
}
}
#line 3525 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , struct p_header *h ) 
{ 


  {
#line 3527
  if ((int )mdev->state.ldv_33380.disk > 3) {
#line 3528
    drbd_kick_lo(mdev);
  } else {

  }
#line 3532
  drbd_tcp_quickack(mdev->data.socket);
#line 3534
  return (1);
}
}
#line 3539 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f drbd_default_handler[38U]  = 
#line 3539
  {      & receive_Data,      & receive_DataReply,      & receive_RSDataReply,      & receive_Barrier, 
        & receive_bitmap,      0,      0,      & receive_UnplugRemote, 
        & receive_DataRequest,      & receive_DataRequest,      & receive_SyncParam,      & receive_protocol, 
        & receive_uuids,      & receive_sizes,      & receive_state,      & receive_sync_uuid, 
        0,      0,      & receive_req_state,      0, 
        0,      0,      0,      0, 
        0,      0,      0,      0, 
        0,      0,      & receive_DataRequest,      & receive_DataRequest, 
        0,      & receive_DataRequest,      0,      & receive_SyncParam, 
        & receive_bitmap,      0};
#line 3565 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_cmd_handler)(struct drbd_conf * , struct p_header * )  =    (drbd_cmd_handler_f (**)(struct drbd_conf * ,
                            struct p_header * ))(& drbd_default_handler);
#line 3566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_opt_cmd_handler)(struct drbd_conf * , struct p_header * )  ;
#line 3568 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  int (*handler)(struct drbd_conf * , struct p_header * ) ;
  struct p_header *header ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;

  {
#line 3571
  header = & mdev->data.rbuf.header;
#line 3573
  goto ldv_44021;
  ldv_44020: 
#line 3574
  drbd_thread_current_set_cpu(mdev);
#line 3575
  tmp = drbd_recv_header(mdev, header);
#line 3575
  if (tmp == 0) {
#line 3576
    val.i = 0U;
#line 3576
    val.ldv_33380.conn = 6U;
#line 3576
    mask.i = 0U;
#line 3576
    mask.ldv_33380.conn = 31U;
#line 3576
    drbd_force_state(mdev, mask, val);
#line 3577
    goto ldv_44011;
  } else {

  }
#line 3580
  if ((unsigned int )header->command <= 36U) {
#line 3581
    handler = *(drbd_cmd_handler + (unsigned long )header->command);
  } else
#line 3582
  if ((unsigned int )header->command > 256U && (unsigned int )header->command <= 256U) {
#line 3584
    handler = *(drbd_opt_cmd_handler + ((unsigned long )header->command + 0xffffffffffffff00UL));
  } else
#line 3585
  if ((unsigned int )header->command > 257U) {
#line 3586
    handler = & receive_skip;
  } else {
#line 3588
    handler = 0;
  }
#line 3590
  tmp___2 = __builtin_expect((unsigned long )handler == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                  struct p_header * ))0),
                             0L);
#line 3590
  if (tmp___2 != 0L) {
#line 3591
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3591
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3591
    printk("<3>%s %s: unknown packet type %d, l: %d!\n", tmp___1, tmp___0, (int )header->command,
           (int )header->length);
#line 3593
    val___0.i = 0U;
#line 3593
    val___0.ldv_33380.conn = 6U;
#line 3593
    mask___0.i = 0U;
#line 3593
    mask___0.ldv_33380.conn = 31U;
#line 3593
    drbd_force_state(mdev, mask___0, val___0);
#line 3594
    goto ldv_44011;
  } else {

  }
#line 3596
  tmp___6 = (*handler)(mdev, header);
#line 3596
  tmp___7 = __builtin_expect(tmp___6 == 0, 0L);
#line 3596
  if (tmp___7 != 0L) {
#line 3597
    tmp___3 = cmdname((enum drbd_packets )header->command);
#line 3597
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3597
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3597
    printk("<3>%s %s: error receiving %s, l: %d!\n", tmp___5, tmp___4, tmp___3, (int )header->length);
#line 3599
    val___1.i = 0U;
#line 3599
    val___1.ldv_33380.conn = 6U;
#line 3599
    mask___1.i = 0U;
#line 3599
    mask___1.ldv_33380.conn = 31U;
#line 3599
    drbd_force_state(mdev, mask___1, val___1);
#line 3600
    goto ldv_44011;
  } else {

  }
  ldv_44021: 
#line 3573
  tmp___8 = get_t_state(& mdev->receiver);
#line 3573
  if ((unsigned int )tmp___8 == 1U) {
#line 3574
    goto ldv_44020;
  } else {

  }
  ldv_44011: ;
#line 3578
  return;
}
}
#line 3605 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_fail_pending_reads(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *slot ;
  struct hlist_node *pos ;
  struct hlist_node *tmp ;
  struct drbd_request *req ;
  int i ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  struct hlist_node  const  *__mptr ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;

  {
#line 3616
  spin_lock_irq(& mdev->req_lock);
#line 3617
  i = 0;
#line 3617
  goto ldv_44038;
  ldv_44037: 
#line 3618
  slot = mdev->app_reads_hash + (unsigned long )i;
#line 3619
  pos = slot->first;
#line 3619
  goto ldv_44035;
  ldv_44034: 
#line 3625
  tmp___2 = list_empty((struct list_head  const  *)(& req->w.list));
#line 3625
  if (tmp___2 == 0) {
#line 3625
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3625
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3625
    printk("<3>%s %s: ASSERT( list_empty(&req->w.list) ) in %s:%d\n", tmp___1, tmp___0,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3625);
  } else {

  }
#line 3628
  _req_mod(req, connection_lost_while_pending);
#line 3619
  pos = tmp;
  ldv_44035: ;
#line 3619
  if ((unsigned long )pos != (unsigned long )((struct hlist_node *)0)) {
#line 3619
    tmp = pos->next;
#line 3619
    if (1 != 0) {
#line 3619
      __mptr = (struct hlist_node  const  *)pos;
#line 3619
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 3619
      if (1 != 0) {
#line 3620
        goto ldv_44034;
      } else {
#line 3622
        goto ldv_44036;
      }
    } else {
#line 3622
      goto ldv_44036;
    }
  } else {

  }
  ldv_44036: 
#line 3617
  i = i + 1;
  ldv_44038: ;
#line 3617
  if (i <= 14) {
#line 3618
    goto ldv_44037;
  } else {

  }
#line 3631
  i = 0;
#line 3631
  goto ldv_44041;
  ldv_44040: 
#line 3632
  tmp___5 = hlist_empty((struct hlist_head  const  *)mdev->app_reads_hash + (unsigned long )i);
#line 3632
  if (tmp___5 == 0) {
#line 3633
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3633
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3633
    printk("<4>%s %s: ASSERT FAILED: app_reads_hash[%d].first: %p, should be NULL\n",
           tmp___4, tmp___3, i, (mdev->app_reads_hash + (unsigned long )i)->first);
  } else {

  }
#line 3631
  i = i + 1;
  ldv_44041: ;
#line 3631
  if (i <= 14) {
#line 3632
    goto ldv_44040;
  } else {

  }
#line 3636
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 3637
  spin_unlock_irq(& mdev->req_lock);
#line 3638
  return;
}
}
#line 3640 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3644
  barr.w.cb = & w_prev_work_done;
#line 3645
  init_completion(& barr.done);
#line 3646
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3647
  wait_for_completion(& barr.done);
#line 3648
  return;
}
}
#line 3650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  enum drbd_disk_state nps ;
  enum drbd_disk_state tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  struct hlist_head *h ;
  int tmp___6 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  int tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  int tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  int tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  int tmp___36 ;

  {
#line 3654
  rv = 0;
#line 3657
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 0U) {
#line 3658
    return;
  } else {

  }
#line 3659
  if ((int )mdev->state.ldv_33380.conn > 7) {
#line 3660
    tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_33380.conn);
#line 3660
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3660
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3660
    printk("<3>%s %s: ASSERT FAILED cstate = %s, expected < WFConnection\n", tmp___1,
           tmp___0, tmp);
  } else {

  }
#line 3664
  drbd_thread_stop(& mdev->asender);
#line 3665
  drbd_free_sock(mdev);
#line 3667
  spin_lock_irq(& mdev->req_lock);
#line 3668
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3669
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3670
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3671
  spin_unlock_irq(& mdev->req_lock);
#line 3683
  drbd_rs_cancel_all(mdev);
#line 3684
  mdev->rs_total = 0UL;
#line 3685
  mdev->rs_failed = 0UL;
#line 3686
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3687
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3690
  del_timer_sync(& mdev->resync_timer);
#line 3691
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 3692
  resync_timer_fn((unsigned long )mdev);
#line 3697
  drbd_flush_workqueue(mdev);
#line 3701
  drbd_process_done_ee(mdev);
#line 3703
  kfree((void const   *)mdev->p_uuid);
#line 3704
  mdev->p_uuid = 0;
#line 3706
  if ((unsigned int )*((unsigned char *)mdev + 1806UL) == 0U) {
#line 3707
    tl_clear(mdev);
  } else {

  }
#line 3709
  drbd_fail_pending_reads(mdev);
#line 3711
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3711
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3711
  printk("<6>%s %s: Connection closed\n", tmp___3, tmp___2);
#line 3713
  drbd_md_sync(mdev);
#line 3715
  fp = FP_DONT_CARE;
#line 3716
  tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3716
  if (tmp___4 != 0) {
#line 3717
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3718
    put_ldev(mdev);
  } else {

  }
#line 3721
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 3722
    if ((unsigned int )fp != 0U && (int )mdev->state.ldv_33380.pdsk > 5) {
#line 3723
      tmp___5 = drbd_try_outdate_peer(mdev);
#line 3723
      nps = tmp___5;
#line 3724
      val.i = 0U;
#line 3724
      val.ldv_33380.pdsk = (unsigned char )nps;
#line 3724
      mask.i = 0U;
#line 3724
      mask.ldv_33380.pdsk = 15U;
#line 3724
      drbd_request_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 3728
  spin_lock_irq(& mdev->req_lock);
#line 3729
  os = mdev->state;
#line 3730
  if ((int )os.ldv_33380.conn > 1) {
#line 3732
    ns = os;
#line 3733
    ns.ldv_33380.conn = 2U;
#line 3734
    rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 3736
  spin_unlock_irq(& mdev->req_lock);
#line 3738
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3740
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3740
    if (tmp___6 == 0) {
#line 3740
      goto ldv_44061;
    } else {

    }
#line 3740
    tmp___7 = get_current();
#line 3740
    __wait.flags = 0U;
#line 3740
    __wait.private = (void *)tmp___7;
#line 3740
    __wait.func = & autoremove_wake_function;
#line 3740
    __wait.task_list.next = & __wait.task_list;
#line 3740
    __wait.task_list.prev = & __wait.task_list;
    ldv_44064: 
#line 3740
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3740
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3740
    if (tmp___8 == 0) {
#line 3740
      goto ldv_44063;
    } else {

    }
#line 3740
    schedule();
#line 3740
    goto ldv_44064;
    ldv_44063: 
#line 3740
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_44061: 
#line 3744
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3744
    if (tmp___9 == 0) {
#line 3744
      goto ldv_44065;
    } else {

    }
#line 3744
    tmp___10 = get_current();
#line 3744
    __wait___0.flags = 0U;
#line 3744
    __wait___0.private = (void *)tmp___10;
#line 3744
    __wait___0.func = & autoremove_wake_function;
#line 3744
    __wait___0.task_list.next = & __wait___0.task_list;
#line 3744
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_44068: 
#line 3744
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3744
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3744
    if (tmp___11 == 0) {
#line 3744
      goto ldv_44067;
    } else {

    }
#line 3744
    schedule();
#line 3744
    goto ldv_44068;
    ldv_44067: 
#line 3744
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_44065: 
#line 3746
    spin_lock_irq(& mdev->req_lock);
#line 3748
    h = mdev->ee_hash;
#line 3748
    goto ldv_44070;
    ldv_44069: ;
#line 3749
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3750
      tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3750
      tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3750
      printk("<3>%s %s: ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n", tmp___13,
             tmp___12, (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
    } else {

    }
#line 3748
    h = h + 1;
    ldv_44070: ;
#line 3748
    if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3749
      goto ldv_44069;
    } else {

    }
#line 3752
    kfree((void const   *)mdev->ee_hash);
#line 3753
    mdev->ee_hash = 0;
#line 3754
    mdev->ee_hash_s = 0U;
#line 3757
    h = mdev->tl_hash;
#line 3757
    goto ldv_44073;
    ldv_44072: ;
#line 3758
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3759
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3759
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3759
      printk("<3>%s %s: ASSERT FAILED tl_hash[%u] == %p, expected NULL\n", tmp___15,
             tmp___14, (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
    } else {

    }
#line 3757
    h = h + 1;
    ldv_44073: ;
#line 3757
    if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3758
      goto ldv_44072;
    } else {

    }
#line 3761
    kfree((void const   *)mdev->tl_hash);
#line 3762
    mdev->tl_hash = 0;
#line 3763
    mdev->tl_hash_s = 0U;
#line 3764
    spin_unlock_irq(& mdev->req_lock);
#line 3766
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3767
    mdev->cram_hmac_tfm = 0;
#line 3769
    kfree((void const   *)mdev->net_conf);
#line 3770
    mdev->net_conf = 0;
#line 3771
    val___0.i = 0U;
#line 3771
    val___0.ldv_33380.conn = 0U;
#line 3771
    mask___0.i = 0U;
#line 3771
    mask___0.ldv_33380.conn = 31U;
#line 3771
    drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 3781
  tmp___16 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3781
  i = (unsigned int )tmp___16;
#line 3782
  if (i != 0U) {
#line 3783
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3783
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3783
    printk("<6>%s %s: net_ee not empty, killed %u entries\n", tmp___18, tmp___17,
           i);
  } else {

  }
#line 3784
  tmp___19 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3784
  i = (unsigned int )tmp___19;
#line 3785
  if (i != 0U) {
#line 3786
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3786
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3786
    printk("<6>%s %s: pp_in_use = %u, expected 0\n", tmp___21, tmp___20, i);
  } else {

  }
#line 3788
  tmp___24 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3788
  if (tmp___24 == 0) {
#line 3788
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3788
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3788
    printk("<3>%s %s: ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n", tmp___23,
           tmp___22, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3788);
  } else {

  }
#line 3789
  tmp___27 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3789
  if (tmp___27 == 0) {
#line 3789
    tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3789
    tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3789
    printk("<3>%s %s: ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n", tmp___26,
           tmp___25, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3789);
  } else {

  }
#line 3790
  tmp___30 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3790
  if (tmp___30 == 0) {
#line 3790
    tmp___28 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3790
    tmp___29 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3790
    printk("<3>%s %s: ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n", tmp___29,
           tmp___28, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3790);
  } else {

  }
#line 3791
  tmp___33 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3791
  if (tmp___33 == 0) {
#line 3791
    tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3791
    tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3791
    printk("<3>%s %s: ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n", tmp___32,
           tmp___31, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3791);
  } else {

  }
#line 3794
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3795
  tmp___36 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3795
  if (tmp___36 == 0) {
#line 3795
    tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3795
    tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3795
    printk("<3>%s %s: ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
           tmp___35, tmp___34, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           3795);
  } else {

  }
#line 3796
  return;
}
}
#line 3807 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3810
  p = & mdev->data.sbuf.handshake;
#line 3813
  tmp___1 = ldv_mutex_lock_interruptible_48(& mdev->data.mutex);
#line 3813
  if (tmp___1 != 0) {
#line 3814
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3814
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3814
    printk("<3>%s %s: interrupted during initial handshake\n", tmp___0, tmp);
#line 3815
    return (0);
  } else {

  }
#line 3818
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 3819
    ldv_mutex_unlock_49(& mdev->data.mutex);
#line 3820
    return (0);
  } else {

  }
#line 3823
  memset((void *)p, 0, 80UL);
#line 3824
  p->protocol_min = 1442840576U;
#line 3825
  p->protocol_max = 1543503872U;
#line 3826
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header *)p,
                      80UL, 0U);
#line 3828
  ldv_mutex_unlock_50(& mdev->data.mutex);
#line 3829
  return (ok);
}
}
#line 3839 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 3842
  p = & mdev->data.rbuf.handshake;
#line 3843
  expect = 72;
#line 3847
  rv = drbd_send_handshake(mdev);
#line 3848
  if (rv == 0) {
#line 3849
    return (0);
  } else {

  }
#line 3851
  rv = drbd_recv_header(mdev, & p->head);
#line 3852
  if (rv == 0) {
#line 3853
    return (0);
  } else {

  }
#line 3855
  if ((unsigned int )p->head.command != 65534U) {
#line 3856
    tmp = cmdname((enum drbd_packets )p->head.command);
#line 3856
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3856
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3856
    printk("<3>%s %s: expected HandShake packet, received: %s (0x%04x)\n", tmp___1,
           tmp___0, tmp, (int )p->head.command);
#line 3858
    return (-1);
  } else {

  }
#line 3861
  if ((int )p->head.length != expect) {
#line 3862
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3862
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3862
    printk("<3>%s %s: expected HandShake length: %u, received: %u\n", tmp___3, tmp___2,
           expect, (int )p->head.length);
#line 3864
    return (-1);
  } else {

  }
#line 3867
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 3869
  if (rv != expect) {
#line 3870
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3870
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3870
    printk("<3>%s %s: short read receiving handshake packet: l=%u\n", tmp___5, tmp___4,
           rv);
#line 3871
    return (0);
  } else {

  }
#line 3874
  tmp___6 = __fswab32(p->protocol_min);
#line 3874
  p->protocol_min = tmp___6;
#line 3875
  tmp___7 = __fswab32(p->protocol_max);
#line 3875
  p->protocol_max = tmp___7;
#line 3876
  if (p->protocol_max == 0U) {
#line 3877
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 3879
  if (p->protocol_min > 92U || p->protocol_max <= 85U) {
#line 3881
    goto incompat;
  } else {

  }
#line 3883
  __min1 = 92;
#line 3883
  __min2 = (int )p->protocol_max;
#line 3883
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 3885
  tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3885
  tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3885
  printk("<6>%s %s: Handshake successful: Agreed network protocol version %d\n", tmp___9,
         tmp___8, mdev->agreed_pro_version);
#line 3888
  return (1);
  incompat: 
#line 3891
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3891
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3891
  printk("<3>%s %s: incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
         tmp___11, tmp___10, 86, 92, p->protocol_min, p->protocol_max);
#line 3895
  return (-1);
}
}
#line 3914 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  struct p_header p ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  int rv ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  void *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  void *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  void *tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;

  {
#line 3918
  response = 0;
#line 3919
  right_response = 0;
#line 3920
  peers_ch = 0;
#line 3922
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 3922
  key_len = (unsigned int )tmp;
#line 3927
  desc.tfm = mdev->cram_hmac_tfm;
#line 3928
  desc.flags = 0U;
#line 3930
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 3932
  if (rv != 0) {
#line 3933
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3933
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3933
    printk("<3>%s %s: crypto_hash_setkey() failed with %d\n", tmp___1, tmp___0, rv);
#line 3934
    rv = -1;
#line 3935
    goto fail;
  } else {

  }
#line 3938
  get_random_bytes((void *)(& my_challenge), 64);
#line 3940
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 3941
  if (rv == 0) {
#line 3942
    goto fail;
  } else {

  }
#line 3944
  rv = drbd_recv_header(mdev, & p);
#line 3945
  if (rv == 0) {
#line 3946
    goto fail;
  } else {

  }
#line 3948
  if ((unsigned int )p.command != 16U) {
#line 3949
    tmp___2 = cmdname((enum drbd_packets )p.command);
#line 3949
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3949
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3949
    printk("<3>%s %s: expected AuthChallenge packet, received: %s (0x%04x)\n", tmp___4,
           tmp___3, tmp___2, (int )p.command);
#line 3951
    rv = 0;
#line 3952
    goto fail;
  } else {

  }
#line 3955
  if ((unsigned int )p.length > 128U) {
#line 3956
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3956
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3956
    printk("<3>%s %s: expected AuthChallenge payload too big.\n", tmp___6, tmp___5);
#line 3957
    rv = -1;
#line 3958
    goto fail;
  } else {

  }
#line 3961
  tmp___7 = kmalloc___1((size_t )p.length, 16U);
#line 3961
  peers_ch = (char *)tmp___7;
#line 3962
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 3963
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3963
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3963
    printk("<3>%s %s: kmalloc of peers_ch failed\n", tmp___9, tmp___8);
#line 3964
    rv = -1;
#line 3965
    goto fail;
  } else {

  }
#line 3968
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )p.length);
#line 3970
  if ((int )p.length != rv) {
#line 3971
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3971
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3971
    printk("<3>%s %s: short read AuthChallenge: l=%u\n", tmp___11, tmp___10, rv);
#line 3972
    rv = 0;
#line 3973
    goto fail;
  } else {

  }
#line 3976
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 3977
  tmp___12 = kmalloc___1((size_t )resp_size, 16U);
#line 3977
  response = (char *)tmp___12;
#line 3978
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 3979
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3979
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3979
    printk("<3>%s %s: kmalloc of response failed\n", tmp___14, tmp___13);
#line 3980
    rv = -1;
#line 3981
    goto fail;
  } else {

  }
#line 3984
  sg_init_table(& sg, 1U);
#line 3985
  sg_set_buf(& sg, (void const   *)peers_ch, (unsigned int )p.length);
#line 3987
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 3988
  if (rv != 0) {
#line 3989
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3989
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3989
    printk("<3>%s %s: crypto_hash_digest() failed with %d\n", tmp___16, tmp___15,
           rv);
#line 3990
    rv = -1;
#line 3991
    goto fail;
  } else {

  }
#line 3994
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 3995
  if (rv == 0) {
#line 3996
    goto fail;
  } else {

  }
#line 3998
  rv = drbd_recv_header(mdev, & p);
#line 3999
  if (rv == 0) {
#line 4000
    goto fail;
  } else {

  }
#line 4002
  if ((unsigned int )p.command != 17U) {
#line 4003
    tmp___17 = cmdname((enum drbd_packets )p.command);
#line 4003
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4003
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4003
    printk("<3>%s %s: expected AuthResponse packet, received: %s (0x%04x)\n", tmp___19,
           tmp___18, tmp___17, (int )p.command);
#line 4005
    rv = 0;
#line 4006
    goto fail;
  } else {

  }
#line 4009
  if ((unsigned int )p.length != resp_size) {
#line 4010
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4010
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4010
    printk("<3>%s %s: expected AuthResponse payload of wrong size\n", tmp___21, tmp___20);
#line 4011
    rv = 0;
#line 4012
    goto fail;
  } else {

  }
#line 4015
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4017
  if ((unsigned int )rv != resp_size) {
#line 4018
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4018
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4018
    printk("<3>%s %s: short read receiving AuthResponse: l=%u\n", tmp___23, tmp___22,
           rv);
#line 4019
    rv = 0;
#line 4020
    goto fail;
  } else {

  }
#line 4023
  tmp___24 = kmalloc___1((size_t )resp_size, 16U);
#line 4023
  right_response = (char *)tmp___24;
#line 4024
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4025
    tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4025
    tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4025
    printk("<3>%s %s: kmalloc of right_response failed\n", tmp___26, tmp___25);
#line 4026
    rv = -1;
#line 4027
    goto fail;
  } else {

  }
#line 4030
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4032
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4033
  if (rv != 0) {
#line 4034
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4034
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4034
    printk("<3>%s %s: crypto_hash_digest() failed with %d\n", tmp___28, tmp___27,
           rv);
#line 4035
    rv = -1;
#line 4036
    goto fail;
  } else {

  }
#line 4039
  tmp___29 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4039
  rv = tmp___29 == 0;
#line 4041
  if (rv != 0) {
#line 4042
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4042
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4042
    printk("<6>%s %s: Peer authenticated using %d bytes of \'%s\' HMAC\n", tmp___31,
           tmp___30, resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4045
    rv = -1;
  }
  fail: 
#line 4048
  kfree((void const   *)peers_ch);
#line 4049
  kfree((void const   *)response);
#line 4050
  kfree((void const   *)right_response);
#line 4052
  return (rv);
}
}
#line 4056 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;

  {
#line 4058
  mdev = thi->mdev;
#line 4059
  tmp = mdev_to_minor(mdev);
#line 4059
  minor = tmp;
#line 4062
  tmp___0 = get_current();
#line 4062
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4064
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4064
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4064
  printk("<6>%s %s: receiver (re)started\n", tmp___2, tmp___1);
  ldv_44118: 
#line 4067
  h = drbd_connect(mdev);
#line 4068
  if (h == 0) {
#line 4069
    drbd_disconnect(mdev);
#line 4070
    tmp___3 = get_current();
#line 4070
    tmp___3->state = 1L;
#line 4071
    schedule_timeout(250L);
  } else {

  }
#line 4073
  if (h == -1) {
#line 4074
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4074
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4074
    printk("<4>%s %s: Discarding network configuration.\n", tmp___5, tmp___4);
#line 4075
    val.i = 0U;
#line 4075
    val.ldv_33380.conn = 1U;
#line 4075
    mask.i = 0U;
#line 4075
    mask.ldv_33380.conn = 31U;
#line 4075
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4077
  if (h == 0) {
#line 4078
    goto ldv_44118;
  } else {

  }

#line 4079
  if (h > 0) {
#line 4080
    tmp___6 = get_net_conf(mdev);
#line 4080
    if (tmp___6 != 0) {
#line 4081
      drbdd(mdev);
#line 4082
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4086
  drbd_disconnect(mdev);
#line 4088
  tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4088
  tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4088
  printk("<6>%s %s: receiver terminated\n", tmp___8, tmp___7);
#line 4089
  return (0);
}
}
#line 4094 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 4096
  p = (struct p_req_state_reply *)h;
#line 4098
  tmp = __fswab32(p->retcode);
#line 4098
  retcode = (int )tmp;
#line 4100
  if (retcode > 0) {
#line 4101
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4103
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 4104
    tmp___0 = drbd_set_st_err_str((enum drbd_state_ret_codes )retcode);
#line 4104
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4104
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4104
    printk("<3>%s %s: Requested state change failed by peer: %s (%d)\n", tmp___2,
           tmp___1, tmp___0, retcode);
  }
#line 4107
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4109
  return (1);
}
}
#line 4112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4114
  tmp = drbd_send_ping_ack(mdev);
#line 4114
  return (tmp);
}
}
#line 4118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4121
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4122
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4122
  if (tmp == 0) {
#line 4123
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4125
  return (1);
}
}
#line 4128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 4130
  p = (struct p_block_ack *)h;
#line 4131
  tmp = __fswab64(p->sector);
#line 4131
  sector = (sector_t )tmp;
#line 4132
  tmp___0 = __fswab32(p->blksize);
#line 4132
  blksize = (int )tmp___0;
#line 4134
  if (mdev->agreed_pro_version <= 88) {
#line 4134
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4134
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4134
    printk("<3>%s %s: ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4134);
  } else {

  }
#line 4136
  tmp___3 = __fswab32(p->seq_num);
#line 4136
  update_peer_seq(mdev, tmp___3);
#line 4138
  drbd_rs_complete_io(mdev, sector);
#line 4139
  __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                     4139U);
#line 4141
  mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4142
  atomic_dec(& mdev->rs_pending_cnt);
#line 4142
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4142
  if (tmp___7 < 0) {
#line 4142
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4142
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4142
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4142
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___6, tmp___5, "got_IsInSync",
           4142, tmp___4);
  } else {

  }
#line 4144
  return (1);
}
}
#line 4149 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct hlist_node  const  *__mptr ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 4152
  tmp = tl_hash_slot(mdev, sector);
#line 4152
  slot = tmp;
#line 4156
  n = slot->first;
#line 4156
  goto ldv_44159;
  ldv_44158: ;
#line 4157
  if ((unsigned long )req == (unsigned long )id) {
#line 4158
    if (req->sector != sector) {
#line 4159
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4159
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4159
      printk("<3>%s %s: _ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
             tmp___1, tmp___0, req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4163
      goto ldv_44157;
    } else {

    }
#line 4165
    return (req);
  } else {

  }
#line 4156
  n = n->next;
  ldv_44159: ;
#line 4156
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4156
    __builtin_prefetch((void const   *)n->next);
#line 4156
    if (1 != 0) {
#line 4156
      __mptr = (struct hlist_node  const  *)n;
#line 4156
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4156
      if (1 != 0) {
#line 4157
        goto ldv_44158;
      } else {
#line 4159
        goto ldv_44157;
      }
    } else {
#line 4159
      goto ldv_44157;
    }
  } else {

  }
  ldv_44157: 
#line 4168
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4168
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4168
  printk("<3>%s %s: _ack_id_to_req: failed to find req %p, sector %llus in list\n",
         tmp___3, tmp___2, (void *)id, (unsigned long long )sector);
#line 4170
  return (0);
}
}
#line 4176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;

  {
#line 4183
  spin_lock_irq(& mdev->req_lock);
#line 4184
  req = (*validator)(mdev, id, sector);
#line 4185
  tmp___1 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 4185
  if (tmp___1 != 0L) {
#line 4186
    spin_unlock_irq(& mdev->req_lock);
#line 4187
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4187
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4187
    printk("<3>%s %s: %s: got a corrupt block_id/sector pair\n", tmp___0, tmp, func);
#line 4188
    return (0);
  } else {

  }
#line 4190
  __req_mod(req, what, & m);
#line 4191
  spin_unlock_irq(& mdev->req_lock);
#line 4193
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4194
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4195
  return (1);
}
}
#line 4198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  __u16 tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;

  {
#line 4200
  p = (struct p_block_ack *)h;
#line 4201
  tmp = __fswab64(p->sector);
#line 4201
  sector = (sector_t )tmp;
#line 4202
  tmp___0 = __fswab32(p->blksize);
#line 4202
  blksize = (int )tmp___0;
#line 4205
  tmp___1 = __fswab32(p->seq_num);
#line 4205
  update_peer_seq(mdev, tmp___1);
#line 4207
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4208
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4208U);
#line 4209
    atomic_dec(& mdev->rs_pending_cnt);
#line 4209
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4209
    if (tmp___5 < 0) {
#line 4209
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4209
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4209
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4209
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
             "got_BlockAck", 4209, tmp___2);
    } else {

    }
#line 4210
    return (1);
  } else {

  }
#line 4212
  tmp___6 = __fswab16((int )h->command);
#line 4212
  switch ((int )tmp___6) {
  case 23: ;
#line 4214
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4214
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4214
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4214
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4214);
  } else {

  }
#line 4215
  what = write_acked_by_peer_and_sis;
#line 4216
  goto ldv_44187;
  case 22: ;
#line 4218
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4218
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4218
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4218
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___10, tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4218);
  } else {

  }
#line 4219
  what = write_acked_by_peer;
#line 4220
  goto ldv_44187;
  case 21: ;
#line 4222
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4222
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4222
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4222
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
           tmp___12, tmp___11, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4222);
  } else {

  }
#line 4223
  what = recv_acked_by_peer;
#line 4224
  goto ldv_44187;
  case 24: ;
#line 4226
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4226
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4226
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4226
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___14, tmp___13, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4226);
  } else {

  }
#line 4227
  what = conflict_discarded_by_peer;
#line 4228
  goto ldv_44187;
  default: 
#line 4230
  tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4230
  tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4230
  printk("<3>%s %s: ASSERT( 0 ) in %s:%d\n", tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
         4230);
#line 4231
  return (0);
  }
  ldv_44187: 
#line 4234
  tmp___17 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                           "got_BlockAck", what);
#line 4234
  return (tmp___17);
}
}
#line 4238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  __u32 tmp___3 ;
  int size ;
  __u32 tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 4240
  p = (struct p_block_ack *)h;
#line 4241
  tmp = __fswab64(p->sector);
#line 4241
  sector = (sector_t )tmp;
#line 4243
  tmp___2 = ___ratelimit(& drbd_ratelimit_state, "got_NegAck");
#line 4243
  if (tmp___2 != 0) {
#line 4244
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4244
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4244
    printk("<4>%s %s: Got NegAck packet. Peer is in troubles?\n", tmp___1, tmp___0);
  } else {

  }
#line 4246
  tmp___3 = __fswab32(p->seq_num);
#line 4246
  update_peer_seq(mdev, tmp___3);
#line 4248
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4249
    tmp___4 = __fswab32(p->blksize);
#line 4249
    size = (int )tmp___4;
#line 4250
    atomic_dec(& mdev->rs_pending_cnt);
#line 4250
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4250
    if (tmp___8 < 0) {
#line 4250
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4250
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4250
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4250
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___7, tmp___6,
             "got_NegAck", 4250, tmp___5);
    } else {

    }
#line 4251
    drbd_rs_failed_io(mdev, sector, size);
#line 4252
    return (1);
  } else {

  }
#line 4254
  tmp___9 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_NegAck", neg_acked);
#line 4254
  return (tmp___9);
}
}
#line 4258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
#line 4260
  p = (struct p_block_ack *)h;
#line 4261
  tmp = __fswab64(p->sector);
#line 4261
  sector = (sector_t )tmp;
#line 4263
  tmp___0 = __fswab32(p->seq_num);
#line 4263
  update_peer_seq(mdev, tmp___0);
#line 4264
  tmp___1 = __fswab32(p->blksize);
#line 4264
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4264
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4264
  printk("<3>%s %s: Got NegDReply; Sector %llus, len %u; Fail original request.\n",
         tmp___3, tmp___2, (unsigned long long )sector, tmp___1);
#line 4267
  tmp___4 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4267
  return (tmp___4);
}
}
#line 4271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
#line 4275
  p = (struct p_block_ack *)h;
#line 4277
  tmp = __fswab64(p->sector);
#line 4277
  sector = (sector_t )tmp;
#line 4278
  tmp___0 = __fswab32(p->blksize);
#line 4278
  size = (int )tmp___0;
#line 4280
  tmp___1 = __fswab32(p->seq_num);
#line 4280
  update_peer_seq(mdev, tmp___1);
#line 4282
  atomic_dec(& mdev->rs_pending_cnt);
#line 4282
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4282
  if (tmp___5 < 0) {
#line 4282
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4282
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4282
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4282
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3, "got_NegRSDReply",
           4282, tmp___2);
  } else {

  }
#line 4284
  tmp___6 = _get_ldev_if_state(mdev, D_FAILED);
#line 4284
  if (tmp___6 != 0) {
#line 4285
    drbd_rs_complete_io(mdev, sector);
#line 4286
    drbd_rs_failed_io(mdev, sector, size);
#line 4287
    put_ldev(mdev);
  } else {

  }
#line 4290
  return (1);
}
}
#line 4293 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;

  {
#line 4295
  p = (struct p_barrier_ack *)h;
#line 4297
  tmp = __fswab32(p->set_size);
#line 4297
  tl_release(mdev, p->barrier, tmp);
#line 4299
  return (1);
}
}
#line 4302 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 4304
  p = (struct p_block_ack *)h;
#line 4309
  tmp = __fswab64(p->sector);
#line 4309
  sector = (sector_t )tmp;
#line 4310
  tmp___0 = __fswab32(p->blksize);
#line 4310
  size = (int )tmp___0;
#line 4312
  tmp___1 = __fswab32(p->seq_num);
#line 4312
  update_peer_seq(mdev, tmp___1);
#line 4314
  tmp___2 = __fswab64(p->block_id);
#line 4314
  if (tmp___2 == 4712ULL) {
#line 4315
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4317
    ov_oos_print(mdev);
  }
#line 4319
  drbd_rs_complete_io(mdev, sector);
#line 4320
  atomic_dec(& mdev->rs_pending_cnt);
#line 4320
  tmp___6 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4320
  if (tmp___6 < 0) {
#line 4320
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4320
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4320
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4320
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___5, tmp___4, "got_OVResult",
           4320, tmp___3);
  } else {

  }
#line 4322
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4322
  if (mdev->ov_left == 0UL) {
#line 4323
    tmp___7 = kmalloc___1(24UL, 16U);
#line 4323
    w = (struct drbd_work *)tmp___7;
#line 4324
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4325
      w->cb = & w_ov_finished;
#line 4326
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4328
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4328
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4328
      printk("<3>%s %s: kmalloc(w) failed.", tmp___9, tmp___8);
#line 4329
      ov_oos_print(mdev);
#line 4330
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4333
  return (1);
}
}
#line 4341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[38U] ;

  {
#line 4343
  asender_tbl[0].pkt_size = 0UL;
#line 4343
  asender_tbl[0].process = 0;
#line 4343
  asender_tbl[1].pkt_size = 0UL;
#line 4343
  asender_tbl[1].process = 0;
#line 4343
  asender_tbl[2].pkt_size = 0UL;
#line 4343
  asender_tbl[2].process = 0;
#line 4343
  asender_tbl[3].pkt_size = 0UL;
#line 4343
  asender_tbl[3].process = 0;
#line 4343
  asender_tbl[4].pkt_size = 0UL;
#line 4343
  asender_tbl[4].process = 0;
#line 4343
  asender_tbl[5].pkt_size = 0UL;
#line 4343
  asender_tbl[5].process = 0;
#line 4343
  asender_tbl[6].pkt_size = 0UL;
#line 4343
  asender_tbl[6].process = 0;
#line 4343
  asender_tbl[7].pkt_size = 0UL;
#line 4343
  asender_tbl[7].process = 0;
#line 4343
  asender_tbl[8].pkt_size = 0UL;
#line 4343
  asender_tbl[8].process = 0;
#line 4343
  asender_tbl[9].pkt_size = 0UL;
#line 4343
  asender_tbl[9].process = 0;
#line 4343
  asender_tbl[10].pkt_size = 0UL;
#line 4343
  asender_tbl[10].process = 0;
#line 4343
  asender_tbl[11].pkt_size = 0UL;
#line 4343
  asender_tbl[11].process = 0;
#line 4343
  asender_tbl[12].pkt_size = 0UL;
#line 4343
  asender_tbl[12].process = 0;
#line 4343
  asender_tbl[13].pkt_size = 0UL;
#line 4343
  asender_tbl[13].process = 0;
#line 4343
  asender_tbl[14].pkt_size = 0UL;
#line 4343
  asender_tbl[14].process = 0;
#line 4343
  asender_tbl[15].pkt_size = 0UL;
#line 4343
  asender_tbl[15].process = 0;
#line 4343
  asender_tbl[16].pkt_size = 0UL;
#line 4343
  asender_tbl[16].process = 0;
#line 4343
  asender_tbl[17].pkt_size = 0UL;
#line 4343
  asender_tbl[17].process = 0;
#line 4343
  asender_tbl[18].pkt_size = 0UL;
#line 4343
  asender_tbl[18].process = 0;
#line 4343
  asender_tbl[19].pkt_size = 8UL;
#line 4343
  asender_tbl[19].process = & got_Ping;
#line 4343
  asender_tbl[20].pkt_size = 8UL;
#line 4343
  asender_tbl[20].process = & got_PingAck;
#line 4343
  asender_tbl[21].pkt_size = 32UL;
#line 4343
  asender_tbl[21].process = & got_BlockAck;
#line 4343
  asender_tbl[22].pkt_size = 32UL;
#line 4343
  asender_tbl[22].process = & got_BlockAck;
#line 4343
  asender_tbl[23].pkt_size = 32UL;
#line 4343
  asender_tbl[23].process = & got_BlockAck;
#line 4343
  asender_tbl[24].pkt_size = 32UL;
#line 4343
  asender_tbl[24].process = & got_BlockAck;
#line 4343
  asender_tbl[25].pkt_size = 32UL;
#line 4343
  asender_tbl[25].process = & got_NegAck;
#line 4343
  asender_tbl[26].pkt_size = 32UL;
#line 4343
  asender_tbl[26].process = & got_NegDReply;
#line 4343
  asender_tbl[27].pkt_size = 32UL;
#line 4343
  asender_tbl[27].process = & got_NegRSDReply;
#line 4343
  asender_tbl[28].pkt_size = 16UL;
#line 4343
  asender_tbl[28].process = & got_BarrierAck;
#line 4343
  asender_tbl[29].pkt_size = 12UL;
#line 4343
  asender_tbl[29].process = & got_RqSReply;
#line 4343
  asender_tbl[30].pkt_size = 0UL;
#line 4343
  asender_tbl[30].process = 0;
#line 4343
  asender_tbl[31].pkt_size = 0UL;
#line 4343
  asender_tbl[31].process = 0;
#line 4343
  asender_tbl[32].pkt_size = 32UL;
#line 4343
  asender_tbl[32].process = & got_OVResult;
#line 4343
  asender_tbl[33].pkt_size = 0UL;
#line 4343
  asender_tbl[33].process = 0;
#line 4343
  asender_tbl[34].pkt_size = 32UL;
#line 4343
  asender_tbl[34].process = & got_IsInSync;
#line 4343
  asender_tbl[35].pkt_size = 0UL;
#line 4343
  asender_tbl[35].process = 0;
#line 4343
  asender_tbl[36].pkt_size = 0UL;
#line 4343
  asender_tbl[36].process = 0;
#line 4343
  asender_tbl[37].pkt_size = 0UL;
#line 4343
  asender_tbl[37].process = 0;
#line 4362
  if (cmd > 37 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header * ))0)) {
#line 4363
    return (0);
  } else {

  }
#line 4364
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  struct task_struct *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  long tmp___21 ;
  __u32 tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  long tmp___25 ;
  __u16 tmp___26 ;
  __u16 tmp___27 ;
  __u32 tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  long tmp___31 ;
  int _b___0 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  int tmp___36 ;
  enum drbd_thread_state tmp___37 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  char const   *tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;

  {
#line 4369
  mdev = thi->mdev;
#line 4370
  h = & mdev->meta.rbuf.header;
#line 4371
  cmd = 0;
#line 4374
  buf = (void *)h;
#line 4375
  received = 0;
#line 4376
  expect = 8;
#line 4379
  tmp = mdev_to_minor(mdev);
#line 4379
  tmp___0 = get_current();
#line 4379
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4381
  tmp___1 = get_current();
#line 4381
  tmp___1->policy = 2U;
#line 4382
  tmp___2 = get_current();
#line 4382
  tmp___2->rt_priority = 2U;
#line 4384
  goto ldv_44265;
  ldv_44269: 
#line 4385
  drbd_thread_current_set_cpu(mdev);
#line 4386
  tmp___6 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4386
  if (tmp___6 != 0) {
#line 4387
    tmp___3 = drbd_send_ping(mdev);
#line 4387
    _b = tmp___3 == 0;
#line 4387
    if (_b != 0) {
#line 4387
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4387
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4387
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "drbd_asender", (char *)"!drbd_send_ping(mdev)",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             4387);
    } else {

    }
#line 4387
    if (_b != 0) {
#line 4387
      goto reconnect;
    } else {

    }
#line 4388
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
  } else {

  }
#line 4394
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4394
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4394
    if (tmp___7 > 3) {
#line 4396
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_44264: 
#line 4398
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4399
  tmp___8 = get_current();
#line 4399
  flush_signals(tmp___8);
#line 4400
  tmp___11 = drbd_process_done_ee(mdev);
#line 4400
  if (tmp___11 == 0) {
#line 4401
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4401
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4401
    printk("<3>%s %s: process_done_ee() = NOT_OK\n", tmp___10, tmp___9);
#line 4402
    goto reconnect;
  } else {

  }
#line 4405
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4406
  spin_lock_irq(& mdev->req_lock);
#line 4407
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4408
  spin_unlock_irq(& mdev->req_lock);
#line 4412
  if (empty != 0) {
#line 4413
    goto ldv_44263;
  } else {

  }
#line 4414
  goto ldv_44264;
  ldv_44263: ;
#line 4416
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4417
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4420
  tmp___12 = get_current();
#line 4420
  tmp___13 = signal_pending(tmp___12);
#line 4420
  if (tmp___13 != 0) {
#line 4421
    goto ldv_44265;
  } else {

  }
#line 4423
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4425
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4427
  tmp___14 = get_current();
#line 4427
  flush_signals(tmp___14);
#line 4439
  tmp___21 = __builtin_expect(rv > 0, 1L);
#line 4439
  if (tmp___21 != 0L) {
#line 4440
    received = received + rv;
#line 4441
    buf = buf + (unsigned long )rv;
  } else
#line 4442
  if (rv == 0) {
#line 4443
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4443
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4443
    printk("<3>%s %s: meta connection shut down by peer.\n", tmp___16, tmp___15);
#line 4444
    goto reconnect;
  } else
#line 4445
  if (rv == -11) {
#line 4446
    if (((mdev->meta.socket)->sk)->sk_rcvtimeo == (long )(((mdev->net_conf)->ping_timeo * 250) / 10)) {
#line 4448
      tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4448
      tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4448
      printk("<3>%s %s: PingAck did not arrive in time.\n", tmp___18, tmp___17);
#line 4449
      goto reconnect;
    } else {

    }
#line 4451
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4452
    goto ldv_44265;
  } else
#line 4453
  if (rv == -4) {
#line 4454
    goto ldv_44265;
  } else {
#line 4456
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4456
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4456
    printk("<3>%s %s: sock_recvmsg returned %d\n", tmp___20, tmp___19, rv);
#line 4457
    goto reconnect;
  }
#line 4460
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4461
    tmp___25 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4461
    if (tmp___25 != 0L) {
#line 4462
      tmp___22 = __fswab32(h->magic);
#line 4462
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4462
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4462
      printk("<3>%s %s: magic?? on meta m: 0x%lx c: %d l: %d\n", tmp___24, tmp___23,
             (long )tmp___22, (int )h->command, (int )h->length);
#line 4465
      goto reconnect;
    } else {

    }
#line 4467
    tmp___26 = __fswab16((int )h->command);
#line 4467
    cmd = get_asender_cmd((int )tmp___26);
#line 4468
    tmp___27 = __fswab16((int )h->length);
#line 4468
    len = (int )tmp___27;
#line 4469
    tmp___31 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4469
    if (tmp___31 != 0L) {
#line 4470
      tmp___28 = __fswab32(h->magic);
#line 4470
      tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4470
      tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4470
      printk("<3>%s %s: unknown command?? on meta m: 0x%lx c: %d l: %d\n", tmp___30,
             tmp___29, (long )tmp___28, (int )h->command, (int )h->length);
#line 4473
      goto disconnect;
    } else {

    }
#line 4475
    expect = (int )cmd->pkt_size;
#line 4476
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4476
    if (_b___0 != 0) {
#line 4476
      tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4476
      tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4476
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___33, tmp___32, "drbd_asender",
             (char *)"len != expect-sizeof(struct p_header)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             4476);
    } else {

    }
#line 4476
    if (_b___0 != 0) {
#line 4477
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4479
  if (received == expect) {
#line 4480
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4480
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4480
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4480
      printk("<3>%s %s: ASSERT( cmd != NULL ) in %s:%d\n", tmp___35, tmp___34, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
             4480);
    } else {

    }
#line 4481
    tmp___36 = (*(cmd->process))(mdev, h);
#line 4481
    if (tmp___36 == 0) {
#line 4482
      goto reconnect;
    } else {

    }
#line 4484
    buf = (void *)h;
#line 4485
    received = 0;
#line 4486
    expect = 8;
#line 4487
    cmd = 0;
  } else {

  }
  ldv_44265: 
#line 4384
  tmp___37 = get_t_state(thi);
#line 4384
  if ((unsigned int )tmp___37 == 1U) {
#line 4385
    goto ldv_44269;
  } else {

  }

#line 4491
  if (0) {
    reconnect: 
#line 4493
    val.i = 0U;
#line 4493
    val.ldv_33380.conn = 5U;
#line 4493
    mask.i = 0U;
#line 4493
    mask.ldv_33380.conn = 31U;
#line 4493
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4495
  if (0) {
    disconnect: 
#line 4497
    val___0.i = 0U;
#line 4497
    val___0.ldv_33380.conn = 1U;
#line 4497
    mask___0.i = 0U;
#line 4497
    mask___0.ldv_33380.conn = 31U;
#line 4497
    drbd_force_state(mdev, mask___0, val___0);
  } else {

  }
#line 4499
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4501
  if ((int )mdev->state.ldv_33380.conn > 9) {
#line 4501
    tmp___38 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4501
    tmp___39 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4501
    printk("<3>%s %s: ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n", tmp___39,
           tmp___38, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
           4501);
  } else {

  }
#line 4502
  tmp___40 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4502
  tmp___41 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4502
  printk("<6>%s %s: asender terminated\n", tmp___41, tmp___40);
#line 4504
  return (0);
}
}
#line 4544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4556
  LDV_IN_INTERRUPT = 1;
#line 4565
  ldv_initialize();
#line 4567
  goto ldv_44298;
  ldv_44297: 
#line 4570
  tmp = nondet_int();
#line 4570
  switch (tmp) {
  default: ;
#line 4572
  goto ldv_44296;
  }
  ldv_44296: ;
  ldv_44298: 
#line 4567
  tmp___0 = nondet_int();
#line 4567
  if (tmp___0 != 0) {
#line 4568
    goto ldv_44297;
  } else {

  }


#line 4581
  ldv_check_final_state();
#line 4584
  return;
}
}
#line 4588 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_45(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4593
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4595
  mutex_lock(ldv_func_arg1);
#line 4596
  return;
}
}
#line 4598 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_46(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4603
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4605
  mutex_unlock(ldv_func_arg1);
#line 4606
  return;
}
}
#line 4608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_47(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4613
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4615
  mutex_unlock(ldv_func_arg1);
#line 4616
  return;
}
}
#line 4618 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_lock_interruptible_48(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4623
  tmp = mutex_lock_interruptible(ldv_func_arg1);
#line 4623
  ldv_func_res = tmp;
#line 4625
  tmp___0 = ldv_mutex_lock_interruptible_mutex_of_drbd_socket(ldv_func_arg1);
#line 4625
  return (tmp___0);
#line 4627
  return (ldv_func_res);
}
}
#line 4630 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_49(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4635
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4637
  mutex_unlock(ldv_func_arg1);
#line 4638
  return;
}
}
#line 4640 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_50(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4645
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4647
  mutex_unlock(ldv_func_arg1);
#line 4648
  return;
}
}
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 590 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 592
  __hlist_del(n);
#line 593
  n->next = 0xdead000000100100UL;
#line 594
  n->pprev = 0xdead000000200200UL;
#line 595
  return;
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 182
  __i = i;
#line 183
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 186
  return (i + __i);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 207
  tmp = atomic_add_return(- i, v);
#line 207
  return (tmp);
}
}
#line 299 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 303
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 155 "include/linux/mutex.h"
void ldv_mutex_unlock_58(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_59(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_57(struct mutex *ldv_func_arg1 ) ;
#line 163 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 88 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_lock_map ;
#line 294 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 296
  rcu_read_lock_sched_notrace();
#line 298
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 300
  return;
}
}
#line 316 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 318
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 320
  rcu_read_lock_sched_notrace();
#line 321
  return;
}
}
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___2(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_11651: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_11651;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___2(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___2(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___2(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 173 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 175
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 175
  if (tmp != 0L) {
#line 176
    if (part->partno != 0) {
#line 177
      __mptr = (struct device  const  *)part->__dev.parent;
#line 177
      return ((struct gendisk *)__mptr + 0xffffffffffffffa0UL);
    } else {
#line 179
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 179
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffffa0UL);
    }
  } else {

  }
#line 181
  return (0);
}
}
#line 326 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 328
  part->in_flight[rw] = part->in_flight[rw] + 1;
#line 329
  if (part->partno != 0) {
#line 330
    tmp = part_to_disk(part);
#line 330
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] + 1;
  } else {

  }
#line 331
  return;
}
}
#line 333 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 335
  part->in_flight[rw] = part->in_flight[rw] - 1;
#line 336
  if (part->partno != 0) {
#line 337
    tmp = part_to_disk(part);
#line 337
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] - 1;
  } else {

  }
#line 338
  return;
}
}
#line 346
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 354 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 355
extern void bio_pair_release(struct bio_pair * ) ;
#line 371
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 793 "include/linux/blkdev.h"
extern void blk_plug_device(struct request_queue * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1108
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1374
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) ;
#line 1376
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1639 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____1(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1641
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1643
  if (forcedetach == 0) {
#line 1644
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1644
    if (tmp___1 != 0) {
#line 1645
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1647
    goto ldv_41597;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1652
  if ((int )mdev->state.ldv_33380.disk > 2) {
#line 1653
    __ns.i = mdev->state.i;
#line 1653
    __ns.ldv_33380.disk = 2U;
#line 1653
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1654
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1657
  goto ldv_41597;
  }
  ldv_41597: ;
#line 1660
  return;
}
}
#line 1885 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1887
  atomic_inc(& mdev->ap_pending_cnt);
#line 1888
  return;
}
}
#line 2039 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2041
  mxb = 1000000;
#line 2042
  tmp = get_net_conf(mdev);
#line 2042
  if (tmp != 0) {
#line 2043
    mxb = (mdev->net_conf)->max_buffers;
#line 2044
    put_net_conf(mdev);
  } else {

  }
#line 2046
  return (mxb);
}
}
#line 2049 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(union drbd_state s ) 
{ 


  {
#line 2055
  switch ((unsigned int )s.ldv_33380.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2068
  goto ldv_41756;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2087
  return (0);
  }
  ldv_41756: ;
#line 2090
  switch ((unsigned int )s.ldv_33380.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2097
  goto ldv_41776;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2106
  return (0);
  }
  ldv_41776: ;
#line 2109
  return (1);
}
}
#line 2112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2114
  tmp = drbd_get_max_buffers(mdev);
#line 2114
  mxb = tmp;
#line 2116
  if ((unsigned int )*((unsigned char *)mdev + 1806UL) != 0U) {
#line 2117
    return (0);
  } else {

  }
#line 2118
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2118
  if (tmp___0 != 0) {
#line 2119
    return (0);
  } else {

  }
#line 2126
  tmp___1 = drbd_state_is_stable(mdev->state);
#line 2126
  if (tmp___1 == 0) {
#line 2127
    return (0);
  } else {

  }
#line 2131
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2131
  if (tmp___2 > mxb) {
#line 2132
    return (0);
  } else {

  }
#line 2133
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2133
  if (tmp___3 != 0) {
#line 2134
    return (0);
  } else {

  }
#line 2135
  return (1);
}
}
#line 2141 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int one_or_two ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 2145
  tmp = get_current();
#line 2145
  wait.flags = 0U;
#line 2145
  wait.private = (void *)tmp;
#line 2145
  wait.func = & autoremove_wake_function;
#line 2145
  wait.task_list.next = & wait.task_list;
#line 2145
  wait.task_list.prev = & wait.task_list;
#line 2155
  spin_lock_irq(& mdev->req_lock);
#line 2156
  goto ldv_41792;
  ldv_41791: 
#line 2157
  prepare_to_wait(& mdev->misc_wait, & wait, 2);
#line 2158
  spin_unlock_irq(& mdev->req_lock);
#line 2159
  schedule();
#line 2160
  finish_wait(& mdev->misc_wait, & wait);
#line 2161
  spin_lock_irq(& mdev->req_lock);
  ldv_41792: 
#line 2156
  tmp___0 = __inc_ap_bio_cond(mdev);
#line 2156
  if (tmp___0 == 0) {
#line 2157
    goto ldv_41791;
  } else {

  }
#line 2163
  atomic_add(one_or_two, & mdev->ap_bio_cnt);
#line 2164
  spin_unlock_irq(& mdev->req_lock);
#line 2165
  return;
}
}
#line 2167 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2169
  tmp = drbd_get_max_buffers(mdev);
#line 2169
  mxb = tmp;
#line 2170
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2170
  ap_bio = tmp___0;
#line 2172
  if (ap_bio < 0) {
#line 2172
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2172
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2172
    printk("<3>%s %s: ASSERT( ap_bio >= 0 ) in %s:%d\n", tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
           2172);
  } else {

  }
#line 2176
  if (ap_bio < mxb) {
#line 2177
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2178
  if (ap_bio == 0) {
#line 2178
    tmp___4 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2178
    if (tmp___4 != 0) {
#line 2179
      tmp___3 = test_and_set_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 2179
      if (tmp___3 == 0) {
#line 2180
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2181
  return;
}
}
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_plug_device(struct drbd_conf *mdev ) 
{ 
  struct request_queue *q ;
  int tmp ;

  {
#line 65
  q = bdev_get_queue(mdev->this_bdev);
#line 67
  spin_lock_irq(q->queue_lock);
#line 72
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& q->queue_flags));
#line 72
  if (tmp == 0) {
#line 73
    blk_plug_device(q);
#line 74
    del_timer(& q->unplug_timer);
  } else {

  }
#line 77
  spin_unlock_irq(q->queue_lock);
#line 78
  return;
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 207
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 207
  if (tmp != 0L) {
#line 207
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (207), "i" (12UL));
    ldv_41910: ;
#line 207
    goto ldv_41910;
  } else {

  }
#line 208
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 216
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 216
  if (tmp != 0L) {
#line 216
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (216), "i" (12UL));
    ldv_41915: ;
#line 216
    goto ldv_41915;
  } else {

  }
#line 217
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 224
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct bio *bio ;
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 250
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 250
  req = (struct drbd_request *)tmp;
#line 252
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 252
  if (tmp___0 != 0L) {
#line 253
    bio = bio_clone(bio_src, 16U);
#line 255
    req->rq_state = 0UL;
#line 256
    req->mdev = mdev;
#line 257
    req->master_bio = bio_src;
#line 258
    req->private_bio = bio;
#line 259
    req->epoch = 0U;
#line 260
    req->sector = bio->bi_sector;
#line 261
    req->size = bio->bi_size;
#line 262
    req->start_time = jiffies;
#line 263
    INIT_HLIST_NODE(& req->colision);
#line 264
    INIT_LIST_HEAD(& req->tl_requests);
#line 265
    INIT_LIST_HEAD(& req->w.list);
#line 267
    bio->bi_private = (void *)req;
#line 268
    bio->bi_end_io = & drbd_endio_pri;
#line 269
    bio->bi_next = 0;
  } else {

  }
#line 271
  return (req);
}
}
#line 292
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 76
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 78
  rcu_read_lock();
#line 78
  switch (4UL) {
  case 1UL: 
#line 78
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 78
  goto ldv_41984;
  case 2UL: 
#line 78
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 78
  goto ldv_41984;
  case 4UL: 
#line 78
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 78
  goto ldv_41984;
  case 8UL: 
#line 78
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 78
  goto ldv_41984;
  default: 
#line 78
  __bad_percpu_size();
  }
  ldv_41984: 
#line 78
  cpu = pfo_ret__;
#line 79
  __vpp_verify = 0;
#line 79
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 79
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 79
  if ((mdev->vdisk)->part0.partno != 0) {
#line 79
    __vpp_verify___0 = 0;
#line 79
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 79
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 79
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 80
  __vpp_verify___1 = 0;
#line 80
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 80
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 80
  if ((mdev->vdisk)->part0.partno != 0) {
#line 80
    __vpp_verify___2 = 0;
#line 80
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 80
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 80
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 81
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 82
  rcu_read_unlock();
#line 83
  return;
}
}
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 88
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 89
  duration = (unsigned long )jiffies - req->start_time;
#line 91
  rcu_read_lock();
#line 91
  switch (4UL) {
  case 1UL: 
#line 91
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 91
  goto ldv_42017;
  case 2UL: 
#line 91
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 91
  goto ldv_42017;
  case 4UL: 
#line 91
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 91
  goto ldv_42017;
  case 8UL: 
#line 91
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 91
  goto ldv_42017;
  default: 
#line 91
  __bad_percpu_size();
  }
  ldv_42017: 
#line 91
  cpu = pfo_ret__;
#line 92
  __vpp_verify = 0;
#line 92
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 92
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 92
  if ((mdev->vdisk)->part0.partno != 0) {
#line 92
    __vpp_verify___0 = 0;
#line 92
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 92
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 92
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 93
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 94
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 95
  rcu_read_unlock();
#line 96
  return;
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 100
  s = req->rq_state;
#line 104
  if ((int )rw == 1) {
#line 111
    list_del(& req->tl_requests);
#line 116
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 117
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                             117U);
    } else {

    }
#line 119
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 120
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         120U);
    } else {

    }
#line 132
    if ((s & 7UL) != 0UL) {
#line 133
      tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 133
      if (tmp___2 != 0) {
#line 134
        drbd_al_complete_io(mdev, req->sector);
#line 135
        put_ldev(mdev);
      } else {
#line 136
        tmp___1 = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 136
        if (tmp___1 != 0) {
#line 137
          tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 137
          tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 137
          printk("<4>%s %s: Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                 tmp___0, tmp, (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 155
  if ((int )rw == 1 && ((s & 7UL) != 0UL && (s & 4UL) == 0UL)) {
#line 157
    if ((unsigned long )((void *)req->w.list.next) != 0xdead000000100100UL) {
#line 157
      tmp___7 = list_empty((struct list_head  const  *)(& req->w.list));
#line 157
      if (tmp___7 == 0) {
#line 161
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 161
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 161
        printk("<3>%s %s: req->w.list.next = %p\n", tmp___4, tmp___3, req->w.list.next);
#line 162
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 162
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 162
        printk("<3>%s %s: req->w.list.prev = %p\n", tmp___6, tmp___5, req->w.list.prev);
      } else {

      }
    } else {

    }
#line 164
    req->w.cb = & w_io_error;
#line 165
    drbd_queue_work(& mdev->data.work, & req->w);
  } else {
#line 168
    drbd_req_free(req);
  }
#line 169
  return;
}
}
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 181
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 181
  if (tmp != 0) {
#line 182
    return;
  } else {

  }
#line 184
  b = mdev->newest_tle;
#line 185
  b->w.cb = & w_send_barrier;
#line 190
  inc_ap_pending(mdev);
#line 191
  drbd_queue_work(& mdev->data.work, & b->w);
#line 192
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 193
  return;
}
}
#line 195 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct hlist_node  const  *__mptr ;
  int tmp___2 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 198
  s = req->rq_state;
#line 206
  if ((int )mdev->state.ldv_33380.conn > 9 && req->epoch == (mdev->newest_tle)->br_number) {
#line 208
    queue_barrier(mdev);
  } else {

  }
#line 213
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 214
    sector = req->sector;
#line 215
    size = (int const   )req->size;
#line 221
    slot = tl_hash_slot___0(mdev, sector);
#line 222
    n = slot->first;
#line 222
    goto ldv_42060;
    ldv_42059: 
#line 223
    tmp___1 = overlaps(sector, size, i->sector, (int )i->size);
#line 223
    if (tmp___1 != 0) {
#line 224
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 224
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 224
      printk("<1>%s %s: LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
             tmp___0, tmp, req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
             i->size);
    } else {

    }
#line 222
    n = n->next;
    ldv_42060: ;
#line 222
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 222
      __builtin_prefetch((void const   *)n->next);
#line 222
      if (1 != 0) {
#line 222
        __mptr = (struct hlist_node  const  *)n;
#line 222
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 222
        if (1 != 0) {
#line 223
          goto ldv_42059;
        } else {
#line 225
          goto ldv_42061;
        }
      } else {
#line 225
        goto ldv_42061;
      }
    } else {

    }
    ldv_42061: 
#line 245
    slot = ee_hash_slot___0(mdev, req->sector);
#line 246
    n = slot->first;
#line 246
    goto ldv_42068;
    ldv_42067: 
#line 247
    tmp___2 = overlaps(sector, size, e->sector, (int )e->size);
#line 247
    if (tmp___2 != 0) {
#line 248
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 249
      goto ldv_42066;
    } else {

    }
#line 246
    n = n->next;
    ldv_42068: ;
#line 246
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 246
      __builtin_prefetch((void const   *)n->next);
#line 246
      if (1 != 0) {
#line 246
        __mptr___0 = (struct hlist_node  const  *)n;
#line 246
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffd8UL;
#line 246
        if (1 != 0) {
#line 247
          goto ldv_42067;
        } else {
#line 249
          goto ldv_42066;
        }
      } else {
#line 249
        goto ldv_42066;
      }
    } else {

    }
    ldv_42066: ;
  } else {

  }
#line 252
  return;
}
}
#line 256 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 259
  bio_endio(m->bio, m->error);
#line 260
  dec_ap_bio(mdev);
#line 261
  return;
}
}
#line 269 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 271
  s = req->rq_state;
#line 272
  mdev = req->mdev;
#line 274
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 285
  if ((s & 16UL) != 0UL) {
#line 286
    return;
  } else {

  }
#line 287
  if ((s & 8UL) != 0UL) {
#line 288
    return;
  } else {

  }
#line 289
  if ((int )s & 1) {
#line 290
    return;
  } else {

  }
#line 292
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 314
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 315
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 315
    error = (int )tmp;
#line 319
    tmp___2 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 319
    if (tmp___2 == 0) {
#line 320
      hlist_del(& req->colision);
    } else
#line 322
    if ((s & 504UL) != 0UL) {
#line 322
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 322
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 322
      printk("<3>%s %s: ASSERT( (s & RQ_NET_MASK) == 0 ) in %s:%d\n", tmp___1, tmp___0,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
             322);
    } else {

    }
#line 325
    if (rw == 1) {
#line 326
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 329
    _drbd_end_io_acct(mdev, req);
#line 331
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 332
    m->bio = req->master_bio;
#line 333
    req->master_bio = 0;
  } else {

  }
#line 336
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 341
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 342
  return;
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int _b ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  struct hlist_node  const  *__mptr ;
  long tmp___11 ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 372
  mdev = req->mdev;
#line 373
  sector = req->sector;
#line 374
  size = (int const   )req->size;
#line 380
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 380
  if (tmp___1 == 0) {
#line 380
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
    printk("<3>%s %s: ASSERT( hlist_unhashed(&req->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           380);
  } else {

  }
#line 382
  tmp___2 = get_net_conf(mdev);
#line 382
  if (tmp___2 == 0) {
#line 383
    return (0);
  } else {

  }
#line 386
  _b = mdev->tl_hash_s == 0U;
#line 386
  if (_b != 0) {
#line 386
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 386
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 386
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "_req_conflicts", (char *)"mdev->tl_hash_s == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           386);
  } else {

  }
#line 386
  if (_b != 0) {
#line 387
    goto out_no_conflict;
  } else {

  }
#line 388
  tmp___5 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 388
  if (tmp___5 != 0L) {
#line 388
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (388), "i" (12UL));
    ldv_42096: ;
#line 388
    goto ldv_42096;
  } else {

  }
#line 391
  slot = tl_hash_slot___0(mdev, sector);
#line 392
  n = slot->first;
#line 392
  goto ldv_42103;
  ldv_42102: 
#line 393
  tmp___10 = overlaps(i->sector, (int )i->size, sector, size);
#line 393
  if (tmp___10 != 0) {
#line 394
    tmp___6 = get_current();
#line 394
    tmp___7 = get_current();
#line 394
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 394
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 394
    printk("<1>%s %s: %s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
           tmp___9, tmp___8, (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
           size, (unsigned long long )i->sector, i->size);
#line 400
    goto out_conflict;
  } else {

  }
#line 392
  n = n->next;
  ldv_42103: ;
#line 392
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 392
    __builtin_prefetch((void const   *)n->next);
#line 392
    if (1 != 0) {
#line 392
      __mptr = (struct hlist_node  const  *)n;
#line 392
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 392
      if (1 != 0) {
#line 393
        goto ldv_42102;
      } else {
#line 395
        goto ldv_42104;
      }
    } else {
#line 395
      goto ldv_42104;
    }
  } else {

  }
  ldv_42104: ;
#line 404
  if (mdev->ee_hash_s != 0U) {
#line 406
    tmp___11 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 406
    if (tmp___11 != 0L) {
#line 406
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (406), "i" (12UL));
      ldv_42105: ;
#line 406
      goto ldv_42105;
    } else {

    }
#line 409
    slot = ee_hash_slot___0(mdev, sector);
#line 410
    n = slot->first;
#line 410
    goto ldv_42111;
    ldv_42110: 
#line 411
    tmp___16 = overlaps(e->sector, (int )e->size, sector, size);
#line 411
    if (tmp___16 != 0) {
#line 412
      tmp___12 = get_current();
#line 412
      tmp___13 = get_current();
#line 412
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 412
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 412
      printk("<1>%s %s: %s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
             tmp___15, tmp___14, (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
             size, (unsigned long long )e->sector, e->size);
#line 418
      goto out_conflict;
    } else {

    }
#line 410
    n = n->next;
    ldv_42111: ;
#line 410
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 410
      __builtin_prefetch((void const   *)n->next);
#line 410
      if (1 != 0) {
#line 410
        __mptr___0 = (struct hlist_node  const  *)n;
#line 410
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffd8UL;
#line 410
        if (1 != 0) {
#line 411
          goto ldv_42110;
        } else {
#line 413
          goto ldv_42112;
        }
      } else {
#line 413
        goto ldv_42112;
      }
    } else {

    }
    ldv_42112: ;
  } else {

  }
  out_no_conflict: 
#line 427
  put_net_conf(mdev);
#line 428
  return (0);
  out_conflict: 
#line 431
  put_net_conf(mdev);
#line 432
  return (1);
}
}
#line 447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  struct hlist_head *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct hlist_head *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;
  int tmp___43 ;
  char const   *tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  char const   *tmp___47 ;
  char const   *tmp___48 ;
  char const   *tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  char const   *tmp___52 ;
  char const   *tmp___53 ;
  int tmp___54 ;

  {
#line 450
  mdev = req->mdev;
#line 451
  m->bio = 0;
#line 453
  switch ((unsigned int )what) {
  default: 
#line 455
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 455
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 455
  printk("<3>%s %s: LOGIC BUG in %s:%u\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
         455);
#line 456
  goto ldv_42120;
  case 1U: ;
#line 467
  if ((req->rq_state & 504UL) != 0UL) {
#line 467
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 467
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 467
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           467);
  } else {

  }
#line 468
  req->rq_state = req->rq_state | 8UL;
#line 469
  inc_ap_pending(mdev);
#line 470
  goto ldv_42120;
  case 2U: ;
#line 474
  if ((req->rq_state & 7UL) != 0UL) {
#line 474
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 474
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 474
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n", tmp___4,
           tmp___3, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           474);
  } else {

  }
#line 475
  req->rq_state = req->rq_state | 1UL;
#line 476
  goto ldv_42120;
  case 19U: ;
#line 479
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 480
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 482
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 484
  req->rq_state = req->rq_state | 6UL;
#line 485
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 487
  _req_may_be_done(req, m);
#line 488
  put_ldev(mdev);
#line 489
  goto ldv_42120;
  case 18U: 
#line 492
  req->rq_state = req->rq_state | 2UL;
#line 493
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 495
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 495
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 495
  printk("<1>%s %s: Local WRITE failed sec=%llus size=%u\n", tmp___6, tmp___5, (unsigned long long )req->sector,
         req->size);
#line 498
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 499
  _req_may_be_done(req, m);
#line 500
  put_ldev(mdev);
#line 501
  goto ldv_42120;
  case 17U: 
#line 505
  req->rq_state = req->rq_state | 2UL;
#line 506
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 507
  _req_may_be_done(req, m);
#line 508
  put_ldev(mdev);
#line 509
  goto ldv_42120;
  case 16U: 
#line 512
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         512U);
#line 514
  req->rq_state = req->rq_state | 2UL;
#line 515
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 517
  tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 517
  tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 517
  printk("<1>%s %s: Local READ failed sec=%llus size=%u\n", tmp___8, tmp___7, (unsigned long long )req->sector,
         req->size);
#line 520
  if ((req->rq_state & 504UL) != 0UL) {
#line 520
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 520
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 520
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n", tmp___10,
           tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           520);
  } else {

  }
#line 521
  req->rq_state = req->rq_state | 8UL;
#line 522
  inc_ap_pending(mdev);
#line 524
  __drbd_chk_io_error____1(mdev, 0, "__req_mod");
#line 525
  put_ldev(mdev);
  case 4U: 
#line 545
  tmp___11 = ar_hash_slot___0(mdev, req->sector);
#line 545
  hlist_add_head(& req->colision, tmp___11);
#line 547
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 549
  if ((req->rq_state & 8UL) == 0UL) {
#line 549
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 549
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 549
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___13,
           tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           549);
  } else {

  }
#line 550
  req->rq_state = req->rq_state | 16UL;
#line 551
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 554
  drbd_queue_work(& mdev->data.work, & req->w);
#line 555
  goto ldv_42120;
  case 3U: 
#line 561
  tmp___14 = tl_hash_slot___0(mdev, req->sector);
#line 561
  hlist_add_head(& req->colision, tmp___14);
#line 581
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 585
  tmp___17 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 585
  if (tmp___17 != 0) {
#line 585
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 585
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 585
    printk("<3>%s %s: ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
           tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           585);
  } else {

  }
#line 587
  req->epoch = (mdev->newest_tle)->br_number;
#line 588
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 592
  (mdev->newest_tle)->n_req = (mdev->newest_tle)->n_req + 1;
#line 595
  if ((req->rq_state & 8UL) == 0UL) {
#line 595
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 595
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 595
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___19,
           tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           595);
  } else {

  }
#line 596
  req->rq_state = req->rq_state | 16UL;
#line 597
  req->w.cb = & w_send_dblock;
#line 598
  drbd_queue_work(& mdev->data.work, & req->w);
#line 601
  if ((mdev->newest_tle)->n_req >= (mdev->net_conf)->max_epoch_size) {
#line 602
    queue_barrier(mdev);
  } else {

  }
#line 604
  goto ldv_42120;
  case 5U: ;
  case 6U: 
#line 611
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 614
  _req_may_be_done(req, m);
#line 615
  goto ldv_42120;
  case 7U: ;
#line 619
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 623
    if ((req->rq_state & 8UL) != 0UL) {
#line 624
      tmp___20 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 624
      if (tmp___20 != 0) {
#line 624
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 624
      tmp___24 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 624
      if (tmp___24 < 0) {
#line 624
        tmp___21 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 624
        tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 624
        tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 624
        printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___23, tmp___22,
               "__req_mod", 624, tmp___21);
      } else {

      }
#line 625
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 626
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 632
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 633
  req->rq_state = req->rq_state | 32UL;
#line 639
  _req_may_be_done(req, m);
#line 640
  goto ldv_42120;
  case 8U: ;
#line 645
  if ((req->rq_state & 8UL) != 0UL) {
#line 646
    tmp___25 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 646
    if (tmp___25 != 0) {
#line 646
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 646
    tmp___29 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 646
    if (tmp___29 < 0) {
#line 646
      tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 646
      tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 646
      tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 646
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___28, tmp___27,
             "__req_mod", 646, tmp___26);
    } else {

    }
  } else {

  }
#line 647
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 648
  req->rq_state = req->rq_state | 64UL;
#line 651
  if ((req->rq_state & 16UL) == 0UL) {
#line 652
    _req_may_be_done(req, m);
  } else {

  }
#line 653
  goto ldv_42120;
  case 11U: 
#line 656
  req->rq_state = req->rq_state | 256UL;
  case 12U: ;
#line 661
  if ((unsigned int )what == 12U) {
#line 662
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 662
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 662
    printk("<1>%s %s: Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
           tmp___31, tmp___30, (unsigned long long )req->sector, req->size);
  } else {

  }
#line 665
  req->rq_state = req->rq_state | 64UL;
  case 10U: ;
  case 9U: 
#line 683
  req->rq_state = req->rq_state | 128UL;
#line 684
  if ((req->rq_state & 8UL) == 0UL) {
#line 684
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 684
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 684
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___33,
           tmp___32, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           684);
  } else {

  }
#line 685
  tmp___34 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 685
  if (tmp___34 != 0) {
#line 685
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 685
  tmp___38 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 685
  if (tmp___38 < 0) {
#line 685
    tmp___35 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 685
    tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 685
    tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 685
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___37, tmp___36,
           "__req_mod", 685, tmp___35);
  } else {

  }
#line 686
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 687
  _req_may_be_done(req, m);
#line 688
  goto ldv_42120;
  case 13U: ;
#line 692
  if ((req->rq_state & 8UL) != 0UL) {
#line 693
    tmp___39 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 693
    if (tmp___39 != 0) {
#line 693
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 693
    tmp___43 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 693
    if (tmp___43 < 0) {
#line 693
      tmp___40 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 693
      tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 693
      tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 693
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___42, tmp___41,
             "__req_mod", 693, tmp___40);
    } else {

    }
  } else {

  }
#line 694
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 696
  req->rq_state = req->rq_state | 64UL;
#line 697
  _req_may_be_done(req, m);
#line 699
  goto ldv_42120;
  case 14U: ;
#line 702
  if ((req->rq_state & 8UL) != 0UL) {
#line 706
    tmp___44 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 706
    tmp___45 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 706
    printk("<3>%s %s: FIXME (barrier_acked but pending)\n", tmp___45, tmp___44);
#line 707
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 709
  if ((req->rq_state & 32UL) == 0UL) {
#line 709
    tmp___46 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 709
    tmp___47 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 709
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_SENT ) in %s:%d\n", tmp___47,
           tmp___46, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           709);
  } else {

  }
#line 710
  req->rq_state = req->rq_state | 64UL;
#line 711
  _req_may_be_done(req, m);
#line 712
  goto ldv_42120;
  case 15U: ;
#line 715
  if ((req->rq_state & 8UL) == 0UL) {
#line 715
    tmp___48 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 715
    tmp___49 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 715
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___49,
           tmp___48, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           715);
  } else {

  }
#line 716
  tmp___50 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 716
  if (tmp___50 != 0) {
#line 716
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 716
  tmp___54 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 716
  if (tmp___54 < 0) {
#line 716
    tmp___51 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 716
    tmp___52 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 716
    tmp___53 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 716
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___53, tmp___52,
           "__req_mod", 716, tmp___51);
  } else {

  }
#line 717
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 718
  req->rq_state = req->rq_state | 192UL;
#line 719
  _req_may_be_done(req, m);
#line 720
  goto ldv_42120;
  }
  ldv_42120: ;
#line 722
  return;
}
}
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 736
  if ((unsigned int )*((unsigned char *)mdev + 1805UL) == 16U) {
#line 737
    return (1);
  } else {

  }
#line 738
  if ((int )mdev->state.ldv_33380.disk > 4) {
#line 739
    return (0);
  } else {

  }
#line 740
  if ((int )mdev->state.ldv_33380.disk <= 3) {
#line 741
    return (0);
  } else {

  }
#line 743
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 744
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 746
  if (sector >= nr_sectors) {
#line 746
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 746
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 746
    printk("<3>%s %s: ASSERT( sector < nr_sectors ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           746);
  } else {

  }
#line 747
  if (esector >= nr_sectors) {
#line 747
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 747
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 747
    printk("<3>%s %s: ASSERT( esector < nr_sectors ) in %s:%d\n", tmp___2, tmp___1,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           747);
  } else {

  }
#line 749
  sbnr = sector >> 3;
#line 750
  ebnr = esector >> 3;
#line 752
  tmp___3 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 752
  return (tmp___3 == 0);
}
}
#line 755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int err ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;

  {
#line 757
  rw = (int const   )bio->bi_rw & (int const   )3;
#line 758
  size = (int const   )bio->bi_size;
#line 759
  sector = bio->bi_sector;
#line 760
  b = 0;
#line 763
  err = -5;
#line 766
  req = drbd_req_new(mdev, bio);
#line 767
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 768
    dec_ap_bio(mdev);
#line 771
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 771
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 771
    printk("<3>%s %s: could not kmalloc() req\n", tmp___0, tmp);
#line 772
    bio_endio(bio, -12);
#line 773
    return (0);
  } else {

  }
#line 776
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 777
  if (local == 0) {
#line 778
    bio_put(req->private_bio);
#line 779
    req->private_bio = 0;
  } else {

  }
#line 781
  if (rw == 1) {
#line 782
    remote = 1;
  } else {
#line 785
    if (local != 0) {
#line 786
      tmp___1 = drbd_may_do_local_read(mdev, sector, size);
#line 786
      if (tmp___1 == 0) {
#line 792
        local = 0;
#line 793
        bio_put(req->private_bio);
#line 794
        req->private_bio = 0;
#line 795
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 798
    remote = local == 0 && (int )mdev->state.ldv_33380.pdsk > 7;
  }
#line 809
  if ((rw == 2 && (int )mdev->state.ldv_33380.disk > 3) && local == 0) {
#line 810
    err = -11;
#line 811
    goto fail_and_free_req;
  } else {

  }
#line 819
  if (rw == 1 && local != 0) {
#line 820
    drbd_al_begin_io(mdev, sector);
  } else {

  }
#line 822
  remote = remote != 0 && (*((unsigned int *)mdev + 451UL) == 65536U || (*((unsigned int *)mdev + 451UL) == 32768U && (int )mdev->state.ldv_33380.conn > 9));
#line 826
  if (local == 0 && remote == 0) {
#line 827
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 827
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 827
    printk("<3>%s %s: IO ERROR: neither local nor remote disk\n", tmp___3, tmp___2);
#line 828
    goto fail_free_complete;
  } else {

  }
#line 837
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 837
    tmp___7 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 837
    if (tmp___7 != 0) {
      allocate_barrier: 
#line 841
      tmp___4 = kmalloc___2(56UL, 16U);
#line 841
      b = (struct drbd_tl_epoch *)tmp___4;
#line 842
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 843
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 843
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 843
        printk("<3>%s %s: Failed to alloc barrier.\n", tmp___6, tmp___5);
#line 844
        err = -12;
#line 845
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 850
  spin_lock_irq(& mdev->req_lock);
#line 852
  if (remote != 0) {
#line 853
    remote = *((unsigned int *)mdev + 451UL) == 65536U || (*((unsigned int *)mdev + 451UL) == 32768U && (int )mdev->state.ldv_33380.conn > 9);
#line 856
    if (remote == 0) {
#line 857
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 857
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 857
      printk("<4>%s %s: lost connection while grabbing the req_lock!\n", tmp___9,
             tmp___8);
    } else {

    }
#line 858
    if (local == 0 && remote == 0) {
#line 859
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 859
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 859
      printk("<3>%s %s: IO ERROR: neither local nor remote disk\n", tmp___11, tmp___10);
#line 860
      spin_unlock_irq(& mdev->req_lock);
#line 861
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 865
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 866
    mdev->unused_spare_tle = b;
#line 867
    b = 0;
  } else {

  }
#line 869
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 869
    tmp___12 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 869
    if (tmp___12 != 0) {
#line 874
      spin_unlock_irq(& mdev->req_lock);
#line 875
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 880
  _drbd_start_io_acct(mdev, req, bio);
#line 892
  if (remote != 0 && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 892
    tmp___16 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 892
    if (tmp___16 != 0) {
#line 894
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 895
      mdev->unused_spare_tle = 0;
    } else {
#line 892
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 897
  if (remote != 0 && rw == 1) {
#line 897
    tmp___15 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 897
    if (tmp___15 != 0) {
#line 897
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 897
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 897
      printk("<3>%s %s: ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
             tmp___14, tmp___13, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
             898);
    } else {

    }
  } else {

  }
#line 916
  if (remote != 0) {
#line 917
    _req_mod(req, to_be_send);
  } else {

  }
#line 918
  if (local != 0) {
#line 919
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 924
  if (rw == 1) {
#line 924
    tmp___22 = _req_conflicts(req);
#line 924
    if (tmp___22 != 0) {
#line 931
      if (local != 0) {
#line 932
        bio_put(req->private_bio);
#line 933
        req->private_bio = 0;
#line 934
        drbd_al_complete_io(mdev, req->sector);
#line 935
        put_ldev(mdev);
#line 936
        local = 0;
      } else {

      }
#line 938
      if (remote != 0) {
#line 939
        tmp___17 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 939
        if (tmp___17 != 0) {
#line 939
          __wake_up(& mdev->misc_wait, 3U, 1, 0);
        } else {

        }
#line 939
        tmp___21 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 939
        if (tmp___21 < 0) {
#line 939
          tmp___18 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 939
          tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 939
          tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 939
          printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___20, tmp___19,
                 "drbd_make_request_common", 939, tmp___18);
        } else {

        }
      } else {

      }
#line 940
      _drbd_end_io_acct(mdev, req);
#line 942
      bio_endio(req->master_bio, 0);
#line 943
      req->master_bio = 0;
#line 944
      dec_ap_bio(mdev);
#line 945
      drbd_req_free(req);
#line 946
      remote = 0;
    } else {

    }
  } else {

  }
#line 951
  if (remote != 0) {
#line 956
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 960
  spin_unlock_irq(& mdev->req_lock);
#line 961
  kfree((void const   *)b);
#line 963
  if (local != 0) {
#line 964
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 966
    tmp___23 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 966
    if (tmp___23 != 0) {
#line 969
      bio_endio(req->private_bio, -5);
    } else {
#line 971
      generic_make_request(req->private_bio);
    }
  } else {

  }
#line 976
  drbd_plug_device(mdev);
#line 978
  return (0);
  fail_free_complete: ;
#line 981
  if (rw == 1 && local != 0) {
#line 982
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 984
  if (local != 0) {
#line 985
    bio_put(req->private_bio);
#line 986
    req->private_bio = 0;
#line 987
    put_ldev(mdev);
  } else {

  }
#line 989
  bio_endio(bio, err);
#line 990
  drbd_req_free(req);
#line 991
  dec_ap_bio(mdev);
#line 992
  kfree((void const   *)b);
#line 994
  return (0);
}
}
#line 1002 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 1005
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 16U && (unsigned int )*((unsigned char *)mdev + 1805UL) == 0U) {
#line 1007
    return (1);
  } else {

  }
#line 1009
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 1011
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1011
    if (tmp___3 != 0) {
#line 1012
      tmp = get_current();
#line 1012
      tmp___0 = get_current();
#line 1012
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1012
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1012
      printk("<3>%s %s: Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
             tmp___2, tmp___1, (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1018
    return (1);
  } else {

  }
#line 1030
  if ((int )mdev->state.ldv_33380.disk <= 7 && (int )mdev->state.ldv_33380.pdsk <= 7) {
#line 1031
    tmp___6 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1031
    if (tmp___6 != 0) {
#line 1032
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1032
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1032
      printk("<3>%s %s: Sorry, I have no access to good data anymore.\n", tmp___5,
             tmp___4);
    } else {

    }
#line 1033
    return (1);
  } else {

  }
#line 1036
  return (0);
}
}
#line 1039 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  int tmp ;
  bool tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;

  {
#line 1042
  mdev = (struct drbd_conf *)q->queuedata;
#line 1044
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1044
  if (tmp != 0) {
#line 1045
    bio_endio(bio, -1);
#line 1046
    return (0);
  } else {

  }
#line 1057
  tmp___0 = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 1057
  tmp___1 = __builtin_expect((long )tmp___0, 0L);
#line 1057
  if (tmp___1 != 0L) {
#line 1057
    tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 1057
    tmp___3 = __builtin_expect(tmp___2 != 0, 0L);
#line 1057
    if (tmp___3 != 0L) {
#line 1059
      bio_endio(bio, -95);
#line 1060
      return (0);
    } else {

    }
  } else {

  }
#line 1066
  if (bio->bi_size == 0U) {
#line 1066
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1066
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1066
    printk("<3>%s %s: ASSERT( bio->bi_size > 0 ) in %s:%d\n", tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           1066);
  } else {

  }
#line 1067
  if ((bio->bi_size & 511U) != 0U) {
#line 1067
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1067
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1067
    printk("<3>%s %s: ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n", tmp___7,
           tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           1067);
  } else {

  }
#line 1068
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1068
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1068
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1068
    printk("<3>%s %s: ASSERT( bio->bi_idx == 0 ) in %s:%d\n", tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
           1068);
  } else {

  }
#line 1072
  s_enr = (unsigned int )(bio->bi_sector >> 6);
#line 1073
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 6);
#line 1075
  tmp___11 = __builtin_expect(s_enr == e_enr, 1L);
#line 1075
  if (tmp___11 != 0L) {
#line 1076
    inc_ap_bio(mdev, 1);
#line 1077
    tmp___10 = drbd_make_request_common(mdev, bio);
#line 1077
    return (tmp___10);
  } else {

  }
#line 1082
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 32768U) {
#line 1084
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1084
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1084
    printk("<3>%s %s: bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
           tmp___13, tmp___12, (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size,
           (unsigned long long )bio->bi_sector);
#line 1088
    bio_endio(bio, -22);
  } else {
#line 1100
    sect = bio->bi_sector;
#line 1101
    sps = 64;
#line 1102
    mask = sps + -1;
#line 1103
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1104
    bp = bio_split(bio, (int )first_sectors);
#line 1115
    inc_ap_bio(mdev, 2);
#line 1117
    if (s_enr + 1U != e_enr) {
#line 1117
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1117
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1117
      printk("<3>%s %s: ASSERT( e_enr == s_enr + 1 ) in %s:%d\n", tmp___15, tmp___14,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
             1117);
    } else {

    }
#line 1119
    drbd_make_request_common(mdev, & bp->bio1);
#line 1120
    drbd_make_request_common(mdev, & bp->bio2);
#line 1121
    bio_pair_release(bp);
  }
#line 1123
  return (0);
}
}
#line 1139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1141
  mdev = (struct drbd_conf *)q->queuedata;
#line 1142
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1144
  bio_size = bvm->bi_size;
#line 1147
  limit = (int )(32768U - ((bio_offset & 32767U) + bio_size));
#line 1149
  if (limit < 0) {
#line 1150
    limit = 0;
  } else {

  }
#line 1151
  if (bio_size == 0U) {
#line 1152
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1153
      limit = (int )bvec->bv_len;
    } else
#line 1154
    if (limit != 0) {
#line 1154
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1154
      if (tmp != 0) {
#line 1155
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1157
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0) && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1158
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1159
          _min1 = limit;
#line 1159
          _min2 = backing_limit;
#line 1159
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1161
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1163
  return (limit);
}
}
#line 1166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_57(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1171
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1173
  mutex_lock(ldv_func_arg1);
#line 1174
  return;
}
}
#line 1176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_58(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1181
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1183
  mutex_unlock(ldv_func_arg1);
#line 1184
  return;
}
}
#line 1186 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_59(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1191
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1193
  mutex_unlock(ldv_func_arg1);
#line 1194
  return;
}
}
#line 116 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 118
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 118
  return (tmp != 1);
}
}
#line 122
__inline static int ldv_mutex_is_locked_66(struct mutex *lock ) ;
#line 155
void ldv_mutex_unlock_64(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_72(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_73(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_67(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_69(struct mutex *ldv_func_arg1 ) ;
#line 34
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___3(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_10574: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_10574;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___3(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___3((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___3(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___3(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___3((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc___0(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc___3(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 312 "include/linux/mm.h"
__inline static void get_page(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 314
  page = compound_head(page);
#line 315
  tmp = atomic_read((atomic_t const   *)(& page->_count));
#line 315
  tmp___0 = __builtin_expect(tmp == 0, 0L);
#line 315
  if (tmp___0 != 0L) {
#line 315
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                         "i" (315), "i" (12UL));
    ldv_15738: ;
#line 315
    goto ldv_15738;
  } else {

  }
#line 316
  atomic_inc(& page->_count);
#line 317
  return;
}
}
#line 1069 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 1071
  retval = 512;
#line 1073
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 1074
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 1076
  return ((unsigned short )retval);
}
}
#line 1079 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 1081
  tmp = bdev_get_queue(bdev);
#line 1081
  tmp___0 = queue_logical_block_size(tmp);
#line 1081
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 249
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1516 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1525
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1526
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) ;
#line 1527
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1535
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 1639 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____2(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1641
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1643
  if (forcedetach == 0) {
#line 1644
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1644
    if (tmp___1 != 0) {
#line 1645
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1647
    goto ldv_41630;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1652
  if ((int )mdev->state.ldv_33380.disk > 2) {
#line 1653
    __ns.i = mdev->state.i;
#line 1653
    __ns.ldv_33380.disk = 2U;
#line 1653
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1654
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1657
  goto ldv_41630;
  }
  ldv_41630: ;
#line 1660
  return;
}
}
#line 1670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1673
  if (error != 0) {
#line 1675
    tmp = spinlock_check(& mdev->req_lock);
#line 1675
    flags = _raw_spin_lock_irqsave(tmp);
#line 1676
    __drbd_chk_io_error____2(mdev, forcedetach, where);
#line 1677
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1679
  return;
}
}
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  bool tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;

  {
#line 116
  md_io.mdev = mdev;
#line 117
  init_completion(& md_io.event);
#line 118
  md_io.error = 0;
#line 120
  if (rw & 1) {
#line 120
    tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 120
    if (tmp == 0) {
#line 121
      rw = rw | 32;
    } else {

    }
  } else {

  }
#line 122
  rw = rw | 192;
  retry: 
#line 125
  bio = bio_alloc(16U, 1);
#line 126
  bio->bi_bdev = bdev->md_bdev;
#line 127
  bio->bi_sector = sector;
#line 128
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 128
  ok = tmp___0 == size;
#line 129
  if (ok == 0) {
#line 130
    goto out;
  } else {

  }
#line 131
  bio->bi_private = (void *)(& md_io);
#line 132
  bio->bi_end_io = & drbd_md_io_complete;
#line 133
  bio->bi_rw = (unsigned long )rw;
#line 135
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 135
  if (tmp___1 != 0) {
#line 136
    bio_endio(bio, -5);
  } else {
#line 138
    submit_bio(rw, bio);
  }
#line 139
  wait_for_completion(& md_io.event);
#line 140
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
#line 145
  tmp___4 = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 145
  tmp___5 = __builtin_expect((long )tmp___4, 0L);
#line 145
  if (tmp___5 != 0L) {
#line 145
    tmp___6 = __builtin_expect(ok == 0, 0L);
#line 145
    if (tmp___6 != 0L) {
#line 147
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 147
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 147
      printk("<4>%s %s: Barriers not supported on meta data device - disabling\n",
             tmp___3, tmp___2);
#line 148
      set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 149
      rw = rw & -33;
#line 150
      bio_put(bio);
#line 151
      goto retry;
    } else {

    }
  } else {

  }
  out: 
#line 154
  bio_put(bio);
#line 155
  return (ok);
}
}
#line 158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  unsigned short tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  void *p ;
  void *tmp___8 ;
  void *hp ;
  void *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  long tmp___12 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___13 ;
  struct task_struct *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  sector_t tmp___17 ;
  sector_t tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  long tmp___21 ;
  void *p___0 ;
  void *tmp___22 ;
  void *hp___0 ;
  void *tmp___23 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 162
  offset = 0;
#line 163
  iop = mdev->md_io_page;
#line 165
  tmp___1 = ldv_mutex_is_locked_66(& mdev->md_io_mutex);
#line 165
  if (tmp___1 == 0) {
#line 165
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 165
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 165
    printk("<3>%s %s: ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           165);
  } else {

  }
#line 167
  tmp___2 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 167
  if (tmp___2 != 0L) {
#line 167
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (167), "i" (12UL));
    ldv_41956: ;
#line 167
    goto ldv_41956;
  } else {

  }
#line 169
  tmp___3 = bdev_logical_block_size(bdev->md_bdev);
#line 169
  logical_block_size = (int )tmp___3;
#line 170
  if (logical_block_size == 0) {
#line 171
    logical_block_size = 512;
  } else {

  }
#line 174
  if (logical_block_size != 512) {
#line 175
    mask = logical_block_size / 512 + -1;
#line 176
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 176
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 176
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 176
      printk("<3>%s %s: ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
             tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             176);
    } else {

    }
#line 177
    if ((mask + 1) * 512 != logical_block_size) {
#line 177
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 177
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 177
      printk("<3>%s %s: ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
             tmp___7, tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             177);
    } else {

    }
#line 178
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 179
    sector = (sector_t )(~ mask) & sector;
#line 180
    iop = mdev->md_io_tmpp;
#line 182
    if (rw & 1) {
#line 185
      tmp___8 = lowmem_page_address(mdev->md_io_page);
#line 185
      p = tmp___8;
#line 186
      tmp___9 = lowmem_page_address(mdev->md_io_tmpp);
#line 186
      hp = tmp___9;
#line 188
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 191
      tmp___12 = __builtin_expect(ok == 0, 0L);
#line 191
      if (tmp___12 != 0L) {
#line 192
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 192
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 192
        printk("<3>%s %s: drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
               tmp___11, tmp___10, (unsigned long long )sector);
#line 195
        return (0);
      } else {

      }
#line 198
      __len = 512UL;
#line 198
      if (__len > 63UL) {
#line 198
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 198
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 202
  tmp___17 = drbd_md_first_sector(bdev);
#line 202
  if (tmp___17 > sector) {
#line 204
    tmp___13 = get_current();
#line 204
    tmp___14 = get_current();
#line 204
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 204
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 204
    printk("<1>%s %s: %s [%d]:%s(,%llus,%s) out of range md access!\n", tmp___16,
           tmp___15, (char *)(& tmp___14->comm), tmp___13->pid, "drbd_md_sync_page_io",
           (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 202
    tmp___18 = drbd_md_last_sector(bdev);
#line 202
    if (tmp___18 < sector) {
#line 204
      tmp___13 = get_current();
#line 204
      tmp___14 = get_current();
#line 204
      tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 204
      tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 204
      printk("<1>%s %s: %s [%d]:%s(,%llus,%s) out of range md access!\n", tmp___16,
             tmp___15, (char *)(& tmp___14->comm), tmp___13->pid, "drbd_md_sync_page_io",
             (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 208
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 209
  tmp___21 = __builtin_expect(ok == 0, 0L);
#line 209
  if (tmp___21 != 0L) {
#line 210
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 210
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 210
    printk("<3>%s %s: drbd_md_sync_page_io(,%llus,%s) failed!\n", tmp___20, tmp___19,
           (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 212
    return (0);
  } else {

  }
#line 215
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 216
    tmp___22 = lowmem_page_address(mdev->md_io_page);
#line 216
    p___0 = tmp___22;
#line 217
    tmp___23 = lowmem_page_address(mdev->md_io_tmpp);
#line 217
    hp___0 = tmp___23;
#line 219
    __len___0 = 512UL;
#line 219
    if (__len___0 > 63UL) {
#line 219
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 219
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 222
  return (ok);
}
}
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 229
  al_flags = 0UL;
#line 231
  spin_lock_irq(& mdev->al_lock);
#line 232
  tmp = lc_find(mdev->resync, enr / 4U);
#line 233
  tmp___1 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 233
  if (tmp___1 != 0L) {
#line 234
    __mptr = (struct lc_element  const  *)tmp;
#line 234
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 235
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 235
    if (tmp___0 != 0) {
#line 236
      spin_unlock_irq(& mdev->al_lock);
#line 237
      return (0);
    } else {

    }
  } else {

  }
#line 240
  al_ext = lc_get(mdev->act_log, enr);
#line 241
  al_flags = (mdev->act_log)->flags;
#line 242
  spin_unlock_irq(& mdev->al_lock);
#line 253
  return (al_ext);
}
}
#line 256 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;

  {
#line 258
  enr = (unsigned int )(sector >> 13);
#line 262
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 262
  if (tmp___1 <= 0) {
#line 262
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 262
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 262
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           262);
  } else {

  }
#line 264
  al_ext = _al_get(mdev, enr);
#line 264
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 264
    goto ldv_41985;
  } else {

  }
#line 264
  tmp___2 = get_current();
#line 264
  __wait.flags = 0U;
#line 264
  __wait.private = (void *)tmp___2;
#line 264
  __wait.func = & autoremove_wake_function;
#line 264
  __wait.task_list.next = & __wait.task_list;
#line 264
  __wait.task_list.prev = & __wait.task_list;
  ldv_41988: 
#line 264
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 264
  al_ext = _al_get(mdev, enr);
#line 264
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 264
    goto ldv_41987;
  } else {

  }
#line 264
  schedule();
#line 264
  goto ldv_41988;
  ldv_41987: 
#line 264
  finish_wait(& mdev->al_wait, & __wait);
  ldv_41985: ;
#line 266
  if (al_ext->lc_number != enr) {
#line 273
    init_completion(& al_work.event);
#line 274
    al_work.al_ext = al_ext;
#line 275
    al_work.enr = enr;
#line 276
    al_work.old_enr = al_ext->lc_number;
#line 277
    al_work.w.cb = & w_al_write_transaction;
#line 278
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 279
    wait_for_completion(& al_work.event);
#line 281
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 283
    spin_lock_irq(& mdev->al_lock);
#line 284
    lc_changed(mdev->act_log, al_ext);
#line 285
    spin_unlock_irq(& mdev->al_lock);
#line 286
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 288
  return;
}
}
#line 290 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 292
  enr = (unsigned int )(sector >> 13);
#line 296
  tmp = spinlock_check(& mdev->al_lock);
#line 296
  flags = _raw_spin_lock_irqsave(tmp);
#line 298
  extent = lc_find(mdev->act_log, enr);
#line 300
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 301
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 302
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 302
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 302
    printk("<3>%s %s: al_complete_io() called on inactive extent %u\n", tmp___1, tmp___0,
           enr);
#line 303
    return;
  } else {

  }
#line 306
  tmp___2 = lc_put(mdev->act_log, extent);
#line 306
  if (tmp___2 == 0U) {
#line 307
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 309
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 310
  return;
}
}
#line 313 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  __u32 tmp___3 ;
  unsigned int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 315
  __mptr = (struct drbd_work  const  *)w;
#line 315
  aw = (struct update_al_work *)__mptr;
#line 316
  updated = aw->al_ext;
#line 317
  new_enr = aw->enr;
#line 318
  evicted = aw->old_enr;
#line 323
  xor_sum = 0U;
#line 325
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 325
  if (tmp___1 == 0) {
#line 326
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 326
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 326
    printk("<3>%s %s: get_ldev() failed in w_al_write_transaction\n", tmp___0, tmp);
#line 327
    complete(& ((struct update_al_work *)w)->event);
#line 328
    return (1);
  } else {

  }
#line 334
  if ((int )mdev->state.ldv_33380.conn <= 9 && evicted != 4294967295U) {
#line 335
    drbd_bm_write_sect(mdev, (unsigned long )(evicted / 4U));
  } else {

  }
#line 337
  ldv_mutex_lock_67(& mdev->md_io_mutex);
#line 338
  tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 338
  buffer = (struct al_transaction *)tmp___2;
#line 340
  buffer->magic = 1728214147U;
#line 341
  tmp___3 = __fswab32(mdev->al_tr_number);
#line 341
  buffer->tr_number = tmp___3;
#line 343
  tmp___4 = lc_index_of(mdev->act_log, updated);
#line 343
  n = (int )tmp___4;
#line 345
  tmp___5 = __fswab32((__u32 )n);
#line 345
  buffer->updates[0].pos = tmp___5;
#line 346
  tmp___6 = __fswab32(new_enr);
#line 346
  buffer->updates[0].extent = tmp___6;
#line 348
  xor_sum = xor_sum ^ new_enr;
#line 350
  __min1 = 61;
#line 350
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 350
  mx = __min1 < __min2 ? __min1 : __min2;
#line 352
  i = 0;
#line 352
  goto ldv_42022;
  ldv_42021: 
#line 353
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 354
  tmp___7 = lc_element_by_index(mdev->act_log, idx);
#line 354
  extent_nr = tmp___7->lc_number;
#line 355
  tmp___8 = __fswab32(idx);
#line 355
  buffer->updates[i + 1].pos = tmp___8;
#line 356
  tmp___9 = __fswab32(extent_nr);
#line 356
  buffer->updates[i + 1].extent = tmp___9;
#line 357
  xor_sum = xor_sum ^ extent_nr;
#line 352
  i = i + 1;
  ldv_42022: ;
#line 352
  if (i < mx) {
#line 353
    goto ldv_42021;
  } else {

  }

#line 359
  goto ldv_42025;
  ldv_42024: 
#line 360
  buffer->updates[i + 1].pos = 4294967295U;
#line 361
  buffer->updates[i + 1].extent = 4294967295U;
#line 362
  xor_sum = ~ xor_sum;
#line 359
  i = i + 1;
  ldv_42025: ;
#line 359
  if (i <= 60) {
#line 360
    goto ldv_42024;
  } else {

  }
#line 364
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 365
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 366
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 368
  tmp___10 = __fswab32(xor_sum);
#line 368
  buffer->xor_sum = tmp___10;
#line 370
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 373
  tmp___11 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 373
  if (tmp___11 == 0) {
#line 374
    drbd_chk_io_error____1(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 376
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 376
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 378
    mdev->al_tr_pos = 0;
  } else {

  }
#line 380
  if (mdev->al_tr_pos > 63) {
#line 380
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
    printk("<3>%s %s: ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n", tmp___13,
           tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           380);
  } else {

  }
#line 381
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 383
  ldv_mutex_unlock_68(& mdev->md_io_mutex);
#line 385
  complete(& ((struct update_al_work *)w)->event);
#line 386
  put_ldev(mdev);
#line 388
  return (1);
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 407
  xor_sum = 0U;
#line 409
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 413
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 413
  if (tmp == 0) {
#line 414
    return (-1);
  } else {

  }
#line 416
  tmp___0 = __fswab32(b->magic);
#line 416
  rv = tmp___0 == 2205418087U;
#line 418
  i = 0;
#line 418
  goto ldv_42039;
  ldv_42038: 
#line 419
  tmp___1 = __fswab32(b->updates[i].extent);
#line 419
  xor_sum = tmp___1 ^ xor_sum;
#line 418
  i = i + 1;
  ldv_42039: ;
#line 418
  if (i <= 61) {
#line 419
    goto ldv_42038;
  } else {

  }
#line 420
  tmp___2 = __fswab32(b->xor_sum);
#line 420
  rv = (tmp___2 == xor_sum) & rv;
#line 422
  return (rv);
}
}
#line 432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 438
  active_extents = 0;
#line 439
  transactions = 0;
#line 440
  found_valid = 0;
#line 441
  from = 0;
#line 442
  to = 0;
#line 443
  from_tnr = 0U;
#line 444
  to_tnr = 0U;
#line 447
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 452
  ldv_mutex_lock_69(& mdev->md_io_mutex);
#line 453
  tmp = lowmem_page_address(mdev->md_io_page);
#line 453
  buffer = (struct al_transaction *)tmp;
#line 456
  i = 0;
#line 456
  goto ldv_42059;
  ldv_42058: 
#line 457
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 458
  if (rv == 0) {
#line 459
    goto ldv_42057;
  } else {

  }
#line 460
  if (rv == -1) {
#line 461
    ldv_mutex_unlock_70(& mdev->md_io_mutex);
#line 462
    return (0);
  } else {

  }
#line 464
  tmp___0 = __fswab32(buffer->tr_number);
#line 464
  cnr = tmp___0;
#line 466
  found_valid = found_valid + 1;
#line 466
  if (found_valid == 1) {
#line 467
    from = i;
#line 468
    to = i;
#line 469
    from_tnr = cnr;
#line 470
    to_tnr = cnr;
#line 471
    goto ldv_42057;
  } else {

  }
#line 473
  if ((int )cnr - (int )from_tnr < 0) {
#line 474
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 474
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 474
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 474
      printk("<3>%s %s: ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n", tmp___2,
             tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             474);
    } else {

    }
#line 475
    from = i;
#line 476
    from_tnr = cnr;
  } else {

  }
#line 478
  if ((int )cnr - (int )to_tnr > 0) {
#line 479
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 479
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 479
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 479
      printk("<3>%s %s: ASSERT( cnr - to_tnr == i - to ) in %s:%d\n", tmp___4, tmp___3,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             479);
    } else {

    }
#line 480
    to = i;
#line 481
    to_tnr = cnr;
  } else {

  }
  ldv_42057: 
#line 456
  i = i + 1;
  ldv_42059: ;
#line 456
  if (i <= mx) {
#line 457
    goto ldv_42058;
  } else {

  }

#line 485
  if (found_valid == 0) {
#line 486
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 486
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 486
    printk("<4>%s %s: No usable activity log found.\n", tmp___6, tmp___5);
#line 487
    ldv_mutex_unlock_71(& mdev->md_io_mutex);
#line 488
    return (1);
  } else {

  }
#line 493
  i = from;
  ldv_42074: 
#line 499
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 500
  _b = rv == 0;
#line 500
  if (_b != 0) {
#line 500
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 500
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 500
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___8, tmp___7, "drbd_al_read_log",
           (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           500);
  } else {

  }
#line 500
  if (_b != 0) {
#line 500
    goto cancel;
  } else {

  }
#line 501
  if (rv == -1) {
#line 502
    ldv_mutex_unlock_72(& mdev->md_io_mutex);
#line 503
    return (0);
  } else {

  }
#line 506
  tmp___9 = __fswab32(buffer->tr_number);
#line 506
  trn = tmp___9;
#line 508
  spin_lock_irq(& mdev->al_lock);
#line 514
  j = 61;
#line 514
  goto ldv_42071;
  ldv_42070: 
#line 515
  tmp___10 = __fswab32(buffer->updates[j].pos);
#line 515
  pos = (int )tmp___10;
#line 516
  tmp___11 = __fswab32(buffer->updates[j].extent);
#line 516
  extent_nr = tmp___11;
#line 518
  if (extent_nr == 4294967295U) {
#line 519
    goto ldv_42069;
  } else {

  }
#line 521
  lc_set(mdev->act_log, extent_nr, pos);
#line 522
  active_extents = active_extents + 1;
  ldv_42069: 
#line 514
  j = j - 1;
  ldv_42071: ;
#line 514
  if (j >= 0) {
#line 515
    goto ldv_42070;
  } else {

  }
#line 524
  spin_unlock_irq(& mdev->al_lock);
#line 526
  transactions = transactions + 1;
  cancel: ;
#line 529
  if (i == to) {
#line 530
    goto ldv_42073;
  } else {

  }
#line 531
  i = i + 1;
#line 532
  if (i > mx) {
#line 533
    i = 0;
  } else {

  }
#line 534
  goto ldv_42074;
  ldv_42073: 
#line 536
  mdev->al_tr_number = to_tnr + 1U;
#line 537
  mdev->al_tr_pos = to;
#line 538
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 538
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 540
    mdev->al_tr_pos = 0;
  } else {

  }
#line 543
  ldv_mutex_unlock_73(& mdev->md_io_mutex);
#line 545
  tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 545
  tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 545
  printk("<6>%s %s: Found %d transactions (%d active extents) in activity log.\n",
         tmp___13, tmp___12, transactions, active_extents);
#line 548
  return (1);
}
}
#line 551 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void atodb_endio(struct bio *bio , int error ) 
{ 
  struct drbd_atodb_wait *wc ;
  struct drbd_conf *mdev ;
  struct page *page ;
  int uptodate ;
  int tmp ;

  {
#line 553
  wc = (struct drbd_atodb_wait *)bio->bi_private;
#line 554
  mdev = wc->mdev;
#line 556
  uptodate = (int )bio->bi_flags & 1;
#line 561
  if (error == 0 && uptodate == 0) {
#line 562
    error = -5;
  } else {

  }
#line 564
  drbd_chk_io_error____1(mdev, error, 1, "atodb_endio");
#line 565
  if (error != 0 && wc->error == 0) {
#line 566
    wc->error = error;
  } else {

  }
#line 568
  tmp = atomic_dec_and_test(& wc->count);
#line 568
  if (tmp != 0) {
#line 569
    complete(& wc->io_done);
  } else {

  }
#line 571
  page = (bio->bi_io_vec)->bv_page;
#line 572
  put_page(page);
#line 573
  bio_put(bio);
#line 574
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 575
  put_ldev(mdev);
#line 576
  return;
}
}
#line 583 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int atodb_prepare_unless_covered(struct drbd_conf *mdev , struct bio **bios ,
                                        unsigned int enr , struct drbd_atodb_wait *wc ) 
{ 
  struct bio *bio ;
  struct page *page ;
  sector_t on_disk_sector ;
  unsigned int page_offset___0 ;
  int offset ;
  int i ;
  int err ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct bio_vec  const  *prev_bv ;
  void *tmp___1 ;
  size_t __min1 ;
  size_t __min2 ;
  size_t tmp___2 ;
  int tmp___3 ;

  {
#line 591
  page_offset___0 = 4096U;
#line 593
  i = 0;
#line 594
  err = -12;
#line 598
  enr = enr & 4294967288U;
#line 599
  on_disk_sector = (sector_t )(((u64 )enr + (mdev->ldev)->md.md_offset) + (u64 )(mdev->ldev)->md.bm_offset);
#line 602
  if ((on_disk_sector & 7UL) != 0UL) {
#line 602
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 602
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 602
    printk("<3>%s %s: ASSERT( !(on_disk_sector & 7U) ) in %s:%d\n", tmp___0, tmp,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           602);
  } else {

  }
#line 611
  goto ldv_42098;
  ldv_42097: ;
#line 612
  if (bio->bi_sector == on_disk_sector) {
#line 613
    return (0);
  } else {

  }
#line 614
  i = i + 1;
  ldv_42098: 
#line 611
  bio = *(bios + (unsigned long )i);
#line 611
  if ((unsigned long )bio != (unsigned long )((struct bio *)0)) {
#line 612
    goto ldv_42097;
  } else {

  }
#line 619
  bio = bio_alloc(208U, 1);
#line 620
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 621
    return (-12);
  } else {

  }
#line 623
  if (i > 0) {
#line 624
    prev_bv = (struct bio_vec  const  *)(*(bios + ((unsigned long )i + 0xffffffffffffffffUL)))->bi_io_vec;
#line 625
    page_offset___0 = (unsigned int )prev_bv->bv_offset + (unsigned int )prev_bv->bv_len;
#line 626
    page = prev_bv->bv_page;
  } else {

  }
#line 628
  if (page_offset___0 == 4096U) {
#line 629
    page = alloc_pages(2U, 0U);
#line 630
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 631
      goto out_bio_put;
    } else {

    }
#line 632
    page_offset___0 = 0U;
  } else {
#line 634
    get_page(page);
  }
#line 637
  offset = (int )(enr << 6);
#line 638
  tmp___1 = kmap(page);
#line 639
  __min1 = 512UL;
#line 639
  tmp___2 = drbd_bm_words(mdev);
#line 639
  __min2 = tmp___2 - (size_t )offset;
#line 639
  drbd_bm_get_lel(mdev, (size_t )offset, __min1 < __min2 ? __min1 : __min2, (unsigned long *)tmp___1 + (unsigned long )page_offset___0);
#line 641
  kunmap(page);
#line 643
  bio->bi_private = (void *)wc;
#line 644
  bio->bi_end_io = & atodb_endio;
#line 645
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 646
  bio->bi_sector = on_disk_sector;
#line 648
  tmp___3 = bio_add_page(bio, page, 4096U, page_offset___0);
#line 648
  if (tmp___3 != 4096) {
#line 649
    goto out_put_page;
  } else {

  }
#line 651
  atomic_inc(& wc->count);
#line 657
  atomic_inc(& mdev->local_cnt);
#line 659
  *(bios + (unsigned long )i) = bio;
#line 661
  return (0);
  out_put_page: 
#line 664
  err = -22;
#line 665
  put_page(page);
  out_bio_put: 
#line 667
  bio_put(bio);
#line 668
  return (err);
}
}
#line 678 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) 
{ 
  int i ;
  int nr_elements ;
  unsigned int enr ;
  struct bio **bios ;
  struct drbd_atodb_wait wc ;
  int _b ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;
  struct lc_element *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  struct request_queue *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  struct lc_element *tmp___13 ;

  {
#line 685
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 685
  _b = tmp == 0;
#line 685
  if (_b != 0) {
#line 685
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 685
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 685
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "drbd_al_to_on_disk_bm",
           (char *)"!get_ldev_if_state(mdev, D_ATTACHING)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           685);
  } else {

  }
#line 685
  if (_b != 0) {
#line 686
    return;
  } else {

  }
#line 688
  tmp___2 = lc_try_lock(mdev->act_log);
#line 688
  if (tmp___2 != 0) {
#line 688
    goto ldv_42117;
  } else {

  }
#line 688
  tmp___3 = get_current();
#line 688
  __wait.flags = 0U;
#line 688
  __wait.private = (void *)tmp___3;
#line 688
  __wait.func = & autoremove_wake_function;
#line 688
  __wait.task_list.next = & __wait.task_list;
#line 688
  __wait.task_list.prev = & __wait.task_list;
  ldv_42120: 
#line 688
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 688
  tmp___4 = lc_try_lock(mdev->act_log);
#line 688
  if (tmp___4 != 0) {
#line 688
    goto ldv_42119;
  } else {

  }
#line 688
  schedule();
#line 688
  goto ldv_42120;
  ldv_42119: 
#line 688
  finish_wait(& mdev->al_wait, & __wait);
  ldv_42117: 
#line 690
  nr_elements = (int )(mdev->act_log)->nr_elements;
#line 693
  tmp___5 = kzalloc___0((unsigned long )nr_elements * 8UL, 208U);
#line 693
  bios = (struct bio **)tmp___5;
#line 694
  if ((unsigned long )bios == (unsigned long )((struct bio **)0)) {
#line 695
    goto submit_one_by_one;
  } else {

  }
#line 697
  atomic_set(& wc.count, 0);
#line 698
  init_completion(& wc.io_done);
#line 699
  wc.mdev = mdev;
#line 700
  wc.error = 0;
#line 702
  i = 0;
#line 702
  goto ldv_42125;
  ldv_42124: 
#line 703
  tmp___6 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 703
  enr = tmp___6->lc_number;
#line 704
  if (enr == 4294967295U) {
#line 705
    goto ldv_42122;
  } else {

  }
#line 707
  tmp___7 = atodb_prepare_unless_covered(mdev, bios, enr / 4U, & wc);
#line 707
  if (tmp___7 != 0) {
#line 710
    goto free_bios_submit_one_by_one;
  } else {

  }
  ldv_42122: 
#line 702
  i = i + 1;
  ldv_42125: ;
#line 702
  if (i < nr_elements) {
#line 703
    goto ldv_42124;
  } else {

  }
#line 714
  lc_unlock(mdev->act_log);
#line 715
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 718
  i = 0;
#line 718
  goto ldv_42129;
  ldv_42128: ;
#line 719
  if ((unsigned long )*(bios + (unsigned long )i) == (unsigned long )((struct bio *)0)) {
#line 720
    goto ldv_42127;
  } else {

  }
#line 721
  tmp___8 = drbd_insert_fault(mdev, 0U);
#line 721
  if (tmp___8 != 0) {
#line 722
    (*(bios + (unsigned long )i))->bi_rw = 1UL;
#line 723
    bio_endio(*(bios + (unsigned long )i), -5);
  } else {
#line 725
    submit_bio(1, *(bios + (unsigned long )i));
  }
#line 718
  i = i + 1;
  ldv_42129: ;
#line 718
  if (i < nr_elements) {
#line 719
    goto ldv_42128;
  } else {

  }
  ldv_42127: 
#line 729
  tmp___9 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 729
  drbd_blk_run_queue(tmp___9);
#line 732
  drbd_md_flush(mdev);
#line 740
  tmp___10 = atomic_read((atomic_t const   *)(& wc.count));
#line 740
  if (tmp___10 != 0) {
#line 741
    wait_for_completion(& wc.io_done);
  } else {

  }
#line 743
  put_ldev(mdev);
#line 745
  kfree((void const   *)bios);
#line 746
  return;
  free_bios_submit_one_by_one: 
#line 750
  i = 0;
#line 750
  goto ldv_42131;
  ldv_42130: 
#line 751
  bio_endio(*(bios + (unsigned long )i), 0);
#line 750
  i = i + 1;
  ldv_42131: ;
#line 750
  if (i < nr_elements && (unsigned long )*(bios + (unsigned long )i) != (unsigned long )((struct bio *)0)) {
#line 751
    goto ldv_42130;
  } else {

  }
#line 753
  kfree((void const   *)bios);
  submit_one_by_one: 
#line 756
  tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 756
  tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 756
  printk("<4>%s %s: Using the slow drbd_al_to_on_disk_bm()\n", tmp___12, tmp___11);
#line 758
  i = 0;
#line 758
  goto ldv_42135;
  ldv_42134: 
#line 759
  tmp___13 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 759
  enr = tmp___13->lc_number;
#line 760
  if (enr == 4294967295U) {
#line 761
    goto ldv_42133;
  } else {

  }
#line 764
  drbd_bm_write_sect(mdev, (unsigned long )(enr / 4U));
  ldv_42133: 
#line 758
  i = i + 1;
  ldv_42135: ;
#line 758
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 759
    goto ldv_42134;
  } else {

  }
#line 767
  lc_unlock(mdev->act_log);
#line 768
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 769
  put_ldev(mdev);
#line 770
  return;
}
}
#line 776 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct lc_element *tmp___2 ;
  unsigned long tmp___3 ;
  char *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 779
  add = 0UL;
#line 783
  tmp = lc_try_lock(mdev->act_log);
#line 783
  if (tmp != 0) {
#line 783
    goto ldv_42144;
  } else {

  }
#line 783
  tmp___0 = get_current();
#line 783
  __wait.flags = 0U;
#line 783
  __wait.private = (void *)tmp___0;
#line 783
  __wait.func = & autoremove_wake_function;
#line 783
  __wait.task_list.next = & __wait.task_list;
#line 783
  __wait.task_list.prev = & __wait.task_list;
  ldv_42147: 
#line 783
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 783
  tmp___1 = lc_try_lock(mdev->act_log);
#line 783
  if (tmp___1 != 0) {
#line 783
    goto ldv_42146;
  } else {

  }
#line 783
  schedule();
#line 783
  goto ldv_42147;
  ldv_42146: 
#line 783
  finish_wait(& mdev->al_wait, & __wait);
  ldv_42144: 
#line 785
  i = 0;
#line 785
  goto ldv_42150;
  ldv_42149: 
#line 786
  tmp___2 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 786
  enr = tmp___2->lc_number;
#line 787
  if (enr == 4294967295U) {
#line 788
    goto ldv_42148;
  } else {

  }
#line 789
  tmp___3 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 789
  add = tmp___3 + add;
  ldv_42148: 
#line 785
  i = i + 1;
  ldv_42150: ;
#line 785
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 786
    goto ldv_42149;
  } else {

  }
#line 792
  lc_unlock(mdev->act_log);
#line 793
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 795
  tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 795
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 795
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 795
  printk("<6>%s %s: Marked additional %s as out-of-sync based on AL.\n", tmp___6,
         tmp___5, tmp___4);
#line 796
  return;
}
}
#line 799 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 803
  spin_lock_irq(& mdev->al_lock);
#line 804
  rv = al_ext->refcnt == 0U;
#line 805
  tmp = __builtin_expect(rv != 0, 1L);
#line 805
  if (tmp != 0L) {
#line 806
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 807
  spin_unlock_irq(& mdev->al_lock);
#line 809
  return (rv);
}
}
#line 821 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 826
  tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 826
  if (tmp___1 == 0) {
#line 826
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 826
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 826
    printk("<3>%s %s: ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           826);
  } else {

  }
#line 828
  i = 0;
#line 828
  goto ldv_42168;
  ldv_42167: 
#line 829
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 830
  if (al_ext->lc_number == 4294967295U) {
#line 831
    goto ldv_42162;
  } else {

  }
#line 832
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 832
  if (tmp___2 != 0) {
#line 832
    goto ldv_42163;
  } else {

  }
#line 832
  tmp___3 = get_current();
#line 832
  __wait.flags = 0U;
#line 832
  __wait.private = (void *)tmp___3;
#line 832
  __wait.func = & autoremove_wake_function;
#line 832
  __wait.task_list.next = & __wait.task_list;
#line 832
  __wait.task_list.prev = & __wait.task_list;
  ldv_42166: 
#line 832
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 832
  tmp___4 = _try_lc_del(mdev, al_ext);
#line 832
  if (tmp___4 != 0) {
#line 832
    goto ldv_42165;
  } else {

  }
#line 832
  schedule();
#line 832
  goto ldv_42166;
  ldv_42165: 
#line 832
  finish_wait(& mdev->al_wait, & __wait);
  ldv_42163: ;
  ldv_42162: 
#line 828
  i = i + 1;
  ldv_42168: ;
#line 828
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 829
    goto ldv_42167;
  } else {

  }
#line 835
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 836
  return;
}
}
#line 838 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned long tmp___3 ;

  {
#line 840
  __mptr = (struct drbd_work  const  *)w;
#line 840
  udw = (struct update_odbm_work *)__mptr;
#line 842
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 842
  if (tmp___2 == 0) {
#line 843
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 843
    if (tmp___1 != 0) {
#line 844
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 844
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 844
      printk("<4>%s %s: Can not update on disk bitmap, local IO disabled.\n", tmp___0,
             tmp);
    } else {

    }
#line 845
    kfree((void const   *)udw);
#line 846
    return (1);
  } else {

  }
#line 849
  drbd_bm_write_sect(mdev, (unsigned long )udw->enr);
#line 850
  put_ldev(mdev);
#line 852
  kfree((void const   *)udw);
#line 854
  tmp___3 = drbd_bm_total_weight(mdev);
#line 854
  if (tmp___3 <= mdev->rs_failed) {
#line 855
    switch ((int )mdev->state.ldv_33380.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 858
    drbd_resync_finished(mdev);
    default: ;
#line 861
    goto ldv_42184;
    }
    ldv_42184: ;
  } else {

  }
#line 864
  drbd_bcast_sync_progress(mdev);
#line 866
  return (1);
}
}
#line 876 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  void *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 884
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 884
  if (tmp___1 == 0) {
#line 884
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 884
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 884
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           884);
  } else {

  }
#line 888
  enr = (unsigned int )(sector >> 15);
#line 890
  e = lc_get(mdev->resync, enr);
#line 891
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 892
    __mptr = (struct lc_element  const  *)e;
#line 892
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 893
    if (ext->lce.lc_number == enr) {
#line 894
      if (success != 0) {
#line 895
        ext->rs_left = ext->rs_left - count;
      } else {
#line 897
        ext->rs_failed = ext->rs_failed + count;
      }
#line 898
      if (ext->rs_left < ext->rs_failed) {
#line 899
        tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 899
        tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 899
        printk("<3>%s %s: BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
               tmp___3, tmp___2, (unsigned long long )sector, ext->lce.lc_number,
               ext->rs_left, ext->rs_failed, count);
#line 904
        dump_stack();
#line 906
        lc_put(mdev->resync, & ext->lce);
#line 907
        val.i = 0U;
#line 907
        val.ldv_33380.conn = 1U;
#line 907
        mask.i = 0U;
#line 907
        mask.ldv_33380.conn = 31U;
#line 907
        drbd_force_state(mdev, mask, val);
#line 908
        return;
      } else {

      }
    } else {
#line 917
      tmp___4 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 917
      rs_left = tmp___4;
#line 918
      if (ext->flags != 0UL) {
#line 919
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 919
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 919
        printk("<4>%s %s: changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n", tmp___6,
               tmp___5, ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 923
        ext->flags = 0UL;
      } else {

      }
#line 925
      if (ext->rs_failed != 0) {
#line 926
        tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 926
        tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 926
        printk("<4>%s %s: Kicking resync_lru element enr=%u out with rs_failed=%d\n",
               tmp___8, tmp___7, ext->lce.lc_number, ext->rs_failed);
#line 929
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 931
      ext->rs_left = rs_left;
#line 932
      ext->rs_failed = success == 0 ? count : 0;
#line 933
      lc_changed(mdev->resync, & ext->lce);
    }
#line 935
    lc_put(mdev->resync, & ext->lce);
#line 938
    if (ext->rs_left == ext->rs_failed) {
#line 939
      ext->rs_failed = 0;
#line 941
      tmp___9 = kmalloc___3(32UL, 32U);
#line 941
      udw = (struct update_odbm_work *)tmp___9;
#line 942
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 943
        udw->enr = ext->lce.lc_number;
#line 944
        udw->w.cb = & w_update_odbm;
#line 945
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 947
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 947
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 947
        printk("<4>%s %s: Could not kmalloc an udw\n", tmp___11, tmp___10);
#line 948
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {
#line 952
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 952
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 952
    printk("<3>%s %s: lc_get() failed! locked=%d/%d flags=%lu\n", tmp___13, tmp___12,
           mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 953
  return;
}
}
#line 966 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _b___0 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  raw_spinlock_t *tmp___7 ;
  int tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;

  {
#line 971
  count = 0UL;
#line 973
  wake_up = 0;
#line 976
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 977
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 977
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 977
    printk("<3>%s %s: drbd_set_in_sync: sector=%llus size=%d nonsense!\n", tmp___0,
           tmp, (unsigned long long )sector, size);
#line 979
    return;
  } else {

  }
#line 981
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 982
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 984
  _b = sector >= nr_sectors;
#line 984
  if (_b != 0) {
#line 984
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 984
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 984
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "__drbd_set_in_sync",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           984);
  } else {

  }
#line 984
  if (_b != 0) {
#line 984
    return;
  } else {

  }
#line 985
  _b___0 = esector >= nr_sectors;
#line 985
  if (_b___0 != 0) {
#line 985
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 985
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 985
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "__drbd_set_in_sync",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           985);
  } else {

  }
#line 985
  if (_b___0 != 0) {
#line 985
    esector = nr_sectors - 1UL;
  } else {

  }
#line 987
  lbnr = (nr_sectors - 1UL) >> 3;
#line 992
  tmp___5 = __builtin_expect(esector <= 6UL, 0L);
#line 992
  if (tmp___5 != 0L) {
#line 993
    return;
  } else {

  }
#line 994
  tmp___6 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 994
  if (tmp___6 != 0L) {
#line 995
    ebnr = lbnr;
  } else {
#line 997
    ebnr = (esector - 7UL) >> 3;
  }
#line 998
  sbnr = (sector + 7UL) >> 3;
#line 1000
  if (sbnr > ebnr) {
#line 1001
    return;
  } else {

  }
#line 1007
  tmp___7 = spinlock_check(& mdev->al_lock);
#line 1007
  flags = _raw_spin_lock_irqsave(tmp___7);
#line 1008
  tmp___8 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 1008
  count = (unsigned long )tmp___8;
#line 1009
  if (count != 0UL) {
#line 1011
    if ((unsigned long )jiffies - mdev->rs_mark_time > 2500UL) {
#line 1014
      tmp___9 = drbd_bm_total_weight(mdev);
#line 1014
      if ((mdev->rs_mark_left != tmp___9 && (unsigned int )*((unsigned short *)mdev + 902UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 902UL) != 320U) {
#line 1017
        mdev->rs_mark_time = jiffies;
#line 1018
        mdev->rs_mark_left = drbd_bm_total_weight(mdev);
      } else {

      }
    } else {

    }
#line 1021
    tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1021
    if (tmp___10 != 0) {
#line 1022
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 1023
      put_ldev(mdev);
    } else {

    }
#line 1027
    wake_up = 1;
  } else {

  }
#line 1029
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1030
  if (wake_up != 0) {
#line 1031
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1032
  return;
}
}
#line 1042 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int _b ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b___0 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  int tmp___7 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 1050
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1051
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1051
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1051
    printk("<3>%s %s: sector: %llus, size: %d\n", tmp___0, tmp, (unsigned long long )sector,
           size);
#line 1053
    return;
  } else {

  }
#line 1056
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1056
  if (tmp___1 == 0) {
#line 1057
    return;
  } else {

  }
#line 1059
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1060
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1062
  _b = sector >= nr_sectors;
#line 1062
  if (_b != 0) {
#line 1062
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1062
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1062
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___3, tmp___2, "__drbd_set_out_of_sync",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           1062);
  } else {

  }
#line 1062
  if (_b != 0) {
#line 1063
    goto out;
  } else {

  }
#line 1064
  _b___0 = esector >= nr_sectors;
#line 1064
  if (_b___0 != 0) {
#line 1064
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1064
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1064
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "__drbd_set_out_of_sync",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           1064);
  } else {

  }
#line 1064
  if (_b___0 != 0) {
#line 1065
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1067
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1071
  sbnr = sector >> 3;
#line 1072
  ebnr = esector >> 3;
#line 1076
  tmp___6 = spinlock_check(& mdev->al_lock);
#line 1076
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1077
  tmp___7 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 1077
  count = (unsigned int )tmp___7;
#line 1079
  enr = (unsigned int )(sector >> 15);
#line 1080
  e = lc_find(mdev->resync, enr);
#line 1081
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1082
    __mptr = (struct lc_element  const  *)e;
#line 1082
    __mptr___0 = (struct lc_element  const  *)e;
#line 1082
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 1083
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 1086
  put_ldev(mdev);
#line 1087
  return;
}
}
#line 1090 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;

  {
#line 1094
  wakeup = 0;
#line 1097
  spin_lock_irq(& mdev->al_lock);
#line 1098
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 1099
    spin_unlock_irq(& mdev->al_lock);
#line 1100
    return (0);
  } else {

  }
#line 1102
  e = lc_get(mdev->resync, enr);
#line 1103
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1103
    __mptr = (struct lc_element  const  *)e;
#line 1103
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1103
    bm_ext = 0;
  }
#line 1104
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1105
    if (bm_ext->lce.lc_number != enr) {
#line 1106
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1107
      bm_ext->rs_failed = 0;
#line 1108
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1109
      wakeup = 1;
    } else {

    }
#line 1111
    if (bm_ext->lce.refcnt == 1U) {
#line 1112
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1113
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1115
  rs_flags = (mdev->resync)->flags;
#line 1116
  spin_unlock_irq(& mdev->al_lock);
#line 1117
  if (wakeup != 0) {
#line 1118
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1120
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1121
    if ((rs_flags & 4UL) != 0UL) {
#line 1122
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1122
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1122
      printk("<4>%s %s: Have to wait for element (resync LRU too small?)\n", tmp___0,
             tmp);
    } else {

    }
#line 1124
    tmp___1 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1124
    if (tmp___1 != 0L) {
#line 1124
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1124), "i" (12UL));
      ldv_42262: ;
#line 1124
      goto ldv_42262;
    } else {

    }
  } else {

  }
#line 1127
  return (bm_ext);
}
}
#line 1130 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1133
  rv = 0;
#line 1135
  spin_lock_irq(& mdev->al_lock);
#line 1136
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1136
  if (tmp != 0L) {
#line 1137
    rv = 1;
  } else {
#line 1139
    al_ext = lc_find(mdev->act_log, enr);
#line 1140
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1141
      if (al_ext->refcnt != 0U) {
#line 1142
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1145
  spin_unlock_irq(& mdev->al_lock);
#line 1152
  return (rv);
}
}
#line 1162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned int tmp___8 ;

  {
#line 1164
  enr = (unsigned int )(sector >> 15);
#line 1168
  __ret = 0;
#line 1168
  bm_ext = _bme_get(mdev, enr);
#line 1168
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1168
    tmp = get_current();
#line 1168
    __wait.flags = 0U;
#line 1168
    __wait.private = (void *)tmp;
#line 1168
    __wait.func = & autoremove_wake_function;
#line 1168
    __wait.task_list.next = & __wait.task_list;
#line 1168
    __wait.task_list.prev = & __wait.task_list;
    ldv_42281: 
#line 1168
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1168
    bm_ext = _bme_get(mdev, enr);
#line 1168
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1168
      goto ldv_42279;
    } else {

    }
#line 1168
    tmp___0 = get_current();
#line 1168
    tmp___1 = signal_pending(tmp___0);
#line 1168
    if (tmp___1 == 0) {
#line 1168
      schedule();
#line 1168
      goto ldv_42280;
    } else {

    }
#line 1168
    __ret = -512;
#line 1168
    goto ldv_42279;
    ldv_42280: ;
#line 1168
    goto ldv_42281;
    ldv_42279: 
#line 1168
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1168
  sig = __ret;
#line 1170
  if (sig != 0) {
#line 1171
    return (0);
  } else {

  }
#line 1173
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1173
  if (tmp___2 != 0) {
#line 1174
    return (1);
  } else {

  }
#line 1176
  i = 0;
#line 1176
  goto ldv_42290;
  ldv_42289: 
#line 1177
  __ret___0 = 0;
#line 1177
  tmp___7 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1177
  if (tmp___7 != 0) {
#line 1177
    tmp___3 = get_current();
#line 1177
    __wait___0.flags = 0U;
#line 1177
    __wait___0.private = (void *)tmp___3;
#line 1177
    __wait___0.func = & autoremove_wake_function;
#line 1177
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1177
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_42287: 
#line 1177
    prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1177
    tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1177
    if (tmp___4 == 0) {
#line 1177
      goto ldv_42285;
    } else {

    }
#line 1177
    tmp___5 = get_current();
#line 1177
    tmp___6 = signal_pending(tmp___5);
#line 1177
    if (tmp___6 == 0) {
#line 1177
      schedule();
#line 1177
      goto ldv_42286;
    } else {

    }
#line 1177
    __ret___0 = -512;
#line 1177
    goto ldv_42285;
    ldv_42286: ;
#line 1177
    goto ldv_42287;
    ldv_42285: 
#line 1177
    finish_wait(& mdev->al_wait, & __wait___0);
  } else {

  }
#line 1177
  sig = __ret___0;
#line 1179
  if (sig != 0) {
#line 1180
    spin_lock_irq(& mdev->al_lock);
#line 1181
    tmp___8 = lc_put(mdev->resync, & bm_ext->lce);
#line 1181
    if (tmp___8 == 0U) {
#line 1182
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1183
      mdev->resync_locked = mdev->resync_locked - 1U;
#line 1184
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {

    }
#line 1186
    spin_unlock_irq(& mdev->al_lock);
#line 1187
    return (0);
  } else {

  }
#line 1176
  i = i + 1;
  ldv_42290: ;
#line 1176
  if (i <= 3) {
#line 1177
    goto ldv_42289;
  } else {

  }
#line 1191
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1193
  return (1);
}
}
#line 1205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  long tmp___20 ;
  int tmp___21 ;

  {
#line 1207
  enr = (unsigned int )(sector >> 15);
#line 1208
  al_enr = enr * 4U;
#line 1213
  spin_lock_irq(& mdev->al_lock);
#line 1214
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1228
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1229
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1229
      __mptr = (struct lc_element  const  *)e;
#line 1229
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1229
      bm_ext = 0;
    }
#line 1230
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1231
      tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1231
      if (tmp___1 != 0) {
#line 1231
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1231
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1231
        printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
               tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1231);
      } else {

      }
#line 1232
      tmp___4 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1232
      if (tmp___4 == 0) {
#line 1232
        tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1232
        tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1232
        printk("<3>%s %s: ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
               tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1232);
      } else {

      }
#line 1233
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1234
      mdev->resync_wenr = 4294967295U;
#line 1235
      tmp___5 = lc_put(mdev->resync, & bm_ext->lce);
#line 1235
      if (tmp___5 == 0U) {
#line 1236
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1237
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1239
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1239
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1239
      printk("<1>%s %s: LOGIC BUG\n", tmp___7, tmp___6);
    }
  } else {

  }
#line 1243
  e = lc_try_get(mdev->resync, enr);
#line 1244
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1244
    __mptr___0 = (struct lc_element  const  *)e;
#line 1244
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1244
    bm_ext = 0;
  }
#line 1245
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1246
    tmp___8 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1246
    if (tmp___8 != 0) {
#line 1247
      goto proceed;
    } else {

    }
#line 1248
    tmp___11 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1248
    if (tmp___11 == 0) {
#line 1249
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1255
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1256
      if (bm_ext->lce.refcnt == 0U) {
#line 1256
        tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1256
        tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1256
        printk("<3>%s %s: ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n", tmp___10,
               tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1256);
      } else {

      }
    }
#line 1258
    goto check_al;
  } else {
#line 1261
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1262
      goto try_again;
    } else {

    }
#line 1264
    e = lc_get(mdev->resync, enr);
#line 1265
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1265
      __mptr___1 = (struct lc_element  const  *)e;
#line 1265
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1265
      bm_ext = 0;
    }
#line 1266
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1267
      rs_flags = (mdev->resync)->flags;
#line 1268
      if ((rs_flags & 4UL) != 0UL) {
#line 1269
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1269
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1269
        printk("<4>%s %s: Have to wait for element (resync LRU too small?)\n", tmp___13,
               tmp___12);
      } else {

      }
#line 1271
      tmp___14 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1271
      if (tmp___14 != 0L) {
#line 1271
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1271), "i" (12UL));
        ldv_42311: ;
#line 1271
        goto ldv_42311;
      } else {

      }
#line 1272
      goto try_again;
    } else {

    }
#line 1274
    if (bm_ext->lce.lc_number != enr) {
#line 1275
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1276
      bm_ext->rs_failed = 0;
#line 1277
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1278
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1279
      tmp___17 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1279
      if (tmp___17 != 0) {
#line 1279
        tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1279
        tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1279
        printk("<3>%s %s: ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
               tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1279);
      } else {

      }
    } else {

    }
#line 1281
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1282
    if (bm_ext->lce.refcnt != 1U) {
#line 1282
      tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1282
      tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1282
      printk("<3>%s %s: ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n", tmp___19, tmp___18,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             1282);
    } else {

    }
#line 1283
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1284
    goto check_al;
  }
  check_al: 
#line 1287
  i = 0;
#line 1287
  goto ldv_42313;
  ldv_42312: 
#line 1288
  tmp___20 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                              0L);
#line 1288
  if (tmp___20 != 0L) {
#line 1289
    goto try_again;
  } else {

  }
#line 1290
  tmp___21 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1290
  if (tmp___21 != 0) {
#line 1291
    goto try_again;
  } else {

  }
#line 1287
  i = i + 1;
  ldv_42313: ;
#line 1287
  if (i <= 3) {
#line 1288
    goto ldv_42312;
  } else {

  }
#line 1293
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1295
  mdev->resync_wenr = 4294967295U;
#line 1296
  spin_unlock_irq(& mdev->al_lock);
#line 1297
  return (0);
  try_again: ;
#line 1300
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1301
    mdev->resync_wenr = enr;
  } else {

  }
#line 1302
  spin_unlock_irq(& mdev->al_lock);
#line 1303
  return (-11);
}
}
#line 1306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  unsigned int tmp___5 ;

  {
#line 1308
  enr = (unsigned int )(sector >> 15);
#line 1313
  tmp = spinlock_check(& mdev->al_lock);
#line 1313
  flags = _raw_spin_lock_irqsave(tmp);
#line 1314
  e = lc_find(mdev->resync, enr);
#line 1315
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1315
    __mptr = (struct lc_element  const  *)e;
#line 1315
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1315
    bm_ext = 0;
  }
#line 1316
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1317
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1318
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1318
    if (tmp___2 != 0) {
#line 1319
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1319
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1319
      printk("<3>%s %s: drbd_rs_complete_io() called, but extent not found\n", tmp___1,
             tmp___0);
    } else {

    }
#line 1320
    return;
  } else {

  }
#line 1323
  if (bm_ext->lce.refcnt == 0U) {
#line 1324
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1325
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1325
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1325
    printk("<3>%s %s: drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
           tmp___4, tmp___3, (unsigned long long )sector, enr);
#line 1328
    return;
  } else {

  }
#line 1331
  tmp___5 = lc_put(mdev->resync, & bm_ext->lce);
#line 1331
  if (tmp___5 == 0U) {
#line 1332
    clear_bit(1, (unsigned long volatile   *)(& bm_ext->flags));
#line 1333
    clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1334
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1335
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1338
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1339
  return;
}
}
#line 1345 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1347
  spin_lock_irq(& mdev->al_lock);
#line 1349
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1349
  if (tmp != 0) {
#line 1350
    lc_reset(mdev->resync);
#line 1351
    put_ldev(mdev);
  } else {

  }
#line 1353
  mdev->resync_locked = 0U;
#line 1354
  mdev->resync_wenr = 4294967295U;
#line 1355
  spin_unlock_irq(& mdev->al_lock);
#line 1356
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1357
  return;
}
}
#line 1366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;

  {
#line 1372
  spin_lock_irq(& mdev->al_lock);
#line 1374
  tmp___17 = _get_ldev_if_state(mdev, D_FAILED);
#line 1374
  if (tmp___17 != 0) {
#line 1376
    i = 0;
#line 1376
    goto ldv_42342;
    ldv_42341: 
#line 1377
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1378
    __mptr = (struct lc_element  const  *)e;
#line 1378
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1379
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1380
      goto ldv_42340;
    } else {

    }
#line 1381
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1382
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1382
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1382
      printk("<6>%s %s: dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
             tmp___0, tmp, mdev->resync_wenr);
#line 1385
      tmp___3 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1385
      if (tmp___3 != 0) {
#line 1385
        tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1385
        tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1385
        printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
               tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1385);
      } else {

      }
#line 1386
      tmp___6 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1386
      if (tmp___6 == 0) {
#line 1386
        tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1386
        tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1386
        printk("<3>%s %s: ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
               tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
               1386);
      } else {

      }
#line 1387
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1388
      mdev->resync_wenr = 4294967295U;
#line 1389
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1391
    if (bm_ext->lce.refcnt != 0U) {
#line 1392
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1392
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1392
      printk("<6>%s %s: Retrying drbd_rs_del_all() later. refcnt=%d\n", tmp___8, tmp___7,
             bm_ext->lce.refcnt);
#line 1394
      put_ldev(mdev);
#line 1395
      spin_unlock_irq(& mdev->al_lock);
#line 1396
      return (-11);
    } else {

    }
#line 1398
    tmp___11 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1398
    if (tmp___11 != 0) {
#line 1398
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1398
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1398
      printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
             tmp___10, tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             1398);
    } else {

    }
#line 1399
    tmp___14 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1399
    if (tmp___14 != 0) {
#line 1399
      tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1399
      tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1399
      printk("<3>%s %s: ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
             tmp___13, tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             1399);
    } else {

    }
#line 1400
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_42340: 
#line 1376
    i = i + 1;
    ldv_42342: ;
#line 1376
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1377
      goto ldv_42341;
    } else {

    }

#line 1402
    if ((mdev->resync)->used != 0U) {
#line 1402
      tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1402
      tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1402
      printk("<3>%s %s: ASSERT( mdev->resync->used == 0 ) in %s:%d\n", tmp___16, tmp___15,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
             1402);
    } else {

    }
#line 1403
    put_ldev(mdev);
  } else {

  }
#line 1405
  spin_unlock_irq(& mdev->al_lock);
#line 1407
  return (0);
}
}
#line 1416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _b___0 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1422
  wake_up = 0;
#line 1424
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1425
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1425
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1425
    printk("<3>%s %s: drbd_rs_failed_io: sector=%llus size=%d nonsense!\n", tmp___0,
           tmp, (unsigned long long )sector, size);
#line 1427
    return;
  } else {

  }
#line 1429
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1430
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1432
  _b = sector >= nr_sectors;
#line 1432
  if (_b != 0) {
#line 1432
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1432
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1432
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_rs_failed_io",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           1432);
  } else {

  }
#line 1432
  if (_b != 0) {
#line 1432
    return;
  } else {

  }
#line 1433
  _b___0 = esector >= nr_sectors;
#line 1433
  if (_b___0 != 0) {
#line 1433
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1433
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1433
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "drbd_rs_failed_io",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
           1433);
  } else {

  }
#line 1433
  if (_b___0 != 0) {
#line 1433
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1435
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1440
  tmp___5 = __builtin_expect(esector <= 6UL, 0L);
#line 1440
  if (tmp___5 != 0L) {
#line 1441
    return;
  } else {

  }
#line 1442
  tmp___6 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1442
  if (tmp___6 != 0L) {
#line 1443
    ebnr = lbnr;
  } else {
#line 1445
    ebnr = (esector - 7UL) >> 3;
  }
#line 1446
  sbnr = (sector + 7UL) >> 3;
#line 1448
  if (sbnr > ebnr) {
#line 1449
    return;
  } else {

  }
#line 1455
  spin_lock_irq(& mdev->al_lock);
#line 1456
  tmp___7 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1456
  count = (unsigned long )tmp___7;
#line 1457
  if (count != 0UL) {
#line 1458
    mdev->rs_failed = mdev->rs_failed + count;
#line 1460
    tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1460
    if (tmp___8 != 0) {
#line 1461
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1462
      put_ldev(mdev);
    } else {

    }
#line 1467
    wake_up = 1;
  } else {

  }
#line 1469
  spin_unlock_irq(& mdev->al_lock);
#line 1470
  if (wake_up != 0) {
#line 1471
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1472
  return;
}
}
#line 1474 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1479
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1481
  mutex_lock(ldv_func_arg1);
#line 1482
  return;
}
}
#line 1484 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_64(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1489
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1491
  mutex_unlock(ldv_func_arg1);
#line 1492
  return;
}
}
#line 1494 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_65(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1499
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1501
  mutex_unlock(ldv_func_arg1);
#line 1502
  return;
}
}
#line 1504 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
__inline static int ldv_mutex_is_locked_66(struct mutex *lock ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1509
  tmp = mutex_is_locked(lock);
#line 1509
  ldv_func_res = tmp;
#line 1511
  tmp___0 = ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(lock);
#line 1511
  return (tmp___0);
#line 1513
  return (ldv_func_res);
}
}
#line 1516 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_67(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1521
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1523
  mutex_lock(ldv_func_arg1);
#line 1524
  return;
}
}
#line 1526 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_68(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1531
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1533
  mutex_unlock(ldv_func_arg1);
#line 1534
  return;
}
}
#line 1536 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_69(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1541
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1543
  mutex_lock(ldv_func_arg1);
#line 1544
  return;
}
}
#line 1546 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_70(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1551
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1553
  mutex_unlock(ldv_func_arg1);
#line 1554
  return;
}
}
#line 1556 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1561
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1563
  mutex_unlock(ldv_func_arg1);
#line 1564
  return;
}
}
#line 1566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_72(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1571
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1573
  mutex_unlock(ldv_func_arg1);
#line 1574
  return;
}
}
#line 1576 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_73(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1581
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 1583
  mutex_unlock(ldv_func_arg1);
#line 1584
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 112 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 164 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 166
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 168
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 169
  memset((void *)dst, 255, (size_t )len);
#line 171
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 172
  return;
}
}
#line 271 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 275
  tmp___0 = __bitmap_weight(src, nbits);
#line 275
  return (tmp___0);
}
}
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_online_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 612
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 614
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 155 "include/linux/mutex.h"
void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_87(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_89(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_92(struct mutex *ldv_func_arg1 ) ;
#line 171
void ldv_mutex_unlock_93(struct mutex *ldv_func_arg1 ) ;
#line 175
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) ;
#line 179
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) ;
#line 183
void ldv_mutex_unlock_99(struct mutex *ldv_func_arg1 ) ;
#line 187
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) ;
#line 191
void ldv_mutex_unlock_103(struct mutex *ldv_func_arg1 ) ;
#line 195
void ldv_mutex_unlock_105(struct mutex *ldv_func_arg1 ) ;
#line 199
void ldv_mutex_unlock_107(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_85(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_88(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_90(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_91(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_94(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_96(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_98(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_102(struct mutex *ldv_func_arg1 ) ;
#line 46
void ldv_mutex_lock_104(struct mutex *ldv_func_arg1 ) ;
#line 50
void ldv_mutex_lock_106(struct mutex *ldv_func_arg1 ) ;
#line 79
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 83
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___1(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 218
  switch (8UL) {
  case 1UL: 
#line 218
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5878;
  case 2UL: 
#line 218
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5878;
  case 4UL: 
#line 218
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5878;
  case 8UL: 
#line 218
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 218
  goto ldv_5878;
  default: 
#line 218
  __bad_percpu_size();
  }
  ldv_5878: 
#line 218
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 220
  return (ti);
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 59 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 229 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 81 "include/trace/events/module.h"
extern struct tracepoint __tracepoint_module_get ;
#line 81 "include/trace/events/module.h"
__inline static void trace_module_get(struct module *mod , unsigned long ip , int refcnt ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 76
  tmp___1 = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 76
  if (tmp___1 != 0L) {
#line 76
    rcu_read_lock_sched_notrace();
#line 76
    tmp = debug_lockdep_rcu_enabled();
#line 76
    if (tmp != 0) {
#line 76
      tmp___0 = rcu_read_lock_sched_held();
#line 76
      if (tmp___0 == 0) {
#line 76
        lockdep_rcu_dereference("include/trace/events/module.h", 81);
      } else {

      }
    } else {

    }
#line 76
    _________p1 = *((void ** volatile  *)(& __tracepoint_module_get.funcs));
#line 76
    it_func = _________p1;
#line 76
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_11173: 
#line 76
      (*((void (*)(struct module * , unsigned long  , int  ))*it_func))(mod, ip, refcnt);
#line 76
      it_func = it_func + 1;
#line 76
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 77
        goto ldv_11173;
      } else {

      }

    } else {

    }
#line 76
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 78
  return;
}
}
#line 391 "include/linux/module.h"
__inline static int module_is_live(struct module *mod ) 
{ 


  {
#line 393
  return ((unsigned int )mod->state != 2U);
}
}
#line 474 "include/linux/module.h"
__inline static int try_module_get(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  unsigned int pscr_ret__ ;
  void const   *__vpp_verify___0 ;
  unsigned int pfo_ret__ ;
  unsigned int pfo_ret_____0 ;
  unsigned int pfo_ret_____1 ;
  unsigned int pfo_ret_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 476
  ret = 1;
#line 478
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 481
    tmp = module_is_live(module);
#line 481
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 481
    if (tmp___0 != 0L) {
#line 482
      __vpp_verify = 0;
#line 482
      switch (4UL) {
      case 1UL: 
#line 482
      pao_ID__ = 1;
#line 482
      switch (4UL) {
      case 1UL: ;
#line 482
      if (pao_ID__ == 1) {
#line 482
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID__ == -1) {
#line 482
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 482
      goto ldv_11540;
      case 2UL: ;
#line 482
      if (pao_ID__ == 1) {
#line 482
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID__ == -1) {
#line 482
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11540;
      case 4UL: ;
#line 482
      if (pao_ID__ == 1) {
#line 482
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID__ == -1) {
#line 482
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11540;
      case 8UL: ;
#line 482
      if (pao_ID__ == 1) {
#line 482
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID__ == -1) {
#line 482
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 482
      goto ldv_11540;
      default: 
#line 482
      __bad_percpu_size();
      }
      ldv_11540: ;
#line 482
      goto ldv_11545;
      case 2UL: 
#line 482
      pao_ID_____0 = 1;
#line 482
      switch (4UL) {
      case 1UL: ;
#line 482
      if (pao_ID_____0 == 1) {
#line 482
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____0 == -1) {
#line 482
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 482
      goto ldv_11551;
      case 2UL: ;
#line 482
      if (pao_ID_____0 == 1) {
#line 482
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____0 == -1) {
#line 482
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11551;
      case 4UL: ;
#line 482
      if (pao_ID_____0 == 1) {
#line 482
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____0 == -1) {
#line 482
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11551;
      case 8UL: ;
#line 482
      if (pao_ID_____0 == 1) {
#line 482
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____0 == -1) {
#line 482
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 482
      goto ldv_11551;
      default: 
#line 482
      __bad_percpu_size();
      }
      ldv_11551: ;
#line 482
      goto ldv_11545;
      case 4UL: 
#line 482
      pao_ID_____1 = 1;
#line 482
      switch (4UL) {
      case 1UL: ;
#line 482
      if (pao_ID_____1 == 1) {
#line 482
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____1 == -1) {
#line 482
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 482
      goto ldv_11561;
      case 2UL: ;
#line 482
      if (pao_ID_____1 == 1) {
#line 482
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____1 == -1) {
#line 482
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11561;
      case 4UL: ;
#line 482
      if (pao_ID_____1 == 1) {
#line 482
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____1 == -1) {
#line 482
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11561;
      case 8UL: ;
#line 482
      if (pao_ID_____1 == 1) {
#line 482
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____1 == -1) {
#line 482
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 482
      goto ldv_11561;
      default: 
#line 482
      __bad_percpu_size();
      }
      ldv_11561: ;
#line 482
      goto ldv_11545;
      case 8UL: 
#line 482
      pao_ID_____2 = 1;
#line 482
      switch (4UL) {
      case 1UL: ;
#line 482
      if (pao_ID_____2 == 1) {
#line 482
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____2 == -1) {
#line 482
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 482
      goto ldv_11571;
      case 2UL: ;
#line 482
      if (pao_ID_____2 == 1) {
#line 482
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____2 == -1) {
#line 482
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11571;
      case 4UL: ;
#line 482
      if (pao_ID_____2 == 1) {
#line 482
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____2 == -1) {
#line 482
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11571;
      case 8UL: ;
#line 482
      if (pao_ID_____2 == 1) {
#line 482
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____2 == -1) {
#line 482
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 482
      goto ldv_11571;
      default: 
#line 482
      __bad_percpu_size();
      }
      ldv_11571: ;
#line 482
      goto ldv_11545;
      default: 
#line 482
      __bad_size_call_parameter();
#line 482
      goto ldv_11545;
      }
      ldv_11545: 
#line 484
      __vpp_verify___0 = 0;
#line 484
      switch (4UL) {
      case 1UL: ;
#line 484
      switch (4UL) {
      case 1UL: 
#line 484
      __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11584;
      case 2UL: 
#line 484
      __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11584;
      case 4UL: 
#line 484
      __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11584;
      case 8UL: 
#line 484
      __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11584;
      default: 
#line 484
      __bad_percpu_size();
      }
      ldv_11584: 
#line 484
      pscr_ret__ = pfo_ret__;
#line 484
      goto ldv_11590;
      case 2UL: ;
#line 484
      switch (4UL) {
      case 1UL: 
#line 484
      __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11594;
      case 2UL: 
#line 484
      __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11594;
      case 4UL: 
#line 484
      __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11594;
      case 8UL: 
#line 484
      __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11594;
      default: 
#line 484
      __bad_percpu_size();
      }
      ldv_11594: 
#line 484
      pscr_ret__ = pfo_ret_____0;
#line 484
      goto ldv_11590;
      case 4UL: ;
#line 484
      switch (4UL) {
      case 1UL: 
#line 484
      __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11603;
      case 2UL: 
#line 484
      __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11603;
      case 4UL: 
#line 484
      __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11603;
      case 8UL: 
#line 484
      __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11603;
      default: 
#line 484
      __bad_percpu_size();
      }
      ldv_11603: 
#line 484
      pscr_ret__ = pfo_ret_____1;
#line 484
      goto ldv_11590;
      case 8UL: ;
#line 484
      switch (4UL) {
      case 1UL: 
#line 484
      __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11612;
      case 2UL: 
#line 484
      __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11612;
      case 4UL: 
#line 484
      __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11612;
      case 8UL: 
#line 484
      __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11612;
      default: 
#line 484
      __bad_percpu_size();
      }
      ldv_11612: 
#line 484
      pscr_ret__ = pfo_ret_____2;
#line 484
      goto ldv_11590;
      default: 
#line 484
      __bad_size_call_parameter();
#line 484
      goto ldv_11590;
      }
      ldv_11590: ;
#line 483
      trace_module_get(module, (unsigned long )((void *)0), (int )pscr_ret__);
    } else {
#line 486
      ret = 0;
    }
  } else {

  }
#line 490
  return (ret);
}
}
#line 493
extern void module_put(struct module * ) ;
#line 248 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 272
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___4(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13410: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13410;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___4(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___4(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___4(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc___1(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc___4(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 208 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 208
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 208
  return (tmp);
}
}
#line 1943 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 1944
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 1945
extern struct block_device *bdget(dev_t  ) ;
#line 1949
extern void bdput(struct block_device * ) ;
#line 1984
extern void bd_release(struct block_device * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 1776 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 1994
extern int wake_up_process(struct task_struct * ) ;
#line 15 "include/linux/file.h"
extern void fput(struct file * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create(int (*)(void * ) , void * , char const   * 
                                          , ...) ;
#line 350 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 356
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 541
extern struct gendisk *alloc_disk(int  ) ;
#line 543
extern void put_disk(struct gendisk * ) ;
#line 258 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 260
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 261
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 261
    return (tmp);
  } else {

  }
#line 262
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 795 "include/linux/blkdev.h"
extern int blk_remove_plug(struct request_queue * ) ;
#line 930
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 931
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 932
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 935
extern void blk_queue_max_segment_size(struct request_queue * , unsigned int  ) ;
#line 962
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 981
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 163 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 549 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 551
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 551
  if (tmp != 0L) {
#line 551
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (551), "i" (12UL));
    ldv_41431: ;
#line 551
    goto ldv_41431;
  } else {

  }
#line 552
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 553
  return;
}
}
#line 562 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 564
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 565
  return;
}
}
#line 574 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 576
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 576
  if (tmp != 0L) {
#line 576
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (576), "i" (12UL));
    ldv_41446: ;
#line 576
    goto ldv_41446;
  } else {

  }
#line 577
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 578
  return;
}
}
#line 1053 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock___0(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1055
  ldv_mutex_lock_85(& mdev->data.mutex);
#line 1058
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1058
  if (tmp != 0L) {
#line 1059
    ldv_mutex_unlock_86(& mdev->data.mutex);
#line 1060
    return (0);
  } else {

  }
#line 1062
  return (1);
}
}
#line 1065 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock___0(struct drbd_conf *mdev ) 
{ 


  {
#line 1067
  ldv_mutex_unlock_87(& mdev->data.mutex);
#line 1068
  return;
}
}
#line 1084
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1093
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) ;
#line 1099
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1104
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1110
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1114
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1154
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1156
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1161
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1165
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1168
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1169
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1170
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1171
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1354 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1356 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1357 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1358 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1359 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1362 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1363 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1364 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1368
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1369
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1381
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1382
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1532
void drbd_nl_cleanup(void) ;
#line 1533
int drbd_nl_init(void) ;
#line 1534
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1596 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1598
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1598
  if (tmp == 0) {
#line 1598
    goto ldv_42418;
  } else {

  }
#line 1598
  tmp___0 = get_current();
#line 1598
  __wait.flags = 0U;
#line 1598
  __wait.private = (void *)tmp___0;
#line 1598
  __wait.func = & autoremove_wake_function;
#line 1598
  __wait.task_list.next = & __wait.task_list;
#line 1598
  __wait.task_list.prev = & __wait.task_list;
  ldv_42421: 
#line 1598
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1598
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1598
  if (tmp___1 == 0) {
#line 1598
    goto ldv_42420;
  } else {

  }
#line 1598
  schedule();
#line 1598
  goto ldv_42421;
  ldv_42420: 
#line 1598
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42418: ;
#line 1601
  return;
}
}
#line 1639 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1641
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1643
  if (forcedetach == 0) {
#line 1644
    tmp___1 = __printk_ratelimit("__drbd_chk_io_error_");
#line 1644
    if (tmp___1 != 0) {
#line 1645
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1647
    goto ldv_42444;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1652
  if ((int )mdev->state.ldv_33380.disk > 2) {
#line 1653
    __ns.i = mdev->state.i;
#line 1653
    __ns.ldv_33380.disk = 2U;
#line 1653
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1654
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1654
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1657
  goto ldv_42444;
  }
  ldv_42444: ;
#line 1660
  return;
}
}
#line 1670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____2(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1673
  if (error != 0) {
#line 1675
    tmp = spinlock_check(& mdev->req_lock);
#line 1675
    flags = _raw_spin_lock_irqsave(tmp);
#line 1676
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1677
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1679
  return;
}
}
#line 1732 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1735
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1739
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1739
  if (tmp___1 != 0UL) {
#line 1739
    __min1 = 34359738368UL;
#line 1739
    tmp___0 = drbd_md_first_sector(bdev);
#line 1739
    __min2 = tmp___0;
#line 1739
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1739
    s = 0UL;
  }
#line 1742
  goto ldv_42485;
  case -2: 
#line 1744
  __min1___0 = 34359738368UL;
#line 1744
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1744
  __min2___0 = tmp___2;
#line 1744
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1747
  __min1___1 = s;
#line 1747
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1747
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1750
  goto ldv_42485;
  default: 
#line 1752
  __min1___2 = 8587575296UL;
#line 1752
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1752
  __min2___2 = tmp___3;
#line 1752
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_42485: ;
#line 1755
  return (s);
}
}
#line 1763 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  sector_t tmp___2 ;

  {
#line 1766
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1768
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1774
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1775
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1775
    if (tmp___1 != 0) {
#line 1776
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1776
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1776
      printk("<3>%s %s: bdev->backing_bdev==NULL\n", tmp___0, tmp);
#line 1777
      dump_stack();
    } else {

    }
#line 1779
    return (0UL);
  } else {

  }
#line 1781
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1781
  return ((sector_t )(((unsigned long long )tmp___2 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1784
  return (0UL);
  }
}
}
#line 1853 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1855
  _drbd_thread_stop(thi, 0, 0);
#line 1856
  return;
}
}
#line 1858 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1860
  _drbd_thread_stop(thi, 1, 0);
#line 1861
  return;
}
}
#line 2049 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(union drbd_state s ) 
{ 


  {
#line 2055
  switch ((unsigned int )s.ldv_33380.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2068
  goto ldv_42603;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2087
  return (0);
  }
  ldv_42603: ;
#line 2090
  switch ((unsigned int )s.ldv_33380.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2097
  goto ldv_42623;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2106
  return (0);
  }
  ldv_42623: ;
#line 2109
  return (1);
}
}
#line 2112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2114
  tmp = drbd_get_max_buffers(mdev);
#line 2114
  mxb = tmp;
#line 2116
  if ((unsigned int )*((unsigned char *)mdev + 1806UL) != 0U) {
#line 2117
    return (0);
  } else {

  }
#line 2118
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2118
  if (tmp___0 != 0) {
#line 2119
    return (0);
  } else {

  }
#line 2126
  tmp___1 = drbd_state_is_stable___0(mdev->state);
#line 2126
  if (tmp___1 == 0) {
#line 2127
    return (0);
  } else {

  }
#line 2131
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2131
  if (tmp___2 > mxb) {
#line 2132
    return (0);
  } else {

  }
#line 2133
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2133
  if (tmp___3 != 0) {
#line 2134
    return (0);
  } else {

  }
#line 2135
  return (1);
}
}
#line 2216 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2218
  sk = (mdev->data.socket)->sk;
#line 2219
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2220
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2221
  return;
}
}
#line 2223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2230
  return (0);
}
}
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_42860;
  ldv_42859: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_42860: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_42859;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) ;
#line 112
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 113
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 114
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 115
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 117
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 118
static void md_sync_timer_fn(unsigned long data ) ;
#line 119
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 143 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 159 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 164
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 191 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, 0, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}}}, 1250, 5,
    0, 0, 0UL};
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 193
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 235
  tmp = kmalloc___4(56UL, 208U);
#line 235
  b = (struct drbd_tl_epoch *)tmp;
#line 236
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 237
    return (0);
  } else {

  }
#line 238
  INIT_LIST_HEAD(& b->requests);
#line 239
  INIT_LIST_HEAD(& b->w.list);
#line 240
  b->next = 0;
#line 241
  b->br_number = 4711U;
#line 242
  b->n_req = 0;
#line 243
  b->w.cb = 0;
#line 245
  mdev->oldest_tle = b;
#line 246
  mdev->newest_tle = b;
#line 247
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 249
  mdev->tl_hash = 0;
#line 250
  mdev->tl_hash_s = 0U;
#line 252
  return (1);
}
}
#line 255 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 257
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 257
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 257
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 257
    printk("<3>%s %s: ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           257);
  } else {

  }
#line 258
  tmp___3 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 258
  if (tmp___3 == 0) {
#line 258
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 258
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 258
    printk("<3>%s %s: ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
           tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           258);
  } else {

  }
#line 259
  kfree((void const   *)mdev->oldest_tle);
#line 260
  mdev->oldest_tle = 0;
#line 261
  kfree((void const   *)mdev->unused_spare_tle);
#line 262
  mdev->unused_spare_tle = 0;
#line 263
  kfree((void const   *)mdev->tl_hash);
#line 264
  mdev->tl_hash = 0;
#line 265
  mdev->tl_hash_s = 0U;
#line 266
  return;
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 279
  INIT_LIST_HEAD(& new->requests);
#line 280
  INIT_LIST_HEAD(& new->w.list);
#line 281
  new->w.cb = 0;
#line 282
  new->next = 0;
#line 283
  new->n_req = 0;
#line 285
  newest_before = mdev->newest_tle;
#line 288
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 289
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 290
    (mdev->newest_tle)->next = new;
#line 291
    mdev->newest_tle = new;
  } else {

  }
#line 293
  return;
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  struct list_head  const  *__mptr ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 312
  spin_lock_irq(& mdev->req_lock);
#line 314
  b = mdev->oldest_tle;
#line 317
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 318
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 318
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 318
    printk("<3>%s %s: BAD! BarrierAck #%u received, but no epoch in tl!?\n", tmp___0,
           tmp, barrier_nr);
#line 320
    goto bail;
  } else {

  }
#line 322
  if (b->br_number != barrier_nr) {
#line 323
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 323
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 323
    printk("<3>%s %s: BAD! BarrierAck #%u received, expected #%u!\n", tmp___2, tmp___1,
           barrier_nr, b->br_number);
#line 325
    goto bail;
  } else {

  }
#line 327
  if ((unsigned int )b->n_req != set_size) {
#line 328
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 328
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 328
    printk("<3>%s %s: BAD! BarrierAck #%u received with n_req=%u, expected n_req=%u!\n",
           tmp___4, tmp___3, barrier_nr, set_size, b->n_req);
#line 330
    goto bail;
  } else {

  }
#line 334
  le = b->requests.next;
#line 334
  tle = le->next;
#line 334
  goto ldv_43082;
  ldv_43081: 
#line 335
  __mptr = (struct list_head  const  *)le;
#line 335
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 336
  _req_mod(r, barrier_acked);
#line 334
  le = tle;
#line 334
  tle = le->next;
  ldv_43082: ;
#line 334
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 335
    goto ldv_43081;
  } else {

  }
#line 351
  list_del_init(& b->requests);
#line 353
  nob = b->next;
#line 354
  tmp___7 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 354
  if (tmp___7 != 0) {
#line 355
    _tl_add_barrier(mdev, b);
#line 356
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 357
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 361
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 361
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 361
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 361
      printk("<3>%s %s: ASSERT( nob != NULL ) in %s:%d\n", tmp___6, tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             361);
    } else {

    }
#line 362
    mdev->oldest_tle = nob;
#line 363
    kfree((void const   *)b);
  }
#line 366
  spin_unlock_irq(& mdev->req_lock);
#line 367
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 367
  if (tmp___8 != 0) {
#line 367
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 367
  tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 367
  if (tmp___12 < 0) {
#line 367
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 367
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 367
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 367
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___11, tmp___10,
           "tl_release", 367, tmp___9);
  } else {

  }
#line 369
  return;
  bail: 
#line 372
  spin_unlock_irq(& mdev->req_lock);
#line 373
  val.i = 0U;
#line 373
  val.ldv_33380.conn = 6U;
#line 373
  mask.i = 0U;
#line 373
  mask.ldv_33380.conn = 31U;
#line 373
  drbd_force_state(mdev, mask, val);
#line 375
  return;
}
}
#line 385 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int new_initial_bnr ;
  u32 tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 390
  tmp___0 = random32();
#line 390
  new_initial_bnr = (int )tmp___0;
#line 392
  spin_lock_irq(& mdev->req_lock);
#line 394
  b = mdev->oldest_tle;
#line 395
  goto ldv_43112;
  ldv_43111: 
#line 396
  le = b->requests.next;
#line 396
  tle = le->next;
#line 396
  goto ldv_43104;
  ldv_43103: 
#line 397
  __mptr = (struct list_head  const  *)le;
#line 397
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 400
  _req_mod(r, connection_lost_while_pending);
#line 396
  le = tle;
#line 396
  tle = le->next;
  ldv_43104: ;
#line 396
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 397
    goto ldv_43103;
  } else {

  }
#line 402
  tmp = b->next;
#line 406
  list_del(& b->requests);
#line 411
  if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * , struct drbd_work * ,
                                                           int  ))0)) {
#line 412
    tmp___1 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 412
    if (tmp___1 != 0) {
#line 412
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 412
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 412
    if (tmp___5 < 0) {
#line 412
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 412
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 412
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 412
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
             "tl_clear", 412, tmp___2);
    } else {

    }
  } else {

  }
#line 414
  if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 416
    if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 416
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 416
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 416
      printk("<3>%s %s: ASSERT( tmp == NULL ) in %s:%d\n", tmp___7, tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             416);
    } else {

    }
#line 417
    INIT_LIST_HEAD(& b->requests);
#line 418
    INIT_LIST_HEAD(& b->w.list);
#line 419
    b->w.cb = 0;
#line 420
    b->br_number = (unsigned int )new_initial_bnr;
#line 421
    b->n_req = 0;
#line 423
    mdev->oldest_tle = b;
#line 424
    goto ldv_43110;
  } else {

  }
#line 426
  kfree((void const   *)b);
#line 427
  b = tmp;
  ldv_43112: ;
#line 395
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 396
    goto ldv_43111;
  } else {

  }
  ldv_43110: 
#line 431
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 431
  if (tmp___10 == 0) {
#line 431
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 431
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 431
    printk("<3>%s %s: ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
           tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           431);
  } else {

  }
#line 434
  le = mdev->out_of_sequence_requests.next;
#line 434
  tle = le->next;
#line 434
  goto ldv_43116;
  ldv_43115: 
#line 435
  __mptr___0 = (struct list_head  const  *)le;
#line 435
  r = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 438
  _req_mod(r, connection_lost_while_pending);
#line 434
  le = tle;
#line 434
  tle = le->next;
  ldv_43116: ;
#line 434
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 435
    goto ldv_43115;
  } else {

  }
#line 442
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 444
  spin_unlock_irq(& mdev->req_lock);
#line 445
  return;
}
}
#line 453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 456
  return (((((int )os.ldv_33380.conn > 9 && (int )ns.ldv_33380.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_33380.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 472
  tmp = spinlock_check(& mdev->req_lock);
#line 472
  flags = _raw_spin_lock_irqsave(tmp);
#line 473
  os = mdev->state;
#line 474
  ns.i = (os.i & ~ mask.i) | val.i;
#line 475
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 476
  ns = mdev->state;
#line 477
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 479
  return (rv);
}
}
#line 488 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 491
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 492
  return;
}
}
#line 494
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 495
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) ;
#line 497
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) ;
#line 499
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_ret_codes _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                              union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  int rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 509
  tmp = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 509
  if (tmp != 0) {
#line 510
    return (SS_CW_SUCCESS);
  } else {

  }
#line 512
  tmp___0 = test_and_clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 512
  if (tmp___0 != 0) {
#line 513
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 515
  rv = 0;
#line 516
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 516
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 517
  os = mdev->state;
#line 518
  ns.i = (os.i & ~ mask.i) | val.i;
#line 519
  ns = sanitize_state(mdev, os, ns, 0);
#line 521
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 521
  if (tmp___2 == 0) {
#line 522
    rv = 4;
  } else {

  }
#line 523
  if (rv == 0) {
#line 524
    rv = is_valid_state(mdev, ns);
#line 525
    if (rv == 1) {
#line 526
      rv = is_valid_state_transition(mdev, ns, os);
#line 527
      if (rv == 1) {
#line 528
        rv = 0;
      } else {

      }
    } else {

    }
  } else {

  }
#line 531
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 533
  return ((enum drbd_state_ret_codes )rv);
}
}
#line 546 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_req_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                          enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  enum drbd_state_ret_codes tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  enum drbd_state_ret_codes tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 555
  init_completion(& done);
#line 557
  if (((unsigned int )f & 8U) != 0U) {
#line 558
    ldv_mutex_lock_88(& mdev->state_mutex);
  } else {

  }
#line 560
  tmp = spinlock_check(& mdev->req_lock);
#line 560
  flags = _raw_spin_lock_irqsave(tmp);
#line 561
  os = mdev->state;
#line 562
  ns.i = (os.i & ~ mask.i) | val.i;
#line 563
  ns = sanitize_state(mdev, os, ns, 0);
#line 565
  tmp___5 = cl_wide_st_chg(mdev, os, ns);
#line 565
  if (tmp___5 != 0) {
#line 566
    rv = is_valid_state(mdev, ns);
#line 567
    if (rv == 1) {
#line 568
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 569
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 571
    if (rv <= 0) {
#line 572
      if (((unsigned int )f & 2U) != 0U) {
#line 573
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 574
      goto abort;
    } else {

    }
#line 577
    drbd_state_lock___0(mdev);
#line 578
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 578
    if (tmp___0 == 0) {
#line 579
      drbd_state_unlock(mdev);
#line 580
      rv = -10;
#line 581
      if (((unsigned int )f & 2U) != 0U) {
#line 582
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 583
      goto abort;
    } else {

    }
#line 586
    tmp___1 = _req_st_cond(mdev, mask, val);
#line 586
    rv = (int )tmp___1;
#line 586
    if (rv != 0) {
#line 586
      goto ldv_43184;
    } else {

    }
#line 586
    tmp___2 = get_current();
#line 586
    __wait.flags = 0U;
#line 586
    __wait.private = (void *)tmp___2;
#line 586
    __wait.func = & autoremove_wake_function;
#line 586
    __wait.task_list.next = & __wait.task_list;
#line 586
    __wait.task_list.prev = & __wait.task_list;
    ldv_43187: 
#line 586
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 586
    tmp___3 = _req_st_cond(mdev, mask, val);
#line 586
    rv = (int )tmp___3;
#line 586
    if (rv != 0) {
#line 586
      goto ldv_43186;
    } else {

    }
#line 586
    schedule();
#line 586
    goto ldv_43187;
    ldv_43186: 
#line 586
    finish_wait(& mdev->state_wait, & __wait);
    ldv_43184: ;
#line 589
    if (rv <= 0) {
#line 590
      drbd_state_unlock(mdev);
#line 591
      if (((unsigned int )f & 2U) != 0U) {
#line 592
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 593
      goto abort;
    } else {

    }
#line 595
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 595
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 596
    os = mdev->state;
#line 597
    ns.i = (os.i & ~ mask.i) | val.i;
#line 598
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 599
    drbd_state_unlock(mdev);
  } else {
#line 601
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 604
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 606
  if (((unsigned int )f & 4U) != 0U && rv == 1) {
#line 607
    tmp___8 = get_current();
#line 607
    if ((unsigned long )tmp___8 == (unsigned long )mdev->worker.task) {
#line 607
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 607
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 607
      printk("<3>%s %s: ASSERT( current != mdev->worker.task ) in %s:%d\n", tmp___7,
             tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             607);
    } else {

    }
#line 608
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 612
  if (((unsigned int )f & 8U) != 0U) {
#line 613
    ldv_mutex_unlock_89(& mdev->state_mutex);
  } else {

  }
#line 615
  return (rv);
}
}
#line 628 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) 
{ 
  int rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 633
  rv = drbd_req_state(mdev, mask, val, f);
#line 633
  if (rv != -18) {
#line 633
    goto ldv_43198;
  } else {

  }
#line 633
  tmp = get_current();
#line 633
  __wait.flags = 0U;
#line 633
  __wait.private = (void *)tmp;
#line 633
  __wait.func = & autoremove_wake_function;
#line 633
  __wait.task_list.next = & __wait.task_list;
#line 633
  __wait.task_list.prev = & __wait.task_list;
  ldv_43201: 
#line 633
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 633
  rv = drbd_req_state(mdev, mask, val, f);
#line 633
  if (rv != -18) {
#line 633
    goto ldv_43200;
  } else {

  }
#line 633
  schedule();
#line 633
  goto ldv_43201;
  ldv_43200: 
#line 633
  finish_wait(& mdev->state_wait, & __wait);
  ldv_43198: ;
#line 636
  return (rv);
}
}
#line 639 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 641
  tmp = drbd_disk_str((enum drbd_disk_state )ns.ldv_33380.pdsk);
#line 641
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_33380.disk);
#line 641
  tmp___1 = drbd_role_str((enum drbd_role )ns.ldv_33380.peer);
#line 641
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_33380.role);
#line 641
  tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_33380.conn);
#line 641
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 641
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 641
  printk("<3>%s %s:  %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n", tmp___5, tmp___4,
         name, tmp___3, tmp___2, tmp___1, tmp___0, tmp, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 115 : 114,
         (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
         (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 642
  return;
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 658
  if (err == -18) {
#line 659
    return;
  } else {

  }
#line 660
  tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )err);
#line 660
  tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 660
  tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 660
  printk("<3>%s %s: State change failed: %s\n", tmp___1, tmp___0, tmp);
#line 661
  print_st(mdev, (char *)" state", os);
#line 662
  print_st(mdev, (char *)"wanted", ns);
#line 663
  return;
}
}
#line 686 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 691
  rv = 1;
#line 693
  fp = FP_DONT_CARE;
#line 694
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 694
  if (tmp != 0) {
#line 695
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 696
    put_ldev(mdev);
  } else {

  }
#line 699
  tmp___0 = get_net_conf(mdev);
#line 699
  if (tmp___0 != 0) {
#line 700
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 702
      rv = -1;
    } else {

    }
#line 703
    put_net_conf(mdev);
  } else {

  }
#line 706
  if (rv <= 0) {

  } else
#line 708
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 709
    rv = -12;
  } else
#line 711
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33380.conn <= 9) && (int )ns.ldv_33380.disk <= 7) {
#line 712
    rv = -2;
  } else
#line 714
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_33380.conn <= 9) && (int )ns.ldv_33380.pdsk > 5) {
#line 716
    rv = -7;
  } else
#line 718
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33380.disk <= 4) && (int )ns.ldv_33380.pdsk <= 4) {
#line 719
    rv = -2;
  } else
#line 721
  if ((int )ns.ldv_33380.conn > 10 && (int )ns.ldv_33380.disk <= 3) {
#line 722
    rv = -4;
  } else
#line 724
  if ((int )ns.ldv_33380.conn > 10 && (int )ns.ldv_33380.pdsk <= 3) {
#line 725
    rv = -5;
  } else
#line 727
  if (((int )ns.ldv_33380.conn > 10 && (int )ns.ldv_33380.disk <= 7) && (int )ns.ldv_33380.pdsk <= 7) {
#line 728
    rv = -2;
  } else
#line 730
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 735
    rv = -6;
  } else
#line 737
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 739
    rv = -14;
  } else
#line 741
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 743
    rv = -17;
  } else {

  }
#line 745
  return (rv);
}
}
#line 754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) 
{ 
  int rv ;

  {
#line 757
  rv = 1;
#line 759
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_33380.conn > 10) {
#line 761
    rv = -8;
  } else {

  }
#line 763
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 764
    rv = -9;
  } else {

  }
#line 766
  if ((int )ns.ldv_33380.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 767
    rv = -11;
  } else {

  }
#line 769
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_33380.conn <= 1) {
#line 770
    rv = -13;
  } else {

  }
#line 772
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_33380.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 773
    rv = -16;
  } else {

  }
#line 775
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 776
    rv = -18;
  } else {

  }
#line 778
  if ((int )ns.ldv_33380.conn == (int )os.ldv_33380.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 779
    rv = -18;
  } else {

  }
#line 781
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_33380.conn <= 9) {
#line 782
    rv = -15;
  } else {

  }
#line 784
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_33380.conn != (int )os.ldv_33380.conn) && (int )os.ldv_33380.conn > 10) {
#line 786
    rv = -8;
  } else {

  }
#line 788
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_33380.conn <= 9) {
#line 790
    rv = -15;
  } else {

  }
#line 792
  return (rv);
}
}
#line 805 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;

  {
#line 810
  fp = FP_DONT_CARE;
#line 811
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 811
  if (tmp != 0) {
#line 812
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 813
    put_ldev(mdev);
  } else {

  }
#line 817
  if (((int )ns.ldv_33380.conn > 2 && (int )ns.ldv_33380.conn <= 7) && (int )os.ldv_33380.conn <= 1) {
#line 819
    ns.ldv_33380.conn = os.ldv_33380.conn;
  } else {

  }
#line 822
  if ((((int )os.ldv_33380.conn > 2 && (int )os.ldv_33380.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) {
#line 824
    ns.ldv_33380.conn = os.ldv_33380.conn;
  } else {

  }
#line 827
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 828
    ns.ldv_33380.conn = os.ldv_33380.conn;
  } else {

  }
#line 830
  if ((int )ns.ldv_33380.conn <= 9) {
#line 831
    ns.ldv_33380.peer_isp = 0U;
#line 832
    ns.ldv_33380.peer = 0U;
#line 833
    if ((int )ns.ldv_33380.pdsk > 6 || (int )ns.ldv_33380.pdsk <= 3) {
#line 834
      ns.ldv_33380.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 838
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 839
    ns.ldv_33380.aftr_isp = 0U;
  } else {

  }
#line 841
  if ((int )ns.ldv_33380.conn <= 1 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 842
    ns.ldv_33380.pdsk = 6U;
  } else {

  }
#line 845
  if (((int )os.ldv_33380.conn > 10 && (int )ns.ldv_33380.conn > 10) && ((int )ns.ldv_33380.disk <= 2 || (int )ns.ldv_33380.pdsk <= 2)) {
#line 847
    if ((unsigned long )warn_sync_abort != (unsigned long )((int *)0)) {
#line 848
      *warn_sync_abort = 1;
    } else {

    }
#line 849
    ns.ldv_33380.conn = 10U;
  } else {

  }
#line 852
  if ((int )ns.ldv_33380.conn > 9 && (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) || ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 224U))) {
#line 855
    switch ((int )ns.ldv_33380.conn) {
    case 14: ;
    case 21: 
#line 858
    ns.ldv_33380.disk = 5U;
#line 859
    goto ldv_43234;
    case 10: ;
    case 13: ;
    case 16: ;
    case 20: 
#line 864
    ns.ldv_33380.disk = 8U;
#line 865
    goto ldv_43234;
    case 17: 
#line 867
    ns.ldv_33380.disk = 4U;
#line 868
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 868
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 868
    printk("<4>%s %s: Implicitly set disk state Inconsistent!\n", tmp___1, tmp___0);
#line 869
    goto ldv_43234;
    }
    ldv_43234: ;
#line 871
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 10U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 16U) {
#line 872
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 872
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 872
      printk("<4>%s %s: Implicitly set disk from Outdated to UpToDate\n", tmp___3,
             tmp___2);
    } else {

    }
  } else {

  }
#line 875
  if ((int )ns.ldv_33380.conn > 9 && (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 877
    switch ((int )ns.ldv_33380.conn) {
    case 10: ;
    case 14: ;
    case 21: ;
    case 17: 
#line 882
    ns.ldv_33380.pdsk = 8U;
#line 883
    goto ldv_43244;
    case 13: ;
    case 20: 
#line 889
    ns.ldv_33380.pdsk = (int )os.ldv_33380.pdsk > 0 && (int )os.ldv_33380.pdsk <= 4 ? os.ldv_33380.pdsk : 5U;
#line 892
    goto ldv_43244;
    case 16: 
#line 894
    ns.ldv_33380.pdsk = 4U;
#line 895
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 895
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 895
    printk("<4>%s %s: Implicitly set pdsk Inconsistent!\n", tmp___5, tmp___4);
#line 896
    goto ldv_43244;
    }
    ldv_43244: ;
#line 898
    if (*((unsigned int *)(& os) + 0UL) == 40960U && *((unsigned int *)(& ns) + 0UL) == 65536U) {
#line 899
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 899
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 899
      printk("<4>%s %s: Implicitly set pdsk from Outdated to UpToDate\n", tmp___7,
             tmp___6);
    } else {

    }
  } else {

  }
#line 903
  if ((int )ns.ldv_33380.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 903
    tmp___10 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 903
    if (tmp___10 != 0) {
#line 905
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 906
        ns.ldv_33380.disk = mdev->new_state_tmp.ldv_33380.disk;
#line 907
        ns.ldv_33380.pdsk = mdev->new_state_tmp.ldv_33380.pdsk;
      } else {
#line 909
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 909
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 909
        printk("<1>%s %s: Connection lost while negotiating, no data!\n", tmp___9,
               tmp___8);
#line 910
        ns.ldv_33380.disk = 0U;
#line 911
        ns.ldv_33380.pdsk = 6U;
      }
#line 913
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 916
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33380.conn <= 9) && (int )ns.ldv_33380.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_33380.conn > 9) || (int )os.ldv_33380.pdsk <= 5)) {
#line 919
    ns.ldv_33380.susp = 1U;
  } else {

  }
#line 921
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 922
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 923
      ns.ldv_33380.conn = 20U;
    } else {

    }
#line 924
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 925
      ns.ldv_33380.conn = 21U;
    } else {

    }
  } else {
#line 927
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 928
      ns.ldv_33380.conn = 16U;
    } else {

    }
#line 929
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 930
      ns.ldv_33380.conn = 17U;
    } else {

    }
  }
#line 933
  return (ns);
}
}
#line 937 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 939
  if ((unsigned int )cs == 19U) {
#line 945
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 947
    bit = mdev->ov_start_sector >> 3;
#line 948
    if (mdev->rs_total <= bit) {
#line 949
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
    } else {

    }
#line 951
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 953
  return;
}
}
#line 964 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) 
{ 
  union drbd_state os ;
  int rv ;
  int warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  int tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  int tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  unsigned long tmp___34 ;
  unsigned long tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  u32 mdf ;
  int tmp___38 ;
  int tmp___39 ;
  void *tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;

  {
#line 969
  rv = 1;
#line 970
  warn_sync_abort = 0;
#line 973
  os = mdev->state;
#line 975
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 977
  if (ns.i == os.i) {
#line 978
    return (2);
  } else {

  }
#line 980
  if (((unsigned int )flags & 1U) == 0U) {
#line 984
    rv = is_valid_state(mdev, ns);
#line 985
    if (rv <= 0) {
#line 989
      tmp___2 = is_valid_state(mdev, os);
#line 989
      if (tmp___2 == rv) {
#line 990
        tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )rv);
#line 990
        tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 990
        tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 990
        printk("<3>%s %s: Considering state change from bad state. Error would be: \'%s\'\n",
               tmp___1, tmp___0, tmp);
#line 993
        print_st(mdev, (char *)"old", os);
#line 994
        print_st(mdev, (char *)"new", ns);
#line 995
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 998
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1001
  if (rv <= 0) {
#line 1002
    if (((unsigned int )flags & 2U) != 0U) {
#line 1003
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1004
    return (rv);
  } else {

  }
#line 1007
  if (warn_sync_abort != 0) {
#line 1008
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1008
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1008
    printk("<4>%s %s: Resync aborted.\n", tmp___4, tmp___3);
  } else {

  }
#line 1012
  pbp = (char *)(& pb);
#line 1013
  *pbp = 0;
#line 1014
  if ((int )ns.ldv_33380.role != (int )os.ldv_33380.role) {
#line 1014
    tmp___5 = drbd_role_str((enum drbd_role )ns.ldv_33380.role);
#line 1014
    tmp___6 = drbd_role_str((enum drbd_role )os.ldv_33380.role);
#line 1014
    tmp___7 = sprintf(pbp, "role( %s -> %s ) ", tmp___6, tmp___5);
#line 1014
    pbp = pbp + (unsigned long )tmp___7;
  } else {

  }
#line 1015
  if ((int )ns.ldv_33380.peer != (int )os.ldv_33380.peer) {
#line 1015
    tmp___8 = drbd_role_str((enum drbd_role )ns.ldv_33380.peer);
#line 1015
    tmp___9 = drbd_role_str((enum drbd_role )os.ldv_33380.peer);
#line 1015
    tmp___10 = sprintf(pbp, "peer( %s -> %s ) ", tmp___9, tmp___8);
#line 1015
    pbp = pbp + (unsigned long )tmp___10;
  } else {

  }
#line 1016
  if ((int )ns.ldv_33380.conn != (int )os.ldv_33380.conn) {
#line 1016
    tmp___11 = drbd_conn_str((enum drbd_conns )ns.ldv_33380.conn);
#line 1016
    tmp___12 = drbd_conn_str((enum drbd_conns )os.ldv_33380.conn);
#line 1016
    tmp___13 = sprintf(pbp, "conn( %s -> %s ) ", tmp___12, tmp___11);
#line 1016
    pbp = pbp + (unsigned long )tmp___13;
  } else {

  }
#line 1017
  if ((int )ns.ldv_33380.disk != (int )os.ldv_33380.disk) {
#line 1017
    tmp___14 = drbd_disk_str((enum drbd_disk_state )ns.ldv_33380.disk);
#line 1017
    tmp___15 = drbd_disk_str((enum drbd_disk_state )os.ldv_33380.disk);
#line 1017
    tmp___16 = sprintf(pbp, "disk( %s -> %s ) ", tmp___15, tmp___14);
#line 1017
    pbp = pbp + (unsigned long )tmp___16;
  } else {

  }
#line 1018
  if ((int )ns.ldv_33380.pdsk != (int )os.ldv_33380.pdsk) {
#line 1018
    tmp___17 = drbd_disk_str((enum drbd_disk_state )ns.ldv_33380.pdsk);
#line 1018
    tmp___18 = drbd_disk_str((enum drbd_disk_state )os.ldv_33380.pdsk);
#line 1018
    tmp___19 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___18, tmp___17);
#line 1018
    pbp = pbp + (unsigned long )tmp___19;
  } else {

  }
#line 1019
  if ((int )ns.ldv_33380.susp != (int )os.ldv_33380.susp) {
#line 1019
    tmp___20 = sprintf(pbp, "susp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1019
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1020
  if ((int )ns.ldv_33380.aftr_isp != (int )os.ldv_33380.aftr_isp) {
#line 1020
    tmp___21 = sprintf(pbp, "aftr_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1020
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1021
  if ((int )ns.ldv_33380.peer_isp != (int )os.ldv_33380.peer_isp) {
#line 1021
    tmp___22 = sprintf(pbp, "peer_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1021
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1022
  if ((int )ns.ldv_33380.user_isp != (int )os.ldv_33380.user_isp) {
#line 1022
    tmp___23 = sprintf(pbp, "user_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1022
    pbp = pbp + (unsigned long )tmp___23;
  } else {

  }
#line 1023
  tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1023
  tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1023
  printk("<6>%s %s: %s\n", tmp___25, tmp___24, (char *)(& pb));
#line 1034
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1034
    tmp___26 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1034
    if (tmp___26 == 0) {
#line 1038
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1040
  mdev->state.i = ns.i;
#line 1041
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1042
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1045
  if ((int )os.ldv_33380.conn > 15 && (int )ns.ldv_33380.conn <= 10) {
#line 1046
    set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 1047
    mod_timer(& mdev->resync_timer, jiffies);
  } else {

  }
#line 1051
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_33380.conn <= 9) {
#line 1053
    mdev->ov_start_sector = (mdev->rs_total - mdev->ov_left) << 3;
#line 1055
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1055
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1055
    printk("<6>%s %s: Online Verify reached sector %llu\n", tmp___28, tmp___27, (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1059
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1061
    tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1061
    tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1061
    printk("<6>%s %s: Syncer continues.\n", tmp___30, tmp___29);
#line 1062
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time);
#line 1063
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1064
      tmp___31 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 1064
      if (tmp___31 == 0) {
#line 1065
        mod_timer(& mdev->resync_timer, jiffies);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1073
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1075
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1075
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1075
    printk("<6>%s %s: Resync suspended\n", tmp___33, tmp___32);
#line 1076
    mdev->rs_mark_time = jiffies;
#line 1077
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1078
      set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1081
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1083
    mdev->ov_position = 0UL;
#line 1084
    tmp___34 = drbd_bm_bits(mdev);
#line 1084
    mdev->rs_mark_left = tmp___34;
#line 1084
    mdev->rs_total = tmp___34;
#line 1086
    if (mdev->agreed_pro_version > 89) {
#line 1087
      set_ov_position(mdev, (enum drbd_conns )ns.ldv_33380.conn);
    } else {
#line 1089
      mdev->ov_start_sector = 0UL;
    }
#line 1090
    mdev->ov_left = mdev->rs_total - (mdev->ov_position >> 3);
#line 1092
    tmp___35 = jiffies;
#line 1092
    mdev->rs_mark_time = tmp___35;
#line 1092
    mdev->rs_start = tmp___35;
#line 1094
    mdev->ov_last_oos_size = 0UL;
#line 1095
    mdev->ov_last_oos_start = 0UL;
#line 1097
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1098
      tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1098
      tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1098
      printk("<6>%s %s: Starting Online Verify from sector %llu\n", tmp___37, tmp___36,
             (unsigned long long )mdev->ov_position);
#line 1100
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1104
  tmp___39 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1104
  if (tmp___39 != 0) {
#line 1105
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1109
    tmp___38 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1109
    if (tmp___38 != 0) {
#line 1110
      mdf = mdf | 64U;
    } else {

    }
#line 1111
    if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U || ((int )mdev->state.ldv_33380.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 4U)) {
#line 1113
      mdf = mdf | 2U;
    } else {

    }
#line 1114
    if ((int )mdev->state.ldv_33380.conn > 9) {
#line 1115
      mdf = mdf | 4U;
    } else {

    }
#line 1116
    if ((int )mdev->state.ldv_33380.disk > 4) {
#line 1117
      mdf = mdf | 1U;
    } else {

    }
#line 1118
    if ((int )mdev->state.ldv_33380.disk > 5) {
#line 1119
      mdf = mdf | 16U;
    } else {

    }
#line 1120
    if ((int )mdev->state.ldv_33380.pdsk <= 5 && (int )mdev->state.ldv_33380.pdsk > 3) {
#line 1121
      mdf = mdf | 32U;
    } else {

    }
#line 1122
    if ((mdev->ldev)->md.flags != mdf) {
#line 1123
      (mdev->ldev)->md.flags = mdf;
#line 1124
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1126
    if ((int )os.ldv_33380.disk <= 6 && (int )ns.ldv_33380.disk > 6) {
#line 1127
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1128
    put_ldev(mdev);
  } else {

  }
#line 1132
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1134
    set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1137
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1138
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1141
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1142
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1145
  if (((int )os.ldv_33380.conn > 7 && (int )ns.ldv_33380.conn <= 7) && (int )ns.ldv_33380.conn > 2) {
#line 1147
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1149
  tmp___40 = kmalloc___4(48UL, 32U);
#line 1149
  ascw = (struct after_state_chg_work *)tmp___40;
#line 1150
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1151
    ascw->os = os;
#line 1152
    ascw->ns = ns;
#line 1153
    ascw->flags = flags;
#line 1154
    ascw->w.cb = & w_after_state_ch;
#line 1155
    ascw->done = done;
#line 1156
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1158
    tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1158
    tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1158
    printk("<4>%s %s: Could not kmalloc an ascw\n", tmp___42, tmp___41);
  }
#line 1161
  return (rv);
}
}
#line 1164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1167
  __mptr = (struct drbd_work  const  *)w;
#line 1167
  ascw = (struct after_state_chg_work *)__mptr;
#line 1168
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1169
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1170
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1170
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1170
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1170
      printk("<3>%s %s: ASSERT( ascw->done != NULL ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             1170);
    } else {

    }
#line 1171
    complete(ascw->done);
  } else {

  }
#line 1173
  kfree((void const   *)ascw);
#line 1175
  return (1);
}
}
#line 1178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1180
  if (rv != 0) {
#line 1181
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1181
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1181
    printk("<3>%s %s: Writing the bitmap failed not starting resync.\n", tmp___0,
           tmp);
#line 1182
    val.i = 0U;
#line 1182
    val.ldv_33380.conn = 10U;
#line 1182
    mask.i = 0U;
#line 1182
    mask.ldv_33380.conn = 31U;
#line 1182
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1183
    return;
  } else {

  }
#line 1186
  switch ((int )mdev->state.ldv_33380.conn) {
  case 12: 
#line 1188
  val___0.i = 0U;
#line 1188
  val___0.ldv_33380.conn = 15U;
#line 1188
  mask___0.i = 0U;
#line 1188
  mask___0.ldv_33380.conn = 31U;
#line 1188
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1189
  goto ldv_43287;
  case 11: 
#line 1191
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1192
  goto ldv_43287;
  }
  ldv_43287: ;
#line 1195
  return;
}
}
#line 1203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state __ns ;
  int tmp___0 ;
  int tmp___1 ;
  enum drbd_io_error_p eh ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  union drbd_state __ns___0 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 1208
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1209
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 1210
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1211
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1214
  fp = FP_DONT_CARE;
#line 1215
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1215
  if (tmp != 0) {
#line 1216
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1217
    put_ldev(mdev);
  } else {

  }
#line 1221
  drbd_bcast_state(mdev, ns);
#line 1223
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_33380.disk > 7) || (int )os.ldv_33380.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_33380.disk <= 7) && (int )ns.ldv_33380.pdsk <= 7)) {
#line 1225
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1230
  if ((unsigned int )fp == 2U && (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1233
    if (((int )os.ldv_33380.pdsk > 5 && (int )ns.ldv_33380.pdsk <= 5) || ((int )os.ldv_33380.conn <= 9 && (int )ns.ldv_33380.conn > 9)) {
#line 1235
      tl_clear(mdev);
#line 1236
      spin_lock_irq(& mdev->req_lock);
#line 1237
      __ns.i = mdev->state.i;
#line 1237
      __ns.ldv_33380.susp = 0U;
#line 1237
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1238
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1242
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_33380.pdsk > 0) {
#line 1243
    drbd_send_uuids(mdev);
#line 1244
    drbd_send_state(mdev);
  } else {

  }
#line 1246
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) {
#line 1247
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)");
  } else {

  }
#line 1250
  if ((((int )os.ldv_33380.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_33380.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1256
    kfree((void const   *)mdev->p_uuid);
#line 1257
    mdev->p_uuid = 0;
#line 1258
    tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1258
    if (tmp___0 != 0) {
#line 1259
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_33380.disk > 7) {
#line 1261
        drbd_uuid_new_current(mdev);
#line 1262
        drbd_send_uuids(mdev);
      } else {

      }
#line 1264
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1268
  if ((int )ns.ldv_33380.pdsk <= 3) {
#line 1268
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1268
    if (tmp___1 != 0) {
#line 1269
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1270
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 1273
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1274
        drbd_al_to_on_disk_bm(mdev);
      } else {

      }
#line 1275
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1279
  if (((int )ns.ldv_33380.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1281
    kfree((void const   *)mdev->p_uuid);
#line 1282
    mdev->p_uuid = 0;
#line 1283
    drbd_send_sizes(mdev, 0);
#line 1284
    drbd_send_uuids(mdev);
#line 1285
    drbd_send_state(mdev);
  } else {

  }
#line 1289
  if ((int )ns.ldv_33380.conn > 9 && ((int )os.ldv_33380.aftr_isp != (int )ns.ldv_33380.aftr_isp || (int )os.ldv_33380.user_isp != (int )ns.ldv_33380.user_isp)) {
#line 1292
    drbd_send_state(mdev);
  } else {

  }
#line 1295
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1297
    suspend_other_sg(mdev);
  } else {

  }
#line 1301
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_33380.conn > 9) {
#line 1302
    drbd_send_state(mdev);
  } else {

  }
#line 1305
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1307
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync");
  } else {

  }
#line 1310
  if ((((int )os.ldv_33380.conn <= 9 && (int )ns.ldv_33380.conn <= 9) && (int )os.ldv_33380.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1312
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate");
  } else {

  }
#line 1314
  if ((int )os.ldv_33380.disk > 2 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1317
    eh = EP_PASS_ON;
#line 1318
    tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1318
    if (tmp___2 != 0) {
#line 1319
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1320
      put_ldev(mdev);
    } else {

    }
#line 1323
    drbd_rs_cancel_all(mdev);
#line 1327
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1327
    if (tmp___3 == 0) {
#line 1327
      goto ldv_43299;
    } else {

    }
#line 1327
    tmp___4 = get_current();
#line 1327
    __wait.flags = 0U;
#line 1327
    __wait.private = (void *)tmp___4;
#line 1327
    __wait.func = & autoremove_wake_function;
#line 1327
    __wait.task_list.next = & __wait.task_list;
#line 1327
    __wait.task_list.prev = & __wait.task_list;
    ldv_43302: 
#line 1327
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1327
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1327
    if (tmp___5 == 0) {
#line 1327
      goto ldv_43301;
    } else {

    }
#line 1327
    schedule();
#line 1327
    goto ldv_43302;
    ldv_43301: 
#line 1327
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_43299: 
#line 1328
    mdev->rs_total = 0UL;
#line 1329
    mdev->rs_failed = 0UL;
#line 1330
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1332
    spin_lock_irq(& mdev->req_lock);
#line 1333
    __ns___0.i = mdev->state.i;
#line 1333
    __ns___0.ldv_33380.disk = 0U;
#line 1333
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1334
    spin_unlock_irq(& mdev->req_lock);
#line 1336
    if ((unsigned int )eh == 1U) {
#line 1337
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1340
  if ((int )os.ldv_33380.disk > 0 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1342
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 4U) {
#line 1343
      tmp___10 = drbd_send_state(mdev);
#line 1343
      if (tmp___10 != 0) {
#line 1344
        tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1344
        tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1344
        printk("<4>%s %s: Notified peer that my disk is broken.\n", tmp___7, tmp___6);
      } else {
#line 1346
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1346
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1346
        printk("<3>%s %s: Sending state in drbd_io_error() failed\n", tmp___9, tmp___8);
      }
    } else {

    }
#line 1349
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1349
    if (tmp___11 == 0) {
#line 1349
      goto ldv_43305;
    } else {

    }
#line 1349
    tmp___12 = get_current();
#line 1349
    __wait___0.flags = 0U;
#line 1349
    __wait___0.private = (void *)tmp___12;
#line 1349
    __wait___0.func = & autoremove_wake_function;
#line 1349
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1349
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_43308: 
#line 1349
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1349
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1349
    if (tmp___13 == 0) {
#line 1349
      goto ldv_43307;
    } else {

    }
#line 1349
    schedule();
#line 1349
    goto ldv_43308;
    ldv_43307: 
#line 1349
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_43305: 
#line 1350
    lc_destroy(mdev->resync);
#line 1351
    mdev->resync = 0;
#line 1352
    lc_destroy(mdev->act_log);
#line 1353
    mdev->act_log = 0;
#line 1354
    drbd_free_bc(mdev->ldev);
#line 1354
    mdev->ldev = 0;
#line 1358
    if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 1359
      __free_pages(mdev->md_io_tmpp, 0U);
    } else {

    }
  } else {

  }
#line 1363
  if ((int )ns.ldv_33380.disk > 3 && (int )ns.ldv_33380.pdsk > 3) {
#line 1363
    tmp___14 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1363
    if (tmp___14 != 0) {
#line 1365
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1366
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1370
  if ((((int )os.ldv_33380.conn > 10 && (int )ns.ldv_33380.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1373
    resume_next_sg(mdev);
  } else {

  }
#line 1376
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1377
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1381
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1384
    if ((int )os.ldv_33380.aftr_isp != (int )ns.ldv_33380.aftr_isp) {
#line 1385
      resume_next_sg(mdev);
    } else {

    }
#line 1387
    tmp___15 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1387
    if (tmp___15 != 0) {
#line 1388
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1391
  drbd_md_sync(mdev);
#line 1392
  return;
}
}
#line 1395 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 1397
  thi = (struct drbd_thread *)arg;
#line 1398
  mdev = thi->mdev;
  restart: 
#line 1403
  retval = (*(thi->function))(thi);
#line 1405
  tmp = spinlock_check(& thi->t_lock);
#line 1405
  flags = _raw_spin_lock_irqsave(tmp);
#line 1417
  if ((unsigned int )thi->t_state == 3U) {
#line 1418
    tmp___0 = get_current();
#line 1418
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1418
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1418
    printk("<6>%s %s: Restarting %s\n", tmp___2, tmp___1, (char *)(& tmp___0->comm));
#line 1419
    thi->t_state = Running;
#line 1420
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1421
    goto restart;
  } else {

  }
#line 1424
  thi->task = 0;
#line 1425
  thi->t_state = None;
#line 1426
  __asm__  volatile   ("mfence": : : "memory");
#line 1427
  complete(& thi->stop);
#line 1428
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1430
  tmp___3 = get_current();
#line 1430
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1430
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1430
  printk("<6>%s %s: Terminating %s\n", tmp___5, tmp___4, (char *)(& tmp___3->comm));
#line 1433
  module_put(& __this_module);
#line 1434
  return (retval);
}
}
#line 1437 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1440
  spinlock_check(& thi->t_lock);
#line 1440
  __raw_spin_lock_init(& thi->t_lock.ldv_5575.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1441
  thi->task = 0;
#line 1442
  thi->t_state = None;
#line 1443
  thi->function = func;
#line 1444
  thi->mdev = mdev;
#line 1445
  return;
}
}
#line 1447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  struct task_struct *tmp___9 ;
  unsigned int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  long tmp___13 ;
  raw_spinlock_t *tmp___14 ;
  struct task_struct *tmp___15 ;
  struct task_struct *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;

  {
#line 1449
  mdev = thi->mdev;
#line 1453
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1460
  tmp = spinlock_check(& thi->t_lock);
#line 1460
  flags = _raw_spin_lock_irqsave(tmp);
#line 1462
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1464
  tmp___0 = get_current();
#line 1464
  tmp___1 = get_current();
#line 1464
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1464
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1464
  printk("<6>%s %s: Starting %s thread (from %s [%d])\n", tmp___3, tmp___2, me, (char *)(& tmp___1->comm),
         tmp___0->pid);
#line 1468
  tmp___6 = try_module_get(& __this_module);
#line 1468
  if (tmp___6 == 0) {
#line 1469
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1469
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1469
    printk("<3>%s %s: Failed to get module reference in drbd_thread_start\n", tmp___5,
           tmp___4);
#line 1470
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1471
    return (0);
  } else {

  }
#line 1474
  init_completion(& thi->stop);
#line 1475
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1475
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1475
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1475
    printk("<3>%s %s: ASSERT( thi->task == NULL ) in %s:%d\n", tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           1475);
  } else {

  }
#line 1476
  thi->reset_cpu_mask = 1;
#line 1477
  thi->t_state = Running;
#line 1478
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1479
  tmp___9 = get_current();
#line 1479
  flush_signals(tmp___9);
#line 1481
  tmp___10 = mdev_to_minor(mdev);
#line 1481
  nt = kthread_create(& drbd_thread_setup, (void *)thi, "drbd%d_%s", tmp___10, me);
#line 1484
  tmp___13 = IS_ERR((void const   *)nt);
#line 1484
  if (tmp___13 != 0L) {
#line 1485
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1485
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1485
    printk("<3>%s %s: Couldn\'t start thread\n", tmp___12, tmp___11);
#line 1487
    module_put(& __this_module);
#line 1488
    return (0);
  } else {

  }
#line 1490
  tmp___14 = spinlock_check(& thi->t_lock);
#line 1490
  flags = _raw_spin_lock_irqsave(tmp___14);
#line 1491
  thi->task = nt;
#line 1492
  thi->t_state = Running;
#line 1493
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1494
  wake_up_process(nt);
#line 1495
  goto ldv_43341;
  case 2U: 
#line 1497
  thi->t_state = Restarting;
#line 1498
  tmp___15 = get_current();
#line 1498
  tmp___16 = get_current();
#line 1498
  tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1498
  tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1498
  printk("<6>%s %s: Restarting %s thread (from %s [%d])\n", tmp___18, tmp___17, me,
         (char *)(& tmp___16->comm), tmp___15->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1504
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1505
  goto ldv_43341;
  }
  ldv_43341: ;
#line 1508
  return (1);
}
}
#line 1512 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1516
  ns = restart != 0 ? Restarting : Exiting;
#line 1519
  tmp = spinlock_check(& thi->t_lock);
#line 1519
  flags = _raw_spin_lock_irqsave(tmp);
#line 1521
  if ((unsigned int )thi->t_state == 0U) {
#line 1522
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1523
    if (restart != 0) {
#line 1524
      drbd_thread_start(thi);
    } else {

    }
#line 1525
    return;
  } else {

  }
#line 1528
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1529
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1530
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1531
      return;
    } else {

    }
#line 1534
    thi->t_state = ns;
#line 1535
    __asm__  volatile   ("mfence": : : "memory");
#line 1536
    init_completion(& thi->stop);
#line 1537
    tmp___0 = get_current();
#line 1537
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1538
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1542
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1544
  if (wait != 0) {
#line 1545
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1546
  return;
}
}
#line 1556 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1561
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1561
  if (tmp != 0U) {
#line 1562
    return;
  } else {

  }
#line 1564
  tmp___0 = mdev_to_minor(mdev);
#line 1564
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1564
  ord = (int )(tmp___0 % tmp___1);
#line 1565
  cpu = -1;
#line 1565
  goto ldv_43362;
  ldv_43361: 
#line 1566
  tmp___2 = ord;
#line 1566
  ord = ord - 1;
#line 1566
  if (tmp___2 == 0) {
#line 1567
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1568
    return;
  } else {

  }
  ldv_43362: 
#line 1565
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1565
  cpu = (int )tmp___3;
#line 1565
  if (cpu < nr_cpu_ids) {
#line 1566
    goto ldv_43361;
  } else {

  }
#line 1572
  cpumask_setall(mdev->cpu_mask);
#line 1573
  return;
}
}
#line 1582 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 1584
  tmp = get_current();
#line 1584
  p = tmp;
#line 1585
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1590
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1590
  if (_b != 0) {
#line 1590
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1590
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1590
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "drbd_thread_current_set_cpu",
           (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           1590);
  } else {

  }
#line 1590
  if (_b != 0) {
#line 1591
    return;
  } else {

  }
#line 1592
  if (thi->reset_cpu_mask == 0) {
#line 1593
    return;
  } else {

  }
#line 1594
  thi->reset_cpu_mask = 0;
#line 1595
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1596
  return;
}
}
#line 1600 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 1606
  _b = (unsigned long )h == (unsigned long )((struct p_header *)0);
#line 1606
  if (_b != 0) {
#line 1606
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1606
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1606
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_send_cmd", (char *)"!h",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           1606);
  } else {

  }
#line 1606
  if (_b != 0) {
#line 1606
    return (0);
  } else {

  }
#line 1607
  _b___0 = size == 0UL;
#line 1607
  if (_b___0 != 0) {
#line 1607
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1607
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1607
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "_drbd_send_cmd", (char *)"!size",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           1607);
  } else {

  }
#line 1607
  if (_b___0 != 0) {
#line 1607
    return (0);
  } else {

  }
#line 1609
  h->magic = 1728214147U;
#line 1610
  tmp___3 = __fswab16((int )((__u16 )cmd));
#line 1610
  h->command = tmp___3;
#line 1611
  tmp___4 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1611
  h->length = tmp___4;
#line 1613
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1615
  ok = (size_t )sent == size;
#line 1616
  if (ok == 0) {
#line 1617
    tmp___5 = cmdname(cmd);
#line 1617
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1617
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1617
    printk("<3>%s %s: short sent %s size=%d sent=%d\n", tmp___7, tmp___6, tmp___5,
           (int )size, sent);
  } else {

  }
#line 1619
  return (ok);
}
}
#line 1625 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1628
  ok = 0;
#line 1631
  if (use_data_socket != 0) {
#line 1632
    ldv_mutex_lock_90(& mdev->data.mutex);
#line 1633
    sock = mdev->data.socket;
  } else {
#line 1635
    ldv_mutex_lock_91(& mdev->meta.mutex);
#line 1636
    sock = mdev->meta.socket;
  }
#line 1641
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1641
  if (tmp != 0L) {
#line 1642
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1644
  if (use_data_socket != 0) {
#line 1645
    ldv_mutex_unlock_92(& mdev->data.mutex);
  } else {
#line 1647
    ldv_mutex_unlock_93(& mdev->meta.mutex);
  }
#line 1648
  return (ok);
}
}
#line 1651 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1657
  h.magic = 1728214147U;
#line 1658
  tmp = __fswab16((int )((__u16 )cmd));
#line 1658
  h.command = tmp;
#line 1659
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1659
  h.length = tmp___0;
#line 1661
  tmp___1 = drbd_get_data_sock___0(mdev);
#line 1661
  if (tmp___1 == 0) {
#line 1662
    return (0);
  } else {

  }
#line 1664
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1664
  ok = tmp___2 == 8;
#line 1666
  if (ok != 0) {
#line 1666
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1666
    if ((size_t )tmp___3 == size) {
#line 1666
      tmp___4 = 1;
    } else {
#line 1666
      tmp___4 = 0;
    }
  } else {
#line 1666
    tmp___4 = 0;
  }
#line 1666
  ok = tmp___4;
#line 1669
  drbd_put_data_sock___0(mdev);
#line 1671
  return (ok);
}
}
#line 1674 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_89 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  long tmp___2 ;

  {
#line 1679
  apv = mdev->agreed_pro_version;
#line 1681
  if (apv > 87) {
#line 1681
    if (apv == 88) {
#line 1681
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1681
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1681
      tmp___0 = 140;
    }
#line 1681
    size = tmp___0;
  } else {
#line 1681
    size = 12;
  }
#line 1689
  ldv_mutex_lock_94(& mdev->data.mutex);
#line 1690
  sock = mdev->data.socket;
#line 1692
  tmp___2 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1692
  if (tmp___2 != 0L) {
#line 1693
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1695
    p = & mdev->data.sbuf.rs_param_89;
#line 1698
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1700
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1700
    p->rate = tmp___1;
#line 1702
    if (apv > 87) {
#line 1703
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1704
    if (apv > 88) {
#line 1705
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1707
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1709
    rv = 0;
  }
#line 1711
  ldv_mutex_unlock_95(& mdev->data.mutex);
#line 1713
  return (rv);
}
}
#line 1716 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  __u32 tmp___8 ;

  {
#line 1721
  size = 32;
#line 1723
  if (mdev->agreed_pro_version > 86) {
#line 1724
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1724
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1728
  tmp___0 = kmalloc___4((size_t )size, 16U);
#line 1728
  p = (struct p_protocol *)tmp___0;
#line 1729
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1730
    return (0);
  } else {

  }
#line 1732
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1732
  p->protocol = tmp___1;
#line 1733
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1733
  p->after_sb_0p = tmp___2;
#line 1734
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1734
  p->after_sb_1p = tmp___3;
#line 1735
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1735
  p->after_sb_2p = tmp___4;
#line 1736
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1736
  p->two_primaries = tmp___5;
#line 1738
  cf = 0;
#line 1739
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1740
    cf = cf | 1;
  } else {

  }
#line 1741
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1742
    if (mdev->agreed_pro_version > 91) {
#line 1743
      cf = cf | 2;
    } else {
#line 1745
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1745
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1745
      printk("<3>%s %s: --dry-run is not supported by peer", tmp___7, tmp___6);
#line 1746
      kfree((void const   *)p);
#line 1747
      return (0);
    }
  } else {

  }
#line 1750
  tmp___8 = __fswab32((__u32 )cf);
#line 1750
  p->conn_flags = tmp___8;
#line 1752
  if (mdev->agreed_pro_version > 86) {
#line 1753
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 1755
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header *)p, (size_t )size);
#line 1757
  kfree((void const   *)p);
#line 1758
  return (rv);
}
}
#line 1761 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 1766
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1766
  if (tmp == 0) {
#line 1767
    return (1);
  } else {

  }
#line 1769
  i = 0;
#line 1769
  goto ldv_43428;
  ldv_43427: ;
#line 1770
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1770
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 1770
    p.uuid[i] = tmp___0;
  } else {
#line 1770
    p.uuid[i] = 0ULL;
  }
#line 1769
  i = i + 1;
  ldv_43428: ;
#line 1769
  if (i <= 3) {
#line 1770
    goto ldv_43427;
  } else {

  }
#line 1772
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 1773
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 1773
  p.uuid[4] = tmp___1;
#line 1774
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 1775
  tmp___2 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1775
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 1776
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 1801UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 1777
  tmp___3 = __fswab64(uuid_flags);
#line 1777
  p.uuid[5] = tmp___3;
#line 1779
  put_ldev(mdev);
#line 1781
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header *)(& p), 56UL);
#line 1781
  return (tmp___4);
}
}
#line 1785 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1787
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 1787
  return (tmp);
}
}
#line 1790 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1792
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 1792
  return (tmp);
}
}
#line 1796 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  struct p_rs_uuid p ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 1800
  tmp = __fswab64(val);
#line 1800
  p.uuid = tmp;
#line 1802
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header *)(& p), 16UL);
#line 1802
  return (tmp___0);
}
}
#line 1806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  int tmp___3 ;
  __u64 tmp___4 ;
  __u64 tmp___5 ;
  sector_t tmp___6 ;
  __u64 tmp___7 ;
  __u64 tmp___8 ;
  unsigned int tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;

  {
#line 1813
  tmp___3 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1813
  if (tmp___3 != 0) {
#line 1814
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1814
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1814
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1814
      printk("<3>%s %s: ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n", tmp___0, tmp,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             1814);
    } else {

    }
#line 1815
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 1816
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 1817
    q_order_type = drbd_queue_order_type(mdev);
#line 1818
    tmp___1 = drbd_queue_order_type(mdev);
#line 1818
    tmp___2 = __fswab32((__u32 )tmp___1);
#line 1818
    p.queue_order_type = tmp___2;
#line 1819
    put_ldev(mdev);
  } else {
#line 1821
    d_size = 0UL;
#line 1822
    u_size = 0UL;
#line 1823
    q_order_type = 0;
  }
#line 1826
  tmp___4 = __fswab64((__u64 )d_size);
#line 1826
  p.d_size = tmp___4;
#line 1827
  tmp___5 = __fswab64((__u64 )u_size);
#line 1827
  p.u_size = tmp___5;
#line 1828
  if (trigger_reply == 0) {
#line 1828
    tmp___6 = drbd_get_capacity(mdev->this_bdev);
#line 1828
    tmp___7 = (__u64 )tmp___6;
  } else {
#line 1828
    tmp___7 = 0ULL;
  }
#line 1828
  tmp___8 = __fswab64(tmp___7);
#line 1828
  p.c_size = tmp___8;
#line 1829
  tmp___9 = queue_max_segment_size(mdev->rq_queue);
#line 1829
  tmp___10 = __fswab32(tmp___9);
#line 1829
  p.max_segment_size = tmp___10;
#line 1830
  tmp___11 = __fswab32((__u32 )q_order_type);
#line 1830
  p.queue_order_type = tmp___11;
#line 1832
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header *)(& p), 40UL);
#line 1834
  return (ok);
}
}
#line 1841 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 1845
  ok = 0;
#line 1849
  drbd_state_lock___0(mdev);
#line 1851
  ldv_mutex_lock_96(& mdev->data.mutex);
#line 1853
  tmp = __fswab32(mdev->state.i);
#line 1853
  p.state = tmp;
#line 1854
  sock = mdev->data.socket;
#line 1856
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1856
  if (tmp___0 != 0L) {
#line 1857
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header *)(& p), 12UL, 0U);
  } else {

  }
#line 1861
  ldv_mutex_unlock_97(& mdev->data.mutex);
#line 1863
  drbd_state_unlock(mdev);
#line 1864
  return (ok);
}
}
#line 1867 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 1872
  tmp = __fswab32(mask.i);
#line 1872
  p.mask = tmp;
#line 1873
  tmp___0 = __fswab32(val.i);
#line 1873
  p.val = tmp___0;
#line 1875
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header *)(& p), 16UL);
#line 1875
  return (tmp___1);
}
}
#line 1879 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 1883
  tmp = __fswab32((__u32 )retcode);
#line 1883
  p.retcode = tmp;
#line 1885
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header *)(& p), 12UL);
#line 1885
  return (tmp___0);
}
}
#line 1889 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 1902
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 1904
    return (0);
  } else {

  }
#line 1906
  if (c->bit_offset >= c->bm_bits) {
#line 1907
    return (0);
  } else {

  }
#line 1910
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 1911
  memset((void *)(& p->code), 0, 4087UL);
#line 1913
  plain_bits = 0UL;
#line 1918
  toggle = 2U;
  ldv_43481: ;
#line 1923
  if (toggle == 0U) {
#line 1923
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 1923
    tmp = tmp___0;
  } else {
#line 1923
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 1923
    tmp = tmp___1;
  }
#line 1925
  if (tmp == 0xffffffffffffffffUL) {
#line 1926
    tmp = c->bm_bits;
  } else {

  }
#line 1927
  rl = tmp - c->bit_offset;
#line 1929
  if (toggle == 2U) {
#line 1930
    if (rl == 0UL) {
#line 1933
      DCBP_set_start(p, 1);
#line 1935
      toggle = toggle == 0U;
#line 1936
      goto ldv_43479;
    } else {

    }
#line 1938
    DCBP_set_start(p, 0);
  } else {

  }
#line 1943
  if (rl == 0UL) {
#line 1944
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1944
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1944
    printk("<3>%s %s: unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
           tmp___3, tmp___2, toggle, c->bit_offset);
#line 1946
    return (-1);
  } else {

  }
#line 1949
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 1950
  if (bits == -105) {
#line 1951
    goto ldv_43480;
  } else {

  }
#line 1952
  if (bits <= 0) {
#line 1953
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1953
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1953
    printk("<3>%s %s: error while encoding bitmap: %d\n", tmp___5, tmp___4, bits);
#line 1954
    return (0);
  } else {

  }
#line 1957
  toggle = toggle == 0U;
#line 1958
  plain_bits = plain_bits + rl;
#line 1959
  c->bit_offset = tmp;
  ldv_43479: ;
#line 1960
  if (c->bit_offset < c->bm_bits) {
#line 1961
    goto ldv_43481;
  } else {

  }
  ldv_43480: 
#line 1962
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 1964
  if ((unsigned long )(len << 3) > plain_bits) {
#line 1967
    c->bit_offset = c->bit_offset - plain_bits;
#line 1968
    bm_xfer_ctx_bit_to_word_offset(c);
#line 1969
    c->bit_offset = c->word_offset * 64UL;
#line 1970
    return (0);
  } else {

  }
#line 1975
  bm_xfer_ctx_bit_to_word_offset(c);
#line 1978
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 1980
  return ((int )len);
}
}
#line 1984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_29545 send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header *h ,
                                        struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 1987
  p = (struct p_compressed_bm *)h;
#line 1992
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 1994
  if (len < 0) {
#line 1995
    return (FAILED);
  } else {

  }
#line 1997
  if (len != 0) {
#line 1998
    DCBP_set_code(p, RLE_VLI_Bits);
#line 1999
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2002
    c->packets[0] = c->packets[0] + 1U;
#line 2003
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2005
    if (c->bit_offset >= c->bm_bits) {
#line 2006
      len = 0;
    } else {

    }
  } else {
#line 2010
    __min1 = 511UL;
#line 2010
    __min2 = c->bm_words - c->word_offset;
#line 2010
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2011
    len = (int )((unsigned int )num_words * 8U);
#line 2012
    if (len != 0) {
#line 2013
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2014
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2016
    c->word_offset = c->word_offset + num_words;
#line 2017
    c->bit_offset = c->word_offset * 64UL;
#line 2019
    c->packets[1] = c->packets[1] + 1U;
#line 2020
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2022
    if (c->bit_offset > c->bm_bits) {
#line 2023
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2025
  ok = ok != 0 ? (len == 0 ? 2 : 0) : 1;
#line 2027
  if (ok == 2) {
#line 2028
    INFO_bm_xfer_stats(mdev, "send", c);
  } else {

  }
#line 2029
  return ((enum ldv_29545 )ok);
}
}
#line 2033 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header *p ;
  int ret ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___11 ;
  size_t tmp___12 ;
  enum ldv_29545 tmp___13 ;

  {
#line 2039
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2039
  if (_b != 0) {
#line 2039
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2039
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2039
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_send_bitmap", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2039);
  } else {

  }
#line 2039
  if (_b != 0) {
#line 2039
    return (0);
  } else {

  }
#line 2043
  tmp___1 = __get_free_pages(16U, 0U);
#line 2043
  p = (struct p_header *)tmp___1;
#line 2044
  if ((unsigned long )p == (unsigned long )((struct p_header *)0)) {
#line 2045
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2045
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2045
    printk("<3>%s %s: failed to allocate one page buffer in %s\n", tmp___3, tmp___2,
           "_drbd_send_bitmap");
#line 2046
    return (0);
  } else {

  }
#line 2049
  tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2049
  if (tmp___10 != 0) {
#line 2050
    tmp___9 = drbd_md_test_flag(mdev->ldev, 8);
#line 2050
    if (tmp___9 != 0) {
#line 2051
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2051
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2051
      printk("<6>%s %s: Writing the whole bitmap, MDF_FullSync was set.\n", tmp___5,
             tmp___4);
#line 2052
      drbd_bm_set_all(mdev);
#line 2053
      tmp___8 = drbd_bm_write(mdev);
#line 2053
      if (tmp___8 != 0) {
#line 2057
        tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2057
        tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2057
        printk("<3>%s %s: Failed to write bitmap to disk!\n", tmp___7, tmp___6);
      } else {
#line 2059
        drbd_md_clear_flag(mdev, 8);
#line 2060
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2063
    put_ldev(mdev);
  } else {

  }
#line 2066
  tmp___11 = drbd_bm_bits(mdev);
#line 2066
  tmp___12 = drbd_bm_words(mdev);
#line 2066
  __constr_expr_0.bm_bits = tmp___11;
#line 2066
  __constr_expr_0.bm_words = tmp___12;
#line 2066
  __constr_expr_0.bit_offset = 0UL;
#line 2066
  __constr_expr_0.word_offset = 0UL;
#line 2066
  __constr_expr_0.packets[0] = 0U;
#line 2066
  __constr_expr_0.packets[1] = 0U;
#line 2066
  __constr_expr_0.bytes[0] = 0U;
#line 2066
  __constr_expr_0.bytes[1] = 0U;
#line 2066
  c = __constr_expr_0;
  ldv_43508: 
#line 2072
  tmp___13 = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2072
  ret = (int )tmp___13;
#line 2073
  if (ret == 0) {
#line 2074
    goto ldv_43508;
  } else {

  }
#line 2075
  free_pages((unsigned long )p, 0U);
#line 2076
  return (ret == 2);
}
}
#line 2079 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2083
  tmp = drbd_get_data_sock___0(mdev);
#line 2083
  if (tmp == 0) {
#line 2084
    return (-1);
  } else {

  }
#line 2085
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2085
  err = tmp___0 == 0;
#line 2086
  drbd_put_data_sock___0(mdev);
#line 2087
  return (err);
}
}
#line 2090 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2095
  p.barrier = barrier_nr;
#line 2096
  tmp = __fswab32(set_size);
#line 2096
  p.set_size = tmp;
#line 2098
  if ((int )mdev->state.ldv_33380.conn <= 9) {
#line 2099
    return (0);
  } else {

  }
#line 2100
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header *)(& p), 16UL);
#line 2102
  return (ok);
}
}
#line 2113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2121
  p.sector = sector;
#line 2122
  p.block_id = block_id;
#line 2123
  p.blksize = blksize;
#line 2124
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2124
  tmp___0 = __fswab32((__u32 )tmp);
#line 2124
  p.seq_num = tmp___0;
#line 2126
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_33380.conn <= 9) {
#line 2127
    return (0);
  } else {

  }
#line 2128
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header *)(& p), 32UL);
#line 2130
  return (ok);
}
}
#line 2133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) 
{ 
  int header_size ;
  int data_size ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2136
  header_size = 24;
#line 2138
  data_size = (int )((struct p_header *)dp)->length - header_size;
#line 2140
  tmp = __fswab32((__u32 )data_size);
#line 2140
  tmp___0 = _drbd_send_ack(mdev, cmd, dp->sector, tmp, dp->block_id);
#line 2140
  return (tmp___0);
}
}
#line 2144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2147
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2147
  return (tmp);
}
}
#line 2156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2159
  tmp = __fswab32(e->size);
#line 2159
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2159
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->block_id);
#line 2159
  return (tmp___1);
}
}
#line 2167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2170
  tmp = __fswab64(block_id);
#line 2170
  tmp___0 = __fswab32((__u32 )blksize);
#line 2170
  tmp___1 = __fswab64((__u64 )sector);
#line 2170
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2170
  return (tmp___2);
}
}
#line 2176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2182
  tmp = __fswab64((__u64 )sector);
#line 2182
  p.sector = tmp;
#line 2183
  p.block_id = block_id;
#line 2184
  tmp___0 = __fswab32((__u32 )size);
#line 2184
  p.blksize = tmp___0;
#line 2186
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header *)(& p), 32UL);
#line 2188
  return (ok);
}
}
#line 2191 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2199
  tmp = __fswab64((__u64 )sector);
#line 2199
  p.sector = tmp;
#line 2200
  p.block_id = 1728263026ULL;
#line 2201
  tmp___0 = __fswab32((__u32 )size);
#line 2201
  p.blksize = tmp___0;
#line 2203
  p.head.magic = 1728214147U;
#line 2204
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2204
  p.head.command = tmp___1;
#line 2205
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2205
  p.head.length = tmp___2;
#line 2207
  ldv_mutex_lock_98(& mdev->data.mutex);
#line 2209
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2209
  ok = tmp___3 == 32;
#line 2210
  if (ok != 0) {
#line 2210
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2210
    if (tmp___4 == digest_size) {
#line 2210
      tmp___5 = 1;
    } else {
#line 2210
      tmp___5 = 0;
    }
  } else {
#line 2210
    tmp___5 = 0;
  }
#line 2210
  ok = tmp___5;
#line 2212
  ldv_mutex_unlock_99(& mdev->data.mutex);
#line 2214
  return (ok);
}
}
#line 2217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2222
  tmp = __fswab64((__u64 )sector);
#line 2222
  p.sector = tmp;
#line 2223
  p.block_id = 1728261953ULL;
#line 2224
  tmp___0 = __fswab32((__u32 )size);
#line 2224
  p.blksize = tmp___0;
#line 2226
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header *)(& p), 32UL);
#line 2228
  return (ok);
}
}
#line 2235 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 2240
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2240
    tmp___0 = 1;
  } else {
#line 2240
    tmp = get_t_state(& mdev->asender);
#line 2240
    if ((unsigned int )tmp != 1U) {
#line 2240
      tmp___0 = 1;
    } else
#line 2240
    if ((int )mdev->state.ldv_33380.conn <= 9) {
#line 2240
      tmp___0 = 1;
    } else {
#line 2240
      tmp___0 = 0;
    }
  }
#line 2240
  drop_it = tmp___0;
#line 2245
  if (drop_it != 0) {
#line 2246
    return (1);
  } else {

  }
#line 2248
  mdev->ko_count = mdev->ko_count - 1U;
#line 2248
  drop_it = mdev->ko_count == 0U;
#line 2249
  if (drop_it == 0) {
#line 2250
    tmp___1 = get_current();
#line 2250
    tmp___2 = get_current();
#line 2250
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2250
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2250
    printk("<3>%s %s: [%s/%d] sock_sendmsg time expired, ko = %u\n", tmp___4, tmp___3,
           (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2252
    request_ping(mdev);
  } else {

  }
#line 2255
  return (drop_it);
}
}
#line 2279 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2282
  tmp = kmap(page);
#line 2282
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      0U);
#line 2282
  sent = tmp___0;
#line 2283
  kunmap(page);
#line 2284
  if ((size_t )sent == size) {
#line 2285
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2286
  return ((size_t )sent == size);
}
}
#line 2289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct thread_info *tmp___8 ;
  long tmp___9 ;

  {
#line 2292
  tmp = current_thread_info___1();
#line 2292
  oldfs = tmp->addr_limit;
#line 2294
  len = (int )size;
#line 2302
  if (disable_sendpage != 0) {
#line 2303
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2303
    return (tmp___0);
  } else {
#line 2302
    tmp___1 = page_count(page);
#line 2302
    if (tmp___1 <= 0) {
#line 2303
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2303
      return (tmp___0);
    } else {
#line 2302
      tmp___2 = PageSlab(page);
#line 2302
      if (tmp___2 != 0) {
#line 2303
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2303
        return (tmp___0);
      } else {

      }
    }
  }
#line 2305
  drbd_update_congested(mdev);
#line 2306
  tmp___3 = current_thread_info___1();
#line 2306
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2306
  tmp___3->addr_limit = __constr_expr_0;
  ldv_43606: 
#line 2308
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, 16384);
#line 2308
  sent = (int )tmp___4;
#line 2311
  if (sent == -11) {
#line 2312
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2312
    if (tmp___5 != 0) {
#line 2314
      goto ldv_43603;
    } else {
#line 2316
      goto ldv_43604;
    }
  } else {

  }
#line 2318
  if (sent <= 0) {
#line 2319
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2319
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2319
    printk("<4>%s %s: %s: size=%d len=%d sent=%d\n", tmp___7, tmp___6, "_drbd_send_page",
           (int )size, len, sent);
#line 2321
    goto ldv_43603;
  } else {

  }
#line 2323
  len = len - sent;
#line 2324
  offset = offset + sent;
  ldv_43604: ;
#line 2325
  if (len > 0) {
#line 2326
    goto ldv_43606;
  } else {

  }
  ldv_43603: 
#line 2326
  tmp___8 = current_thread_info___1();
#line 2326
  tmp___8->addr_limit = oldfs;
#line 2327
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2329
  ok = len == 0;
#line 2330
  tmp___9 = __builtin_expect(ok != 0, 1L);
#line 2330
  if (tmp___9 != 0L) {
#line 2331
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2332
  return (ok);
}
}
#line 2335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2339
  bvec = bio->bi_io_vec;
#line 2339
  i = 0;
#line 2339
  goto ldv_43614;
  ldv_43613: 
#line 2340
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len);
#line 2340
  if (tmp == 0) {
#line 2342
    return (0);
  } else {

  }
#line 2339
  bvec = bvec + 1;
#line 2339
  i = i + 1;
  ldv_43614: ;
#line 2339
  if ((int )bio->bi_vcnt > i) {
#line 2340
    goto ldv_43613;
  } else {

  }

#line 2344
  return (1);
}
}
#line 2347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2351
  bvec = bio->bi_io_vec;
#line 2351
  i = 0;
#line 2351
  goto ldv_43623;
  ldv_43622: 
#line 2352
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len);
#line 2352
  if (tmp == 0) {
#line 2354
    return (0);
  } else {

  }
#line 2351
  bvec = bvec + 1;
#line 2351
  i = i + 1;
  ldv_43623: ;
#line 2351
  if ((int )bio->bi_vcnt > i) {
#line 2352
    goto ldv_43622;
  } else {

  }

#line 2357
  return (1);
}
}
#line 2363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  bool tmp___7 ;
  bool tmp___8 ;
  bool tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;

  {
#line 2365
  ok = 1;
#line 2367
  dp_flags = 0U;
#line 2371
  tmp = drbd_get_data_sock___0(mdev);
#line 2371
  if (tmp == 0) {
#line 2372
    return (0);
  } else {

  }
#line 2374
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2374
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2374
    dgs = (int )tmp___0;
  } else {
#line 2374
    dgs = 0;
  }
#line 2377
  p.head.magic = 1728214147U;
#line 2378
  p.head.command = 0U;
#line 2379
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2379
  p.head.length = tmp___1;
#line 2382
  tmp___2 = __fswab64((__u64 )req->sector);
#line 2382
  p.sector = tmp___2;
#line 2383
  p.block_id = (u64 )req;
#line 2384
  tmp___3 = atomic_add_return(1, & mdev->packet_seq);
#line 2384
  req->seq_num = tmp___3;
#line 2384
  tmp___4 = __fswab32((__u32 )tmp___3);
#line 2384
  p.seq_num = tmp___4;
#line 2386
  dp_flags = 0U;
#line 2391
  tmp___7 = bio_rw_flagged(req->master_bio, BIO_RW_BARRIER);
#line 2391
  if ((int )tmp___7) {
#line 2392
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2392
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2392
    printk("<3>%s %s: ASSERT FAILED would have set DP_HARDBARRIER\n", tmp___6, tmp___5);
  } else {

  }
#line 2395
  tmp___8 = bio_rw_flagged(req->master_bio, BIO_RW_SYNCIO);
#line 2395
  if ((int )tmp___8) {
#line 2396
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2399
  tmp___9 = bio_rw_flagged(req->master_bio, BIO_RW_UNPLUG);
#line 2399
  if ((int )tmp___9) {
#line 2400
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2401
  if ((int )mdev->state.ldv_33380.conn > 15 && (int )mdev->state.ldv_33380.conn <= 21) {
#line 2403
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2405
  tmp___10 = __fswab32(dp_flags);
#line 2405
  p.dp_flags = tmp___10;
#line 2406
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 2407
  tmp___11 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 32768U);
#line 2407
  ok = tmp___11 == 32;
#line 2409
  if (ok != 0 && dgs != 0) {
#line 2410
    dgb = mdev->int_dig_out;
#line 2411
    drbd_csum(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2412
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 32768U);
  } else {

  }
#line 2414
  if (ok != 0) {
#line 2415
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 2416
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2418
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
  } else {

  }
#line 2421
  drbd_put_data_sock___0(mdev);
#line 2422
  return (ok);
}
}
#line 2429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2437
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2437
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2437
    dgs = (int )tmp;
  } else {
#line 2437
    dgs = 0;
  }
#line 2440
  p.head.magic = 1728214147U;
#line 2441
  tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2441
  p.head.command = tmp___0;
#line 2442
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2442
  p.head.length = tmp___1;
#line 2445
  tmp___2 = __fswab64((__u64 )e->sector);
#line 2445
  p.sector = tmp___2;
#line 2446
  p.block_id = e->block_id;
#line 2453
  tmp___3 = drbd_get_data_sock___0(mdev);
#line 2453
  if (tmp___3 == 0) {
#line 2454
    return (0);
  } else {

  }
#line 2456
  tmp___4 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 32768U);
#line 2456
  ok = tmp___4 == 32;
#line 2458
  if (ok != 0 && dgs != 0) {
#line 2459
    dgb = mdev->int_dig_out;
#line 2460
    drbd_csum(mdev, mdev->integrity_w_tfm, e->private_bio, dgb);
#line 2461
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 32768U);
  } else {

  }
#line 2463
  if (ok != 0) {
#line 2464
    ok = _drbd_send_zc_bio(mdev, e->private_bio);
  } else {

  }
#line 2466
  drbd_put_data_sock___0(mdev);
#line 2467
  return (ok);
}
}
#line 2486 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2491
  sent = 0;
#line 2493
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2494
    return (-1000);
  } else {

  }
#line 2498
  iov.iov_base = buf;
#line 2499
  iov.iov_len = size;
#line 2501
  msg.msg_name = 0;
#line 2502
  msg.msg_namelen = 0;
#line 2503
  msg.msg_control = 0;
#line 2504
  msg.msg_controllen = 0UL;
#line 2505
  msg.msg_flags = msg_flags | 16384U;
#line 2507
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2508
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2509
    drbd_update_congested(mdev);
  } else {

  }
  ldv_43656: 
#line 2521
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2522
  if (rv == -11) {
#line 2523
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2523
    if (tmp != 0) {
#line 2524
      goto ldv_43654;
    } else {
#line 2526
      goto ldv_43655;
    }
  } else {

  }
#line 2528
  if (rv == 0) {
#line 2528
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2528
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2528
    printk("<3>%s %s: ASSERT( rv != 0 ) in %s:%d\n", tmp___1, tmp___0, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2528);
  } else {

  }
#line 2529
  if (rv == -4) {
#line 2530
    tmp___2 = get_current();
#line 2530
    flush_signals(tmp___2);
#line 2531
    rv = 0;
  } else {

  }
#line 2533
  if (rv < 0) {
#line 2534
    goto ldv_43654;
  } else {

  }
#line 2535
  sent = sent + rv;
#line 2536
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2537
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_43655: ;
#line 2538
  if ((size_t )sent < size) {
#line 2539
    goto ldv_43656;
  } else {

  }
  ldv_43654: ;
#line 2540
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2541
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2543
  if (rv <= 0) {
#line 2544
    if (rv != -11) {
#line 2545
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2545
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2545
      printk("<3>%s %s: %s_sendmsg returned %d\n", tmp___4, tmp___3, (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
             rv);
#line 2548
      val.i = 0U;
#line 2548
      val.ldv_33380.conn = 4U;
#line 2548
      mask.i = 0U;
#line 2548
      mask.ldv_33380.conn = 31U;
#line 2548
      drbd_force_state(mdev, mask, val);
    } else {
#line 2550
      val___0.i = 0U;
#line 2550
      val___0.ldv_33380.conn = 3U;
#line 2550
      mask___0.i = 0U;
#line 2550
      mask___0.ldv_33380.conn = 31U;
#line 2550
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2553
  return (sent);
}
}
#line 2556 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2558
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2560
  rv = 0;
#line 2562
  tmp = spinlock_check(& mdev->req_lock);
#line 2562
  flags = _raw_spin_lock_irqsave(tmp);
#line 2566
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U) {
#line 2567
    if ((mode & 2U) != 0U) {
#line 2568
      rv = -30;
    } else
#line 2569
    if (allow_oos == 0) {
#line 2570
      rv = -124;
    } else {

    }
  } else {

  }
#line 2573
  if (rv == 0) {
#line 2574
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2575
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2577
  return (rv);
}
}
#line 2580 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2582
  mdev = (struct drbd_conf *)gd->private_data;
#line 2583
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2584
  return (0);
}
}
#line 2587 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_unplug_fn(struct request_queue *q ) 
{ 
  struct drbd_conf *mdev ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2589
  mdev = (struct drbd_conf *)q->queuedata;
#line 2592
  spin_lock_irq(q->queue_lock);
#line 2593
  blk_remove_plug(q);
#line 2594
  spin_unlock_irq(q->queue_lock);
#line 2597
  spin_lock_irq(& mdev->req_lock);
#line 2598
  if ((int )mdev->state.ldv_33380.pdsk > 3 && (int )mdev->state.ldv_33380.conn > 9) {
#line 2599
    if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U) {
#line 2599
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2599
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2599
      printk("<3>%s %s: ASSERT( mdev->state.role == R_PRIMARY ) in %s:%d\n", tmp___0,
             tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
             2599);
    } else {

    }
#line 2600
    tmp___2 = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 2600
    if (tmp___2 != 0) {
#line 2605
      tmp___1 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2605
      if (tmp___1 != 0) {
#line 2606
        drbd_queue_work(& mdev->data.work, & mdev->unplug_work);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2610
  spin_unlock_irq(& mdev->req_lock);
#line 2612
  if ((int )mdev->state.ldv_33380.disk > 3) {
#line 2613
    drbd_kick_lo(mdev);
  } else {

  }
#line 2614
  return;
}
}
#line 2616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  union drbd_state __constr_expr_0 ;

  {
#line 2618
  mdev->sync_conf.after = -1;
#line 2619
  mdev->sync_conf.rate = 250;
#line 2620
  mdev->sync_conf.al_extents = 127;
#line 2621
  __constr_expr_0.ldv_33380.role = 2U;
#line 2621
  __constr_expr_0.ldv_33380.peer = 0U;
#line 2621
  __constr_expr_0.ldv_33380.conn = 0U;
#line 2621
  __constr_expr_0.ldv_33380.disk = 0U;
#line 2621
  __constr_expr_0.ldv_33380.pdsk = 6U;
#line 2621
  __constr_expr_0.ldv_33380.susp = 0U;
#line 2621
  __constr_expr_0.ldv_33380.aftr_isp = (unsigned char)0;
#line 2621
  __constr_expr_0.ldv_33380.peer_isp = (unsigned char)0;
#line 2621
  __constr_expr_0.ldv_33380.user_isp = (unsigned char)0;
#line 2621
  __constr_expr_0.ldv_33380._pad = (unsigned short)0;
#line 2621
  mdev->state = __constr_expr_0;
#line 2622
  return;
}
}
#line 2631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;

  {
#line 2636
  drbd_set_defaults(mdev);
#line 2641
  set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2643
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2644
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2645
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2646
  atomic_set(& mdev->unacked_cnt, 0);
#line 2647
  atomic_set(& mdev->local_cnt, 0);
#line 2648
  atomic_set(& mdev->net_cnt, 0);
#line 2649
  atomic_set(& mdev->packet_seq, 0);
#line 2650
  atomic_set(& mdev->pp_in_use, 0);
#line 2652
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 2653
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 2654
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 2655
  sema_init(& mdev->data.work.s, 0);
#line 2656
  sema_init(& mdev->meta.work.s, 0);
#line 2657
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 2659
  spinlock_check(& mdev->data.work.q_lock);
#line 2659
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5575.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 2660
  spinlock_check(& mdev->meta.work.q_lock);
#line 2660
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5575.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 2662
  spinlock_check(& mdev->al_lock);
#line 2662
  __raw_spin_lock_init(& mdev->al_lock.ldv_5575.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 2663
  spinlock_check(& mdev->req_lock);
#line 2663
  __raw_spin_lock_init(& mdev->req_lock.ldv_5575.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 2664
  spinlock_check(& mdev->peer_seq_lock);
#line 2664
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5575.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 2665
  spinlock_check(& mdev->epoch_lock);
#line 2665
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5575.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 2667
  INIT_LIST_HEAD(& mdev->active_ee);
#line 2668
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 2669
  INIT_LIST_HEAD(& mdev->done_ee);
#line 2670
  INIT_LIST_HEAD(& mdev->read_ee);
#line 2671
  INIT_LIST_HEAD(& mdev->net_ee);
#line 2672
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 2673
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 2674
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 2675
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 2676
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 2677
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 2678
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 2679
  mdev->resync_work.cb = & w_resync_inactive;
#line 2680
  mdev->unplug_work.cb = & w_send_write_hint;
#line 2681
  mdev->md_sync_work.cb = & w_md_sync;
#line 2682
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 2683
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 2684
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 2685
  mdev->resync_timer.function = & resync_timer_fn;
#line 2686
  mdev->resync_timer.data = (unsigned long )mdev;
#line 2687
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 2688
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 2690
  __init_waitqueue_head(& mdev->misc_wait, & __key___11);
#line 2691
  __init_waitqueue_head(& mdev->state_wait, & __key___12);
#line 2692
  __init_waitqueue_head(& mdev->ee_wait, & __key___13);
#line 2693
  __init_waitqueue_head(& mdev->al_wait, & __key___14);
#line 2694
  __init_waitqueue_head(& mdev->seq_wait, & __key___15);
#line 2696
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 2697
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 2698
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 2700
  mdev->agreed_pro_version = 92;
#line 2701
  mdev->write_ordering = WO_bio_barrier;
#line 2702
  mdev->resync_wenr = 4294967295U;
#line 2703
  return;
}
}
#line 2705 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;
  unsigned int tmp___7 ;
  unsigned int tmp___8 ;
  unsigned int tmp___9 ;
  sector_t tmp___10 ;
  unsigned long tmp___11 ;
  unsigned long tmp___12 ;
  unsigned long tmp___13 ;
  unsigned long tmp___14 ;
  unsigned long tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  int tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  int tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  int tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  int tmp___41 ;
  char const   *tmp___42 ;
  char const   *tmp___43 ;
  int tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  int tmp___47 ;

  {
#line 2707
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 2708
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2708
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2708
    printk("<3>%s %s: ASSERT FAILED: receiver t_state == %d expected 0.\n", tmp___0,
           tmp, (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 2712
  tmp___4 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2712
  if (tmp___4 != 0) {
#line 2713
    tmp___1 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2713
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2713
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2713
    printk("<3>%s %s: epoch_size:%d\n", tmp___3, tmp___2, tmp___1);
  } else {

  }
#line 2714
  tmp___15 = 0UL;
#line 2714
  mdev->rs_mark_time = tmp___15;
#line 2714
  tmp___14 = tmp___15;
#line 2714
  mdev->rs_mark_left = tmp___14;
#line 2714
  tmp___13 = tmp___14;
#line 2714
  mdev->rs_failed = tmp___13;
#line 2714
  tmp___12 = tmp___13;
#line 2714
  mdev->rs_total = tmp___12;
#line 2714
  tmp___11 = tmp___12;
#line 2714
  mdev->rs_start = tmp___11;
#line 2714
  tmp___10 = tmp___11;
#line 2714
  mdev->p_size = tmp___10;
#line 2714
  tmp___9 = (unsigned int )tmp___10;
#line 2714
  mdev->writ_cnt = tmp___9;
#line 2714
  tmp___8 = tmp___9;
#line 2714
  mdev->send_cnt = tmp___8;
#line 2714
  tmp___7 = tmp___8;
#line 2714
  mdev->recv_cnt = tmp___7;
#line 2714
  tmp___6 = tmp___7;
#line 2714
  mdev->read_cnt = tmp___6;
#line 2714
  tmp___5 = tmp___6;
#line 2714
  mdev->bm_writ_cnt = tmp___5;
#line 2714
  mdev->al_writ_cnt = tmp___5;
#line 2726
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 2726
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2726
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2726
    printk("<3>%s %s: ASSERT( mdev->net_conf == NULL ) in %s:%d\n", tmp___17, tmp___16,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2726);
  } else {

  }
#line 2728
  drbd_set_my_capacity(mdev, 0UL);
#line 2729
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 2731
    drbd_bm_resize(mdev, 0UL);
#line 2732
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 2735
  drbd_free_resources(mdev);
#line 2741
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 2741
  if (tmp___20 == 0) {
#line 2741
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2741
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2741
    printk("<3>%s %s: ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n", tmp___19,
           tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2741);
  } else {

  }
#line 2742
  tmp___23 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 2742
  if (tmp___23 == 0) {
#line 2742
    tmp___21 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2742
    tmp___22 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2742
    printk("<3>%s %s: ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n", tmp___22,
           tmp___21, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2742);
  } else {

  }
#line 2743
  tmp___26 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 2743
  if (tmp___26 == 0) {
#line 2743
    tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2743
    tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2743
    printk("<3>%s %s: ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n", tmp___25,
           tmp___24, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2743);
  } else {

  }
#line 2744
  tmp___29 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 2744
  if (tmp___29 == 0) {
#line 2744
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2744
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2744
    printk("<3>%s %s: ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n", tmp___28,
           tmp___27, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2744);
  } else {

  }
#line 2745
  tmp___32 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 2745
  if (tmp___32 == 0) {
#line 2745
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2745
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2745
    printk("<3>%s %s: ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n", tmp___31, tmp___30,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2745);
  } else {

  }
#line 2746
  tmp___35 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 2746
  if (tmp___35 == 0) {
#line 2746
    tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2746
    tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2746
    printk("<3>%s %s: ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n", tmp___34,
           tmp___33, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2746);
  } else {

  }
#line 2747
  tmp___38 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2747
  if (tmp___38 == 0) {
#line 2747
    tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2747
    tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2747
    printk("<3>%s %s: ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n", tmp___37,
           tmp___36, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2747);
  } else {

  }
#line 2748
  tmp___41 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 2748
  if (tmp___41 == 0) {
#line 2748
    tmp___39 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2748
    tmp___40 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2748
    printk("<3>%s %s: ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n", tmp___40,
           tmp___39, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2748);
  } else {

  }
#line 2749
  tmp___44 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 2749
  if (tmp___44 == 0) {
#line 2749
    tmp___42 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2749
    tmp___43 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2749
    printk("<3>%s %s: ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n", tmp___43,
           tmp___42, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2749);
  } else {

  }
#line 2750
  tmp___47 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2750
  if (tmp___47 == 0) {
#line 2750
    tmp___45 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2750
    tmp___46 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2750
    printk("<3>%s %s: ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n", tmp___46,
           tmp___45, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2750);
  } else {

  }
#line 2751
  return;
}
}
#line 2755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 2759
  goto ldv_43716;
  ldv_43715: 
#line 2760
  page = drbd_pp_pool;
#line 2761
  drbd_pp_pool = (struct page *)page->ldv_12090.ldv_12087.private;
#line 2762
  __free_pages(page, 0U);
#line 2763
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_43716: ;
#line 2759
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 2760
    goto ldv_43715;
  } else {

  }

#line 2768
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 2769
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 2770
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 2771
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 2772
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2773
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 2774
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2775
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 2776
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2777
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 2778
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2779
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 2781
  drbd_ee_mempool = 0;
#line 2782
  drbd_request_mempool = 0;
#line 2783
  drbd_ee_cache = 0;
#line 2784
  drbd_request_cache = 0;
#line 2785
  drbd_bm_ext_cache = 0;
#line 2786
  drbd_al_ext_cache = 0;
#line 2788
  return;
}
}
#line 2791 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 2794
  number = (int const   )(minor_count * 8U);
#line 2798
  drbd_request_mempool = 0;
#line 2799
  drbd_ee_cache = 0;
#line 2800
  drbd_request_cache = 0;
#line 2801
  drbd_bm_ext_cache = 0;
#line 2802
  drbd_al_ext_cache = 0;
#line 2803
  drbd_pp_pool = 0;
#line 2806
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 2808
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2809
    goto Enomem;
  } else {

  }
#line 2811
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 2813
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2814
    goto Enomem;
  } else {

  }
#line 2816
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 2818
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2819
    goto Enomem;
  } else {

  }
#line 2821
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 2823
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2824
    goto Enomem;
  } else {

  }
#line 2827
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 2829
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2830
    goto Enomem;
  } else {

  }
#line 2832
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 2834
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2835
    goto Enomem;
  } else {

  }
#line 2838
  spinlock_check(& drbd_pp_lock);
#line 2838
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5575.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 2840
  i = 0;
#line 2840
  goto ldv_43727;
  ldv_43726: 
#line 2841
  page = alloc_pages(131282U, 0U);
#line 2842
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 2843
    goto Enomem;
  } else {

  }
#line 2844
  page->ldv_12090.ldv_12087.private = (unsigned long )drbd_pp_pool;
#line 2845
  drbd_pp_pool = page;
#line 2840
  i = i + 1;
  ldv_43727: ;
#line 2840
  if (i < number) {
#line 2841
    goto ldv_43726;
  } else {

  }
#line 2847
  drbd_pp_vacant = number;
#line 2849
  return (0);
  Enomem: 
#line 2852
  drbd_destroy_mempools();
#line 2853
  return (-12);
}
}
#line 2856 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 2863
  return (0);
}
}
#line 2866 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 2870 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;

  {
#line 2874
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 2875
  if (rr != 0) {
#line 2876
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2876
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2876
    printk("<3>%s %s: %d EEs in active list found!\n", tmp___0, tmp, rr);
  } else {

  }
#line 2878
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 2879
  if (rr != 0) {
#line 2880
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2880
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2880
    printk("<3>%s %s: %d EEs in sync list found!\n", tmp___2, tmp___1, rr);
  } else {

  }
#line 2882
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 2883
  if (rr != 0) {
#line 2884
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2884
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2884
    printk("<3>%s %s: %d EEs in read list found!\n", tmp___4, tmp___3, rr);
  } else {

  }
#line 2886
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 2887
  if (rr != 0) {
#line 2888
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2888
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2888
    printk("<3>%s %s: %d EEs in done list found!\n", tmp___6, tmp___5, rr);
  } else {

  }
#line 2890
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 2891
  if (rr != 0) {
#line 2892
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2892
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2892
    printk("<3>%s %s: %d EEs in net list found!\n", tmp___8, tmp___7, rr);
  } else {

  }
#line 2893
  return;
}
}
#line 2897 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct list_head *lp ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 2899
  tmp = minor_to_mdev(minor);
#line 2899
  mdev = tmp;
#line 2901
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2902
    return;
  } else {

  }
#line 2905
  if (mdev->open_cnt != 0) {
#line 2906
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2906
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2906
    printk("<3>%s %s: open_cnt = %d in %s:%u", tmp___1, tmp___0, mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2907);
  } else {

  }
#line 2909
  tmp___4 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2909
  _b = tmp___4 == 0;
#line 2909
  if (_b != 0) {
#line 2909
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2909
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2909
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___6, tmp___5, "drbd_delete_device",
           (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           2909);
  } else {

  }
#line 2909
  if (_b != 0) {
#line 2911
    lp = mdev->data.work.q.next;
#line 2911
    goto ldv_43748;
    ldv_43747: 
#line 2912
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2912
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2912
    printk("<3>%s %s: lp = %p\n", tmp___3, tmp___2, lp);
#line 2911
    lp = lp->next;
    ldv_43748: 
#line 2911
    __builtin_prefetch((void const   *)lp->next);
#line 2911
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 2912
      goto ldv_43747;
    } else {

    }

  } else {

  }
#line 2917
  del_gendisk(mdev->vdisk);
#line 2922
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 2923
    bdput(mdev->this_bdev);
  } else {

  }
#line 2925
  drbd_free_resources(mdev);
#line 2927
  drbd_release_ee_lists(mdev);
#line 2930
  kfree((void const   *)mdev->ee_hash);
#line 2936
  lc_destroy(mdev->act_log);
#line 2937
  lc_destroy(mdev->resync);
#line 2939
  kfree((void const   *)mdev->p_uuid);
#line 2942
  kfree((void const   *)mdev->int_dig_out);
#line 2943
  kfree((void const   *)mdev->int_dig_in);
#line 2944
  kfree((void const   *)mdev->int_dig_vv);
#line 2949
  drbd_free_mdev(mdev);
#line 2950
  return;
}
}
#line 2952 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 2956
  unregister_reboot_notifier(& drbd_notifier);
#line 2958
  drbd_nl_cleanup();
#line 2960
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 2961
    if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 2962
      remove_proc_entry("drbd", 0);
    } else {

    }
#line 2963
    i = minor_count;
#line 2964
    goto ldv_43755;
    ldv_43754: 
#line 2965
    drbd_delete_device(i);
    ldv_43755: 
#line 2964
    tmp = i;
#line 2964
    i = i - 1U;
#line 2964
    if (tmp != 0U) {
#line 2965
      goto ldv_43754;
    } else {

    }
#line 2966
    drbd_destroy_mempools();
  } else {

  }
#line 2969
  kfree((void const   *)minor_table);
#line 2971
  unregister_blkdev(147U, "drbd");
#line 2973
  printk("<6>drbd: module cleanup done.\n");
#line 2974
  return;
}
}
#line 2983 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 2985
  mdev = (struct drbd_conf *)congested_data;
#line 2987
  reason = 45;
#line 2988
  r = 0;
#line 2990
  tmp = __inc_ap_bio_cond___0(mdev);
#line 2990
  if (tmp == 0) {
#line 2992
    r = bdi_bits;
#line 2993
    reason = 100;
#line 2994
    goto out;
  } else {

  }
#line 2997
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2997
  if (tmp___0 != 0) {
#line 2998
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2999
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3000
    put_ldev(mdev);
#line 3001
    if (r != 0) {
#line 3002
      reason = 98;
    } else {

    }
  } else {

  }
#line 3005
  if ((bdi_bits & 4) != 0) {
#line 3005
    tmp___1 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3005
    if (tmp___1 != 0) {
#line 3006
      r = r | 4;
#line 3007
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3011
  mdev->congestion_reason = reason;
#line 3012
  return (r);
}
}
#line 3015 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3022
  tmp = kzalloc___1(3952UL, 208U);
#line 3022
  mdev = (struct drbd_conf *)tmp;
#line 3023
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3024
    return (0);
  } else {

  }
#line 3025
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3025
  if (tmp___0) {
#line 3025
    tmp___1 = 0;
  } else {
#line 3025
    tmp___1 = 1;
  }
#line 3025
  if (tmp___1) {
#line 3026
    goto out_no_cpumask;
  } else {

  }
#line 3028
  mdev->minor = minor;
#line 3030
  drbd_init_set_defaults(mdev);
#line 3032
  q = blk_alloc_queue(208U);
#line 3033
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3034
    goto out_no_q;
  } else {

  }
#line 3035
  mdev->rq_queue = q;
#line 3036
  q->queuedata = (void *)mdev;
#line 3038
  disk = alloc_disk(1);
#line 3039
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3040
    goto out_no_disk;
  } else {

  }
#line 3041
  mdev->vdisk = disk;
#line 3043
  set_disk_ro(disk, 1);
#line 3045
  disk->queue = q;
#line 3046
  disk->major = 147;
#line 3047
  disk->first_minor = (int )minor;
#line 3048
  disk->fops = & drbd_ops;
#line 3049
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3050
  disk->private_data = (void *)mdev;
#line 3052
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3054
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3056
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3057
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3059
  blk_queue_make_request(q, & drbd_make_request_26);
#line 3060
  blk_queue_max_segment_size(q, 32768U);
#line 3061
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3062
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3063
  q->queue_lock = & mdev->req_lock;
#line 3065
  q->unplug_fn = & drbd_unplug_fn;
#line 3067
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3068
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3069
    goto out_no_io_page;
  } else {

  }
#line 3071
  tmp___2 = drbd_bm_init(mdev);
#line 3071
  if (tmp___2 != 0) {
#line 3072
    goto out_no_bitmap;
  } else {

  }
#line 3074
  tmp___3 = tl_init(mdev);
#line 3074
  if (tmp___3 == 0) {
#line 3075
    goto out_no_tl;
  } else {

  }
#line 3077
  tmp___4 = kzalloc___1(120UL, 208U);
#line 3077
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3078
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3079
    goto out_no_app_reads;
  } else {

  }
#line 3081
  tmp___5 = kzalloc___1(40UL, 208U);
#line 3081
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3082
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3083
    goto out_no_epoch;
  } else {

  }
#line 3085
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3086
  mdev->epochs = 1U;
#line 3088
  return (mdev);
  out_no_epoch: 
#line 3093
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3095
  tl_cleanup(mdev);
  out_no_tl: 
#line 3097
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3099
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3101
  put_disk(disk);
  out_no_disk: 
#line 3103
  blk_cleanup_queue(q);
  out_no_q: 
#line 3105
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3107
  kfree((void const   *)mdev);
#line 3108
  return (0);
}
}
#line 3113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3115
  kfree((void const   *)mdev->current_epoch);
#line 3116
  kfree((void const   *)mdev->app_reads_hash);
#line 3117
  tl_cleanup(mdev);
#line 3118
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3119
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3120
  __free_pages(mdev->md_io_page, 0U);
#line 3121
  put_disk(mdev->vdisk);
#line 3122
  blk_cleanup_queue(mdev->rq_queue);
#line 3123
  free_cpumask_var(mdev->cpu_mask);
#line 3124
  kfree((void const   *)mdev);
#line 3125
  return;
}
}
#line 3128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3139
  if (minor_count == 0U || minor_count > 255U) {
#line 3140
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3143
    return (-22);
  } else {

  }
#line 3149
  err = drbd_nl_init();
#line 3150
  if (err != 0) {
#line 3151
    return (err);
  } else {

  }
#line 3153
  err = register_blkdev(147U, "drbd");
#line 3154
  if (err != 0) {
#line 3155
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3158
    return (err);
  } else {

  }
#line 3161
  register_reboot_notifier(& drbd_notifier);
#line 3166
  err = -12;
#line 3168
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3170
  drbd_proc = 0;
#line 3171
  tmp = kzalloc___1((unsigned long )minor_count * 8UL, 208U);
#line 3171
  minor_table = (struct drbd_conf **)tmp;
#line 3173
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3174
    goto Enomem;
  } else {

  }
#line 3176
  err = drbd_create_mempools();
#line 3177
  if (err != 0) {
#line 3178
    goto Enomem;
  } else {

  }
#line 3180
  drbd_proc = proc_create_data("drbd", 33060U, 0, & drbd_proc_fops, 0);
#line 3181
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3182
    printk("<3>drbd: unable to register proc file\n");
#line 3183
    goto Enomem;
  } else {

  }
#line 3186
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3188
  printk("<6>drbd: initialized. Version: 8.3.7 (api:%d/proto:%d-%d)\n", 88, 86, 92);
#line 3191
  tmp___0 = drbd_buildtag();
#line 3191
  printk("<6>drbd: %s\n", tmp___0);
#line 3192
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3194
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3196
  return (0);
  Enomem: 
#line 3199
  drbd_cleanup();
#line 3200
  if (err == -12) {
#line 3202
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3204
    printk("<3>drbd: initialization failure\n");
  }
#line 3205
  return (err);
}
}
#line 3208 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3210
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3211
    return;
  } else {

  }
#line 3213
  bd_release(ldev->backing_bdev);
#line 3214
  bd_release(ldev->md_bdev);
#line 3216
  fput(ldev->lo_file);
#line 3217
  fput(ldev->md_file);
#line 3219
  kfree((void const   *)ldev);
#line 3220
  return;
}
}
#line 3222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3224
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3225
    ldv_mutex_lock_100(& mdev->data.mutex);
#line 3226
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3227
    sock_release(mdev->data.socket);
#line 3228
    mdev->data.socket = 0;
#line 3229
    ldv_mutex_unlock_101(& mdev->data.mutex);
  } else {

  }
#line 3231
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3232
    ldv_mutex_lock_102(& mdev->meta.mutex);
#line 3233
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3234
    sock_release(mdev->meta.socket);
#line 3235
    mdev->meta.socket = 0;
#line 3236
    ldv_mutex_unlock_103(& mdev->meta.mutex);
  } else {

  }
#line 3238
  return;
}
}
#line 3241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3243
  crypto_free_hash(mdev->csums_tfm);
#line 3244
  mdev->csums_tfm = 0;
#line 3245
  crypto_free_hash(mdev->verify_tfm);
#line 3246
  mdev->verify_tfm = 0;
#line 3247
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3248
  mdev->cram_hmac_tfm = 0;
#line 3249
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3250
  mdev->integrity_w_tfm = 0;
#line 3251
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3252
  mdev->integrity_r_tfm = 0;
#line 3254
  drbd_free_sock(mdev);
#line 3256
  drbd_free_bc(mdev->ldev);
#line 3256
  mdev->ldev = 0;
#line 3257
  return;
}
}
#line 3284 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  sector_t tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  sector_t tmp___17 ;

  {
#line 3290
  tmp = test_and_clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 3290
  if (tmp == 0) {
#line 3291
    return;
  } else {

  }
#line 3292
  del_timer(& mdev->md_sync_timer);
#line 3296
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3296
  if (tmp___0 == 0) {
#line 3297
    return;
  } else {

  }
#line 3299
  ldv_mutex_lock_104(& mdev->md_io_mutex);
#line 3300
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3300
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3301
  memset((void *)buffer, 0, 512UL);
#line 3303
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3303
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3303
  buffer->la_size = tmp___3;
#line 3304
  i = 0;
#line 3304
  goto ldv_43819;
  ldv_43818: 
#line 3305
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3305
  buffer->uuid[i] = tmp___4;
#line 3304
  i = i + 1;
  ldv_43819: ;
#line 3304
  if (i <= 3) {
#line 3305
    goto ldv_43818;
  } else {

  }
#line 3306
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3306
  buffer->flags = tmp___5;
#line 3307
  buffer->magic = 1795323011U;
#line 3309
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3309
  buffer->md_size_sect = tmp___6;
#line 3310
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3310
  buffer->al_offset = tmp___7;
#line 3311
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3311
  buffer->al_nr_extents = tmp___8;
#line 3312
  buffer->bm_bytes_per_bit = 1048576U;
#line 3313
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3313
  buffer->device_uuid = tmp___9;
#line 3315
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3315
  buffer->bm_offset = tmp___10;
#line 3317
  tmp___13 = drbd_md_ss__(mdev, mdev->ldev);
#line 3317
  if ((unsigned long long )tmp___13 != (mdev->ldev)->md.md_offset) {
#line 3317
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3317
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3317
    printk("<3>%s %s: ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
           tmp___12, tmp___11, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3317);
  } else {

  }
#line 3318
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3320
  tmp___16 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3320
  if (tmp___16 != 0) {
#line 3321
    clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 3324
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3324
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3324
    printk("<3>%s %s: meta data update failed!\n", tmp___15, tmp___14);
#line 3326
    drbd_chk_io_error____2(mdev, 1, 1, "drbd_md_sync");
  }
#line 3331
  tmp___17 = drbd_get_capacity(mdev->this_bdev);
#line 3331
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___17;
#line 3333
  ldv_mutex_unlock_105(& mdev->md_io_mutex);
#line 3334
  put_ldev(mdev);
#line 3335
  return;
}
}
#line 3345 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  __u32 tmp___14 ;
  __u32 tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  __u32 tmp___18 ;
  __u32 tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  __u32 tmp___22 ;
  __u64 tmp___23 ;
  __u64 tmp___24 ;
  __u32 tmp___25 ;
  __u32 tmp___26 ;
  __u64 tmp___27 ;

  {
#line 3348
  rv = 101;
#line 3350
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3350
  if (tmp == 0) {
#line 3351
    return (118);
  } else {

  }
#line 3353
  ldv_mutex_lock_106(& mdev->md_io_mutex);
#line 3354
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3354
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3356
  tmp___3 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3356
  if (tmp___3 == 0) {
#line 3359
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3359
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3359
    printk("<3>%s %s: Error while reading metadata.\n", tmp___2, tmp___1);
#line 3360
    rv = 118;
#line 3361
    goto err;
  } else {

  }
#line 3364
  tmp___6 = __fswab32(buffer->magic);
#line 3364
  if (tmp___6 != 2205418091U) {
#line 3365
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3365
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3365
    printk("<3>%s %s: Error while reading metadata, magic not found.\n", tmp___5,
           tmp___4);
#line 3366
    rv = 119;
#line 3367
    goto err;
  } else {

  }
#line 3369
  tmp___10 = __fswab32(buffer->al_offset);
#line 3369
  if (tmp___10 != (unsigned int )bdev->md.al_offset) {
#line 3370
    tmp___7 = __fswab32(buffer->al_offset);
#line 3370
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3370
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3370
    printk("<3>%s %s: unexpected al_offset: %d (expected %d)\n", tmp___9, tmp___8,
           tmp___7, bdev->md.al_offset);
#line 3372
    rv = 119;
#line 3373
    goto err;
  } else {

  }
#line 3375
  tmp___14 = __fswab32(buffer->bm_offset);
#line 3375
  if (tmp___14 != (unsigned int )bdev->md.bm_offset) {
#line 3376
    tmp___11 = __fswab32(buffer->bm_offset);
#line 3376
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3376
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3376
    printk("<3>%s %s: unexpected bm_offset: %d (expected %d)\n", tmp___13, tmp___12,
           tmp___11, bdev->md.bm_offset);
#line 3378
    rv = 119;
#line 3379
    goto err;
  } else {

  }
#line 3381
  tmp___18 = __fswab32(buffer->md_size_sect);
#line 3381
  if (tmp___18 != bdev->md.md_size_sect) {
#line 3382
    tmp___15 = __fswab32(buffer->md_size_sect);
#line 3382
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3382
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3382
    printk("<3>%s %s: unexpected md_size: %u (expected %u)\n", tmp___17, tmp___16,
           tmp___15, bdev->md.md_size_sect);
#line 3384
    rv = 119;
#line 3385
    goto err;
  } else {

  }
#line 3388
  tmp___22 = __fswab32(buffer->bm_bytes_per_bit);
#line 3388
  if (tmp___22 != 4096U) {
#line 3389
    tmp___19 = __fswab32(buffer->bm_bytes_per_bit);
#line 3389
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3389
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3389
    printk("<3>%s %s: unexpected bm_bytes_per_bit: %u (expected %u)\n", tmp___21,
           tmp___20, tmp___19, 4096);
#line 3391
    rv = 119;
#line 3392
    goto err;
  } else {

  }
#line 3395
  tmp___23 = __fswab64(buffer->la_size);
#line 3395
  bdev->md.la_size_sect = tmp___23;
#line 3396
  i = 0;
#line 3396
  goto ldv_43831;
  ldv_43830: 
#line 3397
  tmp___24 = __fswab64(buffer->uuid[i]);
#line 3397
  bdev->md.uuid[i] = tmp___24;
#line 3396
  i = i + 1;
  ldv_43831: ;
#line 3396
  if (i <= 3) {
#line 3397
    goto ldv_43830;
  } else {

  }
#line 3398
  tmp___25 = __fswab32(buffer->flags);
#line 3398
  bdev->md.flags = tmp___25;
#line 3399
  tmp___26 = __fswab32(buffer->al_nr_extents);
#line 3399
  mdev->sync_conf.al_extents = (int )tmp___26;
#line 3400
  tmp___27 = __fswab64(buffer->device_uuid);
#line 3400
  bdev->md.device_uuid = tmp___27;
#line 3402
  if (mdev->sync_conf.al_extents <= 6) {
#line 3403
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3406
  ldv_mutex_unlock_107(& mdev->md_io_mutex);
#line 3407
  put_ldev(mdev);
#line 3409
  return (rv);
}
}
#line 3420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 


  {
#line 3422
  set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 3423
  mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
#line 3424
  return;
}
}
#line 3427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3431
  i = 2;
#line 3431
  goto ldv_43841;
  ldv_43840: 
#line 3432
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3431
  i = i + 1;
  ldv_43841: ;
#line 3431
  if (i <= 2) {
#line 3432
    goto ldv_43840;
  } else {

  }

#line 3436
  return;
}
}
#line 3435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3437
  if (idx == 0) {
#line 3438
    if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 3439
      val = val | 1ULL;
    } else {
#line 3441
      val = val & 0xfffffffffffffffeULL;
    }
#line 3443
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3446
  (mdev->ldev)->md.uuid[idx] = val;
#line 3447
  drbd_md_mark_dirty(mdev);
#line 3448
  return;
}
}
#line 3451 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3453
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3454
    drbd_uuid_move_history(mdev);
#line 3455
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 3457
  _drbd_uuid_set(mdev, idx, val);
#line 3458
  return;
}
}
#line 3467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 3471
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3471
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3471
  printk("<6>%s %s: Creating new current UUID\n", tmp___0, tmp);
#line 3472
  if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3472
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3472
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3472
    printk("<3>%s %s: ASSERT( mdev->ldev->md.uuid[UI_BITMAP] == 0 ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3472);
  } else {

  }
#line 3473
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3475
  get_random_bytes((void *)(& val), 8);
#line 3476
  _drbd_uuid_set(mdev, 0, val);
#line 3477
  return;
}
}
#line 3479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3481
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3482
    return;
  } else {

  }
#line 3484
  if (val == 0ULL) {
#line 3485
    drbd_uuid_move_history(mdev);
#line 3486
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3487
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 3489
    if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3490
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3490
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3490
      printk("<4>%s %s: bm UUID already set", tmp___0, tmp);
    } else {

    }
#line 3492
    (mdev->ldev)->md.uuid[1] = val;
#line 3493
    (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
  }
#line 3496
  drbd_md_mark_dirty(mdev);
#line 3497
  return;
}
}
#line 3505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3507
  rv = -5;
#line 3509
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3509
  if (tmp != 0) {
#line 3510
    drbd_md_set_flag(mdev, 8);
#line 3511
    drbd_md_sync(mdev);
#line 3512
    drbd_bm_set_all(mdev);
#line 3514
    rv = drbd_bm_write(mdev);
#line 3516
    if (rv == 0) {
#line 3517
      drbd_md_clear_flag(mdev, 8);
#line 3518
      drbd_md_sync(mdev);
    } else {

    }
#line 3521
    put_ldev(mdev);
  } else {

  }
#line 3524
  return (rv);
}
}
#line 3533 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3535
  rv = -5;
#line 3537
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3537
  if (tmp != 0) {
#line 3538
    drbd_bm_clear_all(mdev);
#line 3539
    rv = drbd_bm_write(mdev);
#line 3540
    put_ldev(mdev);
  } else {

  }
#line 3543
  return (rv);
}
}
#line 3546 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3548
  __mptr = (struct drbd_work  const  *)w;
#line 3548
  work = (struct bm_io_work *)__mptr;
#line 3551
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3551
  if (tmp___1 != 0) {
#line 3551
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3551
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3551
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3551);
  } else {

  }
#line 3553
  drbd_bm_lock(mdev, work->why);
#line 3554
  rv = (*(work->io_fn))(mdev);
#line 3555
  drbd_bm_unlock(mdev);
#line 3557
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3558
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3560
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3561
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3563
  clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 3564
  work->why = 0;
#line 3566
  return (1);
}
}
#line 3581 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  struct task_struct *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 3586
  tmp___1 = get_current();
#line 3586
  if ((unsigned long )tmp___1 != (unsigned long )mdev->worker.task) {
#line 3586
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3586
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3586
    printk("<3>%s %s: ASSERT( current == mdev->worker.task ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3586);
  } else {

  }
#line 3588
  tmp___4 = constant_test_bit(19U, (unsigned long const volatile   *)(& mdev->flags));
#line 3588
  if (tmp___4 != 0) {
#line 3588
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3588
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3588
    printk("<3>%s %s: ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
           tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3588);
  } else {

  }
#line 3589
  tmp___7 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 3589
  if (tmp___7 != 0) {
#line 3589
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3589
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3589
    printk("<3>%s %s: ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n", tmp___6,
           tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3589);
  } else {

  }
#line 3590
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3590
  if (tmp___10 == 0) {
#line 3590
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3590
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3590
    printk("<3>%s %s: ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
           tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3590);
  } else {

  }
#line 3591
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 3592
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3592
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3592
    printk("<3>%s %s: FIXME going to queue \'%s\' but \'%s\' still pending?\n", tmp___12,
           tmp___11, why, mdev->bm_io_work.why);
  } else {

  }
#line 3595
  mdev->bm_io_work.io_fn = io_fn;
#line 3596
  mdev->bm_io_work.done = done;
#line 3597
  mdev->bm_io_work.why = why;
#line 3599
  set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
#line 3600
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3600
  if (tmp___16 == 0) {
#line 3601
    tmp___15 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3601
    if (tmp___15 != 0) {
#line 3602
      set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 3603
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {
#line 3605
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3605
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3605
      printk("<3>%s %s: FIXME avoided double queuing bm_io_work\n", tmp___14, tmp___13);
    }
  } else {

  }
#line 3606
  return;
}
}
#line 3618 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) 
{ 
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 3622
  tmp___1 = get_current();
#line 3622
  if ((unsigned long )tmp___1 == (unsigned long )mdev->worker.task) {
#line 3622
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3622
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3622
    printk("<3>%s %s: ASSERT( current != mdev->worker.task ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
           3622);
  } else {

  }
#line 3624
  drbd_suspend_io(mdev);
#line 3626
  drbd_bm_lock(mdev, why);
#line 3627
  rv = (*io_fn)(mdev);
#line 3628
  drbd_bm_unlock(mdev);
#line 3630
  drbd_resume_io(mdev);
#line 3632
  return (rv);
}
}
#line 3635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3637
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 3638
    drbd_md_mark_dirty(mdev);
#line 3639
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 3641
  return;
}
}
#line 3643 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3645
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 3646
    drbd_md_mark_dirty(mdev);
#line 3647
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 3649
  return;
}
}
#line 3650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 3652
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 3655 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3657
  mdev = (struct drbd_conf *)data;
#line 3659
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 3660
  return;
}
}
#line 3662 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3664
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3664
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3664
  printk("<4>%s %s: md_sync_timer expired! Worker calls drbd_md_sync().\n", tmp___0,
         tmp);
#line 3665
  drbd_md_sync(mdev);
#line 3667
  return (1);
}
}
#line 3687 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 3691
  tmp = rsp->count;
#line 3691
  rsp->count = rsp->count - 1UL;
#line 3691
  if (tmp == 0UL) {
#line 3692
    get_random_bytes((void *)(& refresh), 8);
#line 3693
    rsp->state = rsp->state + (unsigned long )refresh;
#line 3694
    rsp->count = 10000UL;
  } else {

  }
#line 3696
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 3697
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 3697
  return ((unsigned long )tmp___0);
}
}
#line 3701 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[9U] ;

  {
#line 3702
  _faults[0] = (char *)"Meta-data write";
#line 3702
  _faults[1] = (char *)"Meta-data read";
#line 3702
  _faults[2] = (char *)"Resync write";
#line 3702
  _faults[3] = (char *)"Resync read";
#line 3702
  _faults[4] = (char *)"Data write";
#line 3702
  _faults[5] = (char *)"Data read";
#line 3702
  _faults[6] = (char *)"Data read ahead";
#line 3702
  _faults[7] = (char *)"BM allocation";
#line 3702
  _faults[8] = (char *)"EE allocation";
#line 3714
  return (type <= 8U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 3718 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;

  {
#line 3720
  rrs.state = 0UL;
#line 3720
  rrs.count = 0UL;
#line 3722
  if (fault_devs == 0) {
#line 3722
    goto _L;
  } else {
#line 3722
    tmp = mdev_to_minor(mdev);
#line 3722
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 3722
      tmp___0 = _drbd_fault_random(& rrs);
#line 3722
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 3722
        tmp___1 = 1;
      } else {
#line 3722
        tmp___1 = 0;
      }
    } else {
#line 3722
      tmp___1 = 0;
    }
  }
#line 3722
  ret = (unsigned int )tmp___1;
#line 3727
  if (ret != 0U) {
#line 3728
    fault_count = fault_count + 1;
#line 3730
    tmp___5 = __printk_ratelimit("_drbd_insert_fault");
#line 3730
    if (tmp___5 != 0) {
#line 3731
      tmp___2 = _drbd_fault_str(type);
#line 3731
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3731
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3731
      printk("<4>%s %s: ***Simulating %s failure\n", tmp___4, tmp___3, tmp___2);
    } else {

    }
  } else {

  }
#line 3735
  return (ret);
}
}
#line 3739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 3744
  buildtag[0] = '\000';
#line 3744
  tmp = 1U;
#line 3744
  while (1) {
#line 3744
    if (tmp >= 38U) {
#line 3744
      break;
    } else {

    }
#line 3744
    buildtag[tmp] = (char)0;
#line 3744
    tmp = tmp + 1U;
  }
#line 3746
  if ((int )((signed char )buildtag[0]) == 0) {
#line 3748
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 3749
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 3752
      buildtag[0] = 98;
    }
  } else {

  }
#line 3755
  return ((char const   *)(& buildtag));
}
}
#line 3803 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_60_p1 ;
  int res_drbd_open_60 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_61_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_68_p1 ;
  void *var_drbd_notify_sys_68_p2 ;
  unsigned long var_md_sync_timer_fn_93_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4027
  ldv_s_drbd_ops_block_device_operations = 0;
#line 3979
  LDV_IN_INTERRUPT = 1;
#line 3988
  ldv_initialize();
#line 4015
  ldv_handler_precall();
#line 4016
  tmp = drbd_init();
#line 4016
  if (tmp != 0) {
#line 4017
    goto ldv_final;
  } else {

  }
#line 4034
  goto ldv_44002;
  ldv_44001: 
#line 4038
  tmp___0 = nondet_int();
#line 4038
  switch (tmp___0) {
  case 0: ;
#line 4043
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4069
    ldv_handler_precall();
#line 4070
    res_drbd_open_60 = drbd_open(var_group1, var_drbd_open_60_p1);
#line 4071
    ldv_check_return_value(res_drbd_open_60);
#line 4072
    if (res_drbd_open_60 != 0) {
#line 4073
      goto ldv_module_exit;
    } else {

    }
#line 4086
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4092
  goto ldv_43996;
  case 1: ;
#line 4096
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4122
    ldv_handler_precall();
#line 4123
    drbd_release(var_group2, var_drbd_release_61_p1);
#line 4136
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4142
  goto ldv_43996;
  case 2: 
#line 4172
  ldv_handler_precall();
#line 4173
  drbd_notify_sys(var_group3, var_drbd_notify_sys_68_p1, var_drbd_notify_sys_68_p2);
#line 4192
  goto ldv_43996;
  case 3: 
#line 4225
  ldv_handler_precall();
#line 4226
  md_sync_timer_fn(var_md_sync_timer_fn_93_p0);
#line 4242
  goto ldv_43996;
  default: ;
#line 4243
  goto ldv_43996;
  }
  ldv_43996: ;
  ldv_44002: 
#line 4034
  tmp___1 = nondet_int();
#line 4034
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4036
    goto ldv_44001;
  } else {

  }

  ldv_module_exit: 
#line 4276
  ldv_handler_precall();
#line 4277
  drbd_cleanup();
  ldv_final: 
#line 4292
  ldv_check_final_state();
#line 4295
  return;
}
}
#line 4299 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_85(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4304
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4306
  mutex_lock(ldv_func_arg1);
#line 4307
  return;
}
}
#line 4309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4314
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4316
  mutex_unlock(ldv_func_arg1);
#line 4317
  return;
}
}
#line 4319 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_87(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4324
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4326
  mutex_unlock(ldv_func_arg1);
#line 4327
  return;
}
}
#line 4329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_88(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4334
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4336
  mutex_lock(ldv_func_arg1);
#line 4337
  return;
}
}
#line 4339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_89(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4344
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 4346
  mutex_unlock(ldv_func_arg1);
#line 4347
  return;
}
}
#line 4349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_90(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4354
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4356
  mutex_lock(ldv_func_arg1);
#line 4357
  return;
}
}
#line 4359 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_91(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4364
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4366
  mutex_lock(ldv_func_arg1);
#line 4367
  return;
}
}
#line 4369 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_92(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4374
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4376
  mutex_unlock(ldv_func_arg1);
#line 4377
  return;
}
}
#line 4379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_93(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4384
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4386
  mutex_unlock(ldv_func_arg1);
#line 4387
  return;
}
}
#line 4389 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_94(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4394
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4396
  mutex_lock(ldv_func_arg1);
#line 4397
  return;
}
}
#line 4399 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_95(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4404
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4406
  mutex_unlock(ldv_func_arg1);
#line 4407
  return;
}
}
#line 4409 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_96(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4414
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4416
  mutex_lock(ldv_func_arg1);
#line 4417
  return;
}
}
#line 4419 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_97(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4424
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4426
  mutex_unlock(ldv_func_arg1);
#line 4427
  return;
}
}
#line 4429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_98(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4434
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4436
  mutex_lock(ldv_func_arg1);
#line 4437
  return;
}
}
#line 4439 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_99(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4444
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4446
  mutex_unlock(ldv_func_arg1);
#line 4447
  return;
}
}
#line 4449 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_100(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4454
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4456
  mutex_lock(ldv_func_arg1);
#line 4457
  return;
}
}
#line 4459 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_101(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4464
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4466
  mutex_unlock(ldv_func_arg1);
#line 4467
  return;
}
}
#line 4469 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_102(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4474
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4476
  mutex_lock(ldv_func_arg1);
#line 4477
  return;
}
}
#line 4479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_103(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4484
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4486
  mutex_unlock(ldv_func_arg1);
#line 4487
  return;
}
}
#line 4489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_104(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4494
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4496
  mutex_lock(ldv_func_arg1);
#line 4497
  return;
}
}
#line 4499 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_105(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4504
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4506
  mutex_unlock(ldv_func_arg1);
#line 4507
  return;
}
}
#line 4509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_106(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4514
  ldv_mutex_lock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4516
  mutex_lock(ldv_func_arg1);
#line 4517
  return;
}
}
#line 4519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_107(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4524
  ldv_mutex_unlock_md_io_mutex_of_drbd_conf(ldv_func_arg1);
#line 4526
  mutex_unlock(ldv_func_arg1);
#line 4527
  return;
}
}
#line 67 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[22U]  = 
#line 67 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT"};
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 98
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 110
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 134
  return ((unsigned int )s <= 21U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 139
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 144
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) 
{ 


  {
#line 149
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 195 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 92 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 124
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 174 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 180
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 181
  __len = (size_t )len;
#line 181
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 184
  return;
}
}
#line 228 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 234
  tmp = __bitmap_equal(src1, src2, nbits);
#line 234
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 155 "include/linux/mutex.h"
void ldv_mutex_unlock_132(struct mutex *ldv_func_arg1 ) ;
#line 159
void ldv_mutex_unlock_133(struct mutex *ldv_func_arg1 ) ;
#line 163
void ldv_mutex_unlock_135(struct mutex *ldv_func_arg1 ) ;
#line 167
void ldv_mutex_unlock_137(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_131(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_134(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_136(struct mutex *ldv_func_arg1 ) ;
#line 51 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 69
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 76 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 79
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 81
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 82
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 83
    return (-12);
  } else {

  }
#line 84
  tmp = call_usermodehelper_exec(info, wait);
#line 84
  return (tmp);
}
}
#line 202 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 81 "include/trace/events/module.h"
__inline static void trace_module_get___0(struct module *mod , unsigned long ip ,
                                          int refcnt ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 76
  tmp___1 = __builtin_expect(__tracepoint_module_get.state != 0, 0L);
#line 76
  if (tmp___1 != 0L) {
#line 76
    rcu_read_lock_sched_notrace();
#line 76
    tmp = debug_lockdep_rcu_enabled();
#line 76
    if (tmp != 0) {
#line 76
      tmp___0 = rcu_read_lock_sched_held();
#line 76
      if (tmp___0 == 0) {
#line 76
        lockdep_rcu_dereference("include/trace/events/module.h", 81);
      } else {

      }
    } else {

    }
#line 76
    _________p1 = *((void ** volatile  *)(& __tracepoint_module_get.funcs));
#line 76
    it_func = _________p1;
#line 76
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_11109: 
#line 76
      (*((void (*)(struct module * , unsigned long  , int  ))*it_func))(mod, ip, refcnt);
#line 76
      it_func = it_func + 1;
#line 76
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 77
        goto ldv_11109;
      } else {

      }

    } else {

    }
#line 76
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 78
  return;
}
}
#line 474 "include/linux/module.h"
__inline static int try_module_get___0(struct module *module ) 
{ 
  int ret ;
  void const   *__vpp_verify ;
  int pao_ID__ ;
  int pao_ID_____0 ;
  int pao_ID_____1 ;
  int pao_ID_____2 ;
  unsigned int pscr_ret__ ;
  void const   *__vpp_verify___0 ;
  unsigned int pfo_ret__ ;
  unsigned int pfo_ret_____0 ;
  unsigned int pfo_ret_____1 ;
  unsigned int pfo_ret_____2 ;
  int tmp ;
  long tmp___0 ;

  {
#line 476
  ret = 1;
#line 478
  if ((unsigned long )module != (unsigned long )((struct module *)0)) {
#line 481
    tmp = module_is_live(module);
#line 481
    tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 481
    if (tmp___0 != 0L) {
#line 482
      __vpp_verify = 0;
#line 482
      switch (4UL) {
      case 1UL: 
#line 482
      pao_ID__ = 1;
#line 482
      switch (4UL) {
      case 1UL: ;
#line 482
      if (pao_ID__ == 1) {
#line 482
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID__ == -1) {
#line 482
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 482
      goto ldv_11476;
      case 2UL: ;
#line 482
      if (pao_ID__ == 1) {
#line 482
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID__ == -1) {
#line 482
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11476;
      case 4UL: ;
#line 482
      if (pao_ID__ == 1) {
#line 482
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID__ == -1) {
#line 482
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11476;
      case 8UL: ;
#line 482
      if (pao_ID__ == 1) {
#line 482
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID__ == -1) {
#line 482
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 482
      goto ldv_11476;
      default: 
#line 482
      __bad_percpu_size();
      }
      ldv_11476: ;
#line 482
      goto ldv_11481;
      case 2UL: 
#line 482
      pao_ID_____0 = 1;
#line 482
      switch (4UL) {
      case 1UL: ;
#line 482
      if (pao_ID_____0 == 1) {
#line 482
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____0 == -1) {
#line 482
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 482
      goto ldv_11487;
      case 2UL: ;
#line 482
      if (pao_ID_____0 == 1) {
#line 482
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____0 == -1) {
#line 482
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11487;
      case 4UL: ;
#line 482
      if (pao_ID_____0 == 1) {
#line 482
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____0 == -1) {
#line 482
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11487;
      case 8UL: ;
#line 482
      if (pao_ID_____0 == 1) {
#line 482
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____0 == -1) {
#line 482
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 482
      goto ldv_11487;
      default: 
#line 482
      __bad_percpu_size();
      }
      ldv_11487: ;
#line 482
      goto ldv_11481;
      case 4UL: 
#line 482
      pao_ID_____1 = 1;
#line 482
      switch (4UL) {
      case 1UL: ;
#line 482
      if (pao_ID_____1 == 1) {
#line 482
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____1 == -1) {
#line 482
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 482
      goto ldv_11497;
      case 2UL: ;
#line 482
      if (pao_ID_____1 == 1) {
#line 482
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____1 == -1) {
#line 482
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11497;
      case 4UL: ;
#line 482
      if (pao_ID_____1 == 1) {
#line 482
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____1 == -1) {
#line 482
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11497;
      case 8UL: ;
#line 482
      if (pao_ID_____1 == 1) {
#line 482
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____1 == -1) {
#line 482
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 482
      goto ldv_11497;
      default: 
#line 482
      __bad_percpu_size();
      }
      ldv_11497: ;
#line 482
      goto ldv_11481;
      case 8UL: 
#line 482
      pao_ID_____2 = 1;
#line 482
      switch (4UL) {
      case 1UL: ;
#line 482
      if (pao_ID_____2 == 1) {
#line 482
        __asm__  ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____2 == -1) {
#line 482
        __asm__  ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
#line 482
      goto ldv_11507;
      case 2UL: ;
#line 482
      if (pao_ID_____2 == 1) {
#line 482
        __asm__  ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____2 == -1) {
#line 482
        __asm__  ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11507;
      case 4UL: ;
#line 482
      if (pao_ID_____2 == 1) {
#line 482
        __asm__  ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____2 == -1) {
#line 482
        __asm__  ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
#line 482
      goto ldv_11507;
      case 8UL: ;
#line 482
      if (pao_ID_____2 == 1) {
#line 482
        __asm__  ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
#line 482
      if (pao_ID_____2 == -1) {
#line 482
        __asm__  ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
#line 482
        __asm__  ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
#line 482
      goto ldv_11507;
      default: 
#line 482
      __bad_percpu_size();
      }
      ldv_11507: ;
#line 482
      goto ldv_11481;
      default: 
#line 482
      __bad_size_call_parameter();
#line 482
      goto ldv_11481;
      }
      ldv_11481: 
#line 484
      __vpp_verify___0 = 0;
#line 484
      switch (4UL) {
      case 1UL: ;
#line 484
      switch (4UL) {
      case 1UL: 
#line 484
      __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11520;
      case 2UL: 
#line 484
      __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11520;
      case 4UL: 
#line 484
      __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11520;
      case 8UL: 
#line 484
      __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11520;
      default: 
#line 484
      __bad_percpu_size();
      }
      ldv_11520: 
#line 484
      pscr_ret__ = pfo_ret__;
#line 484
      goto ldv_11526;
      case 2UL: ;
#line 484
      switch (4UL) {
      case 1UL: 
#line 484
      __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11530;
      case 2UL: 
#line 484
      __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11530;
      case 4UL: 
#line 484
      __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11530;
      case 8UL: 
#line 484
      __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11530;
      default: 
#line 484
      __bad_percpu_size();
      }
      ldv_11530: 
#line 484
      pscr_ret__ = pfo_ret_____0;
#line 484
      goto ldv_11526;
      case 4UL: ;
#line 484
      switch (4UL) {
      case 1UL: 
#line 484
      __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11539;
      case 2UL: 
#line 484
      __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11539;
      case 4UL: 
#line 484
      __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11539;
      case 8UL: 
#line 484
      __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11539;
      default: 
#line 484
      __bad_percpu_size();
      }
      ldv_11539: 
#line 484
      pscr_ret__ = pfo_ret_____1;
#line 484
      goto ldv_11526;
      case 8UL: ;
#line 484
      switch (4UL) {
      case 1UL: 
#line 484
      __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11548;
      case 2UL: 
#line 484
      __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11548;
      case 4UL: 
#line 484
      __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11548;
      case 8UL: 
#line 484
      __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" ((module->refptr)->incs));
#line 484
      goto ldv_11548;
      default: 
#line 484
      __bad_percpu_size();
      }
      ldv_11548: 
#line 484
      pscr_ret__ = pfo_ret_____2;
#line 484
      goto ldv_11526;
      default: 
#line 484
      __bad_size_call_parameter();
#line 484
      goto ldv_11526;
      }
      ldv_11526: ;
#line 483
      trace_module_get___0(module, (unsigned long )((void *)0), (int )pscr_ret__);
    } else {
#line 486
      ret = 0;
    }
  } else {

  }
#line 490
  return (ret);
}
}
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___5(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_13346: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_13346;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large___5(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc___5((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc___5(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large___5(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc___5((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 319 "include/linux/slab.h"
__inline static void *kzalloc___2(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 321
  tmp = kmalloc___5(size, flags | 32768U);
#line 321
  return (tmp);
}
}
#line 1917 "include/linux/fs.h"
extern struct file *filp_open(char const   * , int  , int  ) ;
#line 1983
extern int bd_claim(struct block_device * , void * ) ;
#line 137 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char * , void (*)(struct cn_msg * , struct netlink_skb_parms * ) ) ;
#line 138
extern void cn_del_callback(struct cb_id * ) ;
#line 139
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 349 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 933 "include/linux/blkdev.h"
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 934
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 938
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 947
extern int blk_stack_limits(struct queue_limits * , struct queue_limits * , sector_t  ) ;
#line 960
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 1049 "include/linux/blkdev.h"
__inline static unsigned int queue_max_sectors(struct request_queue *q ) 
{ 


  {
#line 1051
  return (q->limits.max_sectors);
}
}
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1732 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1735
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1739
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1739
  if (tmp___1 != 0UL) {
#line 1739
    __min1 = 34359738368UL;
#line 1739
    tmp___0 = drbd_md_first_sector(bdev);
#line 1739
    __min2 = tmp___0;
#line 1739
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1739
    s = 0UL;
  }
#line 1742
  goto ldv_41699;
  case -2: 
#line 1744
  __min1___0 = 34359738368UL;
#line 1744
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1744
  __min2___0 = tmp___2;
#line 1744
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1747
  __min1___1 = s;
#line 1747
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1747
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1750
  goto ldv_41699;
  default: 
#line 1752
  __min1___2 = 8587575296UL;
#line 1752
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1752
  __min2___2 = tmp___3;
#line 1752
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_41699: ;
#line 1755
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 75 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[71U]  = 
#line 75 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {0, 0, 0}, 
        {"dry_run", 40960, 4}};
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 81
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 82
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 85 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 14
  goto ldv_42269;
  ldv_42268: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_42266;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 14
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 14
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_42266: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_42269: 
#line 14
  tmp___3 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 14
  tag = (int )tmp___4;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_42268;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned short *tmp___11 ;
  u16 tmp___12 ;

  {
#line 20
  goto ldv_42330;
  ldv_42329: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_42298;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___2,
           tmp___1, (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_42298;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___4,
           tmp___3, (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_42298;
  case 5: 
#line 20
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___5;
#line 20
  goto ldv_42298;
  case 6: 
#line 20
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___6;
#line 20
  goto ldv_42298;
  case 7: 
#line 20
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___7;
#line 20
  goto ldv_42298;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42298;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42298;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42298;
  case 56: 
#line 20
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___8;
#line 20
  goto ldv_42298;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42298;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_42298;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: Unknown tag: %d\n", tmp___10, tmp___9, tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_42298: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_42330: 
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___12 = get_unaligned_le16((void const   *)tmp___11);
#line 20
  tag = (int )tmp___12;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_42329;
  } else {

  }

#line 20
  return (1);
}
}
#line 67
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 67 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  u32 tmp___19 ;
  u32 tmp___20 ;
  u32 tmp___21 ;
  u32 tmp___22 ;
  u32 tmp___23 ;
  u32 tmp___24 ;
  u32 tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  unsigned short *tmp___28 ;
  u16 tmp___29 ;

  {
#line 38
  goto ldv_42433;
  ldv_42432: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___2,
           tmp___1, (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_42368;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___4,
           tmp___3, (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_42368;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___6,
           tmp___5, (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_42368;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___8,
           tmp___7, (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_42368;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___10,
           tmp___9, (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_42368;
  case 14: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___11;
#line 38
  goto ldv_42368;
  case 15: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___12;
#line 38
  goto ldv_42368;
  case 16: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___13;
#line 38
  goto ldv_42368;
  case 17: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___14;
#line 38
  goto ldv_42368;
  case 18: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___15;
#line 38
  goto ldv_42368;
  case 19: 
#line 38
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___16;
#line 38
  goto ldv_42368;
  case 20: 
#line 38
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___17;
#line 38
  goto ldv_42368;
  case 21: 
#line 38
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___18;
#line 38
  goto ldv_42368;
  case 22: 
#line 38
  tmp___19 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___19;
#line 38
  goto ldv_42368;
  case 24: 
#line 38
  tmp___20 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___20;
#line 38
  goto ldv_42368;
  case 25: 
#line 38
  tmp___21 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___21;
#line 38
  goto ldv_42368;
  case 26: 
#line 38
  tmp___22 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___22;
#line 38
  goto ldv_42368;
  case 39: 
#line 38
  tmp___23 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___23;
#line 38
  goto ldv_42368;
  case 40: 
#line 38
  tmp___24 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___24;
#line 38
  goto ldv_42368;
  case 67: 
#line 38
  tmp___25 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___25;
#line 38
  goto ldv_42368;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42368;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42368;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42368;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42368;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42368;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42368;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_42368;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: Unknown tag: %d\n", tmp___27, tmp___26, tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_42368: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_42433: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___29 = get_unaligned_le16((void const   *)tmp___28);
#line 38
  tag = (int )tmp___29;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_42432;
  } else {

  }

#line 38
  return (1);
}
}
#line 74
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 74 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 71
  goto ldv_42466;
  ldv_42465: 
#line 71
  tmp = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 71
  dlen = (int )tmp___0;
#line 71
  switch (tag & 8191) {
  case 29: 
#line 71
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 71
  goto ldv_42462;
  case 68: 
#line 71
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_42462;
  default: ;
#line 71
  if ((tag & 8192) != 0) {
#line 71
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 71
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 71
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 71
    return (0);
  } else {

  }
  }
  ldv_42462: 
#line 71
  tags = tags + (unsigned long )dlen;
  ldv_42466: 
#line 71
  tmp___3 = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 71
  tag = (int )tmp___4;
#line 71
  if (tag != 0) {
#line 72
    goto ldv_42465;
  } else {

  }

#line 71
  return (1);
}
}
#line 84
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 84 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  unsigned short *tmp___12 ;
  u16 tmp___13 ;

  {
#line 76
  goto ldv_42516;
  ldv_42515: 
#line 76
  tmp = tags;
#line 76
  tags = tags + 1;
#line 76
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 76
  dlen = (int )tmp___0;
#line 76
  switch (tag & 8191) {
  case 30: 
#line 76
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 76
  arg->rate = (int )tmp___1;
#line 76
  goto ldv_42480;
  case 31: 
#line 76
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 76
  arg->after = (int )tmp___2;
#line 76
  goto ldv_42480;
  case 32: 
#line 76
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 76
  arg->al_extents = (int )tmp___3;
#line 76
  goto ldv_42480;
  case 52: ;
#line 76
  if (dlen > 64) {
#line 76
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___5,
           tmp___4, (char *)"verify_alg", dlen, 64U);
#line 76
    return (0);
  } else {

  }
#line 76
  arg->verify_alg_len = dlen;
#line 76
  __min1 = (size_t )dlen;
#line 76
  __min2 = 64UL;
#line 76
  __len = __min1 < __min2 ? __min1 : __min2;
#line 76
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 76
  goto ldv_42480;
  case 51: ;
#line 76
  if (dlen > 32) {
#line 76
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___7,
           tmp___6, (char *)"cpu_mask", dlen, 32U);
#line 76
    return (0);
  } else {

  }
#line 76
  arg->cpu_mask_len = dlen;
#line 76
  __min1___0 = (size_t )dlen;
#line 76
  __min2___0 = 32UL;
#line 76
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 76
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 76
  goto ldv_42480;
  case 64: ;
#line 76
  if (dlen > 64) {
#line 76
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___9,
           tmp___8, (char *)"csums_alg", dlen, 64U);
#line 76
    return (0);
  } else {

  }
#line 76
  arg->csums_alg_len = dlen;
#line 76
  __min1___1 = (size_t )dlen;
#line 76
  __min2___1 = 64UL;
#line 76
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 76
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 76
  goto ldv_42480;
  case 65: 
#line 76
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 76
  goto ldv_42480;
  default: ;
#line 76
  if ((tag & 8192) != 0) {
#line 76
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 76
    printk("<3>%s %s: Unknown tag: %d\n", tmp___11, tmp___10, tag & 8191);
#line 76
    return (0);
  } else {

  }
  }
  ldv_42480: 
#line 76
  tags = tags + (unsigned long )dlen;
  ldv_42516: 
#line 76
  tmp___12 = tags;
#line 76
  tags = tags + 1;
#line 76
  tmp___13 = get_unaligned_le16((void const   *)tmp___12);
#line 76
  tag = (int )tmp___13;
#line 76
  if (tag != 0) {
#line 77
    goto ldv_42515;
  } else {

  }

#line 76
  return (1);
}
}
#line 128
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 128 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 126
  goto ldv_42815;
  ldv_42814: 
#line 126
  tmp = tags;
#line 126
  tags = tags + 1;
#line 126
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 126
  dlen = (int )tmp___0;
#line 126
  switch (tag & 8191) {
  case 66: 
#line 126
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 126
  goto ldv_42812;
  default: ;
#line 126
  if ((tag & 8192) != 0) {
#line 126
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 126
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 126
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 126
    return (0);
  } else {

  }
  }
  ldv_42812: 
#line 126
  tags = tags + (unsigned long )dlen;
  ldv_42815: 
#line 126
  tmp___3 = tags;
#line 126
  tags = tags + 1;
#line 126
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 126
  tag = (int )tmp___4;
#line 126
  if (tag != 0) {
#line 127
    goto ldv_42814;
  } else {

  }

#line 126
  return (1);
}
}
#line 132
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 132 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 130
  goto ldv_42832;
  ldv_42831: 
#line 130
  tmp = tags;
#line 130
  tags = tags + 1;
#line 130
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 130
  dlen = (int )tmp___0;
#line 130
  switch (tag & 8191) {
  case 63: 
#line 130
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 130
  goto ldv_42829;
  default: ;
#line 130
  if ((tag & 8192) != 0) {
#line 130
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 130
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 130
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 130
    return (0);
  } else {

  }
  }
  ldv_42829: 
#line 130
  tags = tags + (unsigned long )dlen;
  ldv_42832: 
#line 130
  tmp___3 = tags;
#line 130
  tags = tags + 1;
#line 130
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 130
  tag = (int )tmp___4;
#line 130
  if (tag != 0) {
#line 131
    goto ldv_42831;
  } else {

  }

#line 130
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_42877;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_42877;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_42877;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_42877;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42877;
  }
  ldv_42877: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_42884;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_42884;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_42884;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_42884;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42884;
  }
  ldv_42884: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_42891;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_42891;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_42891;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_42891;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42891;
  }
  ldv_42891: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_42898;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_42898;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_42898;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_42898;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42898;
  }
  ldv_42898: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_42905;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_42905;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_42905;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_42905;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42905;
  }
  ldv_42905: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_42915;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_42915;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_42915;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_42915;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42915;
  }
  ldv_42915: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_42922;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_42922;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_42922;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_42922;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42922;
  }
  ldv_42922: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_42932;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_42932;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_42932;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_42932;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42932;
  }
  ldv_42932: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_42939;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_42939;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_42939;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_42939;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42939;
  }
  ldv_42939: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_42946;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_42946;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_42946;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_42946;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42946;
  }
  ldv_42946: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_42953;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_42953;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_42953;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_42953;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42953;
  }
  ldv_42953: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_42960;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_42960;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_42960;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_42960;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42960;
  }
  ldv_42960: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_42967;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_42967;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_42967;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_42967;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42967;
  }
  ldv_42967: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_42974;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_42974;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_42974;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_42974;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42974;
  }
  ldv_42974: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_42981;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_42981;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_42981;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_42981;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42981;
  }
  ldv_42981: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_42988;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_42988;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_42988;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_42988;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42988;
  }
  ldv_42988: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_42995;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_42995;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_42995;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_42995;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_42995;
  }
  ldv_42995: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_43002;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_43002;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_43002;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_43002;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43002;
  }
  ldv_43002: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_43009;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_43009;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_43009;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_43009;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43009;
  }
  ldv_43009: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_43016;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_43016;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_43016;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_43016;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43016;
  }
  ldv_43016: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_43023;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_43023;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_43023;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_43023;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43023;
  }
  ldv_43023: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_43030;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_43030;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_43030;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_43030;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43030;
  }
  ldv_43030: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_43037;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_43037;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_43037;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_43037;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43037;
  }
  ldv_43037: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_43044;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_43044;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_43044;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_43044;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43044;
  }
  ldv_43044: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_43051;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_43051;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_43051;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_43051;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43051;
  }
  ldv_43051: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_43058;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_43058;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_43058;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_43058;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43058;
  }
  ldv_43058: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_43065;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_43065;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_43065;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_43065;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43065;
  }
  ldv_43065: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_43072;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_43072;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_43072;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_43072;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43072;
  }
  ldv_43072: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_43079;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_43079;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_43079;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_43079;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_43079;
  }
  ldv_43079: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 67
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 67 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  unsigned short *tmp___41 ;
  void *__gu_p___57 ;
  unsigned short *tmp___42 ;
  void *__gu_p___58 ;
  unsigned short *tmp___43 ;
  void *__gu_p___59 ;
  unsigned short *tmp___44 ;
  void *__gu_p___60 ;
  unsigned short *tmp___45 ;
  void *__gu_p___61 ;
  unsigned short *tmp___46 ;
  void *__gu_p___62 ;
  unsigned short *tmp___47 ;
  void *__gu_p___63 ;
  unsigned short *tmp___48 ;
  void *__gu_p___64 ;
  unsigned short *tmp___49 ;
  void *__gu_p___65 ;
  unsigned short *tmp___50 ;
  void *__gu_p___66 ;
  unsigned short *tmp___51 ;
  void *__gu_p___67 ;
  unsigned short *tmp___52 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_43104;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_43104;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_43104;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_43104;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43104;
  }
  ldv_43104: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_43111;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_43111;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_43111;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_43111;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43111;
  }
  ldv_43111: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_43121;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_43121;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_43121;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_43121;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43121;
  }
  ldv_43121: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_43128;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_43128;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_43128;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_43128;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43128;
  }
  ldv_43128: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_43138;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_43138;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_43138;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_43138;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43138;
  }
  ldv_43138: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_43145;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_43145;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_43145;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_43145;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43145;
  }
  ldv_43145: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_43155;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_43155;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_43155;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_43155;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43155;
  }
  ldv_43155: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_43162;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_43162;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_43162;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_43162;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43162;
  }
  ldv_43162: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_43172;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_43172;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_43172;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_43172;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43172;
  }
  ldv_43172: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_43179;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_43179;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_43179;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_43179;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43179;
  }
  ldv_43179: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_43189;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_43189;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_43189;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_43189;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43189;
  }
  ldv_43189: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_43196;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_43196;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_43196;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_43196;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43196;
  }
  ldv_43196: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_43203;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_43203;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_43203;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_43203;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43203;
  }
  ldv_43203: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_43210;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_43210;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_43210;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_43210;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43210;
  }
  ldv_43210: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_43217;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_43217;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_43217;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_43217;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43217;
  }
  ldv_43217: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_43224;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_43224;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_43224;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_43224;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43224;
  }
  ldv_43224: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_43231;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_43231;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_43231;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_43231;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43231;
  }
  ldv_43231: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_43238;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_43238;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_43238;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_43238;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43238;
  }
  ldv_43238: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_43245;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_43245;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_43245;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_43245;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43245;
  }
  ldv_43245: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_43252;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_43252;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_43252;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_43252;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43252;
  }
  ldv_43252: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_43259;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_43259;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_43259;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_43259;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43259;
  }
  ldv_43259: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_43266;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_43266;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_43266;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_43266;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43266;
  }
  ldv_43266: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_43273;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_43273;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_43273;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_43273;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43273;
  }
  ldv_43273: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_43280;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_43280;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_43280;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_43280;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43280;
  }
  ldv_43280: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_43287;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_43287;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_43287;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_43287;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43287;
  }
  ldv_43287: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_43294;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_43294;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_43294;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_43294;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43294;
  }
  ldv_43294: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_43301;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_43301;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_43301;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_43301;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43301;
  }
  ldv_43301: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_43308;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_43308;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_43308;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_43308;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43308;
  }
  ldv_43308: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_43315;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_43315;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_43315;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_43315;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43315;
  }
  ldv_43315: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_43322;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_43322;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_43322;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_43322;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43322;
  }
  ldv_43322: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_43329;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_43329;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_43329;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_43329;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43329;
  }
  ldv_43329: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_43336;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_43336;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_43336;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_43336;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43336;
  }
  ldv_43336: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_43343;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_43343;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_43343;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_43343;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43343;
  }
  ldv_43343: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_43350;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_43350;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_43350;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_43350;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43350;
  }
  ldv_43350: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_43357;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_43357;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_43357;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_43357;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43357;
  }
  ldv_43357: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_43364;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_43364;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_43364;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_43364;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43364;
  }
  ldv_43364: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_43371;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_43371;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_43371;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_43371;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43371;
  }
  ldv_43371: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_43378;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_43378;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_43378;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_43378;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43378;
  }
  ldv_43378: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_43385;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_43385;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_43385;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_43385;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43385;
  }
  ldv_43385: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_43392;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_43392;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_43392;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_43392;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43392;
  }
  ldv_43392: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_43399;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_43399;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_43399;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_43399;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43399;
  }
  ldv_43399: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_43406;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_43406;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_43406;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_43406;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43406;
  }
  ldv_43406: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_43413;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_43413;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_43413;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_43413;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43413;
  }
  ldv_43413: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_43420;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_43420;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_43420;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_43420;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43420;
  }
  ldv_43420: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_43427;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_43427;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_43427;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_43427;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43427;
  }
  ldv_43427: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_43434;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_43434;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_43434;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_43434;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43434;
  }
  ldv_43434: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_43441;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_43441;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_43441;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_43441;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43441;
  }
  ldv_43441: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_43448;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_43448;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_43448;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_43448;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43448;
  }
  ldv_43448: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_43455;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_43455;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_43455;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_43455;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43455;
  }
  ldv_43455: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_43462;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_43462;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_43462;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_43462;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43462;
  }
  ldv_43462: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_43469;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_43469;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_43469;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_43469;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43469;
  }
  ldv_43469: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_43476;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_43476;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_43476;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_43476;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43476;
  }
  ldv_43476: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_43483;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_43483;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_43483;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_43483;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43483;
  }
  ldv_43483: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_43490;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_43490;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_43490;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_43490;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43490;
  }
  ldv_43490: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_43497;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_43497;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_43497;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_43497;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43497;
  }
  ldv_43497: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 60U;
#line 38
  goto ldv_43504;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___54);
#line 38
  goto ldv_43504;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___54);
#line 38
  goto ldv_43504;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___54);
#line 38
  goto ldv_43504;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43504;
  }
  ldv_43504: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 1U;
#line 38
  goto ldv_43511;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___55);
#line 38
  goto ldv_43511;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___55);
#line 38
  goto ldv_43511;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___55);
#line 38
  goto ldv_43511;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43511;
  }
  ldv_43511: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___56 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = 27U;
#line 38
  goto ldv_43518;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___56);
#line 38
  goto ldv_43518;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___56);
#line 38
  goto ldv_43518;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___56);
#line 38
  goto ldv_43518;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43518;
  }
  ldv_43518: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 1U;
#line 38
  goto ldv_43525;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___57);
#line 38
  goto ldv_43525;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___57);
#line 38
  goto ldv_43525;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___57);
#line 38
  goto ldv_43525;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43525;
  }
  ldv_43525: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 28U;
#line 38
  goto ldv_43532;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___58);
#line 38
  goto ldv_43532;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___58);
#line 38
  goto ldv_43532;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___58);
#line 38
  goto ldv_43532;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43532;
  }
  ldv_43532: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___59 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = 1U;
#line 38
  goto ldv_43539;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___59);
#line 38
  goto ldv_43539;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___59);
#line 38
  goto ldv_43539;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___59);
#line 38
  goto ldv_43539;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43539;
  }
  ldv_43539: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 41U;
#line 38
  goto ldv_43546;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___60);
#line 38
  goto ldv_43546;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___60);
#line 38
  goto ldv_43546;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___60);
#line 38
  goto ldv_43546;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43546;
  }
  ldv_43546: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 1U;
#line 38
  goto ldv_43553;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___61);
#line 38
  goto ldv_43553;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___61);
#line 38
  goto ldv_43553;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___61);
#line 38
  goto ldv_43553;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43553;
  }
  ldv_43553: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___62 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = 61U;
#line 38
  goto ldv_43560;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___62);
#line 38
  goto ldv_43560;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___62);
#line 38
  goto ldv_43560;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___62);
#line 38
  goto ldv_43560;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43560;
  }
  ldv_43560: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 1U;
#line 38
  goto ldv_43567;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___63);
#line 38
  goto ldv_43567;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___63);
#line 38
  goto ldv_43567;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___63);
#line 38
  goto ldv_43567;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43567;
  }
  ldv_43567: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 62U;
#line 38
  goto ldv_43574;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___64);
#line 38
  goto ldv_43574;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___64);
#line 38
  goto ldv_43574;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___64);
#line 38
  goto ldv_43574;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43574;
  }
  ldv_43574: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 1U;
#line 38
  goto ldv_43581;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___65);
#line 38
  goto ldv_43581;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___65);
#line 38
  goto ldv_43581;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___65);
#line 38
  goto ldv_43581;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43581;
  }
  ldv_43581: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 70U;
#line 38
  goto ldv_43588;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___66);
#line 38
  goto ldv_43588;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___66);
#line 38
  goto ldv_43588;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___66);
#line 38
  goto ldv_43588;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43588;
  }
  ldv_43588: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 1U;
#line 38
  goto ldv_43595;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___67);
#line 38
  goto ldv_43595;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___67);
#line 38
  goto ldv_43595;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___67);
#line 38
  goto ldv_43595;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_43595;
  }
  ldv_43595: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 84
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 84 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;

  {
#line 76
  tmp = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p = (void *)tmp;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p) = 30U;
#line 76
  goto ldv_43664;
  case 2UL: 
#line 76
  put_unaligned_le16(30, __gu_p);
#line 76
  goto ldv_43664;
  case 4UL: 
#line 76
  put_unaligned_le32(30U, __gu_p);
#line 76
  goto ldv_43664;
  case 8UL: 
#line 76
  put_unaligned_le64(30ULL, __gu_p);
#line 76
  goto ldv_43664;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43664;
  }
  ldv_43664: 
#line 76
  tmp___0 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___0 = (void *)tmp___0;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___0) = 4U;
#line 76
  goto ldv_43671;
  case 2UL: 
#line 76
  put_unaligned_le16(4, __gu_p___0);
#line 76
  goto ldv_43671;
  case 4UL: 
#line 76
  put_unaligned_le32(4U, __gu_p___0);
#line 76
  goto ldv_43671;
  case 8UL: 
#line 76
  put_unaligned_le64(4ULL, __gu_p___0);
#line 76
  goto ldv_43671;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43671;
  }
  ldv_43671: 
#line 76
  __gu_p___1 = (void *)tags;
#line 76
  switch (4UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 76
  goto ldv_43678;
  case 2UL: 
#line 76
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 76
  goto ldv_43678;
  case 4UL: 
#line 76
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 76
  goto ldv_43678;
  case 8UL: 
#line 76
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 76
  goto ldv_43678;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43678;
  }
  ldv_43678: 
#line 76
  tags = tags + 4U;
#line 76
  tmp___1 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___2 = (void *)tmp___1;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___2) = 31U;
#line 76
  goto ldv_43685;
  case 2UL: 
#line 76
  put_unaligned_le16(31, __gu_p___2);
#line 76
  goto ldv_43685;
  case 4UL: 
#line 76
  put_unaligned_le32(31U, __gu_p___2);
#line 76
  goto ldv_43685;
  case 8UL: 
#line 76
  put_unaligned_le64(31ULL, __gu_p___2);
#line 76
  goto ldv_43685;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43685;
  }
  ldv_43685: 
#line 76
  tmp___2 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___3 = (void *)tmp___2;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___3) = 4U;
#line 76
  goto ldv_43692;
  case 2UL: 
#line 76
  put_unaligned_le16(4, __gu_p___3);
#line 76
  goto ldv_43692;
  case 4UL: 
#line 76
  put_unaligned_le32(4U, __gu_p___3);
#line 76
  goto ldv_43692;
  case 8UL: 
#line 76
  put_unaligned_le64(4ULL, __gu_p___3);
#line 76
  goto ldv_43692;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43692;
  }
  ldv_43692: 
#line 76
  __gu_p___4 = (void *)tags;
#line 76
  switch (4UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 76
  goto ldv_43699;
  case 2UL: 
#line 76
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 76
  goto ldv_43699;
  case 4UL: 
#line 76
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 76
  goto ldv_43699;
  case 8UL: 
#line 76
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 76
  goto ldv_43699;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43699;
  }
  ldv_43699: 
#line 76
  tags = tags + 4U;
#line 76
  tmp___3 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___5 = (void *)tmp___3;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___5) = 32U;
#line 76
  goto ldv_43706;
  case 2UL: 
#line 76
  put_unaligned_le16(32, __gu_p___5);
#line 76
  goto ldv_43706;
  case 4UL: 
#line 76
  put_unaligned_le32(32U, __gu_p___5);
#line 76
  goto ldv_43706;
  case 8UL: 
#line 76
  put_unaligned_le64(32ULL, __gu_p___5);
#line 76
  goto ldv_43706;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43706;
  }
  ldv_43706: 
#line 76
  tmp___4 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___6 = (void *)tmp___4;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___6) = 4U;
#line 76
  goto ldv_43713;
  case 2UL: 
#line 76
  put_unaligned_le16(4, __gu_p___6);
#line 76
  goto ldv_43713;
  case 4UL: 
#line 76
  put_unaligned_le32(4U, __gu_p___6);
#line 76
  goto ldv_43713;
  case 8UL: 
#line 76
  put_unaligned_le64(4ULL, __gu_p___6);
#line 76
  goto ldv_43713;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43713;
  }
  ldv_43713: 
#line 76
  __gu_p___7 = (void *)tags;
#line 76
  switch (4UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 76
  goto ldv_43720;
  case 2UL: 
#line 76
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 76
  goto ldv_43720;
  case 4UL: 
#line 76
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 76
  goto ldv_43720;
  case 8UL: 
#line 76
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 76
  goto ldv_43720;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43720;
  }
  ldv_43720: 
#line 76
  tags = tags + 4U;
#line 76
  tmp___5 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___8 = (void *)tmp___5;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___8) = 52U;
#line 76
  goto ldv_43727;
  case 2UL: 
#line 76
  put_unaligned_le16(49204, __gu_p___8);
#line 76
  goto ldv_43727;
  case 4UL: 
#line 76
  put_unaligned_le32(49204U, __gu_p___8);
#line 76
  goto ldv_43727;
  case 8UL: 
#line 76
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 76
  goto ldv_43727;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43727;
  }
  ldv_43727: 
#line 76
  tmp___6 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___9 = (void *)tmp___6;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 76
  goto ldv_43734;
  case 2UL: 
#line 76
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 76
  goto ldv_43734;
  case 4UL: 
#line 76
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 76
  goto ldv_43734;
  case 8UL: 
#line 76
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 76
  goto ldv_43734;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43734;
  }
  ldv_43734: 
#line 76
  __len = (size_t )arg->verify_alg_len;
#line 76
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 76
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 76
  tmp___7 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___10 = (void *)tmp___7;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___10) = 51U;
#line 76
  goto ldv_43744;
  case 2UL: 
#line 76
  put_unaligned_le16(49203, __gu_p___10);
#line 76
  goto ldv_43744;
  case 4UL: 
#line 76
  put_unaligned_le32(49203U, __gu_p___10);
#line 76
  goto ldv_43744;
  case 8UL: 
#line 76
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 76
  goto ldv_43744;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43744;
  }
  ldv_43744: 
#line 76
  tmp___8 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___11 = (void *)tmp___8;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 76
  goto ldv_43751;
  case 2UL: 
#line 76
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 76
  goto ldv_43751;
  case 4UL: 
#line 76
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 76
  goto ldv_43751;
  case 8UL: 
#line 76
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 76
  goto ldv_43751;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43751;
  }
  ldv_43751: 
#line 76
  __len___0 = (size_t )arg->cpu_mask_len;
#line 76
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 76
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 76
  tmp___9 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___12 = (void *)tmp___9;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___12) = 64U;
#line 76
  goto ldv_43761;
  case 2UL: 
#line 76
  put_unaligned_le16(49216, __gu_p___12);
#line 76
  goto ldv_43761;
  case 4UL: 
#line 76
  put_unaligned_le32(49216U, __gu_p___12);
#line 76
  goto ldv_43761;
  case 8UL: 
#line 76
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 76
  goto ldv_43761;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43761;
  }
  ldv_43761: 
#line 76
  tmp___10 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___13 = (void *)tmp___10;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 76
  goto ldv_43768;
  case 2UL: 
#line 76
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 76
  goto ldv_43768;
  case 4UL: 
#line 76
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 76
  goto ldv_43768;
  case 8UL: 
#line 76
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 76
  goto ldv_43768;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43768;
  }
  ldv_43768: 
#line 76
  __len___1 = (size_t )arg->csums_alg_len;
#line 76
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 76
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 76
  tmp___11 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___14 = (void *)tmp___11;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___14) = 65U;
#line 76
  goto ldv_43778;
  case 2UL: 
#line 76
  put_unaligned_le16(32833, __gu_p___14);
#line 76
  goto ldv_43778;
  case 4UL: 
#line 76
  put_unaligned_le32(32833U, __gu_p___14);
#line 76
  goto ldv_43778;
  case 8UL: 
#line 76
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 76
  goto ldv_43778;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43778;
  }
  ldv_43778: 
#line 76
  tmp___12 = tags;
#line 76
  tags = tags + 1;
#line 76
  __gu_p___15 = (void *)tmp___12;
#line 76
  switch (2UL) {
  case 1UL: 
#line 76
  *((u8 *)__gu_p___15) = 1U;
#line 76
  goto ldv_43785;
  case 2UL: 
#line 76
  put_unaligned_le16(1, __gu_p___15);
#line 76
  goto ldv_43785;
  case 4UL: 
#line 76
  put_unaligned_le32(1U, __gu_p___15);
#line 76
  goto ldv_43785;
  case 8UL: 
#line 76
  put_unaligned_le64(1ULL, __gu_p___15);
#line 76
  goto ldv_43785;
  default: 
#line 76
  __bad_unaligned_access_size();
#line 76
  goto ldv_43785;
  }
  ldv_43785: 
#line 76
  *((char *)tags) = (char )arg->use_rle;
#line 76
  tags = tags + 1U;
#line 76
  return (tags);
}
}
#line 96
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 96 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 94
  tmp = tags;
#line 94
  tags = tags + 1;
#line 94
  __gu_p = (void *)tmp;
#line 94
  switch (2UL) {
  case 1UL: 
#line 94
  *((u8 *)__gu_p) = 33U;
#line 94
  goto ldv_43873;
  case 2UL: 
#line 94
  put_unaligned_le16(33, __gu_p);
#line 94
  goto ldv_43873;
  case 4UL: 
#line 94
  put_unaligned_le32(33U, __gu_p);
#line 94
  goto ldv_43873;
  case 8UL: 
#line 94
  put_unaligned_le64(33ULL, __gu_p);
#line 94
  goto ldv_43873;
  default: 
#line 94
  __bad_unaligned_access_size();
#line 94
  goto ldv_43873;
  }
  ldv_43873: 
#line 94
  tmp___0 = tags;
#line 94
  tags = tags + 1;
#line 94
  __gu_p___0 = (void *)tmp___0;
#line 94
  switch (2UL) {
  case 1UL: 
#line 94
  *((u8 *)__gu_p___0) = 4U;
#line 94
  goto ldv_43880;
  case 2UL: 
#line 94
  put_unaligned_le16(4, __gu_p___0);
#line 94
  goto ldv_43880;
  case 4UL: 
#line 94
  put_unaligned_le32(4U, __gu_p___0);
#line 94
  goto ldv_43880;
  case 8UL: 
#line 94
  put_unaligned_le64(4ULL, __gu_p___0);
#line 94
  goto ldv_43880;
  default: 
#line 94
  __bad_unaligned_access_size();
#line 94
  goto ldv_43880;
  }
  ldv_43880: 
#line 94
  __gu_p___1 = (void *)tags;
#line 94
  switch (4UL) {
  case 1UL: 
#line 94
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 94
  goto ldv_43887;
  case 2UL: 
#line 94
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 94
  goto ldv_43887;
  case 4UL: 
#line 94
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 94
  goto ldv_43887;
  case 8UL: 
#line 94
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 94
  goto ldv_43887;
  default: 
#line 94
  __bad_unaligned_access_size();
#line 94
  goto ldv_43887;
  }
  ldv_43887: 
#line 94
  tags = tags + 4U;
#line 94
  return (tags);
}
}
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 171
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 175
  envp[0] = (char *)"HOME=/";
#line 175
  envp[1] = (char *)"TERM=linux";
#line 175
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 175
  envp[3] = 0;
#line 175
  envp[4] = 0;
#line 175
  envp[5] = 0;
#line 183
  argv[0] = (char *)(& usermode_helper);
#line 183
  argv[1] = cmd;
#line 183
  argv[2] = (char *)(& mb);
#line 183
  argv[3] = 0;
#line 186
  tmp = mdev_to_minor(mdev);
#line 186
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 188
  tmp___0 = get_net_conf(mdev);
#line 188
  if (tmp___0 != 0) {
#line 189
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 191
    afs = (char *)"ipv6";
#line 192
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 194
    goto ldv_44208;
    case 2: 
#line 196
    afs = (char *)"ipv4";
#line 197
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 199
    goto ldv_44208;
    default: 
#line 201
    afs = (char *)"ssocks";
#line 202
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_44208: 
#line 205
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 206
    envp[3] = (char *)(& af);
#line 207
    envp[4] = (char *)(& ad);
#line 208
    put_net_conf(mdev);
  } else {

  }
#line 211
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 211
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 211
  printk("<6>%s %s: helper command: %s %s %s\n", tmp___2, tmp___1, (char *)(& usermode_helper),
         cmd, (char *)(& mb));
#line 213
  drbd_bcast_ev_helper(mdev, cmd);
#line 214
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 215
  if (ret != 0) {
#line 216
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 216
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 216
    printk("<4>%s %s: helper command: %s %s %s exit code %u (0x%x)\n", tmp___4, tmp___3,
           (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 220
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 220
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 220
    printk("<6>%s %s: helper command: %s %s %s exit code %u (0x%x)\n", tmp___6, tmp___5,
           (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  }
#line 224
  if (ret < 0) {
#line 225
    ret = 0;
  } else {

  }
#line 227
  return (ret);
}
}
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 237
  if (*((unsigned int *)mdev + 451UL) != 49152U) {
#line 237
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 237
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 237
    printk("<3>%s %s: ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           237);
  } else {

  }
#line 239
  tmp___3 = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 239
  if (tmp___3 != 0) {
#line 240
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 241
    put_ldev(mdev);
  } else {
#line 243
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 243
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 243
    printk("<4>%s %s: Not fencing peer, I\'m not even Consistent myself.\n", tmp___2,
           tmp___1);
#line 244
    return ((enum drbd_disk_state )mdev->state.ldv_33380.pdsk);
  }
#line 247
  if ((unsigned int )fp == 2U) {
#line 248
    val.i = 0U;
#line 248
    val.ldv_33380.susp = 1U;
#line 248
    mask.i = 0U;
#line 248
    mask.ldv_33380.susp = 1U;
#line 248
    _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
  } else {

  }
#line 250
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 252
  switch ((r >> 8) & 255) {
  case 3: 
#line 254
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 255
  nps = D_INCONSISTENT;
#line 256
  goto ldv_44223;
  case 4: 
#line 258
  ex_to_string = (char *)"peer was fenced";
#line 259
  nps = D_OUTDATED;
#line 260
  goto ldv_44223;
  case 5: ;
#line 262
  if ((unsigned int )*((unsigned char *)mdev + 1805UL) == 16U) {
#line 264
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 265
    nps = D_OUTDATED;
  } else {
#line 267
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 268
    nps = (enum drbd_disk_state )mdev->state.ldv_33380.pdsk;
  }
#line 270
  goto ldv_44223;
  case 6: 
#line 274
  ex_to_string = (char *)"peer is active";
#line 275
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 275
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 275
  printk("<4>%s %s: Peer is primary, outdating myself.\n", tmp___5, tmp___4);
#line 276
  nps = D_UNKNOWN;
#line 277
  val___0.i = 0U;
#line 277
  val___0.ldv_33380.disk = 5U;
#line 277
  mask___0.i = 0U;
#line 277
  mask___0.ldv_33380.disk = 15U;
#line 277
  _drbd_request_state(mdev, mask___0, val___0, CS_WAIT_COMPLETE);
#line 278
  goto ldv_44223;
  case 7: ;
#line 280
  if ((unsigned int )fp != 2U) {
#line 281
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 281
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 281
    printk("<3>%s %s: fence-peer() = 7 && fencing != Stonith !!!\n", tmp___7, tmp___6);
  } else {

  }
#line 282
  ex_to_string = (char *)"peer was stonithed";
#line 283
  nps = D_OUTDATED;
#line 284
  goto ldv_44223;
  default: 
#line 287
  nps = D_UNKNOWN;
#line 288
  tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 288
  tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 288
  printk("<3>%s %s: fence-peer helper broken, returned %d\n", tmp___9, tmp___8, (r >> 8) & 255);
#line 289
  return (nps);
  }
  ldv_44223: 
#line 292
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 292
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 292
  printk("<6>%s %s: fence-peer helper returned %d (%s)\n", tmp___11, tmp___10, (r >> 8) & 255,
         ex_to_string);
#line 294
  return (nps);
}
}
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) 
{ 
  int max_tries ;
  int r ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;

  {
#line 300
  max_tries = 4;
#line 301
  r = 0;
#line 302
  try = 0;
#line 303
  forced = 0;
#line 307
  if ((unsigned int )new_role == 1U) {
#line 308
    request_ping(mdev);
  } else {

  }
#line 310
  ldv_mutex_lock_134(& mdev->state_mutex);
#line 312
  mask.i = 0U;
#line 312
  mask.ldv_33380.role = 3U;
#line 313
  val.i = 0U;
#line 313
  val.ldv_33380.role = (unsigned char )new_role;
#line 315
  goto ldv_44245;
  ldv_44248: 
#line 316
  r = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 320
  if (r == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 321
    val.ldv_33380.pdsk = 0U;
#line 322
    mask.ldv_33380.pdsk = 0U;
#line 323
    goto ldv_44245;
  } else {

  }
#line 326
  if ((r == -2 && force != 0) && ((int )mdev->state.ldv_33380.disk <= 7 && (int )mdev->state.ldv_33380.disk > 3)) {
#line 329
    mask.ldv_33380.disk = 15U;
#line 330
    val.ldv_33380.disk = 8U;
#line 331
    forced = 1;
#line 332
    goto ldv_44245;
  } else {

  }
#line 335
  if ((r == -2 && (unsigned int )*((unsigned char *)mdev + 1805UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 337
    if (*((unsigned int *)mdev + 451UL) != 49152U) {
#line 337
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 337
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 337
      printk("<3>%s %s: ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n", tmp___0,
             tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
             337);
    } else {

    }
#line 338
    nps = drbd_try_outdate_peer(mdev);
#line 340
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 341
      val.ldv_33380.disk = 8U;
#line 342
      mask.ldv_33380.disk = 15U;
    } else {

    }
#line 345
    val.ldv_33380.pdsk = (unsigned char )nps;
#line 346
    mask.ldv_33380.pdsk = 15U;
#line 348
    goto ldv_44245;
  } else {

  }
#line 351
  if (r == 2) {
#line 352
    goto fail;
  } else {

  }
#line 353
  if (r == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 354
    nps = drbd_try_outdate_peer(mdev);
#line 356
    if (force != 0 && (unsigned int )nps > 5U) {
#line 357
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 357
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 357
      printk("<4>%s %s: Forced into split brain situation!\n", tmp___2, tmp___1);
#line 358
      nps = D_OUTDATED;
    } else {

    }
#line 361
    mask.ldv_33380.pdsk = 15U;
#line 362
    val.ldv_33380.pdsk = (unsigned char )nps;
#line 364
    goto ldv_44245;
  } else {

  }
#line 366
  if (r == -1) {
#line 369
    tmp___3 = get_current();
#line 369
    tmp___3->state = 1L;
#line 370
    schedule_timeout((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 371
    if (try < max_tries) {
#line 372
      try = max_tries + -1;
    } else {

    }
#line 373
    goto ldv_44245;
  } else {

  }
#line 375
  if (r <= 0) {
#line 376
    r = _drbd_request_state(mdev, mask, val, 6);
#line 378
    if (r <= 0) {
#line 379
      goto fail;
    } else {

    }
  } else {

  }
#line 381
  goto ldv_44247;
  ldv_44245: 
#line 315
  tmp___4 = try;
#line 315
  try = try + 1;
#line 315
  if (tmp___4 < max_tries) {
#line 316
    goto ldv_44248;
  } else {

  }
  ldv_44247: ;
#line 384
  if (r <= 0) {
#line 385
    goto fail;
  } else {

  }
#line 387
  if (forced != 0) {
#line 388
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 388
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 388
    printk("<4>%s %s: Forced to consider local data as UpToDate!\n", tmp___6, tmp___5);
  } else {

  }
#line 391
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 391
  if (tmp___7 == 0) {
#line 391
    goto ldv_44249;
  } else {

  }
#line 391
  tmp___8 = get_current();
#line 391
  __wait.flags = 0U;
#line 391
  __wait.private = (void *)tmp___8;
#line 391
  __wait.func = & autoremove_wake_function;
#line 391
  __wait.task_list.next = & __wait.task_list;
#line 391
  __wait.task_list.prev = & __wait.task_list;
  ldv_44252: 
#line 391
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 391
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 391
  if (tmp___9 == 0) {
#line 391
    goto ldv_44251;
  } else {

  }
#line 391
  schedule();
#line 391
  goto ldv_44252;
  ldv_44251: 
#line 391
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44249: ;
#line 393
  if ((unsigned int )new_role == 2U) {
#line 394
    set_disk_ro(mdev->vdisk, 1);
#line 395
    tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 395
    if (tmp___10 != 0) {
#line 396
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 397
      put_ldev(mdev);
    } else {

    }
  } else {
#line 400
    tmp___11 = get_net_conf(mdev);
#line 400
    if (tmp___11 != 0) {
#line 401
      (mdev->net_conf)->want_lose = 0U;
#line 402
      put_net_conf(mdev);
    } else {

    }
#line 404
    set_disk_ro(mdev->vdisk, 0);
#line 405
    tmp___12 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 405
    if (tmp___12 != 0) {
#line 406
      if ((((int )mdev->state.ldv_33380.conn <= 9 || (int )mdev->state.ldv_33380.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 409
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 411
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 412
      put_ldev(mdev);
    } else {

    }
  }
#line 416
  if ((unsigned int )new_role == 2U) {
#line 416
    tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 416
    if (tmp___13 != 0) {
#line 417
      drbd_al_to_on_disk_bm(mdev);
#line 418
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 421
  if ((int )mdev->state.ldv_33380.conn > 8) {
#line 423
    if (forced != 0) {
#line 424
      drbd_send_uuids(mdev);
    } else {

    }
#line 425
    drbd_send_state(mdev);
  } else {

  }
#line 428
  drbd_md_sync(mdev);
#line 430
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 432
  ldv_mutex_unlock_135(& mdev->state_mutex);
#line 433
  return (r);
}
}
#line 437 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;

  {
#line 442
  memset((void *)(& primary_args), 0, 4UL);
#line 443
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 443
  if (tmp == 0) {
#line 444
    reply->ret_code = 126;
#line 445
    return (0);
  } else {

  }
#line 448
  reply->ret_code = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 451
  return (0);
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 


  {
#line 457
  reply->ret_code = drbd_set_role(mdev, R_SECONDARY, 0);
#line 459
  return (0);
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 467
  md_size_sect = 0UL;
#line 468
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 471
  bdev->md.md_size_sect = 262144U;
#line 472
  tmp = drbd_md_ss__(mdev, bdev);
#line 472
  bdev->md.md_offset = (u64 )tmp;
#line 473
  bdev->md.al_offset = 8;
#line 474
  bdev->md.bm_offset = 72;
#line 475
  goto ldv_44270;
  case -2: 
#line 478
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 478
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 479
  bdev->md.md_offset = 0ULL;
#line 480
  bdev->md.al_offset = 8;
#line 481
  bdev->md.bm_offset = 72;
#line 482
  goto ldv_44270;
  case -1: ;
  case -3: 
#line 485
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 485
  bdev->md.md_offset = (u64 )tmp___1;
#line 487
  bdev->md.al_offset = -64;
#line 489
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 490
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 491
  md_size_sect = md_size_sect >> 15;
#line 492
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 496
  md_size_sect = md_size_sect + 72UL;
#line 498
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 500
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 501
  goto ldv_44270;
  }
  ldv_44270: ;
#line 504
  return;
}
}
#line 505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 508
  units[0] = 75;
#line 508
  units[1] = 77;
#line 508
  units[2] = 71;
#line 508
  units[3] = 84;
#line 508
  units[4] = 80;
#line 508
  units[5] = 69;
#line 509
  base = 0;
#line 510
  goto ldv_44281;
  ldv_44280: 
#line 512
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 513
  base = base + 1;
  ldv_44281: ;
#line 510
  if (size > 9999ULL) {
#line 511
    goto ldv_44280;
  } else {

  }
#line 515
  sprintf(buf, "%lu %cB", (long )size, (int )units[base]);
#line 517
  return (buf);
}
}
#line 533 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 535
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 536
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 536
  if (tmp == 0) {
#line 536
    goto ldv_44286;
  } else {

  }
#line 536
  tmp___0 = get_current();
#line 536
  __wait.flags = 0U;
#line 536
  __wait.private = (void *)tmp___0;
#line 536
  __wait.func = & autoremove_wake_function;
#line 536
  __wait.task_list.next = & __wait.task_list;
#line 536
  __wait.task_list.prev = & __wait.task_list;
  ldv_44289: 
#line 536
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 536
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 536
  if (tmp___1 == 0) {
#line 536
    goto ldv_44288;
  } else {

  }
#line 536
  schedule();
#line 536
  goto ldv_44289;
  ldv_44288: 
#line 536
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44286: ;
#line 539
  return;
}
}
#line 539 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 541
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 542
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 543
  return;
}
}
#line 552 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , int force ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  char *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;

  {
#line 560
  rv = 0;
#line 571
  drbd_suspend_io(mdev);
#line 574
  tmp = lc_try_lock(mdev->act_log);
#line 574
  if (tmp != 0) {
#line 574
    goto ldv_44305;
  } else {

  }
#line 574
  tmp___0 = get_current();
#line 574
  __wait.flags = 0U;
#line 574
  __wait.private = (void *)tmp___0;
#line 574
  __wait.func = & autoremove_wake_function;
#line 574
  __wait.task_list.next = & __wait.task_list;
#line 574
  __wait.task_list.prev = & __wait.task_list;
  ldv_44308: 
#line 574
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 574
  tmp___1 = lc_try_lock(mdev->act_log);
#line 574
  if (tmp___1 != 0) {
#line 574
    goto ldv_44307;
  } else {

  }
#line 574
  schedule();
#line 574
  goto ldv_44308;
  ldv_44307: 
#line 574
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44305: 
#line 576
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 577
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 578
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 581
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 583
  size = drbd_new_dev_size(mdev, mdev->ldev, force);
#line 585
  tmp___11 = drbd_get_capacity(mdev->this_bdev);
#line 585
  if (tmp___11 != size) {
#line 585
    goto _L;
  } else {
#line 585
    tmp___12 = drbd_bm_capacity(mdev);
#line 585
    if (tmp___12 != size) {
      _L: /* CIL Label */ 
#line 588
      err = drbd_bm_resize(mdev, size);
#line 589
      tmp___7 = __builtin_expect(err != 0, 0L);
#line 589
      if (tmp___7 != 0L) {
#line 591
        tmp___2 = drbd_bm_capacity(mdev);
#line 591
        size = tmp___2 >> 1;
#line 592
        if (size == 0UL) {
#line 593
          tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 593
          tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 593
          printk("<3>%s %s: OUT OF MEMORY! Could not allocate bitmap!\n", tmp___4,
                 tmp___3);
        } else {
#line 596
          tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 596
          tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 596
          printk("<3>%s %s: BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                 tmp___6, tmp___5, size);
        }
#line 600
        rv = dev_size_error;
      } else {

      }
#line 603
      drbd_set_my_capacity(mdev, size);
#line 604
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 605
      tmp___8 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 605
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 605
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 605
      printk("<6>%s %s: size = %s (%llu KB)\n", tmp___10, tmp___9, tmp___8, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 608
  if ((int )rv == -1) {
#line 609
    goto out;
  } else {

  }
#line 611
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 613
  tmp___13 = drbd_md_first_sector(mdev->ldev);
#line 613
  md_moved = tmp___13 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 616
  if (la_size_changed != 0 || md_moved != 0) {
#line 617
    drbd_al_shrink(mdev);
#line 618
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 618
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 618
    printk("<6>%s %s: Writing the whole bitmap, %s\n", tmp___15, tmp___14, la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 621
    tmp___16 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed");
#line 621
    rv = (enum determine_dev_size )tmp___16;
#line 622
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 625
  if (size > la_size) {
#line 626
    rv = grew;
  } else {

  }
#line 627
  if (size < la_size) {
#line 628
    rv = shrunk;
  } else {

  }
  out: 
#line 630
  lc_unlock(mdev->act_log);
#line 631
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 632
  drbd_resume_io(mdev);
#line 634
  return (rv);
}
}
#line 638 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  char const   *tmp ;
  char const   *tmp___0 ;
  sector_t __min1 ;
  sector_t __min2 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 640
  p_size = mdev->p_size;
#line 641
  la_size = (sector_t )bdev->md.la_size_sect;
#line 643
  u_size = (sector_t )bdev->dc.disk_size;
#line 644
  size = 0UL;
#line 646
  m_size = drbd_get_max_capacity___1(bdev);
#line 648
  if ((int )mdev->state.ldv_33380.conn <= 9 && assume_peer_has_space != 0) {
#line 649
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 649
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 649
    printk("<4>%s %s: Resize while not connected was forced by the user!\n", tmp___0,
           tmp);
#line 650
    p_size = m_size;
  } else {

  }
#line 653
  if (p_size != 0UL && m_size != 0UL) {
#line 654
    __min1 = p_size;
#line 654
    __min2 = m_size;
#line 654
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 656
  if (la_size != 0UL) {
#line 657
    size = la_size;
#line 658
    if (m_size != 0UL && m_size < size) {
#line 659
      size = m_size;
    } else {

    }
#line 660
    if (p_size != 0UL && p_size < size) {
#line 661
      size = p_size;
    } else {

    }
  } else {
#line 663
    if (m_size != 0UL) {
#line 664
      size = m_size;
    } else {

    }
#line 665
    if (p_size != 0UL) {
#line 666
      size = p_size;
    } else {

    }
  }
#line 670
  if (size == 0UL) {
#line 671
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 671
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 671
    printk("<3>%s %s: Both nodes diskless!\n", tmp___2, tmp___1);
  } else {

  }
#line 673
  if (u_size != 0UL) {
#line 674
    if (u_size > size) {
#line 675
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 675
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 675
      printk("<3>%s %s: Requested disk size is too big (%lu > %lu)\n", tmp___4, tmp___3,
             u_size >> 1, size >> 1);
    } else {
#line 678
      size = u_size;
    }
  } else {

  }
#line 681
  return (size);
}
}
#line 692 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 699
  _b = mdev->sync_conf.al_extents <= 6;
#line 699
  if (_b != 0) {
#line 699
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 699
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 699
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           699);
  } else {

  }
#line 699
  if (_b != 0) {
#line 700
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 702
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 704
    return (0);
  } else {

  }
#line 706
  in_use = 0U;
#line 707
  t = mdev->act_log;
#line 708
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 711
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 712
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 712
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 712
    printk("<3>%s %s: Cannot allocate act_log lru!\n", tmp___2, tmp___1);
#line 713
    return (-12);
  } else {

  }
#line 715
  spin_lock_irq(& mdev->al_lock);
#line 716
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 717
    i = 0;
#line 717
    goto ldv_44336;
    ldv_44335: 
#line 718
    e = lc_element_by_index(t, (unsigned int )i);
#line 719
    if (e->refcnt != 0U) {
#line 720
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 720
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 720
      printk("<3>%s %s: refcnt(%d)==%d\n", tmp___4, tmp___3, e->lc_number, e->refcnt);
    } else {

    }
#line 722
    in_use = e->refcnt + in_use;
#line 717
    i = i + 1;
    ldv_44336: ;
#line 717
    if ((unsigned int )i < t->nr_elements) {
#line 718
      goto ldv_44335;
    } else {

    }

  } else {

  }
#line 725
  if (in_use == 0U) {
#line 726
    mdev->act_log = n;
  } else {

  }
#line 727
  spin_unlock_irq(& mdev->al_lock);
#line 728
  if (in_use != 0U) {
#line 729
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 729
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 729
    printk("<3>%s %s: Activity log still in use!\n", tmp___6, tmp___5);
#line 730
    lc_destroy(n);
#line 731
    return (-16);
  } else
#line 733
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 734
    lc_destroy(t);
  } else {

  }
#line 736
  drbd_md_mark_dirty(mdev);
#line 737
  return (0);
}
}
#line 740 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) 
{ 
  struct request_queue *q ;
  struct request_queue *b ;
  int max_segments ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned short tmp___0 ;
  unsigned int _min2 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 742
  q = mdev->rq_queue;
#line 743
  b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 744
  max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 746
  if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0) && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) == 0U) {
#line 747
    max_seg_s = 4096U;
  } else {

  }
#line 749
  tmp = queue_max_sectors(b);
#line 749
  tmp___0 = queue_logical_block_size(b);
#line 749
  _min1 = tmp * (unsigned int )tmp___0;
#line 749
  _min2 = max_seg_s;
#line 749
  max_seg_s = _min1 < _min2 ? _min1 : _min2;
#line 751
  blk_queue_max_hw_sectors(q, max_seg_s >> 9);
#line 752
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 753
  blk_queue_max_segment_size(q, max_seg_s);
#line 754
  blk_queue_logical_block_size(q, 512);
#line 755
  blk_queue_segment_boundary(q, 4095UL);
#line 756
  blk_stack_limits(& q->limits, & b->limits, 0UL);
#line 758
  if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 759
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 759
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 759
    printk("<4>%s %s: Backing device\'s merge_bvec_fn() = %p\n", tmp___2, tmp___1,
           b->merge_bvec_fn);
  } else {

  }
#line 761
  tmp___3 = queue_max_segment_size(q);
#line 761
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 761
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 761
  printk("<6>%s %s: max_segment_size ( = BIO size ) = %u\n", tmp___5, tmp___4, tmp___3);
#line 763
  if (q->backing_dev_info.ra_pages != b->backing_dev_info.ra_pages) {
#line 764
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 764
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 764
    printk("<6>%s %s: Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
           tmp___7, tmp___6, q->backing_dev_info.ra_pages, b->backing_dev_info.ra_pages);
#line 767
    q->backing_dev_info.ra_pages = b->backing_dev_info.ra_pages;
  } else {

  }
#line 769
  return;
}
}
#line 777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 779
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 779
  if (tmp == 0) {
#line 779
    goto ldv_44351;
  } else {

  }
#line 779
  tmp___0 = get_current();
#line 779
  __wait.flags = 0U;
#line 779
  __wait.private = (void *)tmp___0;
#line 779
  __wait.func = & autoremove_wake_function;
#line 779
  __wait.task_list.next = & __wait.task_list;
#line 779
  __wait.task_list.prev = & __wait.task_list;
  ldv_44354: 
#line 779
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 779
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 779
  if (tmp___1 == 0) {
#line 779
    goto ldv_44353;
  } else {

  }
#line 779
  schedule();
#line 779
  goto ldv_44354;
  ldv_44353: 
#line 779
  finish_wait(& mdev->state_wait, & __wait);
  ldv_44351: 
#line 780
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 780
  if (tmp___2 == 0) {
#line 780
    goto ldv_44355;
  } else {

  }
#line 780
  tmp___3 = get_current();
#line 780
  __wait___0.flags = 0U;
#line 780
  __wait___0.private = (void *)tmp___3;
#line 780
  __wait___0.func = & autoremove_wake_function;
#line 780
  __wait___0.task_list.next = & __wait___0.task_list;
#line 780
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_44358: 
#line 780
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 780
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 780
  if (tmp___4 == 0) {
#line 780
    goto ldv_44357;
  } else {

  }
#line 780
  schedule();
#line 780
  goto ldv_44358;
  ldv_44357: 
#line 780
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_44355: 
#line 781
  drbd_thread_start(& mdev->worker);
#line 782
  return;
}
}
#line 787 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 789
  spin_lock_irq(& mdev->req_lock);
#line 790
  if (((unsigned int )*((unsigned char *)mdev + 1805UL) == 0U && (unsigned int )*((unsigned short *)mdev + 902UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1804UL) == 2U) {
#line 793
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 794
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 796
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 797
  spin_unlock_irq(& mdev->req_lock);
#line 798
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 799
  return;
}
}
#line 803 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_codes retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct inode *inode ;
  struct inode *inode2 ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  int rv ;
  int cp_discovered ;
  int logical_block_size ;
  void *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  sector_t tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  sector_t tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  sector_t tmp___17 ;
  sector_t tmp___18 ;
  sector_t tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___25 ;
  int tmp___26 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___27 ;
  int tmp___28 ;
  unsigned short tmp___29 ;
  struct page *page ;
  struct page *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  char const   *tmp___37 ;
  char const   *tmp___38 ;
  int tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;
  int tmp___42 ;
  sector_t tmp___43 ;
  int tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  char const   *tmp___51 ;
  char const   *tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 810
  nbc = 0;
#line 812
  resync_lru = 0;
#line 815
  cp_discovered = 0;
#line 818
  drbd_reconfig_start(mdev);
#line 821
  if ((int )mdev->state.ldv_33380.disk > 0) {
#line 822
    retcode = ERR_DISK_CONFIGURED;
#line 823
    goto fail;
  } else {

  }
#line 827
  tmp = kzalloc___2(408UL, 208U);
#line 827
  nbc = (struct drbd_backing_dev *)tmp;
#line 828
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 829
    retcode = ERR_NOMEM;
#line 830
    goto fail;
  } else {

  }
#line 833
  nbc->dc.disk_size = 0ULL;
#line 834
  nbc->dc.on_io_error = 0;
#line 835
  nbc->dc.fencing = 0;
#line 836
  nbc->dc.max_bio_bvecs = 0;
#line 838
  tmp___0 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 838
  if (tmp___0 == 0) {
#line 839
    retcode = ERR_MANDATORY_TAG;
#line 840
    goto fail;
  } else {

  }
#line 843
  if (nbc->dc.meta_dev_idx < -3) {
#line 844
    retcode = ERR_MD_IDX_INVALID;
#line 845
    goto fail;
  } else {

  }
#line 848
  nbc->lo_file = filp_open((char const   *)(& nbc->dc.backing_dev), 2, 0);
#line 849
  tmp___4 = IS_ERR((void const   *)nbc->lo_file);
#line 849
  if (tmp___4 != 0L) {
#line 850
    tmp___1 = PTR_ERR((void const   *)nbc->lo_file);
#line 850
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 850
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 850
    printk("<3>%s %s: open(\"%s\") failed with %ld\n", tmp___3, tmp___2, (unsigned char *)(& nbc->dc.backing_dev),
           tmp___1);
#line 852
    nbc->lo_file = 0;
#line 853
    retcode = ERR_OPEN_DISK;
#line 854
    goto fail;
  } else {

  }
#line 857
  inode = ((nbc->lo_file)->f_path.dentry)->d_inode;
#line 859
  if (((int )inode->i_mode & 61440) != 24576) {
#line 860
    retcode = ERR_DISK_NOT_BDEV;
#line 861
    goto fail;
  } else {

  }
#line 864
  nbc->md_file = filp_open((char const   *)(& nbc->dc.meta_dev), 2, 0);
#line 865
  tmp___8 = IS_ERR((void const   *)nbc->md_file);
#line 865
  if (tmp___8 != 0L) {
#line 866
    tmp___5 = PTR_ERR((void const   *)nbc->md_file);
#line 866
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 866
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 866
    printk("<3>%s %s: open(\"%s\") failed with %ld\n", tmp___7, tmp___6, (unsigned char *)(& nbc->dc.meta_dev),
           tmp___5);
#line 868
    nbc->md_file = 0;
#line 869
    retcode = ERR_OPEN_MD_DISK;
#line 870
    goto fail;
  } else {

  }
#line 873
  inode2 = ((nbc->md_file)->f_path.dentry)->d_inode;
#line 875
  if (((int )inode2->i_mode & 61440) != 24576) {
#line 876
    retcode = ERR_MD_NOT_BDEV;
#line 877
    goto fail;
  } else {

  }
#line 880
  nbc->backing_bdev = inode->ldv_22098.i_bdev;
#line 881
  tmp___9 = bd_claim(nbc->backing_bdev, (void *)mdev);
#line 881
  if (tmp___9 != 0) {
#line 882
    printk("<3>drbd: bd_claim(%p,%p); failed [%p;%p;%u]\n", nbc->backing_bdev, mdev,
           (nbc->backing_bdev)->bd_holder, ((nbc->backing_bdev)->bd_contains)->bd_holder,
           (nbc->backing_bdev)->bd_holders);
#line 887
    retcode = ERR_BDCLAIM_DISK;
#line 888
    goto fail;
  } else {

  }
#line 891
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 894
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 895
    retcode = ERR_NOMEM;
#line 896
    goto release_bdev_fail;
  } else {

  }
#line 906
  nbc->md_bdev = inode2->ldv_22098.i_bdev;
#line 907
  tmp___10 = bd_claim(nbc->md_bdev, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 907
  if (tmp___10 != 0) {
#line 909
    retcode = ERR_BDCLAIM_MD_DISK;
#line 910
    goto release_bdev_fail;
  } else {

  }
#line 913
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 916
    retcode = ERR_MD_IDX_INVALID;
#line 917
    goto release_bdev2_fail;
  } else {

  }
#line 921
  drbd_md_set_sector_offsets(mdev, nbc);
#line 923
  tmp___14 = drbd_get_max_capacity___1(nbc);
#line 923
  if ((unsigned long long )tmp___14 < nbc->dc.disk_size) {
#line 924
    tmp___11 = drbd_get_max_capacity___1(nbc);
#line 924
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 924
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 924
    printk("<3>%s %s: max capacity %llu smaller than disk size %llu\n", tmp___13,
           tmp___12, (unsigned long long )tmp___11, nbc->dc.disk_size);
#line 927
    retcode = ERR_DISK_TO_SMALL;
#line 928
    goto release_bdev2_fail;
  } else {

  }
#line 931
  if (nbc->dc.meta_dev_idx < 0) {
#line 932
    max_possible_sectors = 34359738368UL;
#line 934
    min_md_device_sectors = 2048UL;
  } else {
#line 936
    max_possible_sectors = 8587575296UL;
#line 937
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 940
  tmp___17 = drbd_get_capacity(nbc->md_bdev);
#line 940
  if (tmp___17 < min_md_device_sectors) {
#line 941
    retcode = ERR_MD_DISK_TO_SMALL;
#line 942
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 942
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 942
    printk("<4>%s %s: refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
           tmp___16, tmp___15, (unsigned long long )min_md_device_sectors);
#line 945
    goto release_bdev2_fail;
  } else {

  }
#line 950
  tmp___18 = drbd_get_max_capacity___1(nbc);
#line 950
  tmp___19 = drbd_get_capacity(mdev->this_bdev);
#line 950
  if (tmp___18 < tmp___19) {
#line 952
    retcode = ERR_DISK_TO_SMALL;
#line 953
    goto release_bdev2_fail;
  } else {

  }
#line 956
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 958
  if (nbc->known_size > max_possible_sectors) {
#line 959
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 959
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 959
    printk("<4>%s %s: ==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
           tmp___21, tmp___20, (unsigned long long )max_possible_sectors);
#line 962
    if (nbc->dc.meta_dev_idx >= 0) {
#line 963
      tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 963
      tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 963
      printk("<4>%s %s: ==>> using internal or flexible meta data may help <<==\n",
             tmp___23, tmp___22);
    } else {

    }
  } else {

  }
#line 967
  drbd_suspend_io(mdev);
#line 969
  tmp___24 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 969
  if (tmp___24 == 0) {
#line 969
    goto ldv_44383;
  } else {

  }
#line 969
  tmp___25 = get_current();
#line 969
  __wait.flags = 0U;
#line 969
  __wait.private = (void *)tmp___25;
#line 969
  __wait.func = & autoremove_wake_function;
#line 969
  __wait.task_list.next = & __wait.task_list;
#line 969
  __wait.task_list.prev = & __wait.task_list;
  ldv_44386: 
#line 969
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 969
  tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 969
  if (tmp___26 == 0) {
#line 969
    goto ldv_44385;
  } else {

  }
#line 969
  schedule();
#line 969
  goto ldv_44386;
  ldv_44385: 
#line 969
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44383: 
#line 971
  drbd_flush_workqueue(mdev);
#line 973
  val.i = 0U;
#line 973
  val.ldv_33380.disk = 1U;
#line 973
  mask.i = 0U;
#line 973
  mask.ldv_33380.disk = 15U;
#line 973
  tmp___27 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 973
  retcode = (enum drbd_ret_codes )tmp___27;
#line 974
  drbd_resume_io(mdev);
#line 975
  if ((unsigned int )retcode == 0U) {
#line 976
    goto release_bdev2_fail;
  } else {

  }
#line 978
  tmp___28 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 978
  if (tmp___28 == 0) {
#line 979
    goto force_diskless;
  } else {

  }
#line 981
  drbd_md_set_sector_offsets(mdev, nbc);
#line 984
  tmp___29 = bdev_logical_block_size(nbc->md_bdev);
#line 984
  logical_block_size = (int )tmp___29;
#line 985
  if (logical_block_size == 0) {
#line 986
    logical_block_size = 512;
  } else {

  }
#line 988
  if (logical_block_size != 512) {
#line 989
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 990
      tmp___30 = alloc_pages(16U, 0U);
#line 990
      page = tmp___30;
#line 991
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 992
        goto force_diskless_dec;
      } else {

      }
#line 994
      tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 994
      tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 994
      printk("<4>%s %s: Meta data\'s bdev logical_block_size = %d != %d\n", tmp___32,
             tmp___31, logical_block_size, 512);
#line 996
      tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 996
      tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 996
      printk("<4>%s %s: Workaround engaged (has performance impact).\n", tmp___34,
             tmp___33);
#line 998
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1002
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1003
    tmp___35 = drbd_bm_init(mdev);
#line 1003
    if (tmp___35 != 0) {
#line 1004
      retcode = ERR_NOMEM;
#line 1005
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1009
  tmp___36 = drbd_md_read(mdev, nbc);
#line 1009
  retcode = (enum drbd_ret_codes )tmp___36;
#line 1010
  if ((unsigned int )retcode != 101U) {
#line 1011
    goto force_diskless_dec;
  } else {

  }
#line 1013
  if (((int )mdev->state.ldv_33380.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1016
    tmp___37 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1016
    tmp___38 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1016
    printk("<3>%s %s: Can only attach to data with current UUID=%016llX\n", tmp___38,
           tmp___37, mdev->ed_uuid);
#line 1018
    retcode = ERR_DATA_NOT_CURRENT;
#line 1019
    goto force_diskless_dec;
  } else {

  }
#line 1023
  tmp___39 = drbd_check_al_size(mdev);
#line 1023
  if (tmp___39 != 0) {
#line 1024
    retcode = ERR_NOMEM;
#line 1025
    goto force_diskless_dec;
  } else {

  }
#line 1029
  tmp___42 = drbd_md_test_flag(nbc, 1);
#line 1029
  if (tmp___42 != 0) {
#line 1029
    tmp___43 = drbd_new_dev_size(mdev, nbc, 0);
#line 1029
    if ((unsigned long long )tmp___43 < nbc->md.la_size_sect) {
#line 1031
      tmp___40 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1031
      tmp___41 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1031
      printk("<4>%s %s: refusing to truncate a consistent device\n", tmp___41, tmp___40);
#line 1032
      retcode = ERR_DISK_TO_SMALL;
#line 1033
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1036
  tmp___44 = drbd_al_read_log(mdev, nbc);
#line 1036
  if (tmp___44 == 0) {
#line 1037
    retcode = ERR_IO_MD_DISK;
#line 1038
    goto force_diskless_dec;
  } else {

  }
#line 1043
  if ((unsigned int )*((unsigned char *)nbc + 388UL) != 0U) {
#line 1044
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1046
    clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1052
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1052
    tmp___45 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1052
    tmp___46 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1052
    printk("<3>%s %s: ASSERT( mdev->ldev == NULL ) in %s:%d\n", tmp___46, tmp___45,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           1052);
  } else {

  }
#line 1053
  mdev->ldev = nbc;
#line 1054
  mdev->resync = resync_lru;
#line 1055
  nbc = 0;
#line 1056
  resync_lru = 0;
#line 1058
  mdev->write_ordering = WO_bio_barrier;
#line 1059
  drbd_bump_write_ordering(mdev, WO_bio_barrier);
#line 1061
  tmp___47 = drbd_md_test_flag(mdev->ldev, 64);
#line 1061
  if (tmp___47 != 0) {
#line 1062
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1064
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1066
  tmp___48 = drbd_md_test_flag(mdev->ldev, 2);
#line 1066
  if (tmp___48 != 0) {
#line 1067
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1068
    cp_discovered = 1;
  } else {

  }
#line 1071
  mdev->send_cnt = 0U;
#line 1072
  mdev->recv_cnt = 0U;
#line 1073
  mdev->read_cnt = 0U;
#line 1074
  mdev->writ_cnt = 0U;
#line 1076
  drbd_setup_queue_param(mdev, 32768U);
#line 1092
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1093
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U) {
#line 1093
    tmp___49 = drbd_md_test_flag(mdev->ldev, 2);
#line 1093
    if (tmp___49 != 0) {
#line 1093
      tmp___50 = drbd_md_test_flag(mdev->ldev, 4);
#line 1093
      if (tmp___50 == 0) {
#line 1096
        set_bit(8U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1098
  dd = drbd_determin_dev_size(mdev, 0);
#line 1099
  if ((int )dd == -1) {
#line 1100
    retcode = ERR_NOMEM_BITMAP;
#line 1101
    goto force_diskless_dec;
  } else
#line 1102
  if ((int )dd == 2) {
#line 1103
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1105
  tmp___55 = drbd_md_test_flag(mdev->ldev, 8);
#line 1105
  if (tmp___55 != 0) {
#line 1106
    tmp___51 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1106
    tmp___52 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1106
    printk("<6>%s %s: Assuming that all blocks are out of sync (aka FullSync)\n",
           tmp___52, tmp___51);
#line 1108
    tmp___53 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching");
#line 1108
    if (tmp___53 != 0) {
#line 1109
      retcode = ERR_IO_MD_DISK;
#line 1110
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1113
    tmp___54 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching");
#line 1113
    if (tmp___54 < 0) {
#line 1114
      retcode = ERR_IO_MD_DISK;
#line 1115
      goto force_diskless_dec;
    } else {

    }
  }
#line 1119
  if (cp_discovered != 0) {
#line 1120
    drbd_al_apply_to_bm(mdev);
#line 1121
    drbd_al_to_on_disk_bm(mdev);
  } else {

  }
#line 1124
  spin_lock_irq(& mdev->req_lock);
#line 1125
  os = mdev->state;
#line 1126
  ns.i = os.i;
#line 1132
  tmp___57 = drbd_md_test_flag(mdev->ldev, 1);
#line 1132
  if (tmp___57 != 0) {
#line 1133
    tmp___56 = drbd_md_test_flag(mdev->ldev, 16);
#line 1133
    if (tmp___56 != 0) {
#line 1134
      ns.ldv_33380.disk = 7U;
    } else {
#line 1136
      ns.ldv_33380.disk = 5U;
    }
  } else {
#line 1138
    ns.ldv_33380.disk = 4U;
  }
#line 1141
  tmp___58 = drbd_md_test_flag(mdev->ldev, 32);
#line 1141
  if (tmp___58 != 0) {
#line 1142
    ns.ldv_33380.pdsk = 5U;
  } else {

  }
#line 1144
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1146
    ns.ldv_33380.disk = 8U;
  } else {

  }
#line 1155
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 160U) {
#line 1156
    mdev->new_state_tmp.i = ns.i;
#line 1157
    ns.i = os.i;
#line 1158
    ns.ldv_33380.disk = 3U;
  } else {

  }
#line 1161
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1162
  ns = mdev->state;
#line 1163
  spin_unlock_irq(& mdev->req_lock);
#line 1165
  if (rv <= 0) {
#line 1166
    goto force_diskless_dec;
  } else {

  }
#line 1168
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 1169
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1171
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1173
  drbd_md_mark_dirty(mdev);
#line 1174
  drbd_md_sync(mdev);
#line 1176
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1177
  put_ldev(mdev);
#line 1178
  reply->ret_code = (int )retcode;
#line 1179
  drbd_reconfig_done(mdev);
#line 1180
  return (0);
  force_diskless_dec: 
#line 1183
  put_ldev(mdev);
  force_diskless: 
#line 1185
  val___0.i = 0U;
#line 1185
  val___0.ldv_33380.disk = 0U;
#line 1185
  mask___0.i = 0U;
#line 1185
  mask___0.ldv_33380.disk = 15U;
#line 1185
  drbd_force_state(mdev, mask___0, val___0);
#line 1186
  drbd_md_sync(mdev);
  release_bdev2_fail: ;
#line 1188
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1189
    bd_release(nbc->md_bdev);
  } else {

  }
  release_bdev_fail: ;
#line 1191
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1192
    bd_release(nbc->backing_bdev);
  } else {

  }
  fail: ;
#line 1194
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1195
    if ((unsigned long )nbc->lo_file != (unsigned long )((struct file *)0)) {
#line 1196
      fput(nbc->lo_file);
    } else {

    }
#line 1197
    if ((unsigned long )nbc->md_file != (unsigned long )((struct file *)0)) {
#line 1198
      fput(nbc->md_file);
    } else {

    }
#line 1199
    kfree((void const   *)nbc);
  } else {

  }
#line 1201
  lc_destroy(resync_lru);
#line 1203
  reply->ret_code = (int )retcode;
#line 1204
  drbd_reconfig_done(mdev);
#line 1205
  return (0);
}
}
#line 1208 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1211
  val.i = 0U;
#line 1211
  val.ldv_33380.disk = 0U;
#line 1211
  mask.i = 0U;
#line 1211
  mask.ldv_33380.disk = 15U;
#line 1211
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1212
  return (0);
}
}
#line 1215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_codes retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  struct crypto_tfm *tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  unsigned int tmp___13 ;
  int tmp___14 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___15 ;

  {
#line 1220
  new_conf = 0;
#line 1221
  tfm = 0;
#line 1222
  integrity_w_tfm = 0;
#line 1223
  integrity_r_tfm = 0;
#line 1224
  new_tl_hash = 0;
#line 1225
  new_ee_hash = 0;
#line 1228
  int_dig_out = 0;
#line 1229
  int_dig_in = 0;
#line 1230
  int_dig_vv = 0;
#line 1233
  drbd_reconfig_start(mdev);
#line 1235
  if ((int )mdev->state.ldv_33380.conn > 0) {
#line 1236
    retcode = ERR_NET_CONFIGURED;
#line 1237
    goto fail;
  } else {

  }
#line 1241
  tmp = kmalloc___5(532UL, 208U);
#line 1241
  new_conf = (struct net_conf *)tmp;
#line 1242
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1243
    retcode = ERR_NOMEM;
#line 1244
    goto fail;
  } else {

  }
#line 1247
  memset((void *)new_conf, 0, 532UL);
#line 1248
  new_conf->timeout = 60;
#line 1249
  new_conf->try_connect_int = 10;
#line 1250
  new_conf->ping_int = 10;
#line 1251
  new_conf->max_epoch_size = 2048;
#line 1252
  new_conf->max_buffers = 2048;
#line 1253
  new_conf->unplug_watermark = 128;
#line 1254
  new_conf->sndbuf_size = 0;
#line 1255
  new_conf->rcvbuf_size = 0;
#line 1256
  new_conf->ko_count = 0;
#line 1257
  new_conf->after_sb_0p = 0;
#line 1258
  new_conf->after_sb_1p = 0;
#line 1259
  new_conf->after_sb_2p = 0;
#line 1260
  new_conf->want_lose = 0U;
#line 1261
  new_conf->two_primaries = 0U;
#line 1262
  new_conf->wire_protocol = 3;
#line 1263
  new_conf->ping_timeo = 5;
#line 1264
  new_conf->rr_conflict = 0;
#line 1266
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1266
  if (tmp___0 == 0) {
#line 1267
    retcode = ERR_MANDATORY_TAG;
#line 1268
    goto fail;
  } else {

  }
#line 1271
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && new_conf->wire_protocol != 3) {
#line 1273
    retcode = ERR_NOT_PROTO_C;
#line 1274
    goto fail;
  } else {

  }
#line 1277
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 528UL) != 0U) {
#line 1278
    retcode = ERR_DISCARD;
#line 1279
    goto fail;
  } else {

  }
#line 1282
  retcode = NO_ERROR;
#line 1284
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1285
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1286
  i = 0;
#line 1286
  goto ldv_44432;
  ldv_44431: 
#line 1287
  odev = minor_to_mdev((unsigned int )i);
#line 1288
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1289
    goto ldv_44430;
  } else {

  }
#line 1290
  tmp___3 = get_net_conf(odev);
#line 1290
  if (tmp___3 != 0) {
#line 1291
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1292
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1292
      tmp___1 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1292
      if (tmp___1 == 0) {
#line 1294
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1296
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1297
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1297
      tmp___2 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1297
      if (tmp___2 == 0) {
#line 1299
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1301
    put_net_conf(odev);
#line 1302
    if ((unsigned int )retcode != 101U) {
#line 1303
      goto fail;
    } else {

    }
  } else {

  }
  ldv_44430: 
#line 1286
  i = i + 1;
  ldv_44432: ;
#line 1286
  if ((unsigned int )i < minor_count) {
#line 1287
    goto ldv_44431;
  } else {

  }

#line 1307
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1308
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1310
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1311
    tmp___4 = IS_ERR((void const   *)tfm);
#line 1311
    if (tmp___4 != 0L) {
#line 1312
      tfm = 0;
#line 1313
      retcode = ERR_AUTH_ALG;
#line 1314
      goto fail;
    } else {

    }
#line 1317
    tmp___5 = crypto_hash_tfm(tfm);
#line 1317
    tmp___6 = drbd_crypto_is_hash(tmp___5);
#line 1317
    if (tmp___6 == 0) {
#line 1318
      retcode = ERR_AUTH_ALG_ND;
#line 1319
      goto fail;
    } else {

    }
  } else {

  }
#line 1323
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1324
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1325
    tmp___7 = IS_ERR((void const   *)integrity_w_tfm);
#line 1325
    if (tmp___7 != 0L) {
#line 1326
      integrity_w_tfm = 0;
#line 1327
      retcode = ERR_INTEGRITY_ALG;
#line 1328
      goto fail;
    } else {

    }
#line 1331
    tmp___8 = crypto_hash_tfm(integrity_w_tfm);
#line 1331
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1331
    if (tmp___9 == 0) {
#line 1332
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1333
      goto fail;
    } else {

    }
#line 1336
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1337
    tmp___10 = IS_ERR((void const   *)integrity_r_tfm);
#line 1337
    if (tmp___10 != 0L) {
#line 1338
      integrity_r_tfm = 0;
#line 1339
      retcode = ERR_INTEGRITY_ALG;
#line 1340
      goto fail;
    } else {

    }
  } else {

  }
#line 1344
  ns = new_conf->max_epoch_size / 8;
#line 1345
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1346
    tmp___11 = kzalloc___2((unsigned long )ns * 8UL, 208U);
#line 1346
    new_tl_hash = (struct hlist_head *)tmp___11;
#line 1347
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1348
      retcode = ERR_NOMEM;
#line 1349
      goto fail;
    } else {

    }
  } else {

  }
#line 1353
  ns = new_conf->max_buffers / 8;
#line 1354
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1355
    tmp___12 = kzalloc___2((unsigned long )ns * 8UL, 208U);
#line 1355
    new_ee_hash = (struct hlist_head *)tmp___12;
#line 1356
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1357
      retcode = ERR_NOMEM;
#line 1358
      goto fail;
    } else {

    }
  } else {

  }
#line 1362
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1364
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1365
    tmp___13 = crypto_hash_digestsize(integrity_w_tfm);
#line 1365
    i = (int )tmp___13;
#line 1366
    int_dig_out = kmalloc___5((size_t )i, 208U);
#line 1367
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1368
      retcode = ERR_NOMEM;
#line 1369
      goto fail;
    } else {

    }
#line 1371
    int_dig_in = kmalloc___5((size_t )i, 208U);
#line 1372
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1373
      retcode = ERR_NOMEM;
#line 1374
      goto fail;
    } else {

    }
#line 1376
    int_dig_vv = kmalloc___5((size_t )i, 208U);
#line 1377
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1378
      retcode = ERR_NOMEM;
#line 1379
      goto fail;
    } else {

    }
  } else {

  }
#line 1383
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1384
    tmp___14 = drbd_bm_init(mdev);
#line 1384
    if (tmp___14 != 0) {
#line 1385
      retcode = ERR_NOMEM;
#line 1386
      goto fail;
    } else {

    }
  } else {

  }
#line 1390
  spin_lock_irq(& mdev->req_lock);
#line 1391
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1392
    retcode = ERR_NET_CONFIGURED;
#line 1393
    spin_unlock_irq(& mdev->req_lock);
#line 1394
    goto fail;
  } else {

  }
#line 1396
  mdev->net_conf = new_conf;
#line 1398
  mdev->send_cnt = 0U;
#line 1399
  mdev->recv_cnt = 0U;
#line 1401
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1402
    kfree((void const   *)mdev->tl_hash);
#line 1403
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1404
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1407
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1408
    kfree((void const   *)mdev->ee_hash);
#line 1409
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1410
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1413
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1414
  mdev->cram_hmac_tfm = tfm;
#line 1416
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1417
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1419
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1420
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1422
  kfree((void const   *)mdev->int_dig_out);
#line 1423
  kfree((void const   *)mdev->int_dig_in);
#line 1424
  kfree((void const   *)mdev->int_dig_vv);
#line 1425
  mdev->int_dig_out = int_dig_out;
#line 1426
  mdev->int_dig_in = int_dig_in;
#line 1427
  mdev->int_dig_vv = int_dig_vv;
#line 1428
  spin_unlock_irq(& mdev->req_lock);
#line 1430
  val.i = 0U;
#line 1430
  val.ldv_33380.conn = 2U;
#line 1430
  mask.i = 0U;
#line 1430
  mask.ldv_33380.conn = 31U;
#line 1430
  tmp___15 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1430
  retcode = (enum drbd_ret_codes )tmp___15;
#line 1432
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1433
  reply->ret_code = (int )retcode;
#line 1434
  drbd_reconfig_done(mdev);
#line 1435
  return (0);
  fail: 
#line 1438
  kfree((void const   *)int_dig_out);
#line 1439
  kfree((void const   *)int_dig_in);
#line 1440
  kfree((void const   *)int_dig_vv);
#line 1441
  crypto_free_hash(tfm);
#line 1442
  crypto_free_hash(integrity_w_tfm);
#line 1443
  crypto_free_hash(integrity_r_tfm);
#line 1444
  kfree((void const   *)new_tl_hash);
#line 1445
  kfree((void const   *)new_ee_hash);
#line 1446
  kfree((void const   *)new_conf);
#line 1448
  reply->ret_code = (int )retcode;
#line 1449
  drbd_reconfig_done(mdev);
#line 1450
  return (0);
}
}
#line 1453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1458
  val.i = 0U;
#line 1458
  val.ldv_33380.conn = 1U;
#line 1458
  mask.i = 0U;
#line 1458
  mask.ldv_33380.conn = 31U;
#line 1458
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1460
  if (retcode == 2) {
#line 1461
    goto done;
  } else
#line 1462
  if (retcode == -9) {
#line 1463
    goto done;
  } else
#line 1464
  if (retcode == -7) {
#line 1467
    val___0.i = 0U;
#line 1467
    val___0.ldv_33380.conn = 1U;
#line 1467
    val___0.ldv_33380.pdsk = 5U;
#line 1466
    mask___0.i = 0U;
#line 1466
    mask___0.ldv_33380.conn = 31U;
#line 1467
    mask___0.ldv_33380.pdsk = 15U;
#line 1467
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1468
  if (retcode == -10) {
#line 1471
    val___1.i = 0U;
#line 1471
    val___1.ldv_33380.conn = 1U;
#line 1471
    val___1.ldv_33380.disk = 5U;
#line 1470
    mask___1.i = 0U;
#line 1470
    mask___1.ldv_33380.conn = 31U;
#line 1471
    mask___1.ldv_33380.disk = 15U;
#line 1471
    retcode = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1473
    if (retcode == -11 || retcode == -16) {
#line 1474
      val___2.i = 0U;
#line 1474
      val___2.ldv_33380.conn = 1U;
#line 1474
      mask___2.i = 0U;
#line 1474
      mask___2.ldv_33380.conn = 31U;
#line 1474
      drbd_force_state(mdev, mask___2, val___2);
#line 1475
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1479
  if (retcode <= 0) {
#line 1480
    goto fail;
  } else {

  }
#line 1482
  __ret = 0;
#line 1482
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 16U) {
#line 1482
    tmp = get_current();
#line 1482
    __wait.flags = 0U;
#line 1482
    __wait.private = (void *)tmp;
#line 1482
    __wait.func = & autoremove_wake_function;
#line 1482
    __wait.task_list.next = & __wait.task_list;
#line 1482
    __wait.task_list.prev = & __wait.task_list;
    ldv_44466: 
#line 1482
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1482
    if ((unsigned int )*((unsigned short *)mdev + 902UL) != 16U) {
#line 1482
      goto ldv_44464;
    } else {

    }
#line 1482
    tmp___0 = get_current();
#line 1482
    tmp___1 = signal_pending(tmp___0);
#line 1482
    if (tmp___1 == 0) {
#line 1482
      schedule();
#line 1482
      goto ldv_44465;
    } else {

    }
#line 1482
    __ret = -512;
#line 1482
    goto ldv_44464;
    ldv_44465: ;
#line 1482
    goto ldv_44466;
    ldv_44464: 
#line 1482
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1482
  if (__ret != 0) {
#line 1486
    retcode = 129;
#line 1487
    goto fail;
  } else {

  }
  done: 
#line 1491
  retcode = 101;
  fail: 
#line 1493
  drbd_md_sync(mdev);
#line 1494
  reply->ret_code = retcode;
#line 1495
  return (0);
}
}
#line 1498 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1502
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1502
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1502
  printk("<6>%s %s: Resync of new storage after online grow\n", tmp___0, tmp);
#line 1503
  if ((int )mdev->state.ldv_33380.role != (int )mdev->state.ldv_33380.peer) {
#line 1504
    iass = (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U;
  } else {
#line 1506
    iass = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1508
  if (iass != 0) {
#line 1509
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1511
    val.i = 0U;
#line 1511
    val.ldv_33380.conn = 15U;
#line 1511
    mask.i = 0U;
#line 1511
    mask.ldv_33380.conn = 31U;
#line 1511
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1513
  return;
}
}
#line 1514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  int ldsc ;
  enum determine_dev_size dd ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1518
  retcode = 101;
#line 1519
  ldsc = 0;
#line 1522
  memset((void *)(& rs), 0, 16UL);
#line 1523
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1523
  if (tmp == 0) {
#line 1524
    retcode = 126;
#line 1525
    goto fail;
  } else {

  }
#line 1528
  if ((int )mdev->state.ldv_33380.conn > 10) {
#line 1529
    retcode = 130;
#line 1530
    goto fail;
  } else {

  }
#line 1533
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 2U && (unsigned int )*((unsigned char *)mdev + 1804UL) == 8U) {
#line 1535
    retcode = 131;
#line 1536
    goto fail;
  } else {

  }
#line 1539
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1539
  if (tmp___0 == 0) {
#line 1540
    retcode = 138;
#line 1541
    goto fail;
  } else {

  }
#line 1544
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1544
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1545
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1546
    ldsc = 1;
  } else {

  }
#line 1549
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1550
  dd = drbd_determin_dev_size(mdev, (int )rs.resize_force);
#line 1551
  drbd_md_sync(mdev);
#line 1552
  put_ldev(mdev);
#line 1553
  if ((int )dd == -1) {
#line 1554
    retcode = 140;
#line 1555
    goto fail;
  } else {

  }
#line 1558
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 160U && ((int )dd != 0 || ldsc != 0)) {
#line 1559
    if ((int )dd == 2) {
#line 1560
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1562
    drbd_send_uuids(mdev);
#line 1563
    drbd_send_sizes(mdev, 1);
  } else {

  }
  fail: 
#line 1567
  reply->ret_code = retcode;
#line 1568
  return (0);
}
}
#line 1571 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int _b ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int _b___0 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int tmp___18 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  bool tmp___22 ;
  int tmp___23 ;

  {
#line 1574
  retcode = 101;
#line 1578
  verify_tfm = 0;
#line 1579
  csums_tfm = 0;
#line 1583
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1583
  if (tmp) {
#line 1583
    tmp___0 = 0;
  } else {
#line 1583
    tmp___0 = 1;
  }
#line 1583
  if (tmp___0) {
#line 1584
    retcode = 122;
#line 1585
    goto fail;
  } else {

  }
#line 1588
  if ((nlp->flags & 2) != 0) {
#line 1589
    memset((void *)(& sc), 0, 188UL);
#line 1590
    sc.rate = 250;
#line 1591
    sc.after = -1;
#line 1592
    sc.al_extents = 127;
  } else {
#line 1594
    __len = 188UL;
#line 1594
    if (__len > 63UL) {
#line 1594
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1594
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1596
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1596
  if (tmp___1 == 0) {
#line 1597
    retcode = 126;
#line 1598
    goto fail;
  } else {

  }
#line 1602
  rsr = (((unsigned int )*((unsigned short *)mdev + 902UL) == 256U || (unsigned int )*((unsigned short *)mdev + 902UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 902UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 902UL) == 336U;
#line 1607
  if (rsr != 0) {
#line 1607
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1607
    if (tmp___2 != 0) {
#line 1608
      retcode = 148;
#line 1609
      goto fail;
    } else {

    }
  } else {

  }
#line 1612
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1613
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1614
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1614
    if (tmp___3 != 0L) {
#line 1615
      csums_tfm = 0;
#line 1616
      retcode = 144;
#line 1617
      goto fail;
    } else {

    }
#line 1620
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1620
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1620
    if (tmp___5 == 0) {
#line 1621
      retcode = 145;
#line 1622
      goto fail;
    } else {

    }
  } else {

  }
#line 1627
  ovr = (unsigned int )*((unsigned short *)mdev + 902UL) == 288U || (unsigned int )*((unsigned short *)mdev + 902UL) == 304U;
#line 1629
  if (ovr != 0) {
#line 1630
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1630
    if (tmp___6 != 0) {
#line 1631
      retcode = 149;
#line 1632
      goto fail;
    } else {

    }
  } else {

  }
#line 1636
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1637
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1638
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1638
    if (tmp___7 != 0L) {
#line 1639
      verify_tfm = 0;
#line 1640
      retcode = 146;
#line 1641
      goto fail;
    } else {

    }
#line 1644
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1644
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1644
    if (tmp___9 == 0) {
#line 1645
      retcode = 147;
#line 1646
      goto fail;
    } else {

    }
  } else {

  }
#line 1651
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1652
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1654
    if (err != 0) {
#line 1655
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1655
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1655
      printk("<4>%s %s: __bitmap_parse() failed with %d\n", tmp___11, tmp___10, err);
#line 1656
      retcode = 143;
#line 1657
      goto fail;
    } else {

    }
  } else {

  }
#line 1661
  _b = sc.rate <= 0;
#line 1661
  if (_b != 0) {
#line 1661
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1661
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1661
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___13, tmp___12, "drbd_nl_syncer_conf",
           (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           1661);
  } else {

  }
#line 1661
  if (_b != 0) {
#line 1661
    sc.rate = 1;
  } else {

  }
#line 1662
  _b___0 = sc.al_extents <= 6;
#line 1662
  if (_b___0 != 0) {
#line 1662
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1662
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1662
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___15, tmp___14, "drbd_nl_syncer_conf",
           (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
           1662);
  } else {

  }
#line 1662
  if (_b___0 != 0) {
#line 1662
    sc.al_extents = 127;
  } else {

  }
#line 1664
  if (sc.al_extents > 3843) {
#line 1665
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1665
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1665
    printk("<3>%s %s: sc.al_extents > %d\n", tmp___17, tmp___16, 3843);
#line 1666
    sc.al_extents = 3843;
  } else {

  }
#line 1673
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1674
  if (retcode != 101) {
#line 1675
    goto fail;
  } else {

  }
#line 1679
  spin_lock(& mdev->peer_seq_lock);
#line 1680
  mdev->sync_conf = sc;
#line 1682
  if (rsr == 0) {
#line 1683
    crypto_free_hash(mdev->csums_tfm);
#line 1684
    mdev->csums_tfm = csums_tfm;
#line 1685
    csums_tfm = 0;
  } else {

  }
#line 1688
  if (ovr == 0) {
#line 1689
    crypto_free_hash(mdev->verify_tfm);
#line 1690
    mdev->verify_tfm = verify_tfm;
#line 1691
    verify_tfm = 0;
  } else {

  }
#line 1693
  spin_unlock(& mdev->peer_seq_lock);
#line 1695
  tmp___21 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1695
  if (tmp___21 != 0) {
#line 1696
    tmp___18 = lc_try_lock(mdev->act_log);
#line 1696
    if (tmp___18 != 0) {
#line 1696
      goto ldv_44508;
    } else {

    }
#line 1696
    tmp___19 = get_current();
#line 1696
    __wait.flags = 0U;
#line 1696
    __wait.private = (void *)tmp___19;
#line 1696
    __wait.func = & autoremove_wake_function;
#line 1696
    __wait.task_list.next = & __wait.task_list;
#line 1696
    __wait.task_list.prev = & __wait.task_list;
    ldv_44511: 
#line 1696
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1696
    tmp___20 = lc_try_lock(mdev->act_log);
#line 1696
    if (tmp___20 != 0) {
#line 1696
      goto ldv_44510;
    } else {

    }
#line 1696
    schedule();
#line 1696
    goto ldv_44511;
    ldv_44510: 
#line 1696
    finish_wait(& mdev->al_wait, & __wait);
    ldv_44508: 
#line 1697
    drbd_al_shrink(mdev);
#line 1698
    err = drbd_check_al_size(mdev);
#line 1699
    lc_unlock(mdev->act_log);
#line 1700
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1702
    put_ldev(mdev);
#line 1703
    drbd_md_sync(mdev);
#line 1705
    if (err != 0) {
#line 1706
      retcode = 122;
#line 1707
      goto fail;
    } else {

    }
  } else {

  }
#line 1711
  if ((int )mdev->state.ldv_33380.conn > 9) {
#line 1712
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1714
  tmp___22 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1714
  if (tmp___22) {
#line 1714
    tmp___23 = 0;
  } else {
#line 1714
    tmp___23 = 1;
  }
#line 1714
  if (tmp___23) {
#line 1715
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1716
    drbd_calc_cpu_mask(mdev);
#line 1717
    mdev->receiver.reset_cpu_mask = 1;
#line 1718
    mdev->asender.reset_cpu_mask = 1;
#line 1719
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1722
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1724
  free_cpumask_var(new_cpu_mask);
#line 1725
  crypto_free_hash(csums_tfm);
#line 1726
  crypto_free_hash(verify_tfm);
#line 1727
  reply->ret_code = retcode;
#line 1728
  return (0);
}
}
#line 1731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1736
  val.i = 0U;
#line 1736
  val.ldv_33380.conn = 12U;
#line 1736
  mask.i = 0U;
#line 1736
  mask.ldv_33380.conn = 31U;
#line 1736
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1738
  if (retcode <= 0 && retcode != -15) {
#line 1739
    val___0.i = 0U;
#line 1739
    val___0.ldv_33380.conn = 12U;
#line 1739
    mask___0.i = 0U;
#line 1739
    mask___0.ldv_33380.conn = 31U;
#line 1739
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1741
  goto ldv_44534;
  ldv_44533: 
#line 1742
  spin_lock_irq(& mdev->req_lock);
#line 1743
  if ((int )mdev->state.ldv_33380.conn <= 9) {
#line 1744
    __ns.i = mdev->state.i;
#line 1744
    __ns.ldv_33380.disk = 4U;
#line 1744
    retcode = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
  } else {

  }
#line 1745
  spin_unlock_irq(& mdev->req_lock);
#line 1747
  if (retcode != -15) {
#line 1748
    goto ldv_44528;
  } else {

  }
#line 1750
  val___1.i = 0U;
#line 1750
  val___1.ldv_33380.conn = 12U;
#line 1750
  mask___1.i = 0U;
#line 1750
  mask___1.ldv_33380.conn = 31U;
#line 1750
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_44534: ;
#line 1741
  if (retcode == -15) {
#line 1742
    goto ldv_44533;
  } else {

  }
  ldv_44528: 
#line 1753
  reply->ret_code = retcode;
#line 1754
  return (0);
}
}
#line 1757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1761
  val.i = 0U;
#line 1761
  val.ldv_33380.conn = 11U;
#line 1761
  mask.i = 0U;
#line 1761
  mask.ldv_33380.conn = 31U;
#line 1761
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1763
  return (0);
}
}
#line 1766 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1769
  retcode = 101;
#line 1771
  val.i = 0U;
#line 1771
  val.ldv_33380.user_isp = 1U;
#line 1771
  mask.i = 0U;
#line 1771
  mask.ldv_33380.user_isp = 1U;
#line 1771
  tmp = drbd_request_state(mdev, mask, val);
#line 1771
  if (tmp == 2) {
#line 1772
    retcode = 134;
  } else {

  }
#line 1774
  reply->ret_code = retcode;
#line 1775
  return (0);
}
}
#line 1778 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1781
  retcode = 101;
#line 1783
  val.i = 0U;
#line 1783
  val.ldv_33380.user_isp = 0U;
#line 1783
  mask.i = 0U;
#line 1783
  mask.ldv_33380.user_isp = 1U;
#line 1783
  tmp = drbd_request_state(mdev, mask, val);
#line 1783
  if (tmp == 2) {
#line 1784
    retcode = 135;
  } else {

  }
#line 1786
  reply->ret_code = retcode;
#line 1787
  return (0);
}
}
#line 1790 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1793
  val.i = 0U;
#line 1793
  val.ldv_33380.susp = 1U;
#line 1793
  mask.i = 0U;
#line 1793
  mask.ldv_33380.susp = 1U;
#line 1793
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1795
  return (0);
}
}
#line 1798 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1801
  val.i = 0U;
#line 1801
  val.ldv_33380.susp = 0U;
#line 1801
  mask.i = 0U;
#line 1801
  mask.ldv_33380.susp = 1U;
#line 1801
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1802
  return (0);
}
}
#line 1805 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1808
  val.i = 0U;
#line 1808
  val.ldv_33380.disk = 5U;
#line 1808
  mask.i = 0U;
#line 1808
  mask.ldv_33380.disk = 15U;
#line 1808
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1809
  return (0);
}
}
#line 1812 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 1817
  tl = (unsigned short *)(& reply->tag_list);
#line 1819
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1819
  if (tmp != 0) {
#line 1820
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 1821
    put_ldev(mdev);
  } else {

  }
#line 1824
  tmp___0 = get_net_conf(mdev);
#line 1824
  if (tmp___0 != 0) {
#line 1825
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 1826
    put_net_conf(mdev);
  } else {

  }
#line 1828
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 1830
  tmp___1 = tl;
#line 1830
  tl = tl + 1;
#line 1830
  __gu_p = (void *)tmp___1;
#line 1830
  switch (2UL) {
  case 1UL: 
#line 1830
  *((u8 *)__gu_p) = 0U;
#line 1830
  goto ldv_44599;
  case 2UL: 
#line 1830
  put_unaligned_le16(0, __gu_p);
#line 1830
  goto ldv_44599;
  case 4UL: 
#line 1830
  put_unaligned_le32(0U, __gu_p);
#line 1830
  goto ldv_44599;
  case 8UL: 
#line 1830
  put_unaligned_le64(0ULL, __gu_p);
#line 1830
  goto ldv_44599;
  default: 
#line 1830
  __bad_unaligned_access_size();
#line 1830
  goto ldv_44599;
  }
  ldv_44599: ;
#line 1832
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1835 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1838
  tl = (unsigned short *)(& reply->tag_list);
#line 1839
  s = mdev->state;
#line 1843
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 1846
  if ((int )s.ldv_33380.conn > 15 && (int )s.ldv_33380.conn <= 21) {
#line 1847
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1847
    if (tmp != 0) {
#line 1848
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 1849
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 1850
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1853
  tmp___0 = tl;
#line 1853
  tl = tl + 1;
#line 1853
  __gu_p = (void *)tmp___0;
#line 1853
  switch (2UL) {
  case 1UL: 
#line 1853
  *((u8 *)__gu_p) = 0U;
#line 1853
  goto ldv_44615;
  case 2UL: 
#line 1853
  put_unaligned_le16(0, __gu_p);
#line 1853
  goto ldv_44615;
  case 4UL: 
#line 1853
  put_unaligned_le32(0U, __gu_p);
#line 1853
  goto ldv_44615;
  case 8UL: 
#line 1853
  put_unaligned_le64(0ULL, __gu_p);
#line 1853
  goto ldv_44615;
  default: 
#line 1853
  __bad_unaligned_access_size();
#line 1853
  goto ldv_44615;
  }
  ldv_44615: ;
#line 1855
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1858 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1863
  tl = (unsigned short *)(& reply->tag_list);
#line 1865
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1865
  if (tmp != 0) {
#line 1866
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 1867
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 1868
    put_ldev(mdev);
  } else {

  }
#line 1870
  tmp___0 = tl;
#line 1870
  tl = tl + 1;
#line 1870
  __gu_p = (void *)tmp___0;
#line 1870
  switch (2UL) {
  case 1UL: 
#line 1870
  *((u8 *)__gu_p) = 0U;
#line 1870
  goto ldv_44628;
  case 2UL: 
#line 1870
  put_unaligned_le16(0, __gu_p);
#line 1870
  goto ldv_44628;
  case 4UL: 
#line 1870
  put_unaligned_le32(0U, __gu_p);
#line 1870
  goto ldv_44628;
  case 8UL: 
#line 1870
  put_unaligned_le64(0ULL, __gu_p);
#line 1870
  goto ldv_44628;
  default: 
#line 1870
  __bad_unaligned_access_size();
#line 1870
  goto ldv_44628;
  }
  ldv_44628: ;
#line 1872
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1881 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1887
  tl = (unsigned short *)(& reply->tag_list);
#line 1889
  if (*((unsigned int *)mdev + 451UL) != 40960U) {
#line 1889
    tmp = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 1889
    rv = tmp != 0;
  } else {
#line 1889
    rv = 2;
  }
#line 1892
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 1893
  tmp___0 = tl;
#line 1893
  tl = tl + 1;
#line 1893
  __gu_p = (void *)tmp___0;
#line 1893
  switch (2UL) {
  case 1UL: 
#line 1893
  *((u8 *)__gu_p) = 0U;
#line 1893
  goto ldv_44642;
  case 2UL: 
#line 1893
  put_unaligned_le16(0, __gu_p);
#line 1893
  goto ldv_44642;
  case 4UL: 
#line 1893
  put_unaligned_le32(0U, __gu_p);
#line 1893
  goto ldv_44642;
  case 8UL: 
#line 1893
  put_unaligned_le64(0ULL, __gu_p);
#line 1893
  goto ldv_44642;
  default: 
#line 1893
  __bad_unaligned_access_size();
#line 1893
  goto ldv_44642;
  }
  ldv_44642: ;
#line 1895
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1898 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1902
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 1905
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1905
  if (tmp == 0) {
#line 1906
    reply->ret_code = 126;
#line 1907
    return (0);
  } else {

  }
#line 1910
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 1911
  val.i = 0U;
#line 1911
  val.ldv_33380.conn = 18U;
#line 1911
  mask.i = 0U;
#line 1911
  mask.ldv_33380.conn = 31U;
#line 1911
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1912
  return (0);
}
}
#line 1916 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  union drbd_state __ns ;

  {
#line 1919
  retcode = 101;
#line 1920
  skip_initial_sync = 0;
#line 1925
  memset((void *)(& args), 0, 4UL);
#line 1926
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1926
  if (tmp == 0) {
#line 1927
    reply->ret_code = 126;
#line 1928
    return (0);
  } else {

  }
#line 1931
  ldv_mutex_lock_136(& mdev->state_mutex);
#line 1933
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1933
  if (tmp___0 == 0) {
#line 1934
    retcode = 138;
#line 1935
    goto out;
  } else {

  }
#line 1939
  if ((((unsigned int )*((unsigned short *)mdev + 902UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1941
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1941
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1941
    printk("<6>%s %s: Preparing to skip initial sync\n", tmp___2, tmp___1);
#line 1942
    skip_initial_sync = 1;
  } else
#line 1943
  if ((unsigned int )*((unsigned short *)mdev + 902UL) != 0U) {
#line 1944
    retcode = 151;
#line 1945
    goto out_dec;
  } else {

  }
#line 1948
  drbd_uuid_set(mdev, 1, 0ULL);
#line 1949
  drbd_uuid_new_current(mdev);
#line 1951
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1952
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid");
#line 1953
    if (err != 0) {
#line 1954
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1954
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1954
      printk("<3>%s %s: Writing bitmap failed with %d\n", tmp___4, tmp___3, err);
#line 1955
      retcode = 118;
    } else {

    }
#line 1957
    if (skip_initial_sync != 0) {
#line 1958
      drbd_send_uuids_skip_initial_sync(mdev);
#line 1959
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 1960
      spin_lock_irq(& mdev->req_lock);
#line 1961
      __ns.i = mdev->state.i;
#line 1961
      __ns.ldv_33380.disk = 8U;
#line 1961
      __ns.ldv_33380.pdsk = 8U;
#line 1961
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1963
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1967
  drbd_md_sync(mdev);
  out_dec: 
#line 1969
  put_ldev(mdev);
  out: 
#line 1971
  ldv_mutex_unlock_137(& mdev->state_mutex);
#line 1973
  reply->ret_code = retcode;
#line 1974
  return (0);
}
}
#line 1977 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(struct drbd_nl_cfg_req *nlp ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 1981
  if (nlp->drbd_minor >= minor_count) {
#line 1982
    return (0);
  } else {

  }
#line 1984
  mdev = minor_to_mdev(nlp->drbd_minor);
#line 1986
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && nlp->flags & 1) {
#line 1987
    disk = 0;
#line 1988
    mdev = drbd_new_device(nlp->drbd_minor);
#line 1990
    spin_lock_irq(& drbd_pp_lock);
#line 1991
    if ((unsigned long )*(minor_table + (unsigned long )nlp->drbd_minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 1992
      *(minor_table + (unsigned long )nlp->drbd_minor) = mdev;
#line 1993
      disk = mdev->vdisk;
#line 1994
      mdev = 0;
    } else {

    }
#line 1996
    spin_unlock_irq(& drbd_pp_lock);
#line 1998
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 2001
      add_disk(disk);
    } else {
#line 2003
      drbd_free_mdev(mdev);
    }
#line 2005
    mdev = minor_to_mdev(nlp->drbd_minor);
  } else {

  }
#line 2008
  return (mdev);
}
}
#line 2018 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2018
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1240}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2049 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  void *tmp___0 ;

  {
#line 2051
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2057
  reply_size = 34;
#line 2061
  tmp = try_module_get___0(& __this_module);
#line 2061
  if (tmp == 0) {
#line 2062
    printk("<3>drbd: try_module_get() failed!\n");
#line 2063
    return;
  } else {

  }
#line 2066
  if ((nsp->eff_cap.cap[0] & 2097152U) == 0U) {
#line 2067
    retcode = 152;
#line 2068
    goto fail;
  } else {

  }
#line 2071
  mdev = ensure_mdev(nlp);
#line 2072
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2073
    retcode = 127;
#line 2074
    goto fail;
  } else {

  }
#line 2077
  if (nlp->packet_type > 26) {
#line 2078
    retcode = 137;
#line 2079
    goto fail;
  } else {

  }
#line 2082
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2085
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2086
    retcode = 137;
#line 2087
    goto fail;
  } else {

  }
#line 2090
  reply_size = cm->reply_body_size + reply_size;
#line 2093
  tmp___0 = kmalloc___5((size_t )reply_size, 208U);
#line 2093
  cn_reply = (struct cn_msg *)tmp___0;
#line 2094
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2095
    retcode = 122;
#line 2096
    goto fail;
  } else {

  }
#line 2098
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2100
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2102
  reply->minor = nlp->drbd_minor;
#line 2103
  reply->ret_code = 101;
#line 2106
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2108
  cn_reply->id = req->id;
#line 2109
  cn_reply->seq = req->seq;
#line 2110
  cn_reply->ack = req->ack + 1U;
#line 2111
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2112
  cn_reply->flags = 0U;
#line 2114
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2115
  if (rr != 0 && rr != -3) {
#line 2116
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2118
  kfree((void const   *)cn_reply);
#line 2119
  module_put(& __this_module);
#line 2120
  return;
  fail: 
#line 2122
  drbd_nl_send_reply(req, retcode);
#line 2123
  module_put(& __this_module);
#line 2124
  return;
}
}
#line 2126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2129 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2132
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2133
  len = (int )len < (int )l ? len : l;
#line 2134
  tmp = tl;
#line 2134
  tl = tl + 1;
#line 2134
  __gu_p = (void *)tmp;
#line 2134
  switch (2UL) {
  case 1UL: 
#line 2134
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2134
  goto ldv_44706;
  case 2UL: 
#line 2134
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2134
  goto ldv_44706;
  case 4UL: 
#line 2134
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2134
  goto ldv_44706;
  case 8UL: 
#line 2134
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2134
  goto ldv_44706;
  default: 
#line 2134
  __bad_unaligned_access_size();
#line 2134
  goto ldv_44706;
  }
  ldv_44706: 
#line 2135
  tmp___0 = tl;
#line 2135
  tl = tl + 1;
#line 2135
  __gu_p___0 = (void *)tmp___0;
#line 2135
  switch (2UL) {
  case 1UL: 
#line 2135
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2135
  goto ldv_44713;
  case 2UL: 
#line 2135
  put_unaligned_le16((int )len, __gu_p___0);
#line 2135
  goto ldv_44713;
  case 4UL: 
#line 2135
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2135
  goto ldv_44713;
  case 8UL: 
#line 2135
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2135
  goto ldv_44713;
  default: 
#line 2135
  __bad_unaligned_access_size();
#line 2135
  goto ldv_44713;
  }
  ldv_44713: 
#line 2136
  __len = (size_t )len;
#line 2136
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2137
  tl = tl + (unsigned long )len;
#line 2138
  if (nul_terminated != 0) {
#line 2139
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2140
  return (tl);
}
}
#line 2144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2146
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2146
  return (tmp);
}
}
#line 2150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2152
  tmp = strlen(str);
#line 2152
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2152
  return (tmp___0);
}
}
#line 2156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2158
  tmp = tl;
#line 2158
  tl = tl + 1;
#line 2158
  __gu_p = (void *)tmp;
#line 2158
  switch (2UL) {
  case 1UL: 
#line 2158
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2158
  goto ldv_44739;
  case 2UL: 
#line 2158
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2158
  goto ldv_44739;
  case 4UL: 
#line 2158
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2158
  goto ldv_44739;
  case 8UL: 
#line 2158
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2158
  goto ldv_44739;
  default: 
#line 2158
  __bad_unaligned_access_size();
#line 2158
  goto ldv_44739;
  }
  ldv_44739: ;
#line 2159
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2161
  tmp___0 = tl;
#line 2161
  tl = tl + 1;
#line 2161
  __gu_p___0 = (void *)tmp___0;
#line 2161
  switch (2UL) {
  case 1UL: 
#line 2161
  *((u8 *)__gu_p___0) = 4U;
#line 2161
  goto ldv_44747;
  case 2UL: 
#line 2161
  put_unaligned_le16(4, __gu_p___0);
#line 2161
  goto ldv_44747;
  case 4UL: 
#line 2161
  put_unaligned_le32(4U, __gu_p___0);
#line 2161
  goto ldv_44747;
  case 8UL: 
#line 2161
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2161
  goto ldv_44747;
  default: 
#line 2161
  __bad_unaligned_access_size();
#line 2161
  goto ldv_44747;
  }
  ldv_44747: 
#line 2162
  __gu_p___1 = (void *)tl;
#line 2162
  switch (4UL) {
  case 1UL: 
#line 2162
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2162
  goto ldv_44754;
  case 2UL: 
#line 2162
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2162
  goto ldv_44754;
  case 4UL: 
#line 2162
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2162
  goto ldv_44754;
  case 8UL: 
#line 2162
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2162
  goto ldv_44754;
  default: 
#line 2162
  __bad_unaligned_access_size();
#line 2162
  goto ldv_44754;
  }
  ldv_44754: 
#line 2163
  tl = tl + 4U;
#line 2164
  goto ldv_44759;
  case 16384U: 
#line 2166
  tmp___1 = tl;
#line 2166
  tl = tl + 1;
#line 2166
  __gu_p___2 = (void *)tmp___1;
#line 2166
  switch (2UL) {
  case 1UL: 
#line 2166
  *((u8 *)__gu_p___2) = 8U;
#line 2166
  goto ldv_44763;
  case 2UL: 
#line 2166
  put_unaligned_le16(8, __gu_p___2);
#line 2166
  goto ldv_44763;
  case 4UL: 
#line 2166
  put_unaligned_le32(8U, __gu_p___2);
#line 2166
  goto ldv_44763;
  case 8UL: 
#line 2166
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2166
  goto ldv_44763;
  default: 
#line 2166
  __bad_unaligned_access_size();
#line 2166
  goto ldv_44763;
  }
  ldv_44763: 
#line 2167
  __gu_p___3 = (void *)tl;
#line 2167
  switch (8UL) {
  case 1UL: 
#line 2167
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2167
  goto ldv_44770;
  case 2UL: 
#line 2167
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2167
  goto ldv_44770;
  case 4UL: 
#line 2167
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2167
  goto ldv_44770;
  case 8UL: 
#line 2167
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2167
  goto ldv_44770;
  default: 
#line 2167
  __bad_unaligned_access_size();
#line 2167
  goto ldv_44770;
  }
  ldv_44770: 
#line 2168
  tl = tl + 8U;
#line 2169
  goto ldv_44759;
  default: ;
  }
  ldv_44759: ;
#line 2174
  return (tl);
}
}
#line 2177 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2183
  cn_reply = (struct cn_msg *)(& buffer);
#line 2184
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2186
  tl = (unsigned short *)(& reply->tag_list);
#line 2190
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2192
  tmp = tl;
#line 2192
  tl = tl + 1;
#line 2192
  __gu_p = (void *)tmp;
#line 2192
  switch (2UL) {
  case 1UL: 
#line 2192
  *((u8 *)__gu_p) = 0U;
#line 2192
  goto ldv_44786;
  case 2UL: 
#line 2192
  put_unaligned_le16(0, __gu_p);
#line 2192
  goto ldv_44786;
  case 4UL: 
#line 2192
  put_unaligned_le32(0U, __gu_p);
#line 2192
  goto ldv_44786;
  case 8UL: 
#line 2192
  put_unaligned_le64(0ULL, __gu_p);
#line 2192
  goto ldv_44786;
  default: 
#line 2192
  __bad_unaligned_access_size();
#line 2192
  goto ldv_44786;
  }
  ldv_44786: 
#line 2194
  cn_reply->id.idx = 8U;
#line 2195
  cn_reply->id.val = 1U;
#line 2197
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2197
  cn_reply->seq = (__u32 )tmp___0;
#line 2198
  cn_reply->ack = 0U;
#line 2199
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2201
  cn_reply->flags = 0U;
#line 2203
  reply->packet_type = 17;
#line 2204
  reply->minor = mdev_to_minor(mdev);
#line 2205
  reply->ret_code = 101;
#line 2207
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2208
  return;
}
}
#line 2210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2216
  cn_reply = (struct cn_msg *)(& buffer);
#line 2217
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2219
  tl = (unsigned short *)(& reply->tag_list);
#line 2223
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2224
  tmp = tl;
#line 2224
  tl = tl + 1;
#line 2224
  __gu_p = (void *)tmp;
#line 2224
  switch (2UL) {
  case 1UL: 
#line 2224
  *((u8 *)__gu_p) = 0U;
#line 2224
  goto ldv_44801;
  case 2UL: 
#line 2224
  put_unaligned_le16(0, __gu_p);
#line 2224
  goto ldv_44801;
  case 4UL: 
#line 2224
  put_unaligned_le32(0U, __gu_p);
#line 2224
  goto ldv_44801;
  case 8UL: 
#line 2224
  put_unaligned_le64(0ULL, __gu_p);
#line 2224
  goto ldv_44801;
  default: 
#line 2224
  __bad_unaligned_access_size();
#line 2224
  goto ldv_44801;
  }
  ldv_44801: 
#line 2226
  cn_reply->id.idx = 8U;
#line 2227
  cn_reply->id.val = 1U;
#line 2229
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2229
  cn_reply->seq = (__u32 )tmp___0;
#line 2230
  cn_reply->ack = 0U;
#line 2231
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2233
  cn_reply->flags = 0U;
#line 2235
  reply->packet_type = 20;
#line 2236
  reply->minor = mdev_to_minor(mdev);
#line 2237
  reply->ret_code = 101;
#line 2239
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2240
  return;
}
}
#line 2242 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct bio_vec *bvec ;
  unsigned short *tl ;
  int i ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  void *__gu_p ;
  unsigned short *tmp___2 ;
  void *__gu_p___0 ;
  unsigned short *tmp___3 ;
  void *d ;
  void *tmp___4 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___5 ;
  int tmp___6 ;

  {
#line 2253
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2254
    return;
  } else {

  }
#line 2255
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2256
    return;
  } else {

  }
#line 2264
  tmp = kmalloc___5(33026UL, 16U);
#line 2264
  cn_reply = (struct cn_msg *)tmp;
#line 2271
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2272
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2272
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2272
    printk("<3>%s %s: could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
           tmp___1, tmp___0, (unsigned long long )e->sector, e->size);
#line 2274
    return;
  } else {

  }
#line 2277
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2278
  tl = (unsigned short *)(& reply->tag_list);
#line 2280
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2281
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2282
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2283
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2284
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->block_id));
#line 2286
  tmp___2 = tl;
#line 2286
  tl = tl + 1;
#line 2286
  __gu_p = (void *)tmp___2;
#line 2286
  switch (2UL) {
  case 1UL: 
#line 2286
  *((u8 *)__gu_p) = 50U;
#line 2286
  goto ldv_44821;
  case 2UL: 
#line 2286
  put_unaligned_le16(49202, __gu_p);
#line 2286
  goto ldv_44821;
  case 4UL: 
#line 2286
  put_unaligned_le32(49202U, __gu_p);
#line 2286
  goto ldv_44821;
  case 8UL: 
#line 2286
  put_unaligned_le64(49202ULL, __gu_p);
#line 2286
  goto ldv_44821;
  default: 
#line 2286
  __bad_unaligned_access_size();
#line 2286
  goto ldv_44821;
  }
  ldv_44821: 
#line 2287
  tmp___3 = tl;
#line 2287
  tl = tl + 1;
#line 2287
  __gu_p___0 = (void *)tmp___3;
#line 2287
  switch (2UL) {
  case 1UL: 
#line 2287
  *((u8 *)__gu_p___0) = (unsigned char )e->size;
#line 2287
  goto ldv_44828;
  case 2UL: 
#line 2287
  put_unaligned_le16((int )((unsigned short )e->size), __gu_p___0);
#line 2287
  goto ldv_44828;
  case 4UL: 
#line 2287
  put_unaligned_le32(e->size, __gu_p___0);
#line 2287
  goto ldv_44828;
  case 8UL: 
#line 2287
  put_unaligned_le64((unsigned long long )e->size, __gu_p___0);
#line 2287
  goto ldv_44828;
  default: 
#line 2287
  __bad_unaligned_access_size();
#line 2287
  goto ldv_44828;
  }
  ldv_44828: 
#line 2289
  bvec = (e->private_bio)->bi_io_vec;
#line 2289
  i = 0;
#line 2289
  goto ldv_44838;
  ldv_44837: 
#line 2290
  tmp___4 = kmap(bvec->bv_page);
#line 2290
  d = tmp___4;
#line 2291
  __len = (size_t )bvec->bv_len;
#line 2291
  __ret = __builtin_memcpy((void *)tl, (void const   *)d + (unsigned long )bvec->bv_offset,
                           __len);
#line 2292
  kunmap(bvec->bv_page);
#line 2293
  tl = tl + (unsigned long )bvec->bv_len;
#line 2289
  bvec = bvec + 1;
#line 2289
  i = i + 1;
  ldv_44838: ;
#line 2289
  if ((int )(e->private_bio)->bi_vcnt > i) {
#line 2290
    goto ldv_44837;
  } else {

  }
#line 2295
  tmp___5 = tl;
#line 2295
  tl = tl + 1;
#line 2295
  __gu_p___1 = (void *)tmp___5;
#line 2295
  switch (2UL) {
  case 1UL: 
#line 2295
  *((u8 *)__gu_p___1) = 0U;
#line 2295
  goto ldv_44842;
  case 2UL: 
#line 2295
  put_unaligned_le16(0, __gu_p___1);
#line 2295
  goto ldv_44842;
  case 4UL: 
#line 2295
  put_unaligned_le32(0U, __gu_p___1);
#line 2295
  goto ldv_44842;
  case 8UL: 
#line 2295
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2295
  goto ldv_44842;
  default: 
#line 2295
  __bad_unaligned_access_size();
#line 2295
  goto ldv_44842;
  }
  ldv_44842: 
#line 2297
  cn_reply->id.idx = 8U;
#line 2298
  cn_reply->id.val = 1U;
#line 2300
  tmp___6 = atomic_add_return(1, & drbd_nl_seq);
#line 2300
  cn_reply->seq = (__u32 )tmp___6;
#line 2301
  cn_reply->ack = 0U;
#line 2302
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2304
  cn_reply->flags = 0U;
#line 2306
  reply->packet_type = 24;
#line 2307
  reply->minor = mdev_to_minor(mdev);
#line 2308
  reply->ret_code = 101;
#line 2310
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2311
  kfree((void const   *)cn_reply);
#line 2312
  return;
}
}
#line 2314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2320
  cn_reply = (struct cn_msg *)(& buffer);
#line 2321
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2323
  tl = (unsigned short *)(& reply->tag_list);
#line 2328
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2328
  if (tmp == 0) {
#line 2329
    return;
  } else {

  }
#line 2330
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2331
  put_ldev(mdev);
#line 2333
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2334
  tmp___0 = tl;
#line 2334
  tl = tl + 1;
#line 2334
  __gu_p = (void *)tmp___0;
#line 2334
  switch (2UL) {
  case 1UL: 
#line 2334
  *((u8 *)__gu_p) = 0U;
#line 2334
  goto ldv_44858;
  case 2UL: 
#line 2334
  put_unaligned_le16(0, __gu_p);
#line 2334
  goto ldv_44858;
  case 4UL: 
#line 2334
  put_unaligned_le32(0U, __gu_p);
#line 2334
  goto ldv_44858;
  case 8UL: 
#line 2334
  put_unaligned_le64(0ULL, __gu_p);
#line 2334
  goto ldv_44858;
  default: 
#line 2334
  __bad_unaligned_access_size();
#line 2334
  goto ldv_44858;
  }
  ldv_44858: 
#line 2336
  cn_reply->id.idx = 8U;
#line 2337
  cn_reply->id.val = 1U;
#line 2339
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2339
  cn_reply->seq = (__u32 )tmp___1;
#line 2340
  cn_reply->ack = 0U;
#line 2341
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2343
  cn_reply->flags = 0U;
#line 2345
  reply->packet_type = 23;
#line 2346
  reply->minor = mdev_to_minor(mdev);
#line 2347
  reply->ret_code = 101;
#line 2349
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2350
  return;
}
}
#line 2352 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2355
  try = 10;
#line 2357
  cn_id_drbd.val = 1U;
  ldv_44870: 
#line 2359
  cn_id_drbd.idx = cn_idx;
#line 2360
  err = cn_add_callback(& cn_id_drbd, (char *)"cn_drbd", & drbd_connector_callback);
#line 2361
  if (err == 0) {
#line 2362
    goto ldv_44869;
  } else {

  }
#line 2363
  cn_idx = cn_idx + 6977U;
#line 2364
  tmp = try;
#line 2364
  try = try - 1;
#line 2364
  if (tmp != 0) {
#line 2365
    goto ldv_44870;
  } else {

  }
  ldv_44869: ;
#line 2366
  if (err != 0) {
#line 2367
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2368
    return (err);
  } else {

  }
#line 2371
  return (0);
}
}
#line 2374 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2378
  cn_id_drbd.idx = cn_idx;
#line 2379
  cn_id_drbd.val = 1U;
#line 2381
  cn_del_callback(& cn_id_drbd);
#line 2382
  return;
}
}
#line 2384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2387
  cn_reply = (struct cn_msg *)(& buffer);
#line 2388
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2392
  cn_reply->id = req->id;
#line 2394
  cn_reply->seq = req->seq;
#line 2395
  cn_reply->ack = req->ack + 1U;
#line 2396
  cn_reply->len = 12U;
#line 2397
  cn_reply->flags = 0U;
#line 2399
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2400
  reply->ret_code = ret_code;
#line 2402
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2403
  if (rr != 0 && rr != -3) {
#line 2404
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2405
  return;
}
}
#line 2407 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_131(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2412
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2414
  mutex_lock(ldv_func_arg1);
#line 2415
  return;
}
}
#line 2417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_132(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2422
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2424
  mutex_unlock(ldv_func_arg1);
#line 2425
  return;
}
}
#line 2427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_133(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2432
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2434
  mutex_unlock(ldv_func_arg1);
#line 2435
  return;
}
}
#line 2437 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_134(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2442
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2444
  mutex_lock(ldv_func_arg1);
#line 2445
  return;
}
}
#line 2447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_135(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2452
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2454
  mutex_unlock(ldv_func_arg1);
#line 2455
  return;
}
}
#line 2457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_136(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2462
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2464
  mutex_lock(ldv_func_arg1);
#line 2465
  return;
}
}
#line 2467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_137(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2472
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2474
  mutex_unlock(ldv_func_arg1);
#line 2475
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_bm_change_of_drbd_bitmap  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_bm_change_of_drbd_bitmap(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_bm_change_of_drbd_bitmap == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_md_io_mutex_of_drbd_conf  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_md_io_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_md_io_mutex_of_drbd_conf = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_md_io_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_drbd_socket  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_mutex_of_drbd_socket = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_drbd_socket(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_mutex_of_drbd_socket == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_mutex_of_drbd_socket == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 462
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_state_mutex_of_drbd_conf  ;
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 472
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 472
    ldv_error();
  }
#line 475
  nondetermined = ldv_undef_int();
#line 478
  if (nondetermined) {
#line 481
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 483
    return (0);
  } else {
#line 488
    return (-4);
  }
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 498
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 498
    ldv_error();
  }
#line 501
  nondetermined = ldv_undef_int();
#line 504
  if (nondetermined) {
#line 507
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 509
    return (0);
  } else {
#line 514
    return (-4);
  }
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 522
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 522
    ldv_error();
  }
#line 524
  ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 525
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 533
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 533
    ldv_error();
  }
#line 536
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 539
  if (is_mutex_held_by_another_thread) {
#line 542
    return (0);
  } else {
#line 547
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 549
    return (1);
  }
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_state_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 559
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 559
    ldv_error();
  }
#line 562
  atomic_value_after_dec = ldv_undef_int();
#line 565
  if (atomic_value_after_dec == 0) {
#line 568
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 570
    return (1);
  } else {

  }
#line 574
  return (0);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 583
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {
#line 586
    nondetermined = ldv_undef_int();
#line 589
    if (nondetermined) {
#line 592
      return (0);
    } else {
#line 597
      return (1);
    }
  } else {
#line 603
    return (1);
  }
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 611
  if (ldv_mutex_state_mutex_of_drbd_conf == 2) {

  } else {
#line 611
    ldv_error();
  }
#line 613
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 614
  return;
}
}
#line 618 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 621
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 623
  ldv_mutex_md_io_mutex_of_drbd_conf = 1;
#line 625
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 627
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 628
  return;
}
}
#line 631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 634
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 634
    ldv_error();
  }
#line 636
  if (ldv_mutex_md_io_mutex_of_drbd_conf == 1) {

  } else {
#line 636
    ldv_error();
  }
#line 638
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 638
    ldv_error();
  }
#line 640
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 640
    ldv_error();
  }
#line 641
  return;
}
}
