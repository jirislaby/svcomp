/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 26 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 27 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 28 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 29 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 34 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 37 "include/linux/types.h"
typedef _Bool bool;
#line 39 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 40 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 53 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 62 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 67 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 77 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 110 "include/linux/types.h"
typedef __s32 int32_t;
#line 116 "include/linux/types.h"
typedef __u32 uint32_t;
#line 149 "include/linux/types.h"
typedef unsigned long sector_t;
#line 150 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 179 "include/linux/types.h"
typedef __u16 __le16;
#line 180 "include/linux/types.h"
typedef __u16 __be16;
#line 182 "include/linux/types.h"
typedef __u32 __be32;
#line 187 "include/linux/types.h"
typedef __u32 __wsum;
#line 195 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 196 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 208 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 208 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 213 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 213 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 214 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 219
struct hlist_node;
#line 219 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 223 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 234
struct task_struct;
#line 235
struct mm_struct;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1205_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1205_8 ldv_1205 ;
};
#line 22 "include/linux/bitops.h"
struct module;
#line 45 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 132 "include/linux/kernel.h"
struct completion;
#line 239
struct pid;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 277
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2091_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2106_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2107_14 {
   struct __anonstruct_ldv_2091_15 ldv_2091 ;
   struct __anonstruct_ldv_2106_16 ldv_2106 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2107_14 ldv_2107 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_KDB = 19,
    KM_TYPE_NR = 20
} ;
#line 122
struct thread_struct;
#line 124
struct cpumask;
#line 314 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 607 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 271 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/msr.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4690_20 {
   u64 rip ;
   u64 rdp ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4696_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4697_19 {
   struct __anonstruct_ldv_4690_20 ldv_4690 ;
   struct __anonstruct_ldv_4696_21 ldv_4696 ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4706_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4697_19 ldv_4697 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4706_22 ldv_4706 ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 360 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 366 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 372 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 380 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   union thread_xstate *state ;
};
#line 426
struct kmem_cache;
#line 427
struct perf_event;
#line 428 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_ldv_5170_26 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_28 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_29 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_5193_25 {
   struct __anonstruct_ldv_5170_26 ldv_5170 ;
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_29 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5193_25 ldv_5193 ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "include/linux/bottom_half.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_30 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_30 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 187 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 554 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5779_32 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5780_31 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5779_32 ldv_5779 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5780_31 ldv_5780 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_33 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_33 rwlock_t;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_34 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_34 seqlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 282 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 639 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 162
struct rw_semaphore;
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
typedef long rwsem_count_t;
#line 78 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
struct rw_semaphore {
   rwsem_count_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 753 "include/linux/mmzone.h"
struct ctl_table;
#line 174 "include/linux/ioport.h"
struct device;
#line 311 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 96 "include/linux/debugobjects.h"
struct tvec_base;
#line 97 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 263 "include/linux/timer.h"
struct hrtimer;
#line 264
enum hrtimer_restart;
#line 276
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 414 "include/linux/workqueue.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 272
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 282
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 289
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 297
struct wakeup_source;
#line 298 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   enum dpm_state status ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_100 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_100 mm_context_t;
#line 15 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 314 "include/linux/topology.h"
struct vm_area_struct;
#line 35 "include/linux/kmod.h"
struct key;
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 443
struct sock;
#line 444
struct kobject;
#line 445
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 451 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void const   *(*current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
};
#line 55 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 98 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 116
struct sysfs_dirent;
#line 185 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 215
struct kernel_param;
#line 216 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 42 "include/linux/moduleparam.h"
struct kparam_string;
#line 42
struct kparam_array;
#line 42 "include/linux/moduleparam.h"
union __anonunion_ldv_10862_110 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 42 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   u16 flags ;
   union __anonunion_ldv_10862_110 ldv_10862 ;
};
#line 57 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 63 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   unsigned int elemsize ;
   void *elem ;
};
#line 396 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 778 "include/linux/rcupdate.h"
struct tracepoint;
#line 779 "include/linux/rcupdate.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 88 "include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 117 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 60
struct module_param_attrs;
#line 60 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 190
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 196 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 386
struct module_sect_attrs;
#line 386
struct module_notes_attrs;
#line 386
struct ftrace_event_call;
#line 386 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   unsigned long *ftrace_callsites ;
   unsigned int num_ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 74 "include/linux/connector.h"
struct hlist_nulls_node;
#line 74 "include/linux/connector.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct cred;
#line 40 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 41 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 55 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_111 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_111 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_112 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_112 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_113 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_113 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_114 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_114 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_115 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_115 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_116 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_116 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_117 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_117 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 141 "include/linux/if.h"
union __anonunion_ifs_ifsu_118 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 141 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_118 ifs_ifsu ;
};
#line 159 "include/linux/if.h"
union __anonunion_ifr_ifrn_119 {
   char ifrn_name[16U] ;
};
#line 159 "include/linux/if.h"
union __anonunion_ifr_ifru_120 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 159 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_119 ifr_ifrn ;
   union __anonunion_ifr_ifru_120 ifr_ifru ;
};
#line 123 "include/linux/if_ether.h"
struct prio_tree_node;
#line 123 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 172
struct address_space;
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_12205_123 {
   u16 inuse ;
   u16 objects ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12206_122 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_12205_123 ldv_12205 ;
};
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_12211_125 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12214_124 {
   struct __anonstruct_ldv_12211_125 ldv_12211 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12218_126 {
   unsigned long index ;
   void *freelist ;
};
#line 173 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_12206_122 ldv_12206 ;
   union __anonunion_ldv_12214_124 ldv_12214 ;
   union __anonunion_ldv_12218_126 ldv_12218 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_128 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_127 {
   struct __anonstruct_vm_set_128 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_127 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_12703 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 52 "include/linux/net.h"
typedef enum ldv_12703 socket_state;
#line 175 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 176
struct pipe_inode_info;
#line 177
struct inode;
#line 178
struct net;
#line 195
struct fasync_struct;
#line 195 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 125 "include/linux/net.h"
struct proto_ops;
#line 125 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 151
struct kiocb;
#line 152 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 946
struct ctl_table_header;
#line 964 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 984 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1026 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1034 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 1068 "include/linux/sysctl.h"
struct ratelimit_state {
   spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 328 "include/trace/events/kmem.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int stat[18U] ;
};
#line 45 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 56 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct class_private;
#line 22
struct bus_type;
#line 23
struct bus_type_private;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 158 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 188
struct class_attribute;
#line 188 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 218
struct device_type;
#line 257 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 308 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 335 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 396 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 405
struct dma_coherent_mem;
#line 405 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 459 "include/linux/device.h"
struct wakeup_source {
   char *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long hit_count ;
   unsigned char active : 1 ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 30 "include/linux/range.h"
struct file_ra_state;
#line 31
struct user_struct;
#line 32
struct writeback_control;
#line 165 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 182 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 817
struct hrtimer_clock_base;
#line 818
struct hrtimer_cpu_base;
#line 827
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 832 "include/linux/dmaengine.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 444
struct net_device;
#line 445 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 255 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 256
struct sec_path;
#line 256 "include/linux/skbuff.h"
struct __anonstruct_ldv_19013_132 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 256 "include/linux/skbuff.h"
union __anonunion_ldv_19014_131 {
   __wsum csum ;
   struct __anonstruct_ldv_19013_132 ldv_19013 ;
};
#line 256 "include/linux/skbuff.h"
union __anonunion_ldv_19044_133 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 256 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_19014_131 ldv_19014 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u32 rxhash ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char deliver_no_wcard : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_19044_133 ldv_19044 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 441
struct dst_entry;
#line 488
struct rtable;
#line 112 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 561
struct dentry;
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 272 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
};
#line 352 "include/linux/if_link.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 87 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 302
struct file_operations;
#line 60 "include/linux/miscdevice.h"
struct pm_qos_request_list {
   struct plist_node list ;
   int pm_qos_class ;
};
#line 432 "include/linux/rculist.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 51 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 77 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 92 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 100 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 109 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 205 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 227 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 275 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 287 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 306 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 328 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 335 "include/linux/ethtool.h"
struct ethtool_rawip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __u8 hdata[64U] ;
};
#line 341 "include/linux/ethtool.h"
struct ethtool_ether_spec {
   __be16 ether_type ;
   __u8 frame_size ;
   __u8 eframe[16U] ;
};
#line 347 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 359 "include/linux/ethtool.h"
union __anonunion_h_u_135 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 359 "include/linux/ethtool.h"
union __anonunion_m_u_136 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 359 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_135 h_u ;
   union __anonunion_m_u_136 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 376 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 388 "include/linux/ethtool.h"
struct ethtool_rxfh_indir {
   __u32 cmd ;
   __u32 size ;
   __u32 ring_index[0U] ;
};
#line 397 "include/linux/ethtool.h"
union __anonunion_h_u_137 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 397 "include/linux/ethtool.h"
union __anonunion_m_u_138 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 397 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_137 h_u ;
   union __anonunion_m_u_138 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 420 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 430 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 447 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_list {
   struct list_head list ;
   unsigned int count ;
};
#line 473 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rx_ntuple)(struct net_device * , u32  , void * ) ;
   int (*get_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir * ) ;
   int (*set_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir  const  * ) ;
};
#line 607
struct prot_inuse;
#line 608 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 69 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 74 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 80 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 85 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 92 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 98 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[79U] ;
};
#line 104 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 110
struct proc_dir_entry;
#line 110 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 73 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 74
struct fib_rules_ops;
#line 75
struct xt_table;
#line 75 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   atomic_t rt_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 68 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
};
#line 28 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 68 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 315 "include/linux/in.h"
union __anonunion_in6_u_139 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 315 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_139 in6_u ;
};
#line 247 "include/linux/netfilter.h"
struct flowi;
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip4_u_141 {
   __be32 daddr ;
   __be32 saddr ;
   __u8 tos ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip6_u_142 {
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dn_u_143 {
   __le16 daddr ;
   __le16 saddr ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_nl_u_140 {
   struct __anonstruct_ip4_u_141 ip4_u ;
   struct __anonstruct_ip6_u_142 ip6_u ;
   struct __anonstruct_dn_u_143 dn_u ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ports_145 {
   __be16 sport ;
   __be16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_icmpt_146 {
   __u8 type ;
   __u8 code ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dnports_147 {
   __le16 sport ;
   __le16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_mht_148 {
   __u8 type ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_uli_u_144 {
   struct __anonstruct_ports_145 ports ;
   struct __anonstruct_icmpt_146 icmpt ;
   struct __anonstruct_dnports_147 dnports ;
   __be32 spi ;
   struct __anonstruct_mht_148 mht ;
};
#line 308 "include/linux/netfilter.h"
struct flowi {
   int oif ;
   int iif ;
   __u32 mark ;
   union __anonunion_nl_u_140 nl_u ;
   __u8 proto ;
   __u8 flags ;
   union __anonunion_uli_u_144 uli_u ;
   __u32 secid ;
};
#line 327
struct bio;
#line 328
struct bio_integrity_payload;
#line 329
struct block_device;
#line 17 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 18 "include/linux/blk_types.h"
typedef void bio_destructor_t(struct bio * );
#line 19 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 28 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 89 "include/linux/kdev_t.h"
struct nameidata;
#line 90
struct path;
#line 91
struct vfsmount;
#line 92 "include/linux/kdev_t.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_149 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_149 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 398 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 57 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 57 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 206
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 213
struct pid_namespace;
#line 213 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 164 "include/linux/pid.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 51 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 416 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 162 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 271 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 299 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 310 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 324 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 337 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 383 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 566 "include/linux/fs.h"
union __anonunion_arg_151 {
   char *buf ;
   void *data ;
};
#line 566 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_150 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_151 arg ;
   int error ;
};
#line 566 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_150 read_descriptor_t;
#line 569 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 618
struct backing_dev_info;
#line 619 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 640
struct hd_struct;
#line 640
struct gendisk;
#line 640 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 710
struct posix_acl;
#line 711
struct inode_operations;
#line 711
struct file_lock;
#line 711
struct cdev;
#line 711 "include/linux/fs.h"
union __anonunion_ldv_23010_152 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 711 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_23010_152 ldv_23010 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 874 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 882 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 905 "include/linux/fs.h"
union __anonunion_f_u_153 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 905 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_153 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1029
struct files_struct;
#line 1029 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1030 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1035 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_155 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_154 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_155 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_154 fl_u ;
};
#line 1136 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1323
struct file_system_type;
#line 1323
struct super_operations;
#line 1323
struct xattr_handler;
#line 1323
struct mtd_info;
#line 1323 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
};
#line 1443 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1481
struct block_device_operations;
#line 1482 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1521 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1564 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1741 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 361 "include/linux/netfilter.h"
struct ebt_table;
#line 362 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
   char *slabname ;
};
#line 470 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
#line 61
struct net_generic;
#line 62 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct netns_xfrm xfrm ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
};
#line 95 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
};
#line 54 "include/net/dcbnl.h"
struct vlan_group;
#line 55
struct netpoll_info;
#line 56
struct phy_device;
#line 57
struct wireless_dev;
#line 58
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 117 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 136 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 208
struct neighbour;
#line 209
struct neigh_parms;
#line 236 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 241 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 283 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 384 "include/linux/netdevice.h"
typedef struct sk_buff *rx_handler_func_t(struct sk_buff * );
#line 491
struct Qdisc;
#line 491 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   u64 tx_bytes ;
   u64 tx_packets ;
   u64 tx_dropped ;
};
#line 513 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 524 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 fill ;
   unsigned int last_qtail ;
};
#line 535 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 583 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct netdev_rx_queue *first ;
   atomic_t count ;
};
#line 592 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
};
#line 789
struct iw_handler_def;
#line 789
struct iw_public_data;
#line 789
struct garp_port;
#line 789
struct rtnl_link_ops;
#line 789 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request_list pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   int uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   struct netdev_queue rx_queue ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned short reg_state ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
   struct ethtool_rx_ntuple_list ethtool_ntuple_list ;
   struct phy_device *phydev ;
};
#line 1233
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 198 "include/linux/irq.h"
struct timer_rand_state;
#line 199
struct irqaction;
#line 100 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 118 "include/linux/sem.h"
struct sem_undo_list;
#line 131 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 140 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 149
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_163 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_163 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_165 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_166 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_167 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_168 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_169 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_170 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_164 {
   int _pad[28U] ;
   struct __anonstruct__kill_165 _kill ;
   struct __anonstruct__timer_166 _timer ;
   struct __anonstruct__rt_167 _rt ;
   struct __anonstruct__sigchld_168 _sigchld ;
   struct __anonstruct__sigfault_169 _sigfault ;
   struct __anonstruct__sigpoll_170 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_164 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_173 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_173 seccomp_t;
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 40 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 84 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_29162_174 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_175 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_176 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_29162_174 ldv_29162 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_175 type_data ;
   union __anonunion_payload_176 payload ;
};
#line 292
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 263
struct futex_pi_state;
#line 264
struct robust_list_head;
#line 265
struct bio_list;
#line 266
struct fs_struct;
#line 267
struct perf_event_context;
#line 149 "include/linux/sched.h"
struct cfs_rq;
#line 360
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_177 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_177 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 401 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 443 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 451 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 458 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 475 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 511
struct tty_struct;
#line 511
struct taskstats;
#line 511
struct tty_audit_buf;
#line 511 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
   int oom_score_adj ;
};
#line 658 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 700
struct reclaim_state;
#line 701 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 719 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 994
struct io_context;
#line 1017
struct rq;
#line 1018 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*moved_group)(struct task_struct * , int  ) ;
};
#line 1081 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1086 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1121 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1147
struct rt_rq;
#line 1147 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1171
struct mem_cgroup;
#line 1171 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long bytes ;
   unsigned long memsw_bytes ;
};
#line 1509
struct css_set;
#line 1509
struct compat_robust_list_head;
#line 1509
struct ftrace_ret_stack;
#line 1509 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int mems_allowed_change_disable ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
};
#line 326 "include/linux/fsnotify.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char const   *filename ;
   char const   *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 61 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 79 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
#line 82 "include/linux/security.h"
struct xfrm_policy;
#line 83
struct xfrm_state;
#line 104
struct request_sock;
#line 3025 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 85 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 785 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 93
struct neigh_table;
#line 93 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   struct net_device *dev ;
   unsigned long used ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t probes ;
   rwlock_t lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   atomic_t refcnt ;
   int (*output)(struct sk_buff * ) ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   struct neigh_ops  const  *ops ;
   u8 primary_key[0U] ;
};
#line 116 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 126 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 136 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct pneigh_entry **phash_buckets ;
};
#line 362
struct dn_route;
#line 362 "include/net/neighbour.h"
union __anonunion_ldv_34098_182 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 362 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[14U] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[1U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_34098_182 ldv_34098 ;
};
#line 100 "include/net/sock.h"
struct __anonstruct_socket_lock_t_183 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 100 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_183 socket_lock_t;
#line 100
struct proto;
#line 101 "include/net/sock.h"
union __anonunion_ldv_34240_184 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_34246_185 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_34254_186 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 101 "include/net/sock.h"
struct sock_common {
   union __anonunion_ldv_34240_184 ldv_34240 ;
   atomic_t skc_refcnt ;
   int skc_tx_queue_mapping ;
   union __anonunion_ldv_34246_185 ldv_34246 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_34254_186 ldv_34254 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
#line 153 "include/net/sock.h"
struct __anonstruct_sk_backlog_187 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   int len ;
};
#line 153 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_187 sk_backlog ;
   struct socket_wq *sk_wq ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2U] ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   __u32 sk_rxhash ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 697
struct request_sock_ops;
#line 698
struct timewait_sock_ops;
#line 699
struct inet_hashinfo;
#line 700
struct raw_hashinfo;
#line 701
struct udp_table;
#line 701 "include/net/sock.h"
union __anonunion_h_188 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 701 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_188 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 178 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 191 "include/linux/drbd.h"
struct __anonstruct_ldv_35401_189 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   unsigned short _pad : 9 ;
};
#line 191 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_35401_189 ldv_35401 ;
   unsigned int i ;
};
#line 110 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 111
struct crypto_async_request;
#line 112
struct crypto_aead;
#line 113
struct crypto_blkcipher;
#line 114
struct crypto_hash;
#line 115
struct crypto_rng;
#line 116
struct crypto_tfm;
#line 117
struct crypto_type;
#line 118
struct aead_givcrypt_request;
#line 119
struct skcipher_givcrypt_request;
#line 119 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 128 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 141 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 167 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 181 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 186 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 205 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 220 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 237 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 246 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 252 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 261 "include/linux/crypto.h"
union __anonunion_cra_u_190 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 261 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_190 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 313 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 333 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 348 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 357 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 365 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 377 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 384 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 392 "include/linux/crypto.h"
union __anonunion_crt_u_191 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 392 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_191 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 421 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 425 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 429 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 445 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 142 "include/linux/jhash.h"
struct request_values {

};
#line 145 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 363 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 81 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 90 "include/linux/genhd.h"
struct partition_meta_info {
   u8 uuid[16U] ;
   u8 volname[64U] ;
};
#line 98 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   int in_flight[2U] ;
   struct disk_stats *dkstats ;
   struct rcu_head rcu_head ;
};
#line 138 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct gendisk *disk ;
   struct hd_struct *part[] ;
};
#line 146
struct request_queue;
#line 146
struct blk_integrity;
#line 146 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct work_struct async_notify ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 15 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 20 "include/linux/writeback.h"
struct writeback_control {
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   unsigned long wb_start ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
};
#line 56
struct bdi_writeback;
#line 38 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 45 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 61 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   void (*unplug_io_fn)(struct backing_dev_info * , struct page * ) ;
   void *unplug_io_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 29 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned short cgroup_changed ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 94 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 378 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 83
struct blk_trace;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 63 "include/linux/blkdev.h"
union __anonunion_ldv_39024_199 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 63 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_39024_199 ldv_39024 ;
   void *elevator_private ;
   void *elevator_private2 ;
   void *elevator_private3 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 20 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 22 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef int elevator_queue_empty_fn(struct request_queue * );
#line 24 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 28 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 29 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 30 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 31 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 33 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 34 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 35 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_queue_empty_fn *elevator_queue_empty_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 64 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 72 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 84 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 189 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 190 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 191 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 192 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 193 "include/linux/blkdev.h"
typedef void unplug_fn(struct request_queue * );
#line 194 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 202 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 204 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 205 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 206 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 207
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 214 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 220 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 229 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char no_cluster ;
   signed char discard_zeroes_data ;
};
#line 257 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   unplug_fn *unplug_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct timer_list unplug_timer ;
   int unplug_thresh ;
   unsigned long unplug_delay ;
   struct work_struct unplug_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   unsigned int ordered ;
   unsigned int next_ordered ;
   unsigned int ordseq ;
   int orderr ;
   int ordcolor ;
   struct request pre_flush_rq ;
   struct request bar_rq ;
   struct request post_flush_rq ;
   struct request *orig_bar_rq ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 1202 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1221 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1222 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1223 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1224 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1225 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1283 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 492 "include/linux/ipv6.h"
struct __anonstruct_ldv_40548_206 {
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 492 "include/linux/ipv6.h"
union __anonunion_ldv_40550_205 {
   struct __anonstruct_ldv_40548_206 ldv_40548 ;
   struct rcu_head rcu ;
};
#line 492 "include/linux/ipv6.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   __be32 v4daddr ;
   __u32 avl_height ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   union __anonunion_ldv_40550_205 ldv_40550 ;
};
#line 49 "include/linux/route.h"
struct in_device;
#line 49 "include/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   struct flowi fl ;
   struct in_device *idev ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_iif ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   struct inet_peer *peer ;
};
#line 227 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1530 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header80 {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 346 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header95 {
   u16 magic ;
   u16 command ;
   u32 length ;
   u8 payload[0U] ;
};
#line 354 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_header {
   struct p_header80 h80 ;
   struct p_header95 h95 ;
};
#line 359 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   union p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 392 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 408 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 417 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header80 head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 440 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header80 head ;
   u32 barrier ;
   u32 pad ;
};
#line 447 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header80 head ;
   u32 barrier ;
   u32 set_size ;
};
#line 461 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 469 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_95 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
   u32 c_plan_ahead ;
   u32 c_delay_target ;
   u32 c_fill_target ;
   u32 c_max_rate ;
};
#line 485 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header80 head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 498 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header80 head ;
   u64 uuid[6U] ;
};
#line 504 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header80 head ;
   u64 uuid ;
};
#line 509 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header80 head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_segment_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 519 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header80 head ;
   u32 state ;
};
#line 524 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header80 head ;
   u32 mask ;
   u32 val ;
};
#line 530 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header80 head ;
   u32 retcode ;
};
#line 573 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe93 {
   struct p_header80 head ;
   u32 seq_num ;
   u32 offset ;
};
#line 618 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   union p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_rs_param_95 rs_param_95 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
   struct p_delay_probe93 delay_probe93 ;
   struct p_rs_uuid rs_uuid ;
};
#line 651
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 658 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 679
struct drbd_work;
#line 689 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 693
struct drbd_tl_epoch;
#line 724 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_writes ;
};
#line 732 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 771 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 776 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_42864_209 {
   u64 block_id ;
   struct digest_info *digest ;
};
#line 776 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node colision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   union __anonunion_ldv_42864_209 ldv_42864 ;
};
#line 834
struct drbd_bitmap;
#line 835 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 886 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 896 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 73 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
   int on_no_data ;
   int c_plan_ahead ;
   int c_delay_target ;
   int c_fill_target ;
   int c_max_rate ;
   int c_min_rate ;
};
#line 144 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct file *lo_file ;
   struct file *md_file ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 938 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 945
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2,
    WO_bio_barrier = 3
} ;
#line 952 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct fifo_buffer {
   int *values ;
   unsigned int head_index ;
   unsigned int size ;
};
#line 958 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work go_diskless ;
   struct drbd_work md_sync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   wait_queue_head_t net_cnt_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_same_csum ;
   unsigned long rs_mark_left[8U] ;
   unsigned long rs_mark_time[8U] ;
   int rs_last_mark ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   atomic_t pp_in_use_by_net ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   atomic_t rs_sect_in ;
   atomic_t rs_sect_ev ;
   int rs_last_sect_ev ;
   int rs_last_events ;
   int c_sync_rate ;
   struct fifo_buffer rs_plan_s ;
   int rs_in_flight ;
   int rs_planed ;
};
#line 1160
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2419 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   atomic_t bm_async_io ;
   wait_queue_head_t bm_io_wait ;
   unsigned long bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 145 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 152
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_MASK = 31
} ;
#line 1284 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 54 "include/linux/smp_lock.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct cgroupfs_root;
#line 57
struct cgroup;
#line 58
struct css_id;
#line 56 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 190 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 243 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 166 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_MAX_CMD = 40,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 694 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 765 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 932 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 1204
enum drbd_req_event;
#line 1204
enum drbd_req_event;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    send_canceled = 5,
    send_failed = 6,
    handed_over_to_network = 7,
    connection_lost_while_pending = 8,
    read_retry_remote_canceled = 9,
    recv_acked_by_peer = 10,
    write_acked_by_peer = 11,
    write_acked_by_peer_and_sis = 12,
    conflict_discarded_by_peer = 13,
    neg_acked = 14,
    barrier_acked = 15,
    data_received = 16,
    read_completed_with_error = 17,
    read_ahead_completed_with_error = 18,
    write_completed_with_error = 19,
    completed_ok = 20,
    resend = 21,
    fail_frozen_disk_io = 22,
    restart_frozen_disk_io = 23,
    nothing = 24
} ;
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 181 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 261
enum drbd_state_ret_codes {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 552
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 556 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header80 head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 757
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BARRIER_DONE = 2,
    EV_BECAME_LAST = 3,
    EV_CLEANUP = 32
} ;
#line 1168
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1204
enum drbd_req_event;
#line 1204
enum drbd_req_event;
#line 1495
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct flush_work {
   struct drbd_work w ;
   struct drbd_epoch *epoch ;
};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3462
enum receive_bitmap_ret {
    OK = 0,
    DONE = 1,
    FAILED = 2
} ;
#line 3730 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct data_cmd {
   int expect_payload ;
   size_t pkt_size ;
   int (*function)(struct drbd_conf * , enum drbd_packets  , unsigned int  ) ;
};
#line 4367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header80 * ) ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 190 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 1204 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1204
enum drbd_req_event;
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_210 {
   u32 pos ;
   u32 extent ;
};
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_210 updates[62U] ;
   u32 xor_sum ;
};
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct drbd_atodb_wait {
   atomic_t count ;
   struct completion io_done ;
   struct drbd_conf *mdev ;
   int error ;
};
#line 12 "include/linux/dynamic_debug.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 24 ;
   unsigned char flags ;
   char enabled ;
};
#line 170 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 189 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 294
enum drbd_uuid_index {
    UI_CURRENT = 0,
    UI_BITMAP = 1,
    UI_HISTORY_START = 2,
    UI_HISTORY_END = 3,
    UI_SIZE = 4,
    UI_FLAGS = 5,
    UI_EXTENDED_SIZE = 6
} ;
#line 1204 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1204
enum drbd_req_event;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 2069 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_30308 {
    OK___0 = 0,
    FAILED___0 = 1,
    DONE___0 = 2
} ;
#line 3417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 reserved_u32[4U] ;
};
#line 3896 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 181 "include/linux/types.h"
typedef __u32 __le32;
#line 183 "include/linux/types.h"
typedef __u64 __le64;
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 36 "include/linux/kmod.h"
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 42 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   enum umh_wait wait ;
   int retval ;
   int (*init)(struct subprocess_info * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 63 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 144 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 158 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
   kernel_cap_t eff_cap ;
   __u32 loginuid ;
   __u32 sessionid ;
   __u32 sid ;
};
#line 93 "include/linux/drbd.h"
enum drbd_ret_codes {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    ERR_STONITH_AND_PROT_A = 154,
    AFTER_LAST_ERR_CODE = 155
} ;
#line 310 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 348 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 909 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 103 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 131 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 140 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 1204 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1204
enum drbd_req_event;
#line 34 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_on_no_data = 75,
    T_c_plan_ahead = 76,
    T_c_delay_target = 77,
    T_c_fill_target = 78,
    T_c_max_rate = 79,
    T_c_min_rate = 80,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 107 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2149 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 10 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 19
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n .balign 8 \n .quad 661b\n .quad 663f\n\t .word (4*32+23)\n\t .byte 662b-661b\n\t .byte 664f-663f\n.previous\n.section .discard,\"aw\",@progbits\n\t .byte 0xff + (664f-663f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n663:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n664:\n.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 47 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 49
  tmp = __arch_hweight64((__u64 )w);
#line 49
  return (tmp);
}
}
#line 69 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 150 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 277
extern int printk(char const   *  , ...) ;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1956;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1956;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1956;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1956;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1956: ;
#line 14
  return (pfo_ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4364: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4364;
  } else {

  }

#line 19
  return (order);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 182
  __i = i;
#line 183
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 186
  return (i + __i);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 207
  tmp = atomic_add_return(- i, v);
#line 207
  return (tmp);
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5498;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5498;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5498;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5498;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5498: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 553 "include/linux/lockdep.h"
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_5780.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_5780.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_5780.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_5780.rlock, flags);
#line 341
  return;
}
}
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 156
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 134
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 159
extern int mutex_trylock(struct mutex * ) ;
#line 160
extern void mutex_unlock(struct mutex * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 300 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 303 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 305
  tmp = alloc_pages_current(gfp_mask, order);
#line 305
  return (tmp);
}
}
#line 316
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 328
extern void __free_pages(struct page * , unsigned int  ) ;
#line 189 "include/linux/rcupdate.h"
extern int debug_lockdep_rcu_enabled(void) ;
#line 243 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 


  {
#line 245
  return (1);
}
}
#line 635 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 639
  return;
}
}
#line 55 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 64
extern void vfree(void const   * ) ;
#line 39 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 144 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 62 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 64
  return;
}
}
#line 51 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_13680: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_13680;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 154 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[28U] ;
#line 160 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 162
  if (size == 0UL) {
#line 163
    return (0);
  } else {

  }
#line 165
  if (size <= 8UL) {
#line 166
    return (3);
  } else {

  }
#line 168
  if (size > 64UL && size <= 96UL) {
#line 169
    return (1);
  } else {

  }
#line 170
  if (size > 128UL && size <= 192UL) {
#line 171
    return (2);
  } else {

  }
#line 172
  if (size <= 8UL) {
#line 172
    return (3);
  } else {

  }
#line 173
  if (size <= 16UL) {
#line 173
    return (4);
  } else {

  }
#line 174
  if (size <= 32UL) {
#line 174
    return (5);
  } else {

  }
#line 175
  if (size <= 64UL) {
#line 175
    return (6);
  } else {

  }
#line 176
  if (size <= 128UL) {
#line 176
    return (7);
  } else {

  }
#line 177
  if (size <= 256UL) {
#line 177
    return (8);
  } else {

  }
#line 178
  if (size <= 512UL) {
#line 178
    return (9);
  } else {

  }
#line 179
  if (size <= 1024UL) {
#line 179
    return (10);
  } else {

  }
#line 180
  if (size <= 2048UL) {
#line 180
    return (11);
  } else {

  }
#line 181
  if (size <= 4096UL) {
#line 181
    return (12);
  } else {

  }
#line 186
  if (size <= 8192UL) {
#line 186
    return (13);
  } else {

  }
#line 187
  if (size <= 16384UL) {
#line 187
    return (14);
  } else {

  }
#line 188
  if (size <= 32768UL) {
#line 188
    return (15);
  } else {

  }
#line 189
  if (size <= 65536UL) {
#line 189
    return (16);
  } else {

  }
#line 190
  if (size <= 131072UL) {
#line 190
    return (17);
  } else {

  }
#line 191
  if (size <= 262144UL) {
#line 191
    return (18);
  } else {

  }
#line 192
  if (size <= 524288UL) {
#line 192
    return (19);
  } else {

  }
#line 193
  if (size <= 1048576UL) {
#line 193
    return (20);
  } else {

  }
#line 194
  if (size <= 2097152UL) {
#line 194
    return (21);
  } else {

  }
#line 195
  return (-1);
}
}
#line 212 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 214
  tmp = kmalloc_index(size);
#line 214
  index = tmp;
#line 216
  if (index == 0) {
#line 217
    return (0);
  } else {

  }
#line 219
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 223
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 226
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 651 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 655
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 657
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 661
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 601 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 603
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 56L) << 12) + 0xffff880000000000UL));
}
}
#line 2206 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 358 "include/linux/sched.h"
extern void schedule(void) ;
#line 2375
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 69 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 71
  pagefault_disable();
#line 72
  tmp = lowmem_page_address(page);
#line 72
  return (tmp);
}
}
#line 76 "include/linux/highmem.h"
__inline static void kunmap_atomic_notypecheck(void *addr , enum km_type idx ) 
{ 


  {
#line 78
  pagefault_enable();
#line 79
  return;
}
}
#line 218 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 221
extern void bio_put(struct bio * ) ;
#line 224
extern void bio_endio(struct bio * , int  ) ;
#line 233
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 765 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 767
  return ((bdev->bd_disk)->queue);
}
}
#line 940
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * , unsigned long  ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 142
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 145
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 145
    tmp = _drbd_insert_fault(mdev, type);
#line 145
    if (tmp != 0U) {
#line 145
      tmp___0 = 1;
    } else {
#line 145
      tmp___0 = 0;
    }
  } else {
#line 145
    tmp___0 = 0;
  }
#line 145
  return (tmp___0);
}
}
#line 165
struct ratelimit_state drbd_ratelimit_state ;
#line 1187
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) ;
#line 1283
void drbd_go_diskless(struct drbd_conf *mdev ) ;
#line 1422
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1423
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1424
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1425
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1426
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1427
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1429
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1432
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1434
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1435
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1436
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1437
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1438
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1439
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1441
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1442
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1443
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1444
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1446
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1447
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1448
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1449
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1452
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1455
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1458
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) ;
#line 1459
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1461
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1476
rwlock_t global_state_lock ;
#line 1493
char *ppsize(char *buf , unsigned long long size ) ;
#line 1513
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1764 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  int rv ;

  {
#line 1770
  _raw_read_lock(& global_state_lock);
#line 1771
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1772
  _raw_read_unlock(& global_state_lock);
#line 1774
  return (rv);
}
}
#line 1795 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1797
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1799
  if (forcedetach == 0) {
#line 1800
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1800
    if (tmp != 0) {
#line 1801
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1803
    goto ldv_43847;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1808
  if ((int )mdev->state.ldv_35401.disk > 2) {
#line 1809
    __ns.i = mdev->state.i;
#line 1809
    __ns.ldv_35401.disk = 2U;
#line 1809
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1813
  goto ldv_43847;
  }
  ldv_43847: ;
#line 1816
  return;
}
}
#line 1826 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1829
  if (error != 0) {
#line 1831
    tmp = spinlock_check(& mdev->req_lock);
#line 1831
    flags = _raw_spin_lock_irqsave(tmp);
#line 1832
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1833
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1835
  return;
}
}
#line 1861 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1863
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1866
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1869
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2124 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;

  {
#line 2126
  tmp = atomic_sub_return(1, & mdev->local_cnt);
#line 2126
  i = tmp;
#line 2128
  if (i < 0) {
#line 2128
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( i >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2128);
  } else {

  }
#line 2129
  if (i == 0) {
#line 2130
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 4U) {
#line 2131
      drbd_go_diskless(mdev);
    } else {

    }
#line 2132
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2134
  return;
}
}
#line 2137 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2141
  atomic_inc(& mdev->local_cnt);
#line 2142
  io_allowed = (unsigned int )mdev->state.ldv_35401.disk >= (unsigned int )mins;
#line 2143
  if (io_allowed == 0) {
#line 2144
    put_ldev(mdev);
  } else {

  }
#line 2145
  return (io_allowed);
}
}
#line 2391 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_blk_run_queue(struct request_queue *q ) 
{ 


  {
#line 2393
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned long )q->unplug_fn != (unsigned long )((unplug_fn *)0)) {
#line 2394
    (*(q->unplug_fn))(q);
  } else {

  }
#line 2395
  return;
}
}
#line 2405 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2409
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2409
  if (tmp != 0) {
#line 2410
    return;
  } else {

  }
#line 2412
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0, 1UL);
#line 2414
  if (r != 0) {
#line 2415
    set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 2416
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2418
  return;
}
}
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) ;
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_is_locked(struct drbd_bitmap *b ) 
{ 
  int tmp ;

  {
#line 99
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& b->bm_flags));
#line 99
  return (tmp);
}
}
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 105
  b = mdev->bitmap;
#line 106
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 106
  if (tmp == 0) {
#line 107
    return;
  } else {

  }
#line 108
  tmp___9 = get_current();
#line 108
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 108
    tmp___7 = get_current();
#line 108
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 108
      tmp___5 = get_current();
#line 108
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 108
        tmp___3 = get_current();
#line 108
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 108
        tmp___4 = (char *)"worker";
      }
#line 108
      tmp___6 = tmp___4;
    } else {
#line 108
      tmp___6 = (char *)"asender";
    }
#line 108
    tmp___8 = tmp___6;
  } else {
#line 108
    tmp___8 = (char *)"receiver";
  }
#line 108
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 114
  return;
}
}
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  int tmp___10 ;

  {
#line 120
  b = mdev->bitmap;
#line 123
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 124
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 125
    return;
  } else {

  }
#line 128
  tmp = mutex_trylock(& b->bm_change);
#line 128
  trylock_failed = tmp == 0;
#line 130
  if (trylock_failed != 0) {
#line 131
    tmp___9 = get_current();
#line 131
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 131
      tmp___7 = get_current();
#line 131
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 131
        tmp___5 = get_current();
#line 131
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 131
          tmp___3 = get_current();
#line 131
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 131
          tmp___4 = (char *)"worker";
        }
#line 131
        tmp___6 = tmp___4;
      } else {
#line 131
        tmp___6 = (char *)"asender";
      }
#line 131
      tmp___8 = tmp___6;
    } else {
#line 131
      tmp___8 = (char *)"receiver";
    }
#line 131
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 139
    mutex_lock_nested(& b->bm_change, 0U);
  } else {

  }
#line 141
  tmp___10 = __test_and_set_bit(0, (unsigned long volatile   *)(& b->bm_flags));
#line 141
  if (tmp___10 != 0) {
#line 142
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 144
  b->bm_why = why;
#line 145
  b->bm_task = get_current();
#line 146
  return;
}
}
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;

  {
#line 150
  b = mdev->bitmap;
#line 151
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 152
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 153
    return;
  } else {

  }
#line 156
  tmp = __test_and_clear_bit(0, (unsigned long volatile   *)(& (mdev->bitmap)->bm_flags));
#line 156
  if (tmp == 0) {
#line 157
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 159
  b->bm_why = 0;
#line 160
  b->bm_task = 0;
#line 161
  mutex_unlock(& b->bm_change);
#line 162
  return;
}
}
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ,
                                     enum km_type  const  km ) 
{ 
  struct page *page ;
  unsigned long page_nr ;
  long tmp ;
  void *tmp___0 ;

  {
#line 171
  page_nr = offset >> 9;
#line 172
  tmp = __builtin_expect(b->bm_number_of_pages <= page_nr, 0L);
#line 172
  if (tmp != 0L) {
#line 172
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (172), "i" (12UL));
    ldv_44124: ;
#line 172
    goto ldv_44124;
  } else {

  }
#line 173
  page = *(b->bm_pages + page_nr);
#line 175
  tmp___0 = kmap_atomic(page, km);
#line 175
  return ((unsigned long *)tmp___0);
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ) 
{ 
  unsigned long *tmp ;

  {
#line 180
  tmp = __bm_map_paddr(b, offset, KM_IRQ1);
#line 180
  return (tmp);
}
}
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 185
  kunmap_atomic_notypecheck((void *)p_addr, km);
#line 186
  return;
}
}
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 190
  return;
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 215
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 216
    return;
  } else {

  }
#line 218
  i = 0UL;
#line 218
  goto ldv_44143;
  ldv_44142: ;
#line 219
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 220
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 223
    goto ldv_44141;
  } else {

  }
#line 225
  __free_pages(*(pages + i), 0U);
#line 226
  *(pages + i) = 0;
  ldv_44141: 
#line 218
  i = i + 1UL;
  ldv_44143: ;
#line 218
  if (i < number) {
#line 219
    goto ldv_44142;
  } else {

  }

#line 223
  return;
}
}
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 232
  if (v != 0) {
#line 233
    vfree((void const   *)ptr);
  } else {
#line 235
    kfree((void const   *)ptr);
  }
#line 236
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 243
  old_pages = b->bm_pages;
#line 245
  vmalloced = 0U;
#line 246
  have = b->bm_number_of_pages;
#line 248
  tmp = __builtin_expect(have == 0UL, 0L);
#line 248
  if (tmp != 0L) {
#line 248
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 248
    if (tmp___0 != 0L) {
#line 248
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (248), "i" (12UL));
      ldv_44160: ;
#line 248
      goto ldv_44160;
    } else {

    }
  } else {

  }
#line 249
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 249
  if (tmp___1 != 0L) {
#line 249
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 249
    if (tmp___2 != 0L) {
#line 249
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (249), "i" (12UL));
      ldv_44161: ;
#line 249
      goto ldv_44161;
    } else {

    }
  } else {

  }
#line 251
  if (have == want) {
#line 252
    return (old_pages);
  } else {

  }
#line 259
  bytes = (unsigned int )want * 8U;
#line 260
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 260
  new_pages = (struct page **)tmp___3;
#line 261
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 262
    tmp___4 = vmalloc((unsigned long )bytes);
#line 262
    new_pages = (struct page **)tmp___4;
#line 263
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 264
      return (0);
    } else {

    }
#line 265
    vmalloced = 1U;
  } else {

  }
#line 268
  memset((void *)new_pages, 0, (size_t )bytes);
#line 269
  if (want >= have) {
#line 270
    i = 0U;
#line 270
    goto ldv_44163;
    ldv_44162: 
#line 271
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 270
    i = i + 1U;
    ldv_44163: ;
#line 270
    if ((unsigned long )i < have) {
#line 271
      goto ldv_44162;
    } else {

    }

#line 272
    goto ldv_44166;
    ldv_44165: 
#line 273
    page = alloc_pages(131282U, 0U);
#line 274
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 275
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 276
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 277
      return (0);
    } else {

    }
#line 279
    *(new_pages + (unsigned long )i) = page;
#line 272
    i = i + 1U;
    ldv_44166: ;
#line 272
    if ((unsigned long )i < want) {
#line 273
      goto ldv_44165;
    } else {

    }

  } else {
#line 282
    i = 0U;
#line 282
    goto ldv_44169;
    ldv_44168: 
#line 283
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 282
    i = i + 1U;
    ldv_44169: ;
#line 282
    if ((unsigned long )i < want) {
#line 283
      goto ldv_44168;
    } else {

    }

  }
#line 289
  if (vmalloced != 0U) {
#line 290
    set_bit(2U, (unsigned long volatile   *)(& b->bm_flags));
  } else {
#line 292
    clear_bit(2, (unsigned long volatile   *)(& b->bm_flags));
  }
#line 294
  return (new_pages);
}
}
#line 301 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 303
  b = mdev->bitmap;
#line 304
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 304
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 304
  if (tmp != 0L) {
#line 304
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       304);
  } else {

  }
#line 304
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 305
  tmp___0 = kzalloc(408UL, 208U);
#line 305
  b = (struct drbd_bitmap *)tmp___0;
#line 306
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 307
    return (-12);
  } else {

  }
#line 308
  spinlock_check(& b->bm_lock);
#line 308
  __raw_spin_lock_init(& b->bm_lock.ldv_5780.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 309
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 310
  __init_waitqueue_head(& b->bm_io_wait, & __key___1);
#line 312
  mdev->bitmap = b;
#line 314
  return (0);
}
}
#line 317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 319
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 319
  if (_b != 0) {
#line 319
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            319);
  } else {

  }
#line 319
  if (_b != 0) {
#line 319
    return (0UL);
  } else {

  }
#line 320
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;
  int tmp ;

  {
#line 327
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 327
  if (_b != 0) {
#line 327
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            327);
  } else {

  }
#line 327
  if (_b != 0) {
#line 327
    return;
  } else {

  }
#line 328
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 329
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& (mdev->bitmap)->bm_flags));
#line 329
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, tmp);
#line 330
  kfree((void const   *)mdev->bitmap);
#line 331
  mdev->bitmap = 0;
#line 332
  return;
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  int cleared ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 341
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 342
  w = b->bm_bits >> 6;
#line 343
  cleared = 0;
#line 346
  p_addr = bm_map_paddr(b, w);
#line 347
  bm = p_addr + (w & 511UL);
#line 348
  if (b->bm_words > w) {
#line 349
    tmp = hweight_long(*bm & ~ mask);
#line 349
    cleared = (int )tmp;
#line 350
    *bm = *bm & mask;
#line 351
    w = w + (size_t )1;
#line 351
    bm = bm + 1;
  } else {

  }
#line 354
  if (b->bm_words > w) {
#line 355
    tmp___0 = hweight_long(*bm);
#line 355
    cleared = (int )((unsigned int )tmp___0 + (unsigned int )cleared);
#line 356
    *bm = 0UL;
  } else {

  }
#line 358
  bm_unmap(p_addr);
#line 359
  return (cleared);
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  unsigned long *p_addr ;
  unsigned long *bm ;

  {
#line 364
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 365
  w = b->bm_bits >> 6;
#line 368
  p_addr = bm_map_paddr(b, w);
#line 369
  bm = p_addr + (w & 511UL);
#line 370
  if (b->bm_words > w) {
#line 371
    *bm = *bm | ~ mask;
#line 372
    bm = bm + 1;
#line 372
    w = w + (size_t )1;
  } else {

  }
#line 375
  if (b->bm_words > w) {
#line 376
    *bm = 0xffffffffffffffffUL;
  } else {

  }
#line 378
  bm_unmap(p_addr);
#line 379
  return;
}
}
#line 381 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_count_bits(struct drbd_bitmap *b , int const   swap_endian ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long offset ;
  unsigned long bits ;
  unsigned long i ;
  unsigned long do_now ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 383
  offset = 0UL;
#line 384
  bits = 0UL;
#line 387
  goto ldv_44225;
  ldv_44224: 
#line 388
  __min1 = b->bm_words - offset;
#line 388
  __min2 = 512UL;
#line 388
  do_now = __min1 < __min2 ? __min1 : __min2;
#line 388
  i = do_now;
#line 389
  p_addr = __bm_map_paddr(b, offset, KM_USER0);
#line 390
  bm = p_addr + (offset & 511UL);
#line 391
  goto ldv_44221;
  ldv_44220: 
#line 396
  tmp = bm;
#line 396
  bm = bm + 1;
#line 396
  tmp___0 = hweight_long(*tmp);
#line 396
  bits = tmp___0 + bits;
  ldv_44221: 
#line 391
  tmp___1 = i;
#line 391
  i = i - 1UL;
#line 391
  if (tmp___1 != 0UL) {
#line 392
    goto ldv_44220;
  } else {

  }
#line 398
  __bm_unmap(p_addr, KM_USER0);
#line 399
  offset = offset + do_now;
#line 400
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                400, 0);
#line 400
  _cond_resched();
  ldv_44225: ;
#line 387
  if (b->bm_words > offset) {
#line 388
    goto ldv_44224;
  } else {

  }

#line 403
  return (bits);
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 408
  tmp = __bm_count_bits(b, 0);
#line 408
  return (tmp);
}
}
#line 411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits_swap_endian(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 413
  tmp = __bm_count_bits(b, 1);
#line 413
  return (tmp);
}
}
#line 417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 424
  end = offset + len;
#line 426
  if (b->bm_words < end) {
#line 427
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 428
    return;
  } else {

  }
#line 431
  goto ldv_44248;
  ldv_44247: 
#line 432
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 432
  __min2 = end;
#line 432
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 433
  p_addr = bm_map_paddr(b, offset);
#line 434
  bm = p_addr + (offset & 511UL);
#line 435
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 436
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
#line 438
    goto ldv_44246;
  } else {

  }
#line 440
  memset((void *)bm, c, do_now * 8UL);
#line 441
  bm_unmap(p_addr);
#line 442
  offset = offset + do_now;
  ldv_44248: ;
#line 431
  if (offset < end) {
#line 432
    goto ldv_44247;
  } else {

  }
  ldv_44246: ;
#line 436
  return;
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 456
  b = mdev->bitmap;
#line 459
  opages = 0;
#line 460
  err = 0;
#line 463
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 463
  if (_b != 0) {
#line 463
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            463);
  } else {

  }
#line 463
  if (_b != 0) {
#line 463
    return (-12);
  } else {

  }
#line 465
  drbd_bm_lock(mdev, (char *)"resize");
#line 467
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 470
  if (b->bm_dev_capacity == capacity) {
#line 471
    goto out;
  } else {

  }
#line 473
  opages_vmalloced = constant_test_bit(2U, (unsigned long const volatile   *)(& b->bm_flags));
#line 475
  if (capacity == 0UL) {
#line 476
    spin_lock_irq(& b->bm_lock);
#line 477
    opages = b->bm_pages;
#line 478
    onpages = b->bm_number_of_pages;
#line 479
    owords = b->bm_words;
#line 480
    b->bm_pages = 0;
#line 481
    tmp___2 = 0UL;
#line 481
    b->bm_dev_capacity = tmp___2;
#line 481
    tmp___1 = tmp___2;
#line 481
    b->bm_words = tmp___1;
#line 481
    tmp___0 = tmp___1;
#line 481
    b->bm_bits = tmp___0;
#line 481
    tmp = tmp___0;
#line 481
    b->bm_set = tmp;
#line 481
    b->bm_number_of_pages = tmp;
#line 486
    spin_unlock_irq(& b->bm_lock);
#line 487
    bm_free_pages(opages, onpages);
#line 488
    bm_vk_free((void *)opages, opages_vmalloced);
#line 489
    goto out;
  } else {

  }
#line 491
  bits = (capacity + 7UL) >> 3;
#line 498
  words = (bits + 63UL) >> 6;
#line 500
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 500
  if (tmp___3 != 0) {
#line 501
    if (((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12 < (unsigned long long )bits) {
#line 501
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (u64)bits <= (((u64)mdev->ldev->md.md_size_sect-MD_BM_OFFSET) << 12) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
              501);
    } else {

    }
#line 502
    put_ldev(mdev);
  } else {

  }
#line 506
  want = ((words + 1UL) * 8UL + 4095UL) >> 12;
#line 507
  have = b->bm_number_of_pages;
#line 508
  if (want == have) {
#line 509
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 509
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
              509);
    } else {

    }
#line 510
    npages = b->bm_pages;
  } else {
#line 512
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 512
    if (tmp___4 != 0) {
#line 513
      npages = 0;
    } else {
#line 515
      npages = bm_realloc_pages(b, want);
    }
  }
#line 518
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 519
    err = -12;
#line 520
    goto out;
  } else {

  }
#line 523
  spin_lock_irq(& b->bm_lock);
#line 524
  opages = b->bm_pages;
#line 525
  owords = b->bm_words;
#line 526
  obits = b->bm_bits;
#line 528
  growing = bits > obits;
#line 529
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 530
    bm_set_surplus(b);
  } else {

  }
#line 532
  b->bm_pages = npages;
#line 533
  b->bm_number_of_pages = want;
#line 534
  b->bm_bits = bits;
#line 535
  b->bm_words = words;
#line 536
  b->bm_dev_capacity = capacity;
#line 538
  if (growing != 0) {
#line 539
    if (set_new_bits != 0) {
#line 540
      bm_memset(b, owords, 255, words - owords);
#line 541
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 543
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 547
  if (want < have) {
#line 549
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 552
  p_addr = bm_map_paddr(b, words);
#line 553
  bm = p_addr + (words & 511UL);
#line 554
  *bm = 2205418087UL;
#line 555
  bm_unmap(p_addr);
#line 557
  bm_clear_surplus(b);
#line 559
  spin_unlock_irq(& b->bm_lock);
#line 560
  if ((unsigned long )opages != (unsigned long )npages) {
#line 561
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 562
  if (growing == 0) {
#line 563
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 564
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu\n",
            bits, words);
  out: 
#line 567
  drbd_bm_unlock(mdev);
#line 568
  return (err);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 581
  b = mdev->bitmap;
#line 585
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 585
  if (_b != 0) {
#line 585
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            585);
  } else {

  }
#line 585
  if (_b != 0) {
#line 585
    return (0UL);
  } else {

  }
#line 586
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 586
  if (_b___0 != 0) {
#line 586
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            586);
  } else {

  }
#line 586
  if (_b___0 != 0) {
#line 586
    return (0UL);
  } else {

  }
#line 588
  tmp = spinlock_check(& b->bm_lock);
#line 588
  flags = _raw_spin_lock_irqsave(tmp);
#line 589
  s = b->bm_set;
#line 590
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 592
  return (s);
}
}
#line 595 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 599
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 599
  if (tmp == 0) {
#line 600
    return (0UL);
  } else {

  }
#line 601
  s = _drbd_bm_total_weight(mdev);
#line 602
  put_ldev(mdev);
#line 603
  return (s);
}
}
#line 606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 608
  b = mdev->bitmap;
#line 609
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 609
  if (_b != 0) {
#line 609
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            609);
  } else {

  }
#line 609
  if (_b != 0) {
#line 609
    return (0UL);
  } else {

  }
#line 610
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 610
  if (_b___0 != 0) {
#line 610
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            610);
  } else {

  }
#line 610
  if (_b___0 != 0) {
#line 610
    return (0UL);
  } else {

  }
#line 612
  return (b->bm_words);
}
}
#line 615 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 617
  b = mdev->bitmap;
#line 618
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 618
  if (_b != 0) {
#line 618
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            618);
  } else {

  }
#line 618
  if (_b != 0) {
#line 618
    return (0UL);
  } else {

  }
#line 620
  return (b->bm_bits);
}
}
#line 628 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 631
  b = mdev->bitmap;
#line 636
  end = offset + number;
#line 638
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 638
  if (_b != 0) {
#line 638
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            638);
  } else {

  }
#line 638
  if (_b != 0) {
#line 638
    return;
  } else {

  }
#line 639
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 639
  if (_b___0 != 0) {
#line 639
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            639);
  } else {

  }
#line 639
  if (_b___0 != 0) {
#line 639
    return;
  } else {

  }
#line 640
  if (number == 0UL) {
#line 641
    return;
  } else {

  }
#line 642
  __ret_warn_on = b->bm_words <= offset;
#line 642
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 642
  if (tmp != 0L) {
#line 642
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       642);
  } else {

  }
#line 642
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 643
  __ret_warn_on___0 = b->bm_words < end;
#line 643
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 643
  if (tmp___0 != 0L) {
#line 643
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       643);
  } else {

  }
#line 643
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 645
  spin_lock_irq(& b->bm_lock);
#line 646
  goto ldv_44336;
  ldv_44335: 
#line 647
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 647
  __min2 = end;
#line 647
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 648
  p_addr = bm_map_paddr(b, offset);
#line 649
  bm = p_addr + (offset & 511UL);
#line 650
  offset = offset + do_now;
#line 651
  goto ldv_44333;
  ldv_44332: 
#line 652
  bits = hweight_long(*bm);
#line 653
  tmp___1 = buffer;
#line 653
  buffer = buffer + 1;
#line 653
  word = (unsigned long )((unsigned long long )*bm | (unsigned long long )*tmp___1);
#line 654
  tmp___2 = bm;
#line 654
  bm = bm + 1;
#line 654
  *tmp___2 = word;
#line 655
  tmp___3 = hweight_long(word);
#line 655
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_44333: 
#line 651
  tmp___4 = do_now;
#line 651
  do_now = do_now - (size_t )1;
#line 651
  if (tmp___4 != 0UL) {
#line 652
    goto ldv_44332;
  } else {

  }
#line 657
  bm_unmap(p_addr);
  ldv_44336: ;
#line 646
  if (offset < end) {
#line 647
    goto ldv_44335;
  } else {

  }

#line 664
  if (b->bm_words == end) {
#line 665
    tmp___5 = bm_clear_surplus(b);
#line 665
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 667
  spin_unlock_irq(& b->bm_lock);
#line 668
  return;
}
}
#line 673 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long *tmp___0 ;
  size_t tmp___1 ;

  {
#line 676
  b = mdev->bitmap;
#line 680
  end = offset + number;
#line 682
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 682
  if (_b != 0) {
#line 682
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            682);
  } else {

  }
#line 682
  if (_b != 0) {
#line 682
    return;
  } else {

  }
#line 683
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 683
  if (_b___0 != 0) {
#line 683
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            683);
  } else {

  }
#line 683
  if (_b___0 != 0) {
#line 683
    return;
  } else {

  }
#line 685
  spin_lock_irq(& b->bm_lock);
#line 686
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 689
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 694
    goto ldv_44361;
    ldv_44360: 
#line 695
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 695
    __min2 = end;
#line 695
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 696
    p_addr = bm_map_paddr(b, offset);
#line 697
    bm = p_addr + (offset & 511UL);
#line 698
    offset = offset + do_now;
#line 699
    goto ldv_44358;
    ldv_44357: 
#line 700
    tmp = buffer;
#line 700
    buffer = buffer + 1;
#line 700
    tmp___0 = bm;
#line 700
    bm = bm + 1;
#line 700
    *tmp = *tmp___0;
    ldv_44358: 
#line 699
    tmp___1 = do_now;
#line 699
    do_now = do_now - (size_t )1;
#line 699
    if (tmp___1 != 0UL) {
#line 700
      goto ldv_44357;
    } else {

    }
#line 701
    bm_unmap(p_addr);
    ldv_44361: ;
#line 694
    if (offset < end) {
#line 695
      goto ldv_44360;
    } else {

    }

  }
#line 704
  spin_unlock_irq(& b->bm_lock);
#line 705
  return;
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 710
  b = mdev->bitmap;
#line 711
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 711
  if (_b != 0) {
#line 711
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            711);
  } else {

  }
#line 711
  if (_b != 0) {
#line 711
    return;
  } else {

  }
#line 712
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 712
  if (_b___0 != 0) {
#line 712
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            712);
  } else {

  }
#line 712
  if (_b___0 != 0) {
#line 712
    return;
  } else {

  }
#line 714
  spin_lock_irq(& b->bm_lock);
#line 715
  bm_memset(b, 0UL, 255, b->bm_words);
#line 716
  bm_clear_surplus(b);
#line 717
  b->bm_set = b->bm_bits;
#line 718
  spin_unlock_irq(& b->bm_lock);
#line 719
  return;
}
}
#line 722 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 724
  b = mdev->bitmap;
#line 725
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 725
  if (_b != 0) {
#line 725
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            725);
  } else {

  }
#line 725
  if (_b != 0) {
#line 725
    return;
  } else {

  }
#line 726
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 726
  if (_b___0 != 0) {
#line 726
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            726);
  } else {

  }
#line 726
  if (_b___0 != 0) {
#line 726
    return;
  } else {

  }
#line 728
  spin_lock_irq(& b->bm_lock);
#line 729
  bm_memset(b, 0UL, 0, b->bm_words);
#line 730
  b->bm_set = 0UL;
#line 731
  spin_unlock_irq(& b->bm_lock);
#line 732
  return;
}
}
#line 734 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_bitmap *b ;
  int uptodate ;
  int tmp ;

  {
#line 736
  b = (struct drbd_bitmap *)bio->bi_private;
#line 737
  uptodate = (int )bio->bi_flags & 1;
#line 744
  if (error == 0 && uptodate == 0) {
#line 745
    error = -5;
  } else {

  }
#line 747
  if (error != 0) {
#line 750
    __set_bit(1, (unsigned long volatile   *)(& b->bm_flags));
  } else {

  }
#line 752
  tmp = atomic_dec_and_test(& b->bm_async_io);
#line 752
  if (tmp != 0) {
#line 753
    __wake_up(& b->bm_io_wait, 3U, 1, 0);
  } else {

  }
#line 755
  bio_put(bio);
#line 756
  return;
}
}
#line 758 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct drbd_conf *mdev , struct drbd_bitmap *b , int page_nr ,
                             int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  int tmp___1 ;

  {
#line 761
  tmp = bio_alloc(208U, 1);
#line 761
  bio = tmp;
#line 763
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 765
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 769
  __min1 = 4096U;
#line 769
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 769
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 769
  len = __min1 < __min2 ? __min1 : __min2;
#line 772
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 773
  bio->bi_sector = on_disk_sector;
#line 774
  bio_add_page(bio, *(b->bm_pages + (unsigned long )page_nr), len, 0U);
#line 775
  bio->bi_private = (void *)b;
#line 776
  bio->bi_end_io = & bm_async_io_complete;
#line 778
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 778
  if (tmp___1 != 0) {
#line 779
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 780
    bio_endio(bio, -5);
  } else {
#line 782
    submit_bio(rw, bio);
  }
#line 783
  return;
}
}
#line 822 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw ) 
{ 
  struct drbd_bitmap *b ;
  int bm_words ;
  int num_pages ;
  int i ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;
  size_t tmp___1 ;
  struct request_queue *tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char *tmp___7 ;

  {
#line 824
  b = mdev->bitmap;
#line 829
  err = 0;
#line 831
  tmp = bm_is_locked(b);
#line 831
  __ret_warn_on = tmp == 0;
#line 831
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 831
  if (tmp___0 != 0L) {
#line 831
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       831);
  } else {

  }
#line 831
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 835
  tmp___1 = drbd_bm_words(mdev);
#line 835
  bm_words = (int )tmp___1;
#line 836
  num_pages = (int )((((unsigned long )bm_words + 512UL) * 8UL - 1UL) >> 12);
#line 842
  now = jiffies;
#line 843
  atomic_set(& b->bm_async_io, num_pages);
#line 844
  __clear_bit(1, (unsigned long volatile   *)(& b->bm_flags));
#line 847
  i = 0;
#line 847
  goto ldv_44413;
  ldv_44412: 
#line 848
  bm_page_io_async(mdev, b, i, rw);
#line 847
  i = i + 1;
  ldv_44413: ;
#line 847
  if (i < num_pages) {
#line 848
    goto ldv_44412;
  } else {

  }
#line 850
  tmp___2 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 850
  drbd_blk_run_queue(tmp___2);
#line 851
  tmp___3 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 851
  if (tmp___3 == 0) {
#line 851
    goto ldv_44415;
  } else {

  }
#line 851
  tmp___4 = get_current();
#line 851
  __wait.flags = 0U;
#line 851
  __wait.private = (void *)tmp___4;
#line 851
  __wait.func = & autoremove_wake_function;
#line 851
  __wait.task_list.next = & __wait.task_list;
#line 851
  __wait.task_list.prev = & __wait.task_list;
  ldv_44418: 
#line 851
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 851
  tmp___5 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 851
  if (tmp___5 == 0) {
#line 851
    goto ldv_44417;
  } else {

  }
#line 851
  schedule();
#line 851
  goto ldv_44418;
  ldv_44417: 
#line 851
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_44415: 
#line 853
  tmp___6 = constant_test_bit(1U, (unsigned long const volatile   *)(& b->bm_flags));
#line 853
  if (tmp___6 != 0) {
#line 854
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 855
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 856
    err = -5;
  } else {

  }
#line 859
  now = jiffies;
#line 860
  if (rw == 1) {
#line 864
    drbd_md_flush(mdev);
  } else {
#line 867
    b->bm_set = bm_count_bits_swap_endian(b);
#line 868
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 871
  now = b->bm_set;
#line 873
  tmp___7 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 873
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___7, now);
#line 876
  return (err);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 885
  tmp = bm_rw(mdev, 0);
#line 885
  return (tmp);
}
}
#line 892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 894
  tmp = bm_rw(mdev, 1);
#line 894
  return (tmp);
}
}
#line 906 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  sector_t on_disk_sector ;
  int bm_words ;
  int num_words ;
  int offset ;
  int err ;
  size_t tmp ;
  int _min1 ;
  int _min2 ;
  void *tmp___0 ;
  void *tmp___1 ;
  int i ;
  int tmp___2 ;

  {
#line 908
  on_disk_sector = (sector_t )(((mdev->ldev)->md.md_offset + (unsigned long long )enr) + (unsigned long long )(mdev->ldev)->md.bm_offset);
#line 911
  err = 0;
#line 913
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 914
  tmp = drbd_bm_words(mdev);
#line 914
  bm_words = (int )tmp;
#line 915
  offset = (int )(enr << 6);
#line 916
  _min1 = 64;
#line 916
  _min2 = bm_words - offset;
#line 916
  num_words = _min1 < _min2 ? _min1 : _min2;
#line 917
  if (num_words <= 63) {
#line 918
    tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 918
    memset(tmp___0, 0, 512UL);
  } else {

  }
#line 919
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 919
  drbd_bm_get_lel(mdev, (size_t )offset, (size_t )num_words, (unsigned long *)tmp___1);
#line 921
  tmp___2 = drbd_md_sync_page_io(mdev, mdev->ldev, on_disk_sector, 1);
#line 921
  if (tmp___2 == 0) {
#line 923
    err = -5;
#line 924
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR writing bitmap sector %lu (meta-disk sector %llus)\n",
            enr, (unsigned long long )on_disk_sector);
#line 927
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_sect");
#line 928
    i = 0;
#line 928
    goto ldv_44441;
    ldv_44440: 
#line 929
    drbd_bm_ALe_set_all(mdev, enr * 4UL + (unsigned long )i);
#line 928
    i = i + 1;
    ldv_44441: ;
#line 928
    if (i <= 3) {
#line 929
      goto ldv_44440;
    } else {

    }

  } else {

  }
#line 931
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 932
  mutex_unlock(& mdev->md_io_mutex);
#line 933
  return (err);
}
}
#line 943 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned long offset ;

  {
#line 946
  b = mdev->bitmap;
#line 947
  i = 0xffffffffffffffffUL;
#line 951
  if (b->bm_bits < bm_fo) {
#line 952
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
  } else {
#line 954
    goto ldv_44457;
    ldv_44456: 
#line 956
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 957
    offset = bit_offset >> 6;
#line 958
    p_addr = __bm_map_paddr(b, offset, km);
#line 960
    if ((int )find_zero_bit != 0) {
#line 961
      i = find_next_zero_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    } else {
#line 963
      i = find_next_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    }
#line 965
    __bm_unmap(p_addr, km);
#line 966
    if (i <= 32767UL) {
#line 967
      i = bit_offset + i;
#line 968
      if (b->bm_bits <= i) {
#line 969
        goto ldv_44454;
      } else {

      }
#line 970
      goto found;
    } else {

    }
#line 972
    bm_fo = bit_offset + 32768UL;
    ldv_44457: ;
#line 954
    if (b->bm_bits > bm_fo) {
#line 955
      goto ldv_44456;
    } else {

    }
    ldv_44454: 
#line 974
    i = 0xffffffffffffffffUL;
  }
  found: ;
#line 977
  return (i);
}
}
#line 980 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;
  int tmp ;

  {
#line 983
  b = mdev->bitmap;
#line 984
  i = 0xffffffffffffffffUL;
#line 986
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 986
  if (_b != 0) {
#line 986
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            986);
  } else {

  }
#line 986
  if (_b != 0) {
#line 986
    return (i);
  } else {

  }
#line 987
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 987
  if (_b___0 != 0) {
#line 987
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            987);
  } else {

  }
#line 987
  if (_b___0 != 0) {
#line 987
    return (i);
  } else {

  }
#line 989
  spin_lock_irq(& b->bm_lock);
#line 990
  tmp = bm_is_locked(b);
#line 990
  if (tmp != 0) {
#line 991
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 993
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 995
  spin_unlock_irq(& b->bm_lock);
#line 996
  return (i);
}
}
#line 999 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1001
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1001
  return (tmp);
}
}
#line 1014 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1017
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1017
  return (tmp);
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1023
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1023
  return (tmp);
}
}
#line 1032 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned long last_page_nr ;
  int c ;
  unsigned long offset ;
  unsigned long page_nr ;
  int tmp ;
  int tmp___0 ;

  {
#line 1035
  b = mdev->bitmap;
#line 1036
  p_addr = 0;
#line 1038
  last_page_nr = 0xffffffffffffffffUL;
#line 1039
  c = 0;
#line 1041
  if (b->bm_bits <= e) {
#line 1042
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1044
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1046
  bitnr = s;
#line 1046
  goto ldv_44497;
  ldv_44496: 
#line 1047
  offset = bitnr >> 6;
#line 1048
  page_nr = offset >> 9;
#line 1049
  if (page_nr != last_page_nr) {
#line 1050
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1051
      __bm_unmap(p_addr, km);
    } else {

    }
#line 1052
    p_addr = __bm_map_paddr(b, offset, km);
#line 1053
    last_page_nr = page_nr;
  } else {

  }
#line 1055
  if (val != 0) {
#line 1056
    tmp = __test_and_set_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1056
    c = (tmp == 0) + c;
  } else {
#line 1058
    tmp___0 = __test_and_clear_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1058
    c = c - (tmp___0 != 0);
  }
#line 1046
  bitnr = bitnr + 1UL;
  ldv_44497: ;
#line 1046
  if (bitnr <= e) {
#line 1047
    goto ldv_44496;
  } else {

  }

#line 1060
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1061
    __bm_unmap(p_addr, km);
  } else {

  }
#line 1062
  b->bm_set = b->bm_set + (unsigned long )c;
#line 1063
  return (c);
}
}
#line 1070 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;

  {
#line 1074
  b = mdev->bitmap;
#line 1075
  c = 0;
#line 1077
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1077
  if (_b != 0) {
#line 1077
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1077);
  } else {

  }
#line 1077
  if (_b != 0) {
#line 1077
    return (1);
  } else {

  }
#line 1078
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1078
  if (_b___0 != 0) {
#line 1078
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1078);
  } else {

  }
#line 1078
  if (_b___0 != 0) {
#line 1078
    return (0);
  } else {

  }
#line 1080
  tmp = spinlock_check(& b->bm_lock);
#line 1080
  flags = _raw_spin_lock_irqsave(tmp);
#line 1081
  tmp___0 = bm_is_locked(b);
#line 1081
  if (tmp___0 != 0) {
#line 1082
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1084
  c = __bm_change_bits_to(mdev, s, e, val, KM_IRQ1);
#line 1086
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1087
  return (c);
}
}
#line 1091 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1093
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1093
  return (tmp);
}
}
#line 1097 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1099
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1099
  return (- tmp);
}
}
#line 1104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1109
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr), KM_USER0);
#line 1109
  paddr = (unsigned long *)tmp;
#line 1110
  i = first_word;
#line 1110
  goto ldv_44536;
  ldv_44535: 
#line 1111
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1111
  bits = (int )tmp___0;
#line 1112
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1113
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1110
  i = i + 1;
  ldv_44536: ;
#line 1110
  if (i < last_word) {
#line 1111
    goto ldv_44535;
  } else {

  }
#line 1115
  kunmap_atomic_notypecheck((void *)paddr, KM_USER0);
#line 1116
  return;
}
}
#line 1122 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1132
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1133
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1140
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1142
    __bm_change_bits_to(mdev, s, e, 1, KM_USER0);
#line 1143
    return;
  } else {

  }
#line 1149
  if (sl != 0UL) {
#line 1150
    __bm_change_bits_to(mdev, s, sl - 1UL, 1, KM_USER0);
  } else {

  }
#line 1152
  first_page = (int )(sl >> 15);
#line 1153
  last_page = (int )(el >> 15);
#line 1157
  first_word = (int )(sl >> 6) & 511;
#line 1158
  last_word = 512;
#line 1161
  page_nr = first_page;
#line 1161
  goto ldv_44552;
  ldv_44551: 
#line 1162
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1163
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1163, 0);
#line 1163
  _cond_resched();
#line 1164
  first_word = 0;
#line 1161
  page_nr = page_nr + 1;
  ldv_44552: ;
#line 1161
  if (page_nr < last_page) {
#line 1162
    goto ldv_44551;
  } else {

  }
#line 1168
  last_word = (int )(el >> 6) & 511;
#line 1169
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1176
  if (el <= (unsigned long )e) {
#line 1177
    __bm_change_bits_to(mdev, el, e, 1, KM_USER0);
  } else {

  }
#line 1178
  return;
}
}
#line 1187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  unsigned long offset ;
  int tmp___1 ;

  {
#line 1190
  b = mdev->bitmap;
#line 1194
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1194
  if (_b != 0) {
#line 1194
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1194);
  } else {

  }
#line 1194
  if (_b != 0) {
#line 1194
    return (0);
  } else {

  }
#line 1195
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1195
  if (_b___0 != 0) {
#line 1195
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1195);
  } else {

  }
#line 1195
  if (_b___0 != 0) {
#line 1195
    return (0);
  } else {

  }
#line 1197
  tmp = spinlock_check(& b->bm_lock);
#line 1197
  flags = _raw_spin_lock_irqsave(tmp);
#line 1198
  tmp___0 = bm_is_locked(b);
#line 1198
  if (tmp___0 != 0) {
#line 1199
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1200
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1201
    offset = bitnr >> 6;
#line 1202
    p_addr = bm_map_paddr(b, offset);
#line 1203
    tmp___1 = variable_test_bit((int )bitnr & 32767, (unsigned long const volatile   *)p_addr);
#line 1203
    i = tmp___1 != 0;
#line 1204
    bm_unmap(p_addr);
  } else
#line 1205
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1206
    i = -1;
  } else {
#line 1208
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1209
    i = 0;
  }
#line 1212
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1213
  return (i);
}
}
#line 1217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long page_nr ;
  unsigned long bitnr ;
  int c ;
  size_t w ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1220
  b = mdev->bitmap;
#line 1221
  p_addr = 0;
#line 1221
  page_nr = 0xffffffffffffffffUL;
#line 1223
  c = 0;
#line 1230
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1230
  if (_b != 0) {
#line 1230
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1230);
  } else {

  }
#line 1230
  if (_b != 0) {
#line 1230
    return (1);
  } else {

  }
#line 1231
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1231
  if (_b___0 != 0) {
#line 1231
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1231);
  } else {

  }
#line 1231
  if (_b___0 != 0) {
#line 1231
    return (1);
  } else {

  }
#line 1233
  tmp = spinlock_check(& b->bm_lock);
#line 1233
  flags = _raw_spin_lock_irqsave(tmp);
#line 1234
  tmp___0 = bm_is_locked(b);
#line 1234
  if (tmp___0 != 0) {
#line 1235
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1236
  bitnr = s;
#line 1236
  goto ldv_44594;
  ldv_44593: 
#line 1237
  w = bitnr >> 6;
#line 1238
  if (w >> 9 != page_nr) {
#line 1239
    page_nr = w >> 9;
#line 1240
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1241
      bm_unmap(p_addr);
    } else {

    }
#line 1242
    p_addr = bm_map_paddr(b, w);
  } else {

  }
#line 1244
  _b___1 = b->bm_bits <= bitnr;
#line 1244
  if (_b___1 != 0) {
#line 1244
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1244);
  } else {

  }
#line 1244
  if (_b___1 != 0) {
#line 1245
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1247
    tmp___1 = variable_test_bit((int )((unsigned int )bitnr - ((unsigned int )page_nr << 15U)),
                                (unsigned long const volatile   *)p_addr);
#line 1247
    c = (tmp___1 != 0) + c;
  }
#line 1236
  bitnr = bitnr + 1UL;
  ldv_44594: ;
#line 1236
  if (bitnr <= (unsigned long )e) {
#line 1237
    goto ldv_44593;
  } else {

  }

#line 1250
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1251
    bm_unmap(p_addr);
  } else {

  }
#line 1252
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1253
  return (c);
}
}
#line 1271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1273
  b = mdev->bitmap;
#line 1278
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1278
  if (_b != 0) {
#line 1278
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1278);
  } else {

  }
#line 1278
  if (_b != 0) {
#line 1278
    return (0);
  } else {

  }
#line 1279
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1279
  if (_b___0 != 0) {
#line 1279
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1279);
  } else {

  }
#line 1279
  if (_b___0 != 0) {
#line 1279
    return (0);
  } else {

  }
#line 1281
  tmp = spinlock_check(& b->bm_lock);
#line 1281
  flags = _raw_spin_lock_irqsave(tmp);
#line 1282
  tmp___0 = bm_is_locked(b);
#line 1282
  if (tmp___0 != 0) {
#line 1283
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1285
  s = (int )(enr << 6);
#line 1286
  _min1 = (enr + 1UL) << 6;
#line 1286
  _min2 = b->bm_words;
#line 1286
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1287
  count = 0;
#line 1288
  if ((size_t )s < b->bm_words) {
#line 1289
    n = e - s;
#line 1290
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1291
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1292
    goto ldv_44620;
    ldv_44619: 
#line 1293
    tmp___1 = bm;
#line 1293
    bm = bm + 1;
#line 1293
    tmp___2 = hweight_long(*tmp___1);
#line 1293
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_44620: 
#line 1292
    tmp___3 = n;
#line 1292
    n = n - 1;
#line 1292
    if (tmp___3 != 0) {
#line 1293
      goto ldv_44619;
    } else {

    }
#line 1294
    bm_unmap(p_addr);
  } else {
#line 1296
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1298
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1299
  return (count);
}
}
#line 1303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  int count ;
  int s ;
  int e ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  int tmp ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1305
  b = mdev->bitmap;
#line 1309
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1309
  if (_b != 0) {
#line 1309
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1309);
  } else {

  }
#line 1309
  if (_b != 0) {
#line 1309
    return (0UL);
  } else {

  }
#line 1310
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1310
  if (_b___0 != 0) {
#line 1310
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1310);
  } else {

  }
#line 1310
  if (_b___0 != 0) {
#line 1310
    return (0UL);
  } else {

  }
#line 1312
  spin_lock_irq(& b->bm_lock);
#line 1313
  tmp = bm_is_locked(b);
#line 1313
  if (tmp != 0) {
#line 1314
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1315
  weight = b->bm_set;
#line 1317
  s = (int )((unsigned int )al_enr * 16U);
#line 1318
  __min1 = (size_t )(s + 16);
#line 1318
  __min2 = b->bm_words;
#line 1318
  e = (int )(__min1 < __min2 ? __min1 : __min2);
#line 1320
  if ((e + -1) >> 9 != s >> 9) {
#line 1320
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1321);
  } else {

  }
#line 1322
  count = 0;
#line 1323
  if ((size_t )s < b->bm_words) {
#line 1324
    do_now = e - s;
#line 1324
    i = do_now;
#line 1325
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1326
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1327
    goto ldv_44644;
    ldv_44643: 
#line 1328
    tmp___0 = hweight_long(*bm);
#line 1328
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1329
    *bm = 0xffffffffffffffffUL;
#line 1330
    bm = bm + 1;
    ldv_44644: 
#line 1327
    tmp___1 = i;
#line 1327
    i = i - 1;
#line 1327
    if (tmp___1 != 0) {
#line 1328
      goto ldv_44643;
    } else {

    }
#line 1332
    bm_unmap(p_addr);
#line 1333
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1334
    if ((size_t )e == b->bm_words) {
#line 1335
      tmp___2 = bm_clear_surplus(b);
#line 1335
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1337
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1339
  weight = b->bm_set - weight;
#line 1340
  spin_unlock_irq(& b->bm_lock);
#line 1341
  return (weight);
}
}
#line 90 "include/linux/module.h"
extern struct module __this_module ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 290
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 291
char const   *drbd_role_str(enum drbd_role s ) ;
#line 292
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 164
struct drbd_conf **minor_table ;
#line 1122 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1126
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1128
  return (mdev);
}
}
#line 1481
int proc_details ;
#line 1620 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1621
struct file_operations  const  drbd_proc_fops ;
#line 2152 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2165
  tmp = drbd_bm_total_weight(mdev);
#line 2165
  *bits_left = tmp - mdev->rs_failed;
#line 2168
  if (*bits_left > mdev->rs_total) {
#line 2174
    __asm__  volatile   ("": : : "memory");
#line 2175
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35401.conn);
#line 2175
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2178
    *per_mil_done = 0U;
  } else {
#line 2181
    tmp___1 = 1000UL - ((*bits_left >> 10) * 1000UL) / ((mdev->rs_total >> 10) + 1UL);
#line 2184
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2186
  return;
}
}
#line 2265 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int is_susp(union drbd_state s ) 
{ 


  {
#line 2267
  return (((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 48
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & single_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;
  int stalled ;

  {
#line 68
  stalled = 0;
#line 70
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 72
  x = (int )(res / 50U);
#line 73
  y = 20 - x;
#line 74
  seq_printf(seq, "\t[");
#line 75
  i = 1;
#line 75
  goto ldv_44131;
  ldv_44130: 
#line 76
  seq_printf(seq, "=");
#line 75
  i = i + 1;
  ldv_44131: ;
#line 75
  if (i < x) {
#line 76
    goto ldv_44130;
  } else {

  }
#line 77
  seq_printf(seq, ">");
#line 78
  i = 0;
#line 78
  goto ldv_44134;
  ldv_44133: 
#line 79
  seq_printf(seq, ".");
#line 78
  i = i + 1;
  ldv_44134: ;
#line 78
  if (i < y) {
#line 79
    goto ldv_44133;
  } else {

  }
#line 80
  seq_printf(seq, "] ");
#line 82
  seq_printf(seq, "sync\'ed:%3u.%u%% ", res / 10U, res % 10U);
#line 84
  if (mdev->rs_total > 1048576UL) {
#line 85
    seq_printf(seq, "(%lu/%lu)M\n\t", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 89
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 105
  i = (mdev->rs_last_mark + 2) % 8;
#line 106
  dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 107
  if (dt > 6000UL) {
#line 108
    stalled = 1;
  } else {

  }
#line 110
  if (dt == 0UL) {
#line 111
    dt = dt + 1UL;
  } else {

  }
#line 112
  db = mdev->rs_mark_left[i] - rs_left;
#line 113
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 115
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 119
  dbdt = db / dt << 2;
#line 120
  if (dbdt > 1000UL) {
#line 121
    seq_printf(seq, " speed: %ld,%03ld", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 124
    seq_printf(seq, " speed: %ld", dbdt);
  }
#line 128
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 129
  if (dt == 0UL) {
#line 130
    dt = 1UL;
  } else {

  }
#line 131
  db = mdev->rs_total - rs_left;
#line 132
  dbdt = db / dt << 2;
#line 133
  if (dbdt > 1000UL) {
#line 134
    seq_printf(seq, " (%ld,%03ld)", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 137
    seq_printf(seq, " (%ld)", dbdt);
  }
#line 139
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 272U) {
#line 140
    if (mdev->c_sync_rate > 1000) {
#line 141
      seq_printf(seq, " want: %d,%03d", mdev->c_sync_rate / 1000, mdev->c_sync_rate % 1000);
    } else {
#line 144
      seq_printf(seq, " want: %d", mdev->c_sync_rate);
    }
  } else {

  }
#line 146
  seq_printf(seq, " K/sec%s\n", stalled != 0 ? (char *)" (stalled)" : (char *)"");
#line 147
  return;
}
}
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 151
  __mptr = (struct lc_element  const  *)e;
#line 151
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 153
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 156
  return;
}
}
#line 159 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[4U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;

  {
#line 161
  hole = 0;
#line 165
  write_ordering_chars[0] = 110;
#line 165
  write_ordering_chars[1] = 100;
#line 165
  write_ordering_chars[2] = 102;
#line 165
  write_ordering_chars[3] = 98;
#line 172
  tmp = drbd_buildtag();
#line 172
  seq_printf(seq, "version: 8.3.9rc2 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 95, tmp);
#line 195
  i = 0;
#line 195
  goto ldv_44154;
  ldv_44153: 
#line 196
  mdev = minor_to_mdev((unsigned int )i);
#line 197
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 198
    hole = 1;
#line 199
    goto ldv_44152;
  } else {

  }
#line 201
  if (hole != 0) {
#line 202
    hole = 0;
#line 203
    seq_printf(seq, "\n");
  } else {

  }
#line 206
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35401.conn);
#line 208
  if (((unsigned int )*((unsigned short *)mdev + 1006UL) == 0U && (unsigned int )*((unsigned char *)mdev + 2013UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2012UL) == 2U) {
#line 211
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 213
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 213
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 213
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 213
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 213
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 213
    tmp___5 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 213
    tmp___6 = is_susp(mdev->state);
#line 213
    tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35401.pdsk);
#line 213
    tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35401.disk);
#line 213
    tmp___9 = drbd_role_str((enum drbd_role )mdev->state.ldv_35401.peer);
#line 213
    tmp___10 = drbd_role_str((enum drbd_role )mdev->state.ldv_35401.role);
#line 213
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___10, tmp___9, tmp___8, tmp___7, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               tmp___6 != 0 ? 115 : 114, (unsigned int )*((unsigned char *)mdev + 2014UL) != 0U ? 97 : 45,
               (unsigned int )*((unsigned char *)mdev + 2014UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 2014UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               tmp___5 != 0 ? 115 : 45, mdev->send_cnt / 2U, mdev->recv_cnt / 2U,
               mdev->writ_cnt / 2U, mdev->read_cnt / 2U, mdev->al_writ_cnt, mdev->bm_writ_cnt,
               tmp___4, tmp___2 + tmp___3, tmp___1, tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 244
    tmp___11 = drbd_bm_total_weight(mdev);
#line 244
    seq_printf(seq, " oos:%lu\n", tmp___11 << 2);
  }
#line 247
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 272U) {
#line 249
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 251
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 304U) {
#line 252
    seq_printf(seq, "\t%3d%%      %lu/%lu\n", (int )((mdev->rs_total - mdev->ov_left) / (mdev->rs_total / 100UL + 1UL)),
               mdev->rs_total - mdev->ov_left, mdev->rs_total);
  } else {

  }
#line 258
  if (proc_details > 0) {
#line 258
    tmp___12 = _get_ldev_if_state(mdev, D_FAILED);
#line 258
    if (tmp___12 != 0) {
#line 259
      lc_seq_printf_stats(seq, mdev->resync);
#line 260
      lc_seq_printf_stats(seq, mdev->act_log);
#line 261
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 264
  if (proc_details > 1) {
#line 265
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 266
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_44152: 
#line 195
  i = i + 1;
  ldv_44154: ;
#line 195
  if ((unsigned int )i < minor_count) {
#line 196
    goto ldv_44153;
  } else {

  }

#line 272
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;

  {
#line 277
  tmp = PDE((struct inode  const  *)inode);
#line 277
  tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 277
  return (tmp___0);
}
}
#line 298
void ldv_check_final_state(void) ;
#line 301
extern void ldv_check_return_value(int  ) ;
#line 307
extern void ldv_initialize(void) ;
#line 310
extern void ldv_handler_precall(void) ;
#line 313
extern int nondet_int(void) ;
#line 316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 319 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_main1_sequence_infinite_withcheck_stateful(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_3 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 351
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 341
  LDV_IN_INTERRUPT = 1;
#line 350
  ldv_initialize();
#line 354
  goto ldv_44185;
  ldv_44184: 
#line 358
  tmp = nondet_int();
#line 358
  switch (tmp) {
  case 0: ;
#line 363
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 368
    ldv_handler_precall();
#line 369
    res_drbd_proc_open_3 = drbd_proc_open(var_group1, var_group2);
#line 370
    ldv_check_return_value(res_drbd_proc_open_3);
#line 371
    if (res_drbd_proc_open_3 != 0) {
#line 372
      goto ldv_module_exit;
    } else {

    }
#line 373
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 379
  goto ldv_44182;
  default: ;
#line 380
  goto ldv_44182;
  }
  ldv_44182: ;
  ldv_44185: 
#line 354
  tmp___0 = nondet_int();
#line 354
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 356
    goto ldv_44184;
  } else {

  }

  ldv_module_exit: ;
#line 389
  ldv_check_final_state();
#line 392
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 210 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg_64.h"
extern void __xchg_wrong_size(void) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 62
  __list_add(new, head, head->next);
#line 63
  return;
}
}
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 86 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 88
  next->prev = prev;
#line 89
  prev->next = next;
#line 90
  return;
}
}
#line 106
extern void list_del(struct list_head * ) ;
#line 136 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 138
  __list_del(entry->prev, entry->next);
#line 139
  INIT_LIST_HEAD(entry);
#line 140
  return;
}
}
#line 180 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 182
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 267 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 271
  first = list->next;
#line 272
  last = list->prev;
#line 274
  first->prev = prev;
#line 275
  prev->next = first;
#line 277
  last->next = next;
#line 278
  next->prev = last;
#line 279
  return;
}
}
#line 312 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 315
  tmp = list_empty((struct list_head  const  *)list);
#line 315
  if (tmp == 0) {
#line 316
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 317
    INIT_LIST_HEAD(list);
  } else {

  }
#line 319
  return;
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 218 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_xchg(atomic_t *v , int new ) 
{ 
  int __x ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
#line 220
  __x = new;
#line 220
  switch (4UL) {
  case 1UL: 
#line 220
  __ptr = (u8 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
#line 220
  goto ldv_5276;
  case 2UL: 
#line 220
  __ptr___0 = (u16 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
#line 220
  goto ldv_5276;
  case 4UL: 
#line 220
  __ptr___1 = (u32 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
#line 220
  goto ldv_5276;
  case 8UL: 
#line 220
  __ptr___2 = (u64 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
#line 220
  goto ldv_5276;
  default: 
#line 220
  __xchg_wrong_size();
  }
  ldv_5276: ;
#line 220
  return (__x);
}
}
#line 261 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_5780.rlock);
#line 286
  return;
}
}
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_5780.rlock);
#line 326
  return;
}
}
#line 185 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 91 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 57 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___0(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_13553: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_13553;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___0(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___0(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___0(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 348 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 348
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 348
  return (tmp);
}
}
#line 307 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 309
  tmp = PageTail(page);
#line 309
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 309
  if (tmp___0 != 0L) {
#line 310
    return (page->ldv_12214.first_page);
  } else {

  }
#line 311
  return (page);
}
}
#line 314 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 316
  tmp = compound_head(page);
#line 316
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 316
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17729: ;
#line 63
    goto ldv_17729;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17730: ;
#line 65
    goto ldv_17730;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17731: ;
#line 66
    goto ldv_17731;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 35 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 38
  __constr_expr_0.lock.ldv_5780.rlock.raw_lock.slock = 0U;
#line 38
  __constr_expr_0.lock.ldv_5780.rlock.magic = 3735899821U;
#line 38
  __constr_expr_0.lock.ldv_5780.rlock.owner_cpu = 4294967295U;
#line 38
  __constr_expr_0.lock.ldv_5780.rlock.owner = 0xffffffffffffffffUL;
#line 38
  __constr_expr_0.lock.ldv_5780.rlock.dep_map.key = 0;
#line 38
  __constr_expr_0.lock.ldv_5780.rlock.dep_map.class_cache[0] = 0;
#line 38
  __constr_expr_0.lock.ldv_5780.rlock.dep_map.class_cache[1] = 0;
#line 38
  __constr_expr_0.lock.ldv_5780.rlock.dep_map.name = "(*sem).lock";
#line 38
  __constr_expr_0.lock.ldv_5780.rlock.dep_map.cpu = 0;
#line 38
  __constr_expr_0.lock.ldv_5780.rlock.dep_map.ip = 0UL;
#line 38
  __constr_expr_0.count = (unsigned int )val;
#line 38
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 38
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 38
  *sem = __constr_expr_0;
#line 39
  lockdep_init_map(& sem->lock.ldv_5780.ldv_5779.dep_map, "semaphore->lock", & __key,
                   0);
#line 40
  return;
}
}
#line 46
extern int down_interruptible(struct semaphore * ) ;
#line 48
extern int down_trylock(struct semaphore * ) ;
#line 50
extern void up(struct semaphore * ) ;
#line 354 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 355
extern long schedule_timeout_interruptible(long  ) ;
#line 2028
extern void flush_signals(struct task_struct * ) ;
#line 2061
extern void force_sig(int  , struct task_struct * ) ;
#line 1069 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1127 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1129
  return (& tfm->base);
}
}
#line 1147 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1149
  tmp = crypto_hash_tfm(tfm);
#line 1149
  return (& tmp->crt_u.hash);
}
}
#line 1162 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1164
  tmp = crypto_hash_crt(tfm);
#line 1164
  return (tmp->digestsize);
}
}
#line 1182 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1184
  tmp = crypto_hash_crt(desc->tfm);
#line 1184
  tmp___0 = (*(tmp->init))(desc);
#line 1184
  return (tmp___0);
}
}
#line 1187 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1196
  tmp = crypto_hash_crt(desc->tfm);
#line 1196
  tmp___0 = (*(tmp->final))(desc, out);
#line 1196
  return (tmp___0);
}
}
#line 229 "include/linux/bio.h"
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 697 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 992 "include/linux/blkdev.h"
__inline static unsigned int queue_max_segment_size(struct request_queue *q ) 
{ 


  {
#line 994
  return (q->limits.max_segment_size);
}
}
#line 670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 676
  __asm__  volatile   ("": : : "memory");
#line 677
  return (thi->t_state);
}
}
#line 1131 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1133
  return (mdev->minor);
}
}
#line 1144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1146
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1149
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1149
  if (tmp != 0L) {
#line 1150
    mutex_unlock(& mdev->data.mutex);
#line 1151
    return (0);
  } else {

  }
#line 1153
  return (1);
}
}
#line 1156 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1158
  mutex_unlock(& mdev->data.mutex);
#line 1159
  return;
}
}
#line 1183
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1192
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1194
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1213
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) ;
#line 1217
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) ;
#line 1222
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) ;
#line 1230
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1236
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1238
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1240
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1243
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1245
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1249
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1255
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1258
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1261
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1262
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1265
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1276
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) ;
#line 1474
wait_queue_head_t drbd_pp_wait ;
#line 1476 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1503
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1506
int drbd_worker(struct drbd_thread *thi ) ;
#line 1507
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1508
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1509
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1510
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1511
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1515
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1517 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1519
  if (mdev->ov_last_oos_size != 0UL) {
#line 1520
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1524
  mdev->ov_last_oos_size = 0UL;
#line 1525
  return;
}
}
#line 1528
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1529
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1532
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1533
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1534
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1535
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1536
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1537
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1538
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1539
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1541
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1542
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1543
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1544
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1545
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1546
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1547
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1548
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1550
void resync_timer_fn(unsigned long data ) ;
#line 1553
int drbd_rs_should_slow_down(struct drbd_conf *mdev ) ;
#line 1554
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1557
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1562
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) ;
#line 1577 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1581
  if (level == 1) {
#line 1582
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1584
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1586
  return (err);
}
}
#line 1589 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1591
  val = 1;
#line 1592
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1594
  return;
}
}
#line 1596 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1598
  val = 0;
#line 1599
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1601
  return;
}
}
#line 1617
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1626
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1627
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1628
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1630
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1631
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1632
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1633
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1636
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1640
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) ;
#line 1718 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1720
  return ((struct page *)page->ldv_12214.ldv_12211.private);
}
}
#line 1741 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1743
  page = e->pages;
#line 1744
  goto ldv_44411;
  ldv_44410: 
#line 1745
  tmp = page_count(page);
#line 1745
  if (tmp > 1) {
#line 1746
    return (1);
  } else {

  }
#line 1744
  page = page_chain_next(page);
  ldv_44411: ;
#line 1744
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1744
    tmp___0 = page_chain_next(page);
#line 1744
    __builtin_prefetch((void const   *)tmp___0);
#line 1744
    if (1 != 0) {
#line 1745
      goto ldv_44410;
    } else {
#line 1747
      goto ldv_44412;
    }
  } else {

  }
  ldv_44412: ;
#line 1748
  return (0);
}
}
#line 1752 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1754
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1754
  if (tmp == 0) {
#line 1754
    goto ldv_44416;
  } else {

  }
#line 1754
  tmp___0 = get_current();
#line 1754
  __wait.flags = 0U;
#line 1754
  __wait.private = (void *)tmp___0;
#line 1754
  __wait.func = & autoremove_wake_function;
#line 1754
  __wait.task_list.next = & __wait.task_list;
#line 1754
  __wait.task_list.prev = & __wait.task_list;
  ldv_44419: 
#line 1754
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1754
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1754
  if (tmp___1 == 0) {
#line 1754
    goto ldv_44418;
  } else {

  }
#line 1754
  schedule();
#line 1754
  goto ldv_44419;
  ldv_44418: 
#line 1754
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44416: ;
#line 1757
  return;
}
}
#line 1758 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1760
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1761
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1762
  return;
}
}
#line 1795 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1797
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1799
  if (forcedetach == 0) {
#line 1800
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1800
    if (tmp != 0) {
#line 1801
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1803
    goto ldv_44442;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1808
  if ((int )mdev->state.ldv_35401.disk > 2) {
#line 1809
    __ns.i = mdev->state.i;
#line 1809
    __ns.ldv_35401.disk = 2U;
#line 1809
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1813
  goto ldv_44442;
  }
  ldv_44442: ;
#line 1816
  return;
}
}
#line 1874 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 


  {
#line 1877
  return ((unsigned long )bdev != (unsigned long )((struct block_device *)0) ? (sector_t )((bdev->bd_inode)->i_size >> 9) : 0UL);
}
}
#line 1956 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1959
  tmp = spinlock_check(& q->q_lock);
#line 1959
  flags = _raw_spin_lock_irqsave(tmp);
#line 1960
  list_add_tail(& w->list, & q->q);
#line 1961
  up(& q->s);
#line 1963
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1964
  return;
}
}
#line 1966 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1968
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1968
  if (tmp != 0) {
#line 1969
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 1970
  return;
}
}
#line 1972 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 1974
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 1975
  wake_asender(mdev);
#line 1976
  return;
}
}
#line 1978 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 1982
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 1982
  return (tmp);
}
}
#line 1997 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 1999
  _drbd_thread_stop(thi, 0, 1);
#line 2000
  return;
}
}
#line 2057 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2059
  atomic_inc(& mdev->rs_pending_cnt);
#line 2060
  return;
}
}
#line 2397 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_kick_lo(struct drbd_conf *mdev ) 
{ 
  struct request_queue *tmp ;
  int tmp___0 ;

  {
#line 2399
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2399
  if (tmp___0 != 0) {
#line 2400
    tmp = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2400
    drbd_blk_run_queue(tmp);
#line 2401
    put_ldev(mdev);
  } else {

  }
#line 2403
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_make_private_bio(struct drbd_request *req , struct bio *bio_src ) 
{ 
  struct bio *bio ;

  {
#line 269
  bio = bio_clone(bio_src, 16U);
#line 271
  req->private_bio = bio;
#line 273
  bio->bi_private = (void *)req;
#line 274
  bio->bi_end_io = & drbd_endio_pri;
#line 275
  bio->bi_next = 0;
#line 276
  return;
}
}
#line 320
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 322
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 327 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 329
  mdev = req->mdev;
#line 334
  rv = __req_mod(req, what, & m);
#line 335
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 336
    complete_master_bio(mdev, & m);
  } else {

  }
#line 338
  return (rv);
}
}
#line 343 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 346
  mdev = req->mdev;
#line 350
  spin_lock_irq(& mdev->req_lock);
#line 351
  rv = __req_mod(req, what, & m);
#line 352
  spin_unlock_irq(& mdev->req_lock);
#line 354
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 355
    complete_master_bio(mdev, & m);
  } else {

  }
#line 357
  return (rv);
}
}
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 79 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 83
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 84
  md_io->error = error;
#line 86
  complete(& md_io->event);
#line 87
  return;
}
}
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 94
  flags = 0UL;
#line 95
  mdev = e->mdev;
#line 97
  if (e->ldv_42864.block_id == 0ULL) {
#line 97
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            97);
  } else {

  }
#line 99
  tmp = spinlock_check(& mdev->req_lock);
#line 99
  flags = _raw_spin_lock_irqsave(tmp);
#line 100
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 101
  list_del(& e->w.list);
#line 102
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 102
  if (tmp___0 != 0) {
#line 103
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 104
  tmp___1 = constant_test_bit(4U, (unsigned long const volatile   *)(& e->flags));
#line 104
  if (tmp___1 != 0) {
#line 105
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_read_sec_final");
  } else {

  }
#line 106
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 108
  drbd_queue_work(& mdev->data.work, & e->w);
#line 109
  put_ldev(mdev);
#line 110
  return;
}
}
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int is_failed_barrier(int ee_flags ) 
{ 


  {
#line 114
  return ((ee_flags & 28) == 20);
}
}
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 122
  flags = 0UL;
#line 123
  mdev = e->mdev;
#line 131
  tmp___0 = is_failed_barrier((int )e->flags);
#line 131
  if (tmp___0 != 0) {
#line 132
    drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 133
    tmp = spinlock_check(& mdev->req_lock);
#line 133
    flags = _raw_spin_lock_irqsave(tmp);
#line 134
    list_del(& e->w.list);
#line 135
    e->flags = (e->flags & 0xffffffffffffffe7UL) | 8UL;
#line 136
    e->w.cb = & w_e_reissue;
#line 139
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 140
    drbd_queue_work(& mdev->data.work, & e->w);
#line 141
    return;
  } else {

  }
#line 144
  if (e->ldv_42864.block_id == 0ULL) {
#line 144
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            144);
  } else {

  }
#line 150
  e_sector = e->sector;
#line 151
  do_al_complete_io = (int )e->flags & 1;
#line 152
  is_syncer_req = e->ldv_42864.block_id == 0xffffffffffffffffULL;
#line 154
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 154
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 155
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 156
  list_del(& e->w.list);
#line 157
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 164
  if (is_syncer_req != 0) {
#line 164
    tmp___2 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 164
    do_wake = tmp___2;
  } else {
#line 164
    tmp___3 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 164
    do_wake = tmp___3;
  }
#line 168
  tmp___4 = constant_test_bit(4U, (unsigned long const volatile   *)(& e->flags));
#line 168
  if (tmp___4 != 0) {
#line 169
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec_final");
  } else {

  }
#line 170
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 172
  if (is_syncer_req != 0) {
#line 173
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 175
  if (do_wake != 0) {
#line 176
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 178
  if (do_al_complete_io != 0) {
#line 179
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 181
  wake_asender(mdev);
#line 182
  put_ldev(mdev);
#line 183
  return;
}
}
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;

  {
#line 190
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 191
  mdev = e->mdev;
#line 192
  uptodate = (int )bio->bi_flags & 1;
#line 193
  is_write = (int )bio->bi_rw & 1;
#line 195
  if (error != 0) {
#line 196
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
             is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
  } else {

  }
#line 199
  if (error == 0 && uptodate == 0) {
#line 200
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
             is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
#line 206
    error = -5;
  } else {

  }
#line 209
  if (error != 0) {
#line 210
    set_bit(4U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 212
  bio_put(bio);
#line 213
  tmp = atomic_dec_and_test(& e->pending_bios);
#line 213
  if (tmp != 0) {
#line 214
    if (is_write != 0) {
#line 215
      drbd_endio_write_sec_final(e);
    } else {
#line 217
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 218
  return;
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;

  {
#line 225
  req = (struct drbd_request *)bio->bi_private;
#line 226
  mdev = req->mdev;
#line 228
  uptodate = (int )bio->bi_flags & 1;
#line 230
  if (error == 0 && uptodate == 0) {
#line 231
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 236
    error = -5;
  } else {

  }
#line 240
  tmp = __builtin_expect(error != 0, 0L);
#line 240
  if (tmp != 0L) {
#line 241
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 1025UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 247
    what = completed_ok;
  }
#line 249
  bio_put(req->private_bio);
#line 250
  tmp___0 = ERR_PTR((long )error);
#line 250
  req->private_bio = (struct bio *)tmp___0;
#line 252
  req_mod(req, what);
#line 253
  return;
}
}
#line 255 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 257
  __mptr = (struct drbd_work  const  *)w;
#line 257
  req = (struct drbd_request *)__mptr;
#line 263
  spin_lock_irq(& mdev->req_lock);
#line 264
  if (cancel != 0 || *((unsigned int *)mdev + 503UL) != 65536U) {
#line 265
    _req_mod(req, read_retry_remote_canceled);
#line 266
    spin_unlock_irq(& mdev->req_lock);
#line 267
    return (1);
  } else {

  }
#line 269
  spin_unlock_irq(& mdev->req_lock);
#line 271
  tmp = w_send_read_req(mdev, w, 0);
#line 271
  return (tmp);
}
}
#line 274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int _b ;

  {
#line 276
  _b = cancel != 0;
#line 276
  if (_b != 0) {
#line 276
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "w_resync_inactive", (char *)"cancel", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            276);
  } else {

  }
#line 276
  if (_b != 0) {
#line 276
    return (1);
  } else {

  }
#line 277
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync inactive, but callback triggered??\n");
#line 278
  return (1);
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 285
  page = e->pages;
#line 289
  desc.tfm = tfm;
#line 290
  desc.flags = 0U;
#line 292
  sg_init_table(& sg, 1U);
#line 293
  crypto_hash_init(& desc);
#line 295
  goto ldv_44902;
  ldv_44901: 
#line 297
  sg_set_page(& sg, page, 4096U, 0U);
#line 298
  crypto_hash_update(& desc, & sg, sg.length);
#line 299
  page = tmp;
  ldv_44902: 
#line 295
  tmp = page_chain_next(page);
#line 295
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 296
    goto ldv_44901;
  } else {

  }
#line 302
  len = e->size & 4095U;
#line 303
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 304
  crypto_hash_update(& desc, & sg, sg.length);
#line 305
  crypto_hash_final(& desc, (u8 *)digest);
#line 306
  return;
}
}
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 315
  desc.tfm = tfm;
#line 316
  desc.flags = 0U;
#line 318
  sg_init_table(& sg, 1U);
#line 319
  crypto_hash_init(& desc);
#line 321
  bvec = bio->bi_io_vec;
#line 321
  i = 0;
#line 321
  goto ldv_44915;
  ldv_44914: 
#line 322
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 323
  crypto_hash_update(& desc, & sg, sg.length);
#line 321
  bvec = bvec + 1;
#line 321
  i = i + 1;
  ldv_44915: ;
#line 321
  if ((int )bio->bi_vcnt > i) {
#line 322
    goto ldv_44914;
  } else {

  }
#line 325
  crypto_hash_final(& desc, (u8 *)digest);
#line 326
  return;
}
}
#line 328 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 330
  __mptr = (struct drbd_work  const  *)w;
#line 330
  e = (struct drbd_epoch_entry *)__mptr;
#line 335
  if (e->ldv_42864.block_id != 2205466966ULL) {
#line 335
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            335);
  } else {

  }
#line 337
  tmp = __builtin_expect(cancel != 0, 0L);
#line 337
  if (tmp != 0L) {
#line 338
    drbd_free_some_ee(mdev, e, 0);
#line 339
    return (1);
  } else {

  }
#line 342
  tmp___1 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 342
  if (tmp___1 != 0L) {
#line 343
    tmp___0 = crypto_hash_digestsize(mdev->csums_tfm);
#line 343
    digest_size = (int )tmp___0;
#line 344
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 345
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 346
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 348
      inc_rs_pending(mdev);
#line 349
      ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                   P_CSUM_RS_REQUEST);
#line 355
      kfree((void const   *)digest);
    } else {
#line 357
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 358
      ok = 0;
    }
  } else {
#line 361
    ok = 1;
  }
#line 363
  drbd_free_some_ee(mdev, e, 0);
#line 365
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 365
  if (tmp___2 != 0L) {
#line 366
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 367
  return (ok);
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 376
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 376
  if (tmp == 0) {
#line 377
    return (-5);
  } else {

  }
#line 379
  tmp___0 = drbd_rs_should_slow_down(mdev);
#line 379
  if (tmp___0 != 0) {
#line 380
    goto defer;
  } else {

  }
#line 384
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 385
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 386
    goto defer;
  } else {

  }
#line 388
  e->w.cb = & w_e_send_csum;
#line 389
  spin_lock_irq(& mdev->req_lock);
#line 390
  list_add(& e->w.list, & mdev->read_ee);
#line 391
  spin_unlock_irq(& mdev->req_lock);
#line 393
  atomic_add(size >> 9, & mdev->rs_sect_ev);
#line 394
  tmp___1 = drbd_submit_ee(mdev, e, 0U, 3);
#line 394
  if (tmp___1 == 0) {
#line 395
    return (0);
  } else {

  }
#line 400
  spin_lock_irq(& mdev->req_lock);
#line 401
  list_del(& e->w.list);
#line 402
  spin_unlock_irq(& mdev->req_lock);
#line 404
  drbd_free_some_ee(mdev, e, 0);
  defer: 
#line 406
  put_ldev(mdev);
#line 407
  return (-11);
}
}
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int queue ;
  int tmp ;

  {
#line 412
  mdev = (struct drbd_conf *)data;
#line 415
  queue = 1;
#line 416
  switch ((int )mdev->state.ldv_35401.conn) {
  case 18: 
#line 418
  mdev->resync_work.cb = & w_make_ov_request;
#line 419
  goto ldv_44941;
  case 17: 
#line 421
  mdev->resync_work.cb = & w_make_resync_request;
#line 422
  goto ldv_44941;
  default: 
#line 424
  queue = 0;
#line 425
  mdev->resync_work.cb = & w_resync_inactive;
  }
  ldv_44941: 
#line 429
  tmp = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 429
  if (tmp != 0 && queue != 0) {
#line 430
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 431
  return;
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_set(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 437
  i = 0;
#line 437
  goto ldv_44950;
  ldv_44949: 
#line 438
  *(fb->values + (unsigned long )i) = value;
#line 437
  i = i + 1;
  ldv_44950: ;
#line 437
  if ((unsigned int )i < fb->size) {
#line 438
    goto ldv_44949;
  } else {

  }

#line 442
  return;
}
}
#line 441 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int fifo_push(struct fifo_buffer *fb , int value ) 
{ 
  int ov ;
  unsigned int tmp ;

  {
#line 445
  ov = *(fb->values + (unsigned long )fb->head_index);
#line 446
  tmp = fb->head_index;
#line 446
  fb->head_index = fb->head_index + 1U;
#line 446
  *(fb->values + (unsigned long )tmp) = value;
#line 448
  if (fb->head_index >= fb->size) {
#line 449
    fb->head_index = 0U;
  } else {

  }
#line 451
  return (ov);
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_add_val(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 458
  i = 0;
#line 458
  goto ldv_44963;
  ldv_44962: 
#line 459
  *(fb->values + (unsigned long )i) = *(fb->values + (unsigned long )i) + value;
#line 458
  i = i + 1;
  ldv_44963: ;
#line 458
  if ((unsigned int )i < fb->size) {
#line 459
    goto ldv_44962;
  } else {

  }

#line 463
  return;
}
}
#line 462 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_rs_controller(struct drbd_conf *mdev ) 
{ 
  unsigned int sect_in ;
  unsigned int want ;
  int req_sect ;
  int correction ;
  int cps ;
  int steps ;
  int curr_corr ;
  int max_sect ;
  int tmp ;

  {
#line 473
  tmp = atomic_xchg(& mdev->rs_sect_in, 0);
#line 473
  sect_in = (unsigned int )tmp;
#line 474
  mdev->rs_in_flight = (int )((unsigned int )mdev->rs_in_flight - sect_in);
#line 476
  spin_lock(& mdev->peer_seq_lock);
#line 478
  steps = (int )mdev->rs_plan_s.size;
#line 480
  if ((unsigned int )mdev->rs_in_flight + sect_in == 0U) {
#line 481
    want = (unsigned int )(((mdev->sync_conf.rate * 50) / 250) * steps);
  } else {
#line 483
    want = mdev->sync_conf.c_fill_target != 0 ? (unsigned int )mdev->sync_conf.c_fill_target : (((unsigned int )mdev->sync_conf.c_delay_target * sect_in) * 250U) / 250U;
  }
#line 487
  correction = (int )((want - (unsigned int )mdev->rs_in_flight) - (unsigned int )mdev->rs_planed);
#line 490
  cps = correction / steps;
#line 491
  fifo_add_val(& mdev->rs_plan_s, cps);
#line 492
  mdev->rs_planed = mdev->rs_planed + cps * steps;
#line 495
  curr_corr = fifo_push(& mdev->rs_plan_s, 0);
#line 496
  spin_unlock(& mdev->peer_seq_lock);
#line 497
  mdev->rs_planed = mdev->rs_planed - curr_corr;
#line 499
  req_sect = (int )(sect_in + (unsigned int )curr_corr);
#line 500
  if (req_sect < 0) {
#line 501
    req_sect = 0;
  } else {

  }
#line 503
  max_sect = (mdev->sync_conf.c_max_rate * 50) / 250;
#line 504
  if (req_sect > max_sect) {
#line 505
    req_sect = max_sect;
  } else {

  }
#line 513
  return (req_sect);
}
}
#line 516 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_segment_size ;
  int number ;
  int rollback_i ;
  int size ;
  int pe ;
  int mx ;
  int align ;
  int queued ;
  int sndbuf ;
  int i ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  unsigned int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  unsigned long tmp___15 ;

  {
#line 521
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 521
  capacity = tmp;
#line 525
  i = 0;
#line 527
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 527
  if (tmp___0 != 0L) {
#line 528
    return (1);
  } else {

  }
#line 530
  tmp___1 = __builtin_expect((int )mdev->state.ldv_35401.conn <= 9, 0L);
#line 530
  if (tmp___1 != 0L) {
#line 531
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Confused in w_make_resync_request()! cstate < Connected");
#line 532
    return (0);
  } else {

  }
#line 535
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 272U) {
#line 536
    tmp___2 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35401.conn);
#line 536
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s in w_make_resync_request\n",
            tmp___2);
  } else {

  }
#line 539
  if (mdev->rs_total == 0UL) {
#line 541
    drbd_resync_finished(mdev);
#line 542
    return (1);
  } else {

  }
#line 545
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 545
  if (tmp___3 == 0) {
#line 550
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 551
    mdev->resync_work.cb = & w_resync_inactive;
#line 552
    return (1);
  } else {

  }
#line 557
  if (mdev->agreed_pro_version <= 93) {
#line 557
    tmp___4 = queue_max_segment_size(mdev->rq_queue);
#line 557
    max_segment_size = (int )tmp___4;
  } else {
#line 557
    max_segment_size = mdev->agreed_pro_version <= 94 ? 32768 : 131072;
  }
#line 561
  if (mdev->rs_plan_s.size != 0U) {
#line 562
    tmp___5 = drbd_rs_controller(mdev);
#line 562
    number = tmp___5 >> 3;
#line 563
    mdev->c_sync_rate = (number * 1000) / 25;
  } else {
#line 565
    mdev->c_sync_rate = mdev->sync_conf.rate;
#line 566
    number = (mdev->c_sync_rate * 25) / 1000;
  }
#line 574
  tmp___6 = drbd_rs_should_slow_down(mdev);
#line 574
  if (tmp___6 != 0) {
#line 575
    goto requeue;
  } else {

  }
#line 577
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 578
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 579
    mx = (int )((unsigned long )((mdev->data.socket)->sk)->sk_rcvbuf / 32UL);
  } else {
#line 581
    mx = 1;
  }
#line 582
  mutex_unlock(& mdev->data.mutex);
#line 585
  if (number > mx) {
#line 586
    mx = number;
  } else {

  }
#line 589
  pe = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 590
  if (pe + number > mx) {
#line 591
    number = mx - pe;
  } else {

  }
#line 594
  i = 0;
#line 594
  goto ldv_45009;
  ldv_45008: 
#line 596
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 597
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 598
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 599
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 601
    queued = 1;
#line 602
    sndbuf = 0;
  }
#line 604
  mutex_unlock(& mdev->data.mutex);
#line 605
  if (sndbuf / 2 < queued) {
#line 606
    goto requeue;
  } else {

  }
  next_sector: 
#line 609
  size = 4096;
#line 610
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 612
  if (bit == 0xffffffffffffffffUL) {
#line 613
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 614
    mdev->resync_work.cb = & w_resync_inactive;
#line 615
    put_ldev(mdev);
#line 616
    return (1);
  } else {

  }
#line 619
  sector = bit << 3;
#line 621
  tmp___7 = drbd_try_rs_begin_io(mdev, sector);
#line 621
  if (tmp___7 != 0) {
#line 622
    mdev->bm_resync_fo = bit;
#line 623
    goto requeue;
  } else {

  }
#line 625
  mdev->bm_resync_fo = bit + 1UL;
#line 627
  tmp___8 = drbd_bm_test_bit(mdev, bit);
#line 627
  tmp___9 = __builtin_expect(tmp___8 == 0, 0L);
#line 627
  if (tmp___9 != 0L) {
#line 628
    drbd_rs_complete_io(mdev, sector);
#line 629
    goto next_sector;
  } else {

  }
#line 639
  align = 1;
#line 640
  rollback_i = i;
  ldv_44997: ;
#line 642
  if (size + 4096 > max_segment_size) {
#line 643
    goto ldv_44996;
  } else {

  }
#line 646
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 647
    goto ldv_44996;
  } else {

  }
#line 650
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 651
    goto ldv_44996;
  } else {

  }
#line 657
  tmp___10 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 657
  if (tmp___10 != 1) {
#line 658
    goto ldv_44996;
  } else {

  }
#line 659
  bit = bit + 1UL;
#line 660
  size = size + 4096;
#line 661
  if (4096 << align <= size) {
#line 662
    align = align + 1;
  } else {

  }
#line 663
  i = i + 1;
#line 664
  goto ldv_44997;
  ldv_44996: ;
#line 667
  if (size > 4096) {
#line 668
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 672
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 673
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 674
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 675
    tmp___11 = read_for_csum(mdev, sector, size);
#line 675
    switch (tmp___11) {
    case -5: 
#line 677
    put_ldev(mdev);
#line 678
    return (0);
    case -11: 
#line 680
    drbd_rs_complete_io(mdev, sector);
#line 681
    mdev->bm_resync_fo = sector >> 3;
#line 682
    i = rollback_i;
#line 683
    goto requeue;
    case 0: ;
#line 686
    goto ldv_45001;
    default: 
#line 688
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"),
                         "i" (688), "i" (12UL));
    ldv_45003: ;
#line 688
    goto ldv_45003;
    }
    ldv_45001: ;
  } else {
#line 691
    inc_rs_pending(mdev);
#line 692
    tmp___14 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 692
    if (tmp___14 == 0) {
#line 694
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 695
      atomic_dec(& mdev->rs_pending_cnt);
#line 695
      tmp___13 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 695
      if (tmp___13 < 0) {
#line 695
        tmp___12 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 695
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 695, tmp___12);
      } else {

      }
#line 696
      put_ldev(mdev);
#line 697
      return (0);
    } else {

    }
  }
#line 594
  i = i + 1;
  ldv_45009: ;
#line 594
  if (i < number) {
#line 595
    goto ldv_45008;
  } else {

  }
#line 702
  tmp___15 = drbd_bm_bits(mdev);
#line 702
  if (mdev->bm_resync_fo >= tmp___15) {
#line 709
    mdev->resync_work.cb = & w_resync_inactive;
#line 710
    put_ldev(mdev);
#line 711
    return (1);
  } else {

  }
  requeue: 
#line 715
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 716
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 717
  put_ldev(mdev);
#line 718
  return (1);
}
}
#line 721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 725
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 725
  capacity = tmp;
#line 727
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 727
  if (tmp___0 != 0L) {
#line 728
    return (1);
  } else {

  }
#line 730
  tmp___1 = __builtin_expect((int )mdev->state.ldv_35401.conn <= 9, 0L);
#line 730
  if (tmp___1 != 0L) {
#line 731
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Confused in w_make_ov_request()! cstate < Connected");
#line 732
    return (0);
  } else {

  }
#line 735
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 736
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 736
  if (tmp___2 > number) {
#line 737
    goto requeue;
  } else {

  }
#line 739
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 739
  number = number - tmp___3;
#line 741
  sector = mdev->ov_position;
#line 742
  i = 0;
#line 742
  goto ldv_45027;
  ldv_45026: ;
#line 743
  if (sector >= capacity) {
#line 744
    mdev->resync_work.cb = & w_resync_inactive;
#line 745
    return (1);
  } else {

  }
#line 748
  size = 4096;
#line 750
  tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 750
  if (tmp___4 != 0) {
#line 751
    mdev->ov_position = sector;
#line 752
    goto requeue;
  } else {

  }
#line 755
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 756
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 758
  inc_rs_pending(mdev);
#line 759
  tmp___7 = drbd_send_ov_request(mdev, sector, size);
#line 759
  if (tmp___7 == 0) {
#line 760
    atomic_dec(& mdev->rs_pending_cnt);
#line 760
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 760
    if (tmp___6 < 0) {
#line 760
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 760
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 760, tmp___5);
    } else {

    }
#line 761
    return (0);
  } else {

  }
#line 763
  sector = sector + 8UL;
#line 742
  i = i + 1;
  ldv_45027: ;
#line 742
  if (i < number) {
#line 743
    goto ldv_45026;
  } else {

  }
#line 765
  mdev->ov_position = sector;
  requeue: 
#line 768
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 769
  return (1);
}
}
#line 773 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 775
  kfree((void const   *)w);
#line 776
  ov_oos_print(mdev);
#line 777
  drbd_resync_finished(mdev);
#line 779
  return (1);
}
}
#line 782 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 784
  kfree((void const   *)w);
#line 786
  drbd_resync_finished(mdev);
#line 788
  return (1);
}
}
#line 791 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 793
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 794
  request_ping(mdev);
#line 795
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 795
  if (tmp != 0 || (int )mdev->state.ldv_35401.conn <= 9) {
#line 795
    goto ldv_45042;
  } else {

  }
#line 795
  tmp___0 = get_current();
#line 795
  __wait.flags = 0U;
#line 795
  __wait.private = (void *)tmp___0;
#line 795
  __wait.func = & autoremove_wake_function;
#line 795
  __wait.task_list.next = & __wait.task_list;
#line 795
  __wait.task_list.prev = & __wait.task_list;
  ldv_45045: 
#line 795
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 795
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 795
  if (tmp___1 != 0 || (int )mdev->state.ldv_35401.conn <= 9) {
#line 795
    goto ldv_45044;
  } else {

  }
#line 795
  schedule();
#line 795
  goto ldv_45045;
  ldv_45044: 
#line 795
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_45042: ;
#line 798
  return;
}
}
#line 799 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;
  int tmp___3 ;

  {
#line 805
  khelper_cmd = 0;
#line 810
  tmp___1 = drbd_rs_del_all(mdev);
#line 810
  if (tmp___1 != 0) {
#line 816
    drbd_kick_lo(mdev);
#line 817
    tmp = get_current();
#line 817
    tmp->state = 1L;
#line 818
    schedule_timeout(25L);
#line 819
    tmp___0 = kmalloc___0(24UL, 32U);
#line 819
    w = (struct drbd_work *)tmp___0;
#line 820
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 821
      w->cb = & w_resync_finished;
#line 822
      drbd_queue_work(& mdev->data.work, w);
#line 823
      return (1);
    } else {

    }
#line 825
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 828
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 829
  if (dt == 0UL) {
#line 830
    dt = 1UL;
  } else {

  }
#line 831
  db = mdev->rs_total;
#line 832
  dbdt = db / dt << 2;
#line 833
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 835
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 835
  if (tmp___2 == 0) {
#line 836
    goto out;
  } else {

  }
#line 838
  ping_peer(mdev);
#line 840
  spin_lock_irq(& mdev->req_lock);
#line 841
  os = mdev->state;
#line 845
  if ((int )os.ldv_35401.conn <= 10) {
#line 846
    goto out_unlock;
  } else {

  }
#line 848
  ns = os;
#line 849
  ns.ldv_35401.conn = 10U;
#line 851
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? (char *)"Online verify " : (char *)"Resync",
            mdev->rs_paused + dt, mdev->rs_paused, dbdt);
#line 856
  n_oos = drbd_bm_total_weight(mdev);
#line 858
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 859
    if (n_oos != 0UL) {
#line 860
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 862
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 865
      if (mdev->rs_failed != n_oos) {
#line 865
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                865);
      } else {

      }
#line 867
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 868
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 870
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 871
        s = mdev->rs_same_csum;
#line 872
        t = mdev->rs_total;
#line 873
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 876
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal check sums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 885
  if (mdev->rs_failed != 0UL) {
#line 886
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 888
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 889
      ns.ldv_35401.disk = 4U;
#line 890
      ns.ldv_35401.pdsk = 8U;
    } else {
#line 892
      ns.ldv_35401.disk = 8U;
#line 893
      ns.ldv_35401.pdsk = 4U;
    }
  } else {
#line 896
    ns.ldv_35401.disk = 8U;
#line 897
    ns.ldv_35401.pdsk = 8U;
#line 899
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 900
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 902
        i = 1;
#line 902
        goto ldv_45064;
        ldv_45063: 
#line 903
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 902
        i = i + 1;
        ldv_45064: ;
#line 902
        if (i <= 3) {
#line 903
          goto ldv_45063;
        } else {

        }
#line 904
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 905
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 907
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 911
    drbd_uuid_set_bm(mdev, 0ULL);
#line 913
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 917
      i___0 = 0;
#line 917
      goto ldv_45068;
      ldv_45067: 
#line 918
      *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 917
      i___0 = i___0 + 1;
      ldv_45068: ;
#line 917
      if (i___0 <= 3) {
#line 918
        goto ldv_45067;
      } else {

      }

    } else {

    }
  }
#line 922
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 924
  spin_unlock_irq(& mdev->req_lock);
#line 925
  put_ldev(mdev);
  out: 
#line 927
  mdev->rs_total = 0UL;
#line 928
  mdev->rs_failed = 0UL;
#line 929
  mdev->rs_paused = 0UL;
#line 930
  mdev->ov_start_sector = 0UL;
#line 932
  drbd_md_sync(mdev);
#line 934
  tmp___3 = test_and_clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 934
  if (tmp___3 != 0) {
#line 935
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, due to failed kmalloc\n");
#line 936
    drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished");
  } else {

  }
#line 939
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 940
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 942
  return (1);
}
}
#line 946 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int i ;
  int tmp ;

  {
#line 948
  tmp = drbd_ee_has_active_page(e);
#line 948
  if (tmp != 0) {
#line 950
    i = (int )(((unsigned long )e->size + 4095UL) >> 12);
#line 951
    atomic_add(i, & mdev->pp_in_use_by_net);
#line 952
    atomic_sub(i, & mdev->pp_in_use);
#line 953
    spin_lock_irq(& mdev->req_lock);
#line 954
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 955
    spin_unlock_irq(& mdev->req_lock);
#line 956
    __wake_up(& drbd_pp_wait, 3U, 1, 0);
  } else {
#line 958
    drbd_free_some_ee(mdev, e, 0);
  }
#line 959
  return;
}
}
#line 967 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 969
  __mptr = (struct drbd_work  const  *)w;
#line 969
  e = (struct drbd_epoch_entry *)__mptr;
#line 972
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 972
  if (tmp___1 != 0L) {
#line 973
    drbd_free_some_ee(mdev, e, 0);
#line 974
    atomic_dec(& mdev->unacked_cnt);
#line 974
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 974
    if (tmp___0 < 0) {
#line 974
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 974
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 974, tmp);
    } else {

    }
#line 975
    return (1);
  } else {

  }
#line 978
  tmp___3 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 978
  if (tmp___3 != 0L) {
#line 979
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 981
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 981
    if (tmp___2 != 0) {
#line 982
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 985
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 988
  atomic_dec(& mdev->unacked_cnt);
#line 988
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 988
  if (tmp___5 < 0) {
#line 988
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 988
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 988, tmp___4);
  } else {

  }
#line 990
  move_to_net_ee_or_free(mdev, e);
#line 992
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 992
  if (tmp___6 != 0L) {
#line 993
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 994
  return (ok);
}
}
#line 1003 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1005
  __mptr = (struct drbd_work  const  *)w;
#line 1005
  e = (struct drbd_epoch_entry *)__mptr;
#line 1008
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1008
  if (tmp___1 != 0L) {
#line 1009
    drbd_free_some_ee(mdev, e, 0);
#line 1010
    atomic_dec(& mdev->unacked_cnt);
#line 1010
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1010
    if (tmp___0 < 0) {
#line 1010
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1010
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 1010, tmp);
    } else {

    }
#line 1011
    return (1);
  } else {

  }
#line 1014
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1014
  if (tmp___2 != 0) {
#line 1015
    drbd_rs_complete_io(mdev, e->sector);
#line 1016
    put_ldev(mdev);
  } else {

  }
#line 1019
  tmp___6 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1019
  if (tmp___6 != 0L) {
#line 1020
    tmp___4 = __builtin_expect((int )mdev->state.ldv_35401.pdsk > 3, 1L);
#line 1020
    if (tmp___4 != 0L) {
#line 1021
      inc_rs_pending(mdev);
#line 1022
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    } else {
#line 1024
      tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1024
      if (tmp___3 != 0) {
#line 1025
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
      } else {

      }
#line 1027
      ok = 1;
    }
  } else {
#line 1030
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1030
    if (tmp___5 != 0) {
#line 1031
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 1034
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1037
    drbd_rs_failed_io(mdev, e->sector, (int )e->size);
  }
#line 1040
  atomic_dec(& mdev->unacked_cnt);
#line 1040
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1040
  if (tmp___8 < 0) {
#line 1040
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1040
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 1040, tmp___7);
  } else {

  }
#line 1042
  move_to_net_ee_or_free(mdev, e);
#line 1044
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1044
  if (tmp___9 != 0L) {
#line 1045
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1046
  return (ok);
}
}
#line 1049 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1051
  __mptr = (struct drbd_work  const  *)w;
#line 1051
  e = (struct drbd_epoch_entry *)__mptr;
#line 1054
  digest = 0;
#line 1055
  eq = 0;
#line 1057
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1057
  if (tmp___1 != 0L) {
#line 1058
    drbd_free_some_ee(mdev, e, 0);
#line 1059
    atomic_dec(& mdev->unacked_cnt);
#line 1059
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1059
    if (tmp___0 < 0) {
#line 1059
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1059
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 1059, tmp);
    } else {

    }
#line 1060
    return (1);
  } else {

  }
#line 1063
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1063
  if (tmp___2 != 0) {
#line 1064
    drbd_rs_complete_io(mdev, e->sector);
#line 1065
    put_ldev(mdev);
  } else {

  }
#line 1068
  di = e->ldv_42864.digest;
#line 1070
  tmp___6 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1070
  if (tmp___6 != 0L) {
#line 1074
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1075
      tmp___3 = crypto_hash_digestsize(mdev->csums_tfm);
#line 1075
      digest_size = (int )tmp___3;
#line 1076
      if (di->digest_size != digest_size) {
#line 1076
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                1076);
      } else {

      }
#line 1077
      digest = kmalloc___0((size_t )digest_size, 16U);
    } else {

    }
#line 1079
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1080
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 1081
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1081
      eq = tmp___4 == 0;
#line 1082
      kfree((void const   *)digest);
    } else {

    }
#line 1085
    if (eq != 0) {
#line 1086
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1086U);
#line 1088
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1089
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1091
      inc_rs_pending(mdev);
#line 1092
      e->ldv_42864.block_id = 0xffffffffffffffffULL;
#line 1093
      e->flags = e->flags & 0xffffffffffffffdfUL;
#line 1094
      kfree((void const   *)di);
#line 1095
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1098
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1099
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1099
    if (tmp___5 != 0) {
#line 1100
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1103
  atomic_dec(& mdev->unacked_cnt);
#line 1103
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1103
  if (tmp___8 < 0) {
#line 1103
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1103
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1103, tmp___7);
  } else {

  }
#line 1104
  move_to_net_ee_or_free(mdev, e);
#line 1106
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1106
  if (tmp___9 != 0L) {
#line 1107
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1108
  return (ok);
}
}
#line 1111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1113
  __mptr = (struct drbd_work  const  *)w;
#line 1113
  e = (struct drbd_epoch_entry *)__mptr;
#line 1116
  ok = 1;
#line 1118
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1118
  if (tmp != 0L) {
#line 1119
    goto out;
  } else {

  }
#line 1121
  tmp___0 = __builtin_expect((e->flags & 16UL) != 0UL, 0L);
#line 1121
  if (tmp___0 != 0L) {
#line 1122
    goto out;
  } else {

  }
#line 1124
  tmp___1 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1124
  digest_size = (int )tmp___1;
#line 1126
  digest = kmalloc___0((size_t )digest_size, 16U);
#line 1127
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1128
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1129
    inc_rs_pending(mdev);
#line 1130
    ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                 P_OV_REPLY);
#line 1132
    if (ok == 0) {
#line 1133
      atomic_dec(& mdev->rs_pending_cnt);
#line 1133
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1133
      if (tmp___3 < 0) {
#line 1133
        tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1133
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_e_end_ov_req", 1133, tmp___2);
      } else {

      }
    } else {

    }
#line 1134
    kfree((void const   *)digest);
  } else {

  }
  out: 
#line 1138
  drbd_free_some_ee(mdev, e, 0);
#line 1140
  atomic_dec(& mdev->unacked_cnt);
#line 1140
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1140
  if (tmp___5 < 0) {
#line 1140
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1140
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1140, tmp___4);
  } else {

  }
#line 1142
  return (ok);
}
}
#line 1145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1147
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1148
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1150
    mdev->ov_last_oos_start = sector;
#line 1151
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1153
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1153U);
#line 1154
  set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1155
  return;
}
}
#line 1157 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1159
  __mptr = (struct drbd_work  const  *)w;
#line 1159
  e = (struct drbd_epoch_entry *)__mptr;
#line 1163
  eq = 0;
#line 1165
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1165
  if (tmp___1 != 0L) {
#line 1166
    drbd_free_some_ee(mdev, e, 0);
#line 1167
    atomic_dec(& mdev->unacked_cnt);
#line 1167
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1167
    if (tmp___0 < 0) {
#line 1167
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1167
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1167, tmp);
    } else {

    }
#line 1168
    return (1);
  } else {

  }
#line 1173
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1173
  if (tmp___2 != 0) {
#line 1174
    drbd_rs_complete_io(mdev, e->sector);
#line 1175
    put_ldev(mdev);
  } else {

  }
#line 1178
  di = e->ldv_42864.digest;
#line 1180
  tmp___6 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1180
  if (tmp___6 != 0L) {
#line 1181
    tmp___3 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1181
    digest_size = (int )tmp___3;
#line 1182
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 1183
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1184
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1186
      if (di->digest_size != digest_size) {
#line 1186
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                1186);
      } else {

      }
#line 1187
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1187
      eq = tmp___4 == 0;
#line 1188
      kfree((void const   *)digest);
    } else {

    }
  } else {
#line 1191
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1192
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_ov_reply");
#line 1192
    if (tmp___5 != 0) {
#line 1193
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1196
  atomic_dec(& mdev->unacked_cnt);
#line 1196
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1196
  if (tmp___8 < 0) {
#line 1196
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1196
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1196, tmp___7);
  } else {

  }
#line 1197
  if (eq == 0) {
#line 1198
    drbd_ov_oos_found(mdev, e->sector, (int )e->size);
  } else {
#line 1200
    ov_oos_print(mdev);
  }
#line 1202
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, e->sector, (int )e->size, eq != 0 ? 4711ULL : 4712ULL);
#line 1205
  drbd_free_some_ee(mdev, e, 0);
#line 1207
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1207
  if (mdev->ov_left == 0UL) {
#line 1208
    ov_oos_print(mdev);
#line 1209
    drbd_resync_finished(mdev);
  } else {

  }
#line 1212
  return (ok);
}
}
#line 1215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1217
  __mptr = (struct drbd_work  const  *)w;
#line 1217
  b = (struct drbd_wq_barrier *)__mptr;
#line 1218
  complete(& b->done);
#line 1219
  return (1);
}
}
#line 1222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1224
  __mptr = (struct drbd_work  const  *)w;
#line 1224
  b = (struct drbd_tl_epoch *)__mptr;
#line 1225
  p = & mdev->data.sbuf.barrier;
#line 1226
  ok = 1;
#line 1233
  spin_lock_irq(& mdev->req_lock);
#line 1234
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_35401.conn <= 9) {
#line 1235
    cancel = 1;
  } else {

  }
#line 1236
  spin_unlock_irq(& mdev->req_lock);
#line 1237
  if (cancel != 0) {
#line 1238
    return (1);
  } else {

  }
#line 1240
  tmp = drbd_get_data_sock(mdev);
#line 1240
  if (tmp == 0) {
#line 1241
    return (0);
  } else {

  }
#line 1242
  p->barrier = b->br_number;
#line 1246
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header80 *)p,
                      16UL, 0U);
#line 1248
  drbd_put_data_sock(mdev);
#line 1250
  return (ok);
}
}
#line 1253 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1255
  if (cancel != 0) {
#line 1256
    return (1);
  } else {

  }
#line 1257
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1257
  return (tmp);
}
}
#line 1266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1268
  __mptr = (struct drbd_work  const  *)w;
#line 1268
  req = (struct drbd_request *)__mptr;
#line 1271
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1271
  if (tmp != 0L) {
#line 1272
    req_mod(req, send_canceled);
#line 1273
    return (1);
  } else {

  }
#line 1276
  ok = drbd_send_dblock(mdev, req);
#line 1277
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1279
  return (ok);
}
}
#line 1288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1290
  __mptr = (struct drbd_work  const  *)w;
#line 1290
  req = (struct drbd_request *)__mptr;
#line 1293
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1293
  if (tmp != 0L) {
#line 1294
    req_mod(req, send_canceled);
#line 1295
    return (1);
  } else {

  }
#line 1298
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1301
  if (ok == 0) {
#line 1304
    if ((int )mdev->state.ldv_35401.conn > 9) {
#line 1305
      val.i = 0U;
#line 1305
      val.ldv_35401.conn = 5U;
#line 1305
      mask.i = 0U;
#line 1305
      mask.ldv_35401.conn = 31U;
#line 1305
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1307
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1309
  return (ok);
}
}
#line 1312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 1314
  __mptr = (struct drbd_work  const  *)w;
#line 1314
  req = (struct drbd_request *)__mptr;
#line 1316
  if ((int )(req->master_bio)->bi_rw & 1 && (req->rq_state & 2048UL) != 0UL) {
#line 1317
    drbd_al_begin_io(mdev, req->sector);
  } else {

  }
#line 1323
  drbd_req_make_private_bio(req, req->master_bio);
#line 1324
  (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1325
  generic_make_request(req->private_bio);
#line 1327
  return (1);
}
}
#line 1330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1332
  odev = mdev;
  ldv_45231: ;
#line 1335
  if (odev->sync_conf.after == -1) {
#line 1336
    return (1);
  } else {

  }
#line 1337
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1338
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1338
  if (_b != 0) {
#line 1338
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1338);
  } else {

  }
#line 1338
  if (_b != 0) {
#line 1338
    return (1);
  } else {

  }
#line 1339
  if (((((int )odev->state.ldv_35401.conn > 15 && (int )odev->state.ldv_35401.conn <= 21) || (unsigned int )*((unsigned char *)odev + 2014UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2014UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2014UL) != 0U) {
#line 1343
    return (0);
  } else {

  }
#line 1344
  goto ldv_45231;
}
}
#line 1353 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1356
  rv = 0;
#line 1358
  i = 0;
#line 1358
  goto ldv_45242;
  ldv_45241: 
#line 1359
  odev = minor_to_mdev((unsigned int )i);
#line 1360
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1361
    goto ldv_45238;
  } else {

  }
#line 1362
  if ((unsigned int )*((unsigned short *)odev + 1006UL) == 0U && (unsigned int )*((unsigned char *)odev + 2013UL) == 0U) {
#line 1363
    goto ldv_45238;
  } else {

  }
#line 1364
  tmp___0 = _drbd_may_sync_now(odev);
#line 1364
  if (tmp___0 == 0) {
#line 1365
    __ns.i = odev->state.i;
#line 1365
    __ns.ldv_35401.aftr_isp = 1U;
#line 1365
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1365
    rv = (tmp != 2) | rv;
  } else {

  }
  ldv_45238: 
#line 1358
  i = i + 1;
  ldv_45242: ;
#line 1358
  if ((unsigned int )i < minor_count) {
#line 1359
    goto ldv_45241;
  } else {

  }

#line 1369
  return (rv);
}
}
#line 1378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1381
  rv = 0;
#line 1383
  i = 0;
#line 1383
  goto ldv_45254;
  ldv_45253: 
#line 1384
  odev = minor_to_mdev((unsigned int )i);
#line 1385
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1386
    goto ldv_45250;
  } else {

  }
#line 1387
  if ((unsigned int )*((unsigned short *)odev + 1006UL) == 0U && (unsigned int )*((unsigned char *)odev + 2013UL) == 0U) {
#line 1388
    goto ldv_45250;
  } else {

  }
#line 1389
  if ((unsigned int )*((unsigned char *)odev + 2014UL) != 0U) {
#line 1390
    tmp___0 = _drbd_may_sync_now(odev);
#line 1390
    if (tmp___0 != 0) {
#line 1391
      __ns.i = odev->state.i;
#line 1391
      __ns.ldv_35401.aftr_isp = 0U;
#line 1391
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1391
      rv = (tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_45250: 
#line 1383
  i = i + 1;
  ldv_45254: ;
#line 1383
  if ((unsigned int )i < minor_count) {
#line 1384
    goto ldv_45253;
  } else {

  }

#line 1396
  return (rv);
}
}
#line 1399 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1401
  _raw_write_lock_irq(& global_state_lock);
#line 1402
  _drbd_resume_next(mdev);
#line 1403
  _raw_write_unlock_irq(& global_state_lock);
#line 1404
  return;
}
}
#line 1406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1408
  _raw_write_lock_irq(& global_state_lock);
#line 1409
  _drbd_pause_after(mdev);
#line 1410
  _raw_write_unlock_irq(& global_state_lock);
#line 1411
  return;
}
}
#line 1413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1417
  if (o_minor == -1) {
#line 1418
    return (101);
  } else {

  }
#line 1419
  if (o_minor < -1) {
#line 1420
    return (132);
  } else {
#line 1419
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1419
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1420
      return (132);
    } else {

    }
  }
#line 1423
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_45267: ;
#line 1425
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1426
    return (133);
  } else {

  }
#line 1429
  if (odev->sync_conf.after == -1) {
#line 1430
    return (101);
  } else {

  }
#line 1433
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1434
  goto ldv_45267;
}
}
#line 1437 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1442
  _raw_write_lock_irq(& global_state_lock);
#line 1443
  retcode = sync_after_error(mdev, na);
#line 1444
  if (retcode == 101) {
#line 1445
    mdev->sync_conf.after = na;
    ldv_45274: 
#line 1447
    changes = _drbd_pause_after(mdev);
#line 1448
    tmp = _drbd_resume_next(mdev);
#line 1448
    changes = tmp | changes;
#line 1449
    if (changes != 0) {
#line 1450
      goto ldv_45274;
    } else {

    }

  } else {

  }
#line 1451
  _raw_write_unlock_irq(& global_state_lock);
#line 1452
  return (retcode);
}
}
#line 1463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  u64 uuid ;
  int tmp___0 ;
  unsigned long tw ;
  unsigned long tmp___1 ;
  unsigned long now ;
  int i ;
  char const   *tmp___2 ;

  {
#line 1468
  if ((int )mdev->state.ldv_35401.conn > 15) {
#line 1469
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1470
    return;
  } else {

  }
#line 1474
  drbd_rs_cancel_all(mdev);
#line 1476
  if ((unsigned int )side == 17U) {
#line 1480
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1481
    r = (r >> 8) & 255;
#line 1482
    if (r > 0) {
#line 1483
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1485
      val.i = 0U;
#line 1485
      val.ldv_35401.conn = 1U;
#line 1485
      mask.i = 0U;
#line 1485
      mask.ldv_35401.conn = 31U;
#line 1485
      drbd_force_state(mdev, mask, val);
#line 1486
      return;
    } else {

    }
  } else {

  }
#line 1490
  drbd_state_lock(mdev);
#line 1492
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1492
  if (tmp == 0) {
#line 1493
    drbd_state_unlock(mdev);
#line 1494
    return;
  } else {

  }
#line 1497
  if ((unsigned int )side == 17U) {
#line 1498
    mdev->bm_resync_fo = 0UL;
  } else {
#line 1502
    get_random_bytes((void *)(& uuid), 8);
#line 1503
    drbd_uuid_set(mdev, 1, uuid);
#line 1504
    drbd_send_sync_uuid(mdev, uuid);
#line 1506
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 16U) {
#line 1506
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1506);
    } else {

    }
  }
#line 1509
  _raw_write_lock_irq(& global_state_lock);
#line 1510
  ns = mdev->state;
#line 1512
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1512
  ns.ldv_35401.aftr_isp = tmp___0 == 0;
#line 1514
  ns.ldv_35401.conn = (unsigned char )side;
#line 1516
  if ((unsigned int )side == 17U) {
#line 1517
    ns.ldv_35401.disk = 4U;
  } else {
#line 1519
    ns.ldv_35401.pdsk = 4U;
  }
#line 1521
  r = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1522
  ns = mdev->state;
#line 1524
  if ((int )ns.ldv_35401.conn <= 9) {
#line 1525
    r = 0;
  } else {

  }
#line 1527
  if (r == 1) {
#line 1528
    tmp___1 = drbd_bm_total_weight(mdev);
#line 1528
    tw = tmp___1;
#line 1529
    now = jiffies;
#line 1532
    mdev->rs_failed = 0UL;
#line 1533
    mdev->rs_paused = 0UL;
#line 1534
    mdev->rs_same_csum = 0UL;
#line 1535
    mdev->rs_last_events = 0;
#line 1536
    mdev->rs_last_sect_ev = 0;
#line 1537
    mdev->rs_total = tw;
#line 1538
    mdev->rs_start = now;
#line 1539
    i = 0;
#line 1539
    goto ldv_45291;
    ldv_45290: 
#line 1540
    mdev->rs_mark_left[i] = tw;
#line 1541
    mdev->rs_mark_time[i] = now;
#line 1539
    i = i + 1;
    ldv_45291: ;
#line 1539
    if (i <= 7) {
#line 1540
      goto ldv_45290;
    } else {

    }
#line 1543
    _drbd_pause_after(mdev);
  } else {

  }
#line 1545
  _raw_write_unlock_irq(& global_state_lock);
#line 1546
  put_ldev(mdev);
#line 1548
  if (r == 1) {
#line 1549
    tmp___2 = drbd_conn_str((enum drbd_conns )ns.ldv_35401.conn);
#line 1549
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___2, mdev->rs_total << 2, mdev->rs_total);
#line 1554
    if (mdev->agreed_pro_version <= 94 && mdev->rs_total == 0UL) {
#line 1565
      if ((unsigned int )side == 16U) {
#line 1566
        schedule_timeout_interruptible((long )((mdev->net_conf)->ping_int * 250 + ((mdev->net_conf)->ping_timeo * 250) / 9));
      } else {

      }
#line 1569
      drbd_resync_finished(mdev);
    } else {

    }
#line 1572
    atomic_set(& mdev->rs_sect_in, 0);
#line 1573
    atomic_set(& mdev->rs_sect_ev, 0);
#line 1574
    mdev->rs_in_flight = 0;
#line 1575
    mdev->rs_planed = 0;
#line 1576
    spin_lock(& mdev->peer_seq_lock);
#line 1577
    fifo_set(& mdev->rs_plan_s, 0);
#line 1578
    spin_unlock(& mdev->peer_seq_lock);
#line 1583
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1584
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1586
    drbd_md_sync(mdev);
  } else {

  }
#line 1588
  drbd_state_unlock(mdev);
#line 1589
  return;
}
}
#line 1591 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1593
  mdev = thi->mdev;
#line 1594
  w = 0;
#line 1595
  work_list.next = & work_list;
#line 1595
  work_list.prev = & work_list;
#line 1596
  intr = 0;
#line 1598
  tmp = mdev_to_minor(mdev);
#line 1598
  tmp___0 = get_current();
#line 1598
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1600
  goto ldv_45304;
  ldv_45314: 
#line 1601
  drbd_thread_current_set_cpu(mdev);
#line 1603
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1603
  if (tmp___1 != 0) {
#line 1604
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1605
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1606
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1607
    mutex_unlock(& mdev->data.mutex);
#line 1609
    intr = down_interruptible(& mdev->data.work.s);
#line 1611
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1612
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1613
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1614
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 1617
  if (intr != 0) {
#line 1618
    if (intr != -4) {
#line 1618
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1618);
    } else {

    }
#line 1619
    tmp___2 = get_current();
#line 1619
    flush_signals(tmp___2);
#line 1620
    tmp___3 = get_t_state(thi);
#line 1620
    _b = (unsigned int )tmp___3 == 1U;
#line 1620
    if (_b != 0) {
#line 1620
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1620);
    } else {

    }
#line 1620
    if (_b != 0) {
#line 1621
      goto ldv_45304;
    } else {

    }
#line 1622
    goto ldv_45305;
  } else {

  }
#line 1625
  tmp___4 = get_t_state(thi);
#line 1625
  if ((unsigned int )tmp___4 != 1U) {
#line 1626
    goto ldv_45305;
  } else {

  }
#line 1631
  w = 0;
#line 1632
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1633
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1633
  _b___0 = tmp___5 != 0;
#line 1633
  if (_b___0 != 0) {
#line 1633
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1633);
  } else {

  }
#line 1633
  if (_b___0 != 0) {
#line 1645
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1646
    goto ldv_45304;
  } else {

  }
#line 1648
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1648
  w = (struct drbd_work *)__mptr;
#line 1649
  list_del_init(& w->list);
#line 1650
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1652
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_35401.conn <= 9);
#line 1652
  if (tmp___6 == 0) {
#line 1654
    if ((int )mdev->state.ldv_35401.conn > 9) {
#line 1656
      val.i = 0U;
#line 1656
      val.ldv_35401.conn = 5U;
#line 1656
      mask.i = 0U;
#line 1656
      mask.ldv_35401.conn = 31U;
#line 1656
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_45304: 
#line 1600
  tmp___7 = get_t_state(thi);
#line 1600
  if ((unsigned int )tmp___7 == 1U) {
#line 1601
    goto ldv_45314;
  } else {

  }
  ldv_45305: 
#line 1659
  tmp___8 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1659
  if (tmp___8 == 0) {
#line 1659
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1659);
  } else {

  }
#line 1660
  tmp___9 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1660
  if (tmp___9 == 0) {
#line 1660
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1660);
  } else {

  }
#line 1662
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1663
  i = 0;
#line 1664
  goto ldv_45321;
  ldv_45320: 
#line 1665
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1666
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1668
  goto ldv_45318;
  ldv_45317: 
#line 1669
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1669
  w = (struct drbd_work *)__mptr___0;
#line 1670
  list_del_init(& w->list);
#line 1671
  (*(w->cb))(mdev, w, 1);
#line 1672
  i = i + 1;
  ldv_45318: 
#line 1668
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1668
  if (tmp___10 == 0) {
#line 1669
    goto ldv_45317;
  } else {

  }
#line 1675
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_45321: 
#line 1664
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1664
  if (tmp___11 == 0) {
#line 1665
    goto ldv_45320;
  } else {

  }
#line 1677
  sema_init(& mdev->data.work.s, 0);
#line 1683
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1685
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 0U || (unsigned int )*((unsigned short *)mdev + 1006UL) != 0U) {
#line 1685
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1685);
  } else {

  }
#line 1688
  drbd_thread_stop(& mdev->receiver);
#line 1689
  drbd_mdev_cleanup(mdev);
#line 1691
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1693
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1694
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1695
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1697
  return (0);
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 382 "include/linux/kernel.h"
extern void dump_stack(void) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 78
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 147 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 149
  __list_del(list->prev, list->next);
#line 150
  list_add(list, head);
#line 151
  return;
}
}
#line 568 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 570
  h->next = 0;
#line 571
  h->pprev = 0;
#line 572
  return;
}
}
#line 574 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 576
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 584 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 586
  next = n->next;
#line 587
  pprev = n->pprev;
#line 588
  *pprev = next;
#line 589
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 590
    next->pprev = pprev;
  } else {

  }
#line 591
  return;
}
}
#line 600 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 602
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 602
  if (tmp == 0) {
#line 603
    __hlist_del(n);
#line 604
    INIT_HLIST_NODE(n);
  } else {

  }
#line 606
  return;
}
}
#line 608 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 610
  first = h->first;
#line 611
  n->next = first;
#line 612
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 613
    first->pprev = & n->next;
  } else {

  }
#line 614
  h->first = n;
#line 615
  n->pprev = & h->first;
#line 616
  return;
}
}
#line 85 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 87
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 87
  return (tmp);
}
}
#line 135 "include/linux/mutex.h"
extern int mutex_lock_interruptible_nested(struct mutex * , unsigned int  ) ;
#line 46 "include/linux/delay.h"
extern void msleep(unsigned int  ) ;
#line 253 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 329 "include/linux/gfp.h"
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 78 "include/linux/random.h"
extern u32 random32(void) ;
#line 234 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 236
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 238
extern void sock_release(struct socket * ) ;
#line 241
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___1(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_13701: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_13701;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___1(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___1(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___1(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___0(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___1(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 341 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_17719: ;
#line 63
    goto ldv_17719;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_17720: ;
#line 65
    goto ldv_17720;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_17721: ;
#line 66
    goto ldv_17721;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 2312 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2314
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2314
  return (tmp);
}
}
#line 2338 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2340
  tmp = test_tsk_thread_flag(p, 2);
#line 2340
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2340
  return ((int )tmp___0);
}
}
#line 293 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) ;
#line 480 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 483 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 485
  return;
}
}
#line 513 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 515
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1104 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1106
  return ((struct crypto_hash *)tfm);
}
}
#line 1116 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1119
  type = type & 4294967280U;
#line 1120
  mask = mask & 4294967280U;
#line 1121
  type = type | 8U;
#line 1122
  mask = mask | 14U;
#line 1124
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1124
  tmp___0 = __crypto_hash_cast(tmp);
#line 1124
  return (tmp___0);
}
}
#line 1132 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1134
  tmp = crypto_hash_tfm(tfm);
#line 1134
  crypto_free_tfm(tmp);
#line 1135
  return;
}
}
#line 1199 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1203
  return (tmp___0);
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(hash);
#line 1209
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1209
  return (tmp___0);
}
}
#line 423 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 425
  disk->part0.nr_sects = size;
#line 426
  return;
}
}
#line 59 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 61
  __might_sleep("include/linux/highmem.h", 61, 0);
#line 62
  tmp = lowmem_page_address(page);
#line 62
  return (tmp);
}
}
#line 65 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 67
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 34
extern void mempool_free(void * , mempool_t * ) ;
#line 228 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[41U] ;

  {
#line 233
  cmdnames[0] = "Data";
#line 233
  cmdnames[1] = "DataReply";
#line 233
  cmdnames[2] = "RSDataReply";
#line 233
  cmdnames[3] = "Barrier";
#line 233
  cmdnames[4] = "ReportBitMap";
#line 233
  cmdnames[5] = "BecomeSyncTarget";
#line 233
  cmdnames[6] = "BecomeSyncSource";
#line 233
  cmdnames[7] = "UnplugRemote";
#line 233
  cmdnames[8] = "DataRequest";
#line 233
  cmdnames[9] = "RSDataRequest";
#line 233
  cmdnames[10] = "SyncParam";
#line 233
  cmdnames[11] = "ReportProtocol";
#line 233
  cmdnames[12] = "ReportUUIDs";
#line 233
  cmdnames[13] = "ReportSizes";
#line 233
  cmdnames[14] = "ReportState";
#line 233
  cmdnames[15] = "ReportSyncUUID";
#line 233
  cmdnames[16] = "AuthChallenge";
#line 233
  cmdnames[17] = "AuthResponse";
#line 233
  cmdnames[18] = "StateChgRequest";
#line 233
  cmdnames[19] = "Ping";
#line 233
  cmdnames[20] = "PingAck";
#line 233
  cmdnames[21] = "RecvAck";
#line 233
  cmdnames[22] = "WriteAck";
#line 233
  cmdnames[23] = "RSWriteAck";
#line 233
  cmdnames[24] = "DiscardAck";
#line 233
  cmdnames[25] = "NegAck";
#line 233
  cmdnames[26] = "NegDReply";
#line 233
  cmdnames[27] = "NegRSDReply";
#line 233
  cmdnames[28] = "BarrierAck";
#line 233
  cmdnames[29] = "StateChgReply";
#line 233
  cmdnames[30] = "OVRequest";
#line 233
  cmdnames[31] = "OVReply";
#line 233
  cmdnames[32] = "OVResult";
#line 233
  cmdnames[33] = "CsumRSRequest";
#line 233
  cmdnames[34] = "CsumRSIsInSync";
#line 233
  cmdnames[35] = "SyncParam89";
#line 233
  cmdnames[36] = "CBitmap";
#line 233
  cmdnames[37] = 0;
#line 233
  cmdnames[38] = 0;
#line 233
  cmdnames[39] = "DelayProbe";
#line 233
  cmdnames[40] = 0;
#line 275
  if ((unsigned int )cmd == 65521U) {
#line 276
    return ("HandShakeM");
  } else {

  }
#line 277
  if ((unsigned int )cmd == 65522U) {
#line 278
    return ("HandShakeS");
  } else {

  }
#line 279
  if ((unsigned int )cmd == 65534U) {
#line 280
    return ("HandShake");
  } else {

  }
#line 281
  if ((unsigned int )cmd > 39U) {
#line 282
    return ("Unknown");
  } else {

  }
#line 283
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 304
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 307 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 317
  c->word_offset = c->bit_offset >> 6;
#line 318
  return;
}
}
#line 582 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 584
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 595 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 597
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 607 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 609
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1181
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) ;
#line 1185
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) ;
#line 1191
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1201
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1203
void tl_clear(struct drbd_conf *mdev ) ;
#line 1207
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1210
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1211
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1214
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1216
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1225
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1227
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1228
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1232
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1234
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) ;
#line 1251
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1253
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) ;
#line 1263
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1280
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1281
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1282
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) ;
#line 1469
mempool_t *drbd_ee_mempool ;
#line 1471
struct page *drbd_pp_pool ;
#line 1472
spinlock_t drbd_pp_lock ;
#line 1473
int drbd_pp_vacant ;
#line 1494
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1496
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1497
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1498
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) ;
#line 1499
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) ;
#line 1502
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) ;
#line 1556
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1566
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1568
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1572
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1573
void drbd_free_tl_hash(struct drbd_conf *mdev ) ;
#line 1603 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1605
  val = 1;
#line 1606
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1608
  return;
}
}
#line 1610 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1612
  val = 2;
#line 1613
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1615
  return;
}
}
#line 1629
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1655
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1741 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1743
  page = e->pages;
#line 1744
  goto ldv_44686;
  ldv_44685: 
#line 1745
  tmp = page_count(page);
#line 1745
  if (tmp > 1) {
#line 1746
    return (1);
  } else {

  }
#line 1744
  page = page_chain_next(page);
  ldv_44686: ;
#line 1744
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1744
    tmp___0 = page_chain_next(page);
#line 1744
    __builtin_prefetch((void const   *)tmp___0);
#line 1744
    if (1 != 0) {
#line 1745
      goto ldv_44685;
    } else {
#line 1747
      goto ldv_44687;
    }
  } else {

  }
  ldv_44687: ;
#line 1748
  return (0);
}
}
#line 1787 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  int tmp ;

  {
#line 1791
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1791
  return (tmp);
}
}
#line 1845 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1847
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1850
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1853
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1888 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1891
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1895
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1895
  if (tmp___1 != 0UL) {
#line 1895
    __min1 = 34359738368UL;
#line 1895
    tmp___0 = drbd_md_first_sector(bdev);
#line 1895
    __min2 = tmp___0;
#line 1895
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1895
    s = 0UL;
  }
#line 1898
  goto ldv_44758;
  case -2: 
#line 1900
  __min1___0 = 34359738368UL;
#line 1900
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1900
  __min2___0 = tmp___2;
#line 1900
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1903
  __min1___1 = s;
#line 1903
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1903
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1906
  goto ldv_44758;
  default: 
#line 1908
  __min1___2 = 8587575296UL;
#line 1908
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1908
  __min2___2 = tmp___3;
#line 1908
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_44758: ;
#line 1911
  return (s);
}
}
#line 1945 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1948
  tmp = spinlock_check(& q->q_lock);
#line 1948
  flags = _raw_spin_lock_irqsave(tmp);
#line 1949
  list_add(& w->list, & q->q);
#line 1950
  up(& q->s);
#line 1952
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1953
  return;
}
}
#line 1985 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 1988
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 1988
  return (tmp);
}
}
#line 1991 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 1994
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 1994
  return (tmp);
}
}
#line 2076 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2078
  atomic_inc(& mdev->unacked_cnt);
#line 2079
  return;
}
}
#line 2092 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2094
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2094
  if (tmp != 0) {
#line 2095
    __wake_up(& mdev->net_cnt_wait, 3U, 1, 0);
  } else {

  }
#line 2096
  return;
}
}
#line 2104 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2108
  atomic_inc(& mdev->net_cnt);
#line 2109
  have_net_conf = (int )mdev->state.ldv_35401.conn > 1;
#line 2110
  if (have_net_conf == 0) {
#line 2111
    put_net_conf(mdev);
  } else {

  }
#line 2112
  return (have_net_conf);
}
}
#line 2342 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 2344
  mdev->ed_uuid = val;
#line 2345
  return;
}
}
#line 2347 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2354
  return ((int )a - (int )b);
}
}
#line 2363 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2366
  spin_lock(& mdev->peer_seq_lock);
#line 2367
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2367
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2368
  mdev->peer_seq = m;
#line 2369
  spin_unlock(& mdev->peer_seq_lock);
#line 2370
  if (m == new_seq) {
#line 2371
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2372
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 66 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 68
  tmp = crypto_tfm_alg_type(tfm);
#line 68
  return ((tmp & 14U) == 8U);
}
}
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 227
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 227
  if (tmp != 0L) {
#line 227
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (227), "i" (12UL));
    ldv_45024: ;
#line 227
    goto ldv_45024;
  } else {

  }
#line 228
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 234 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 236
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 236
  if (tmp != 0L) {
#line 236
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (236), "i" (12UL));
    ldv_45029: ;
#line 236
    goto ldv_45029;
  } else {

  }
#line 237
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 242 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 244
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 250 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 253
  tmp = ar_hash_slot(mdev, sector);
#line 253
  slot = tmp;
#line 257
  n = slot->first;
#line 257
  goto ldv_45047;
  ldv_45046: ;
#line 258
  if ((unsigned long )req == (unsigned long )id) {
#line 259
    if (req->sector != sector) {
#line 259
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              259);
    } else {

    }
#line 260
    return (req);
  } else {

  }
#line 257
  n = n->next;
  ldv_45047: ;
#line 257
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 257
    __builtin_prefetch((void const   *)n->next);
#line 257
    if (1 != 0) {
#line 257
      __mptr = (struct hlist_node  const  *)n;
#line 257
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 257
      if (1 != 0) {
#line 258
        goto ldv_45046;
      } else {
#line 260
        goto ldv_45048;
      }
    } else {
#line 260
      goto ldv_45048;
    }
  } else {

  }
  ldv_45048: ;
#line 263
  return (0);
}
}
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 307
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_45100: ;
#line 162
  goto ldv_45100;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 72
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 74
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 75
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch *previous_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  struct drbd_epoch *prev ;
  struct list_head  const  *__mptr ;

  {
#line 80
  spin_lock(& mdev->epoch_lock);
#line 81
  __mptr = (struct list_head  const  *)epoch->list.prev;
#line 81
  prev = (struct drbd_epoch *)__mptr;
#line 82
  if ((unsigned long )prev == (unsigned long )epoch || (unsigned long )mdev->current_epoch == (unsigned long )prev) {
#line 83
    prev = 0;
  } else {

  }
#line 84
  spin_unlock(& mdev->epoch_lock);
#line 85
  return (prev);
}
}
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 104
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 104
  if (tmp___0 != 0L) {
#line 104
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (104), "i" (12UL));
    ldv_45190: ;
#line 104
    goto ldv_45190;
  } else {

  }
#line 105
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 105
  if (tmp___1 != 0L) {
#line 105
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (105), "i" (12UL));
    ldv_45191: ;
#line 105
    goto ldv_45191;
  } else {

  }
#line 107
  page = *head;
#line 109
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 110
    return (0);
  } else {

  }
#line 112
  goto ldv_45194;
  ldv_45193: 
#line 113
  tmp = page_chain_next(page);
#line 114
  n = n - 1;
#line 114
  if (n == 0) {
#line 115
    goto ldv_45192;
  } else {

  }
#line 116
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 118
    return (0);
  } else {

  }
#line 119
  page = tmp;
  ldv_45194: ;
#line 112
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 113
    goto ldv_45193;
  } else {

  }
  ldv_45192: 
#line 123
  page->ldv_12214.ldv_12211.private = 0UL;
#line 125
  page = *head;
#line 126
  *head = tmp;
#line 127
  return (page);
}
}
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 136
  i = 1;
#line 137
  goto ldv_45202;
  ldv_45201: 
#line 138
  i = i + 1;
#line 138
  page = tmp;
  ldv_45202: 
#line 137
  tmp = page_chain_next(page);
#line 137
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 138
    goto ldv_45201;
  } else {

  }

#line 139
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 140
    *len = i;
  } else {

  }
#line 141
  return (page);
}
}
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 147
  i = 0;
#line 148
  goto ldv_45211;
  ldv_45210: 
#line 149
  put_page(page);
#line 150
  i = i + 1;
#line 148
  page = tmp;
  ldv_45211: ;
#line 148
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 148
    tmp = page_chain_next(page);
#line 148
    if (1 != 0) {
#line 149
      goto ldv_45210;
    } else {
#line 151
      goto ldv_45212;
    }
  } else {

  }
  ldv_45212: ;
#line 152
  return (i);
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 160
  tmp = page_chain_tail(chain_first, 0);
#line 161
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 161
  if (tmp___0 != 0L) {
#line 161
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (161), "i" (12UL));
    ldv_45219: ;
#line 161
    goto ldv_45219;
  } else {

  }
#line 165
  chain_last->ldv_12214.ldv_12211.private = (unsigned long )*head;
#line 166
  *head = chain_first;
#line 167
  return;
}
}
#line 169 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 171
  page = 0;
#line 172
  tmp = 0;
#line 173
  i = 0;
#line 177
  if (drbd_pp_vacant >= number) {
#line 178
    spin_lock(& drbd_pp_lock);
#line 179
    page = page_chain_del(& drbd_pp_pool, number);
#line 180
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 181
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 182
    spin_unlock(& drbd_pp_lock);
#line 183
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 184
      return (page);
    } else {

    }
  } else {

  }
#line 190
  i = 0;
#line 190
  goto ldv_45229;
  ldv_45228: 
#line 191
  tmp = alloc_pages(514U, 0U);
#line 192
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 193
    goto ldv_45227;
  } else {

  }
#line 194
  tmp->ldv_12214.ldv_12211.private = (unsigned long )page;
#line 195
  page = tmp;
#line 190
  i = i + 1;
  ldv_45229: ;
#line 190
  if (i < number) {
#line 191
    goto ldv_45228;
  } else {

  }
  ldv_45227: ;
#line 198
  if (i == number) {
#line 199
    return (page);
  } else {

  }
#line 204
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 205
    tmp = page_chain_tail(page, 0);
#line 206
    spin_lock(& drbd_pp_lock);
#line 207
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 208
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 209
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 211
  return (0);
}
}
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void maybe_kick_lo(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 219
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 219
  if (tmp >= (mdev->net_conf)->unplug_watermark) {
#line 220
    drbd_kick_lo(mdev);
  } else {

  }
#line 221
  return;
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 233
  le = mdev->net_ee.next;
#line 233
  tle = le->next;
#line 233
  goto ldv_45244;
  ldv_45243: 
#line 234
  __mptr = (struct list_head  const  *)le;
#line 234
  e = (struct drbd_epoch_entry *)__mptr;
#line 235
  tmp = drbd_ee_has_active_page___0(e);
#line 235
  if (tmp != 0) {
#line 236
    goto ldv_45242;
  } else {

  }
#line 237
  list_move(le, to_be_freed);
#line 233
  le = tle;
#line 233
  tle = le->next;
  ldv_45244: ;
#line 233
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 234
    goto ldv_45243;
  } else {

  }
  ldv_45242: ;
#line 238
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 243
  reclaimed.next = & reclaimed;
#line 243
  reclaimed.prev = & reclaimed;
#line 246
  maybe_kick_lo(mdev);
#line 247
  spin_lock_irq(& mdev->req_lock);
#line 248
  reclaim_net_ee(mdev, & reclaimed);
#line 249
  spin_unlock_irq(& mdev->req_lock);
#line 251
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 251
  e = (struct drbd_epoch_entry *)__mptr;
#line 251
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 251
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 251
  goto ldv_45258;
  ldv_45257: 
#line 252
  drbd_free_some_ee(mdev, e, 1);
#line 251
  e = t;
#line 251
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 251
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_45258: ;
#line 251
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 252
    goto ldv_45257;
  } else {

  }

#line 256
  return;
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 269
  page = 0;
#line 270
  tmp = get_current();
#line 270
  wait.flags = 0U;
#line 270
  wait.private = (void *)tmp;
#line 270
  wait.func = & autoremove_wake_function;
#line 270
  wait.task_list.next = & wait.task_list;
#line 270
  wait.task_list.prev = & wait.task_list;
#line 274
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 274
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 275
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 277
  goto ldv_45269;
  ldv_45268: 
#line 278
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 280
  drbd_kick_lo_and_reclaim_net(mdev);
#line 282
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 282
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 283
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 284
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 285
      goto ldv_45267;
    } else {

    }
  } else {

  }
#line 288
  if (! retry) {
#line 289
    goto ldv_45267;
  } else {

  }
#line 291
  tmp___2 = get_current();
#line 291
  tmp___3 = signal_pending(tmp___2);
#line 291
  if (tmp___3 != 0) {
#line 292
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 293
    goto ldv_45267;
  } else {

  }
#line 296
  schedule();
  ldv_45269: ;
#line 277
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 278
    goto ldv_45268;
  } else {

  }
  ldv_45267: 
#line 298
  finish_wait(& drbd_pp_wait, & wait);
#line 300
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 301
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 302
  return (page);
}
}
#line 309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page , int is_net ) 
{ 
  atomic_t *a ;
  int i ;
  struct page *tmp ;

  {
#line 311
  a = is_net != 0 ? & mdev->pp_in_use_by_net : & mdev->pp_in_use;
#line 314
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 32UL) {
#line 315
    i = page_chain_free(page);
  } else {
#line 318
    tmp = page_chain_tail(page, & i);
#line 319
    spin_lock(& drbd_pp_lock);
#line 320
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 321
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 322
    spin_unlock(& drbd_pp_lock);
  }
#line 324
  i = atomic_sub_return(i, a);
#line 325
  if (i < 0) {
#line 326
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: %s: %d < 0\n",
             is_net != 0 ? (char *)"pp_in_use_by_net" : (char *)"pp_in_use", i);
  } else {

  }
#line 328
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 329
  return;
}
}
#line 346 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 354
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 356
  tmp = drbd_insert_fault(mdev, 8U);
#line 356
  if (tmp != 0) {
#line 357
    return (0);
  } else {

  }
#line 359
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 359
  e = (struct drbd_epoch_entry *)tmp___0;
#line 360
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 361
    if ((gfp_mask & 512U) == 0U) {
#line 362
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 363
    return (0);
  } else {

  }
#line 366
  page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 367
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 368
    goto fail;
  } else {

  }
#line 370
  INIT_HLIST_NODE(& e->colision);
#line 371
  e->epoch = 0;
#line 372
  e->mdev = mdev;
#line 373
  e->pages = page;
#line 374
  atomic_set(& e->pending_bios, 0);
#line 375
  e->size = data_size;
#line 376
  e->flags = 0UL;
#line 377
  e->sector = sector;
#line 378
  e->ldv_42864.block_id = id;
#line 380
  return (e);
  fail: 
#line 383
  mempool_free((void *)e, drbd_ee_mempool);
#line 384
  return (0);
}
}
#line 387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 389
  if ((e->flags & 32UL) != 0UL) {
#line 390
    kfree((void const   *)e->ldv_42864.digest);
  } else {

  }
#line 391
  drbd_pp_free(mdev, e->pages, is_net);
#line 392
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 392
  if (tmp != 0) {
#line 392
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            392);
  } else {

  }
#line 393
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 393
  if (tmp___0 == 0) {
#line 393
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            393);
  } else {

  }
#line 394
  mempool_free((void *)e, drbd_ee_mempool);
#line 395
  return;
}
}
#line 397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  int is_net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 399
  work_list.next = & work_list;
#line 399
  work_list.prev = & work_list;
#line 401
  count = 0;
#line 402
  is_net = (unsigned long )(& mdev->net_ee) == (unsigned long )list;
#line 404
  spin_lock_irq(& mdev->req_lock);
#line 405
  list_splice_init(list, & work_list);
#line 406
  spin_unlock_irq(& mdev->req_lock);
#line 408
  __mptr = (struct list_head  const  *)work_list.next;
#line 408
  e = (struct drbd_epoch_entry *)__mptr;
#line 408
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 408
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 408
  goto ldv_45310;
  ldv_45309: 
#line 409
  drbd_free_some_ee(mdev, e, is_net);
#line 410
  count = count + 1;
#line 408
  e = t;
#line 408
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 408
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_45310: ;
#line 408
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 409
    goto ldv_45309;
  } else {

  }

#line 412
  return (count);
}
}
#line 425 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 427
  work_list.next = & work_list;
#line 427
  work_list.prev = & work_list;
#line 428
  reclaimed.next = & reclaimed;
#line 428
  reclaimed.prev = & reclaimed;
#line 430
  ok = (int )mdev->state.ldv_35401.conn > 8;
#line 432
  spin_lock_irq(& mdev->req_lock);
#line 433
  reclaim_net_ee(mdev, & reclaimed);
#line 434
  list_splice_init(& mdev->done_ee, & work_list);
#line 435
  spin_unlock_irq(& mdev->req_lock);
#line 437
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 437
  e = (struct drbd_epoch_entry *)__mptr;
#line 437
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 437
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 437
  goto ldv_45327;
  ldv_45326: 
#line 438
  drbd_free_some_ee(mdev, e, 1);
#line 437
  e = t;
#line 437
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 437
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_45327: ;
#line 437
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 438
    goto ldv_45326;
  } else {

  }
#line 444
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 444
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 444
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 444
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 444
  goto ldv_45336;
  ldv_45335: 
#line 446
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 446
  ok = tmp != 0 && ok != 0;
#line 447
  drbd_free_some_ee(mdev, e, 0);
#line 444
  e = t;
#line 444
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 444
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_45336: ;
#line 444
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 445
    goto ldv_45335;
  } else {

  }
#line 449
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 451
  return (ok);
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 456
  tmp = get_current();
#line 456
  wait.flags = 0U;
#line 456
  wait.private = (void *)tmp;
#line 456
  wait.func = & autoremove_wake_function;
#line 456
  wait.task_list.next = & wait.task_list;
#line 456
  wait.task_list.prev = & wait.task_list;
#line 460
  goto ldv_45344;
  ldv_45343: 
#line 461
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 462
  spin_unlock_irq(& mdev->req_lock);
#line 463
  drbd_kick_lo(mdev);
#line 464
  schedule();
#line 465
  finish_wait(& mdev->ee_wait, & wait);
#line 466
  spin_lock_irq(& mdev->req_lock);
  ldv_45344: 
#line 460
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 460
  if (tmp___0 == 0) {
#line 461
    goto ldv_45343;
  } else {

  }

#line 465
  return;
}
}
#line 470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 472
  spin_lock_irq(& mdev->req_lock);
#line 473
  _drbd_wait_ee_list_empty(mdev, head);
#line 474
  spin_unlock_irq(& mdev->req_lock);
#line 475
  return;
}
}
#line 479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 482
  sk = sock->sk;
#line 483
  err = 0;
#line 485
  *what = "listen";
#line 486
  err = (*((sock->ops)->listen))(sock, 5);
#line 487
  if (err < 0) {
#line 488
    goto out;
  } else {

  }
#line 490
  *what = "sock_create_lite";
#line 491
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 493
  if (err < 0) {
#line 494
    goto out;
  } else {

  }
#line 496
  *what = "accept";
#line 497
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 498
  if (err < 0) {
#line 499
    sock_release(*newsock);
#line 500
    *newsock = 0;
#line 501
    goto out;
  } else {

  }
#line 503
  (*newsock)->ops = sock->ops;
  out: ;
#line 506
  return (err);
}
}
#line 509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 513
  iov.iov_base = buf;
#line 513
  iov.iov_len = size;
#line 517
  msg.msg_name = 0;
#line 517
  msg.msg_namelen = 0;
#line 517
  msg.msg_iov = (struct iovec *)(& iov);
#line 517
  msg.msg_iovlen = 1UL;
#line 517
  msg.msg_control = 0;
#line 517
  msg.msg_controllen = 0UL;
#line 517
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 524
  tmp = current_thread_info();
#line 524
  oldfs = tmp->addr_limit;
#line 525
  tmp___0 = current_thread_info();
#line 525
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 525
  tmp___0->addr_limit = __constr_expr_0;
#line 526
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 527
  tmp___1 = current_thread_info();
#line 527
  tmp___1->addr_limit = oldfs;
#line 529
  return (rv);
}
}
#line 532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 535
  iov.iov_base = buf;
#line 535
  iov.iov_len = size;
#line 539
  msg.msg_name = 0;
#line 539
  msg.msg_namelen = 0;
#line 539
  msg.msg_iov = (struct iovec *)(& iov);
#line 539
  msg.msg_iovlen = 1UL;
#line 539
  msg.msg_control = 0;
#line 539
  msg.msg_controllen = 0UL;
#line 539
  msg.msg_flags = 16640U;
#line 546
  tmp = current_thread_info();
#line 546
  oldfs = tmp->addr_limit;
#line 547
  tmp___0 = current_thread_info();
#line 547
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 547
  tmp___0->addr_limit = __constr_expr_0;
  ldv_45382: 
#line 550
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 551
  if ((size_t )rv == size) {
#line 552
    goto ldv_45381;
  } else {

  }
#line 559
  if (rv < 0) {
#line 560
    if (rv == -104) {
#line 561
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 562
    if (rv != -512) {
#line 563
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 564
    goto ldv_45381;
  } else
#line 565
  if (rv == 0) {
#line 566
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 567
    goto ldv_45381;
  } else {
#line 573
    goto ldv_45381;
  }
#line 575
  goto ldv_45382;
  ldv_45381: 
#line 577
  tmp___1 = current_thread_info();
#line 577
  tmp___1->addr_limit = oldfs;
#line 579
  if ((size_t )rv != size) {
#line 580
    val.i = 0U;
#line 580
    val.ldv_35401.conn = 4U;
#line 580
    mask.i = 0U;
#line 580
    mask.ldv_35401.conn = 31U;
#line 580
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 582
  return (rv);
}
}
#line 590 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 594
  if (snd != 0U) {
#line 595
    (sock->sk)->sk_sndbuf = (int )snd;
#line 596
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 598
  if (rcv != 0U) {
#line 599
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 600
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 602
  return;
}
}
#line 604 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 610
  disconnect_on_error = 1;
#line 612
  tmp = get_net_conf(mdev);
#line 612
  if (tmp == 0) {
#line 613
    return (0);
  } else {

  }
#line 615
  what = "sock_create_kern";
#line 616
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 618
  if (err < 0) {
#line 619
    sock = 0;
#line 620
    goto out;
  } else {

  }
#line 623
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 623
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 623
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 625
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 635
  __min1 = (mdev->net_conf)->my_addr_len;
#line 635
  __min2 = 28;
#line 635
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 635
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 637
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 638
    src_in6.sin6_port = 0U;
  } else {
#line 640
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 642
  what = "bind before connect";
#line 643
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 646
  if (err < 0) {
#line 647
    goto out;
  } else {

  }
#line 651
  disconnect_on_error = 0;
#line 652
  what = "connect";
#line 653
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 658
  if (err < 0) {
#line 659
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 660
      sock_release(sock);
#line 661
      sock = 0;
    } else {

    }
#line 663
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 670
    disconnect_on_error = 0;
#line 671
    goto ldv_45419;
    default: 
#line 673
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_45419: ;
#line 675
    if (disconnect_on_error != 0) {
#line 676
      val.i = 0U;
#line 676
      val.ldv_35401.conn = 1U;
#line 676
      mask.i = 0U;
#line 676
      mask.ldv_35401.conn = 31U;
#line 676
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 678
  put_net_conf(mdev);
#line 679
  return (sock);
}
}
#line 682 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 685
  s_estab = 0;
#line 688
  tmp = get_net_conf(mdev);
#line 688
  if (tmp == 0) {
#line 689
    return (0);
  } else {

  }
#line 691
  what = "sock_create_kern";
#line 692
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 694
  if (err != 0) {
#line 695
    s_listen = 0;
#line 696
    goto out;
  } else {

  }
#line 699
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 700
  tmp___0 = random32();
#line 700
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 702
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 703
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 704
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 705
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 708
  what = "bind before listen";
#line 709
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 712
  if (err < 0) {
#line 713
    goto out;
  } else {

  }
#line 715
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 718
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 719
    sock_release(s_listen);
  } else {

  }
#line 720
  if (err < 0) {
#line 721
    if ((err != -11 && err != -4) && err != -512) {
#line 722
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 723
      val.i = 0U;
#line 723
      val.ldv_35401.conn = 1U;
#line 723
      mask.i = 0U;
#line 723
      mask.ldv_35401.conn = 31U;
#line 723
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 726
  put_net_conf(mdev);
#line 728
  return (s_estab);
}
}
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header80 *h ;
  int tmp ;

  {
#line 734
  h = & mdev->data.sbuf.header.h80;
#line 736
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 736
  return (tmp);
}
}
#line 739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header80 *h ;
  int rr ;
  __u16 tmp ;

  {
#line 741
  h = & mdev->data.rbuf.header.h80;
#line 744
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 746
  if (rr == 8 && h->magic == 1728214147U) {
#line 747
    tmp = __fswab16((int )h->command);
#line 747
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 749
  return (65535);
}
}
#line 757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 762
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 763
    return (0);
  } else {

  }
#line 765
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 767
  if (rr > 0 || rr == -11) {
#line 768
    return (1);
  } else {
#line 770
    sock_release(*sock);
#line 771
    *sock = 0;
#line 772
    return (0);
  }
}
}
#line 784 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  enum drbd_packets tmp___3 ;
  u32 tmp___4 ;
  struct task_struct *tmp___5 ;
  enum drbd_thread_state tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;
  int tmp___11 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 789
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 789
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            789);
  } else {

  }
#line 791
  val.i = 0U;
#line 791
  val.ldv_35401.conn = 8U;
#line 791
  mask.i = 0U;
#line 791
  mask.ldv_35401.conn = 31U;
#line 791
  tmp = drbd_request_state(mdev, mask, val);
#line 791
  if (tmp <= 0) {
#line 792
    return (-2);
  } else {

  }
#line 794
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 796
  sock = 0;
#line 797
  msock = 0;
  ldv_45478: 
#line 800
  try = 0;
  ldv_45470: 
#line 802
  s = drbd_try_connect(mdev);
#line 803
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 804
    goto ldv_45469;
  } else {
#line 803
    try = try + 1;
#line 803
    if (try > 2) {
#line 804
      goto ldv_45469;
    } else {

    }
  }
#line 806
  tmp___0 = get_current();
#line 806
  tmp___0->state = 1L;
#line 807
  schedule_timeout(25L);
#line 808
  goto ldv_45470;
  ldv_45469: ;
#line 810
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 811
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 812
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 813
      sock = s;
#line 814
      s = 0;
    } else
#line 815
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 816
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 817
      msock = s;
#line 818
      s = 0;
    } else {
#line 820
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 821
      goto out_release_sockets;
    }
  } else {

  }
#line 825
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 826
    tmp___1 = get_current();
#line 826
    tmp___1->state = 1L;
#line 827
    schedule_timeout(25L);
#line 828
    ok = drbd_socket_okay(mdev, & sock);
#line 829
    tmp___2 = drbd_socket_okay(mdev, & msock);
#line 829
    ok = tmp___2 != 0 && ok != 0;
#line 830
    if (ok != 0) {
#line 831
      goto ldv_45472;
    } else {

    }
  } else {

  }
  retry: 
#line 835
  s = drbd_wait_for_connect(mdev);
#line 836
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 837
    tmp___3 = drbd_recv_fp(mdev, s);
#line 837
    try = (int )tmp___3;
#line 838
    drbd_socket_okay(mdev, & sock);
#line 839
    drbd_socket_okay(mdev, & msock);
#line 840
    switch (try) {
    case 65522: ;
#line 842
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 843
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 844
      sock_release(sock);
    } else {

    }
#line 846
    sock = s;
#line 847
    goto ldv_45475;
    case 65521: ;
#line 849
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 850
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 851
      sock_release(msock);
    } else {

    }
#line 853
    msock = s;
#line 854
    set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 855
    goto ldv_45475;
    default: 
#line 857
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 858
    sock_release(s);
#line 859
    tmp___4 = random32();
#line 859
    if ((int )tmp___4 & 1) {
#line 860
      goto retry;
    } else {

    }
    }
    ldv_45475: ;
  } else {

  }
#line 864
  if ((int )mdev->state.ldv_35401.conn <= 1) {
#line 865
    goto out_release_sockets;
  } else {

  }
#line 866
  tmp___7 = get_current();
#line 866
  tmp___8 = signal_pending(tmp___7);
#line 866
  if (tmp___8 != 0) {
#line 867
    tmp___5 = get_current();
#line 867
    flush_signals(tmp___5);
#line 868
    __asm__  volatile   ("": : : "memory");
#line 869
    tmp___6 = get_t_state(& mdev->receiver);
#line 869
    if ((unsigned int )tmp___6 == 2U) {
#line 870
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 873
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 874
    ok = drbd_socket_okay(mdev, & sock);
#line 875
    tmp___9 = drbd_socket_okay(mdev, & msock);
#line 875
    ok = tmp___9 != 0 && ok != 0;
#line 876
    if (ok != 0) {
#line 877
      goto ldv_45472;
    } else {

    }
  } else {

  }
#line 879
  goto ldv_45478;
  ldv_45472: 
#line 881
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 882
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 884
  (sock->sk)->sk_allocation = 16U;
#line 885
  (msock->sk)->sk_allocation = 16U;
#line 887
  (sock->sk)->sk_priority = 4U;
#line 888
  (msock->sk)->sk_priority = 6U;
#line 895
  tmp___10 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 895
  (sock->sk)->sk_rcvtimeo = tmp___10;
#line 895
  (sock->sk)->sk_sndtimeo = tmp___10;
#line 898
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 899
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 903
  drbd_tcp_nodelay(sock);
#line 904
  drbd_tcp_nodelay(msock);
#line 906
  mdev->data.socket = sock;
#line 907
  mdev->meta.socket = msock;
#line 908
  mdev->last_received = jiffies;
#line 910
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 910
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            910);
  } else {

  }
#line 912
  h = drbd_do_handshake(mdev);
#line 913
  if (h <= 0) {
#line 914
    return (h);
  } else {

  }
#line 916
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 918
    tmp___11 = drbd_do_auth(mdev);
#line 918
    switch (tmp___11) {
    case -1: 
#line 920
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 921
    return (-1);
    case 0: 
#line 923
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 924
    return (0);
    }
  } else {

  }
#line 928
  val___0.i = 0U;
#line 928
  val___0.ldv_35401.conn = 9U;
#line 928
  mask___0.i = 0U;
#line 928
  mask___0.ldv_35401.conn = 31U;
#line 928
  tmp___12 = drbd_request_state(mdev, mask___0, val___0);
#line 928
  if (tmp___12 <= 0) {
#line 929
    return (0);
  } else {

  }
#line 931
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 932
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 934
  atomic_set(& mdev->packet_seq, 0);
#line 935
  mdev->peer_seq = 0U;
#line 937
  drbd_thread_start(& mdev->asender);
#line 939
  if (mdev->agreed_pro_version <= 94) {
#line 939
    tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 939
    if (tmp___13 != 0) {
#line 940
      drbd_setup_queue_param(mdev, 32768U);
#line 941
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 944
  tmp___14 = drbd_send_protocol(mdev);
#line 944
  if (tmp___14 == 0) {
#line 945
    return (-1);
  } else {

  }
#line 946
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 947
  drbd_send_sizes(mdev, 0, 0);
#line 948
  drbd_send_uuids(mdev);
#line 949
  drbd_send_state(mdev);
#line 950
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 951
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 953
  return (1);
  out_release_sockets: ;
#line 956
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 957
    sock_release(sock);
  } else {

  }
#line 958
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 959
    sock_release(msock);
  } else {

  }
#line 960
  return (-1);
}
}
#line 963 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , enum drbd_packets *cmd , unsigned int *packet_size ) 
{ 
  union p_header *h ;
  int r ;
  long tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u16 tmp___4 ;
  __u16 tmp___5 ;
  __u32 tmp___6 ;
  long tmp___7 ;

  {
#line 965
  h = & mdev->data.rbuf.header;
#line 968
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 969
  tmp = __builtin_expect(r != 8, 0L);
#line 969
  if (tmp != 0L) {
#line 970
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
            r);
#line 971
    return (0);
  } else {

  }
#line 974
  tmp___7 = __builtin_expect(h->h80.magic == 1728214147U, 1L);
#line 974
  if (tmp___7 != 0L) {
#line 975
    tmp___0 = __fswab16((int )h->h80.command);
#line 975
    *cmd = (enum drbd_packets )tmp___0;
#line 976
    tmp___1 = __fswab16((int )h->h80.length);
#line 976
    *packet_size = (unsigned int )tmp___1;
  } else
#line 977
  if ((unsigned int )h->h95.magic == 23171U) {
#line 978
    tmp___2 = __fswab16((int )h->h95.command);
#line 978
    *cmd = (enum drbd_packets )tmp___2;
#line 979
    tmp___3 = __fswab32(h->h95.length);
#line 979
    *packet_size = tmp___3;
  } else {
#line 981
    tmp___4 = __fswab16((int )h->h80.length);
#line 981
    tmp___5 = __fswab16((int )h->h80.command);
#line 981
    tmp___6 = __fswab32(h->h80.magic);
#line 981
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%08x c: %d l: %d\n",
            tmp___6, (int )tmp___5, (int )tmp___4);
#line 985
    return (0);
  }
#line 987
  mdev->last_received = jiffies;
#line 989
  return (1);
}
}
#line 992 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_flush_after_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  int rv ;
  int tmp ;
  enum finish_epoch tmp___0 ;

  {
#line 996
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 996
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 996
    if (tmp != 0) {
#line 997
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0, 1UL);
#line 999
      if (rv != 0) {
#line 1000
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                rv);
#line 1004
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 1006
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1009
  tmp___0 = drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1009
  return (tmp___0);
}
}
#line 1012 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int w_flush(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct flush_work *fw ;
  struct drbd_epoch *epoch ;
  int tmp ;

  {
#line 1014
  fw = (struct flush_work *)w;
#line 1015
  epoch = fw->epoch;
#line 1017
  kfree((void const   *)w);
#line 1019
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& epoch->flags));
#line 1019
  if (tmp == 0) {
#line 1020
    drbd_flush_after_epoch(mdev, epoch);
  } else {

  }
#line 1022
  drbd_may_finish_epoch(mdev, epoch, (int )mdev->state.ldv_35401.conn <= 9 ? EV_CLEANUP : EV_PUT);
#line 1025
  return (1);
}
}
#line 1034 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int finish ;
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  int schedule_flush ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct list_head  const  *__mptr ;
  struct flush_work *fw ;
  void *tmp___8 ;

  {
#line 1040
  schedule_flush = 0;
#line 1041
  rv = FE_STILL_LIVE;
#line 1043
  spin_lock(& mdev->epoch_lock);
  ldv_45526: 
#line 1045
  next_epoch = 0;
#line 1046
  finish = 0;
#line 1048
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1050
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1052
  atomic_dec(& epoch->active);
#line 1053
  goto ldv_45515;
  case 1U: 
#line 1055
  set_bit(3U, (unsigned long volatile   *)(& epoch->flags));
#line 1059
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1059
  if (((tmp != 0 && epoch_size == 1) && (unsigned int )mdev->write_ordering != 3U) && (unsigned long )mdev->current_epoch == (unsigned long )epoch) {
#line 1062
    clear_bit(2, (unsigned long volatile   *)(& epoch->flags));
  } else {

  }
#line 1063
  goto ldv_45515;
  case 2U: 
#line 1065
  set_bit(1U, (unsigned long volatile   *)(& epoch->flags));
#line 1066
  goto ldv_45515;
  case 3U: ;
#line 1069
  goto ldv_45515;
  }
  ldv_45515: ;
#line 1072
  if (epoch_size != 0) {
#line 1072
    tmp___3 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1072
    if (tmp___3 == 0) {
#line 1072
      tmp___4 = constant_test_bit(3U, (unsigned long const volatile   *)(& epoch->flags));
#line 1072
      if (tmp___4 != 0) {
#line 1072
        if ((unsigned long )epoch->list.prev == (unsigned long )(& (mdev->current_epoch)->list)) {
#line 1072
          tmp___5 = constant_test_bit(4U, (unsigned long const volatile   *)(& epoch->flags));
#line 1072
          if (tmp___5 == 0) {
#line 1078
            tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& epoch->flags));
#line 1078
            if (tmp___1 != 0 || (unsigned int )mdev->write_ordering == 0U) {
#line 1082
              finish = 1;
#line 1083
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else
#line 1078
            if (epoch_size == 1) {
#line 1078
              tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1078
              if (tmp___2 != 0) {
#line 1082
                finish = 1;
#line 1083
                set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
              } else {
#line 1078
                goto _L;
              }
            } else
            _L: /* CIL Label */ 
#line 1078
            if (((unsigned int )ev & 32U) != 0U) {
#line 1082
              finish = 1;
#line 1083
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else {
#line 1084
              tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1084
              if (tmp___0 == 0 && (unsigned int )mdev->write_ordering == 3U) {
#line 1086
                atomic_inc(& epoch->active);
#line 1087
                schedule_flush = 1;
              } else {

              }
            }
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1090
  if (finish != 0) {
#line 1091
    if (((unsigned int )ev & 32U) == 0U) {
#line 1092
      spin_unlock(& mdev->epoch_lock);
#line 1093
      drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1094
      spin_lock(& mdev->epoch_lock);
    } else {

    }
#line 1096
    atomic_dec(& mdev->unacked_cnt);
#line 1096
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1096
    if (tmp___7 < 0) {
#line 1096
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1096
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "drbd_may_finish_epoch", 1096, tmp___6);
    } else {

    }
#line 1098
    if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1099
      __mptr = (struct list_head  const  *)epoch->list.next;
#line 1099
      next_epoch = (struct drbd_epoch *)__mptr;
#line 1100
      list_del(& epoch->list);
#line 1101
      ev = (enum epoch_event )(((unsigned int )ev & 32U) | 3U);
#line 1102
      mdev->epochs = mdev->epochs - 1U;
#line 1103
      kfree((void const   *)epoch);
#line 1105
      if ((unsigned int )rv == 0U) {
#line 1106
        rv = FE_DESTROYED;
      } else {

      }
    } else {
#line 1108
      epoch->flags = 0UL;
#line 1109
      atomic_set(& epoch->epoch_size, 0);
#line 1111
      if ((unsigned int )rv == 0U) {
#line 1112
        rv = FE_RECYCLED;
      } else {

      }
    }
  } else {

  }
#line 1116
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1117
    goto ldv_45525;
  } else {

  }
#line 1119
  epoch = next_epoch;
#line 1120
  goto ldv_45526;
  ldv_45525: 
#line 1122
  spin_unlock(& mdev->epoch_lock);
#line 1124
  if (schedule_flush != 0) {
#line 1126
    tmp___8 = kmalloc___1(32UL, 32U);
#line 1126
    fw = (struct flush_work *)tmp___8;
#line 1127
    if ((unsigned long )fw != (unsigned long )((struct flush_work *)0)) {
#line 1128
      fw->w.cb = & w_flush;
#line 1129
      fw->epoch = epoch;
#line 1130
      drbd_queue_work(& mdev->data.work, & fw->w);
    } else {
#line 1132
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc a flush_work obj\n");
#line 1133
      set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1135
      drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1136
      drbd_may_finish_epoch(mdev, epoch, EV_PUT);
    }
  } else {

  }
#line 1140
  return (rv);
}
}
#line 1148 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[4U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1151
  write_ordering_str[0] = (char *)"none";
#line 1151
  write_ordering_str[1] = (char *)"drain";
#line 1151
  write_ordering_str[2] = (char *)"flush";
#line 1151
  write_ordering_str[3] = (char *)"barrier";
#line 1158
  pwo = mdev->write_ordering;
#line 1159
  _min1 = pwo;
#line 1159
  _min2 = wo;
#line 1159
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1160
  if ((unsigned int )wo == 3U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1161
    wo = WO_bdev_flush;
  } else {

  }
#line 1162
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1163
    wo = WO_drain_io;
  } else {

  }
#line 1164
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1165
    wo = WO_none;
  } else {

  }
#line 1166
  mdev->write_ordering = wo;
#line 1167
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 3U) {
#line 1168
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1169
  return;
}
}
#line 1178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  long tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 1181
  bios = 0;
#line 1183
  page = e->pages;
#line 1184
  sector = e->sector;
#line 1185
  ds = e->size;
#line 1186
  n_bios = 0U;
#line 1187
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
  next_bio: 
#line 1194
  bio = bio_alloc(16U, (int )nr_pages);
#line 1195
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1196
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1197
    goto fail;
  } else {

  }
#line 1200
  bio->bi_sector = sector;
#line 1201
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1204
  bio->bi_rw = (unsigned long )rw;
#line 1205
  bio->bi_private = (void *)e;
#line 1206
  bio->bi_end_io = & drbd_endio_sec;
#line 1208
  bio->bi_next = bios;
#line 1209
  bios = bio;
#line 1210
  n_bios = n_bios + 1U;
#line 1212
  goto ldv_45559;
  ldv_45558: 
#line 1213
  __min1 = ds;
#line 1213
  __min2 = 4096U;
#line 1213
  len = __min1 < __min2 ? __min1 : __min2;
#line 1214
  tmp___0 = bio_add_page(bio, page, len, 0U);
#line 1214
  if (tmp___0 == 0) {
#line 1216
    tmp = __builtin_expect((unsigned int )bio->bi_vcnt == 0U, 0L);
#line 1216
    if (tmp != 0L) {
#line 1216
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1216), "i" (12UL));
      ldv_45557: ;
#line 1216
      goto ldv_45557;
    } else {

    }
#line 1217
    goto next_bio;
  } else {

  }
#line 1219
  ds = ds - len;
#line 1220
  sector = (sector_t )(len >> 9) + sector;
#line 1221
  nr_pages = nr_pages - 1U;
#line 1212
  page = page_chain_next(page);
  ldv_45559: ;
#line 1212
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1212
    tmp___1 = page_chain_next(page);
#line 1212
    __builtin_prefetch((void const   *)tmp___1);
#line 1212
    if (1 != 0) {
#line 1213
      goto ldv_45558;
    } else {
#line 1215
      goto ldv_45560;
    }
  } else {

  }
  ldv_45560: ;
#line 1223
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1223
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1223);
  } else {

  }
#line 1224
  if (ds != 0U) {
#line 1224
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1224);
  } else {

  }
#line 1226
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_45561: 
#line 1228
  bio = bios;
#line 1229
  bios = bios->bi_next;
#line 1230
  bio->bi_next = 0;
#line 1233
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1234
    bio->bi_rw = bio->bi_rw & 0xfffffffffffffdffUL;
  } else {

  }
#line 1236
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1240
  if ((unsigned long )bios != (unsigned long )((struct bio *)0) && (unsigned long )bios->bi_next != (unsigned long )((struct bio *)0)) {
#line 1241
    bios->bi_rw = bios->bi_rw & 0xffffffffffffffefUL;
  } else {

  }
#line 1242
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1243
    goto ldv_45561;
  } else {

  }
#line 1243
  maybe_kick_lo(mdev);
#line 1244
  return (0);
  fail: ;
#line 1247
  goto ldv_45564;
  ldv_45563: 
#line 1248
  bio = bios;
#line 1249
  bios = bios->bi_next;
#line 1250
  bio_put(bio);
  ldv_45564: ;
#line 1247
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1248
    goto ldv_45563;
  } else {

  }

#line 1252
  return (-12);
}
}
#line 1261 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_epoch *tmp ;
  int tmp___0 ;

  {
#line 1263
  e = (struct drbd_epoch_entry *)w;
#line 1274
  tmp = previous_epoch(mdev, e->epoch);
#line 1274
  if ((unsigned long )tmp != (unsigned long )((struct drbd_epoch *)0)) {
#line 1275
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Write ordering was not enforced (one time event)\n");
  } else {

  }
#line 1280
  e->w.cb = & e_end_block;
#line 1281
  tmp___0 = drbd_submit_ee(mdev, e, 1U, 4);
#line 1281
  if (tmp___0 != 0) {
#line 1285
    e->w.cb = & w_e_reissue;
#line 1286
    drbd_queue_work(& mdev->data.work, & e->w);
  } else {

  }
#line 1288
  return (1);
}
}
#line 1291 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  int rv ;
  int issue_flush ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  enum finish_epoch tmp ;
  enum finish_epoch tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  enum finish_epoch tmp___3 ;
  int tmp___4 ;

  {
#line 1294
  p = & mdev->data.rbuf.barrier;
#line 1297
  inc_unacked(mdev);
#line 1299
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1300
    drbd_kick_lo(mdev);
  } else {

  }
#line 1302
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1303
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1303
  rv = (int )tmp;
#line 1310
  switch ((unsigned int )mdev->write_ordering) {
  case 3U: ;
  case 0U: ;
#line 1313
  if (rv == 2) {
#line 1314
    return (1);
  } else {

  }
#line 1315
  goto ldv_45583;
  case 2U: ;
  case 1U: ;
#line 1319
  if (rv == 0) {
#line 1320
    set_bit(0U, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1321
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1322
    tmp___0 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1322
    rv = (int )tmp___0;
  } else {

  }
#line 1324
  if (rv == 2) {
#line 1325
    return (1);
  } else {

  }
#line 1330
  goto ldv_45583;
  }
  ldv_45583: 
#line 1335
  tmp___1 = kmalloc___1(40UL, 16U);
#line 1335
  epoch = (struct drbd_epoch *)tmp___1;
#line 1336
  if ((unsigned long )epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1337
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
#line 1338
    tmp___2 = test_and_set_bit(0, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1338
    issue_flush = tmp___2 == 0;
#line 1339
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1340
    if (issue_flush != 0) {
#line 1341
      tmp___3 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1341
      rv = (int )tmp___3;
#line 1342
      if (rv == 2) {
#line 1343
        return (1);
      } else {

      }
    } else {

    }
#line 1346
    drbd_wait_ee_list_empty(mdev, & mdev->done_ee);
#line 1348
    return (1);
  } else {

  }
#line 1351
  epoch->flags = 0UL;
#line 1352
  atomic_set(& epoch->epoch_size, 0);
#line 1353
  atomic_set(& epoch->active, 0);
#line 1355
  spin_lock(& mdev->epoch_lock);
#line 1356
  tmp___4 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1356
  if (tmp___4 != 0) {
#line 1357
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1358
    mdev->current_epoch = epoch;
#line 1359
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1362
    kfree((void const   *)epoch);
  }
#line 1364
  spin_unlock(& mdev->epoch_lock);
#line 1366
  return (1);
}
}
#line 1372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  int _b ;
  int _b___0 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___1 ;
  int tmp___2 ;
  struct page *tmp___3 ;
  int tmp___4 ;

  {
#line 1374
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1374
  capacity = tmp;
#line 1378
  dig_in = mdev->int_dig_in;
#line 1379
  dig_vv = mdev->int_dig_vv;
#line 1382
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1382
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1382
    dgs = (int )tmp___0;
  } else {
#line 1382
    dgs = 0;
  }
#line 1385
  if (dgs != 0) {
#line 1386
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1387
    if (rr != dgs) {
#line 1388
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
               rr, dgs);
#line 1390
      return (0);
    } else {

    }
  } else {

  }
#line 1394
  data_size = data_size - dgs;
#line 1396
  _b = (data_size & 511) != 0;
#line 1396
  if (_b != 0) {
#line 1396
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1396);
  } else {

  }
#line 1396
  if (_b != 0) {
#line 1396
    return (0);
  } else {

  }
#line 1397
  _b___0 = (unsigned int )data_size > 131072U;
#line 1397
  if (_b___0 != 0) {
#line 1397
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_SEGMENT_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1397);
  } else {

  }
#line 1397
  if (_b___0 != 0) {
#line 1397
    return (0);
  } else {

  }
#line 1401
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1402
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1405
    return (0);
  } else {

  }
#line 1411
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1412
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1413
    return (0);
  } else {

  }
#line 1415
  ds = data_size;
#line 1416
  page = e->pages;
#line 1417
  goto ldv_45612;
  ldv_45611: 
#line 1418
  __min1 = ds;
#line 1418
  __min2 = 4096;
#line 1418
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1419
  tmp___1 = kmap(page);
#line 1419
  data = (unsigned long *)tmp___1;
#line 1420
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1421
  tmp___2 = drbd_insert_fault(mdev, 9U);
#line 1421
  if (tmp___2 != 0) {
#line 1422
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1423
    *data = ~ *data;
  } else {

  }
#line 1425
  kunmap(page);
#line 1426
  if ((unsigned int )rr != len) {
#line 1427
    drbd_free_some_ee(mdev, e, 0);
#line 1428
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
             rr, len);
#line 1430
    return (0);
  } else {

  }
#line 1432
  ds = ds - rr;
#line 1417
  page = page_chain_next(page);
  ldv_45612: ;
#line 1417
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1417
    tmp___3 = page_chain_next(page);
#line 1417
    __builtin_prefetch((void const   *)tmp___3);
#line 1417
    if (1 != 0) {
#line 1418
      goto ldv_45611;
    } else {
#line 1420
      goto ldv_45613;
    }
  } else {

  }
  ldv_45613: ;
#line 1435
  if (dgs != 0) {
#line 1436
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1437
    tmp___4 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1437
    if (tmp___4 != 0) {
#line 1438
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED.\n");
#line 1439
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1441
      drbd_free_some_ee(mdev, e, 0);
#line 1442
      return (0);
    } else {

    }
  } else {

  }
#line 1445
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1446
  return (e);
}
}
#line 1452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1455
  rv = 1;
#line 1458
  if (data_size == 0) {
#line 1459
    return (1);
  } else {

  }
#line 1461
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1463
  data = kmap(page);
#line 1464
  goto ldv_45633;
  ldv_45632: 
#line 1465
  __min1 = data_size;
#line 1465
  __min2 = 4096;
#line 1465
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1466
  __min1___1 = data_size;
#line 1466
  __min2___1 = 4096;
#line 1466
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1467
    rv = 0;
#line 1469
    __min1___0 = data_size;
#line 1469
    __min2___0 = 4096;
#line 1469
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
             rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1470
    goto ldv_45631;
  } else {

  }
#line 1472
  data_size = data_size - rr;
  ldv_45633: ;
#line 1464
  if (data_size != 0) {
#line 1465
    goto ldv_45632;
  } else {

  }
  ldv_45631: 
#line 1474
  kunmap(page);
#line 1475
  drbd_pp_free(mdev, page, 0);
#line 1476
  return (rv);
}
}
#line 1479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  int __min1 ;
  int __min2 ;
  void *tmp___0 ;
  int tmp___1 ;

  {
#line 1485
  dig_in = mdev->int_dig_in;
#line 1486
  dig_vv = mdev->int_dig_vv;
#line 1488
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1488
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1488
    dgs = (int )tmp;
  } else {
#line 1488
    dgs = 0;
  }
#line 1491
  if (dgs != 0) {
#line 1492
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1493
    if (rr != dgs) {
#line 1494
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
               rr, dgs);
#line 1496
      return (0);
    } else {

    }
  } else {

  }
#line 1500
  data_size = data_size - dgs;
#line 1504
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1506
  bio = req->master_bio;
#line 1507
  if (bio->bi_sector != sector) {
#line 1507
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1507);
  } else {

  }
#line 1509
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1509
  i = (int )bio->bi_idx;
#line 1509
  goto ldv_45652;
  ldv_45651: 
#line 1510
  __min1 = data_size;
#line 1510
  __min2 = (int )bvec->bv_len;
#line 1510
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1511
  tmp___0 = kmap(bvec->bv_page);
#line 1511
  rr = drbd_recv(mdev, tmp___0 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1514
  kunmap(bvec->bv_page);
#line 1515
  if (rr != expect) {
#line 1516
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
             rr, expect);
#line 1519
    return (0);
  } else {

  }
#line 1521
  data_size = data_size - rr;
#line 1509
  bvec = bvec + 1;
#line 1509
  i = i + 1;
  ldv_45652: ;
#line 1509
  if ((int )bio->bi_vcnt > i) {
#line 1510
    goto ldv_45651;
  } else {

  }

#line 1524
  if (dgs != 0) {
#line 1525
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1526
    tmp___1 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1526
    if (tmp___1 != 0) {
#line 1527
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1528
      return (0);
    } else {

    }
  } else {

  }
#line 1532
  if (data_size != 0) {
#line 1532
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1532);
  } else {

  }
#line 1533
  return (1);
}
}
#line 1538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1540
  e = (struct drbd_epoch_entry *)w;
#line 1541
  sector = e->sector;
#line 1544
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1544
  if (tmp == 0) {
#line 1544
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1544);
  } else {

  }
#line 1546
  tmp___0 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1546
  if (tmp___0 != 0L) {
#line 1547
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1547U);
#line 1548
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1551
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1553
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1555
  atomic_dec(& mdev->unacked_cnt);
#line 1555
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1555
  if (tmp___2 < 0) {
#line 1555
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1555
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1555, tmp___1);
  } else {

  }
#line 1557
  return (ok);
}
}
#line 1560 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1564
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1565
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1566
    goto fail;
  } else {

  }
#line 1568
  atomic_dec(& mdev->rs_pending_cnt);
#line 1568
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1568
  if (tmp___0 < 0) {
#line 1568
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1568
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1568, tmp);
  } else {

  }
#line 1570
  inc_unacked(mdev);
#line 1574
  e->w.cb = & e_end_resync_block;
#line 1576
  spin_lock_irq(& mdev->req_lock);
#line 1577
  list_add(& e->w.list, & mdev->sync_ee);
#line 1578
  spin_unlock_irq(& mdev->req_lock);
#line 1580
  atomic_add(data_size >> 9, & mdev->rs_sect_ev);
#line 1581
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1581
  if (tmp___1 == 0) {
#line 1582
    return (1);
  } else {

  }
#line 1587
  spin_lock_irq(& mdev->req_lock);
#line 1588
  list_del(& e->w.list);
#line 1589
  spin_unlock_irq(& mdev->req_lock);
#line 1591
  drbd_free_some_ee(mdev, e, 0);
  fail: 
#line 1593
  put_ldev(mdev);
#line 1594
  return (0);
}
}
#line 1597 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  long tmp___0 ;

  {
#line 1602
  p = & mdev->data.rbuf.data;
#line 1604
  tmp = __fswab64(p->sector);
#line 1604
  sector = (sector_t )tmp;
#line 1606
  spin_lock_irq(& mdev->req_lock);
#line 1607
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1608
  spin_unlock_irq(& mdev->req_lock);
#line 1609
  tmp___0 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1609
  if (tmp___0 != 0L) {
#line 1610
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1611
    return (0);
  } else {

  }
#line 1617
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1619
  if (ok != 0) {
#line 1620
    req_mod(req, data_received);
  } else {

  }
#line 1625
  return (ok);
}
}
#line 1628 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1632
  p = & mdev->data.rbuf.data;
#line 1634
  tmp = __fswab64(p->sector);
#line 1634
  sector = (sector_t )tmp;
#line 1635
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1635
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1635);
  } else {

  }
#line 1637
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1637
  if (tmp___1 != 0) {
#line 1641
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1643
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1643
    if (tmp___0 != 0) {
#line 1644
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1646
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1648
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
  }
#line 1651
  atomic_add((int )(data_size >> 9), & mdev->rs_sect_in);
#line 1653
  return (ok);
}
}
#line 1659 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  struct drbd_epoch *epoch ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1661
  e = (struct drbd_epoch_entry *)w;
#line 1662
  sector = e->sector;
#line 1664
  ok = 1;
#line 1666
  if ((e->flags & 4UL) != 0UL) {
#line 1667
    epoch = previous_epoch(mdev, e->epoch);
#line 1668
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1669
      drbd_may_finish_epoch(mdev, epoch, cancel != 0 ? 34 : EV_BARRIER_DONE);
    } else {

    }
  } else {

  }
#line 1672
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1673
    tmp___0 = __builtin_expect((e->flags & 16UL) == 0UL, 1L);
#line 1673
    if (tmp___0 != 0L) {
#line 1674
      pcmd = ((int )mdev->state.ldv_35401.conn > 15 && (int )mdev->state.ldv_35401.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1678
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1678
      ok = tmp & ok;
#line 1679
      if (pcmd == 23) {
#line 1680
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1680U);
      } else {

      }
    } else {
#line 1682
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1686
    atomic_dec(& mdev->unacked_cnt);
#line 1686
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1686
    if (tmp___2 < 0) {
#line 1686
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1686
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1686, tmp___1);
    } else {

    }
  } else {

  }
#line 1690
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1691
    spin_lock_irq(& mdev->req_lock);
#line 1692
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1692
    if (tmp___3 != 0) {
#line 1692
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1692);
    } else {

    }
#line 1693
    hlist_del_init(& e->colision);
#line 1694
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1696
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1696
    if (tmp___4 == 0) {
#line 1696
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1696);
    } else {

    }
  }
#line 1699
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1701
  return (ok);
}
}
#line 1704 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1706
  e = (struct drbd_epoch_entry *)w;
#line 1707
  ok = 1;
#line 1709
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1709
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1709);
  } else {

  }
#line 1710
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1712
  spin_lock_irq(& mdev->req_lock);
#line 1713
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1713
  if (tmp != 0) {
#line 1713
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1713);
  } else {

  }
#line 1714
  hlist_del_init(& e->colision);
#line 1715
  spin_unlock_irq(& mdev->req_lock);
#line 1717
  atomic_dec(& mdev->unacked_cnt);
#line 1717
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1717
  if (tmp___1 < 0) {
#line 1717
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1717
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1717, tmp___0);
  } else {

  }
#line 1719
  return (ok);
}
}
#line 1743 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1745
  tmp = get_current();
#line 1745
  wait.flags = 0U;
#line 1745
  wait.private = (void *)tmp;
#line 1745
  wait.func = & autoremove_wake_function;
#line 1745
  wait.task_list.next = & wait.task_list;
#line 1745
  wait.task_list.prev = & wait.task_list;
#line 1748
  ret = 0;
#line 1749
  spin_lock(& mdev->peer_seq_lock);
  ldv_45729: 
#line 1751
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1752
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1752
  if (tmp___0 <= 0) {
#line 1753
    goto ldv_45728;
  } else {

  }
#line 1754
  tmp___1 = get_current();
#line 1754
  tmp___2 = signal_pending(tmp___1);
#line 1754
  if (tmp___2 != 0) {
#line 1755
    ret = -512;
#line 1756
    goto ldv_45728;
  } else {

  }
#line 1758
  p_seq = mdev->peer_seq;
#line 1759
  spin_unlock(& mdev->peer_seq_lock);
#line 1760
  timeout = schedule_timeout(7500L);
#line 1761
  spin_lock(& mdev->peer_seq_lock);
#line 1762
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1763
    ret = -110;
#line 1764
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1765
    goto ldv_45728;
  } else {

  }
#line 1767
  goto ldv_45729;
  ldv_45728: 
#line 1768
  finish_wait(& mdev->seq_wait, & wait);
#line 1769
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1770
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1771
  spin_unlock(& mdev->peer_seq_lock);
#line 1772
  return (ret);
}
}
#line 1775 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static unsigned long write_flags_to_bio(struct drbd_conf *mdev , u32 dpf ) 
{ 


  {
#line 1777
  if (mdev->agreed_pro_version > 94) {
#line 1778
    return ((unsigned long )((((((dpf & 2U) != 0U ? 32 : 0) | ((dpf & 8U) != 0U ? 512 : 0)) | ((dpf & 16U) != 0U ? 16384 : 0)) | ((dpf & 32U) != 0U ? 16384 : 0)) | ((dpf & 64U) != 0U ? 128 : 0)));
  } else {
#line 1784
    return ((dpf & 2U) != 0U ? 544UL : 0UL);
  }
}
}
#line 1788 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int rw ;
  u32 dp_flags ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  struct drbd_epoch *epoch ;
  struct list_head  const  *__mptr ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  __u32 tmp___7 ;
  unsigned long tmp___8 ;
  int size ;
  int discard ;
  int tmp___9 ;
  wait_queue_t wait ;
  struct task_struct *tmp___10 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___11 ;
  long tmp___12 ;
  __u32 tmp___13 ;
  int tmp___14 ;
  struct hlist_head *tmp___15 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___16 ;
  struct task_struct *tmp___17 ;
  int tmp___18 ;
  struct hlist_node  const  *__mptr___0 ;
  struct task_struct *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;

  {
#line 1792
  p = & mdev->data.rbuf.data;
#line 1793
  rw = 1;
#line 1796
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1796
  if (tmp___2 == 0) {
#line 1797
    tmp = ___ratelimit(& drbd_ratelimit_state, "receive_Data");
#line 1797
    if (tmp != 0) {
#line 1798
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write mirrored data block to local disk.\n");
    } else {

    }
#line 1800
    spin_lock(& mdev->peer_seq_lock);
#line 1801
    tmp___0 = __fswab32(p->seq_num);
#line 1801
    if (mdev->peer_seq + 1U == tmp___0) {
#line 1802
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1803
    spin_unlock(& mdev->peer_seq_lock);
#line 1805
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
#line 1806
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1807
    tmp___1 = drbd_drain_block(mdev, (int )data_size);
#line 1807
    return (tmp___1);
  } else {

  }
#line 1815
  tmp___3 = __fswab64(p->sector);
#line 1815
  sector = (sector_t )tmp___3;
#line 1816
  e = read_in_block(mdev, p->block_id, sector, (int )data_size);
#line 1817
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1818
    put_ldev(mdev);
#line 1819
    return (0);
  } else {

  }
#line 1822
  e->w.cb = & e_end_block;
#line 1824
  spin_lock(& mdev->epoch_lock);
#line 1825
  e->epoch = mdev->current_epoch;
#line 1826
  atomic_inc(& (e->epoch)->epoch_size);
#line 1827
  atomic_inc(& (e->epoch)->active);
#line 1829
  if ((unsigned int )mdev->write_ordering == 3U) {
#line 1829
    tmp___6 = atomic_read((atomic_t const   *)(& (e->epoch)->epoch_size));
#line 1829
    if (tmp___6 == 1) {
#line 1834
      __mptr = (struct list_head  const  *)(e->epoch)->list.prev;
#line 1834
      epoch = (struct drbd_epoch *)__mptr;
#line 1835
      if ((unsigned long )e->epoch == (unsigned long )epoch) {
#line 1836
        set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1837
        rw = rw | 16;
#line 1838
        e->flags = e->flags | 4UL;
      } else {
#line 1840
        tmp___4 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1840
        if (tmp___4 > 1) {
#line 1842
          set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1843
          set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1844
          rw = rw | 16;
#line 1845
          e->flags = e->flags | 4UL;
        } else {
#line 1840
          tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1840
          if (tmp___5 == 0) {
#line 1842
            set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1843
            set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1844
            rw = rw | 16;
#line 1845
            e->flags = e->flags | 4UL;
          } else {

          }
        }
      }
    } else {

    }
  } else {

  }
#line 1849
  spin_unlock(& mdev->epoch_lock);
#line 1851
  tmp___7 = __fswab32(p->dp_flags);
#line 1851
  dp_flags = tmp___7;
#line 1852
  tmp___8 = write_flags_to_bio(mdev, dp_flags);
#line 1852
  rw = (int )((unsigned int )tmp___8 | (unsigned int )rw);
#line 1854
  if ((dp_flags & 4U) != 0U) {
#line 1855
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1858
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1859
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1863
    size = (int const   )e->size;
#line 1864
    tmp___9 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 1864
    discard = tmp___9;
#line 1865
    tmp___10 = get_current();
#line 1865
    wait.flags = 0U;
#line 1865
    wait.private = (void *)tmp___10;
#line 1865
    wait.func = & autoremove_wake_function;
#line 1865
    wait.task_list.next = & wait.task_list;
#line 1865
    wait.task_list.prev = & wait.task_list;
#line 1871
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1871
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1871);
    } else {

    }
#line 1872
    tmp___11 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1872
    if (tmp___11 != 0L) {
#line 1872
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1872), "i" (12UL));
      ldv_45755: ;
#line 1872
      goto ldv_45755;
    } else {

    }
#line 1873
    tmp___12 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1873
    if (tmp___12 != 0L) {
#line 1873
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1873), "i" (12UL));
      ldv_45756: ;
#line 1873
      goto ldv_45756;
    } else {

    }
#line 1909
    tmp___13 = __fswab32(p->seq_num);
#line 1909
    tmp___14 = drbd_wait_peer_seq(mdev, tmp___13);
#line 1909
    if (tmp___14 != 0) {
#line 1910
      goto out_interrupted;
    } else {

    }
#line 1912
    spin_lock_irq(& mdev->req_lock);
#line 1914
    tmp___15 = ee_hash_slot(mdev, sector);
#line 1914
    hlist_add_head(& e->colision, tmp___15);
#line 1917
    slot = tl_hash_slot(mdev, sector);
#line 1918
    first = 1;
    ldv_45768: 
#line 1920
    have_unacked = 0;
#line 1921
    have_conflict = 0;
#line 1922
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1924
    n = slot->first;
#line 1924
    goto ldv_45765;
    ldv_45764: 
#line 1925
    tmp___18 = overlaps(i->sector, (int )i->size, sector, size);
#line 1925
    if (tmp___18 != 0) {
#line 1928
      if (first != 0) {
#line 1929
        tmp___16 = get_current();
#line 1929
        tmp___17 = get_current();
#line 1929
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___17->comm), tmp___16->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1934
      if ((i->rq_state & 8UL) != 0UL) {
#line 1935
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1936
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1924
    n = n->next;
    ldv_45765: ;
#line 1924
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1924
      __builtin_prefetch((void const   *)n->next);
#line 1924
      if (1 != 0) {
#line 1924
        __mptr___0 = (struct hlist_node  const  *)n;
#line 1924
        i = (struct drbd_request *)__mptr___0 + 0xffffffffffffffd8UL;
#line 1924
        if (1 != 0) {
#line 1925
          goto ldv_45764;
        } else {
#line 1927
          goto ldv_45766;
        }
      } else {
#line 1927
        goto ldv_45766;
      }
    } else {

    }
    ldv_45766: ;
#line 1940
    if (have_conflict == 0) {
#line 1941
      goto ldv_45767;
    } else {

    }
#line 1944
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1945
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1947
      inc_unacked(mdev);
#line 1948
      e->w.cb = & e_send_discard_ack;
#line 1949
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1951
      spin_unlock_irq(& mdev->req_lock);
#line 1956
      put_ldev(mdev);
#line 1957
      wake_asender(mdev);
#line 1958
      finish_wait(& mdev->misc_wait, & wait);
#line 1959
      return (1);
    } else {

    }
#line 1962
    tmp___19 = get_current();
#line 1962
    tmp___20 = signal_pending(tmp___19);
#line 1962
    if (tmp___20 != 0) {
#line 1963
      hlist_del_init(& e->colision);
#line 1965
      spin_unlock_irq(& mdev->req_lock);
#line 1967
      finish_wait(& mdev->misc_wait, & wait);
#line 1968
      goto out_interrupted;
    } else {

    }
#line 1971
    spin_unlock_irq(& mdev->req_lock);
#line 1972
    if (first != 0) {
#line 1973
      first = 0;
#line 1974
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 1976
    if (discard != 0) {
#line 1979
      if (have_unacked != 0) {
#line 1979
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                1979);
      } else {

      }
    } else {

    }
#line 1981
    schedule();
#line 1982
    spin_lock_irq(& mdev->req_lock);
#line 1983
    goto ldv_45768;
    ldv_45767: 
#line 1984
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1987
  list_add(& e->w.list, & mdev->active_ee);
#line 1988
  spin_unlock_irq(& mdev->req_lock);
#line 1990
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1992
  inc_unacked(mdev);
#line 1995
  goto ldv_45770;
  case 2: 
#line 1999
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 2000
  goto ldv_45770;
  case 1: ;
#line 2003
  goto ldv_45770;
  }
  ldv_45770: ;
#line 2006
  if (*((unsigned int *)mdev + 503UL) == 0U) {
#line 2008
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           2008U);
#line 2009
    e->flags = e->flags | 1UL;
#line 2010
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 2013
  tmp___21 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 2013
  if (tmp___21 == 0) {
#line 2014
    return (1);
  } else {

  }
#line 2019
  spin_lock_irq(& mdev->req_lock);
#line 2020
  list_del(& e->w.list);
#line 2021
  hlist_del_init(& e->colision);
#line 2022
  spin_unlock_irq(& mdev->req_lock);
#line 2023
  if ((int )e->flags & 1) {
#line 2024
    drbd_al_complete_io(mdev, e->sector);
  } else {

  }
  out_interrupted: 
#line 2030
  put_ldev(mdev);
#line 2031
  drbd_free_some_ee(mdev, e, 0);
#line 2032
  return (0);
}
}
#line 2046 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_rs_should_slow_down(struct drbd_conf *mdev ) 
{ 
  struct gendisk *disk ;
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  int curr_events ;
  int throttle ;
  unsigned long res ;
  unsigned int _cpu ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned long res___0 ;
  unsigned int _cpu___0 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  int tmp ;
  unsigned long rs_left ;
  int i ;
  unsigned long tmp___0 ;

  {
#line 2048
  disk = (((mdev->ldev)->backing_bdev)->bd_contains)->bd_disk;
#line 2051
  throttle = 0;
#line 2054
  if (mdev->sync_conf.c_min_rate == 0) {
#line 2055
    return (0);
  } else {

  }
#line 2057
  res = 0UL;
#line 2057
  _cpu = 4294967295U;
#line 2057
  goto ldv_45789;
  ldv_45788: 
#line 2057
  __vpp_verify = 0;
#line 2057
  __asm__  ("": "=r" (__ptr): "0" (disk->part0.dkstats));
#line 2057
  res = ((struct disk_stats *)(__per_cpu_offset[_cpu] + __ptr))->sectors[0] + res;
  ldv_45789: 
#line 2057
  _cpu = cpumask_next((int )_cpu, cpu_possible_mask);
#line 2057
  if ((unsigned int )nr_cpu_ids > _cpu) {
#line 2058
    goto ldv_45788;
  } else {

  }
#line 2058
  res___0 = 0UL;
#line 2058
  _cpu___0 = 4294967295U;
#line 2058
  goto ldv_45799;
  ldv_45798: 
#line 2058
  __vpp_verify___0 = 0;
#line 2058
  __asm__  ("": "=r" (__ptr___0): "0" (disk->part0.dkstats));
#line 2058
  res___0 = ((struct disk_stats *)(__per_cpu_offset[_cpu___0] + __ptr___0))->sectors[1] + res___0;
  ldv_45799: 
#line 2058
  _cpu___0 = cpumask_next((int )_cpu___0, cpu_possible_mask);
#line 2058
  if ((unsigned int )nr_cpu_ids > _cpu___0) {
#line 2059
    goto ldv_45798;
  } else {

  }
#line 2058
  tmp = atomic_read((atomic_t const   *)(& mdev->rs_sect_ev));
#line 2058
  curr_events = ((int )res + (int )res___0) - tmp;
#line 2060
  if (mdev->rs_last_events == 0 || curr_events - mdev->rs_last_events > 64) {
#line 2064
    mdev->rs_last_events = curr_events;
#line 2068
    i = (mdev->rs_last_mark + 6) % 8;
#line 2069
    tmp___0 = drbd_bm_total_weight(mdev);
#line 2069
    rs_left = tmp___0 - mdev->rs_failed;
#line 2071
    dt = (unsigned long )(((long )jiffies - (long )mdev->rs_mark_time[i]) / 250L);
#line 2072
    if (dt == 0UL) {
#line 2073
      dt = dt + 1UL;
    } else {

    }
#line 2074
    db = mdev->rs_mark_left[i] - rs_left;
#line 2075
    dbdt = db / dt << 2;
#line 2077
    if ((unsigned long )mdev->sync_conf.c_min_rate < dbdt) {
#line 2078
      throttle = 1;
    } else {

    }
  } else {

  }
#line 2080
  return (throttle);
}
}
#line 2084 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int digest_size ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int verb ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 2087
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 2087
  capacity = tmp;
#line 2089
  di = 0;
#line 2092
  p = & mdev->data.rbuf.block_req;
#line 2094
  tmp___0 = __fswab64(p->sector);
#line 2094
  sector = (sector_t )tmp___0;
#line 2095
  tmp___1 = __fswab32(p->blksize);
#line 2095
  size = (int )tmp___1;
#line 2097
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 2098
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            2098, (unsigned long long )sector, size);
#line 2100
    return (0);
  } else {

  }
#line 2102
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2103
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            2103, (unsigned long long )sector, size);
#line 2105
    return (0);
  } else {

  }
#line 2108
  tmp___7 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2108
  if (tmp___7 == 0) {
#line 2109
    verb = 1;
#line 2110
    switch ((unsigned int )cmd) {
    case 8U: 
#line 2112
    drbd_send_ack_rp(mdev, P_NEG_DREPLY, p);
#line 2113
    goto ldv_45818;
    case 9U: ;
    case 33U: ;
    case 30U: 
#line 2117
    drbd_send_ack_rp(mdev, P_NEG_RS_DREPLY, p);
#line 2118
    goto ldv_45818;
    case 31U: 
#line 2120
    verb = 0;
#line 2121
    atomic_dec(& mdev->rs_pending_cnt);
#line 2121
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2121
    if (tmp___3 < 0) {
#line 2121
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2121
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2121, tmp___2);
    } else {

    }
#line 2122
    drbd_send_ack_ex(mdev, P_OV_RESULT, sector, size, 4711ULL);
#line 2123
    goto ldv_45818;
    default: 
#line 2125
    tmp___4 = cmdname(cmd);
#line 2125
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
            tmp___4);
    }
    ldv_45818: ;
#line 2128
    if (verb != 0) {
#line 2128
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2128
      if (tmp___5 != 0) {
#line 2129
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
      } else {

      }
    } else {

    }
#line 2133
    tmp___6 = drbd_drain_block(mdev, (int )digest_size);
#line 2133
    return (tmp___6);
  } else {

  }
#line 2139
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2140
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2141
    put_ldev(mdev);
#line 2142
    return (0);
  } else {

  }
#line 2145
  switch ((unsigned int )cmd) {
  case 8U: 
#line 2147
  e->w.cb = & w_e_end_data_req;
#line 2148
  fault_type = 5U;
#line 2150
  goto submit;
  case 9U: 
#line 2153
  e->w.cb = & w_e_end_rsdata_req;
#line 2154
  fault_type = 3U;
#line 2155
  goto ldv_45831;
  case 31U: ;
  case 33U: 
#line 2159
  fault_type = 3U;
#line 2160
  tmp___8 = kmalloc___1((unsigned long )digest_size + 16UL, 16U);
#line 2160
  di = (struct digest_info *)tmp___8;
#line 2161
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2162
    goto out_free_e;
  } else {

  }
#line 2164
  di->digest_size = (int )digest_size;
#line 2165
  di->digest = (void *)di + 16U;
#line 2167
  e->ldv_42864.digest = di;
#line 2168
  e->flags = e->flags | 32UL;
#line 2170
  tmp___9 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2170
  if ((unsigned int )tmp___9 != digest_size) {
#line 2171
    goto out_free_e;
  } else {

  }
#line 2173
  if ((unsigned int )cmd == 33U) {
#line 2174
    if (mdev->agreed_pro_version <= 88) {
#line 2174
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2174);
    } else {

    }
#line 2175
    e->w.cb = & w_e_end_csum_rs_req;
  } else
#line 2176
  if ((unsigned int )cmd == 31U) {
#line 2177
    e->w.cb = & w_e_end_ov_reply;
#line 2178
    atomic_dec(& mdev->rs_pending_cnt);
#line 2178
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2178
    if (tmp___11 < 0) {
#line 2178
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2178
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2178, tmp___10);
    } else {

    }
#line 2181
    goto submit_for_resync;
  } else {

  }
#line 2183
  goto ldv_45831;
  case 30U: ;
#line 2186
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2188
    mdev->ov_start_sector = sector;
#line 2189
    mdev->ov_position = sector;
#line 2190
    mdev->ov_left = mdev->rs_total - (sector >> 3);
#line 2191
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2194
  e->w.cb = & w_e_end_ov_req;
#line 2195
  fault_type = 3U;
#line 2196
  goto ldv_45831;
  default: 
#line 2199
  tmp___12 = cmdname(cmd);
#line 2199
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___12);
#line 2201
  fault_type = 10U;
#line 2202
  goto out_free_e;
  }
  ldv_45831: ;
#line 2227
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 4U) {
#line 2227
    tmp___13 = drbd_rs_should_slow_down(mdev);
#line 2227
    if (tmp___13 != 0) {
#line 2228
      msleep(100U);
    } else {

    }
  } else {

  }
#line 2229
  tmp___14 = drbd_rs_begin_io(mdev, e->sector);
#line 2229
  if (tmp___14 != 0) {
#line 2230
    goto out_free_e;
  } else {

  }
  submit_for_resync: 
#line 2233
  atomic_add(size >> 9, & mdev->rs_sect_ev);
  submit: 
#line 2236
  inc_unacked(mdev);
#line 2237
  spin_lock_irq(& mdev->req_lock);
#line 2238
  list_add_tail(& e->w.list, & mdev->read_ee);
#line 2239
  spin_unlock_irq(& mdev->req_lock);
#line 2241
  tmp___15 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2241
  if (tmp___15 == 0) {
#line 2242
    return (1);
  } else {

  }
#line 2247
  spin_lock_irq(& mdev->req_lock);
#line 2248
  list_del(& e->w.list);
#line 2249
  spin_unlock_irq(& mdev->req_lock);
  out_free_e: 
#line 2253
  put_ldev(mdev);
#line 2254
  drbd_free_some_ee(mdev, e, 0);
#line 2255
  return (0);
}
}
#line 2258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2260
  rv = -100;
#line 2263
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2264
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2266
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2267
  ch_self = mdev->comm_bm_set;
#line 2269
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2273
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2274
  goto ldv_45852;
  case 0: ;
#line 2276
  goto ldv_45852;
  case 1: ;
#line 2278
  if (self == 0 && peer == 1) {
#line 2279
    rv = -1;
#line 2280
    goto ldv_45852;
  } else {

  }
#line 2282
  if (self == 1 && peer == 0) {
#line 2283
    rv = 1;
#line 2284
    goto ldv_45852;
  } else {

  }
  case 2: ;
#line 2288
  if (self == 0 && peer == 1) {
#line 2289
    rv = 1;
#line 2290
    goto ldv_45852;
  } else {

  }
#line 2292
  if (self == 1 && peer == 0) {
#line 2293
    rv = -1;
#line 2294
    goto ldv_45852;
  } else {

  }
#line 2297
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2300
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2301
    tmp = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2301
    rv = tmp != 0 ? -1 : 1;
#line 2303
    goto ldv_45852;
  } else {
#line 2305
    if (ch_peer == 0UL) {
#line 2305
      rv = 1;
#line 2305
      goto ldv_45852;
    } else {

    }
#line 2306
    if (ch_self == 0UL) {
#line 2306
      rv = -1;
#line 2306
      goto ldv_45852;
    } else {

    }
  }
#line 2308
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2309
    goto ldv_45852;
  } else {

  }
  case 4: ;
#line 2311
  if (ch_self < ch_peer) {
#line 2312
    rv = -1;
  } else
#line 2313
  if (ch_self > ch_peer) {
#line 2314
    rv = 1;
  } else {
#line 2317
    tmp___0 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2317
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2319
  goto ldv_45852;
  case 5: 
#line 2321
  rv = -1;
#line 2322
  goto ldv_45852;
  case 6: 
#line 2324
  rv = 1;
  }
  ldv_45852: ;
#line 2327
  return (rv);
}
}
#line 2330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2332
  rv = -100;
#line 2334
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2335
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2337
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2343
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2344
  goto ldv_45872;
  case 0: ;
#line 2346
  goto ldv_45872;
  case 7: 
#line 2348
  hg = drbd_asb_recover_0p(mdev);
#line 2349
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 2U) {
#line 2350
    rv = hg;
  } else {

  }
#line 2351
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 2352
    rv = hg;
  } else {

  }
#line 2353
  goto ldv_45872;
  case 10: 
#line 2355
  rv = drbd_asb_recover_0p(mdev);
#line 2356
  goto ldv_45872;
  case 8: ;
#line 2358
  return ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U ? 1 : -1);
  case 9: 
#line 2360
  hg = drbd_asb_recover_0p(mdev);
#line 2361
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 2362
    self = drbd_set_role(mdev, R_SECONDARY, 0);
#line 2366
    val.i = 0U;
#line 2366
    val.ldv_35401.role = 2U;
#line 2366
    mask.i = 0U;
#line 2366
    mask.ldv_35401.role = 3U;
#line 2366
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2367
    if (self != 1) {
#line 2368
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2370
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2371
      rv = hg;
    }
  } else {
#line 2374
    rv = hg;
  }
  }
  ldv_45872: ;
#line 2377
  return (rv);
}
}
#line 2380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2382
  rv = -100;
#line 2384
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2385
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2387
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2395
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2396
  goto ldv_45896;
  case 10: 
#line 2398
  rv = drbd_asb_recover_0p(mdev);
#line 2399
  goto ldv_45896;
  case 0: ;
#line 2401
  goto ldv_45896;
  case 9: 
#line 2403
  hg = drbd_asb_recover_0p(mdev);
#line 2404
  if (hg == -1) {
#line 2408
    val.i = 0U;
#line 2408
    val.ldv_35401.role = 2U;
#line 2408
    mask.i = 0U;
#line 2408
    mask.ldv_35401.role = 3U;
#line 2408
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2409
    if (self != 1) {
#line 2410
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2412
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2413
      rv = hg;
    }
  } else {
#line 2416
    rv = hg;
  }
  }
  ldv_45896: ;
#line 2419
  return (rv);
}
}
#line 2422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2425
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2426
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2427
    return;
  } else {

  }
#line 2429
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2430
  return;
}
}
#line 2449 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2454
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2455
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2457
  *rule_nr = 10;
#line 2458
  if (self == 4ULL && peer == 4ULL) {
#line 2459
    return (0);
  } else {

  }
#line 2461
  *rule_nr = 20;
#line 2462
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2464
    return (-2);
  } else {

  }
#line 2466
  *rule_nr = 30;
#line 2467
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2469
    return (2);
  } else {

  }
#line 2471
  if (self == peer) {
#line 2474
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2476
      if (mdev->agreed_pro_version <= 90) {
#line 2477
        return (-1001);
      } else {

      }
#line 2479
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2481
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2482
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2484
        if ((int )mdev->state.ldv_35401.disk > 2) {
#line 2484
          tmp = drbd_bm_total_weight(mdev);
#line 2484
          tmp___0 = (u64 )tmp;
        } else {
#line 2484
          tmp___0 = 0ULL;
        }
#line 2484
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2486
        *rule_nr = 34;
      } else {
#line 2488
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2489
        *rule_nr = 36;
      }
#line 2492
      return (1);
    } else {

    }
#line 2495
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2497
      if (mdev->agreed_pro_version <= 90) {
#line 2498
        return (-1001);
      } else {

      }
#line 2500
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2502
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2504
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2505
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2506
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2508
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2509
        *rule_nr = 35;
      } else {
#line 2511
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2512
        *rule_nr = 37;
      }
#line 2515
      return (-1);
    } else {

    }
#line 2519
    tmp___1 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 2519
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2523
    *rule_nr = 40;
#line 2525
    switch (rct) {
    case 0: ;
#line 2526
    return (0);
    case 1: ;
#line 2527
    return (1);
    case 2: ;
#line 2528
    return (-1);
    case 3: 
#line 2530
    dc = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2531
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2535
  *rule_nr = 50;
#line 2536
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2537
  if (self == peer) {
#line 2538
    return (-1);
  } else {

  }
#line 2540
  *rule_nr = 51;
#line 2541
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2542
  if (self == peer) {
#line 2543
    self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2544
    peer = *(mdev->p_uuid + 3UL) & 0xfffffffffffffffeULL;
#line 2545
    if (self == peer) {
#line 2549
      if (mdev->agreed_pro_version <= 90) {
#line 2550
        return (-1001);
      } else {

      }
#line 2552
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2553
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2554
      return (-1);
    } else {

    }
  } else {

  }
#line 2558
  *rule_nr = 60;
#line 2559
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2560
  i = 2;
#line 2560
  goto ldv_45926;
  ldv_45925: 
#line 2561
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2562
  if (self == peer) {
#line 2563
    return (-2);
  } else {

  }
#line 2560
  i = i + 1;
  ldv_45926: ;
#line 2560
  if (i <= 3) {
#line 2561
    goto ldv_45925;
  } else {

  }
#line 2566
  *rule_nr = 70;
#line 2567
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2568
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2569
  if (self == peer) {
#line 2570
    return (1);
  } else {

  }
#line 2572
  *rule_nr = 71;
#line 2573
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2574
  if (self == peer) {
#line 2575
    self = (mdev->ldev)->md.uuid[3] & 0xfffffffffffffffeULL;
#line 2576
    peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2577
    if (self == peer) {
#line 2581
      if (mdev->agreed_pro_version <= 90) {
#line 2582
        return (-1001);
      } else {

      }
#line 2584
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2585
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2587
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Undid last start of resync:\n");
#line 2589
      if ((int )mdev->state.ldv_35401.disk > 2) {
#line 2589
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2589
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2589
        tmp___3 = 0ULL;
      }
#line 2589
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2592
      return (1);
    } else {

    }
  } else {

  }
#line 2597
  *rule_nr = 80;
#line 2598
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2599
  i = 2;
#line 2599
  goto ldv_45929;
  ldv_45928: 
#line 2600
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2601
  if (self == peer) {
#line 2602
    return (2);
  } else {

  }
#line 2599
  i = i + 1;
  ldv_45929: ;
#line 2599
  if (i <= 3) {
#line 2600
    goto ldv_45928;
  } else {

  }
#line 2605
  *rule_nr = 90;
#line 2606
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2607
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2608
  if (self == peer && self != 0ULL) {
#line 2609
    return (100);
  } else {

  }
#line 2611
  *rule_nr = 100;
#line 2612
  i = 2;
#line 2612
  goto ldv_45935;
  ldv_45934: 
#line 2613
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2614
  j = 2;
#line 2614
  goto ldv_45932;
  ldv_45931: 
#line 2615
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2616
  if (self == peer) {
#line 2617
    return (-100);
  } else {

  }
#line 2614
  j = j + 1;
  ldv_45932: ;
#line 2614
  if (j <= 3) {
#line 2615
    goto ldv_45931;
  } else {

  }
#line 2612
  i = i + 1;
  ldv_45935: ;
#line 2612
  if (i <= 3) {
#line 2613
    goto ldv_45934;
  } else {

  }

#line 2621
  return (-1000);
}
}
#line 2627 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long __x ;
  int tmp ;
  long __x___0 ;
  int pcount ;
  int forced ;
  long __x___1 ;
  long __x___2 ;
  long __x___3 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long __x___4 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2631
  rv = C_MASK;
#line 2634
  mydisk = (enum drbd_disk_state )mdev->state.ldv_35401.disk;
#line 2635
  if ((unsigned int )mydisk == 3U) {
#line 2636
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_35401.disk;
  } else {

  }
#line 2638
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2639
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2640
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2643
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2645
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2647
  if (hg == -1000) {
#line 2648
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2649
    return (C_MASK);
  } else {

  }
#line 2651
  if (hg == -1001) {
#line 2652
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol\n");
#line 2653
    return (C_MASK);
  } else {

  }
#line 2656
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2658
    if (hg == -100) {
#line 2658
      tmp = 1;
    } else {
#line 2658
      __x = (long )hg;
#line 2658
      if ((__x < 0L ? - __x : __x) == 2L) {
#line 2658
        tmp = 1;
      } else {
#line 2658
        tmp = 0;
      }
    }
#line 2658
    f = tmp;
#line 2659
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2660
    if (f != 0) {
#line 2661
      hg = hg * 2;
    } else {

    }
#line 2662
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2666
  __x___0 = (long )hg;
#line 2666
  if ((__x___0 < 0L ? - __x___0 : __x___0) == 100L) {
#line 2667
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2669
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U)) {
#line 2670
    pcount = ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2672
    forced = hg == -100;
#line 2674
    switch (pcount) {
    case 0: 
#line 2676
    hg = drbd_asb_recover_0p(mdev);
#line 2677
    goto ldv_45954;
    case 1: 
#line 2679
    hg = drbd_asb_recover_1p(mdev);
#line 2680
    goto ldv_45954;
    case 2: 
#line 2682
    hg = drbd_asb_recover_2p(mdev);
#line 2683
    goto ldv_45954;
    }
    ldv_45954: 
#line 2685
    __x___1 = (long )hg;
#line 2685
    if ((__x___1 < 0L ? - __x___1 : __x___1) <= 99L) {
#line 2686
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2689
      if (forced != 0) {
#line 2690
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2692
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2697
  if (hg == -100) {
#line 2698
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2699
      hg = -1;
    } else {

    }
#line 2700
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2701
      hg = 1;
    } else {

    }
#line 2703
    __x___2 = (long )hg;
#line 2703
    if ((__x___2 < 0L ? - __x___2 : __x___2) <= 99L) {
#line 2704
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2709
  if (hg == -100) {
#line 2714
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2715
    drbd_khelper(mdev, (char *)"split-brain");
#line 2716
    return (C_MASK);
  } else {

  }
#line 2719
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2720
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2721
    return (C_MASK);
  } else {

  }
#line 2724
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) && (int )mdev->state.ldv_35401.disk > 6) {
#line 2726
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2728
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2731
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2732
    return (C_MASK);
    case 10: 
#line 2734
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2739
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2739
    goto _L;
  } else {
#line 2739
    tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2739
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2740
      if (hg == 0) {
#line 2741
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2743
        __x___3 = (long )hg;
#line 2743
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2743
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, (__x___3 < 0L ? - __x___3 : __x___3) > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2746
      return (C_MASK);
    } else {

    }
  }
#line 2749
  __x___4 = (long )hg;
#line 2749
  if ((__x___4 < 0L ? - __x___4 : __x___4) > 1L) {
#line 2750
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2751
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake");
#line 2751
    if (tmp___2 != 0) {
#line 2752
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2755
  if (hg > 0) {
#line 2756
    rv = C_WF_BITMAP_S;
  } else
#line 2757
  if (hg < 0) {
#line 2758
    rv = C_WF_BITMAP_T;
  } else {
#line 2760
    rv = C_CONNECTED;
#line 2761
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2761
    if (tmp___4 != 0UL) {
#line 2762
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2762
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2767
  return (rv);
}
}
#line 2771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2774
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2776
    return (0);
  } else {

  }
#line 2779
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2781
    return (1);
  } else {

  }
#line 2784
  if ((unsigned int )peer == (unsigned int )self) {
#line 2785
    return (0);
  } else {

  }
#line 2788
  return (1);
}
}
#line 2791 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_protocol *p ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *my_alg ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2793
  p = & mdev->data.rbuf.protocol;
#line 2796
  p_integrity_alg[0] = '\000';
#line 2796
  tmp = 1U;
#line 2796
  while (1) {
#line 2796
    if (tmp >= 64U) {
#line 2796
      break;
    } else {

    }
#line 2796
    p_integrity_alg[tmp] = (char)0;
#line 2796
    tmp = tmp + 1U;
  }
#line 2798
  tmp___0 = __fswab32(p->protocol);
#line 2798
  p_proto = (int )tmp___0;
#line 2799
  tmp___1 = __fswab32(p->after_sb_0p);
#line 2799
  p_after_sb_0p = (int )tmp___1;
#line 2800
  tmp___2 = __fswab32(p->after_sb_1p);
#line 2800
  p_after_sb_1p = (int )tmp___2;
#line 2801
  tmp___3 = __fswab32(p->after_sb_2p);
#line 2801
  p_after_sb_2p = (int )tmp___3;
#line 2802
  tmp___4 = __fswab32(p->two_primaries);
#line 2802
  p_two_primaries = (int )tmp___4;
#line 2803
  tmp___5 = __fswab32(p->conn_flags);
#line 2803
  cf = (int )tmp___5;
#line 2804
  p_want_lose = cf & 1;
#line 2806
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2808
  if ((cf & 2) != 0) {
#line 2809
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2811
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2812
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2813
    goto disconnect;
  } else {

  }
#line 2816
  tmp___6 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2816
  if (tmp___6 != 0) {
#line 2817
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2818
    goto disconnect;
  } else {

  }
#line 2821
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2821
  if (tmp___7 != 0) {
#line 2822
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2823
    goto disconnect;
  } else {

  }
#line 2826
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2826
  if (tmp___8 != 0) {
#line 2827
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2828
    goto disconnect;
  } else {

  }
#line 2831
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2832
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2833
    goto disconnect;
  } else {

  }
#line 2836
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2837
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2838
    goto disconnect;
  } else {

  }
#line 2841
  if (mdev->agreed_pro_version > 86) {
#line 2842
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2844
    tmp___9 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2844
    if ((unsigned int )tmp___9 != data_size) {
#line 2845
      return (0);
    } else {

    }
#line 2847
    p_integrity_alg[63] = 0;
#line 2848
    tmp___10 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2848
    if (tmp___10 != 0) {
#line 2849
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2850
      goto disconnect;
    } else {

    }
#line 2852
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2856
  return (1);
  disconnect: 
#line 2859
  val.i = 0U;
#line 2859
  val.ldv_35401.conn = 1U;
#line 2859
  mask.i = 0U;
#line 2859
  mask.ldv_35401.conn = 31U;
#line 2859
  drbd_force_state(mdev, mask, val);
#line 2860
  return (0);
}
}
#line 2868 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2873
  if ((int )((signed char )*alg) == 0) {
#line 2874
    return (0);
  } else {

  }
#line 2876
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2877
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2877
  if (tmp___0 != 0L) {
#line 2878
    tmp = PTR_ERR((void const   *)tfm);
#line 2878
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2880
    return (tfm);
  } else {

  }
#line 2882
  tmp___2 = crypto_hash_tfm(tfm);
#line 2882
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2882
  if (tmp___3 == 0) {
#line 2883
    crypto_free_hash(tfm);
#line 2884
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2885
    tmp___1 = ERR_PTR(-22L);
#line 2885
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2887
  return (tfm);
}
}
#line 2890 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int packet_size ) 
{ 
  int ok ;
  struct p_rs_param_95 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int *rs_plan_s ;
  int fifo_size ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  void *tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2892
  ok = 1;
#line 2893
  p = & mdev->data.rbuf.rs_param_95;
#line 2895
  verify_tfm = 0;
#line 2896
  csums_tfm = 0;
#line 2897
  apv = mdev->agreed_pro_version;
#line 2898
  rs_plan_s = 0;
#line 2899
  fifo_size = 0;
#line 2901
  exp_max_sz = apv > 87 ? (apv != 88 ? (apv <= 94 ? 140U : 156U) : 76U) : 12U;
#line 2907
  if (packet_size > exp_max_sz) {
#line 2908
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            packet_size, exp_max_sz);
#line 2910
    return (0);
  } else {

  }
#line 2913
  if (apv <= 88) {
#line 2914
    header_size = 4U;
#line 2915
    data_size = packet_size - header_size;
  } else
#line 2916
  if (apv <= 94) {
#line 2917
    header_size = 132U;
#line 2918
    data_size = packet_size - header_size;
#line 2919
    if (data_size != 0U) {
#line 2919
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2919);
    } else {

    }
  } else {
#line 2921
    header_size = 148U;
#line 2922
    data_size = packet_size - header_size;
#line 2923
    if (data_size != 0U) {
#line 2923
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2923);
    } else {

    }
  }
#line 2927
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2929
  tmp = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )header_size);
#line 2929
  if ((unsigned int )tmp != header_size) {
#line 2930
    return (0);
  } else {

  }
#line 2932
  tmp___0 = __fswab32(p->rate);
#line 2932
  mdev->sync_conf.rate = (int )tmp___0;
#line 2934
  if (apv > 87) {
#line 2935
    if (apv == 88) {
#line 2936
      if (data_size > 64U) {
#line 2937
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg too long, peer wants %u, accepting only %u byte\n",
                data_size, 64);
#line 2940
        return (0);
      } else {

      }
#line 2943
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2943
      if ((unsigned int )tmp___1 != data_size) {
#line 2944
        return (0);
      } else {

      }
#line 2948
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2948
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2948);
      } else {

      }
#line 2949
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2954
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2954
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2954);
      } else {

      }
#line 2955
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2955
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2955);
      } else {

      }
#line 2956
      p->verify_alg[63] = 0;
#line 2957
      p->csums_alg[63] = 0;
    }
#line 2960
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2960
    if (tmp___3 != 0) {
#line 2961
      if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 144U) {
#line 2962
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2964
        goto disconnect;
      } else {

      }
#line 2966
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2968
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2968
      if (tmp___2 != 0L) {
#line 2969
        verify_tfm = 0;
#line 2970
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2974
    if (apv > 88) {
#line 2974
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2974
      if (tmp___5 != 0) {
#line 2975
        if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 144U) {
#line 2976
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2978
          goto disconnect;
        } else {

        }
#line 2980
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2982
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2982
        if (tmp___4 != 0L) {
#line 2983
          csums_tfm = 0;
#line 2984
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2988
    if (apv > 94) {
#line 2989
      tmp___6 = __fswab32(p->rate);
#line 2989
      mdev->sync_conf.rate = (int )tmp___6;
#line 2990
      tmp___7 = __fswab32(p->c_plan_ahead);
#line 2990
      mdev->sync_conf.c_plan_ahead = (int )tmp___7;
#line 2991
      tmp___8 = __fswab32(p->c_delay_target);
#line 2991
      mdev->sync_conf.c_delay_target = (int )tmp___8;
#line 2992
      tmp___9 = __fswab32(p->c_fill_target);
#line 2992
      mdev->sync_conf.c_fill_target = (int )tmp___9;
#line 2993
      tmp___10 = __fswab32(p->c_max_rate);
#line 2993
      mdev->sync_conf.c_max_rate = (int )tmp___10;
#line 2995
      fifo_size = (mdev->sync_conf.c_plan_ahead * 250) / 250;
#line 2996
      if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 2997
        tmp___11 = kzalloc___0((unsigned long )fifo_size * 4UL, 208U);
#line 2997
        rs_plan_s = (int *)tmp___11;
#line 2998
        if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 2999
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 3000
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 3005
    spin_lock(& mdev->peer_seq_lock);
#line 3007
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 3008
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 3009
      tmp___12 = strlen((char const   *)(& p->verify_alg));
#line 3009
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___12 + 1U);
#line 3010
      crypto_free_hash(mdev->verify_tfm);
#line 3011
      mdev->verify_tfm = verify_tfm;
#line 3012
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 3014
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 3015
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 3016
      tmp___13 = strlen((char const   *)(& p->csums_alg));
#line 3016
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___13 + 1U);
#line 3017
      crypto_free_hash(mdev->csums_tfm);
#line 3018
      mdev->csums_tfm = csums_tfm;
#line 3019
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 3021
    if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 3022
      kfree((void const   *)mdev->rs_plan_s.values);
#line 3023
      mdev->rs_plan_s.values = rs_plan_s;
#line 3024
      mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 3025
      mdev->rs_planed = 0;
    } else {

    }
#line 3027
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 3030
  return (ok);
  disconnect: 
#line 3034
  crypto_free_hash(csums_tfm);
#line 3036
  crypto_free_hash(verify_tfm);
#line 3037
  val.i = 0U;
#line 3037
  val.ldv_35401.conn = 1U;
#line 3037
  mask.i = 0U;
#line 3037
  mask.ldv_35401.conn = 31U;
#line 3037
  drbd_force_state(mdev, mask, val);
#line 3038
  return (0);
}
}
#line 3041 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setup_order_type(struct drbd_conf *mdev , int peer ) 
{ 


  {
#line 3043
  return;
}
}
#line 3048 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 3052
  if (a == 0UL || b == 0UL) {
#line 3053
    return;
  } else {

  }
#line 3054
  d = a > b ? a - b : b - a;
#line 3055
  if (a >> 3 < d || b >> 3 < d) {
#line 3056
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 3058
  return;
}
}
#line 3060 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  unsigned int max_seg_s ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  __u64 tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___1 ;
  unsigned long __x ;
  sector_t __y ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  sector_t tmp___9 ;
  __u32 tmp___10 ;
  unsigned int tmp___11 ;
  __u16 tmp___12 ;
  int tmp___13 ;
  __u64 tmp___14 ;
  sector_t tmp___15 ;
  int tmp___16 ;

  {
#line 3062
  p = & mdev->data.rbuf.sizes;
#line 3063
  dd = 0;
#line 3066
  ldsc = 0;
#line 3069
  tmp = __fswab64(p->d_size);
#line 3069
  p_size = (sector_t )tmp;
#line 3070
  tmp___0 = __fswab64(p->u_size);
#line 3070
  p_usize = (sector_t )tmp___0;
#line 3072
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 2013UL) == 0U) {
#line 3073
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 3074
    val.i = 0U;
#line 3074
    val.ldv_35401.conn = 1U;
#line 3074
    mask.i = 0U;
#line 3074
    mask.ldv_35401.conn = 31U;
#line 3074
    drbd_force_state(mdev, mask, val);
#line 3075
    return (0);
  } else {

  }
#line 3080
  mdev->p_size = p_size;
#line 3082
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3082
  if (tmp___6 != 0) {
#line 3083
    tmp___1 = drbd_get_max_capacity(mdev->ldev);
#line 3083
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___1);
#line 3085
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 3090
    if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 144U) {
#line 3091
      __x = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 3091
      __y = p_usize;
#line 3091
      if (__x != 0UL) {
#line 3091
        if (__y != 0UL) {
#line 3091
          _min1 = __x;
#line 3091
          _min2 = __y;
#line 3091
          tmp___2 = _min1 < _min2 ? _min1 : _min2;
        } else {
#line 3091
          tmp___2 = __x;
        }
#line 3091
        tmp___3 = tmp___2;
      } else {
#line 3091
        tmp___3 = __y;
      }
#line 3091
      p_usize = tmp___3;
    } else {

    }
#line 3094
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 3096
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 3097
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 3098
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 3104
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 3104
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 3104
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_35401.disk > 4) && (int )mdev->state.ldv_35401.conn <= 9) {
#line 3108
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 3109
      val___0.i = 0U;
#line 3109
      val___0.ldv_35401.conn = 1U;
#line 3109
      mask___0.i = 0U;
#line 3109
      mask___0.ldv_35401.conn = 31U;
#line 3109
      drbd_force_state(mdev, mask___0, val___0);
#line 3110
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 3111
      put_ldev(mdev);
#line 3112
      return (0);
    } else {

    }
#line 3114
    put_ldev(mdev);
  } else {

  }
#line 3118
  tmp___7 = __fswab16((int )p->dds_flags);
#line 3118
  ddsf = (enum dds_flags )tmp___7;
#line 3119
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3119
  if (tmp___8 != 0) {
#line 3120
    dd = drbd_determin_dev_size(mdev, ddsf);
#line 3121
    put_ldev(mdev);
#line 3122
    if ((int )dd == -1) {
#line 3123
      return (0);
    } else {

    }
#line 3124
    drbd_md_sync(mdev);
  } else {
#line 3127
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3130
  tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3130
  if (tmp___13 != 0) {
#line 3131
    tmp___9 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3131
    if ((mdev->ldev)->known_size != tmp___9) {
#line 3132
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3133
      ldsc = 1;
    } else {

    }
#line 3136
    if (mdev->agreed_pro_version <= 93) {
#line 3137
      tmp___10 = __fswab32(p->max_segment_size);
#line 3137
      max_seg_s = tmp___10;
    } else
#line 3138
    if (mdev->agreed_pro_version == 94) {
#line 3139
      max_seg_s = 32768U;
    } else {
#line 3141
      max_seg_s = 131072U;
    }
#line 3143
    tmp___11 = queue_max_segment_size(mdev->rq_queue);
#line 3143
    if (tmp___11 != max_seg_s) {
#line 3144
      drbd_setup_queue_param(mdev, max_seg_s);
    } else {

    }
#line 3146
    tmp___12 = __fswab16((int )p->queue_order_type);
#line 3146
    drbd_setup_order_type(mdev, (int )tmp___12);
#line 3147
    put_ldev(mdev);
  } else {

  }
#line 3150
  if ((int )mdev->state.ldv_35401.conn > 9) {
#line 3151
    tmp___14 = __fswab64(p->c_size);
#line 3151
    tmp___15 = drbd_get_capacity(mdev->this_bdev);
#line 3151
    if (tmp___14 != (unsigned long long )tmp___15 || ldsc != 0) {
#line 3155
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3157
    tmp___16 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3157
    if (tmp___16 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 1006UL) == 160U)) {
#line 3159
      if ((int )mdev->state.ldv_35401.pdsk > 3 && (int )mdev->state.ldv_35401.disk > 3) {
#line 3161
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3162
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3164
          resync_after_online_grow(mdev);
        }
      } else {
#line 3166
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3170
  return (1);
}
}
#line 3173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  void *tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 3175
  p = & mdev->data.rbuf.uuids;
#line 3179
  tmp = kmalloc___1(48UL, 16U);
#line 3179
  p_uuid = (u64 *)tmp;
#line 3181
  i = 0;
#line 3181
  goto ldv_46065;
  ldv_46064: 
#line 3182
  tmp___0 = __fswab64(p->uuid[i]);
#line 3182
  *(p_uuid + (unsigned long )i) = tmp___0;
#line 3181
  i = i + 1;
  ldv_46065: ;
#line 3181
  if (i <= 5) {
#line 3182
    goto ldv_46064;
  } else {

  }
#line 3184
  kfree((void const   *)mdev->p_uuid);
#line 3185
  mdev->p_uuid = p_uuid;
#line 3187
  if ((((int )mdev->state.ldv_35401.conn <= 9 && (int )mdev->state.ldv_35401.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3191
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3193
    val.i = 0U;
#line 3193
    val.ldv_35401.conn = 1U;
#line 3193
    mask.i = 0U;
#line 3193
    mask.ldv_35401.conn = 31U;
#line 3193
    drbd_force_state(mdev, mask, val);
#line 3194
    return (0);
  } else {

  }
#line 3197
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3197
  if (tmp___1 != 0) {
#line 3198
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3203
    if (skip_initial_sync != 0) {
#line 3204
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3205
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids");
#line 3207
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3208
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3209
      __ns.i = mdev->state.i;
#line 3209
      __ns.ldv_35401.disk = 8U;
#line 3209
      __ns.ldv_35401.pdsk = 8U;
#line 3209
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3211
      drbd_md_sync(mdev);
    } else {

    }
#line 3213
    put_ldev(mdev);
  } else
#line 3214
  if ((int )mdev->state.ldv_35401.disk <= 3 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 3218
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3225
  tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3225
  if (tmp___2 == 0) {
#line 3225
    goto ldv_46074;
  } else {

  }
#line 3225
  tmp___3 = get_current();
#line 3225
  __wait.flags = 0U;
#line 3225
  __wait.private = (void *)tmp___3;
#line 3225
  __wait.func = & autoremove_wake_function;
#line 3225
  __wait.task_list.next = & __wait.task_list;
#line 3225
  __wait.task_list.prev = & __wait.task_list;
  ldv_46077: 
#line 3225
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3225
  tmp___4 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3225
  if (tmp___4 == 0) {
#line 3225
    goto ldv_46076;
  } else {

  }
#line 3225
  schedule();
#line 3225
  goto ldv_46077;
  ldv_46076: 
#line 3225
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46074: ;
#line 3226
  if ((int )mdev->state.ldv_35401.conn > 9 && (int )mdev->state.ldv_35401.disk <= 3) {
#line 3227
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3229
  return (1);
}
}
#line 3236 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3240
  c_tab[0] = 0;
#line 3240
  c_tab[1] = C_TEAR_DOWN;
#line 3240
  c_tab[2] = 0;
#line 3240
  c_tab[3] = 0;
#line 3240
  c_tab[4] = 0;
#line 3240
  c_tab[5] = 0;
#line 3240
  c_tab[6] = 0;
#line 3240
  c_tab[7] = 0;
#line 3240
  c_tab[8] = 0;
#line 3240
  c_tab[9] = 0;
#line 3240
  c_tab[10] = C_CONNECTED;
#line 3240
  c_tab[11] = C_STARTING_SYNC_T;
#line 3240
  c_tab[12] = C_STARTING_SYNC_S;
#line 3240
  c_tab[13] = 0;
#line 3240
  c_tab[14] = 0;
#line 3240
  c_tab[15] = 0;
#line 3240
  c_tab[16] = 0;
#line 3240
  c_tab[17] = 0;
#line 3240
  c_tab[18] = C_VERIFY_T;
#line 3240
  c_tab[19] = 0;
#line 3240
  c_tab[20] = 0;
#line 3240
  c_tab[21] = 0;
#line 3240
  c_tab[22] = 0;
#line 3240
  c_tab[23] = 0;
#line 3240
  c_tab[24] = 0;
#line 3240
  c_tab[25] = 0;
#line 3240
  c_tab[26] = 0;
#line 3240
  c_tab[27] = 0;
#line 3240
  c_tab[28] = 0;
#line 3240
  c_tab[29] = 0;
#line 3240
  c_tab[30] = 0;
#line 3240
  c_tab[31] = C_MASK;
#line 3250
  ms.i = ps.i;
#line 3252
  ms.ldv_35401.conn = (unsigned char )c_tab[(int )ps.ldv_35401.conn];
#line 3253
  ms.ldv_35401.peer = ps.ldv_35401.role;
#line 3254
  ms.ldv_35401.role = ps.ldv_35401.peer;
#line 3255
  ms.ldv_35401.pdsk = ps.ldv_35401.disk;
#line 3256
  ms.ldv_35401.disk = ps.ldv_35401.pdsk;
#line 3257
  ms.ldv_35401.peer_isp = (unsigned char )((int )ps.ldv_35401.aftr_isp | (int )ps.ldv_35401.user_isp);
#line 3259
  return (ms);
}
}
#line 3262 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  int rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3264
  p = & mdev->data.rbuf.req_state;
#line 3268
  tmp = __fswab32(p->mask);
#line 3268
  mask.i = tmp;
#line 3269
  tmp___0 = __fswab32(p->val);
#line 3269
  val.i = tmp___0;
#line 3271
  tmp___1 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 3271
  if (tmp___1 != 0) {
#line 3271
    tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3271
    if (tmp___2 != 0) {
#line 3273
      drbd_send_sr_reply(mdev, -19);
#line 3274
      return (1);
    } else {

    }
  } else {

  }
#line 3277
  mask = convert_state(mask);
#line 3278
  val = convert_state(val);
#line 3280
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3282
  drbd_send_sr_reply(mdev, rv);
#line 3283
  drbd_md_sync(mdev);
#line 3285
  return (1);
}
}
#line 3288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_state *p ;
  union drbd_state os ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  enum chg_state_flags cs_flags ;
  int rv ;
  __u32 tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  int cr ;
  int tmp___2 ;
  enum drbd_conns tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  int tmp___7 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;

  {
#line 3290
  p = & mdev->data.rbuf.state;
#line 3296
  tmp = __fswab32(p->state);
#line 3296
  peer_state.i = tmp;
#line 3298
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_35401.disk;
#line 3299
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3300
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3301
    tmp___0 = drbd_disk_str(real_peer_disk);
#line 3301
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___0);
  } else {

  }
#line 3304
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3306
  ns = mdev->state;
#line 3306
  os = ns;
#line 3307
  spin_unlock_irq(& mdev->req_lock);
#line 3311
  if (((*((unsigned int *)(& os) + 0UL) == 32768U && (unsigned int )real_peer_disk == 8U) && (int )os.ldv_35401.conn > 10) && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) {
#line 3319
    if ((int )peer_state.ldv_35401.conn > 10 && (int )peer_state.ldv_35401.conn <= 15) {
#line 3321
      real_peer_disk = D_INCONSISTENT;
    } else
#line 3326
    if ((int )os.ldv_35401.conn > 15 && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) {
#line 3328
      tmp___1 = drbd_bm_total_weight(mdev);
#line 3328
      if (tmp___1 <= mdev->rs_failed) {
#line 3329
        drbd_resync_finished(mdev);
      } else {

      }
#line 3330
      return (1);
    } else {

    }
  } else {

  }
#line 3339
  if (((*((unsigned int *)(& os) + 0UL) == 65536U && (unsigned int )real_peer_disk == 4U) && (unsigned int )*((unsigned short *)(& os) + 0UL) == 160U) && (int )peer_state.ldv_35401.conn > 16) {
#line 3341
    real_peer_disk = D_UP_TO_DATE;
  } else {

  }
#line 3343
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 3344
    ns.ldv_35401.conn = 10U;
  } else {

  }
#line 3346
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_35401.disk > 2) {
#line 3346
    tmp___5 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3346
    if (tmp___5 != 0) {
#line 3351
      cr = (int )os.ldv_35401.conn <= 9;
#line 3354
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U)) | cr;
#line 3359
      tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 3359
      cr = tmp___2 | cr;
#line 3362
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((int )peer_state.ldv_35401.conn > 10 && (int )peer_state.ldv_35401.conn <= 14)) | cr;
#line 3366
      if (cr != 0) {
#line 3367
        tmp___3 = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_35401.role,
                                      real_peer_disk);
#line 3367
        ns.ldv_35401.conn = (unsigned char )tmp___3;
      } else {

      }
#line 3369
      put_ldev(mdev);
#line 3370
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 496U) {
#line 3371
        ns.ldv_35401.conn = 10U;
#line 3372
        if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 6U) {
#line 3373
          val.i = 0U;
#line 3373
          val.ldv_35401.disk = 0U;
#line 3373
          mask.i = 0U;
#line 3373
          mask.ldv_35401.disk = 15U;
#line 3373
          drbd_force_state(mdev, mask, val);
        } else
#line 3374
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3375
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3376
          peer_state.ldv_35401.disk = 0U;
#line 3377
          real_peer_disk = D_DISKLESS;
        } else {
#line 3379
          tmp___4 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3379
          if (tmp___4 != 0) {
#line 3380
            return (0);
          } else {

          }
#line 3381
          if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U) {
#line 3381
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( os.conn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3381);
          } else {

          }
#line 3382
          val___0.i = 0U;
#line 3382
          val___0.ldv_35401.conn = 1U;
#line 3382
          mask___0.i = 0U;
#line 3382
          mask___0.ldv_35401.conn = 31U;
#line 3382
          drbd_force_state(mdev, mask___0, val___0);
#line 3383
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3388
  spin_lock_irq(& mdev->req_lock);
#line 3389
  if (mdev->state.i != os.i) {
#line 3390
    goto retry;
  } else {

  }
#line 3391
  clear_bit(14, (unsigned long volatile   *)(& mdev->flags));
#line 3392
  ns.ldv_35401.peer = peer_state.ldv_35401.role;
#line 3393
  ns.ldv_35401.pdsk = (unsigned char )real_peer_disk;
#line 3394
  ns.ldv_35401.peer_isp = (unsigned char )((int )peer_state.ldv_35401.aftr_isp | (int )peer_state.ldv_35401.user_isp);
#line 3395
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3396
    ns.ldv_35401.disk = mdev->new_state_tmp.ldv_35401.disk;
  } else {

  }
#line 3397
  cs_flags = (enum chg_state_flags )(((int )os.ldv_35401.conn > 9 || (int )ns.ldv_35401.conn <= 9) + 2);
#line 3398
  if (*((unsigned int *)(& ns) + 0UL) == 57344U) {
#line 3398
    tmp___6 = is_susp(ns);
#line 3398
    if (tmp___6 != 0) {
#line 3398
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 3398
        if ((int )os.ldv_35401.conn <= 9) {
#line 3398
          tmp___7 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 3398
          if (tmp___7 != 0) {
#line 3402
            spin_unlock_irq(& mdev->req_lock);
#line 3403
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Aborting Connect, can not thaw IO with an only Consistent peer\n");
#line 3404
            tl_clear(mdev);
#line 3405
            drbd_uuid_new_current(mdev);
#line 3406
            clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 3407
            val___1.i = 0U;
#line 3407
            val___1.ldv_35401.conn = 6U;
#line 3407
            val___1.ldv_35401.susp = 0U;
#line 3407
            mask___1.i = 0U;
#line 3407
            mask___1.ldv_35401.conn = 31U;
#line 3407
            mask___1.ldv_35401.susp = 1U;
#line 3407
            drbd_force_state(mdev, mask___1, val___1);
#line 3408
            return (0);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3410
  rv = _drbd_set_state(mdev, ns, cs_flags, 0);
#line 3411
  ns = mdev->state;
#line 3412
  spin_unlock_irq(& mdev->req_lock);
#line 3414
  if (rv <= 0) {
#line 3415
    val___2.i = 0U;
#line 3415
    val___2.ldv_35401.conn = 1U;
#line 3415
    mask___2.i = 0U;
#line 3415
    mask___2.ldv_35401.conn = 31U;
#line 3415
    drbd_force_state(mdev, mask___2, val___2);
#line 3416
    return (0);
  } else {

  }
#line 3419
  if ((int )os.ldv_35401.conn > 9) {
#line 3420
    if (((int )ns.ldv_35401.conn > 10 && (int )peer_state.ldv_35401.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3425
      drbd_send_uuids(mdev);
#line 3426
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3430
  (mdev->net_conf)->want_lose = 0U;
#line 3432
  drbd_md_sync(mdev);
#line 3434
  return (1);
}
}
#line 3437 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 3439
  p = & mdev->data.rbuf.rs_uuid;
#line 3441
  if (((unsigned int )*((unsigned short *)mdev + 1006UL) == 240U || (int )mdev->state.ldv_35401.conn <= 9) || (int )mdev->state.ldv_35401.disk <= 2) {
#line 3441
    goto ldv_46128;
  } else {

  }
#line 3441
  tmp = get_current();
#line 3441
  __wait.flags = 0U;
#line 3441
  __wait.private = (void *)tmp;
#line 3441
  __wait.func = & autoremove_wake_function;
#line 3441
  __wait.task_list.next = & __wait.task_list;
#line 3441
  __wait.task_list.prev = & __wait.task_list;
  ldv_46131: 
#line 3441
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3441
  if (((unsigned int )*((unsigned short *)mdev + 1006UL) == 240U || (int )mdev->state.ldv_35401.conn <= 9) || (int )mdev->state.ldv_35401.disk <= 2) {
#line 3441
    goto ldv_46130;
  } else {

  }
#line 3441
  schedule();
#line 3441
  goto ldv_46131;
  ldv_46130: 
#line 3441
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46128: 
#line 3450
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3450
  if (tmp___1 != 0) {
#line 3451
    tmp___0 = __fswab64(p->uuid);
#line 3451
    _drbd_uuid_set(mdev, 0, tmp___0);
#line 3452
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3454
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3456
    put_ldev(mdev);
  } else {
#line 3458
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3460
  return (1);
}
}
#line 3466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret receive_bitmap_plain(struct drbd_conf *mdev , unsigned int data_size ,
                                                    unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int tmp ;

  {
#line 3469
  __min1 = 511UL;
#line 3469
  __min2 = c->bm_words - c->word_offset;
#line 3469
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3470
  want = num_words * 8U;
#line 3472
  if (want != data_size) {
#line 3473
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != data_size (%u)\n",
            "receive_bitmap_plain", want, data_size);
#line 3474
    return (FAILED);
  } else {

  }
#line 3476
  if (want == 0U) {
#line 3477
    return (DONE);
  } else {

  }
#line 3478
  tmp = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3478
  if ((unsigned int )tmp != want) {
#line 3479
    return (FAILED);
  } else {

  }
#line 3481
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3483
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3484
  c->bit_offset = c->word_offset * 64UL;
#line 3485
  if (c->bit_offset > c->bm_bits) {
#line 3486
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3488
  return (OK);
}
}
#line 3492 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                                struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  __u16 tmp___0 ;
  int toggle ;
  int tmp___1 ;
  int have ;
  int bits ;
  int tmp___2 ;

  {
#line 3500
  s = c->bit_offset;
#line 3502
  tmp___0 = __fswab16((int )p->head.length);
#line 3502
  len = (int )((unsigned int )tmp___0 - 1U);
#line 3503
  tmp___1 = DCBP_get_start(p);
#line 3503
  toggle = tmp___1;
#line 3507
  tmp___2 = DCBP_get_pad_bits(p);
#line 3507
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___2);
#line 3509
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3510
  if (bits < 0) {
#line 3511
    return (FAILED);
  } else {

  }
#line 3513
  have = bits;
#line 3513
  goto ldv_46164;
  ldv_46163: 
#line 3514
  bits = vli_decode_bits(& rl, look_ahead);
#line 3515
  if (bits <= 0) {
#line 3516
    return (FAILED);
  } else {

  }
#line 3518
  if (toggle != 0) {
#line 3519
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3520
    if (c->bm_bits <= e) {
#line 3521
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3522
      return (FAILED);
    } else {

    }
#line 3524
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3527
  if (have < bits) {
#line 3528
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3532
    return (FAILED);
  } else {

  }
#line 3534
  look_ahead = look_ahead >> bits;
#line 3535
  have = have - bits;
#line 3537
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3538
  if (bits < 0) {
#line 3539
    return (FAILED);
  } else {

  }
#line 3540
  look_ahead = (tmp << have) | look_ahead;
#line 3541
  have = have + bits;
#line 3513
  s = (unsigned long )((unsigned long long )s + rl);
#line 3513
  toggle = toggle == 0;
  ldv_46164: ;
#line 3513
  if (have > 0) {
#line 3514
    goto ldv_46163;
  } else {

  }
#line 3544
  c->bit_offset = s;
#line 3545
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3547
  return (c->bm_bits == s);
}
}
#line 3551 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                               struct bm_xfer_ctx *c ) 
{ 
  enum receive_bitmap_ret tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3555
  tmp___0 = DCBP_get_code(p);
#line 3555
  if ((unsigned int )tmp___0 == 2U) {
#line 3556
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3556
    return (tmp);
  } else {

  }
#line 3562
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3563
  val.i = 0U;
#line 3563
  val.ldv_35401.conn = 6U;
#line 3563
  mask.i = 0U;
#line 3563
  mask.ldv_35401.conn = 31U;
#line 3563
  drbd_force_state(mdev, mask, val);
#line 3564
  return (FAILED);
}
}
#line 3567 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3571
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3574
  total = c->bytes[0] + c->bytes[1];
#line 3578
  if (total == 0U) {
#line 3579
    return;
  } else {

  }
#line 3582
  if (total >= plain) {
#line 3583
    return;
  } else {

  }
#line 3586
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3589
  if (r > 1000U) {
#line 3590
    r = 1000U;
  } else {

  }
#line 3592
  r = 1000U - r;
#line 3593
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3594
  return;
}
}
#line 3609 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  enum receive_bitmap_ret ret ;
  int ok ;
  struct p_header80 *h ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___8 ;

  {
#line 3614
  ok = 0;
#line 3615
  h = & mdev->data.rbuf.header.h80;
#line 3617
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3617
  if (tmp == 0) {
#line 3617
    goto ldv_46193;
  } else {

  }
#line 3617
  tmp___0 = get_current();
#line 3617
  __wait.flags = 0U;
#line 3617
  __wait.private = (void *)tmp___0;
#line 3617
  __wait.func = & autoremove_wake_function;
#line 3617
  __wait.task_list.next = & __wait.task_list;
#line 3617
  __wait.task_list.prev = & __wait.task_list;
  ldv_46196: 
#line 3617
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3617
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3617
  if (tmp___1 == 0) {
#line 3617
    goto ldv_46195;
  } else {

  }
#line 3617
  schedule();
#line 3617
  goto ldv_46196;
  ldv_46195: 
#line 3617
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46193: 
#line 3619
  drbd_bm_lock(mdev, (char *)"receive bitmap");
#line 3623
  tmp___2 = __get_free_pages(16U, 0U);
#line 3623
  buffer = (void *)tmp___2;
#line 3624
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3625
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3626
    goto out;
  } else {

  }
#line 3629
  tmp___3 = drbd_bm_bits(mdev);
#line 3629
  tmp___4 = drbd_bm_words(mdev);
#line 3629
  __constr_expr_0.bm_bits = tmp___3;
#line 3629
  __constr_expr_0.bm_words = tmp___4;
#line 3629
  __constr_expr_0.bit_offset = 0UL;
#line 3629
  __constr_expr_0.word_offset = 0UL;
#line 3629
  __constr_expr_0.packets[0] = 0U;
#line 3629
  __constr_expr_0.packets[1] = 0U;
#line 3629
  __constr_expr_0.bytes[0] = 0U;
#line 3629
  __constr_expr_0.bytes[1] = 0U;
#line 3629
  c = __constr_expr_0;
  ldv_46205: ;
#line 3635
  if ((unsigned int )cmd == 4U) {
#line 3636
    ret = receive_bitmap_plain(mdev, data_size, (unsigned long *)buffer, & c);
  } else
#line 3637
  if ((unsigned int )cmd == 36U) {
#line 3642
    if (data_size > 4088U) {
#line 3643
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3644
      goto out;
    } else {

    }
#line 3647
    p = (struct p_compressed_bm *)buffer;
#line 3648
    __len = 8UL;
#line 3648
    if (__len > 63UL) {
#line 3648
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3648
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3649
    tmp___5 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )data_size);
#line 3649
    if ((unsigned int )tmp___5 != data_size) {
#line 3650
      goto out;
    } else {

    }
#line 3651
    if (data_size <= 1U) {
#line 3652
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              data_size);
#line 3653
      return (2);
    } else {

    }
#line 3655
    ret = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3657
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: cmd neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (unsigned int )cmd);
#line 3658
    goto out;
  }
#line 3661
  c.packets[(unsigned int )cmd == 4U] = c.packets[(unsigned int )cmd == 4U] + 1U;
#line 3662
  c.bytes[(unsigned int )cmd == 4U] = (c.bytes[(unsigned int )cmd == 4U] + data_size) + 8U;
#line 3664
  if ((unsigned int )ret != 0U) {
#line 3665
    goto ldv_46204;
  } else {

  }
#line 3667
  tmp___6 = drbd_recv_header(mdev, & cmd, & data_size);
#line 3667
  if (tmp___6 == 0) {
#line 3668
    goto out;
  } else {

  }
#line 3669
  if ((unsigned int )ret == 0U) {
#line 3670
    goto ldv_46205;
  } else {

  }
  ldv_46204: ;
#line 3670
  if ((unsigned int )ret == 2U) {
#line 3671
    goto out;
  } else {

  }
#line 3673
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3675
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 224U) {
#line 3676
    tmp___7 = drbd_send_bitmap(mdev);
#line 3676
    ok = tmp___7 == 0;
#line 3677
    if (ok == 0) {
#line 3678
      goto out;
    } else {

    }
#line 3680
    val.i = 0U;
#line 3680
    val.ldv_35401.conn = 15U;
#line 3680
    mask.i = 0U;
#line 3680
    mask.ldv_35401.conn = 31U;
#line 3680
    ok = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3681
    if (ok != 1) {
#line 3681
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ok == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              3681);
    } else {

    }
  } else
#line 3682
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 208U) {
#line 3685
    tmp___8 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35401.conn);
#line 3685
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___8);
  } else {

  }
#line 3689
  ok = 1;
  out: 
#line 3691
  drbd_bm_unlock(mdev);
#line 3692
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 1006UL) == 208U) {
#line 3693
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3694
  free_pages((unsigned long )buffer, 0U);
#line 3695
  return (ok);
}
}
#line 3698 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3704
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
           (unsigned int )cmd, data_size);
#line 3707
  size = (int )data_size;
#line 3708
  goto ldv_46227;
  ldv_46226: 
#line 3709
  __min1 = size;
#line 3709
  __min2 = 128;
#line 3709
  want = __min1 < __min2 ? __min1 : __min2;
#line 3710
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3711
  _b = r <= 0;
#line 3711
  if (_b != 0) {
#line 3711
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "receive_skip", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3711);
  } else {

  }
#line 3711
  if (_b != 0) {
#line 3711
    goto ldv_46225;
  } else {

  }
#line 3712
  size = size - r;
  ldv_46227: ;
#line 3708
  if (size > 0) {
#line 3709
    goto ldv_46226;
  } else {

  }
  ldv_46225: ;
#line 3714
  return (size == 0);
}
}
#line 3717 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 


  {
#line 3719
  if ((int )mdev->state.ldv_35401.disk > 3) {
#line 3720
    drbd_kick_lo(mdev);
  } else {

  }
#line 3724
  drbd_tcp_quickack(mdev->data.socket);
#line 3726
  return (1);
}
}
#line 3737 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct data_cmd drbd_cmd_handler[41U]  = 
#line 3737
  {      {1, 32UL, & receive_Data}, 
        {1, 32UL, & receive_DataReply}, 
        {1, 32UL, & receive_RSDataReply}, 
        {0, 16UL, & receive_Barrier}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_UnplugRemote}, 
        {0, 32UL, & receive_DataRequest}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 32UL, & receive_protocol}, 
        {0, 56UL, & receive_uuids}, 
        {0, 40UL, & receive_sizes}, 
        {0, 12UL, & receive_state}, 
        {0, 16UL, & receive_sync_uuid}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_req_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_skip}, 
        {0, 0UL, 0}};
#line 3771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  union p_header *header ;
  unsigned int packet_size ;
  enum drbd_packets cmd ;
  size_t shs ;
  int rv ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  enum drbd_thread_state tmp___6 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3773
  header = & mdev->data.rbuf.header;
#line 3779
  goto ldv_46252;
  ldv_46251: 
#line 3780
  drbd_thread_current_set_cpu(mdev);
#line 3781
  tmp = drbd_recv_header(mdev, & cmd, & packet_size);
#line 3781
  if (tmp == 0) {
#line 3782
    goto err_out;
  } else {

  }
#line 3784
  tmp___0 = __builtin_expect((unsigned int )cmd > 39U, 0L);
#line 3784
  if (tmp___0 != 0L) {
#line 3785
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (unsigned int )cmd, packet_size);
#line 3786
    goto err_out;
  } else {
#line 3784
    tmp___1 = __builtin_expect((unsigned long )drbd_cmd_handler[(unsigned int )cmd].function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                                          enum drbd_packets  ,
                                                                                                                          unsigned int  ))0),
                               0L);
#line 3784
    if (tmp___1 != 0L) {
#line 3785
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
              (unsigned int )cmd, packet_size);
#line 3786
      goto err_out;
    } else {

    }
  }
#line 3789
  shs = drbd_cmd_handler[(unsigned int )cmd].pkt_size - 8UL;
#line 3790
  rv = drbd_recv(mdev, (void *)(& header->h80.payload), shs);
#line 3791
  tmp___2 = __builtin_expect((size_t )rv != shs, 0L);
#line 3791
  if (tmp___2 != 0L) {
#line 3792
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read while reading sub header: rv=%d\n",
            rv);
#line 3793
    goto err_out;
  } else {

  }
#line 3796
  if ((size_t )packet_size != shs && drbd_cmd_handler[(unsigned int )cmd].expect_payload == 0) {
#line 3797
    tmp___3 = cmdname(cmd);
#line 3797
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No payload expected %s l:%d\n",
            tmp___3, packet_size);
#line 3798
    goto err_out;
  } else {

  }
#line 3801
  rv = (*(drbd_cmd_handler[(unsigned int )cmd].function))(mdev, cmd, packet_size - (unsigned int )shs);
#line 3803
  tmp___5 = __builtin_expect(rv == 0, 0L);
#line 3803
  if (tmp___5 != 0L) {
#line 3804
    tmp___4 = cmdname(cmd);
#line 3804
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___4, packet_size);
#line 3806
    goto err_out;
  } else {

  }
  ldv_46252: 
#line 3779
  tmp___6 = get_t_state(& mdev->receiver);
#line 3779
  if ((unsigned int )tmp___6 == 1U) {
#line 3780
    goto ldv_46251;
  } else {

  }

#line 3810
  if (0) {
    err_out: 
#line 3812
    val.i = 0U;
#line 3812
    val.ldv_35401.conn = 6U;
#line 3812
    mask.i = 0U;
#line 3812
    mask.ldv_35401.conn = 31U;
#line 3812
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 3816
  drbd_md_sync(mdev);
#line 3817
  return;
}
}
#line 3819 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3823
  barr.w.cb = & w_prev_work_done;
#line 3824
  init_completion(& barr.done);
#line 3825
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3826
  wait_for_completion(& barr.done);
#line 3827
  return;
}
}
#line 3829 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_tl_hash(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *h ;

  {
#line 3833
  spin_lock_irq(& mdev->req_lock);
#line 3835
  if ((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0) || (unsigned int )*((unsigned short *)mdev + 1006UL) != 0U) {
#line 3836
    spin_unlock_irq(& mdev->req_lock);
#line 3837
    return;
  } else {

  }
#line 3840
  h = mdev->ee_hash;
#line 3840
  goto ldv_46267;
  ldv_46266: ;
#line 3841
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3842
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
  } else {

  }
#line 3840
  h = h + 1;
  ldv_46267: ;
#line 3840
  if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3841
    goto ldv_46266;
  } else {

  }
#line 3844
  kfree((void const   *)mdev->ee_hash);
#line 3845
  mdev->ee_hash = 0;
#line 3846
  mdev->ee_hash_s = 0U;
#line 3849
  h = mdev->tl_hash;
#line 3849
  goto ldv_46270;
  ldv_46269: ;
#line 3850
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3851
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED tl_hash[%u] == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
  } else {

  }
#line 3849
  h = h + 1;
  ldv_46270: ;
#line 3849
  if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3850
    goto ldv_46269;
  } else {

  }
#line 3853
  kfree((void const   *)mdev->tl_hash);
#line 3854
  mdev->tl_hash = 0;
#line 3855
  mdev->tl_hash_s = 0U;
#line 3856
  spin_unlock_irq(& mdev->req_lock);
#line 3857
  return;
}
}
#line 3859 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 3863
  rv = 0;
#line 3866
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 0U) {
#line 3867
    return;
  } else {

  }
#line 3868
  if ((int )mdev->state.ldv_35401.conn > 7) {
#line 3869
    tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35401.conn);
#line 3869
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected < WFConnection\n",
            tmp);
  } else {

  }
#line 3873
  drbd_thread_stop(& mdev->asender);
#line 3874
  drbd_free_sock(mdev);
#line 3877
  spin_lock_irq(& mdev->req_lock);
#line 3878
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3879
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3880
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3881
  spin_unlock_irq(& mdev->req_lock);
#line 3893
  drbd_rs_cancel_all(mdev);
#line 3894
  mdev->rs_total = 0UL;
#line 3895
  mdev->rs_failed = 0UL;
#line 3896
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3897
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3900
  del_timer_sync(& mdev->resync_timer);
#line 3901
  resync_timer_fn((unsigned long )mdev);
#line 3906
  drbd_flush_workqueue(mdev);
#line 3910
  drbd_process_done_ee(mdev);
#line 3912
  kfree((void const   *)mdev->p_uuid);
#line 3913
  mdev->p_uuid = 0;
#line 3915
  tmp___0 = is_susp(mdev->state);
#line 3915
  if (tmp___0 == 0) {
#line 3916
    tl_clear(mdev);
  } else {

  }
#line 3918
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3920
  drbd_md_sync(mdev);
#line 3922
  fp = FP_DONT_CARE;
#line 3923
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3923
  if (tmp___1 != 0) {
#line 3924
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3925
    put_ldev(mdev);
  } else {

  }
#line 3928
  if (((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U && (unsigned int )fp != 0U) && (int )mdev->state.ldv_35401.pdsk > 5) {
#line 3929
    drbd_try_outdate_peer_async(mdev);
  } else {

  }
#line 3931
  spin_lock_irq(& mdev->req_lock);
#line 3932
  os = mdev->state;
#line 3933
  if ((int )os.ldv_35401.conn > 1) {
#line 3935
    ns = os;
#line 3936
    ns.ldv_35401.conn = 2U;
#line 3937
    rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 3939
  spin_unlock_irq(& mdev->req_lock);
#line 3941
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3942
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3942
    if (tmp___2 == 0) {
#line 3942
      goto ldv_46280;
    } else {

    }
#line 3942
    tmp___3 = get_current();
#line 3942
    __wait.flags = 0U;
#line 3942
    __wait.private = (void *)tmp___3;
#line 3942
    __wait.func = & autoremove_wake_function;
#line 3942
    __wait.task_list.next = & __wait.task_list;
#line 3942
    __wait.task_list.prev = & __wait.task_list;
    ldv_46283: 
#line 3942
    prepare_to_wait(& mdev->net_cnt_wait, & __wait, 2);
#line 3942
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3942
    if (tmp___4 == 0) {
#line 3942
      goto ldv_46282;
    } else {

    }
#line 3942
    schedule();
#line 3942
    goto ldv_46283;
    ldv_46282: 
#line 3942
    finish_wait(& mdev->net_cnt_wait, & __wait);
    ldv_46280: 
#line 3944
    tmp___8 = is_susp(mdev->state);
#line 3944
    if (tmp___8 == 0) {
#line 3947
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3947
      if (tmp___5 == 0) {
#line 3947
        goto ldv_46284;
      } else {

      }
#line 3947
      tmp___6 = get_current();
#line 3947
      __wait___0.flags = 0U;
#line 3947
      __wait___0.private = (void *)tmp___6;
#line 3947
      __wait___0.func = & autoremove_wake_function;
#line 3947
      __wait___0.task_list.next = & __wait___0.task_list;
#line 3947
      __wait___0.task_list.prev = & __wait___0.task_list;
      ldv_46287: 
#line 3947
      prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3947
      tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3947
      if (tmp___7 == 0) {
#line 3947
        goto ldv_46286;
      } else {

      }
#line 3947
      schedule();
#line 3947
      goto ldv_46287;
      ldv_46286: 
#line 3947
      finish_wait(& mdev->misc_wait, & __wait___0);
      ldv_46284: 
#line 3948
      drbd_free_tl_hash(mdev);
    } else {

    }
#line 3951
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3952
    mdev->cram_hmac_tfm = 0;
#line 3954
    kfree((void const   *)mdev->net_conf);
#line 3955
    mdev->net_conf = 0;
#line 3956
    val.i = 0U;
#line 3956
    val.ldv_35401.conn = 0U;
#line 3956
    mask.i = 0U;
#line 3956
    mask.ldv_35401.conn = 31U;
#line 3956
    drbd_request_state(mdev, mask, val);
  } else {

  }
#line 3966
  tmp___9 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3966
  i = (unsigned int )tmp___9;
#line 3967
  if (i != 0U) {
#line 3968
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 3969
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->pp_in_use_by_net));
#line 3969
  i = (unsigned int )tmp___10;
#line 3970
  if (i != 0U) {
#line 3971
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use_by_net = %d, expected 0\n",
              i);
  } else {

  }
#line 3972
  tmp___11 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3972
  i = (unsigned int )tmp___11;
#line 3973
  if (i != 0U) {
#line 3974
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 3976
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3976
  if (tmp___12 == 0) {
#line 3976
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3976);
  } else {

  }
#line 3977
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3977
  if (tmp___13 == 0) {
#line 3977
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3977);
  } else {

  }
#line 3978
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3978
  if (tmp___14 == 0) {
#line 3978
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3978);
  } else {

  }
#line 3979
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3979
  if (tmp___15 == 0) {
#line 3979
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3979);
  } else {

  }
#line 3982
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3983
  tmp___16 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3983
  if (tmp___16 == 0) {
#line 3983
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3983);
  } else {

  }
#line 3984
  return;
}
}
#line 3995 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 3998
  p = & mdev->data.sbuf.handshake;
#line 4001
  tmp = mutex_lock_interruptible_nested(& mdev->data.mutex, 0U);
#line 4001
  if (tmp != 0) {
#line 4002
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 4003
    return (0);
  } else {

  }
#line 4006
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 4007
    mutex_unlock(& mdev->data.mutex);
#line 4008
    return (0);
  } else {

  }
#line 4011
  memset((void *)p, 0, 80UL);
#line 4012
  p->protocol_min = 1442840576U;
#line 4013
  p->protocol_max = 1593835520U;
#line 4014
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header80 *)p,
                      80UL, 0U);
#line 4016
  mutex_unlock(& mdev->data.mutex);
#line 4017
  return (ok);
}
}
#line 4027 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  unsigned int length ;
  enum drbd_packets cmd ;
  int rv ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int __min1 ;
  int __min2 ;

  {
#line 4030
  p = & mdev->data.rbuf.handshake;
#line 4031
  expect = 72;
#line 4036
  rv = drbd_send_handshake(mdev);
#line 4037
  if (rv == 0) {
#line 4038
    return (0);
  } else {

  }
#line 4040
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4041
  if (rv == 0) {
#line 4042
    return (0);
  } else {

  }
#line 4044
  if ((unsigned int )cmd != 65534U) {
#line 4045
    tmp = cmdname(cmd);
#line 4045
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (unsigned int )cmd);
#line 4047
    return (-1);
  } else {

  }
#line 4050
  if ((unsigned int )expect != length) {
#line 4051
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, length);
#line 4053
    return (-1);
  } else {

  }
#line 4056
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 4058
  if (rv != expect) {
#line 4059
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
            rv);
#line 4060
    return (0);
  } else {

  }
#line 4063
  tmp___0 = __fswab32(p->protocol_min);
#line 4063
  p->protocol_min = tmp___0;
#line 4064
  tmp___1 = __fswab32(p->protocol_max);
#line 4064
  p->protocol_max = tmp___1;
#line 4065
  if (p->protocol_max == 0U) {
#line 4066
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 4068
  if (p->protocol_min > 95U || p->protocol_max <= 85U) {
#line 4070
    goto incompat;
  } else {

  }
#line 4072
  __min1 = 95;
#line 4072
  __min2 = (int )p->protocol_max;
#line 4072
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 4074
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 4077
  return (1);
  incompat: 
#line 4080
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 95, p->protocol_min, p->protocol_max);
#line 4084
  return (-1);
}
}
#line 4103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  enum drbd_packets cmd ;
  unsigned int length ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  char const   *tmp___3 ;
  void *tmp___4 ;
  int tmp___5 ;

  {
#line 4107
  response = 0;
#line 4108
  right_response = 0;
#line 4109
  peers_ch = 0;
#line 4110
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4110
  key_len = (unsigned int )tmp;
#line 4117
  desc.tfm = mdev->cram_hmac_tfm;
#line 4118
  desc.flags = 0U;
#line 4120
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4122
  if (rv != 0) {
#line 4123
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 4124
    rv = -1;
#line 4125
    goto fail;
  } else {

  }
#line 4128
  get_random_bytes((void *)(& my_challenge), 64);
#line 4130
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4131
  if (rv == 0) {
#line 4132
    goto fail;
  } else {

  }
#line 4134
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4135
  if (rv == 0) {
#line 4136
    goto fail;
  } else {

  }
#line 4138
  if ((unsigned int )cmd != 16U) {
#line 4139
    tmp___0 = cmdname(cmd);
#line 4139
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (unsigned int )cmd);
#line 4141
    rv = 0;
#line 4142
    goto fail;
  } else {

  }
#line 4145
  if (length > 128U) {
#line 4146
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4147
    rv = -1;
#line 4148
    goto fail;
  } else {

  }
#line 4151
  tmp___1 = kmalloc___1((size_t )length, 16U);
#line 4151
  peers_ch = (char *)tmp___1;
#line 4152
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4153
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4154
    rv = -1;
#line 4155
    goto fail;
  } else {

  }
#line 4158
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )length);
#line 4160
  if ((unsigned int )rv != length) {
#line 4161
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
            rv);
#line 4162
    rv = 0;
#line 4163
    goto fail;
  } else {

  }
#line 4166
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4167
  tmp___2 = kmalloc___1((size_t )resp_size, 16U);
#line 4167
  response = (char *)tmp___2;
#line 4168
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4169
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4170
    rv = -1;
#line 4171
    goto fail;
  } else {

  }
#line 4174
  sg_init_table(& sg, 1U);
#line 4175
  sg_set_buf(& sg, (void const   *)peers_ch, length);
#line 4177
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4178
  if (rv != 0) {
#line 4179
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4180
    rv = -1;
#line 4181
    goto fail;
  } else {

  }
#line 4184
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4185
  if (rv == 0) {
#line 4186
    goto fail;
  } else {

  }
#line 4188
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4189
  if (rv == 0) {
#line 4190
    goto fail;
  } else {

  }
#line 4192
  if ((unsigned int )cmd != 17U) {
#line 4193
    tmp___3 = cmdname(cmd);
#line 4193
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___3, (unsigned int )cmd);
#line 4195
    rv = 0;
#line 4196
    goto fail;
  } else {

  }
#line 4199
  if (length != resp_size) {
#line 4200
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4201
    rv = 0;
#line 4202
    goto fail;
  } else {

  }
#line 4205
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4207
  if ((unsigned int )rv != resp_size) {
#line 4208
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
            rv);
#line 4209
    rv = 0;
#line 4210
    goto fail;
  } else {

  }
#line 4213
  tmp___4 = kmalloc___1((size_t )resp_size, 16U);
#line 4213
  right_response = (char *)tmp___4;
#line 4214
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4215
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4216
    rv = -1;
#line 4217
    goto fail;
  } else {

  }
#line 4220
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4222
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4223
  if (rv != 0) {
#line 4224
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4225
    rv = -1;
#line 4226
    goto fail;
  } else {

  }
#line 4229
  tmp___5 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4229
  rv = tmp___5 == 0;
#line 4231
  if (rv != 0) {
#line 4232
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4235
    rv = -1;
  }
  fail: 
#line 4238
  kfree((void const   *)peers_ch);
#line 4239
  kfree((void const   *)response);
#line 4240
  kfree((void const   *)right_response);
#line 4242
  return (rv);
}
}
#line 4246 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___2 ;

  {
#line 4248
  mdev = thi->mdev;
#line 4249
  tmp = mdev_to_minor(mdev);
#line 4249
  minor = tmp;
#line 4252
  tmp___0 = get_current();
#line 4252
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4254
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_46334: 
#line 4257
  h = drbd_connect(mdev);
#line 4258
  if (h == 0) {
#line 4259
    drbd_disconnect(mdev);
#line 4260
    tmp___1 = get_current();
#line 4260
    tmp___1->state = 1L;
#line 4261
    schedule_timeout(250L);
  } else {

  }
#line 4263
  if (h == -1) {
#line 4264
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4265
    val.i = 0U;
#line 4265
    val.ldv_35401.conn = 1U;
#line 4265
    mask.i = 0U;
#line 4265
    mask.ldv_35401.conn = 31U;
#line 4265
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4267
  if (h == 0) {
#line 4268
    goto ldv_46334;
  } else {

  }

#line 4269
  if (h > 0) {
#line 4270
    tmp___2 = get_net_conf(mdev);
#line 4270
    if (tmp___2 != 0) {
#line 4271
      drbdd(mdev);
#line 4272
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4276
  drbd_disconnect(mdev);
#line 4278
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4279
  return (0);
}
}
#line 4284 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4286
  p = (struct p_req_state_reply *)h;
#line 4288
  tmp = __fswab32(p->retcode);
#line 4288
  retcode = (int )tmp;
#line 4290
  if (retcode > 0) {
#line 4291
    set_bit(9U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4293
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
#line 4294
    tmp___0 = drbd_set_st_err_str((enum drbd_state_ret_codes )retcode);
#line 4294
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4297
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4299
  return (1);
}
}
#line 4302 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4304
  tmp = drbd_send_ping_ack(mdev);
#line 4304
  return (tmp);
}
}
#line 4308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4311
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4312
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4312
  if (tmp == 0) {
#line 4313
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4315
  return (1);
}
}
#line 4318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4320
  p = (struct p_block_ack *)h;
#line 4321
  tmp = __fswab64(p->sector);
#line 4321
  sector = (sector_t )tmp;
#line 4322
  tmp___0 = __fswab32(p->blksize);
#line 4322
  blksize = (int )tmp___0;
#line 4324
  if (mdev->agreed_pro_version <= 88) {
#line 4324
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4324);
  } else {

  }
#line 4326
  tmp___1 = __fswab32(p->seq_num);
#line 4326
  update_peer_seq(mdev, tmp___1);
#line 4328
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4328
  if (tmp___2 != 0) {
#line 4329
    drbd_rs_complete_io(mdev, sector);
#line 4330
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4330U);
#line 4332
    mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4333
    put_ldev(mdev);
  } else {

  }
#line 4335
  atomic_dec(& mdev->rs_pending_cnt);
#line 4335
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4335
  if (tmp___4 < 0) {
#line 4335
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4335
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4335, tmp___3);
  } else {

  }
#line 4336
  atomic_add(blksize >> 9, & mdev->rs_sect_in);
#line 4338
  return (1);
}
}
#line 4343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4346
  tmp = tl_hash_slot(mdev, sector);
#line 4346
  slot = tmp;
#line 4350
  n = slot->first;
#line 4350
  goto ldv_46375;
  ldv_46374: ;
#line 4351
  if ((unsigned long )req == (unsigned long )id) {
#line 4352
    if (req->sector != sector) {
#line 4353
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4357
      goto ldv_46373;
    } else {

    }
#line 4359
    return (req);
  } else {

  }
#line 4350
  n = n->next;
  ldv_46375: ;
#line 4350
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4350
    __builtin_prefetch((void const   *)n->next);
#line 4350
    if (1 != 0) {
#line 4350
      __mptr = (struct hlist_node  const  *)n;
#line 4350
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4350
      if (1 != 0) {
#line 4351
        goto ldv_46374;
      } else {
#line 4353
        goto ldv_46373;
      }
    } else {
#line 4353
      goto ldv_46373;
    }
  } else {

  }
  ldv_46373: 
#line 4362
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: failed to find req %p, sector %llus in list\n",
          (void *)id, (unsigned long long )sector);
#line 4364
  return (0);
}
}
#line 4370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4377
  spin_lock_irq(& mdev->req_lock);
#line 4378
  req = (*validator)(mdev, id, sector);
#line 4379
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4379
  if (tmp != 0L) {
#line 4380
    spin_unlock_irq(& mdev->req_lock);
#line 4381
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: got a corrupt block_id/sector pair\n",
            func);
#line 4382
    return (0);
  } else {

  }
#line 4384
  __req_mod(req, what, & m);
#line 4385
  spin_unlock_irq(& mdev->req_lock);
#line 4387
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4388
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4389
  return (1);
}
}
#line 4392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4394
  p = (struct p_block_ack *)h;
#line 4395
  tmp = __fswab64(p->sector);
#line 4395
  sector = (sector_t )tmp;
#line 4396
  tmp___0 = __fswab32(p->blksize);
#line 4396
  blksize = (int )tmp___0;
#line 4399
  tmp___1 = __fswab32(p->seq_num);
#line 4399
  update_peer_seq(mdev, tmp___1);
#line 4401
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4402
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4402U);
#line 4403
    atomic_dec(& mdev->rs_pending_cnt);
#line 4403
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4403
    if (tmp___3 < 0) {
#line 4403
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4403
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4403, tmp___2);
    } else {

    }
#line 4404
    return (1);
  } else {

  }
#line 4406
  tmp___4 = __fswab16((int )h->command);
#line 4406
  switch ((int )tmp___4) {
  case 23: ;
#line 4408
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4408
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4408);
  } else {

  }
#line 4409
  what = write_acked_by_peer_and_sis;
#line 4410
  goto ldv_46403;
  case 22: ;
#line 4412
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4412
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4412);
  } else {

  }
#line 4413
  what = write_acked_by_peer;
#line 4414
  goto ldv_46403;
  case 21: ;
#line 4416
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4416
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4416);
  } else {

  }
#line 4417
  what = recv_acked_by_peer;
#line 4418
  goto ldv_46403;
  case 24: ;
#line 4420
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4420
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4420);
  } else {

  }
#line 4421
  what = conflict_discarded_by_peer;
#line 4422
  goto ldv_46403;
  default: 
#line 4424
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
          4424);
#line 4425
  return (0);
  }
  ldv_46403: 
#line 4428
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4428
  return (tmp___5);
}
}
#line 4432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  int size ;
  __u32 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 4434
  p = (struct p_block_ack *)h;
#line 4435
  tmp = __fswab64(p->sector);
#line 4435
  sector = (sector_t )tmp;
#line 4437
  tmp___0 = ___ratelimit(& drbd_ratelimit_state, "got_NegAck");
#line 4437
  if (tmp___0 != 0) {
#line 4438
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegAck packet. Peer is in troubles?\n");
  } else {

  }
#line 4440
  tmp___1 = __fswab32(p->seq_num);
#line 4440
  update_peer_seq(mdev, tmp___1);
#line 4442
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4443
    tmp___2 = __fswab32(p->blksize);
#line 4443
    size = (int )tmp___2;
#line 4444
    atomic_dec(& mdev->rs_pending_cnt);
#line 4444
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4444
    if (tmp___4 < 0) {
#line 4444
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4444
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4444, tmp___3);
    } else {

    }
#line 4445
    drbd_rs_failed_io(mdev, sector, size);
#line 4446
    return (1);
  } else {

  }
#line 4448
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_NegAck", neg_acked);
#line 4448
  return (tmp___5);
}
}
#line 4452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4454
  p = (struct p_block_ack *)h;
#line 4455
  tmp = __fswab64(p->sector);
#line 4455
  sector = (sector_t )tmp;
#line 4457
  tmp___0 = __fswab32(p->seq_num);
#line 4457
  update_peer_seq(mdev, tmp___0);
#line 4458
  tmp___1 = __fswab32(p->blksize);
#line 4458
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4461
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4461
  return (tmp___2);
}
}
#line 4465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4469
  p = (struct p_block_ack *)h;
#line 4471
  tmp = __fswab64(p->sector);
#line 4471
  sector = (sector_t )tmp;
#line 4472
  tmp___0 = __fswab32(p->blksize);
#line 4472
  size = (int )tmp___0;
#line 4474
  tmp___1 = __fswab32(p->seq_num);
#line 4474
  update_peer_seq(mdev, tmp___1);
#line 4476
  atomic_dec(& mdev->rs_pending_cnt);
#line 4476
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4476
  if (tmp___3 < 0) {
#line 4476
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4476
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4476, tmp___2);
  } else {

  }
#line 4478
  tmp___4 = _get_ldev_if_state(mdev, D_FAILED);
#line 4478
  if (tmp___4 != 0) {
#line 4479
    drbd_rs_complete_io(mdev, sector);
#line 4480
    drbd_rs_failed_io(mdev, sector, size);
#line 4481
    put_ldev(mdev);
  } else {

  }
#line 4484
  return (1);
}
}
#line 4487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;

  {
#line 4489
  p = (struct p_barrier_ack *)h;
#line 4491
  tmp = __fswab32(p->set_size);
#line 4491
  tl_release(mdev, p->barrier, tmp);
#line 4493
  return (1);
}
}
#line 4496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;

  {
#line 4498
  p = (struct p_block_ack *)h;
#line 4503
  tmp = __fswab64(p->sector);
#line 4503
  sector = (sector_t )tmp;
#line 4504
  tmp___0 = __fswab32(p->blksize);
#line 4504
  size = (int )tmp___0;
#line 4506
  tmp___1 = __fswab32(p->seq_num);
#line 4506
  update_peer_seq(mdev, tmp___1);
#line 4508
  tmp___2 = __fswab64(p->block_id);
#line 4508
  if (tmp___2 == 4712ULL) {
#line 4509
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4511
    ov_oos_print(mdev);
  }
#line 4513
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4513
  if (tmp___3 == 0) {
#line 4514
    return (1);
  } else {

  }
#line 4516
  drbd_rs_complete_io(mdev, sector);
#line 4517
  atomic_dec(& mdev->rs_pending_cnt);
#line 4517
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4517
  if (tmp___5 < 0) {
#line 4517
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4517
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4517, tmp___4);
  } else {

  }
#line 4519
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4519
  if (mdev->ov_left == 0UL) {
#line 4520
    tmp___6 = kmalloc___1(24UL, 16U);
#line 4520
    w = (struct drbd_work *)tmp___6;
#line 4521
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4522
      w->cb = & w_ov_finished;
#line 4523
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4525
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4526
      ov_oos_print(mdev);
#line 4527
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4530
  put_ldev(mdev);
#line 4531
  return (1);
}
}
#line 4534 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_skip(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 


  {
#line 4536
  return (1);
}
}
#line 4544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[41U] ;

  {
#line 4546
  asender_tbl[0].pkt_size = 0UL;
#line 4546
  asender_tbl[0].process = 0;
#line 4546
  asender_tbl[1].pkt_size = 0UL;
#line 4546
  asender_tbl[1].process = 0;
#line 4546
  asender_tbl[2].pkt_size = 0UL;
#line 4546
  asender_tbl[2].process = 0;
#line 4546
  asender_tbl[3].pkt_size = 0UL;
#line 4546
  asender_tbl[3].process = 0;
#line 4546
  asender_tbl[4].pkt_size = 0UL;
#line 4546
  asender_tbl[4].process = 0;
#line 4546
  asender_tbl[5].pkt_size = 0UL;
#line 4546
  asender_tbl[5].process = 0;
#line 4546
  asender_tbl[6].pkt_size = 0UL;
#line 4546
  asender_tbl[6].process = 0;
#line 4546
  asender_tbl[7].pkt_size = 0UL;
#line 4546
  asender_tbl[7].process = 0;
#line 4546
  asender_tbl[8].pkt_size = 0UL;
#line 4546
  asender_tbl[8].process = 0;
#line 4546
  asender_tbl[9].pkt_size = 0UL;
#line 4546
  asender_tbl[9].process = 0;
#line 4546
  asender_tbl[10].pkt_size = 0UL;
#line 4546
  asender_tbl[10].process = 0;
#line 4546
  asender_tbl[11].pkt_size = 0UL;
#line 4546
  asender_tbl[11].process = 0;
#line 4546
  asender_tbl[12].pkt_size = 0UL;
#line 4546
  asender_tbl[12].process = 0;
#line 4546
  asender_tbl[13].pkt_size = 0UL;
#line 4546
  asender_tbl[13].process = 0;
#line 4546
  asender_tbl[14].pkt_size = 0UL;
#line 4546
  asender_tbl[14].process = 0;
#line 4546
  asender_tbl[15].pkt_size = 0UL;
#line 4546
  asender_tbl[15].process = 0;
#line 4546
  asender_tbl[16].pkt_size = 0UL;
#line 4546
  asender_tbl[16].process = 0;
#line 4546
  asender_tbl[17].pkt_size = 0UL;
#line 4546
  asender_tbl[17].process = 0;
#line 4546
  asender_tbl[18].pkt_size = 0UL;
#line 4546
  asender_tbl[18].process = 0;
#line 4546
  asender_tbl[19].pkt_size = 8UL;
#line 4546
  asender_tbl[19].process = & got_Ping;
#line 4546
  asender_tbl[20].pkt_size = 8UL;
#line 4546
  asender_tbl[20].process = & got_PingAck;
#line 4546
  asender_tbl[21].pkt_size = 32UL;
#line 4546
  asender_tbl[21].process = & got_BlockAck;
#line 4546
  asender_tbl[22].pkt_size = 32UL;
#line 4546
  asender_tbl[22].process = & got_BlockAck;
#line 4546
  asender_tbl[23].pkt_size = 32UL;
#line 4546
  asender_tbl[23].process = & got_BlockAck;
#line 4546
  asender_tbl[24].pkt_size = 32UL;
#line 4546
  asender_tbl[24].process = & got_BlockAck;
#line 4546
  asender_tbl[25].pkt_size = 32UL;
#line 4546
  asender_tbl[25].process = & got_NegAck;
#line 4546
  asender_tbl[26].pkt_size = 32UL;
#line 4546
  asender_tbl[26].process = & got_NegDReply;
#line 4546
  asender_tbl[27].pkt_size = 32UL;
#line 4546
  asender_tbl[27].process = & got_NegRSDReply;
#line 4546
  asender_tbl[28].pkt_size = 16UL;
#line 4546
  asender_tbl[28].process = & got_BarrierAck;
#line 4546
  asender_tbl[29].pkt_size = 12UL;
#line 4546
  asender_tbl[29].process = & got_RqSReply;
#line 4546
  asender_tbl[30].pkt_size = 0UL;
#line 4546
  asender_tbl[30].process = 0;
#line 4546
  asender_tbl[31].pkt_size = 0UL;
#line 4546
  asender_tbl[31].process = 0;
#line 4546
  asender_tbl[32].pkt_size = 32UL;
#line 4546
  asender_tbl[32].process = & got_OVResult;
#line 4546
  asender_tbl[33].pkt_size = 0UL;
#line 4546
  asender_tbl[33].process = 0;
#line 4546
  asender_tbl[34].pkt_size = 32UL;
#line 4546
  asender_tbl[34].process = & got_IsInSync;
#line 4546
  asender_tbl[35].pkt_size = 0UL;
#line 4546
  asender_tbl[35].process = 0;
#line 4546
  asender_tbl[36].pkt_size = 0UL;
#line 4546
  asender_tbl[36].process = 0;
#line 4546
  asender_tbl[37].pkt_size = 0UL;
#line 4546
  asender_tbl[37].process = 0;
#line 4546
  asender_tbl[38].pkt_size = 0UL;
#line 4546
  asender_tbl[38].process = 0;
#line 4546
  asender_tbl[39].pkt_size = 16UL;
#line 4546
  asender_tbl[39].process = & got_skip;
#line 4546
  asender_tbl[40].pkt_size = 0UL;
#line 4546
  asender_tbl[40].process = 0;
#line 4566
  if (cmd > 40 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header80 * ))0)) {
#line 4567
    return (0);
  } else {

  }
#line 4568
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4571 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header80 *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u16 tmp___12 ;
  __u16 tmp___13 ;
  __u32 tmp___14 ;
  long tmp___15 ;
  __u16 tmp___16 ;
  __u16 tmp___17 ;
  __u16 tmp___18 ;
  __u16 tmp___19 ;
  __u32 tmp___20 ;
  long tmp___21 ;
  int _b___0 ;
  int tmp___22 ;
  enum drbd_thread_state tmp___23 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4573
  mdev = thi->mdev;
#line 4574
  h = & mdev->meta.rbuf.header.h80;
#line 4575
  cmd = 0;
#line 4578
  buf = (void *)h;
#line 4579
  received = 0;
#line 4580
  expect = 8;
#line 4583
  tmp = mdev_to_minor(mdev);
#line 4583
  tmp___0 = get_current();
#line 4583
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4585
  tmp___1 = get_current();
#line 4585
  tmp___1->policy = 2U;
#line 4586
  tmp___2 = get_current();
#line 4586
  tmp___2->rt_priority = 2U;
#line 4588
  goto ldv_46485;
  ldv_46489: 
#line 4589
  drbd_thread_current_set_cpu(mdev);
#line 4590
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4590
  if (tmp___4 != 0) {
#line 4591
    tmp___3 = drbd_send_ping(mdev);
#line 4591
    _b = tmp___3 == 0;
#line 4591
    if (_b != 0) {
#line 4591
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4591);
    } else {

    }
#line 4591
    if (_b != 0) {
#line 4591
      goto reconnect;
    } else {

    }
#line 4592
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
  } else {

  }
#line 4598
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4598
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4598
    if (tmp___5 > 3) {
#line 4600
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_46484: 
#line 4602
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4603
  tmp___6 = get_current();
#line 4603
  flush_signals(tmp___6);
#line 4604
  tmp___7 = drbd_process_done_ee(mdev);
#line 4604
  if (tmp___7 == 0) {
#line 4605
    goto reconnect;
  } else {

  }
#line 4607
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4608
  spin_lock_irq(& mdev->req_lock);
#line 4609
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4610
  spin_unlock_irq(& mdev->req_lock);
#line 4614
  if (empty != 0) {
#line 4615
    goto ldv_46483;
  } else {

  }
#line 4616
  goto ldv_46484;
  ldv_46483: ;
#line 4618
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4619
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4622
  tmp___8 = get_current();
#line 4622
  tmp___9 = signal_pending(tmp___8);
#line 4622
  if (tmp___9 != 0) {
#line 4623
    goto ldv_46485;
  } else {

  }
#line 4625
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4627
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4629
  tmp___10 = get_current();
#line 4629
  flush_signals(tmp___10);
#line 4641
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4641
  if (tmp___11 != 0L) {
#line 4642
    received = received + rv;
#line 4643
    buf = buf + (unsigned long )rv;
  } else
#line 4644
  if (rv == 0) {
#line 4645
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4646
    goto reconnect;
  } else
#line 4647
  if (rv == -11) {
#line 4648
    if (((mdev->meta.socket)->sk)->sk_rcvtimeo == (long )(((mdev->net_conf)->ping_timeo * 250) / 10)) {
#line 4650
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4651
      goto reconnect;
    } else {

    }
#line 4653
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4654
    goto ldv_46485;
  } else
#line 4655
  if (rv == -4) {
#line 4656
    goto ldv_46485;
  } else {
#line 4658
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4659
    goto reconnect;
  }
#line 4662
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4663
    tmp___15 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4663
    if (tmp___15 != 0L) {
#line 4664
      tmp___12 = __fswab16((int )h->length);
#line 4664
      tmp___13 = __fswab16((int )h->command);
#line 4664
      tmp___14 = __fswab32(h->magic);
#line 4664
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___14, (int )tmp___13, (int )tmp___12);
#line 4668
      goto reconnect;
    } else {

    }
#line 4670
    tmp___16 = __fswab16((int )h->command);
#line 4670
    cmd = get_asender_cmd((int )tmp___16);
#line 4671
    tmp___17 = __fswab16((int )h->length);
#line 4671
    len = (int )tmp___17;
#line 4672
    tmp___21 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4672
    if (tmp___21 != 0L) {
#line 4673
      tmp___18 = __fswab16((int )h->length);
#line 4673
      tmp___19 = __fswab16((int )h->command);
#line 4673
      tmp___20 = __fswab32(h->magic);
#line 4673
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___20, (int )tmp___19, (int )tmp___18);
#line 4677
      goto disconnect;
    } else {

    }
#line 4679
    expect = (int )cmd->pkt_size;
#line 4680
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4680
    if (_b___0 != 0) {
#line 4680
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header80)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4680);
    } else {

    }
#line 4680
    if (_b___0 != 0) {
#line 4681
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4683
  if (received == expect) {
#line 4684
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4684
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4684);
    } else {

    }
#line 4685
    tmp___22 = (*(cmd->process))(mdev, h);
#line 4685
    if (tmp___22 == 0) {
#line 4686
      goto reconnect;
    } else {

    }
#line 4688
    buf = (void *)h;
#line 4689
    received = 0;
#line 4690
    expect = 8;
#line 4691
    cmd = 0;
  } else {

  }
  ldv_46485: 
#line 4588
  tmp___23 = get_t_state(thi);
#line 4588
  if ((unsigned int )tmp___23 == 1U) {
#line 4589
    goto ldv_46489;
  } else {

  }

#line 4695
  if (0) {
    reconnect: 
#line 4697
    val.i = 0U;
#line 4697
    val.ldv_35401.conn = 5U;
#line 4697
    mask.i = 0U;
#line 4697
    mask.ldv_35401.conn = 31U;
#line 4697
    drbd_force_state(mdev, mask, val);
#line 4698
    drbd_md_sync(mdev);
  } else {

  }
#line 4700
  if (0) {
    disconnect: 
#line 4702
    val___0.i = 0U;
#line 4702
    val___0.ldv_35401.conn = 1U;
#line 4702
    mask___0.i = 0U;
#line 4702
    mask___0.ldv_35401.conn = 31U;
#line 4702
    drbd_force_state(mdev, mask___0, val___0);
#line 4703
    drbd_md_sync(mdev);
  } else {

  }
#line 4705
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4707
  if ((int )mdev->state.ldv_35401.conn > 9) {
#line 4707
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4707);
  } else {

  }
#line 4708
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4710
  return (0);
}
}
#line 4750 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4762
  LDV_IN_INTERRUPT = 1;
#line 4771
  ldv_initialize();
#line 4773
  goto ldv_46518;
  ldv_46517: 
#line 4776
  tmp = nondet_int();
#line 4776
  switch (tmp) {
  default: ;
#line 4778
  goto ldv_46516;
  }
  ldv_46516: ;
  ldv_46518: 
#line 4773
  tmp___0 = nondet_int();
#line 4773
  if (tmp___0 != 0) {
#line 4774
    goto ldv_46517;
  } else {

  }


#line 4787
  ldv_check_final_state();
#line 4790
  return;
}
}
#line 593 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 595
  __hlist_del(n);
#line 596
  n->next = 0xdead000000100100UL;
#line 597
  n->pprev = 0xdead000000200200UL;
#line 598
  return;
}
}
#line 315 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 319
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 184 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 173 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_lock_map ;
#line 559 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 561
  rcu_read_lock_sched_notrace();
#line 563
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 565
  return;
}
}
#line 581 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 583
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 585
  rcu_read_lock_sched_notrace();
#line 586
  return;
}
}
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___2(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_11824: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_11824;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___2(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___2(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___2(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 184 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 186
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 186
  if (tmp != 0L) {
#line 187
    if (part->partno != 0) {
#line 188
      __mptr = (struct device  const  *)part->__dev.parent;
#line 188
      return ((struct gendisk *)__mptr + 0xffffffffffffffa0UL);
    } else {
#line 190
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 190
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffffa0UL);
    }
  } else {

  }
#line 192
  return (0);
}
}
#line 361 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 363
  part->in_flight[rw] = part->in_flight[rw] + 1;
#line 364
  if (part->partno != 0) {
#line 365
    tmp = part_to_disk(part);
#line 365
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] + 1;
  } else {

  }
#line 366
  return;
}
}
#line 368 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 370
  part->in_flight[rw] = part->in_flight[rw] - 1;
#line 371
  if (part->partno != 0) {
#line 372
    tmp = part_to_disk(part);
#line 372
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] - 1;
  } else {

  }
#line 373
  return;
}
}
#line 394
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 212 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 213
extern void bio_pair_release(struct bio_pair * ) ;
#line 717 "include/linux/blkdev.h"
extern void blk_plug_device(struct request_queue * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1206
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1468
mempool_t *drbd_request_mempool ;
#line 1484
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) ;
#line 1486
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 2034 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2036
  atomic_inc(& mdev->ap_pending_cnt);
#line 2037
  return;
}
}
#line 2192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2194
  mxb = 1000000;
#line 2195
  tmp = get_net_conf(mdev);
#line 2195
  if (tmp != 0) {
#line 2196
    mxb = (mdev->net_conf)->max_buffers;
#line 2197
    put_net_conf(mdev);
  } else {

  }
#line 2199
  return (mxb);
}
}
#line 2202 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(union drbd_state s ) 
{ 


  {
#line 2208
  switch ((unsigned int )s.ldv_35401.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2221
  goto ldv_44003;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2240
  return (0);
  }
  ldv_44003: ;
#line 2243
  switch ((unsigned int )s.ldv_35401.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2250
  goto ldv_44023;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2259
  return (0);
  }
  ldv_44023: ;
#line 2262
  return (1);
}
}
#line 2270 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2272
  tmp = drbd_get_max_buffers(mdev);
#line 2272
  mxb = tmp;
#line 2274
  tmp___0 = is_susp(mdev->state);
#line 2274
  if (tmp___0 != 0) {
#line 2275
    return (0);
  } else {

  }
#line 2276
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2276
  if (tmp___1 != 0) {
#line 2277
    return (0);
  } else {

  }
#line 2284
  tmp___2 = drbd_state_is_stable(mdev->state);
#line 2284
  if (tmp___2 == 0) {
#line 2285
    return (0);
  } else {

  }
#line 2289
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2289
  if (tmp___3 > mxb) {
#line 2290
    return (0);
  } else {

  }
#line 2291
  tmp___4 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2291
  if (tmp___4 != 0) {
#line 2292
    return (0);
  } else {

  }
#line 2293
  return (1);
}
}
#line 2299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 2303
  tmp = get_current();
#line 2303
  wait.flags = 0U;
#line 2303
  wait.private = (void *)tmp;
#line 2303
  wait.func = & autoremove_wake_function;
#line 2303
  wait.task_list.next = & wait.task_list;
#line 2303
  wait.task_list.prev = & wait.task_list;
#line 2313
  spin_lock_irq(& mdev->req_lock);
#line 2314
  goto ldv_44042;
  ldv_44041: 
#line 2315
  prepare_to_wait(& mdev->misc_wait, & wait, 2);
#line 2316
  spin_unlock_irq(& mdev->req_lock);
#line 2317
  schedule();
#line 2318
  finish_wait(& mdev->misc_wait, & wait);
#line 2319
  spin_lock_irq(& mdev->req_lock);
  ldv_44042: 
#line 2314
  tmp___0 = __inc_ap_bio_cond(mdev);
#line 2314
  if (tmp___0 == 0) {
#line 2315
    goto ldv_44041;
  } else {

  }
#line 2321
  atomic_add(count, & mdev->ap_bio_cnt);
#line 2322
  spin_unlock_irq(& mdev->req_lock);
#line 2323
  return;
}
}
#line 2325 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2327
  tmp = drbd_get_max_buffers(mdev);
#line 2327
  mxb = tmp;
#line 2328
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2328
  ap_bio = tmp___0;
#line 2330
  if (ap_bio < 0) {
#line 2330
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2330);
  } else {

  }
#line 2334
  if (ap_bio < mxb) {
#line 2335
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2336
  if (ap_bio == 0) {
#line 2336
    tmp___2 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2336
    if (tmp___2 != 0) {
#line 2337
      tmp___1 = test_and_set_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 2337
      if (tmp___1 == 0) {
#line 2338
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2339
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_plug_device(struct drbd_conf *mdev ) 
{ 
  struct request_queue *q ;
  int tmp ;

  {
#line 51
  q = bdev_get_queue(mdev->this_bdev);
#line 53
  spin_lock_irq(q->queue_lock);
#line 58
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& q->queue_flags));
#line 58
  if (tmp == 0) {
#line 59
    blk_plug_device(q);
#line 60
    del_timer(& q->unplug_timer);
  } else {

  }
#line 63
  spin_unlock_irq(q->queue_lock);
#line 64
  return;
}
}
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 227
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 227
  if (tmp != 0L) {
#line 227
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (227), "i" (12UL));
    ldv_44154: ;
#line 227
    goto ldv_44154;
  } else {

  }
#line 228
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 234 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 236
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 236
  if (tmp != 0L) {
#line 236
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (236), "i" (12UL));
    ldv_44159: ;
#line 236
    goto ldv_44159;
  } else {

  }
#line 237
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 242 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 244
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 278 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 281
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 281
  req = (struct drbd_request *)tmp;
#line 283
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 283
  if (tmp___0 != 0L) {
#line 284
    drbd_req_make_private_bio(req, bio_src);
#line 286
    req->rq_state = (int )bio_src->bi_rw & 1 ? 1024UL : 0UL;
#line 287
    req->mdev = mdev;
#line 288
    req->master_bio = bio_src;
#line 289
    req->epoch = 0U;
#line 290
    req->sector = bio_src->bi_sector;
#line 291
    req->size = bio_src->bi_size;
#line 292
    req->start_time = jiffies;
#line 293
    INIT_HLIST_NODE(& req->colision);
#line 294
    INIT_LIST_HEAD(& req->tl_requests);
#line 295
    INIT_LIST_HEAD(& req->w.list);
  } else {

  }
#line 297
  return (req);
}
}
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 302
  mempool_free((void *)req, drbd_request_mempool);
#line 303
  return;
}
}
#line 318
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 44
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 46
  rcu_read_lock();
#line 46
  switch (4UL) {
  case 1UL: 
#line 46
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_44234;
  case 2UL: 
#line 46
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_44234;
  case 4UL: 
#line 46
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_44234;
  case 8UL: 
#line 46
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_44234;
  default: 
#line 46
  __bad_percpu_size();
  }
  ldv_44234: 
#line 46
  cpu = pfo_ret__;
#line 47
  __vpp_verify = 0;
#line 47
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 47
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 47
  if ((mdev->vdisk)->part0.partno != 0) {
#line 47
    __vpp_verify___0 = 0;
#line 47
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 47
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 47
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 48
  __vpp_verify___1 = 0;
#line 48
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 48
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 48
  if ((mdev->vdisk)->part0.partno != 0) {
#line 48
    __vpp_verify___2 = 0;
#line 48
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 48
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 48
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 49
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 50
  rcu_read_unlock();
#line 51
  return;
}
}
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 56
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 57
  duration = (unsigned long )jiffies - req->start_time;
#line 59
  rcu_read_lock();
#line 59
  switch (4UL) {
  case 1UL: 
#line 59
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_44267;
  case 2UL: 
#line 59
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_44267;
  case 4UL: 
#line 59
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_44267;
  case 8UL: 
#line 59
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_44267;
  default: 
#line 59
  __bad_percpu_size();
  }
  ldv_44267: 
#line 59
  cpu = pfo_ret__;
#line 60
  __vpp_verify = 0;
#line 60
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 60
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 60
  if ((mdev->vdisk)->part0.partno != 0) {
#line 60
    __vpp_verify___0 = 0;
#line 60
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 60
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 60
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 61
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 62
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 63
  rcu_read_unlock();
#line 64
  return;
}
}
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 68
  s = req->rq_state;
#line 76
  list_del(& req->tl_requests);
#line 81
  if ((int )rw == 1) {
#line 86
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 87
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                             87U);
    } else {

    }
#line 89
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 90
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         90U);
    } else {

    }
#line 102
    if ((s & 7UL) != 0UL) {
#line 103
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 103
      if (tmp___0 != 0) {
#line 104
        if ((s & 2048UL) != 0UL) {
#line 105
          drbd_al_complete_io(mdev, req->sector);
        } else {

        }
#line 106
        put_ldev(mdev);
      } else {
#line 107
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 107
        if (tmp != 0) {
#line 108
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 115
  drbd_req_free(req);
#line 116
  return;
}
}
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 127
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 127
  if (tmp != 0) {
#line 128
    return;
  } else {

  }
#line 130
  b = mdev->newest_tle;
#line 131
  b->w.cb = & w_send_barrier;
#line 136
  inc_ap_pending(mdev);
#line 137
  drbd_queue_work(& mdev->data.work, & b->w);
#line 138
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 139
  return;
}
}
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 144
  s = req->rq_state;
#line 152
  if ((int )mdev->state.ldv_35401.conn > 9 && req->epoch == (mdev->newest_tle)->br_number) {
#line 154
    queue_barrier(mdev);
  } else {

  }
#line 159
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 160
    sector = req->sector;
#line 161
    size = (int const   )req->size;
#line 167
    slot = tl_hash_slot___0(mdev, sector);
#line 168
    n = slot->first;
#line 168
    goto ldv_44310;
    ldv_44309: 
#line 169
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 169
    if (tmp != 0) {
#line 170
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 168
    n = n->next;
    ldv_44310: ;
#line 168
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 168
      __builtin_prefetch((void const   *)n->next);
#line 168
      if (1 != 0) {
#line 168
        __mptr = (struct hlist_node  const  *)n;
#line 168
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 168
        if (1 != 0) {
#line 169
          goto ldv_44309;
        } else {
#line 171
          goto ldv_44311;
        }
      } else {
#line 171
        goto ldv_44311;
      }
    } else {

    }
    ldv_44311: 
#line 191
    slot = ee_hash_slot___0(mdev, req->sector);
#line 192
    n = slot->first;
#line 192
    goto ldv_44318;
    ldv_44317: 
#line 193
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 193
    if (tmp___0 != 0) {
#line 194
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 195
      goto ldv_44316;
    } else {

    }
#line 192
    n = n->next;
    ldv_44318: ;
#line 192
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 192
      __builtin_prefetch((void const   *)n->next);
#line 192
      if (1 != 0) {
#line 192
        __mptr___0 = (struct hlist_node  const  *)n;
#line 192
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 192
        if (1 != 0) {
#line 193
          goto ldv_44317;
        } else {
#line 195
          goto ldv_44316;
        }
      } else {
#line 195
        goto ldv_44316;
      }
    } else {

    }
    ldv_44316: ;
  } else {

  }
#line 198
  return;
}
}
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 205
  bio_endio(m->bio, m->error);
#line 206
  dec_ap_bio(mdev);
#line 207
  return;
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 217
  s = req->rq_state;
#line 218
  mdev = req->mdev;
#line 220
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 231
  if ((s & 16UL) != 0UL) {
#line 232
    return;
  } else {

  }
#line 233
  if ((s & 8UL) != 0UL) {
#line 234
    return;
  } else {

  }
#line 235
  if ((int )s & 1) {
#line 236
    return;
  } else {

  }
#line 238
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 260
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 261
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 261
    error = (int )tmp;
#line 265
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 265
    if (tmp___0 == 0) {
#line 266
      hlist_del(& req->colision);
    } else
#line 268
    if ((s & 504UL) != 0UL) {
#line 268
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & RQ_NET_MASK) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              268);
    } else {

    }
#line 271
    if (rw == 1) {
#line 272
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 275
    _drbd_end_io_acct(mdev, req);
#line 277
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 278
    m->bio = req->master_bio;
#line 279
    req->master_bio = 0;
  } else {

  }
#line 282
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 287
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 288
  return;
}
}
#line 293 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_may_be_done_not_susp(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 295
  mdev = req->mdev;
#line 297
  tmp = is_susp(mdev->state);
#line 297
  if (tmp == 0) {
#line 298
    _req_may_be_done(req, m);
  } else {

  }
#line 299
  return;
}
}
#line 324 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 326
  mdev = req->mdev;
#line 327
  sector = req->sector;
#line 328
  size = (int const   )req->size;
#line 334
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 334
  if (tmp == 0) {
#line 334
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            334);
  } else {

  }
#line 336
  tmp___0 = get_net_conf(mdev);
#line 336
  if (tmp___0 == 0) {
#line 337
    return (0);
  } else {

  }
#line 340
  _b = mdev->tl_hash_s == 0U;
#line 340
  if (_b != 0) {
#line 340
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            340);
  } else {

  }
#line 340
  if (_b != 0) {
#line 341
    goto out_no_conflict;
  } else {

  }
#line 342
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 342
  if (tmp___1 != 0L) {
#line 342
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (342), "i" (12UL));
    ldv_44351: ;
#line 342
    goto ldv_44351;
  } else {

  }
#line 345
  slot = tl_hash_slot___0(mdev, sector);
#line 346
  n = slot->first;
#line 346
  goto ldv_44358;
  ldv_44357: 
#line 347
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 347
  if (tmp___4 != 0) {
#line 348
    tmp___2 = get_current();
#line 348
    tmp___3 = get_current();
#line 348
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 354
    goto out_conflict;
  } else {

  }
#line 346
  n = n->next;
  ldv_44358: ;
#line 346
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 346
    __builtin_prefetch((void const   *)n->next);
#line 346
    if (1 != 0) {
#line 346
      __mptr = (struct hlist_node  const  *)n;
#line 346
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 346
      if (1 != 0) {
#line 347
        goto ldv_44357;
      } else {
#line 349
        goto ldv_44359;
      }
    } else {
#line 349
      goto ldv_44359;
    }
  } else {

  }
  ldv_44359: ;
#line 358
  if (mdev->ee_hash_s != 0U) {
#line 360
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 360
    if (tmp___5 != 0L) {
#line 360
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (360), "i" (12UL));
      ldv_44360: ;
#line 360
      goto ldv_44360;
    } else {

    }
#line 363
    slot = ee_hash_slot___0(mdev, sector);
#line 364
    n = slot->first;
#line 364
    goto ldv_44366;
    ldv_44365: 
#line 365
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 365
    if (tmp___8 != 0) {
#line 366
      tmp___6 = get_current();
#line 366
      tmp___7 = get_current();
#line 366
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 372
      goto out_conflict;
    } else {

    }
#line 364
    n = n->next;
    ldv_44366: ;
#line 364
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 364
      __builtin_prefetch((void const   *)n->next);
#line 364
      if (1 != 0) {
#line 364
        __mptr___0 = (struct hlist_node  const  *)n;
#line 364
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 364
        if (1 != 0) {
#line 365
          goto ldv_44365;
        } else {
#line 367
          goto ldv_44367;
        }
      } else {
#line 367
        goto ldv_44367;
      }
    } else {

    }
    ldv_44367: ;
  } else {

  }
  out_no_conflict: 
#line 381
  put_net_conf(mdev);
#line 382
  return (0);
  out_conflict: 
#line 385
  put_net_conf(mdev);
#line 386
  return (1);
}
}
#line 401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int rv ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 404
  mdev = req->mdev;
#line 405
  rv = 0;
#line 406
  m->bio = 0;
#line 408
  switch ((unsigned int )what) {
  default: 
#line 410
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
          410);
#line 411
  goto ldv_44376;
  case 1U: ;
#line 422
  if ((req->rq_state & 504UL) != 0UL) {
#line 422
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            422);
  } else {

  }
#line 423
  req->rq_state = req->rq_state | 8UL;
#line 424
  inc_ap_pending(mdev);
#line 425
  goto ldv_44376;
  case 2U: ;
#line 429
  if ((req->rq_state & 7UL) != 0UL) {
#line 429
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            429);
  } else {

  }
#line 430
  req->rq_state = req->rq_state | 1UL;
#line 431
  goto ldv_44376;
  case 20U: ;
#line 434
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 435
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 437
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 439
  req->rq_state = req->rq_state | 6UL;
#line 440
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 442
  _req_may_be_done_not_susp(req, m);
#line 443
  put_ldev(mdev);
#line 444
  goto ldv_44376;
  case 19U: 
#line 447
  req->rq_state = req->rq_state | 2UL;
#line 448
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 450
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 451
  _req_may_be_done_not_susp(req, m);
#line 452
  put_ldev(mdev);
#line 453
  goto ldv_44376;
  case 18U: 
#line 457
  req->rq_state = req->rq_state | 2UL;
#line 458
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 459
  _req_may_be_done_not_susp(req, m);
#line 460
  put_ldev(mdev);
#line 461
  goto ldv_44376;
  case 17U: 
#line 464
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         464U);
#line 466
  req->rq_state = req->rq_state | 2UL;
#line 467
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 469
  if ((req->rq_state & 504UL) != 0UL) {
#line 469
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            469);
  } else {

  }
#line 471
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 472
  put_ldev(mdev);
#line 476
  if (*((unsigned int *)mdev + 503UL) != 65536U) {
#line 477
    _req_may_be_done_not_susp(req, m);
#line 478
    goto ldv_44376;
  } else {

  }
#line 482
  req->rq_state = req->rq_state | 8UL;
#line 483
  inc_ap_pending(mdev);
  case 4U: 
#line 496
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 496
  hlist_add_head(& req->colision, tmp);
#line 498
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 500
  if ((req->rq_state & 8UL) == 0UL) {
#line 500
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            500);
  } else {

  }
#line 501
  req->rq_state = req->rq_state | 16UL;
#line 502
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 505
  drbd_queue_work(& mdev->data.work, & req->w);
#line 506
  goto ldv_44376;
  case 3U: 
#line 512
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 512
  hlist_add_head(& req->colision, tmp___0);
#line 532
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 536
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 536
  if (tmp___1 != 0) {
#line 536
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            536);
  } else {

  }
#line 538
  req->epoch = (mdev->newest_tle)->br_number;
#line 541
  (mdev->newest_tle)->n_writes = (mdev->newest_tle)->n_writes + 1;
#line 544
  if ((req->rq_state & 8UL) == 0UL) {
#line 544
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            544);
  } else {

  }
#line 545
  req->rq_state = req->rq_state | 16UL;
#line 546
  req->w.cb = & w_send_dblock;
#line 547
  drbd_queue_work(& mdev->data.work, & req->w);
#line 550
  if ((mdev->newest_tle)->n_writes >= (mdev->net_conf)->max_epoch_size) {
#line 551
    queue_barrier(mdev);
  } else {

  }
#line 553
  goto ldv_44376;
  case 5U: ;
  case 6U: 
#line 560
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 563
  _req_may_be_done_not_susp(req, m);
#line 564
  goto ldv_44376;
  case 7U: ;
#line 568
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 572
    if ((req->rq_state & 8UL) != 0UL) {
#line 573
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 573
      if (tmp___2 != 0) {
#line 573
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 573
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 573
      if (tmp___4 < 0) {
#line 573
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 573
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 573, tmp___3);
      } else {

      }
#line 574
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 575
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 581
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 582
  req->rq_state = req->rq_state | 32UL;
#line 588
  _req_may_be_done_not_susp(req, m);
#line 589
  goto ldv_44376;
  case 9U: 
#line 592
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
  case 8U: ;
#line 597
  if ((req->rq_state & 8UL) != 0UL) {
#line 598
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 598
    if (tmp___5 != 0) {
#line 598
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 598
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 598
    if (tmp___7 < 0) {
#line 598
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 598
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 598, tmp___6);
    } else {

    }
  } else {

  }
#line 599
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 600
  req->rq_state = req->rq_state | 64UL;
#line 603
  if ((req->rq_state & 16UL) == 0UL) {
#line 604
    _req_may_be_done(req, m);
  } else {

  }
#line 605
  goto ldv_44376;
  case 12U: 
#line 608
  req->rq_state = req->rq_state | 256UL;
  case 13U: ;
#line 613
  if ((unsigned int )what == 13U) {
#line 614
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 617
  req->rq_state = req->rq_state | 64UL;
  case 11U: ;
  case 10U: 
#line 635
  req->rq_state = req->rq_state | 128UL;
#line 636
  if ((req->rq_state & 8UL) == 0UL) {
#line 636
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            636);
  } else {

  }
#line 637
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 637
  if (tmp___8 != 0) {
#line 637
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 637
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 637
  if (tmp___10 < 0) {
#line 637
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 637
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 637, tmp___9);
  } else {

  }
#line 638
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 639
  _req_may_be_done_not_susp(req, m);
#line 640
  goto ldv_44376;
  case 14U: ;
#line 644
  if ((req->rq_state & 8UL) != 0UL) {
#line 645
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 645
    if (tmp___11 != 0) {
#line 645
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 645
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 645
    if (tmp___13 < 0) {
#line 645
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 645
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 645, tmp___12);
    } else {

    }
  } else {

  }
#line 646
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 648
  req->rq_state = req->rq_state | 64UL;
#line 649
  _req_may_be_done_not_susp(req, m);
#line 651
  goto ldv_44376;
  case 22U: ;
#line 654
  if ((req->rq_state & 2UL) == 0UL) {
#line 655
    goto ldv_44376;
  } else {

  }
#line 657
  _req_may_be_done(req, m);
#line 658
  goto ldv_44376;
  case 23U: ;
#line 661
  if ((req->rq_state & 2UL) == 0UL) {
#line 662
    goto ldv_44376;
  } else {

  }
#line 664
  req->rq_state = req->rq_state & 0xfffffffffffffffdUL;
#line 666
  rv = 2;
#line 667
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 668
    rv = 1;
  } else {

  }
#line 670
  _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 671
  req->w.cb = & w_restart_disk_io;
#line 672
  drbd_queue_work(& mdev->data.work, & req->w);
#line 673
  goto ldv_44376;
  case 21U: ;
#line 680
  if ((req->rq_state & 128UL) == 0UL) {
#line 681
    if ((unsigned long )req->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 682
      drbd_queue_work(& mdev->data.work, & req->w);
#line 683
      rv = (req->rq_state & 1024UL) != 0UL ? 1 : 2;
    } else {

    }
#line 685
    goto ldv_44376;
  } else {

  }
  case 15U: ;
#line 690
  if ((req->rq_state & 1024UL) == 0UL) {
#line 691
    goto ldv_44376;
  } else {

  }
#line 693
  if ((req->rq_state & 8UL) != 0UL) {
#line 697
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 698
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 700
  if ((req->rq_state & 32UL) == 0UL) {
#line 700
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_SENT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            700);
  } else {

  }
#line 701
  req->rq_state = req->rq_state | 64UL;
#line 702
  _req_may_be_done(req, m);
#line 703
  goto ldv_44376;
  case 16U: ;
#line 706
  if ((req->rq_state & 8UL) == 0UL) {
#line 706
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            706);
  } else {

  }
#line 707
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 707
  if (tmp___14 != 0) {
#line 707
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 707
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 707
  if (tmp___16 < 0) {
#line 707
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 707
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 707, tmp___15);
  } else {

  }
#line 708
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 709
  req->rq_state = req->rq_state | 192UL;
#line 710
  _req_may_be_done_not_susp(req, m);
#line 711
  goto ldv_44376;
  }
  ldv_44376: ;
#line 714
  return (rv);
}
}
#line 724 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 729
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 16U) {
#line 730
    return (1);
  } else {

  }
#line 731
  if ((int )mdev->state.ldv_35401.disk > 4) {
#line 732
    return (0);
  } else {

  }
#line 733
  if ((int )mdev->state.ldv_35401.disk <= 3) {
#line 734
    return (0);
  } else {

  }
#line 736
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 737
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 739
  if (sector >= nr_sectors) {
#line 739
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            739);
  } else {

  }
#line 740
  if (esector >= nr_sectors) {
#line 740
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            740);
  } else {

  }
#line 742
  sbnr = sector >> 3;
#line 743
  ebnr = esector >> 3;
#line 745
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 745
  return (tmp == 0);
}
}
#line 748 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int err ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;

  {
#line 750
  rw = (int const   )bio->bi_rw & (int const   )1025;
#line 751
  size = (int const   )bio->bi_size;
#line 752
  sector = bio->bi_sector;
#line 753
  b = 0;
#line 756
  err = -5;
#line 757
  ret = 0;
#line 760
  req = drbd_req_new(mdev, bio);
#line 761
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 762
    dec_ap_bio(mdev);
#line 765
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 766
    bio_endio(bio, -12);
#line 767
    return (0);
  } else {

  }
#line 770
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 771
  if (local == 0) {
#line 772
    bio_put(req->private_bio);
#line 773
    req->private_bio = 0;
  } else {

  }
#line 775
  if (rw == 1) {
#line 776
    remote = 1;
  } else {
#line 779
    if (local != 0) {
#line 780
      tmp = drbd_may_do_local_read(mdev, sector, size);
#line 780
      if (tmp == 0) {
#line 786
        local = 0;
#line 787
        bio_put(req->private_bio);
#line 788
        req->private_bio = 0;
#line 789
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 792
    remote = local == 0 && (int )mdev->state.ldv_35401.pdsk > 7;
  }
#line 803
  if ((rw == 1024 && (int )mdev->state.ldv_35401.disk > 3) && local == 0) {
#line 804
    err = -11;
#line 805
    goto fail_and_free_req;
  } else {

  }
#line 813
  if (rw == 1 && local != 0) {
#line 813
    tmp___0 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 813
    if (tmp___0 == 0) {
#line 814
      req->rq_state = req->rq_state | 2048UL;
#line 815
      drbd_al_begin_io(mdev, sector);
    } else {

    }
  } else {

  }
#line 818
  remote = remote != 0 && (*((unsigned int *)mdev + 503UL) == 65536U || (*((unsigned int *)mdev + 503UL) == 32768U && (int )mdev->state.ldv_35401.conn > 9));
#line 822
  if (local == 0 && remote == 0) {
#line 822
    tmp___1 = is_susp(mdev->state);
#line 822
    if (tmp___1 == 0) {
#line 823
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 824
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 833
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 833
    tmp___3 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 833
    if (tmp___3 != 0) {
      allocate_barrier: 
#line 837
      tmp___2 = kmalloc___2(56UL, 16U);
#line 837
      b = (struct drbd_tl_epoch *)tmp___2;
#line 838
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 839
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 840
        err = -12;
#line 841
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 846
  spin_lock_irq(& mdev->req_lock);
#line 848
  tmp___4 = is_susp(mdev->state);
#line 848
  if (tmp___4 != 0) {
#line 853
    ret = 1;
#line 854
    spin_unlock_irq(& mdev->req_lock);
#line 855
    goto fail_free_complete;
  } else {

  }
#line 858
  if (remote != 0) {
#line 859
    remote = *((unsigned int *)mdev + 503UL) == 65536U || (*((unsigned int *)mdev + 503UL) == 32768U && (int )mdev->state.ldv_35401.conn > 9);
#line 862
    if (remote == 0) {
#line 863
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 864
    if (local == 0 && remote == 0) {
#line 865
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 866
      spin_unlock_irq(& mdev->req_lock);
#line 867
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 871
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 872
    mdev->unused_spare_tle = b;
#line 873
    b = 0;
  } else {

  }
#line 875
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 875
    tmp___5 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 875
    if (tmp___5 != 0) {
#line 880
      spin_unlock_irq(& mdev->req_lock);
#line 881
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 886
  _drbd_start_io_acct(mdev, req, bio);
#line 898
  if (remote != 0 && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 898
    tmp___7 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 898
    if (tmp___7 != 0) {
#line 900
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 901
      mdev->unused_spare_tle = 0;
    } else {
#line 898
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 903
  if (remote != 0 && rw == 1) {
#line 903
    tmp___6 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 903
    if (tmp___6 != 0) {
#line 903
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              904);
    } else {

    }
  } else {

  }
#line 922
  if (remote != 0) {
#line 923
    _req_mod(req, to_be_send);
  } else {

  }
#line 924
  if (local != 0) {
#line 925
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 930
  if (rw == 1) {
#line 930
    tmp___8 = _req_conflicts(req);
#line 930
    if (tmp___8 != 0) {
#line 931
      goto fail_conflicting;
    } else {

    }
  } else {

  }
#line 933
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 937
  if (remote != 0) {
#line 942
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 946
  spin_unlock_irq(& mdev->req_lock);
#line 947
  kfree((void const   *)b);
#line 949
  if (local != 0) {
#line 950
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 952
    tmp___9 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 952
    if (tmp___9 != 0) {
#line 955
      bio_endio(req->private_bio, -5);
    } else {
#line 957
      generic_make_request(req->private_bio);
    }
  } else {

  }
#line 962
  drbd_plug_device(mdev);
#line 964
  return (0);
  fail_conflicting: 
#line 973
  _drbd_end_io_acct(mdev, req);
#line 974
  spin_unlock_irq(& mdev->req_lock);
#line 975
  if (remote != 0) {
#line 976
    tmp___10 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 976
    if (tmp___10 != 0) {
#line 976
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 976
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 976
    if (tmp___12 < 0) {
#line 976
      tmp___11 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 976
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "drbd_make_request_common", 976, tmp___11);
    } else {

    }
  } else {

  }
#line 979
  err = 0;
  fail_free_complete: ;
#line 982
  if (rw == 1 && local != 0) {
#line 983
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 985
  if (local != 0) {
#line 986
    bio_put(req->private_bio);
#line 987
    req->private_bio = 0;
#line 988
    put_ldev(mdev);
  } else {

  }
#line 990
  if (ret == 0) {
#line 991
    bio_endio(bio, err);
  } else {

  }
#line 993
  drbd_req_free(req);
#line 994
  dec_ap_bio(mdev);
#line 995
  kfree((void const   *)b);
#line 997
  return (ret);
}
}
#line 1005 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1007
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 1009
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1009
    if (tmp___1 != 0) {
#line 1010
      tmp = get_current();
#line 1010
      tmp___0 = get_current();
#line 1010
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1016
    return (1);
  } else {

  }
#line 1019
  return (0);
}
}
#line 1022 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1025
  mdev = (struct drbd_conf *)q->queuedata;
#line 1027
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1027
  if (tmp != 0) {
#line 1028
    bio_endio(bio, -1);
#line 1029
    return (0);
  } else {

  }
#line 1040
  tmp___0 = __builtin_expect((bio->bi_rw & 16UL) != 0UL, 0L);
#line 1040
  if (tmp___0 != 0L) {
#line 1040
    tmp___1 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 1040
    if (tmp___1 != 0) {
#line 1042
      bio_endio(bio, -95);
#line 1043
      return (0);
    } else {

    }
  } else {

  }
#line 1049
  if (bio->bi_size == 0U) {
#line 1049
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_size > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1049);
  } else {

  }
#line 1050
  if ((bio->bi_size & 511U) != 0U) {
#line 1050
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1050);
  } else {

  }
#line 1051
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1051
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_idx == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1051);
  } else {

  }
#line 1055
  s_enr = (unsigned int )(bio->bi_sector >> 8);
#line 1056
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 8);
#line 1058
  tmp___3 = __builtin_expect(s_enr == e_enr, 1L);
#line 1058
  if (tmp___3 != 0L) {
#line 1059
    inc_ap_bio(mdev, 1);
#line 1060
    tmp___2 = drbd_make_request_common(mdev, bio);
#line 1060
    return (tmp___2);
  } else {

  }
#line 1065
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 131072U) {
#line 1067
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1071
    bio_endio(bio, -22);
  } else {
#line 1083
    sect = bio->bi_sector;
#line 1084
    sps = 256;
#line 1085
    mask = sps + -1;
#line 1086
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1087
    bp = bio_split(bio, (int )first_sectors);
#line 1098
    inc_ap_bio(mdev, 3);
#line 1100
    if (s_enr + 1U != e_enr) {
#line 1100
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              1100);
    } else {

    }
#line 1102
    goto ldv_44464;
    ldv_44463: 
#line 1103
    inc_ap_bio(mdev, 1);
    ldv_44464: 
#line 1102
    tmp___4 = drbd_make_request_common(mdev, & bp->bio1);
#line 1102
    if (tmp___4 != 0) {
#line 1103
      goto ldv_44463;
    } else {

    }

#line 1105
    goto ldv_44467;
    ldv_44466: 
#line 1106
    inc_ap_bio(mdev, 1);
    ldv_44467: 
#line 1105
    tmp___5 = drbd_make_request_common(mdev, & bp->bio2);
#line 1105
    if (tmp___5 != 0) {
#line 1106
      goto ldv_44466;
    } else {

    }
#line 1108
    dec_ap_bio(mdev);
#line 1110
    bio_pair_release(bp);
  }
#line 1112
  return (0);
}
}
#line 1128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1130
  mdev = (struct drbd_conf *)q->queuedata;
#line 1131
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1133
  bio_size = bvm->bi_size;
#line 1136
  limit = (int )(131072U - ((bio_offset & 131071U) + bio_size));
#line 1138
  if (limit < 0) {
#line 1139
    limit = 0;
  } else {

  }
#line 1140
  if (bio_size == 0U) {
#line 1141
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1142
      limit = (int )bvec->bv_len;
    } else
#line 1143
    if (limit != 0) {
#line 1143
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1143
      if (tmp != 0) {
#line 1144
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1146
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1147
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1148
          _min1 = limit;
#line 1148
          _min2 = backing_limit;
#line 1148
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1150
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1152
  return (limit);
}
}
#line 124 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 126
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 126
  return (tmp != 1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___1(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___2(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 319 "include/linux/mm.h"
__inline static void get_page(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 321
  page = compound_head(page);
#line 322
  tmp = atomic_read((atomic_t const   *)(& page->_count));
#line 322
  tmp___0 = __builtin_expect(tmp == 0, 0L);
#line 322
  if (tmp___0 != 0L) {
#line 322
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                         "i" (322), "i" (12UL));
    ldv_16139: ;
#line 322
    goto ldv_16139;
  } else {

  }
#line 323
  atomic_inc(& page->_count);
#line 324
  return;
}
}
#line 997 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 999
  retval = 512;
#line 1001
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 1002
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 1004
  return ((unsigned short )retval);
}
}
#line 1007 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 1009
  tmp = bdev_get_queue(bdev);
#line 1009
  tmp___0 = queue_logical_block_size(tmp);
#line 1009
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 249
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1635 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1644
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1645
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) ;
#line 1646
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1654
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
#line 84
  md_io.mdev = mdev;
#line 85
  init_completion(& md_io.event);
#line 86
  md_io.error = 0;
#line 88
  if (rw & 1) {
#line 88
    tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 88
    if (tmp == 0) {
#line 89
      rw = rw | 16;
    } else {

    }
  } else {

  }
#line 90
  rw = rw | 544;
  retry: 
#line 93
  bio = bio_alloc(16U, 1);
#line 94
  bio->bi_bdev = bdev->md_bdev;
#line 95
  bio->bi_sector = sector;
#line 96
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 96
  ok = tmp___0 == size;
#line 97
  if (ok == 0) {
#line 98
    goto out;
  } else {

  }
#line 99
  bio->bi_private = (void *)(& md_io);
#line 100
  bio->bi_end_io = & drbd_md_io_complete;
#line 101
  bio->bi_rw = (unsigned long )rw;
#line 103
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 103
  if (tmp___1 != 0) {
#line 104
    bio_endio(bio, -5);
  } else {
#line 106
    submit_bio(rw, bio);
  }
#line 107
  wait_for_completion(& md_io.event);
#line 108
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
#line 113
  tmp___2 = __builtin_expect((bio->bi_rw & 16UL) != 0UL, 0L);
#line 113
  if (tmp___2 != 0L) {
#line 113
    tmp___3 = __builtin_expect(ok == 0, 0L);
#line 113
    if (tmp___3 != 0L) {
#line 115
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Barriers not supported on meta data device - disabling\n");
#line 116
      set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 117
      rw = rw & -17;
#line 118
      bio_put(bio);
#line 119
      goto retry;
    } else {

    }
  } else {

  }
  out: 
#line 122
  bio_put(bio);
#line 123
  return (ok);
}
}
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 130
  offset = 0;
#line 131
  iop = mdev->md_io_page;
#line 133
  tmp = mutex_is_locked(& mdev->md_io_mutex);
#line 133
  if (tmp == 0) {
#line 133
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            133);
  } else {

  }
#line 135
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 135
  if (tmp___0 != 0L) {
#line 135
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (135), "i" (12UL));
    ldv_44162: ;
#line 135
    goto ldv_44162;
  } else {

  }
#line 137
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 137
  logical_block_size = (int )tmp___1;
#line 138
  if (logical_block_size == 0) {
#line 139
    logical_block_size = 512;
  } else {

  }
#line 142
  if (logical_block_size != 512) {
#line 143
    mask = logical_block_size / 512 + -1;
#line 144
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 144
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              144);
    } else {

    }
#line 145
    if ((mask + 1) * 512 != logical_block_size) {
#line 145
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              145);
    } else {

    }
#line 146
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 147
    sector = (sector_t )(~ mask) & sector;
#line 148
    iop = mdev->md_io_tmpp;
#line 150
    if (rw & 1) {
#line 153
      tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 153
      p = tmp___2;
#line 154
      tmp___3 = lowmem_page_address(mdev->md_io_tmpp);
#line 154
      hp = tmp___3;
#line 156
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 159
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 159
      if (tmp___4 != 0L) {
#line 160
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 163
        return (0);
      } else {

      }
#line 166
      __len = 512UL;
#line 166
      if (__len > 63UL) {
#line 166
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 166
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 170
  tmp___7 = drbd_md_first_sector(bdev);
#line 170
  if (tmp___7 > sector) {
#line 172
    tmp___5 = get_current();
#line 172
    tmp___6 = get_current();
#line 172
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 170
    tmp___8 = drbd_md_last_sector(bdev);
#line 170
    if (tmp___8 < sector) {
#line 172
      tmp___5 = get_current();
#line 172
      tmp___6 = get_current();
#line 172
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 176
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 177
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 177
  if (tmp___9 != 0L) {
#line 178
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 180
    return (0);
  } else {

  }
#line 183
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 184
    tmp___10 = lowmem_page_address(mdev->md_io_page);
#line 184
    p___0 = tmp___10;
#line 185
    tmp___11 = lowmem_page_address(mdev->md_io_tmpp);
#line 185
    hp___0 = tmp___11;
#line 187
    __len___0 = 512UL;
#line 187
    if (__len___0 > 63UL) {
#line 187
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 187
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 190
  return (ok);
}
}
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 197
  al_flags = 0UL;
#line 199
  spin_lock_irq(& mdev->al_lock);
#line 200
  tmp = lc_find(mdev->resync, enr / 4U);
#line 201
  tmp___1 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 201
  if (tmp___1 != 0L) {
#line 202
    __mptr = (struct lc_element  const  *)tmp;
#line 202
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 203
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 203
    if (tmp___0 != 0) {
#line 204
      spin_unlock_irq(& mdev->al_lock);
#line 205
      return (0);
    } else {

    }
  } else {

  }
#line 208
  al_ext = lc_get(mdev->act_log, enr);
#line 209
  al_flags = (mdev->act_log)->flags;
#line 210
  spin_unlock_irq(& mdev->al_lock);
#line 221
  return (al_ext);
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 226
  enr = (unsigned int )(sector >> 13);
#line 230
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 230
  if (tmp <= 0) {
#line 230
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            230);
  } else {

  }
#line 232
  al_ext = _al_get(mdev, enr);
#line 232
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 232
    goto ldv_44191;
  } else {

  }
#line 232
  tmp___0 = get_current();
#line 232
  __wait.flags = 0U;
#line 232
  __wait.private = (void *)tmp___0;
#line 232
  __wait.func = & autoremove_wake_function;
#line 232
  __wait.task_list.next = & __wait.task_list;
#line 232
  __wait.task_list.prev = & __wait.task_list;
  ldv_44194: 
#line 232
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 232
  al_ext = _al_get(mdev, enr);
#line 232
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 232
    goto ldv_44193;
  } else {

  }
#line 232
  schedule();
#line 232
  goto ldv_44194;
  ldv_44193: 
#line 232
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44191: ;
#line 234
  if (al_ext->lc_number != enr) {
#line 241
    init_completion(& al_work.event);
#line 242
    al_work.al_ext = al_ext;
#line 243
    al_work.enr = enr;
#line 244
    al_work.old_enr = al_ext->lc_number;
#line 245
    al_work.w.cb = & w_al_write_transaction;
#line 246
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 247
    wait_for_completion(& al_work.event);
#line 249
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 251
    spin_lock_irq(& mdev->al_lock);
#line 252
    lc_changed(mdev->act_log, al_ext);
#line 253
    spin_unlock_irq(& mdev->al_lock);
#line 254
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 256
  return;
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 260
  enr = (unsigned int )(sector >> 13);
#line 264
  tmp = spinlock_check(& mdev->al_lock);
#line 264
  flags = _raw_spin_lock_irqsave(tmp);
#line 266
  extent = lc_find(mdev->act_log, enr);
#line 268
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 269
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 270
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 271
    return;
  } else {

  }
#line 274
  tmp___0 = lc_put(mdev->act_log, extent);
#line 274
  if (tmp___0 == 0U) {
#line 275
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 277
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 278
  return;
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  int tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  unsigned int tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  int tmp___9 ;

  {
#line 283
  __mptr = (struct drbd_work  const  *)w;
#line 283
  aw = (struct update_al_work *)__mptr;
#line 284
  updated = aw->al_ext;
#line 285
  new_enr = aw->enr;
#line 286
  evicted = aw->old_enr;
#line 291
  xor_sum = 0U;
#line 293
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 293
  if (tmp == 0) {
#line 294
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "get_ldev() failed in w_al_write_transaction\n");
#line 295
    complete(& ((struct update_al_work *)w)->event);
#line 296
    return (1);
  } else {

  }
#line 302
  if ((int )mdev->state.ldv_35401.conn <= 9 && evicted != 4294967295U) {
#line 303
    drbd_bm_write_sect(mdev, (unsigned long )(evicted / 4U));
  } else {

  }
#line 305
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 306
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 306
  buffer = (struct al_transaction *)tmp___0;
#line 308
  buffer->magic = 1728214147U;
#line 309
  tmp___1 = __fswab32(mdev->al_tr_number);
#line 309
  buffer->tr_number = tmp___1;
#line 311
  tmp___2 = lc_index_of(mdev->act_log, updated);
#line 311
  n = (int )tmp___2;
#line 313
  tmp___3 = __fswab32((__u32 )n);
#line 313
  buffer->updates[0].pos = tmp___3;
#line 314
  tmp___4 = __fswab32(new_enr);
#line 314
  buffer->updates[0].extent = tmp___4;
#line 316
  xor_sum = xor_sum ^ new_enr;
#line 318
  __min1 = 61;
#line 318
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 318
  mx = __min1 < __min2 ? __min1 : __min2;
#line 320
  i = 0;
#line 320
  goto ldv_44228;
  ldv_44227: 
#line 321
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 322
  tmp___5 = lc_element_by_index(mdev->act_log, idx);
#line 322
  extent_nr = tmp___5->lc_number;
#line 323
  tmp___6 = __fswab32(idx);
#line 323
  buffer->updates[i + 1].pos = tmp___6;
#line 324
  tmp___7 = __fswab32(extent_nr);
#line 324
  buffer->updates[i + 1].extent = tmp___7;
#line 325
  xor_sum = xor_sum ^ extent_nr;
#line 320
  i = i + 1;
  ldv_44228: ;
#line 320
  if (i < mx) {
#line 321
    goto ldv_44227;
  } else {

  }

#line 327
  goto ldv_44231;
  ldv_44230: 
#line 328
  buffer->updates[i + 1].pos = 4294967295U;
#line 329
  buffer->updates[i + 1].extent = 4294967295U;
#line 330
  xor_sum = ~ xor_sum;
#line 327
  i = i + 1;
  ldv_44231: ;
#line 327
  if (i <= 60) {
#line 328
    goto ldv_44230;
  } else {

  }
#line 332
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 333
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 334
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 336
  tmp___8 = __fswab32(xor_sum);
#line 336
  buffer->xor_sum = tmp___8;
#line 338
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 341
  tmp___9 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 341
  if (tmp___9 == 0) {
#line 342
    drbd_chk_io_error_(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 344
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 344
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 346
    mdev->al_tr_pos = 0;
  } else {

  }
#line 348
  if (mdev->al_tr_pos > 63) {
#line 348
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            348);
  } else {

  }
#line 349
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 351
  mutex_unlock(& mdev->md_io_mutex);
#line 353
  complete(& ((struct update_al_work *)w)->event);
#line 354
  put_ldev(mdev);
#line 356
  return (1);
}
}
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 375
  xor_sum = 0U;
#line 377
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 381
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 381
  if (tmp == 0) {
#line 382
    return (-1);
  } else {

  }
#line 384
  tmp___0 = __fswab32(b->magic);
#line 384
  rv = tmp___0 == 2205418087U;
#line 386
  i = 0;
#line 386
  goto ldv_44245;
  ldv_44244: 
#line 387
  tmp___1 = __fswab32(b->updates[i].extent);
#line 387
  xor_sum = tmp___1 ^ xor_sum;
#line 386
  i = i + 1;
  ldv_44245: ;
#line 386
  if (i <= 61) {
#line 387
    goto ldv_44244;
  } else {

  }
#line 388
  tmp___2 = __fswab32(b->xor_sum);
#line 388
  rv = (tmp___2 == xor_sum) & rv;
#line 390
  return (rv);
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 406
  active_extents = 0;
#line 407
  transactions = 0;
#line 408
  found_valid = 0;
#line 409
  from = 0;
#line 410
  to = 0;
#line 411
  from_tnr = 0U;
#line 412
  to_tnr = 0U;
#line 415
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 420
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 421
  tmp = lowmem_page_address(mdev->md_io_page);
#line 421
  buffer = (struct al_transaction *)tmp;
#line 424
  i = 0;
#line 424
  goto ldv_44265;
  ldv_44264: 
#line 425
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 426
  if (rv == 0) {
#line 427
    goto ldv_44263;
  } else {

  }
#line 428
  if (rv == -1) {
#line 429
    mutex_unlock(& mdev->md_io_mutex);
#line 430
    return (0);
  } else {

  }
#line 432
  tmp___0 = __fswab32(buffer->tr_number);
#line 432
  cnr = tmp___0;
#line 434
  found_valid = found_valid + 1;
#line 434
  if (found_valid == 1) {
#line 435
    from = i;
#line 436
    to = i;
#line 437
    from_tnr = cnr;
#line 438
    to_tnr = cnr;
#line 439
    goto ldv_44263;
  } else {

  }
#line 441
  if ((int )cnr - (int )from_tnr < 0) {
#line 442
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 442
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              442);
    } else {

    }
#line 443
    from = i;
#line 444
    from_tnr = cnr;
  } else {

  }
#line 446
  if ((int )cnr - (int )to_tnr > 0) {
#line 447
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 447
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              447);
    } else {

    }
#line 448
    to = i;
#line 449
    to_tnr = cnr;
  } else {

  }
  ldv_44263: 
#line 424
  i = i + 1;
  ldv_44265: ;
#line 424
  if (i <= mx) {
#line 425
    goto ldv_44264;
  } else {

  }

#line 453
  if (found_valid == 0) {
#line 454
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 455
    mutex_unlock(& mdev->md_io_mutex);
#line 456
    return (1);
  } else {

  }
#line 461
  i = from;
  ldv_44280: 
#line 467
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 468
  _b = rv == 0;
#line 468
  if (_b != 0) {
#line 468
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            468);
  } else {

  }
#line 468
  if (_b != 0) {
#line 468
    goto cancel;
  } else {

  }
#line 469
  if (rv == -1) {
#line 470
    mutex_unlock(& mdev->md_io_mutex);
#line 471
    return (0);
  } else {

  }
#line 474
  tmp___1 = __fswab32(buffer->tr_number);
#line 474
  trn = tmp___1;
#line 476
  spin_lock_irq(& mdev->al_lock);
#line 482
  j = 61;
#line 482
  goto ldv_44277;
  ldv_44276: 
#line 483
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 483
  pos = (int )tmp___2;
#line 484
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 484
  extent_nr = tmp___3;
#line 486
  if (extent_nr == 4294967295U) {
#line 487
    goto ldv_44275;
  } else {

  }
#line 489
  lc_set(mdev->act_log, extent_nr, pos);
#line 490
  active_extents = active_extents + 1;
  ldv_44275: 
#line 482
  j = j - 1;
  ldv_44277: ;
#line 482
  if (j >= 0) {
#line 483
    goto ldv_44276;
  } else {

  }
#line 492
  spin_unlock_irq(& mdev->al_lock);
#line 494
  transactions = transactions + 1;
  cancel: ;
#line 497
  if (i == to) {
#line 498
    goto ldv_44279;
  } else {

  }
#line 499
  i = i + 1;
#line 500
  if (i > mx) {
#line 501
    i = 0;
  } else {

  }
#line 502
  goto ldv_44280;
  ldv_44279: 
#line 504
  mdev->al_tr_number = to_tnr + 1U;
#line 505
  mdev->al_tr_pos = to;
#line 506
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 506
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 508
    mdev->al_tr_pos = 0;
  } else {

  }
#line 511
  mutex_unlock(& mdev->md_io_mutex);
#line 513
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 516
  return (1);
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void atodb_endio(struct bio *bio , int error ) 
{ 
  struct drbd_atodb_wait *wc ;
  struct drbd_conf *mdev ;
  struct page *page ;
  int uptodate ;
  int tmp ;

  {
#line 521
  wc = (struct drbd_atodb_wait *)bio->bi_private;
#line 522
  mdev = wc->mdev;
#line 524
  uptodate = (int )bio->bi_flags & 1;
#line 529
  if (error == 0 && uptodate == 0) {
#line 530
    error = -5;
  } else {

  }
#line 532
  drbd_chk_io_error_(mdev, error, 1, "atodb_endio");
#line 533
  if (error != 0 && wc->error == 0) {
#line 534
    wc->error = error;
  } else {

  }
#line 536
  tmp = atomic_dec_and_test(& wc->count);
#line 536
  if (tmp != 0) {
#line 537
    complete(& wc->io_done);
  } else {

  }
#line 539
  page = (bio->bi_io_vec)->bv_page;
#line 540
  put_page(page);
#line 541
  bio_put(bio);
#line 542
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 543
  put_ldev(mdev);
#line 544
  return;
}
}
#line 551 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int atodb_prepare_unless_covered(struct drbd_conf *mdev , struct bio **bios ,
                                        unsigned int enr , struct drbd_atodb_wait *wc ) 
{ 
  struct bio *bio ;
  struct page *page ;
  sector_t on_disk_sector ;
  unsigned int page_offset___0 ;
  int offset ;
  int i ;
  int err ;
  struct bio_vec  const  *prev_bv ;
  void *tmp ;
  size_t __min1 ;
  size_t __min2 ;
  size_t tmp___0 ;
  int tmp___1 ;

  {
#line 559
  page_offset___0 = 4096U;
#line 561
  i = 0;
#line 562
  err = -12;
#line 566
  enr = enr & 4294967288U;
#line 567
  on_disk_sector = (sector_t )(((u64 )enr + (mdev->ldev)->md.md_offset) + (u64 )(mdev->ldev)->md.bm_offset);
#line 570
  if ((on_disk_sector & 7UL) != 0UL) {
#line 570
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(on_disk_sector & 7U) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            570);
  } else {

  }
#line 579
  goto ldv_44304;
  ldv_44303: ;
#line 580
  if (bio->bi_sector == on_disk_sector) {
#line 581
    return (0);
  } else {

  }
#line 582
  i = i + 1;
  ldv_44304: 
#line 579
  bio = *(bios + (unsigned long )i);
#line 579
  if ((unsigned long )bio != (unsigned long )((struct bio *)0)) {
#line 580
    goto ldv_44303;
  } else {

  }
#line 587
  bio = bio_alloc(208U, 1);
#line 588
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 589
    return (-12);
  } else {

  }
#line 591
  if (i > 0) {
#line 592
    prev_bv = (struct bio_vec  const  *)(*(bios + ((unsigned long )i + 0xffffffffffffffffUL)))->bi_io_vec;
#line 593
    page_offset___0 = (unsigned int )prev_bv->bv_offset + (unsigned int )prev_bv->bv_len;
#line 594
    page = prev_bv->bv_page;
  } else {

  }
#line 596
  if (page_offset___0 == 4096U) {
#line 597
    page = alloc_pages(2U, 0U);
#line 598
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 599
      goto out_bio_put;
    } else {

    }
#line 600
    page_offset___0 = 0U;
  } else {
#line 602
    get_page(page);
  }
#line 605
  offset = (int )(enr << 6);
#line 606
  tmp = kmap(page);
#line 607
  __min1 = 512UL;
#line 607
  tmp___0 = drbd_bm_words(mdev);
#line 607
  __min2 = tmp___0 - (size_t )offset;
#line 607
  drbd_bm_get_lel(mdev, (size_t )offset, __min1 < __min2 ? __min1 : __min2, (unsigned long *)tmp + (unsigned long )page_offset___0);
#line 609
  kunmap(page);
#line 611
  bio->bi_private = (void *)wc;
#line 612
  bio->bi_end_io = & atodb_endio;
#line 613
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 614
  bio->bi_sector = on_disk_sector;
#line 616
  tmp___1 = bio_add_page(bio, page, 4096U, page_offset___0);
#line 616
  if (tmp___1 != 4096) {
#line 617
    goto out_put_page;
  } else {

  }
#line 619
  atomic_inc(& wc->count);
#line 625
  atomic_inc(& mdev->local_cnt);
#line 627
  *(bios + (unsigned long )i) = bio;
#line 629
  return (0);
  out_put_page: 
#line 632
  err = -22;
#line 633
  put_page(page);
  out_bio_put: 
#line 635
  bio_put(bio);
#line 636
  return (err);
}
}
#line 646 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) 
{ 
  int i ;
  int nr_elements ;
  unsigned int enr ;
  struct bio **bios ;
  struct drbd_atodb_wait wc ;
  int _b ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  struct lc_element *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  struct request_queue *tmp___7 ;
  int tmp___8 ;
  struct lc_element *tmp___9 ;

  {
#line 653
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 653
  _b = tmp == 0;
#line 653
  if (_b != 0) {
#line 653
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_al_to_on_disk_bm", (char *)"!get_ldev_if_state(mdev, D_ATTACHING)",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            653);
  } else {

  }
#line 653
  if (_b != 0) {
#line 654
    return;
  } else {

  }
#line 656
  tmp___0 = lc_try_lock(mdev->act_log);
#line 656
  if (tmp___0 != 0) {
#line 656
    goto ldv_44323;
  } else {

  }
#line 656
  tmp___1 = get_current();
#line 656
  __wait.flags = 0U;
#line 656
  __wait.private = (void *)tmp___1;
#line 656
  __wait.func = & autoremove_wake_function;
#line 656
  __wait.task_list.next = & __wait.task_list;
#line 656
  __wait.task_list.prev = & __wait.task_list;
  ldv_44326: 
#line 656
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 656
  tmp___2 = lc_try_lock(mdev->act_log);
#line 656
  if (tmp___2 != 0) {
#line 656
    goto ldv_44325;
  } else {

  }
#line 656
  schedule();
#line 656
  goto ldv_44326;
  ldv_44325: 
#line 656
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44323: 
#line 658
  nr_elements = (int )(mdev->act_log)->nr_elements;
#line 661
  tmp___3 = kzalloc___1((unsigned long )nr_elements * 8UL, 208U);
#line 661
  bios = (struct bio **)tmp___3;
#line 662
  if ((unsigned long )bios == (unsigned long )((struct bio **)0)) {
#line 663
    goto submit_one_by_one;
  } else {

  }
#line 665
  atomic_set(& wc.count, 0);
#line 666
  init_completion(& wc.io_done);
#line 667
  wc.mdev = mdev;
#line 668
  wc.error = 0;
#line 670
  i = 0;
#line 670
  goto ldv_44331;
  ldv_44330: 
#line 671
  tmp___4 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 671
  enr = tmp___4->lc_number;
#line 672
  if (enr == 4294967295U) {
#line 673
    goto ldv_44328;
  } else {

  }
#line 675
  tmp___5 = atodb_prepare_unless_covered(mdev, bios, enr / 4U, & wc);
#line 675
  if (tmp___5 != 0) {
#line 678
    goto free_bios_submit_one_by_one;
  } else {

  }
  ldv_44328: 
#line 670
  i = i + 1;
  ldv_44331: ;
#line 670
  if (i < nr_elements) {
#line 671
    goto ldv_44330;
  } else {

  }
#line 682
  lc_unlock(mdev->act_log);
#line 683
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 686
  i = 0;
#line 686
  goto ldv_44335;
  ldv_44334: ;
#line 687
  if ((unsigned long )*(bios + (unsigned long )i) == (unsigned long )((struct bio *)0)) {
#line 688
    goto ldv_44333;
  } else {

  }
#line 689
  tmp___6 = drbd_insert_fault(mdev, 0U);
#line 689
  if (tmp___6 != 0) {
#line 690
    (*(bios + (unsigned long )i))->bi_rw = 1UL;
#line 691
    bio_endio(*(bios + (unsigned long )i), -5);
  } else {
#line 693
    submit_bio(1, *(bios + (unsigned long )i));
  }
#line 686
  i = i + 1;
  ldv_44335: ;
#line 686
  if (i < nr_elements) {
#line 687
    goto ldv_44334;
  } else {

  }
  ldv_44333: 
#line 697
  tmp___7 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 697
  drbd_blk_run_queue(tmp___7);
#line 700
  drbd_md_flush(mdev);
#line 708
  tmp___8 = atomic_read((atomic_t const   *)(& wc.count));
#line 708
  if (tmp___8 != 0) {
#line 709
    wait_for_completion(& wc.io_done);
  } else {

  }
#line 711
  put_ldev(mdev);
#line 713
  kfree((void const   *)bios);
#line 714
  return;
  free_bios_submit_one_by_one: 
#line 718
  i = 0;
#line 718
  goto ldv_44337;
  ldv_44336: 
#line 719
  bio_endio(*(bios + (unsigned long )i), 0);
#line 718
  i = i + 1;
  ldv_44337: ;
#line 718
  if (i < nr_elements && (unsigned long )*(bios + (unsigned long )i) != (unsigned long )((struct bio *)0)) {
#line 719
    goto ldv_44336;
  } else {

  }
#line 721
  kfree((void const   *)bios);
  submit_one_by_one: 
#line 724
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Using the slow drbd_al_to_on_disk_bm()\n");
#line 726
  i = 0;
#line 726
  goto ldv_44341;
  ldv_44340: 
#line 727
  tmp___9 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 727
  enr = tmp___9->lc_number;
#line 728
  if (enr == 4294967295U) {
#line 729
    goto ldv_44339;
  } else {

  }
#line 732
  drbd_bm_write_sect(mdev, (unsigned long )(enr / 4U));
  ldv_44339: 
#line 726
  i = i + 1;
  ldv_44341: ;
#line 726
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 727
    goto ldv_44340;
  } else {

  }
#line 735
  lc_unlock(mdev->act_log);
#line 736
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 737
  put_ldev(mdev);
#line 738
  return;
}
}
#line 744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct lc_element *tmp___2 ;
  unsigned long tmp___3 ;
  char *tmp___4 ;

  {
#line 747
  add = 0UL;
#line 751
  tmp = lc_try_lock(mdev->act_log);
#line 751
  if (tmp != 0) {
#line 751
    goto ldv_44350;
  } else {

  }
#line 751
  tmp___0 = get_current();
#line 751
  __wait.flags = 0U;
#line 751
  __wait.private = (void *)tmp___0;
#line 751
  __wait.func = & autoremove_wake_function;
#line 751
  __wait.task_list.next = & __wait.task_list;
#line 751
  __wait.task_list.prev = & __wait.task_list;
  ldv_44353: 
#line 751
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 751
  tmp___1 = lc_try_lock(mdev->act_log);
#line 751
  if (tmp___1 != 0) {
#line 751
    goto ldv_44352;
  } else {

  }
#line 751
  schedule();
#line 751
  goto ldv_44353;
  ldv_44352: 
#line 751
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44350: 
#line 753
  i = 0;
#line 753
  goto ldv_44356;
  ldv_44355: 
#line 754
  tmp___2 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 754
  enr = tmp___2->lc_number;
#line 755
  if (enr == 4294967295U) {
#line 756
    goto ldv_44354;
  } else {

  }
#line 757
  tmp___3 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 757
  add = tmp___3 + add;
  ldv_44354: 
#line 753
  i = i + 1;
  ldv_44356: ;
#line 753
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 754
    goto ldv_44355;
  } else {

  }
#line 760
  lc_unlock(mdev->act_log);
#line 761
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 763
  tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 763
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___4);
#line 764
  return;
}
}
#line 767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 771
  spin_lock_irq(& mdev->al_lock);
#line 772
  rv = al_ext->refcnt == 0U;
#line 773
  tmp = __builtin_expect(rv != 0, 1L);
#line 773
  if (tmp != 0L) {
#line 774
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 775
  spin_unlock_irq(& mdev->al_lock);
#line 777
  return (rv);
}
}
#line 789 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 794
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 794
  if (tmp == 0) {
#line 794
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            794);
  } else {

  }
#line 796
  i = 0;
#line 796
  goto ldv_44374;
  ldv_44373: 
#line 797
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 798
  if (al_ext->lc_number == 4294967295U) {
#line 799
    goto ldv_44368;
  } else {

  }
#line 800
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 800
  if (tmp___0 != 0) {
#line 800
    goto ldv_44369;
  } else {

  }
#line 800
  tmp___1 = get_current();
#line 800
  __wait.flags = 0U;
#line 800
  __wait.private = (void *)tmp___1;
#line 800
  __wait.func = & autoremove_wake_function;
#line 800
  __wait.task_list.next = & __wait.task_list;
#line 800
  __wait.task_list.prev = & __wait.task_list;
  ldv_44372: 
#line 800
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 800
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 800
  if (tmp___2 != 0) {
#line 800
    goto ldv_44371;
  } else {

  }
#line 800
  schedule();
#line 800
  goto ldv_44372;
  ldv_44371: 
#line 800
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44369: ;
  ldv_44368: 
#line 796
  i = i + 1;
  ldv_44374: ;
#line 796
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 797
    goto ldv_44373;
  } else {

  }
#line 803
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 804
  return;
}
}
#line 806 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 808
  __mptr = (struct drbd_work  const  *)w;
#line 808
  udw = (struct update_odbm_work *)__mptr;
#line 810
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 810
  if (tmp___0 == 0) {
#line 811
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 811
    if (tmp != 0) {
#line 812
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 813
    kfree((void const   *)udw);
#line 814
    return (1);
  } else {

  }
#line 817
  drbd_bm_write_sect(mdev, (unsigned long )udw->enr);
#line 818
  put_ldev(mdev);
#line 820
  kfree((void const   *)udw);
#line 822
  tmp___1 = drbd_bm_total_weight(mdev);
#line 822
  if (tmp___1 <= mdev->rs_failed) {
#line 823
    switch ((int )mdev->state.ldv_35401.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 826
    drbd_resync_finished(mdev);
    default: ;
#line 829
    goto ldv_44390;
    }
    ldv_44390: ;
  } else {

  }
#line 832
  drbd_bcast_sync_progress(mdev);
#line 834
  return (1);
}
}
#line 844 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 852
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 852
  if (tmp == 0) {
#line 852
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            852);
  } else {

  }
#line 856
  enr = (unsigned int )(sector >> 15);
#line 858
  e = lc_get(mdev->resync, enr);
#line 859
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 860
    __mptr = (struct lc_element  const  *)e;
#line 860
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 861
    if (ext->lce.lc_number == enr) {
#line 862
      if (success != 0) {
#line 863
        ext->rs_left = ext->rs_left - count;
      } else {
#line 865
        ext->rs_failed = ext->rs_failed + count;
      }
#line 866
      if (ext->rs_left < ext->rs_failed) {
#line 867
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
                (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                count);
#line 872
        dump_stack();
#line 874
        lc_put(mdev->resync, & ext->lce);
#line 875
        val.i = 0U;
#line 875
        val.ldv_35401.conn = 1U;
#line 875
        mask.i = 0U;
#line 875
        mask.ldv_35401.conn = 31U;
#line 875
        drbd_force_state(mdev, mask, val);
#line 876
        return;
      } else {

      }
    } else {
#line 885
      tmp___0 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 885
      rs_left = tmp___0;
#line 886
      if (ext->flags != 0UL) {
#line 887
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 891
        ext->flags = 0UL;
      } else {

      }
#line 893
      if (ext->rs_failed != 0) {
#line 894
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
#line 897
        set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 899
      ext->rs_left = rs_left;
#line 900
      ext->rs_failed = success == 0 ? count : 0;
#line 901
      lc_changed(mdev->resync, & ext->lce);
    }
#line 903
    lc_put(mdev->resync, & ext->lce);
#line 906
    if (ext->rs_left == ext->rs_failed) {
#line 907
      ext->rs_failed = 0;
#line 909
      tmp___1 = kmalloc___2(32UL, 32U);
#line 909
      udw = (struct update_odbm_work *)tmp___1;
#line 910
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 911
        udw->enr = ext->lce.lc_number;
#line 912
        udw->w.cb = & w_update_odbm;
#line 913
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 915
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
#line 916
        set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {
#line 920
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 924
  return;
}
}
#line 934 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned long now ;
  unsigned long last ;
  int next ;
  unsigned long tw ;
  unsigned long tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 939
  count = 0UL;
#line 941
  wake_up = 0;
#line 944
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 945
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 947
    return;
  } else {

  }
#line 949
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 950
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 952
  _b = sector >= nr_sectors;
#line 952
  if (_b != 0) {
#line 952
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            952);
  } else {

  }
#line 952
  if (_b != 0) {
#line 952
    return;
  } else {

  }
#line 953
  _b___0 = esector >= nr_sectors;
#line 953
  if (_b___0 != 0) {
#line 953
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            953);
  } else {

  }
#line 953
  if (_b___0 != 0) {
#line 953
    esector = nr_sectors - 1UL;
  } else {

  }
#line 955
  lbnr = (nr_sectors - 1UL) >> 3;
#line 960
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 960
  if (tmp != 0L) {
#line 961
    return;
  } else {

  }
#line 962
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 962
  if (tmp___0 != 0L) {
#line 963
    ebnr = lbnr;
  } else {
#line 965
    ebnr = (esector - 7UL) >> 3;
  }
#line 966
  sbnr = (sector + 7UL) >> 3;
#line 968
  if (sbnr > ebnr) {
#line 969
    return;
  } else {

  }
#line 975
  tmp___1 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 975
  count = (unsigned long )tmp___1;
#line 976
  if (count != 0UL) {
#line 976
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 976
    if (tmp___4 != 0) {
#line 977
      now = jiffies;
#line 978
      last = mdev->rs_mark_time[mdev->rs_last_mark];
#line 979
      next = (mdev->rs_last_mark + 1) % 8;
#line 980
      if ((1 != 0 && 1 != 0) && (long )now - (long )(last + 750UL) >= 0L) {
#line 981
        tmp___2 = drbd_bm_total_weight(mdev);
#line 981
        tw = tmp___2;
#line 982
        if ((mdev->rs_mark_left[mdev->rs_last_mark] != tw && (unsigned int )*((unsigned short *)mdev + 1006UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 1006UL) != 320U) {
#line 985
          mdev->rs_mark_time[next] = now;
#line 986
          mdev->rs_mark_left[next] = tw;
#line 987
          mdev->rs_last_mark = next;
        } else {

        }
      } else {

      }
#line 990
      tmp___3 = spinlock_check(& mdev->al_lock);
#line 990
      flags = _raw_spin_lock_irqsave(tmp___3);
#line 991
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 992
      spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 996
      wake_up = 1;
#line 997
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 999
  if (wake_up != 0) {
#line 1000
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1001
  return;
}
}
#line 1011 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 1019
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1020
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 1022
    return;
  } else {

  }
#line 1025
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1025
  if (tmp == 0) {
#line 1026
    return;
  } else {

  }
#line 1028
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1029
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1031
  _b = sector >= nr_sectors;
#line 1031
  if (_b != 0) {
#line 1031
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1031);
  } else {

  }
#line 1031
  if (_b != 0) {
#line 1032
    goto out;
  } else {

  }
#line 1033
  _b___0 = esector >= nr_sectors;
#line 1033
  if (_b___0 != 0) {
#line 1033
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1033);
  } else {

  }
#line 1033
  if (_b___0 != 0) {
#line 1034
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1036
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1040
  sbnr = sector >> 3;
#line 1041
  ebnr = esector >> 3;
#line 1045
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 1045
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 1046
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 1046
  count = (unsigned int )tmp___1;
#line 1048
  enr = (unsigned int )(sector >> 15);
#line 1049
  e = lc_find(mdev->resync, enr);
#line 1050
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1051
    __mptr = (struct lc_element  const  *)e;
#line 1051
    __mptr___0 = (struct lc_element  const  *)e;
#line 1051
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 1052
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 1055
  put_ldev(mdev);
#line 1056
  return;
}
}
#line 1059 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 1063
  wakeup = 0;
#line 1066
  spin_lock_irq(& mdev->al_lock);
#line 1067
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 1068
    spin_unlock_irq(& mdev->al_lock);
#line 1069
    return (0);
  } else {

  }
#line 1071
  e = lc_get(mdev->resync, enr);
#line 1072
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1072
    __mptr = (struct lc_element  const  *)e;
#line 1072
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1072
    bm_ext = 0;
  }
#line 1073
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1074
    if (bm_ext->lce.lc_number != enr) {
#line 1075
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1076
      bm_ext->rs_failed = 0;
#line 1077
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1078
      wakeup = 1;
    } else {

    }
#line 1080
    if (bm_ext->lce.refcnt == 1U) {
#line 1081
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1082
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1084
  rs_flags = (mdev->resync)->flags;
#line 1085
  spin_unlock_irq(& mdev->al_lock);
#line 1086
  if (wakeup != 0) {
#line 1087
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1089
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1090
    if ((rs_flags & 4UL) != 0UL) {
#line 1091
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 1093
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1093
    if (tmp != 0L) {
#line 1093
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1093), "i" (12UL));
      ldv_44478: ;
#line 1093
      goto ldv_44478;
    } else {

    }
  } else {

  }
#line 1096
  return (bm_ext);
}
}
#line 1099 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1102
  rv = 0;
#line 1104
  spin_lock_irq(& mdev->al_lock);
#line 1105
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1105
  if (tmp != 0L) {
#line 1106
    rv = 1;
  } else {
#line 1108
    al_ext = lc_find(mdev->act_log, enr);
#line 1109
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1110
      if (al_ext->refcnt != 0U) {
#line 1111
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1114
  spin_unlock_irq(& mdev->al_lock);
#line 1121
  return (rv);
}
}
#line 1131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned int tmp___8 ;

  {
#line 1133
  enr = (unsigned int )(sector >> 15);
#line 1137
  __ret = 0;
#line 1137
  bm_ext = _bme_get(mdev, enr);
#line 1137
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1137
    tmp = get_current();
#line 1137
    __wait.flags = 0U;
#line 1137
    __wait.private = (void *)tmp;
#line 1137
    __wait.func = & autoremove_wake_function;
#line 1137
    __wait.task_list.next = & __wait.task_list;
#line 1137
    __wait.task_list.prev = & __wait.task_list;
    ldv_44497: 
#line 1137
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1137
    bm_ext = _bme_get(mdev, enr);
#line 1137
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1137
      goto ldv_44495;
    } else {

    }
#line 1137
    tmp___0 = get_current();
#line 1137
    tmp___1 = signal_pending(tmp___0);
#line 1137
    if (tmp___1 == 0) {
#line 1137
      schedule();
#line 1137
      goto ldv_44496;
    } else {

    }
#line 1137
    __ret = -512;
#line 1137
    goto ldv_44495;
    ldv_44496: ;
#line 1137
    goto ldv_44497;
    ldv_44495: 
#line 1137
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1137
  sig = __ret;
#line 1139
  if (sig != 0) {
#line 1140
    return (-4);
  } else {

  }
#line 1142
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1142
  if (tmp___2 != 0) {
#line 1143
    return (0);
  } else {

  }
#line 1145
  i = 0;
#line 1145
  goto ldv_44506;
  ldv_44505: 
#line 1146
  __ret___0 = 0;
#line 1146
  tmp___7 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1146
  if (tmp___7 != 0) {
#line 1146
    tmp___3 = get_current();
#line 1146
    __wait___0.flags = 0U;
#line 1146
    __wait___0.private = (void *)tmp___3;
#line 1146
    __wait___0.func = & autoremove_wake_function;
#line 1146
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1146
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_44503: 
#line 1146
    prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1146
    tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1146
    if (tmp___4 == 0) {
#line 1146
      goto ldv_44501;
    } else {

    }
#line 1146
    tmp___5 = get_current();
#line 1146
    tmp___6 = signal_pending(tmp___5);
#line 1146
    if (tmp___6 == 0) {
#line 1146
      schedule();
#line 1146
      goto ldv_44502;
    } else {

    }
#line 1146
    __ret___0 = -512;
#line 1146
    goto ldv_44501;
    ldv_44502: ;
#line 1146
    goto ldv_44503;
    ldv_44501: 
#line 1146
    finish_wait(& mdev->al_wait, & __wait___0);
  } else {

  }
#line 1146
  sig = __ret___0;
#line 1148
  if (sig != 0) {
#line 1149
    spin_lock_irq(& mdev->al_lock);
#line 1150
    tmp___8 = lc_put(mdev->resync, & bm_ext->lce);
#line 1150
    if (tmp___8 == 0U) {
#line 1151
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1152
      mdev->resync_locked = mdev->resync_locked - 1U;
#line 1153
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {

    }
#line 1155
    spin_unlock_irq(& mdev->al_lock);
#line 1156
    return (-4);
  } else {

  }
#line 1145
  i = i + 1;
  ldv_44506: ;
#line 1145
  if (i <= 3) {
#line 1146
    goto ldv_44505;
  } else {

  }
#line 1159
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1160
  return (0);
}
}
#line 1172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1174
  enr = (unsigned int )(sector >> 15);
#line 1175
  al_enr = enr * 4U;
#line 1180
  spin_lock_irq(& mdev->al_lock);
#line 1181
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1195
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1196
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1196
      __mptr = (struct lc_element  const  *)e;
#line 1196
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1196
      bm_ext = 0;
    }
#line 1197
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1198
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1198
      if (tmp != 0) {
#line 1198
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1198);
      } else {

      }
#line 1199
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1199
      if (tmp___0 == 0) {
#line 1199
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1199);
      } else {

      }
#line 1200
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1201
      mdev->resync_wenr = 4294967295U;
#line 1202
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1202
      if (tmp___1 == 0U) {
#line 1203
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1204
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1206
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1210
  e = lc_try_get(mdev->resync, enr);
#line 1211
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1211
    __mptr___0 = (struct lc_element  const  *)e;
#line 1211
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1211
    bm_ext = 0;
  }
#line 1212
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1213
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1213
    if (tmp___2 != 0) {
#line 1214
      goto proceed;
    } else {

    }
#line 1215
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1215
    if (tmp___3 == 0) {
#line 1216
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1222
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1223
      if (bm_ext->lce.refcnt == 0U) {
#line 1223
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1223);
      } else {

      }
    }
#line 1225
    goto check_al;
  } else {
#line 1228
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1229
      goto try_again;
    } else {

    }
#line 1231
    e = lc_get(mdev->resync, enr);
#line 1232
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1232
      __mptr___1 = (struct lc_element  const  *)e;
#line 1232
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1232
      bm_ext = 0;
    }
#line 1233
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1234
      rs_flags = (mdev->resync)->flags;
#line 1235
      if ((rs_flags & 4UL) != 0UL) {
#line 1236
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1238
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1238
      if (tmp___4 != 0L) {
#line 1238
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1238), "i" (12UL));
        ldv_44527: ;
#line 1238
        goto ldv_44527;
      } else {

      }
#line 1239
      goto try_again;
    } else {

    }
#line 1241
    if (bm_ext->lce.lc_number != enr) {
#line 1242
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1243
      bm_ext->rs_failed = 0;
#line 1244
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1245
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1246
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1246
      if (tmp___5 != 0) {
#line 1246
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1246);
      } else {

      }
    } else {

    }
#line 1248
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1249
    if (bm_ext->lce.refcnt != 1U) {
#line 1249
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1249);
    } else {

    }
#line 1250
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1251
    goto check_al;
  }
  check_al: 
#line 1254
  i = 0;
#line 1254
  goto ldv_44529;
  ldv_44528: 
#line 1255
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1255
  if (tmp___6 != 0L) {
#line 1256
    goto try_again;
  } else {

  }
#line 1257
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1257
  if (tmp___7 != 0) {
#line 1258
    goto try_again;
  } else {

  }
#line 1254
  i = i + 1;
  ldv_44529: ;
#line 1254
  if (i <= 3) {
#line 1255
    goto ldv_44528;
  } else {

  }
#line 1260
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1262
  mdev->resync_wenr = 4294967295U;
#line 1263
  spin_unlock_irq(& mdev->al_lock);
#line 1264
  return (0);
  try_again: ;
#line 1267
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1268
    mdev->resync_wenr = enr;
  } else {

  }
#line 1269
  spin_unlock_irq(& mdev->al_lock);
#line 1270
  return (-11);
}
}
#line 1273 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1275
  enr = (unsigned int )(sector >> 15);
#line 1280
  tmp = spinlock_check(& mdev->al_lock);
#line 1280
  flags = _raw_spin_lock_irqsave(tmp);
#line 1281
  e = lc_find(mdev->resync, enr);
#line 1282
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1282
    __mptr = (struct lc_element  const  *)e;
#line 1282
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1282
    bm_ext = 0;
  }
#line 1283
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1284
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1285
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1285
    if (tmp___0 != 0) {
#line 1286
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1287
    return;
  } else {

  }
#line 1290
  if (bm_ext->lce.refcnt == 0U) {
#line 1291
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1292
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1295
    return;
  } else {

  }
#line 1298
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1298
  if (tmp___1 == 0U) {
#line 1299
    clear_bit(1, (unsigned long volatile   *)(& bm_ext->flags));
#line 1300
    clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1301
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1302
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1305
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1306
  return;
}
}
#line 1312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1314
  spin_lock_irq(& mdev->al_lock);
#line 1316
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1316
  if (tmp != 0) {
#line 1317
    lc_reset(mdev->resync);
#line 1318
    put_ldev(mdev);
  } else {

  }
#line 1320
  mdev->resync_locked = 0U;
#line 1321
  mdev->resync_wenr = 4294967295U;
#line 1322
  spin_unlock_irq(& mdev->al_lock);
#line 1323
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1324
  return;
}
}
#line 1333 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1339
  spin_lock_irq(& mdev->al_lock);
#line 1341
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1341
  if (tmp___3 != 0) {
#line 1343
    i = 0;
#line 1343
    goto ldv_44558;
    ldv_44557: 
#line 1344
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1345
    __mptr = (struct lc_element  const  *)e;
#line 1345
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1346
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1347
      goto ldv_44556;
    } else {

    }
#line 1348
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1349
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1352
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1352
      if (tmp != 0) {
#line 1352
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1352);
      } else {

      }
#line 1353
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1353
      if (tmp___0 == 0) {
#line 1353
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1353);
      } else {

      }
#line 1354
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1355
      mdev->resync_wenr = 4294967295U;
#line 1356
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1358
    if (bm_ext->lce.refcnt != 0U) {
#line 1359
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1361
      put_ldev(mdev);
#line 1362
      spin_unlock_irq(& mdev->al_lock);
#line 1363
      return (-11);
    } else {

    }
#line 1365
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1365
    if (tmp___1 != 0) {
#line 1365
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1365);
    } else {

    }
#line 1366
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1366
    if (tmp___2 != 0) {
#line 1366
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1366);
    } else {

    }
#line 1367
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_44556: 
#line 1343
    i = i + 1;
    ldv_44558: ;
#line 1343
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1344
      goto ldv_44557;
    } else {

    }

#line 1369
    if ((mdev->resync)->used != 0U) {
#line 1369
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1369);
    } else {

    }
#line 1370
    put_ldev(mdev);
  } else {

  }
#line 1372
  spin_unlock_irq(& mdev->al_lock);
#line 1374
  return (0);
}
}
#line 1383 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1389
  wake_up = 0;
#line 1391
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1392
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1394
    return;
  } else {

  }
#line 1396
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1397
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1399
  _b = sector >= nr_sectors;
#line 1399
  if (_b != 0) {
#line 1399
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1399);
  } else {

  }
#line 1399
  if (_b != 0) {
#line 1399
    return;
  } else {

  }
#line 1400
  _b___0 = esector >= nr_sectors;
#line 1400
  if (_b___0 != 0) {
#line 1400
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1400);
  } else {

  }
#line 1400
  if (_b___0 != 0) {
#line 1400
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1402
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1407
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1407
  if (tmp != 0L) {
#line 1408
    return;
  } else {

  }
#line 1409
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1409
  if (tmp___0 != 0L) {
#line 1410
    ebnr = lbnr;
  } else {
#line 1412
    ebnr = (esector - 7UL) >> 3;
  }
#line 1413
  sbnr = (sector + 7UL) >> 3;
#line 1415
  if (sbnr > ebnr) {
#line 1416
    return;
  } else {

  }
#line 1422
  spin_lock_irq(& mdev->al_lock);
#line 1423
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1423
  count = (unsigned long )tmp___1;
#line 1424
  if (count != 0UL) {
#line 1425
    mdev->rs_failed = mdev->rs_failed + count;
#line 1427
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1427
    if (tmp___2 != 0) {
#line 1428
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1429
      put_ldev(mdev);
    } else {

    }
#line 1434
    wake_up = 1;
  } else {

  }
#line 1436
  spin_unlock_irq(& mdev->al_lock);
#line 1437
  if (wake_up != 0) {
#line 1438
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1439
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 112 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 164 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 166
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 168
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 169
  memset((void *)dst, 255, (size_t )len);
#line 171
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 172
  return;
}
}
#line 271 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 275
  tmp___0 = __bitmap_weight(src, nbits);
#line 275
  return (tmp___0);
}
}
#line 79 "include/linux/cpumask.h"
extern struct cpumask  const  * const  cpu_online_mask ;
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 612
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 614
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 286 "include/linux/list.h"
__inline static void list_splice(struct list_head  const  *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 289
  tmp = list_empty(list);
#line 289
  if (tmp == 0) {
#line 290
    __list_splice(list, head, head->next);
  } else {

  }
#line 291
  return;
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 65 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 504 "include/linux/module.h"
__inline static int ldv_try_module_get_2(struct module *module ) ;
#line 510
void ldv_module_put_1(struct module *ldv_func_arg1 ) ;
#line 514
void ldv_module_put_3(struct module *ldv_func_arg1 ) ;
#line 3 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_try_module_get(struct module *module ) ;
#line 5
void ldv_module_put(struct module *module ) ;
#line 251 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 275
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___4(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_13566: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_13566;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 235 "include/linux/slub_def.h"
__inline static void *kmalloc_large___4(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 237
  tmp = get_order(size);
#line 237
  order = (unsigned int )tmp;
#line 238
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 238
  ret = (void *)tmp___0;
#line 240
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 241
  trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 243
  return (ret);
}
}
#line 246 "include/linux/slub_def.h"
__inline static void *kmalloc___4(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 250
  if (0) {
#line 251
    if (size > 8192UL) {
#line 252
      tmp = kmalloc_large___4(size, flags);
#line 252
      return (tmp);
    } else {

    }
#line 254
    if ((flags & 1U) == 0U) {
#line 255
      tmp___0 = kmalloc_slab(size);
#line 255
      s = tmp___0;
#line 257
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 258
        return (16);
      } else {

      }
#line 260
      ret = kmem_cache_alloc_notrace(s, flags);
#line 262
      trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 264
      return (ret);
    } else {

    }
  } else {

  }
#line 267
  tmp___1 = __kmalloc(size, flags);
#line 267
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___2(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___4(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 646 "include/linux/device.h"
extern int dev_printk(char const   * , struct device  const  * , char const   *  , ...) ;
#line 207 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 207
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 207
  return (tmp);
}
}
#line 1964 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 1965
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 1966
extern struct block_device *bdget(dev_t  ) ;
#line 1970
extern void bdput(struct block_device * ) ;
#line 2005
extern void bd_release(struct block_device * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 1779 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2016
extern int wake_up_process(struct task_struct * ) ;
#line 14 "include/linux/file.h"
extern void fput(struct file * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create(int (*)(void * ) , void * , char const   * 
                                          , ...) ;
#line 398 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 404
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 591
extern struct gendisk *alloc_disk(int  ) ;
#line 593
extern void put_disk(struct gendisk * ) ;
#line 257 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 259
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 260
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 260
    return (tmp);
  } else {

  }
#line 261
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 719 "include/linux/blkdev.h"
extern int blk_remove_plug(struct request_queue * ) ;
#line 855
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 856
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 857
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 860
extern void blk_queue_max_segment_size(struct request_queue * , unsigned int  ) ;
#line 888
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 907
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 164 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 588 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 590
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 590
  if (tmp != 0L) {
#line 590
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (590), "i" (12UL));
    ldv_43468: ;
#line 590
    goto ldv_43468;
  } else {

  }
#line 591
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 592
  return;
}
}
#line 601 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 603
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 604
  return;
}
}
#line 613 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 615
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 615
  if (tmp != 0L) {
#line 615
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (615), "i" (12UL));
    ldv_43483: ;
#line 615
    goto ldv_43483;
  } else {

  }
#line 616
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 617
  return;
}
}
#line 1180
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1189
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) ;
#line 1195
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1200
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1205
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) ;
#line 1208
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1212
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1252
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1254
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1259
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1266
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1267
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1268
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1270
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1464 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1465 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1466 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1467 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1468 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1469 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1471 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1472 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1473 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1474 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1478
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1479
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1481 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1491
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1492
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1651
void drbd_nl_cleanup(void) ;
#line 1652
int drbd_nl_init(void) ;
#line 1653
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1752 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1754
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1754
  if (tmp == 0) {
#line 1754
    goto ldv_44539;
  } else {

  }
#line 1754
  tmp___0 = get_current();
#line 1754
  __wait.flags = 0U;
#line 1754
  __wait.private = (void *)tmp___0;
#line 1754
  __wait.func = & autoremove_wake_function;
#line 1754
  __wait.task_list.next = & __wait.task_list;
#line 1754
  __wait.task_list.prev = & __wait.task_list;
  ldv_44542: 
#line 1754
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1754
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1754
  if (tmp___1 == 0) {
#line 1754
    goto ldv_44541;
  } else {

  }
#line 1754
  schedule();
#line 1754
  goto ldv_44542;
  ldv_44541: 
#line 1754
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44539: ;
#line 1757
  return;
}
}
#line 1795 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1797
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1799
  if (forcedetach == 0) {
#line 1800
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1800
    if (tmp != 0) {
#line 1801
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Passing error on...\n",
              where);
    } else {

    }
#line 1803
    goto ldv_44565;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1808
  if ((int )mdev->state.ldv_35401.disk > 2) {
#line 1809
    __ns.i = mdev->state.i;
#line 1809
    __ns.ldv_35401.disk = 2U;
#line 1809
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.Detaching...\n",
            where);
  } else {

  }
#line 1813
  goto ldv_44565;
  }
  ldv_44565: ;
#line 1816
  return;
}
}
#line 1826 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1829
  if (error != 0) {
#line 1831
    tmp = spinlock_check(& mdev->req_lock);
#line 1831
    flags = _raw_spin_lock_irqsave(tmp);
#line 1832
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1833
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1835
  return;
}
}
#line 1888 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1891
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1895
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1895
  if (tmp___1 != 0UL) {
#line 1895
    __min1 = 34359738368UL;
#line 1895
    tmp___0 = drbd_md_first_sector(bdev);
#line 1895
    __min2 = tmp___0;
#line 1895
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1895
    s = 0UL;
  }
#line 1898
  goto ldv_44606;
  case -2: 
#line 1900
  __min1___0 = 34359738368UL;
#line 1900
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1900
  __min2___0 = tmp___2;
#line 1900
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1903
  __min1___1 = s;
#line 1903
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1903
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1906
  goto ldv_44606;
  default: 
#line 1908
  __min1___2 = 8587575296UL;
#line 1908
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1908
  __min2___2 = tmp___3;
#line 1908
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_44606: ;
#line 1911
  return (s);
}
}
#line 1919 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1922
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1924
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1930
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1931
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1931
    if (tmp != 0) {
#line 1932
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 1933
      dump_stack();
    } else {

    }
#line 1935
    return (0UL);
  } else {

  }
#line 1937
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 1937
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1940
  return (0UL);
  }
}
}
#line 2002 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2004
  _drbd_thread_stop(thi, 0, 0);
#line 2005
  return;
}
}
#line 2007 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2009
  _drbd_thread_stop(thi, 1, 0);
#line 2010
  return;
}
}
#line 2202 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(union drbd_state s ) 
{ 


  {
#line 2208
  switch ((unsigned int )s.ldv_35401.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2221
  goto ldv_44721;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2240
  return (0);
  }
  ldv_44721: ;
#line 2243
  switch ((unsigned int )s.ldv_35401.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2250
  goto ldv_44741;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2259
  return (0);
  }
  ldv_44741: ;
#line 2262
  return (1);
}
}
#line 2270 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2272
  tmp = drbd_get_max_buffers(mdev);
#line 2272
  mxb = tmp;
#line 2274
  tmp___0 = is_susp(mdev->state);
#line 2274
  if (tmp___0 != 0) {
#line 2275
    return (0);
  } else {

  }
#line 2276
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2276
  if (tmp___1 != 0) {
#line 2277
    return (0);
  } else {

  }
#line 2284
  tmp___2 = drbd_state_is_stable___0(mdev->state);
#line 2284
  if (tmp___2 == 0) {
#line 2285
    return (0);
  } else {

  }
#line 2289
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2289
  if (tmp___3 > mxb) {
#line 2290
    return (0);
  } else {

  }
#line 2291
  tmp___4 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2291
  if (tmp___4 != 0) {
#line 2292
    return (0);
  } else {

  }
#line 2293
  return (1);
}
}
#line 2374 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2376
  sk = (mdev->data.socket)->sk;
#line 2377
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2378
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2379
  return;
}
}
#line 2381 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2388
  return (0);
}
}
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_44981;
  ldv_44980: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_44981: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_44980;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_main_mutex.wait_lock",
                                                                   0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, {0, 0}, "drbd_main_mutex", 0, 0UL}};
#line 80
int drbd_init(void) ;
#line 81
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 82
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 83
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 84
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 86
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 87
static void md_sync_timer_fn(unsigned long data ) ;
#line 88
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 89
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 129 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 134
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}}}, 1250, 5,
    0, 0, 0UL};
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 163
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 205
  tmp = kmalloc___4(56UL, 208U);
#line 205
  b = (struct drbd_tl_epoch *)tmp;
#line 206
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 207
    return (0);
  } else {

  }
#line 208
  INIT_LIST_HEAD(& b->requests);
#line 209
  INIT_LIST_HEAD(& b->w.list);
#line 210
  b->next = 0;
#line 211
  b->br_number = 4711U;
#line 212
  b->n_writes = 0;
#line 213
  b->w.cb = 0;
#line 215
  mdev->oldest_tle = b;
#line 216
  mdev->newest_tle = b;
#line 217
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 219
  mdev->tl_hash = 0;
#line 220
  mdev->tl_hash_s = 0U;
#line 222
  return (1);
}
}
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 227
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 227
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            227);
  } else {

  }
#line 228
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 228
  if (tmp == 0) {
#line 228
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            228);
  } else {

  }
#line 229
  kfree((void const   *)mdev->oldest_tle);
#line 230
  mdev->oldest_tle = 0;
#line 231
  kfree((void const   *)mdev->unused_spare_tle);
#line 232
  mdev->unused_spare_tle = 0;
#line 233
  kfree((void const   *)mdev->tl_hash);
#line 234
  mdev->tl_hash = 0;
#line 235
  mdev->tl_hash_s = 0U;
#line 236
  return;
}
}
#line 245 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 249
  INIT_LIST_HEAD(& new->requests);
#line 250
  INIT_LIST_HEAD(& new->w.list);
#line 251
  new->w.cb = 0;
#line 252
  new->next = 0;
#line 253
  new->n_writes = 0;
#line 255
  newest_before = mdev->newest_tle;
#line 258
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 259
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 260
    (mdev->newest_tle)->next = new;
#line 261
    mdev->newest_tle = new;
  } else {

  }
#line 263
  return;
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 282
  spin_lock_irq(& mdev->req_lock);
#line 284
  b = mdev->oldest_tle;
#line 287
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 288
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 290
    goto bail;
  } else {

  }
#line 292
  if (b->br_number != barrier_nr) {
#line 293
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 295
    goto bail;
  } else {

  }
#line 297
  if ((unsigned int )b->n_writes != set_size) {
#line 298
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_writes=%u, expected n_writes=%u!\n",
            barrier_nr, set_size, b->n_writes);
#line 300
    goto bail;
  } else {

  }
#line 304
  le = b->requests.next;
#line 304
  tle = le->next;
#line 304
  goto ldv_45209;
  ldv_45208: 
#line 305
  __mptr = (struct list_head  const  *)le;
#line 305
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 306
  _req_mod(r, barrier_acked);
#line 304
  le = tle;
#line 304
  tle = le->next;
  ldv_45209: ;
#line 304
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 305
    goto ldv_45208;
  } else {

  }
#line 321
  list_del_init(& b->requests);
#line 323
  nob = b->next;
#line 324
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 324
  if (tmp != 0) {
#line 325
    _tl_add_barrier(mdev, b);
#line 326
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 327
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 331
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 331
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              331);
    } else {

    }
#line 332
    mdev->oldest_tle = nob;
#line 333
    kfree((void const   *)b);
  }
#line 336
  spin_unlock_irq(& mdev->req_lock);
#line 337
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 337
  if (tmp___0 != 0) {
#line 337
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 337
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 337
  if (tmp___2 < 0) {
#line 337
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 337
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 337, tmp___1);
  } else {

  }
#line 339
  return;
  bail: 
#line 342
  spin_unlock_irq(& mdev->req_lock);
#line 343
  val.i = 0U;
#line 343
  val.ldv_35401.conn = 6U;
#line 343
  mask.i = 0U;
#line 343
  mask.ldv_35401.conn = 31U;
#line 343
  drbd_force_state(mdev, mask, val);
#line 345
  return;
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct drbd_tl_epoch **pn ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head carry_reads ;
  struct drbd_request *req ;
  int rv ;
  int n_writes ;
  int n_reads ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 361
  b = mdev->oldest_tle;
#line 362
  pn = & mdev->oldest_tle;
#line 363
  goto ldv_45244;
  ldv_45243: 
#line 364
  n_writes = 0;
#line 365
  n_reads = 0;
#line 366
  INIT_LIST_HEAD(& carry_reads);
#line 367
  le = b->requests.next;
#line 367
  tle = le->next;
#line 367
  goto ldv_45236;
  ldv_45235: 
#line 368
  __mptr = (struct list_head  const  *)le;
#line 368
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 369
  rv = _req_mod(req, what);
#line 371
  n_writes = (rv & 1) + n_writes;
#line 372
  n_reads = ((rv & 2) >> 1) + n_reads;
#line 367
  le = tle;
#line 367
  tle = le->next;
  ldv_45236: ;
#line 367
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 368
    goto ldv_45235;
  } else {

  }
#line 374
  tmp = b->next;
#line 376
  if (n_writes != 0) {
#line 377
    if ((unsigned int )what == 21U) {
#line 378
      b->n_writes = n_writes;
#line 379
      if ((unsigned long )b->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 380
        b->w.cb = & w_send_barrier;
#line 381
        inc_ap_pending(mdev);
#line 382
        set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 385
      drbd_queue_work(& mdev->data.work, & b->w);
    } else {

    }
#line 387
    pn = & b->next;
  } else {
#line 389
    if (n_reads != 0) {
#line 390
      list_add(& carry_reads, & b->requests);
    } else {

    }
#line 393
    list_del(& b->requests);
#line 398
    if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                             struct drbd_work * ,
                                                             int  ))0)) {
#line 399
      tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 399
      if (tmp___0 != 0) {
#line 399
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 399
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 399
      if (tmp___2 < 0) {
#line 399
        tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 399
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "_tl_restart", 399, tmp___1);
      } else {

      }
    } else {

    }
#line 401
    if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 403
      if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 403
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
                403);
      } else {

      }
#line 404
      INIT_LIST_HEAD(& b->requests);
#line 405
      list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
#line 406
      INIT_LIST_HEAD(& b->w.list);
#line 407
      b->w.cb = 0;
#line 408
      b->br_number = random32();
#line 409
      b->n_writes = 0;
#line 411
      *pn = b;
#line 412
      goto ldv_45242;
    } else {

    }
#line 414
    *pn = tmp;
#line 415
    kfree((void const   *)b);
  }
#line 417
  b = tmp;
#line 418
  list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
  ldv_45244: ;
#line 363
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 364
    goto ldv_45243;
  } else {

  }
  ldv_45242: ;
#line 368
  return;
}
}
#line 431 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int tmp ;
  struct list_head  const  *__mptr ;

  {
#line 436
  spin_lock_irq(& mdev->req_lock);
#line 438
  _tl_restart(mdev, connection_lost_while_pending);
#line 441
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 441
  if (tmp == 0) {
#line 441
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            441);
  } else {

  }
#line 444
  le = mdev->out_of_sequence_requests.next;
#line 444
  tle = le->next;
#line 444
  goto ldv_45254;
  ldv_45253: 
#line 445
  __mptr = (struct list_head  const  *)le;
#line 445
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 448
  _req_mod(r, connection_lost_while_pending);
#line 444
  le = tle;
#line 444
  tle = le->next;
  ldv_45254: ;
#line 444
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 445
    goto ldv_45253;
  } else {

  }
#line 452
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 454
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 456
  spin_unlock_irq(& mdev->req_lock);
#line 457
  return;
}
}
#line 459 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 


  {
#line 461
  spin_lock_irq(& mdev->req_lock);
#line 462
  _tl_restart(mdev, what);
#line 463
  spin_unlock_irq(& mdev->req_lock);
#line 464
  return;
}
}
#line 472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 475
  return (((((int )os.ldv_35401.conn > 9 && (int )ns.ldv_35401.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_35401.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 484 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 491
  tmp = spinlock_check(& mdev->req_lock);
#line 491
  flags = _raw_spin_lock_irqsave(tmp);
#line 492
  os = mdev->state;
#line 493
  ns.i = (os.i & ~ mask.i) | val.i;
#line 494
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 495
  ns = mdev->state;
#line 496
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 498
  return (rv);
}
}
#line 507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 510
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 511
  return;
}
}
#line 513
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 514
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) ;
#line 516
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) ;
#line 518
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 521 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_ret_codes _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                              union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  int rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 528
  tmp = test_and_clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 528
  if (tmp != 0) {
#line 529
    return (SS_CW_SUCCESS);
  } else {

  }
#line 531
  tmp___0 = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 531
  if (tmp___0 != 0) {
#line 532
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 534
  rv = 0;
#line 535
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 535
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 536
  os = mdev->state;
#line 537
  ns.i = (os.i & ~ mask.i) | val.i;
#line 538
  ns = sanitize_state(mdev, os, ns, 0);
#line 540
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 540
  if (tmp___2 == 0) {
#line 541
    rv = 4;
  } else {

  }
#line 542
  if (rv == 0) {
#line 543
    rv = is_valid_state(mdev, ns);
#line 544
    if (rv == 1) {
#line 545
      rv = is_valid_state_transition(mdev, ns, os);
#line 546
      if (rv == 1) {
#line 547
        rv = 0;
      } else {

      }
    } else {

    }
  } else {

  }
#line 550
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 552
  return ((enum drbd_state_ret_codes )rv);
}
}
#line 565 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_req_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                          enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  enum drbd_state_ret_codes tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  enum drbd_state_ret_codes tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;

  {
#line 574
  init_completion(& done);
#line 576
  if (((unsigned int )f & 8U) != 0U) {
#line 577
    mutex_lock_nested(& mdev->state_mutex, 0U);
  } else {

  }
#line 579
  tmp = spinlock_check(& mdev->req_lock);
#line 579
  flags = _raw_spin_lock_irqsave(tmp);
#line 580
  os = mdev->state;
#line 581
  ns.i = (os.i & ~ mask.i) | val.i;
#line 582
  ns = sanitize_state(mdev, os, ns, 0);
#line 584
  tmp___5 = cl_wide_st_chg(mdev, os, ns);
#line 584
  if (tmp___5 != 0) {
#line 585
    rv = is_valid_state(mdev, ns);
#line 586
    if (rv == 1) {
#line 587
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 588
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 590
    if (rv <= 0) {
#line 591
      if (((unsigned int )f & 2U) != 0U) {
#line 592
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 593
      goto abort;
    } else {

    }
#line 596
    drbd_state_lock___0(mdev);
#line 597
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 597
    if (tmp___0 == 0) {
#line 598
      drbd_state_unlock(mdev);
#line 599
      rv = -10;
#line 600
      if (((unsigned int )f & 2U) != 0U) {
#line 601
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 602
      goto abort;
    } else {

    }
#line 605
    tmp___1 = _req_st_cond(mdev, mask, val);
#line 605
    rv = (int )tmp___1;
#line 605
    if (rv != 0) {
#line 605
      goto ldv_45326;
    } else {

    }
#line 605
    tmp___2 = get_current();
#line 605
    __wait.flags = 0U;
#line 605
    __wait.private = (void *)tmp___2;
#line 605
    __wait.func = & autoremove_wake_function;
#line 605
    __wait.task_list.next = & __wait.task_list;
#line 605
    __wait.task_list.prev = & __wait.task_list;
    ldv_45329: 
#line 605
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 605
    tmp___3 = _req_st_cond(mdev, mask, val);
#line 605
    rv = (int )tmp___3;
#line 605
    if (rv != 0) {
#line 605
      goto ldv_45328;
    } else {

    }
#line 605
    schedule();
#line 605
    goto ldv_45329;
    ldv_45328: 
#line 605
    finish_wait(& mdev->state_wait, & __wait);
    ldv_45326: ;
#line 608
    if (rv <= 0) {
#line 609
      drbd_state_unlock(mdev);
#line 610
      if (((unsigned int )f & 2U) != 0U) {
#line 611
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 612
      goto abort;
    } else {

    }
#line 614
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 614
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 615
    os = mdev->state;
#line 616
    ns.i = (os.i & ~ mask.i) | val.i;
#line 617
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 618
    drbd_state_unlock(mdev);
  } else {
#line 620
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 623
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 625
  if (((unsigned int )f & 4U) != 0U && rv == 1) {
#line 626
    tmp___6 = get_current();
#line 626
    if ((unsigned long )tmp___6 == (unsigned long )mdev->worker.task) {
#line 626
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              626);
    } else {

    }
#line 627
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 631
  if (((unsigned int )f & 8U) != 0U) {
#line 632
    mutex_unlock(& mdev->state_mutex);
  } else {

  }
#line 634
  return (rv);
}
}
#line 647 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) 
{ 
  int rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 652
  rv = drbd_req_state(mdev, mask, val, f);
#line 652
  if (rv != -18) {
#line 652
    goto ldv_45340;
  } else {

  }
#line 652
  tmp = get_current();
#line 652
  __wait.flags = 0U;
#line 652
  __wait.private = (void *)tmp;
#line 652
  __wait.func = & autoremove_wake_function;
#line 652
  __wait.task_list.next = & __wait.task_list;
#line 652
  __wait.task_list.prev = & __wait.task_list;
  ldv_45343: 
#line 652
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 652
  rv = drbd_req_state(mdev, mask, val, f);
#line 652
  if (rv != -18) {
#line 652
    goto ldv_45342;
  } else {

  }
#line 652
  schedule();
#line 652
  goto ldv_45343;
  ldv_45342: 
#line 652
  finish_wait(& mdev->state_wait, & __wait);
  ldv_45340: ;
#line 655
  return (rv);
}
}
#line 658 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 660
  tmp = is_susp(ns);
#line 660
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35401.pdsk);
#line 660
  tmp___1 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35401.disk);
#line 660
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_35401.peer);
#line 660
  tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_35401.role);
#line 660
  tmp___4 = drbd_conn_str((enum drbd_conns )ns.ldv_35401.conn);
#line 660
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___4, tmp___3, tmp___2, tmp___1, tmp___0, tmp != 0 ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 671
  return;
}
}
#line 674 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) 
{ 
  char const   *tmp ;

  {
#line 677
  if (err == -18) {
#line 678
    return;
  } else {

  }
#line 679
  tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )err);
#line 679
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 680
  print_st(mdev, (char *)" state", os);
#line 681
  print_st(mdev, (char *)"wanted", ns);
#line 682
  return;
}
}
#line 705 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 710
  rv = 1;
#line 712
  fp = FP_DONT_CARE;
#line 713
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 713
  if (tmp != 0) {
#line 714
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 715
    put_ldev(mdev);
  } else {

  }
#line 718
  tmp___0 = get_net_conf(mdev);
#line 718
  if (tmp___0 != 0) {
#line 719
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 721
      rv = -1;
    } else {

    }
#line 722
    put_net_conf(mdev);
  } else {

  }
#line 725
  if (rv <= 0) {

  } else
#line 727
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 728
    rv = -12;
  } else
#line 730
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35401.conn <= 9) && (int )ns.ldv_35401.disk <= 7) {
#line 731
    rv = -2;
  } else
#line 733
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_35401.conn <= 9) && (int )ns.ldv_35401.pdsk > 5) {
#line 735
    rv = -7;
  } else
#line 737
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35401.disk <= 4) && (int )ns.ldv_35401.pdsk <= 4) {
#line 738
    rv = -2;
  } else
#line 740
  if ((int )ns.ldv_35401.conn > 10 && (int )ns.ldv_35401.disk <= 3) {
#line 741
    rv = -4;
  } else
#line 743
  if ((int )ns.ldv_35401.conn > 10 && (int )ns.ldv_35401.pdsk <= 3) {
#line 744
    rv = -5;
  } else
#line 746
  if (((int )ns.ldv_35401.conn > 10 && (int )ns.ldv_35401.disk <= 7) && (int )ns.ldv_35401.pdsk <= 7) {
#line 747
    rv = -2;
  } else
#line 749
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 754
    rv = -6;
  } else
#line 756
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 758
    rv = -14;
  } else
#line 760
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 762
    rv = -17;
  } else {

  }
#line 764
  return (rv);
}
}
#line 773 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) 
{ 
  int rv ;

  {
#line 776
  rv = 1;
#line 778
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_35401.conn > 10) {
#line 780
    rv = -8;
  } else {

  }
#line 782
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 783
    rv = -9;
  } else {

  }
#line 785
  if ((int )ns.ldv_35401.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 786
    rv = -11;
  } else {

  }
#line 788
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_35401.conn <= 1) {
#line 789
    rv = -13;
  } else {

  }
#line 791
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_35401.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 792
    rv = -16;
  } else {

  }
#line 794
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 795
    rv = -18;
  } else {

  }
#line 797
  if ((int )ns.ldv_35401.conn == (int )os.ldv_35401.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 798
    rv = -18;
  } else {

  }
#line 800
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_35401.conn <= 9) {
#line 801
    rv = -15;
  } else {

  }
#line 803
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_35401.conn != (int )os.ldv_35401.conn) && (int )os.ldv_35401.conn > 10) {
#line 805
    rv = -8;
  } else {

  }
#line 807
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_35401.conn <= 9) {
#line 809
    rv = -15;
  } else {

  }
#line 811
  return (rv);
}
}
#line 824 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  int tmp___0 ;

  {
#line 829
  fp = FP_DONT_CARE;
#line 830
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 830
  if (tmp != 0) {
#line 831
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 832
    put_ldev(mdev);
  } else {

  }
#line 836
  if (((int )ns.ldv_35401.conn > 2 && (int )ns.ldv_35401.conn <= 7) && (int )os.ldv_35401.conn <= 1) {
#line 838
    ns.ldv_35401.conn = os.ldv_35401.conn;
  } else {

  }
#line 842
  if (((((int )os.ldv_35401.conn > 2 && (int )os.ldv_35401.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) && (int )ns.ldv_35401.conn <= 7) {
#line 844
    ns.ldv_35401.conn = os.ldv_35401.conn;
  } else {

  }
#line 847
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 848
    ns.ldv_35401.conn = os.ldv_35401.conn;
  } else {

  }
#line 850
  if ((int )ns.ldv_35401.conn <= 9) {
#line 851
    ns.ldv_35401.peer_isp = 0U;
#line 852
    ns.ldv_35401.peer = 0U;
#line 853
    if ((int )ns.ldv_35401.pdsk > 6 || (int )ns.ldv_35401.pdsk <= 3) {
#line 854
      ns.ldv_35401.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 858
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 859
    ns.ldv_35401.aftr_isp = 0U;
  } else {

  }
#line 862
  if (((int )os.ldv_35401.conn > 10 && (int )ns.ldv_35401.conn > 10) && ((int )ns.ldv_35401.disk <= 2 || (int )ns.ldv_35401.pdsk <= 2)) {
#line 864
    if ((unsigned long )warn_sync_abort != (unsigned long )((char const   **)0)) {
#line 865
      *warn_sync_abort = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? "Online-verify" : "Resync";
    } else {

    }
#line 868
    ns.ldv_35401.conn = 10U;
  } else {

  }
#line 871
  if ((int )ns.ldv_35401.conn > 9 && (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) || ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 224U))) {
#line 874
    switch ((int )ns.ldv_35401.conn) {
    case 14: ;
    case 21: 
#line 877
    ns.ldv_35401.disk = 5U;
#line 878
    goto ldv_45376;
    case 10: ;
    case 13: ;
    case 16: ;
    case 20: 
#line 883
    ns.ldv_35401.disk = 8U;
#line 884
    goto ldv_45376;
    case 17: 
#line 886
    ns.ldv_35401.disk = 4U;
#line 887
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk state Inconsistent!\n");
#line 888
    goto ldv_45376;
    }
    ldv_45376: ;
#line 890
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 10U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 16U) {
#line 891
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk from Outdated to UpToDate\n");
    } else {

    }
  } else {

  }
#line 894
  if ((int )ns.ldv_35401.conn > 9 && (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 896
    switch ((int )ns.ldv_35401.conn) {
    case 10: ;
    case 14: ;
    case 21: ;
    case 17: 
#line 901
    ns.ldv_35401.pdsk = 8U;
#line 902
    goto ldv_45386;
    case 13: ;
    case 20: 
#line 908
    ns.ldv_35401.pdsk = (int )os.ldv_35401.pdsk > 0 && (int )os.ldv_35401.pdsk <= 4 ? os.ldv_35401.pdsk : 5U;
#line 911
    goto ldv_45386;
    case 16: 
#line 913
    ns.ldv_35401.pdsk = 4U;
#line 914
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk Inconsistent!\n");
#line 915
    goto ldv_45386;
    }
    ldv_45386: ;
#line 917
    if (*((unsigned int *)(& os) + 0UL) == 40960U && *((unsigned int *)(& ns) + 0UL) == 65536U) {
#line 918
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk from Outdated to UpToDate\n");
    } else {

    }
  } else {

  }
#line 922
  if ((int )ns.ldv_35401.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 922
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 922
    if (tmp___0 != 0) {
#line 924
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 925
        ns.ldv_35401.disk = mdev->new_state_tmp.ldv_35401.disk;
#line 926
        ns.ldv_35401.pdsk = mdev->new_state_tmp.ldv_35401.pdsk;
      } else {
#line 928
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection lost while negotiating, no data!\n");
#line 929
        ns.ldv_35401.disk = 0U;
#line 930
        ns.ldv_35401.pdsk = 6U;
      }
#line 932
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 935
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35401.conn <= 9) && (int )ns.ldv_35401.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35401.conn > 9) || (int )os.ldv_35401.pdsk <= 5)) {
#line 938
    ns.ldv_35401.susp_fen = 1U;
  } else {

  }
#line 940
  if ((mdev->sync_conf.on_no_data == 1 && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35401.disk <= 7) && (int )ns.ldv_35401.pdsk <= 7)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35401.disk > 7) || (int )os.ldv_35401.pdsk > 7)) {
#line 943
    ns.ldv_35401.susp_nod = 1U;
  } else {

  }
#line 945
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 946
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 947
      ns.ldv_35401.conn = 20U;
    } else {

    }
#line 948
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 949
      ns.ldv_35401.conn = 21U;
    } else {

    }
  } else {
#line 951
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 952
      ns.ldv_35401.conn = 16U;
    } else {

    }
#line 953
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 954
      ns.ldv_35401.conn = 17U;
    } else {

    }
  }
#line 957
  return (ns);
}
}
#line 961 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 963
  if ((unsigned int )cs == 19U) {
#line 969
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 971
    bit = mdev->ov_start_sector >> 3;
#line 972
    if (mdev->rs_total <= bit) {
#line 973
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
    } else {

    }
#line 975
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 977
  return;
}
}
#line 979 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_resume_al(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 981
  tmp = test_and_clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 981
  if (tmp != 0) {
#line 982
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resumed AL updates\n");
  } else {

  }
#line 983
  return;
}
}
#line 994 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) 
{ 
  union drbd_state os ;
  int rv ;
  char const   *warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  int tmp ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned long now ;
  int i ;
  u32 mdf ;
  int tmp___24 ;
  int tmp___25 ;
  void *tmp___26 ;

  {
#line 999
  rv = 1;
#line 1000
  warn_sync_abort = 0;
#line 1003
  os = mdev->state;
#line 1005
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 1007
  if (ns.i == os.i) {
#line 1008
    return (2);
  } else {

  }
#line 1010
  if (((unsigned int )flags & 1U) == 0U) {
#line 1014
    rv = is_valid_state(mdev, ns);
#line 1015
    if (rv <= 0) {
#line 1019
      tmp = is_valid_state(mdev, os);
#line 1019
      if (tmp == rv) {
#line 1020
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1022
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1025
  if (rv <= 0) {
#line 1026
    if (((unsigned int )flags & 2U) != 0U) {
#line 1027
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1028
    return (rv);
  } else {

  }
#line 1031
  if ((unsigned long )warn_sync_abort != (unsigned long )((char const   *)0)) {
#line 1032
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s aborted.\n",
             warn_sync_abort);
  } else {

  }
#line 1036
  pbp = (char *)(& pb);
#line 1037
  *pbp = 0;
#line 1038
  if ((int )ns.ldv_35401.role != (int )os.ldv_35401.role) {
#line 1038
    tmp___0 = drbd_role_str((enum drbd_role )ns.ldv_35401.role);
#line 1038
    tmp___1 = drbd_role_str((enum drbd_role )os.ldv_35401.role);
#line 1038
    tmp___2 = sprintf(pbp, "role( %s -> %s ) ", tmp___1, tmp___0);
#line 1038
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 1039
  if ((int )ns.ldv_35401.peer != (int )os.ldv_35401.peer) {
#line 1039
    tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_35401.peer);
#line 1039
    tmp___4 = drbd_role_str((enum drbd_role )os.ldv_35401.peer);
#line 1039
    tmp___5 = sprintf(pbp, "peer( %s -> %s ) ", tmp___4, tmp___3);
#line 1039
    pbp = pbp + (unsigned long )tmp___5;
  } else {

  }
#line 1040
  if ((int )ns.ldv_35401.conn != (int )os.ldv_35401.conn) {
#line 1040
    tmp___6 = drbd_conn_str((enum drbd_conns )ns.ldv_35401.conn);
#line 1040
    tmp___7 = drbd_conn_str((enum drbd_conns )os.ldv_35401.conn);
#line 1040
    tmp___8 = sprintf(pbp, "conn( %s -> %s ) ", tmp___7, tmp___6);
#line 1040
    pbp = pbp + (unsigned long )tmp___8;
  } else {

  }
#line 1041
  if ((int )ns.ldv_35401.disk != (int )os.ldv_35401.disk) {
#line 1041
    tmp___9 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35401.disk);
#line 1041
    tmp___10 = drbd_disk_str((enum drbd_disk_state )os.ldv_35401.disk);
#line 1041
    tmp___11 = sprintf(pbp, "disk( %s -> %s ) ", tmp___10, tmp___9);
#line 1041
    pbp = pbp + (unsigned long )tmp___11;
  } else {

  }
#line 1042
  if ((int )ns.ldv_35401.pdsk != (int )os.ldv_35401.pdsk) {
#line 1042
    tmp___12 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35401.pdsk);
#line 1042
    tmp___13 = drbd_disk_str((enum drbd_disk_state )os.ldv_35401.pdsk);
#line 1042
    tmp___14 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___13, tmp___12);
#line 1042
    pbp = pbp + (unsigned long )tmp___14;
  } else {

  }
#line 1043
  tmp___18 = is_susp(ns);
#line 1043
  tmp___19 = is_susp(os);
#line 1043
  if (tmp___18 != tmp___19) {
#line 1044
    tmp___15 = is_susp(ns);
#line 1044
    tmp___16 = is_susp(os);
#line 1044
    tmp___17 = sprintf(pbp, "susp( %s -> %s ) ", tmp___16 != 0 ? (char *)"1" : (char *)"0",
                       tmp___15 != 0 ? (char *)"1" : (char *)"0");
#line 1044
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1047
  if ((int )ns.ldv_35401.aftr_isp != (int )os.ldv_35401.aftr_isp) {
#line 1047
    tmp___20 = sprintf(pbp, "aftr_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1047
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1048
  if ((int )ns.ldv_35401.peer_isp != (int )os.ldv_35401.peer_isp) {
#line 1048
    tmp___21 = sprintf(pbp, "peer_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1048
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1049
  if ((int )ns.ldv_35401.user_isp != (int )os.ldv_35401.user_isp) {
#line 1049
    tmp___22 = sprintf(pbp, "user_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1049
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1050
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1061
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1061
    tmp___23 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1061
    if (tmp___23 == 0) {
#line 1065
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1067
  mdev->state.i = ns.i;
#line 1068
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1069
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1072
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_35401.conn <= 9) {
#line 1074
    mdev->ov_start_sector = (mdev->rs_total - mdev->ov_left) << 3;
#line 1076
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
              (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1080
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1082
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1083
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time[mdev->rs_last_mark]);
#line 1085
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1086
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1089
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1091
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1092
    mdev->rs_mark_time[mdev->rs_last_mark] = jiffies;
  } else {

  }
#line 1095
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1097
    now = jiffies;
#line 1100
    mdev->ov_position = 0UL;
#line 1101
    mdev->rs_total = drbd_bm_bits(mdev);
#line 1102
    if (mdev->agreed_pro_version > 89) {
#line 1103
      set_ov_position(mdev, (enum drbd_conns )ns.ldv_35401.conn);
    } else {
#line 1105
      mdev->ov_start_sector = 0UL;
    }
#line 1106
    mdev->ov_left = mdev->rs_total - (mdev->ov_position >> 3);
#line 1108
    mdev->rs_start = now;
#line 1109
    mdev->rs_last_events = 0;
#line 1110
    mdev->rs_last_sect_ev = 0;
#line 1111
    mdev->ov_last_oos_size = 0UL;
#line 1112
    mdev->ov_last_oos_start = 0UL;
#line 1114
    i = 0;
#line 1114
    goto ldv_45413;
    ldv_45412: 
#line 1115
    mdev->rs_mark_left[i] = mdev->rs_total;
#line 1116
    mdev->rs_mark_time[i] = now;
#line 1114
    i = i + 1;
    ldv_45413: ;
#line 1114
    if (i <= 7) {
#line 1115
      goto ldv_45412;
    } else {

    }

#line 1119
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1120
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1122
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1126
  tmp___25 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1126
  if (tmp___25 != 0) {
#line 1127
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1131
    tmp___24 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 1131
    if (tmp___24 != 0) {
#line 1132
      mdf = mdf | 64U;
    } else {

    }
#line 1133
    if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U || ((int )mdev->state.ldv_35401.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 4U)) {
#line 1135
      mdf = mdf | 2U;
    } else {

    }
#line 1136
    if ((int )mdev->state.ldv_35401.conn > 9) {
#line 1137
      mdf = mdf | 4U;
    } else {

    }
#line 1138
    if ((int )mdev->state.ldv_35401.disk > 4) {
#line 1139
      mdf = mdf | 1U;
    } else {

    }
#line 1140
    if ((int )mdev->state.ldv_35401.disk > 5) {
#line 1141
      mdf = mdf | 16U;
    } else {

    }
#line 1142
    if ((int )mdev->state.ldv_35401.pdsk <= 5 && (int )mdev->state.ldv_35401.pdsk > 3) {
#line 1143
      mdf = mdf | 32U;
    } else {

    }
#line 1144
    if ((mdev->ldev)->md.flags != mdf) {
#line 1145
      (mdev->ldev)->md.flags = mdf;
#line 1146
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1148
    if ((int )os.ldv_35401.disk <= 6 && (int )ns.ldv_35401.disk > 6) {
#line 1149
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1150
    put_ldev(mdev);
  } else {

  }
#line 1154
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1156
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1159
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1160
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1163
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1164
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1167
  if (((int )os.ldv_35401.conn > 7 && (int )ns.ldv_35401.conn <= 7) && (int )ns.ldv_35401.conn > 2) {
#line 1169
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1172
  if ((int )os.ldv_35401.conn <= 9 && (int )ns.ldv_35401.conn > 9) {
#line 1173
    drbd_resume_al(mdev);
  } else {

  }
#line 1175
  tmp___26 = kmalloc___4(48UL, 32U);
#line 1175
  ascw = (struct after_state_chg_work *)tmp___26;
#line 1176
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1177
    ascw->os = os;
#line 1178
    ascw->ns = ns;
#line 1179
    ascw->flags = flags;
#line 1180
    ascw->w.cb = & w_after_state_ch;
#line 1181
    ascw->done = done;
#line 1182
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1184
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1187
  return (rv);
}
}
#line 1190 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1193
  __mptr = (struct drbd_work  const  *)w;
#line 1193
  ascw = (struct after_state_chg_work *)__mptr;
#line 1194
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1195
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1196
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1196
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              1196);
    } else {

    }
#line 1197
    complete(ascw->done);
  } else {

  }
#line 1199
  kfree((void const   *)ascw);
#line 1201
  return (1);
}
}
#line 1204 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1206
  if (rv != 0) {
#line 1207
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1208
    val.i = 0U;
#line 1208
    val.ldv_35401.conn = 10U;
#line 1208
    mask.i = 0U;
#line 1208
    mask.ldv_35401.conn = 31U;
#line 1208
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1209
    return;
  } else {

  }
#line 1212
  switch ((int )mdev->state.ldv_35401.conn) {
  case 12: 
#line 1214
  val___0.i = 0U;
#line 1214
  val___0.ldv_35401.conn = 15U;
#line 1214
  mask___0.i = 0U;
#line 1214
  mask___0.ldv_35401.conn = 31U;
#line 1214
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1215
  goto ldv_45437;
  case 11: 
#line 1217
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1218
  goto ldv_45437;
  }
  ldv_45437: ;
#line 1221
  return;
}
}
#line 1229 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_req_event what ;
  union drbd_state nsm ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_io_error_p eh ;
  int tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;

  {
#line 1233
  what = nothing;
#line 1234
  nsm.i = 4294967295U;
#line 1236
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1237
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 1238
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1239
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1242
  fp = FP_DONT_CARE;
#line 1243
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1243
  if (tmp != 0) {
#line 1244
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1245
    put_ldev(mdev);
  } else {

  }
#line 1249
  drbd_bcast_state(mdev, ns);
#line 1251
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35401.disk > 7) || (int )os.ldv_35401.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35401.disk <= 7) && (int )ns.ldv_35401.pdsk <= 7)) {
#line 1253
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1258
  nsm.i = 4294967295U;
#line 1259
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1260
    if ((int )os.ldv_35401.conn <= 9 && (int )ns.ldv_35401.conn > 9) {
#line 1261
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1262
        what = resend;
#line 1262
        nsm.ldv_35401.susp_nod = 0U;
      } else {
#line 1264
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unexpected Resynd going on!\n");
      }
    } else {

    }
#line 1267
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_35401.disk > 1) {
#line 1268
      what = restart_frozen_disk_io;
#line 1268
      nsm.ldv_35401.susp_nod = 0U;
    } else {

    }
  } else {

  }
#line 1272
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1274
    if ((int )os.ldv_35401.pdsk > 5 && (int )ns.ldv_35401.pdsk <= 5) {
#line 1275
      tl_clear(mdev);
#line 1276
      tmp___0 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 1276
      if (tmp___0 != 0) {
#line 1277
        drbd_uuid_new_current(mdev);
#line 1278
        clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1279
        drbd_md_sync(mdev);
      } else {

      }
#line 1281
      spin_lock_irq(& mdev->req_lock);
#line 1282
      __ns.i = mdev->state.i;
#line 1282
      __ns.ldv_35401.susp_fen = 0U;
#line 1282
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1283
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
#line 1286
    if ((int )os.ldv_35401.conn <= 9 && (int )ns.ldv_35401.conn > 9) {
#line 1287
      clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1288
      what = resend;
#line 1289
      nsm.ldv_35401.susp_fen = 0U;
    } else {

    }
  } else {

  }
#line 1293
  if ((unsigned int )what != 24U) {
#line 1294
    spin_lock_irq(& mdev->req_lock);
#line 1295
    _tl_restart(mdev, what);
#line 1296
    nsm.i = nsm.i & mdev->state.i;
#line 1297
    _drbd_set_state(mdev, nsm, CS_VERBOSE, 0);
#line 1298
    spin_unlock_irq(& mdev->req_lock);
  } else {

  }
#line 1302
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_35401.pdsk > 0) {
#line 1303
    drbd_send_uuids(mdev);
#line 1304
    drbd_send_state(mdev);
  } else {

  }
#line 1306
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) {
#line 1307
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)");
  } else {

  }
#line 1310
  if ((((int )os.ldv_35401.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_35401.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1316
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1316
    if (tmp___2 != 0) {
#line 1317
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_35401.disk > 7) {
#line 1319
        tmp___1 = is_susp(mdev->state);
#line 1319
        if (tmp___1 != 0) {
#line 1320
          set_bit(27U, (unsigned long volatile   *)(& mdev->flags));
        } else {
#line 1322
          drbd_uuid_new_current(mdev);
#line 1323
          drbd_send_uuids(mdev);
        }
      } else {

      }
#line 1326
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1330
  if ((int )ns.ldv_35401.pdsk <= 3) {
#line 1330
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1330
    if (tmp___3 != 0) {
#line 1331
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1332
        drbd_uuid_new_current(mdev);
#line 1333
        drbd_send_uuids(mdev);
      } else {

      }
#line 1337
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1338
        drbd_al_to_on_disk_bm(mdev);
      } else {

      }
#line 1339
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1343
  if (((int )ns.ldv_35401.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1345
    drbd_send_sizes(mdev, 0, 0);
#line 1346
    drbd_send_uuids(mdev);
#line 1347
    drbd_send_state(mdev);
  } else {

  }
#line 1351
  if ((int )ns.ldv_35401.conn > 9 && ((int )os.ldv_35401.aftr_isp != (int )ns.ldv_35401.aftr_isp || (int )os.ldv_35401.user_isp != (int )ns.ldv_35401.user_isp)) {
#line 1354
    drbd_send_state(mdev);
  } else {

  }
#line 1357
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1359
    suspend_other_sg(mdev);
  } else {

  }
#line 1363
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_35401.conn > 9) {
#line 1364
    drbd_send_state(mdev);
  } else {

  }
#line 1367
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1369
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync");
  } else {

  }
#line 1372
  if ((((int )os.ldv_35401.conn <= 9 && (int )ns.ldv_35401.conn <= 9) && (int )os.ldv_35401.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1374
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate");
  } else {

  }
#line 1377
  if ((int )os.ldv_35401.disk > 2 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1378
    eh = EP_PASS_ON;
#line 1380
    tmp___4 = drbd_send_state(mdev);
#line 1380
    if (tmp___4 != 0) {
#line 1381
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that my disk is broken.\n");
    } else {
#line 1383
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state for drbd_io_error() failed\n");
    }
#line 1385
    drbd_rs_cancel_all(mdev);
#line 1387
    tmp___5 = _get_ldev_if_state(mdev, D_FAILED);
#line 1387
    if (tmp___5 != 0) {
#line 1388
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1389
      put_ldev(mdev);
    } else {

    }
#line 1391
    if ((unsigned int )eh == 1U) {
#line 1392
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1398
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1399
    mdev->rs_total = 0UL;
#line 1400
    mdev->rs_failed = 0UL;
#line 1401
    atomic_set(& mdev->rs_pending_cnt, 0);
  } else {

  }
#line 1404
  if ((int )os.ldv_35401.disk > 0 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1407
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 0U) {
#line 1408
      tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35401.disk);
#line 1408
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s while going diskless\n",
              tmp___6);
    } else {

    }
#line 1416
    tmp___7 = drbd_send_state(mdev);
#line 1416
    if (tmp___7 != 0) {
#line 1417
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that I detached my disk.\n");
    } else {
#line 1419
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state for detach failed\n");
    }
#line 1421
    lc_destroy(mdev->resync);
#line 1422
    mdev->resync = 0;
#line 1423
    lc_destroy(mdev->act_log);
#line 1424
    mdev->act_log = 0;
#line 1425
    drbd_free_bc(mdev->ldev);
#line 1425
    mdev->ldev = 0;
#line 1429
    if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 1430
      __free_pages(mdev->md_io_tmpp, 0U);
#line 1431
      mdev->md_io_tmpp = 0;
    } else {

    }
  } else {

  }
#line 1436
  if ((int )ns.ldv_35401.disk > 3 && (int )ns.ldv_35401.pdsk > 3) {
#line 1436
    tmp___8 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1436
    if (tmp___8 != 0) {
#line 1438
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1439
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1443
  if ((((int )os.ldv_35401.conn > 10 && (int )ns.ldv_35401.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1446
    resume_next_sg(mdev);
  } else {

  }
#line 1450
  if (((int )os.ldv_35401.disk <= 7 && (int )os.ldv_35401.conn > 15) && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1451
    drbd_send_state(mdev);
  } else {

  }
#line 1454
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1454
    tmp___9 = is_susp(ns);
#line 1454
    if (tmp___9 == 0) {
#line 1454
      if ((unsigned long )mdev->tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1455
        drbd_free_tl_hash(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1458
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1459
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1463
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1466
    if ((int )os.ldv_35401.aftr_isp != (int )ns.ldv_35401.aftr_isp) {
#line 1467
      resume_next_sg(mdev);
    } else {

    }
#line 1469
    tmp___10 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1469
    if (tmp___10 != 0) {
#line 1470
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1473
  drbd_md_sync(mdev);
#line 1474
  return;
}
}
#line 1477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1479
  thi = (struct drbd_thread *)arg;
#line 1480
  mdev = thi->mdev;
  restart: 
#line 1485
  retval = (*(thi->function))(thi);
#line 1487
  tmp = spinlock_check(& thi->t_lock);
#line 1487
  flags = _raw_spin_lock_irqsave(tmp);
#line 1499
  if ((unsigned int )thi->t_state == 3U) {
#line 1500
    tmp___0 = get_current();
#line 1500
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1501
    thi->t_state = Running;
#line 1502
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1503
    goto restart;
  } else {

  }
#line 1506
  thi->task = 0;
#line 1507
  thi->t_state = None;
#line 1508
  __asm__  volatile   ("mfence": : : "memory");
#line 1509
  complete(& thi->stop);
#line 1510
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1512
  tmp___1 = get_current();
#line 1512
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1515
  ldv_module_put_1(& __this_module);
#line 1516
  return (retval);
}
}
#line 1519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1522
  spinlock_check(& thi->t_lock);
#line 1522
  __raw_spin_lock_init(& thi->t_lock.ldv_5780.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1523
  thi->task = 0;
#line 1524
  thi->t_state = None;
#line 1525
  thi->function = func;
#line 1526
  thi->mdev = mdev;
#line 1527
  return;
}
}
#line 1529 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  unsigned int tmp___4 ;
  long tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 1531
  mdev = thi->mdev;
#line 1535
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1542
  tmp = spinlock_check(& thi->t_lock);
#line 1542
  flags = _raw_spin_lock_irqsave(tmp);
#line 1544
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1546
  tmp___0 = get_current();
#line 1546
  tmp___1 = get_current();
#line 1546
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1550
  tmp___2 = ldv_try_module_get_2(& __this_module);
#line 1550
  if (tmp___2 == 0) {
#line 1551
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1552
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1553
    return (0);
  } else {

  }
#line 1556
  init_completion(& thi->stop);
#line 1557
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1557
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1557);
  } else {

  }
#line 1558
  thi->reset_cpu_mask = 1;
#line 1559
  thi->t_state = Running;
#line 1560
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1561
  tmp___3 = get_current();
#line 1561
  flush_signals(tmp___3);
#line 1563
  tmp___4 = mdev_to_minor(mdev);
#line 1563
  nt = kthread_create(& drbd_thread_setup, (void *)thi, "drbd%d_%s", tmp___4, me);
#line 1566
  tmp___5 = IS_ERR((void const   *)nt);
#line 1566
  if (tmp___5 != 0L) {
#line 1567
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1569
    ldv_module_put_3(& __this_module);
#line 1570
    return (0);
  } else {

  }
#line 1572
  tmp___6 = spinlock_check(& thi->t_lock);
#line 1572
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1573
  thi->task = nt;
#line 1574
  thi->t_state = Running;
#line 1575
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1576
  wake_up_process(nt);
#line 1577
  goto ldv_45484;
  case 2U: 
#line 1579
  thi->t_state = Restarting;
#line 1580
  tmp___7 = get_current();
#line 1580
  tmp___8 = get_current();
#line 1580
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___8->comm), tmp___7->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1586
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1587
  goto ldv_45484;
  }
  ldv_45484: ;
#line 1590
  return (1);
}
}
#line 1594 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1598
  ns = restart != 0 ? Restarting : Exiting;
#line 1601
  tmp = spinlock_check(& thi->t_lock);
#line 1601
  flags = _raw_spin_lock_irqsave(tmp);
#line 1603
  if ((unsigned int )thi->t_state == 0U) {
#line 1604
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1605
    if (restart != 0) {
#line 1606
      drbd_thread_start(thi);
    } else {

    }
#line 1607
    return;
  } else {

  }
#line 1610
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1611
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1612
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1613
      return;
    } else {

    }
#line 1616
    thi->t_state = ns;
#line 1617
    __asm__  volatile   ("mfence": : : "memory");
#line 1618
    init_completion(& thi->stop);
#line 1619
    tmp___0 = get_current();
#line 1619
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1620
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1624
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1626
  if (wait != 0) {
#line 1627
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1628
  return;
}
}
#line 1638 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1643
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1643
  if (tmp != 0U) {
#line 1644
    return;
  } else {

  }
#line 1646
  tmp___0 = mdev_to_minor(mdev);
#line 1646
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1646
  ord = (int )(tmp___0 % tmp___1);
#line 1647
  cpu = -1;
#line 1647
  goto ldv_45505;
  ldv_45504: 
#line 1648
  tmp___2 = ord;
#line 1648
  ord = ord - 1;
#line 1648
  if (tmp___2 == 0) {
#line 1649
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1650
    return;
  } else {

  }
  ldv_45505: 
#line 1647
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1647
  cpu = (int )tmp___3;
#line 1647
  if (cpu < nr_cpu_ids) {
#line 1648
    goto ldv_45504;
  } else {

  }
#line 1654
  cpumask_setall(mdev->cpu_mask);
#line 1655
  return;
}
}
#line 1664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 1666
  tmp = get_current();
#line 1666
  p = tmp;
#line 1667
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1672
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1672
  if (_b != 0) {
#line 1672
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1672);
  } else {

  }
#line 1672
  if (_b != 0) {
#line 1673
    return;
  } else {

  }
#line 1674
  if (thi->reset_cpu_mask == 0) {
#line 1675
    return;
  } else {

  }
#line 1676
  thi->reset_cpu_mask = 0;
#line 1677
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1678
  return;
}
}
#line 1682 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;

  {
#line 1688
  _b = (unsigned long )h == (unsigned long )((struct p_header80 *)0);
#line 1688
  if (_b != 0) {
#line 1688
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1688);
  } else {

  }
#line 1688
  if (_b != 0) {
#line 1688
    return (0);
  } else {

  }
#line 1689
  _b___0 = size == 0UL;
#line 1689
  if (_b___0 != 0) {
#line 1689
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1689);
  } else {

  }
#line 1689
  if (_b___0 != 0) {
#line 1689
    return (0);
  } else {

  }
#line 1691
  h->magic = 1728214147U;
#line 1692
  tmp = __fswab16((int )((__u16 )cmd));
#line 1692
  h->command = tmp;
#line 1693
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1693
  h->length = tmp___0;
#line 1695
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1697
  ok = (size_t )sent == size;
#line 1698
  if (ok == 0) {
#line 1699
    tmp___1 = cmdname(cmd);
#line 1699
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
            tmp___1, (int )size, sent);
  } else {

  }
#line 1701
  return (ok);
}
}
#line 1707 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1710
  ok = 0;
#line 1713
  if (use_data_socket != 0) {
#line 1714
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1715
    sock = mdev->data.socket;
  } else {
#line 1717
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 1718
    sock = mdev->meta.socket;
  }
#line 1723
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1723
  if (tmp != 0L) {
#line 1724
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1726
  if (use_data_socket != 0) {
#line 1727
    mutex_unlock(& mdev->data.mutex);
  } else {
#line 1729
    mutex_unlock(& mdev->meta.mutex);
  }
#line 1730
  return (ok);
}
}
#line 1733 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header80 h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1739
  h.magic = 1728214147U;
#line 1740
  tmp = __fswab16((int )((__u16 )cmd));
#line 1740
  h.command = tmp;
#line 1741
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1741
  h.length = tmp___0;
#line 1743
  tmp___1 = drbd_get_data_sock(mdev);
#line 1743
  if (tmp___1 == 0) {
#line 1744
    return (0);
  } else {

  }
#line 1746
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1746
  ok = tmp___2 == 8;
#line 1748
  if (ok != 0) {
#line 1748
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1748
    if ((size_t )tmp___3 == size) {
#line 1748
      tmp___4 = 1;
    } else {
#line 1748
      tmp___4 = 0;
    }
  } else {
#line 1748
    tmp___4 = 0;
  }
#line 1748
  ok = tmp___4;
#line 1751
  drbd_put_data_sock(mdev);
#line 1753
  return (ok);
}
}
#line 1756 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_95 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  long tmp___6 ;

  {
#line 1761
  apv = mdev->agreed_pro_version;
#line 1763
  if (apv > 87) {
#line 1763
    if (apv == 88) {
#line 1763
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1763
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1763
      tmp___0 = apv <= 94 ? 140 : 156;
    }
#line 1763
    size = tmp___0;
  } else {
#line 1763
    size = 12;
  }
#line 1772
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1773
  sock = mdev->data.socket;
#line 1775
  tmp___6 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1775
  if (tmp___6 != 0L) {
#line 1776
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1778
    p = & mdev->data.sbuf.rs_param_95;
#line 1781
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1783
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1783
    p->rate = tmp___1;
#line 1784
    tmp___2 = __fswab32((__u32 )sc->c_plan_ahead);
#line 1784
    p->c_plan_ahead = tmp___2;
#line 1785
    tmp___3 = __fswab32((__u32 )sc->c_delay_target);
#line 1785
    p->c_delay_target = tmp___3;
#line 1786
    tmp___4 = __fswab32((__u32 )sc->c_fill_target);
#line 1786
    p->c_fill_target = tmp___4;
#line 1787
    tmp___5 = __fswab32((__u32 )sc->c_max_rate);
#line 1787
    p->c_max_rate = tmp___5;
#line 1789
    if (apv > 87) {
#line 1790
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1791
    if (apv > 88) {
#line 1792
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1794
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1796
    rv = 0;
  }
#line 1798
  mutex_unlock(& mdev->data.mutex);
#line 1800
  return (rv);
}
}
#line 1803 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 1808
  size = 32;
#line 1810
  if (mdev->agreed_pro_version > 86) {
#line 1811
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1811
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1815
  tmp___0 = kmalloc___4((size_t )size, 16U);
#line 1815
  p = (struct p_protocol *)tmp___0;
#line 1816
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1817
    return (0);
  } else {

  }
#line 1819
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1819
  p->protocol = tmp___1;
#line 1820
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1820
  p->after_sb_0p = tmp___2;
#line 1821
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1821
  p->after_sb_1p = tmp___3;
#line 1822
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1822
  p->after_sb_2p = tmp___4;
#line 1823
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1823
  p->two_primaries = tmp___5;
#line 1825
  cf = 0;
#line 1826
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1827
    cf = cf | 1;
  } else {

  }
#line 1828
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1829
    if (mdev->agreed_pro_version > 91) {
#line 1830
      cf = cf | 2;
    } else {
#line 1832
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 1833
      kfree((void const   *)p);
#line 1834
      return (0);
    }
  } else {

  }
#line 1837
  tmp___6 = __fswab32((__u32 )cf);
#line 1837
  p->conn_flags = tmp___6;
#line 1839
  if (mdev->agreed_pro_version > 86) {
#line 1840
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 1842
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header80 *)p, (size_t )size);
#line 1844
  kfree((void const   *)p);
#line 1845
  return (rv);
}
}
#line 1848 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 1853
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1853
  if (tmp == 0) {
#line 1854
    return (1);
  } else {

  }
#line 1856
  i = 0;
#line 1856
  goto ldv_45571;
  ldv_45570: ;
#line 1857
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1857
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 1857
    p.uuid[i] = tmp___0;
  } else {
#line 1857
    p.uuid[i] = 0ULL;
  }
#line 1856
  i = i + 1;
  ldv_45571: ;
#line 1856
  if (i <= 3) {
#line 1857
    goto ldv_45570;
  } else {

  }
#line 1859
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 1860
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 1860
  p.uuid[4] = tmp___1;
#line 1861
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 1862
  tmp___2 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 1862
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 1863
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 2009UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 1864
  tmp___3 = __fswab64(uuid_flags);
#line 1864
  p.uuid[5] = tmp___3;
#line 1866
  put_ldev(mdev);
#line 1868
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header80 *)(& p), 56UL);
#line 1868
  return (tmp___4);
}
}
#line 1872 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1874
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 1874
  return (tmp);
}
}
#line 1877 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1879
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 1879
  return (tmp);
}
}
#line 1883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  struct p_rs_uuid p ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 1887
  tmp = __fswab64(val);
#line 1887
  p.uuid = tmp;
#line 1889
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header80 *)(& p), 16UL);
#line 1889
  return (tmp___0);
}
}
#line 1893 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int ok ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 1900
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1900
  if (tmp != 0) {
#line 1901
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1901
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              1901);
    } else {

    }
#line 1902
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 1903
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 1904
    q_order_type = drbd_queue_order_type(mdev);
#line 1905
    put_ldev(mdev);
  } else {
#line 1907
    d_size = 0UL;
#line 1908
    u_size = 0UL;
#line 1909
    q_order_type = 0;
  }
#line 1912
  tmp___0 = __fswab64((__u64 )d_size);
#line 1912
  p.d_size = tmp___0;
#line 1913
  tmp___1 = __fswab64((__u64 )u_size);
#line 1913
  p.u_size = tmp___1;
#line 1914
  if (trigger_reply == 0) {
#line 1914
    tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 1914
    tmp___3 = (__u64 )tmp___2;
  } else {
#line 1914
    tmp___3 = 0ULL;
  }
#line 1914
  tmp___4 = __fswab64(tmp___3);
#line 1914
  p.c_size = tmp___4;
#line 1915
  tmp___5 = queue_max_segment_size(mdev->rq_queue);
#line 1915
  tmp___6 = __fswab32(tmp___5);
#line 1915
  p.max_segment_size = tmp___6;
#line 1916
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 1916
  p.queue_order_type = tmp___7;
#line 1917
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 1917
  p.dds_flags = tmp___8;
#line 1919
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header80 *)(& p), 40UL);
#line 1921
  return (ok);
}
}
#line 1928 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 1932
  ok = 0;
#line 1936
  drbd_state_lock___0(mdev);
#line 1938
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1940
  tmp = __fswab32(mdev->state.i);
#line 1940
  p.state = tmp;
#line 1941
  sock = mdev->data.socket;
#line 1943
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1943
  if (tmp___0 != 0L) {
#line 1944
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 1948
  mutex_unlock(& mdev->data.mutex);
#line 1950
  drbd_state_unlock(mdev);
#line 1951
  return (ok);
}
}
#line 1954 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 1959
  tmp = __fswab32(mask.i);
#line 1959
  p.mask = tmp;
#line 1960
  tmp___0 = __fswab32(val.i);
#line 1960
  p.val = tmp___0;
#line 1962
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header80 *)(& p), 16UL);
#line 1962
  return (tmp___1);
}
}
#line 1966 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 1970
  tmp = __fswab32((__u32 )retcode);
#line 1970
  p.retcode = tmp;
#line 1972
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header80 *)(& p),
                          12UL);
#line 1972
  return (tmp___0);
}
}
#line 1976 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 1989
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 1991
    return (0);
  } else {

  }
#line 1993
  if (c->bit_offset >= c->bm_bits) {
#line 1994
    return (0);
  } else {

  }
#line 1997
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 1998
  memset((void *)(& p->code), 0, 4087UL);
#line 2000
  plain_bits = 0UL;
#line 2005
  toggle = 2U;
  ldv_45625: ;
#line 2010
  if (toggle == 0U) {
#line 2010
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 2010
    tmp = tmp___0;
  } else {
#line 2010
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 2010
    tmp = tmp___1;
  }
#line 2012
  if (tmp == 0xffffffffffffffffUL) {
#line 2013
    tmp = c->bm_bits;
  } else {

  }
#line 2014
  rl = tmp - c->bit_offset;
#line 2016
  if (toggle == 2U) {
#line 2017
    if (rl == 0UL) {
#line 2020
      DCBP_set_start(p, 1);
#line 2022
      toggle = toggle == 0U;
#line 2023
      goto ldv_45623;
    } else {

    }
#line 2025
    DCBP_set_start(p, 0);
  } else {

  }
#line 2030
  if (rl == 0UL) {
#line 2031
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 2033
    return (-1);
  } else {

  }
#line 2036
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 2037
  if (bits == -105) {
#line 2038
    goto ldv_45624;
  } else {

  }
#line 2039
  if (bits <= 0) {
#line 2040
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 2041
    return (0);
  } else {

  }
#line 2044
  toggle = toggle == 0U;
#line 2045
  plain_bits = plain_bits + rl;
#line 2046
  c->bit_offset = tmp;
  ldv_45623: ;
#line 2047
  if (c->bit_offset < c->bm_bits) {
#line 2048
    goto ldv_45625;
  } else {

  }
  ldv_45624: 
#line 2049
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 2051
  if ((unsigned long )(len << 3) > plain_bits) {
#line 2054
    c->bit_offset = c->bit_offset - plain_bits;
#line 2055
    bm_xfer_ctx_bit_to_word_offset(c);
#line 2056
    c->bit_offset = c->word_offset * 64UL;
#line 2057
    return (0);
  } else {

  }
#line 2062
  bm_xfer_ctx_bit_to_word_offset(c);
#line 2065
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 2067
  return ((int )len);
}
}
#line 2071 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_30308 send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header80 *h ,
                                        struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2074
  p = (struct p_compressed_bm *)h;
#line 2079
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2081
  if (len < 0) {
#line 2082
    return (FAILED);
  } else {

  }
#line 2084
  if (len != 0) {
#line 2085
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2086
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2089
    c->packets[0] = c->packets[0] + 1U;
#line 2090
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2092
    if (c->bit_offset >= c->bm_bits) {
#line 2093
      len = 0;
    } else {

    }
  } else {
#line 2097
    __min1 = 511UL;
#line 2097
    __min2 = c->bm_words - c->word_offset;
#line 2097
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2098
    len = (int )((unsigned int )num_words * 8U);
#line 2099
    if (len != 0) {
#line 2100
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2101
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2103
    c->word_offset = c->word_offset + num_words;
#line 2104
    c->bit_offset = c->word_offset * 64UL;
#line 2106
    c->packets[1] = c->packets[1] + 1U;
#line 2107
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2109
    if (c->bit_offset > c->bm_bits) {
#line 2110
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2112
  ok = ok != 0 ? (len == 0 ? 2 : 0) : 1;
#line 2114
  if (ok == 2) {
#line 2115
    INFO_bm_xfer_stats(mdev, "send", c);
  } else {

  }
#line 2116
  return ((enum ldv_30308 )ok);
}
}
#line 2120 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header80 *p ;
  int ret ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  enum ldv_30308 tmp___5 ;

  {
#line 2126
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2126
  if (_b != 0) {
#line 2126
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2126);
  } else {

  }
#line 2126
  if (_b != 0) {
#line 2126
    return (0);
  } else {

  }
#line 2130
  tmp = __get_free_pages(16U, 0U);
#line 2130
  p = (struct p_header80 *)tmp;
#line 2131
  if ((unsigned long )p == (unsigned long )((struct p_header80 *)0)) {
#line 2132
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2133
    return (0);
  } else {

  }
#line 2136
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2136
  if (tmp___2 != 0) {
#line 2137
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2137
    if (tmp___1 != 0) {
#line 2138
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2139
      drbd_bm_set_all(mdev);
#line 2140
      tmp___0 = drbd_bm_write(mdev);
#line 2140
      if (tmp___0 != 0) {
#line 2144
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2146
        drbd_md_clear_flag(mdev, 8);
#line 2147
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2150
    put_ldev(mdev);
  } else {

  }
#line 2153
  tmp___3 = drbd_bm_bits(mdev);
#line 2153
  tmp___4 = drbd_bm_words(mdev);
#line 2153
  __constr_expr_0.bm_bits = tmp___3;
#line 2153
  __constr_expr_0.bm_words = tmp___4;
#line 2153
  __constr_expr_0.bit_offset = 0UL;
#line 2153
  __constr_expr_0.word_offset = 0UL;
#line 2153
  __constr_expr_0.packets[0] = 0U;
#line 2153
  __constr_expr_0.packets[1] = 0U;
#line 2153
  __constr_expr_0.bytes[0] = 0U;
#line 2153
  __constr_expr_0.bytes[1] = 0U;
#line 2153
  c = __constr_expr_0;
  ldv_45652: 
#line 2159
  tmp___5 = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2159
  ret = (int )tmp___5;
#line 2160
  if (ret == 0) {
#line 2161
    goto ldv_45652;
  } else {

  }
#line 2162
  free_pages((unsigned long )p, 0U);
#line 2163
  return (ret == 2);
}
}
#line 2166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2170
  tmp = drbd_get_data_sock(mdev);
#line 2170
  if (tmp == 0) {
#line 2171
    return (-1);
  } else {

  }
#line 2172
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2172
  err = tmp___0 == 0;
#line 2173
  drbd_put_data_sock(mdev);
#line 2174
  return (err);
}
}
#line 2177 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2182
  p.barrier = barrier_nr;
#line 2183
  tmp = __fswab32(set_size);
#line 2183
  p.set_size = tmp;
#line 2185
  if ((int )mdev->state.ldv_35401.conn <= 9) {
#line 2186
    return (0);
  } else {

  }
#line 2187
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header80 *)(& p), 16UL);
#line 2189
  return (ok);
}
}
#line 2200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2208
  p.sector = sector;
#line 2209
  p.block_id = block_id;
#line 2210
  p.blksize = blksize;
#line 2211
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2211
  tmp___0 = __fswab32((__u32 )tmp);
#line 2211
  p.seq_num = tmp___0;
#line 2213
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_35401.conn <= 9) {
#line 2214
    return (0);
  } else {

  }
#line 2215
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header80 *)(& p), 32UL);
#line 2217
  return (ok);
}
}
#line 2223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 2226
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2226
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 2226
    tmp___0 = tmp;
  } else {
#line 2226
    tmp___0 = 0U;
  }
#line 2226
  data_size = (int )((unsigned int )data_size - tmp___0);
#line 2228
  tmp___1 = __fswab32((__u32 )data_size);
#line 2228
  tmp___2 = _drbd_send_ack(mdev, cmd, dp->sector, tmp___1, dp->block_id);
#line 2228
  return (tmp___2);
}
}
#line 2232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2235
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2235
  return (tmp);
}
}
#line 2244 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2247
  tmp = __fswab32(e->size);
#line 2247
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2247
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->ldv_42864.block_id);
#line 2247
  return (tmp___1);
}
}
#line 2255 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2258
  tmp = __fswab64(block_id);
#line 2258
  tmp___0 = __fswab32((__u32 )blksize);
#line 2258
  tmp___1 = __fswab64((__u64 )sector);
#line 2258
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2258
  return (tmp___2);
}
}
#line 2264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2270
  tmp = __fswab64((__u64 )sector);
#line 2270
  p.sector = tmp;
#line 2271
  p.block_id = block_id;
#line 2272
  tmp___0 = __fswab32((__u32 )size);
#line 2272
  p.blksize = tmp___0;
#line 2274
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header80 *)(& p),
                     32UL);
#line 2276
  return (ok);
}
}
#line 2279 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2287
  tmp = __fswab64((__u64 )sector);
#line 2287
  p.sector = tmp;
#line 2288
  p.block_id = 1728263026ULL;
#line 2289
  tmp___0 = __fswab32((__u32 )size);
#line 2289
  p.blksize = tmp___0;
#line 2291
  p.head.magic = 1728214147U;
#line 2292
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2292
  p.head.command = tmp___1;
#line 2293
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2293
  p.head.length = tmp___2;
#line 2295
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2297
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2297
  ok = tmp___3 == 32;
#line 2298
  if (ok != 0) {
#line 2298
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2298
    if (tmp___4 == digest_size) {
#line 2298
      tmp___5 = 1;
    } else {
#line 2298
      tmp___5 = 0;
    }
  } else {
#line 2298
    tmp___5 = 0;
  }
#line 2298
  ok = tmp___5;
#line 2300
  mutex_unlock(& mdev->data.mutex);
#line 2302
  return (ok);
}
}
#line 2305 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2310
  tmp = __fswab64((__u64 )sector);
#line 2310
  p.sector = tmp;
#line 2311
  p.block_id = 1728261953ULL;
#line 2312
  tmp___0 = __fswab32((__u32 )size);
#line 2312
  p.blksize = tmp___0;
#line 2314
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header80 *)(& p), 32UL);
#line 2316
  return (ok);
}
}
#line 2323 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2328
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2328
    tmp___0 = 1;
  } else {
#line 2328
    tmp = get_t_state(& mdev->asender);
#line 2328
    if ((unsigned int )tmp != 1U) {
#line 2328
      tmp___0 = 1;
    } else
#line 2328
    if ((int )mdev->state.ldv_35401.conn <= 9) {
#line 2328
      tmp___0 = 1;
    } else {
#line 2328
      tmp___0 = 0;
    }
  }
#line 2328
  drop_it = tmp___0;
#line 2333
  if (drop_it != 0) {
#line 2334
    return (1);
  } else {

  }
#line 2336
  mdev->ko_count = mdev->ko_count - 1U;
#line 2336
  drop_it = mdev->ko_count == 0U;
#line 2337
  if (drop_it == 0) {
#line 2338
    tmp___1 = get_current();
#line 2338
    tmp___2 = get_current();
#line 2338
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2340
    request_ping(mdev);
  } else {

  }
#line 2343
  return (drop_it);
}
}
#line 2367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2370
  tmp = kmap(page);
#line 2370
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2370
  sent = tmp___0;
#line 2371
  kunmap(page);
#line 2372
  if ((size_t )sent == size) {
#line 2373
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2374
  return ((size_t )sent == size);
}
}
#line 2377 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2380
  tmp = current_thread_info();
#line 2380
  oldfs = tmp->addr_limit;
#line 2382
  len = (int )size;
#line 2390
  if (disable_sendpage != 0) {
#line 2391
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2391
    return (tmp___0);
  } else {
#line 2390
    tmp___1 = page_count(page);
#line 2390
    if (tmp___1 <= 0) {
#line 2391
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2391
      return (tmp___0);
    } else {
#line 2390
      tmp___2 = PageSlab(page);
#line 2390
      if (tmp___2 != 0) {
#line 2391
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2391
        return (tmp___0);
      } else {

      }
    }
  }
#line 2393
  msg_flags = msg_flags | 16384U;
#line 2394
  drbd_update_congested(mdev);
#line 2395
  tmp___3 = current_thread_info();
#line 2395
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2395
  tmp___3->addr_limit = __constr_expr_0;
  ldv_45751: 
#line 2397
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2397
  sent = (int )tmp___4;
#line 2400
  if (sent == -11) {
#line 2401
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2401
    if (tmp___5 != 0) {
#line 2403
      goto ldv_45748;
    } else {
#line 2405
      goto ldv_45749;
    }
  } else {

  }
#line 2407
  if (sent <= 0) {
#line 2408
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2410
    goto ldv_45748;
  } else {

  }
#line 2412
  len = len - sent;
#line 2413
  offset = offset + sent;
  ldv_45749: ;
#line 2414
  if (len > 0) {
#line 2415
    goto ldv_45751;
  } else {

  }
  ldv_45748: 
#line 2415
  tmp___6 = current_thread_info();
#line 2415
  tmp___6->addr_limit = oldfs;
#line 2416
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2418
  ok = len == 0;
#line 2419
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2419
  if (tmp___7 != 0L) {
#line 2420
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2421
  return (ok);
}
}
#line 2424 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2429
  bvec = bio->bi_io_vec;
#line 2429
  i = 0;
#line 2429
  goto ldv_45759;
  ldv_45758: 
#line 2430
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2430
  if (tmp == 0) {
#line 2433
    return (0);
  } else {

  }
#line 2429
  bvec = bvec + 1;
#line 2429
  i = i + 1;
  ldv_45759: ;
#line 2429
  if ((int )bio->bi_vcnt > i) {
#line 2430
    goto ldv_45758;
  } else {

  }

#line 2435
  return (1);
}
}
#line 2438 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2443
  bvec = bio->bi_io_vec;
#line 2443
  i = 0;
#line 2443
  goto ldv_45768;
  ldv_45767: 
#line 2444
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2444
  if (tmp == 0) {
#line 2447
    return (0);
  } else {

  }
#line 2443
  bvec = bvec + 1;
#line 2443
  i = i + 1;
  ldv_45768: ;
#line 2443
  if ((int )bio->bi_vcnt > i) {
#line 2444
    goto ldv_45767;
  } else {

  }

#line 2449
  return (1);
}
}
#line 2452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2454
  page = e->pages;
#line 2455
  len = e->size;
#line 2457
  goto ldv_45782;
  ldv_45781: 
#line 2458
  __min1 = len;
#line 2458
  __min2 = 4096U;
#line 2458
  l = __min1 < __min2 ? __min1 : __min2;
#line 2459
  tmp = page_chain_next(page);
#line 2459
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2459
  if (tmp___0 == 0) {
#line 2461
    return (0);
  } else {

  }
#line 2462
  len = len - l;
#line 2457
  page = page_chain_next(page);
  ldv_45782: ;
#line 2457
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2457
    tmp___1 = page_chain_next(page);
#line 2457
    __builtin_prefetch((void const   *)tmp___1);
#line 2457
    if (1 != 0) {
#line 2458
      goto ldv_45781;
    } else {
#line 2460
      goto ldv_45783;
    }
  } else {

  }
  ldv_45783: ;
#line 2464
  return (1);
}
}
#line 2467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static u32 bio_flags_to_wire(struct drbd_conf *mdev , unsigned long bi_rw ) 
{ 


  {
#line 2469
  if (mdev->agreed_pro_version > 94) {
#line 2470
    return ((u32 )((((((bi_rw & 32UL) != 0UL ? 2 : 0) | ((bi_rw & 512UL) != 0UL ? 8 : 0)) | ((bi_rw & 16384UL) != 0UL ? 16 : 0)) | ((bi_rw & 67108864UL) != 0UL ? 32 : 0)) | ((bi_rw & 128UL) != 0UL ? 64 : 0)));
  } else {
#line 2476
    return ((bi_rw & 544UL) != 0UL ? 2U : 0U);
  }
}
}
#line 2482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;

  {
#line 2484
  ok = 1;
#line 2486
  dp_flags = 0U;
#line 2490
  tmp = drbd_get_data_sock(mdev);
#line 2490
  if (tmp == 0) {
#line 2491
    return (0);
  } else {

  }
#line 2493
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2493
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2493
    dgs = (int )tmp___0;
  } else {
#line 2493
    dgs = 0;
  }
#line 2496
  if (req->size <= 32768U) {
#line 2497
    p.head.h80.magic = 1728214147U;
#line 2498
    p.head.h80.command = 0U;
#line 2499
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2499
    p.head.h80.length = tmp___1;
  } else {
#line 2502
    p.head.h95.magic = 23171U;
#line 2503
    p.head.h95.command = 0U;
#line 2504
    tmp___2 = __fswab32((req->size + (__u32 )dgs) + 24U);
#line 2504
    p.head.h95.length = tmp___2;
  }
#line 2508
  tmp___3 = __fswab64((__u64 )req->sector);
#line 2508
  p.sector = tmp___3;
#line 2509
  p.block_id = (u64 )req;
#line 2510
  tmp___4 = atomic_add_return(1, & mdev->packet_seq);
#line 2510
  req->seq_num = tmp___4;
#line 2510
  tmp___5 = __fswab32((__u32 )tmp___4);
#line 2510
  p.seq_num = tmp___5;
#line 2513
  dp_flags = bio_flags_to_wire(mdev, (req->master_bio)->bi_rw);
#line 2515
  if ((int )mdev->state.ldv_35401.conn > 15 && (int )mdev->state.ldv_35401.conn <= 21) {
#line 2517
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2519
  tmp___6 = __fswab32(dp_flags);
#line 2519
  p.dp_flags = tmp___6;
#line 2520
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 2521
  tmp___7 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2521
  ok = tmp___7 == 32;
#line 2523
  if (ok != 0 && dgs != 0) {
#line 2524
    dgb = mdev->int_dig_out;
#line 2525
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2526
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
  } else {

  }
#line 2528
  if (ok != 0) {
#line 2529
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 2530
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2532
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
  } else {

  }
#line 2535
  drbd_put_data_sock(mdev);
#line 2537
  return (ok);
}
}
#line 2544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u64 tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
#line 2552
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2552
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2552
    dgs = (int )tmp;
  } else {
#line 2552
    dgs = 0;
  }
#line 2555
  if (e->size <= 32768U) {
#line 2556
    p.head.h80.magic = 1728214147U;
#line 2557
    tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2557
    p.head.h80.command = tmp___0;
#line 2558
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2558
    p.head.h80.length = tmp___1;
  } else {
#line 2561
    p.head.h95.magic = 23171U;
#line 2562
    tmp___2 = __fswab16((int )((__u16 )cmd));
#line 2562
    p.head.h95.command = tmp___2;
#line 2563
    tmp___3 = __fswab32((e->size + (__u32 )dgs) + 24U);
#line 2563
    p.head.h95.length = tmp___3;
  }
#line 2567
  tmp___4 = __fswab64((__u64 )e->sector);
#line 2567
  p.sector = tmp___4;
#line 2568
  p.block_id = e->ldv_42864.block_id;
#line 2575
  tmp___5 = drbd_get_data_sock(mdev);
#line 2575
  if (tmp___5 == 0) {
#line 2576
    return (0);
  } else {

  }
#line 2578
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2578
  ok = tmp___6 == 32;
#line 2579
  if (ok != 0 && dgs != 0) {
#line 2580
    dgb = mdev->int_dig_out;
#line 2581
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 2582
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
  } else {

  }
#line 2584
  if (ok != 0) {
#line 2585
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 2587
  drbd_put_data_sock(mdev);
#line 2589
  return (ok);
}
}
#line 2608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2613
  sent = 0;
#line 2615
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2616
    return (-1000);
  } else {

  }
#line 2620
  iov.iov_base = buf;
#line 2621
  iov.iov_len = size;
#line 2623
  msg.msg_name = 0;
#line 2624
  msg.msg_namelen = 0;
#line 2625
  msg.msg_control = 0;
#line 2626
  msg.msg_controllen = 0UL;
#line 2627
  msg.msg_flags = msg_flags | 16384U;
#line 2629
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2630
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2631
    drbd_update_congested(mdev);
  } else {

  }
  ldv_45819: 
#line 2643
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2644
  if (rv == -11) {
#line 2645
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2645
    if (tmp != 0) {
#line 2646
      goto ldv_45817;
    } else {
#line 2648
      goto ldv_45818;
    }
  } else {

  }
#line 2650
  if (rv == 0) {
#line 2650
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2650);
  } else {

  }
#line 2651
  if (rv == -4) {
#line 2652
    tmp___0 = get_current();
#line 2652
    flush_signals(tmp___0);
#line 2653
    rv = 0;
  } else {

  }
#line 2655
  if (rv < 0) {
#line 2656
    goto ldv_45817;
  } else {

  }
#line 2657
  sent = sent + rv;
#line 2658
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2659
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_45818: ;
#line 2660
  if ((size_t )sent < size) {
#line 2661
    goto ldv_45819;
  } else {

  }
  ldv_45817: ;
#line 2662
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2663
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2665
  if (rv <= 0) {
#line 2666
    if (rv != -11) {
#line 2667
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 2670
      val.i = 0U;
#line 2670
      val.ldv_35401.conn = 4U;
#line 2670
      mask.i = 0U;
#line 2670
      mask.ldv_35401.conn = 31U;
#line 2670
      drbd_force_state(mdev, mask, val);
    } else {
#line 2672
      val___0.i = 0U;
#line 2672
      val___0.ldv_35401.conn = 3U;
#line 2672
      mask___0.i = 0U;
#line 2672
      mask___0.ldv_35401.conn = 31U;
#line 2672
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2675
  return (sent);
}
}
#line 2678 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2680
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2682
  rv = 0;
#line 2684
  mutex_lock_nested(& drbd_main_mutex, 0U);
#line 2685
  tmp = spinlock_check(& mdev->req_lock);
#line 2685
  flags = _raw_spin_lock_irqsave(tmp);
#line 2689
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U) {
#line 2690
    if ((mode & 2U) != 0U) {
#line 2691
      rv = -30;
    } else
#line 2692
    if (allow_oos == 0) {
#line 2693
      rv = -124;
    } else {

    }
  } else {

  }
#line 2696
  if (rv == 0) {
#line 2697
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2698
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2699
  mutex_unlock(& drbd_main_mutex);
#line 2701
  return (rv);
}
}
#line 2704 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2706
  mdev = (struct drbd_conf *)gd->private_data;
#line 2707
  mutex_lock_nested(& drbd_main_mutex, 0U);
#line 2708
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2709
  mutex_unlock(& drbd_main_mutex);
#line 2710
  return (0);
}
}
#line 2713 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_unplug_fn(struct request_queue *q ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;
  int tmp___0 ;

  {
#line 2715
  mdev = (struct drbd_conf *)q->queuedata;
#line 2718
  spin_lock_irq(q->queue_lock);
#line 2719
  blk_remove_plug(q);
#line 2720
  spin_unlock_irq(q->queue_lock);
#line 2723
  spin_lock_irq(& mdev->req_lock);
#line 2724
  if ((int )mdev->state.ldv_35401.pdsk > 3 && (int )mdev->state.ldv_35401.conn > 9) {
#line 2725
    if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U) {
#line 2725
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.role == R_PRIMARY ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              2725);
    } else {

    }
#line 2726
    tmp___0 = test_and_clear_bit(4, (unsigned long volatile   *)(& mdev->flags));
#line 2726
    if (tmp___0 != 0) {
#line 2731
      tmp = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2731
      if (tmp != 0) {
#line 2732
        drbd_queue_work(& mdev->data.work, & mdev->unplug_work);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2736
  spin_unlock_irq(& mdev->req_lock);
#line 2738
  if ((int )mdev->state.ldv_35401.disk > 3) {
#line 2739
    drbd_kick_lo(mdev);
  } else {

  }
#line 2740
  return;
}
}
#line 2742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 2746
  __constr_expr_0.rate = 250;
#line 2746
  __constr_expr_0.after = -1;
#line 2746
  __constr_expr_0.al_extents = 127;
#line 2746
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 2746
  __constr_expr_0.verify_alg_len = 0;
#line 2746
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 2746
  __constr_expr_0.cpu_mask_len = 0;
#line 2746
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 2746
  __constr_expr_0.csums_alg_len = 0;
#line 2746
  __constr_expr_0.use_rle = 0U;
#line 2746
  __constr_expr_0.on_no_data = 0;
#line 2746
  __constr_expr_0.c_plan_ahead = 0;
#line 2746
  __constr_expr_0.c_delay_target = 10;
#line 2746
  __constr_expr_0.c_fill_target = 0;
#line 2746
  __constr_expr_0.c_max_rate = 102400;
#line 2746
  __constr_expr_0.c_min_rate = 4096;
#line 2746
  mdev->sync_conf = __constr_expr_0;
#line 2764
  __constr_expr_1.ldv_35401.role = 2U;
#line 2764
  __constr_expr_1.ldv_35401.peer = 0U;
#line 2764
  __constr_expr_1.ldv_35401.conn = 0U;
#line 2764
  __constr_expr_1.ldv_35401.disk = 0U;
#line 2764
  __constr_expr_1.ldv_35401.pdsk = 6U;
#line 2764
  __constr_expr_1.ldv_35401.susp = 0U;
#line 2764
  __constr_expr_1.ldv_35401.aftr_isp = (unsigned char)0;
#line 2764
  __constr_expr_1.ldv_35401.peer_isp = (unsigned char)0;
#line 2764
  __constr_expr_1.ldv_35401.user_isp = (unsigned char)0;
#line 2764
  __constr_expr_1.ldv_35401.susp_nod = 0U;
#line 2764
  __constr_expr_1.ldv_35401.susp_fen = 0U;
#line 2764
  __constr_expr_1.ldv_35401._pad = (unsigned short)0;
#line 2764
  mdev->state = __constr_expr_1;
#line 2765
  return;
}
}
#line 2776 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;

  {
#line 2781
  drbd_set_defaults(mdev);
#line 2786
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 2788
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2789
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2790
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2791
  atomic_set(& mdev->unacked_cnt, 0);
#line 2792
  atomic_set(& mdev->local_cnt, 0);
#line 2793
  atomic_set(& mdev->net_cnt, 0);
#line 2794
  atomic_set(& mdev->packet_seq, 0);
#line 2795
  atomic_set(& mdev->pp_in_use, 0);
#line 2796
  atomic_set(& mdev->pp_in_use_by_net, 0);
#line 2797
  atomic_set(& mdev->rs_sect_in, 0);
#line 2798
  atomic_set(& mdev->rs_sect_ev, 0);
#line 2800
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 2801
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 2802
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 2803
  sema_init(& mdev->data.work.s, 0);
#line 2804
  sema_init(& mdev->meta.work.s, 0);
#line 2805
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 2807
  spinlock_check(& mdev->data.work.q_lock);
#line 2807
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5780.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 2808
  spinlock_check(& mdev->meta.work.q_lock);
#line 2808
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5780.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 2810
  spinlock_check(& mdev->al_lock);
#line 2810
  __raw_spin_lock_init(& mdev->al_lock.ldv_5780.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 2811
  spinlock_check(& mdev->req_lock);
#line 2811
  __raw_spin_lock_init(& mdev->req_lock.ldv_5780.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 2812
  spinlock_check(& mdev->peer_seq_lock);
#line 2812
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5780.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 2813
  spinlock_check(& mdev->epoch_lock);
#line 2813
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5780.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 2815
  INIT_LIST_HEAD(& mdev->active_ee);
#line 2816
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 2817
  INIT_LIST_HEAD(& mdev->done_ee);
#line 2818
  INIT_LIST_HEAD(& mdev->read_ee);
#line 2819
  INIT_LIST_HEAD(& mdev->net_ee);
#line 2820
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 2821
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 2822
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 2823
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 2824
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 2825
  INIT_LIST_HEAD(& mdev->go_diskless.list);
#line 2826
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 2827
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 2829
  mdev->resync_work.cb = & w_resync_inactive;
#line 2830
  mdev->unplug_work.cb = & w_send_write_hint;
#line 2831
  mdev->go_diskless.cb = & w_go_diskless;
#line 2832
  mdev->md_sync_work.cb = & w_md_sync;
#line 2833
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 2834
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 2835
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 2836
  mdev->resync_timer.function = & resync_timer_fn;
#line 2837
  mdev->resync_timer.data = (unsigned long )mdev;
#line 2838
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 2839
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 2841
  __init_waitqueue_head(& mdev->misc_wait, & __key___11);
#line 2842
  __init_waitqueue_head(& mdev->state_wait, & __key___12);
#line 2843
  __init_waitqueue_head(& mdev->net_cnt_wait, & __key___13);
#line 2844
  __init_waitqueue_head(& mdev->ee_wait, & __key___14);
#line 2845
  __init_waitqueue_head(& mdev->al_wait, & __key___15);
#line 2846
  __init_waitqueue_head(& mdev->seq_wait, & __key___16);
#line 2848
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 2849
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 2850
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 2852
  mdev->agreed_pro_version = 95;
#line 2853
  mdev->write_ordering = WO_bio_barrier;
#line 2854
  mdev->resync_wenr = 4294967295U;
#line 2855
  return;
}
}
#line 2857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
#line 2860
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 2861
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 2865
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2865
  if (tmp___0 != 0) {
#line 2866
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2866
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 2867
  tmp___9 = 0UL;
#line 2867
  mdev->rs_failed = tmp___9;
#line 2867
  tmp___8 = tmp___9;
#line 2867
  mdev->rs_total = tmp___8;
#line 2867
  tmp___7 = tmp___8;
#line 2867
  mdev->rs_start = tmp___7;
#line 2867
  tmp___6 = tmp___7;
#line 2867
  mdev->p_size = tmp___6;
#line 2867
  tmp___5 = (unsigned int )tmp___6;
#line 2867
  mdev->writ_cnt = tmp___5;
#line 2867
  tmp___4 = tmp___5;
#line 2867
  mdev->send_cnt = tmp___4;
#line 2867
  tmp___3 = tmp___4;
#line 2867
  mdev->recv_cnt = tmp___3;
#line 2867
  tmp___2 = tmp___3;
#line 2867
  mdev->read_cnt = tmp___2;
#line 2867
  tmp___1 = tmp___2;
#line 2867
  mdev->bm_writ_cnt = tmp___1;
#line 2867
  mdev->al_writ_cnt = tmp___1;
#line 2877
  mdev->rs_last_events = 0;
#line 2878
  mdev->rs_last_sect_ev = 0;
#line 2879
  i = 0;
#line 2879
  goto ldv_45878;
  ldv_45877: 
#line 2880
  mdev->rs_mark_left[i] = 0UL;
#line 2881
  mdev->rs_mark_time[i] = 0UL;
#line 2879
  i = i + 1;
  ldv_45878: ;
#line 2879
  if (i <= 7) {
#line 2880
    goto ldv_45877;
  } else {

  }

#line 2883
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 2883
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2883);
  } else {

  }
#line 2885
  drbd_set_my_capacity(mdev, 0UL);
#line 2886
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 2888
    drbd_bm_resize(mdev, 0UL, 1);
#line 2889
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 2892
  drbd_free_resources(mdev);
#line 2893
  clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 2899
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 2899
  if (tmp___10 == 0) {
#line 2899
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2899);
  } else {

  }
#line 2900
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 2900
  if (tmp___11 == 0) {
#line 2900
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2900);
  } else {

  }
#line 2901
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 2901
  if (tmp___12 == 0) {
#line 2901
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2901);
  } else {

  }
#line 2902
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 2902
  if (tmp___13 == 0) {
#line 2902
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2902);
  } else {

  }
#line 2903
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 2903
  if (tmp___14 == 0) {
#line 2903
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2903);
  } else {

  }
#line 2904
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 2904
  if (tmp___15 == 0) {
#line 2904
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2904);
  } else {

  }
#line 2905
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2905
  if (tmp___16 == 0) {
#line 2905
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2905);
  } else {

  }
#line 2906
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 2906
  if (tmp___17 == 0) {
#line 2906
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2906);
  } else {

  }
#line 2907
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 2907
  if (tmp___18 == 0) {
#line 2907
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2907);
  } else {

  }
#line 2908
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2908
  if (tmp___19 == 0) {
#line 2908
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2908);
  } else {

  }
#line 2909
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->go_diskless.list));
#line 2909
  if (tmp___20 == 0) {
#line 2909
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->go_diskless.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2909);
  } else {

  }
#line 2910
  return;
}
}
#line 2914 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 2918
  goto ldv_45885;
  ldv_45884: 
#line 2919
  page = drbd_pp_pool;
#line 2920
  drbd_pp_pool = (struct page *)page->ldv_12214.ldv_12211.private;
#line 2921
  __free_pages(page, 0U);
#line 2922
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_45885: ;
#line 2918
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 2919
    goto ldv_45884;
  } else {

  }

#line 2927
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 2928
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 2929
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 2930
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 2931
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2932
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 2933
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2934
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 2935
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2936
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 2937
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2938
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 2940
  drbd_ee_mempool = 0;
#line 2941
  drbd_request_mempool = 0;
#line 2942
  drbd_ee_cache = 0;
#line 2943
  drbd_request_cache = 0;
#line 2944
  drbd_bm_ext_cache = 0;
#line 2945
  drbd_al_ext_cache = 0;
#line 2947
  return;
}
}
#line 2950 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 2953
  number = (int const   )(minor_count * 32U);
#line 2957
  drbd_request_mempool = 0;
#line 2958
  drbd_ee_cache = 0;
#line 2959
  drbd_request_cache = 0;
#line 2960
  drbd_bm_ext_cache = 0;
#line 2961
  drbd_al_ext_cache = 0;
#line 2962
  drbd_pp_pool = 0;
#line 2965
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 2967
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2968
    goto Enomem;
  } else {

  }
#line 2970
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 2972
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2973
    goto Enomem;
  } else {

  }
#line 2975
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 2977
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2978
    goto Enomem;
  } else {

  }
#line 2980
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 2982
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2983
    goto Enomem;
  } else {

  }
#line 2986
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 2988
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2989
    goto Enomem;
  } else {

  }
#line 2991
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 2993
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2994
    goto Enomem;
  } else {

  }
#line 2997
  spinlock_check(& drbd_pp_lock);
#line 2997
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5780.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 2999
  i = 0;
#line 2999
  goto ldv_45896;
  ldv_45895: 
#line 3000
  page = alloc_pages(131282U, 0U);
#line 3001
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 3002
    goto Enomem;
  } else {

  }
#line 3003
  page->ldv_12214.ldv_12211.private = (unsigned long )drbd_pp_pool;
#line 3004
  drbd_pp_pool = page;
#line 2999
  i = i + 1;
  ldv_45896: ;
#line 2999
  if (i < number) {
#line 3000
    goto ldv_45895;
  } else {

  }
#line 3006
  drbd_pp_vacant = number;
#line 3008
  return (0);
  Enomem: 
#line 3011
  drbd_destroy_mempools();
#line 3012
  return (-12);
}
}
#line 3015 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 3022
  return (0);
}
}
#line 3025 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 3029 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 3033
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 3034
  if (rr != 0) {
#line 3035
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 3037
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 3038
  if (rr != 0) {
#line 3039
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 3041
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 3042
  if (rr != 0) {
#line 3043
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 3045
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 3046
  if (rr != 0) {
#line 3047
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 3049
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 3050
  if (rr != 0) {
#line 3051
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 3052
  return;
}
}
#line 3056 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 3058
  tmp = minor_to_mdev(minor);
#line 3058
  mdev = tmp;
#line 3060
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3061
    return;
  } else {

  }
#line 3064
  if (mdev->open_cnt != 0) {
#line 3065
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3066);
  } else {

  }
#line 3068
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3068
  _b = tmp___0 == 0;
#line 3068
  if (_b != 0) {
#line 3068
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3068);
  } else {

  }
#line 3068
  if (_b != 0) {
#line 3070
    lp = mdev->data.work.q.next;
#line 3070
    goto ldv_45917;
    ldv_45916: 
#line 3071
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 3070
    lp = lp->next;
    ldv_45917: 
#line 3070
    __builtin_prefetch((void const   *)lp->next);
#line 3070
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 3071
      goto ldv_45916;
    } else {

    }

  } else {

  }
#line 3076
  del_gendisk(mdev->vdisk);
#line 3081
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 3082
    bdput(mdev->this_bdev);
  } else {

  }
#line 3084
  drbd_free_resources(mdev);
#line 3086
  drbd_release_ee_lists(mdev);
#line 3089
  kfree((void const   *)mdev->ee_hash);
#line 3095
  lc_destroy(mdev->act_log);
#line 3096
  lc_destroy(mdev->resync);
#line 3098
  kfree((void const   *)mdev->p_uuid);
#line 3101
  kfree((void const   *)mdev->int_dig_out);
#line 3102
  kfree((void const   *)mdev->int_dig_in);
#line 3103
  kfree((void const   *)mdev->int_dig_vv);
#line 3108
  drbd_free_mdev(mdev);
#line 3109
  return;
}
}
#line 3111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3115
  unregister_reboot_notifier(& drbd_notifier);
#line 3117
  drbd_nl_cleanup();
#line 3119
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3120
    if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3121
      remove_proc_entry("drbd", 0);
    } else {

    }
#line 3122
    i = minor_count;
#line 3123
    goto ldv_45924;
    ldv_45923: 
#line 3124
    drbd_delete_device(i);
    ldv_45924: 
#line 3123
    tmp = i;
#line 3123
    i = i - 1U;
#line 3123
    if (tmp != 0U) {
#line 3124
      goto ldv_45923;
    } else {

    }
#line 3125
    drbd_destroy_mempools();
  } else {

  }
#line 3128
  kfree((void const   *)minor_table);
#line 3130
  unregister_blkdev(147U, "drbd");
#line 3132
  printk("<6>drbd: module cleanup done.\n");
#line 3133
  return;
}
}
#line 3142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 3144
  mdev = (struct drbd_conf *)congested_data;
#line 3146
  reason = 45;
#line 3147
  r = 0;
#line 3149
  tmp = __inc_ap_bio_cond___0(mdev);
#line 3149
  if (tmp == 0) {
#line 3151
    r = bdi_bits;
#line 3152
    reason = 100;
#line 3153
    goto out;
  } else {

  }
#line 3156
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3156
  if (tmp___0 != 0) {
#line 3157
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3158
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3159
    put_ldev(mdev);
#line 3160
    if (r != 0) {
#line 3161
      reason = 98;
    } else {

    }
  } else {

  }
#line 3164
  if ((bdi_bits & 4) != 0) {
#line 3164
    tmp___1 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3164
    if (tmp___1 != 0) {
#line 3165
      r = r | 4;
#line 3166
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3170
  mdev->congestion_reason = reason;
#line 3171
  return (r);
}
}
#line 3174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3181
  tmp = kzalloc___2(4560UL, 208U);
#line 3181
  mdev = (struct drbd_conf *)tmp;
#line 3182
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3183
    return (0);
  } else {

  }
#line 3184
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3184
  if (tmp___0) {
#line 3184
    tmp___1 = 0;
  } else {
#line 3184
    tmp___1 = 1;
  }
#line 3184
  if (tmp___1) {
#line 3185
    goto out_no_cpumask;
  } else {

  }
#line 3187
  mdev->minor = minor;
#line 3189
  drbd_init_set_defaults(mdev);
#line 3191
  q = blk_alloc_queue(208U);
#line 3192
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3193
    goto out_no_q;
  } else {

  }
#line 3194
  mdev->rq_queue = q;
#line 3195
  q->queuedata = (void *)mdev;
#line 3197
  disk = alloc_disk(1);
#line 3198
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3199
    goto out_no_disk;
  } else {

  }
#line 3200
  mdev->vdisk = disk;
#line 3202
  set_disk_ro(disk, 1);
#line 3204
  disk->queue = q;
#line 3205
  disk->major = 147;
#line 3206
  disk->first_minor = (int )minor;
#line 3207
  disk->fops = & drbd_ops;
#line 3208
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3209
  disk->private_data = (void *)mdev;
#line 3211
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3213
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3215
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3216
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3218
  blk_queue_make_request(q, & drbd_make_request_26);
#line 3219
  blk_queue_max_segment_size(q, 131072U);
#line 3220
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3221
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3222
  q->queue_lock = & mdev->req_lock;
#line 3224
  q->unplug_fn = & drbd_unplug_fn;
#line 3226
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3227
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3228
    goto out_no_io_page;
  } else {

  }
#line 3230
  tmp___2 = drbd_bm_init(mdev);
#line 3230
  if (tmp___2 != 0) {
#line 3231
    goto out_no_bitmap;
  } else {

  }
#line 3233
  tmp___3 = tl_init(mdev);
#line 3233
  if (tmp___3 == 0) {
#line 3234
    goto out_no_tl;
  } else {

  }
#line 3236
  tmp___4 = kzalloc___2(120UL, 208U);
#line 3236
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3237
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3238
    goto out_no_app_reads;
  } else {

  }
#line 3240
  tmp___5 = kzalloc___2(40UL, 208U);
#line 3240
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3241
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3242
    goto out_no_epoch;
  } else {

  }
#line 3244
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3245
  mdev->epochs = 1U;
#line 3247
  return (mdev);
  out_no_epoch: 
#line 3252
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3254
  tl_cleanup(mdev);
  out_no_tl: 
#line 3256
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3258
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3260
  put_disk(disk);
  out_no_disk: 
#line 3262
  blk_cleanup_queue(q);
  out_no_q: 
#line 3264
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3266
  kfree((void const   *)mdev);
#line 3267
  return (0);
}
}
#line 3272 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3274
  kfree((void const   *)mdev->current_epoch);
#line 3275
  kfree((void const   *)mdev->app_reads_hash);
#line 3276
  tl_cleanup(mdev);
#line 3277
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3278
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3279
  __free_pages(mdev->md_io_page, 0U);
#line 3280
  put_disk(mdev->vdisk);
#line 3281
  blk_cleanup_queue(mdev->rq_queue);
#line 3282
  free_cpumask_var(mdev->cpu_mask);
#line 3283
  kfree((void const   *)mdev);
#line 3284
  return;
}
}
#line 3287 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3298
  if (minor_count == 0U || minor_count > 255U) {
#line 3299
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3302
    return (-22);
  } else {

  }
#line 3308
  err = drbd_nl_init();
#line 3309
  if (err != 0) {
#line 3310
    return (err);
  } else {

  }
#line 3312
  err = register_blkdev(147U, "drbd");
#line 3313
  if (err != 0) {
#line 3314
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3317
    return (err);
  } else {

  }
#line 3320
  register_reboot_notifier(& drbd_notifier);
#line 3325
  err = -12;
#line 3327
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3329
  drbd_proc = 0;
#line 3330
  tmp = kzalloc___2((unsigned long )minor_count * 8UL, 208U);
#line 3330
  minor_table = (struct drbd_conf **)tmp;
#line 3332
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3333
    goto Enomem;
  } else {

  }
#line 3335
  err = drbd_create_mempools();
#line 3336
  if (err != 0) {
#line 3337
    goto Enomem;
  } else {

  }
#line 3339
  drbd_proc = proc_create_data("drbd", 33060U, 0, & drbd_proc_fops, 0);
#line 3340
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3341
    printk("<3>drbd: unable to register proc file\n");
#line 3342
    goto Enomem;
  } else {

  }
#line 3345
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3347
  printk("<6>drbd: initialized. Version: 8.3.9rc2 (api:%d/proto:%d-%d)\n", 88, 86,
         95);
#line 3350
  tmp___0 = drbd_buildtag();
#line 3350
  printk("<6>drbd: %s\n", tmp___0);
#line 3351
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3353
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3355
  return (0);
  Enomem: 
#line 3358
  drbd_cleanup();
#line 3359
  if (err == -12) {
#line 3361
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3363
    printk("<3>drbd: initialization failure\n");
  }
#line 3364
  return (err);
}
}
#line 3367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3369
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3370
    return;
  } else {

  }
#line 3372
  bd_release(ldev->backing_bdev);
#line 3373
  bd_release(ldev->md_bdev);
#line 3375
  fput(ldev->lo_file);
#line 3376
  fput(ldev->md_file);
#line 3378
  kfree((void const   *)ldev);
#line 3379
  return;
}
}
#line 3381 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3383
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3384
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 3385
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3386
    sock_release(mdev->data.socket);
#line 3387
    mdev->data.socket = 0;
#line 3388
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 3390
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3391
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 3392
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3393
    sock_release(mdev->meta.socket);
#line 3394
    mdev->meta.socket = 0;
#line 3395
    mutex_unlock(& mdev->meta.mutex);
  } else {

  }
#line 3397
  return;
}
}
#line 3400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3402
  crypto_free_hash(mdev->csums_tfm);
#line 3403
  mdev->csums_tfm = 0;
#line 3404
  crypto_free_hash(mdev->verify_tfm);
#line 3405
  mdev->verify_tfm = 0;
#line 3406
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3407
  mdev->cram_hmac_tfm = 0;
#line 3408
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3409
  mdev->integrity_w_tfm = 0;
#line 3410
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3411
  mdev->integrity_r_tfm = 0;
#line 3413
  drbd_free_sock(mdev);
#line 3415
  drbd_free_bc(mdev->ldev);
#line 3415
  mdev->ldev = 0;
#line 3416
  return;
}
}
#line 3443 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  sector_t tmp___11 ;
  int tmp___12 ;
  sector_t tmp___13 ;

  {
#line 3449
  del_timer(& mdev->md_sync_timer);
#line 3451
  tmp = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3451
  if (tmp == 0) {
#line 3452
    return;
  } else {

  }
#line 3456
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3456
  if (tmp___0 == 0) {
#line 3457
    return;
  } else {

  }
#line 3459
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3460
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3460
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3461
  memset((void *)buffer, 0, 512UL);
#line 3463
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3463
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3463
  buffer->la_size = tmp___3;
#line 3464
  i = 0;
#line 3464
  goto ldv_45988;
  ldv_45987: 
#line 3465
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3465
  buffer->uuid[i] = tmp___4;
#line 3464
  i = i + 1;
  ldv_45988: ;
#line 3464
  if (i <= 3) {
#line 3465
    goto ldv_45987;
  } else {

  }
#line 3466
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3466
  buffer->flags = tmp___5;
#line 3467
  buffer->magic = 1795323011U;
#line 3469
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3469
  buffer->md_size_sect = tmp___6;
#line 3470
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3470
  buffer->al_offset = tmp___7;
#line 3471
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3471
  buffer->al_nr_extents = tmp___8;
#line 3472
  buffer->bm_bytes_per_bit = 1048576U;
#line 3473
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3473
  buffer->device_uuid = tmp___9;
#line 3475
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3475
  buffer->bm_offset = tmp___10;
#line 3477
  tmp___11 = drbd_md_ss__(mdev, mdev->ldev);
#line 3477
  if ((unsigned long long )tmp___11 != (mdev->ldev)->md.md_offset) {
#line 3477
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3477);
  } else {

  }
#line 3478
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3480
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3480
  if (tmp___12 == 0) {
#line 3482
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3483
    drbd_chk_io_error____1(mdev, 1, 1, "drbd_md_sync");
  } else {

  }
#line 3488
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3488
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___13;
#line 3490
  mutex_unlock(& mdev->md_io_mutex);
#line 3491
  put_ldev(mdev);
#line 3492
  return;
}
}
#line 3502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;

  {
#line 3505
  rv = 101;
#line 3507
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3507
  if (tmp == 0) {
#line 3508
    return (118);
  } else {

  }
#line 3510
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3511
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3511
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3513
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3513
  if (tmp___1 == 0) {
#line 3516
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3517
    rv = 118;
#line 3518
    goto err;
  } else {

  }
#line 3521
  tmp___2 = __fswab32(buffer->magic);
#line 3521
  if (tmp___2 != 2205418091U) {
#line 3522
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 3523
    rv = 119;
#line 3524
    goto err;
  } else {

  }
#line 3526
  tmp___4 = __fswab32(buffer->al_offset);
#line 3526
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 3527
    tmp___3 = __fswab32(buffer->al_offset);
#line 3527
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 3529
    rv = 119;
#line 3530
    goto err;
  } else {

  }
#line 3532
  tmp___6 = __fswab32(buffer->bm_offset);
#line 3532
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 3533
    tmp___5 = __fswab32(buffer->bm_offset);
#line 3533
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 3535
    rv = 119;
#line 3536
    goto err;
  } else {

  }
#line 3538
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 3538
  if (tmp___8 != bdev->md.md_size_sect) {
#line 3539
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 3539
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 3541
    rv = 119;
#line 3542
    goto err;
  } else {

  }
#line 3545
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 3545
  if (tmp___10 != 4096U) {
#line 3546
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 3546
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 3548
    rv = 119;
#line 3549
    goto err;
  } else {

  }
#line 3552
  tmp___11 = __fswab64(buffer->la_size);
#line 3552
  bdev->md.la_size_sect = tmp___11;
#line 3553
  i = 0;
#line 3553
  goto ldv_46000;
  ldv_45999: 
#line 3554
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 3554
  bdev->md.uuid[i] = tmp___12;
#line 3553
  i = i + 1;
  ldv_46000: ;
#line 3553
  if (i <= 3) {
#line 3554
    goto ldv_45999;
  } else {

  }
#line 3555
  tmp___13 = __fswab32(buffer->flags);
#line 3555
  bdev->md.flags = tmp___13;
#line 3556
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 3556
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 3557
  tmp___15 = __fswab64(buffer->device_uuid);
#line 3557
  bdev->md.device_uuid = tmp___15;
#line 3559
  if (mdev->sync_conf.al_extents <= 6) {
#line 3560
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3563
  mutex_unlock(& mdev->md_io_mutex);
#line 3564
  put_ldev(mdev);
#line 3566
  return (rv);
}
}
#line 3569 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void debug_drbd_uuid(struct drbd_conf *mdev , enum drbd_uuid_index index ) 
{ 
  char *uuid_str[6U] ;
  struct _ddebug descriptor ;
  long tmp ;

  {
#line 3571
  uuid_str[0] = (char *)"CURRENT";
#line 3571
  uuid_str[1] = (char *)"BITMAP";
#line 3571
  uuid_str[2] = (char *)"HISTORY_START";
#line 3571
  uuid_str[3] = (char *)"HISTORY_END";
#line 3571
  uuid_str[4] = (char *)"SIZE";
#line 3571
  uuid_str[5] = (char *)"FLAGS";
#line 3580
  if ((unsigned int )index > 5U) {
#line 3581
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " uuid_index >= EXTENDED_SIZE\n");
#line 3582
    return;
  } else {

  }
#line 3585
  descriptor.modname = "drbd";
#line 3585
  descriptor.function = "debug_drbd_uuid";
#line 3585
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared";
#line 3585
  descriptor.format = " uuid[%s] now %016llX\n";
#line 3585
  descriptor.lineno = 3587U;
#line 3585
  descriptor.flags = 0U;
#line 3585
  descriptor.enabled = (char)0;
#line 3585
  tmp = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 3585
  if (tmp != 0L) {
#line 3585
    goto do_printk___0;
  } else {

  }
#line 3585
  goto out___0;
  do_printk___0: 
#line 3585
  dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev), " uuid[%s] now %016llX\n",
             uuid_str[(unsigned int )index], (mdev->ldev)->md.uuid[(unsigned int )index]);
  out___0: ;
#line 3587
  return;
}
}
#line 3609 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 3611
  tmp = test_and_set_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3611
  if (tmp == 0) {
#line 3612
    mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
  } else {

  }
#line 3613
  return;
}
}
#line 3616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3620
  i = 2;
#line 3620
  goto ldv_46019;
  ldv_46018: 
#line 3621
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3622
  debug_drbd_uuid(mdev, (enum drbd_uuid_index )(i + 1));
#line 3620
  i = i + 1;
  ldv_46019: ;
#line 3620
  if (i <= 2) {
#line 3621
    goto ldv_46018;
  } else {

  }

#line 3625
  return;
}
}
#line 3626 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3628
  if (idx == 0) {
#line 3629
    if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 3630
      val = val | 1ULL;
    } else {
#line 3632
      val = val & 0xfffffffffffffffeULL;
    }
#line 3634
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3637
  (mdev->ldev)->md.uuid[idx] = val;
#line 3638
  debug_drbd_uuid(mdev, (enum drbd_uuid_index )idx);
#line 3639
  drbd_md_mark_dirty(mdev);
#line 3640
  return;
}
}
#line 3643 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3645
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3646
    drbd_uuid_move_history(mdev);
#line 3647
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
#line 3648
    debug_drbd_uuid(mdev, UI_HISTORY_START);
  } else {

  }
#line 3650
  _drbd_uuid_set(mdev, idx, val);
#line 3651
  return;
}
}
#line 3660 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;

  {
#line 3664
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Creating new current UUID\n");
#line 3665
  if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3665
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->md.uuid[UI_BITMAP] == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3665);
  } else {

  }
#line 3666
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3667
  debug_drbd_uuid(mdev, UI_BITMAP);
#line 3669
  get_random_bytes((void *)(& val), 8);
#line 3670
  _drbd_uuid_set(mdev, 0, val);
#line 3671
  return;
}
}
#line 3673 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 3675
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3676
    return;
  } else {

  }
#line 3678
  if (val == 0ULL) {
#line 3679
    drbd_uuid_move_history(mdev);
#line 3680
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3681
    (mdev->ldev)->md.uuid[1] = 0ULL;
#line 3682
    debug_drbd_uuid(mdev, UI_HISTORY_START);
#line 3683
    debug_drbd_uuid(mdev, UI_BITMAP);
  } else {
#line 3685
    if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3686
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID already set");
    } else {

    }
#line 3688
    (mdev->ldev)->md.uuid[1] = val;
#line 3689
    (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 3691
    debug_drbd_uuid(mdev, UI_BITMAP);
  }
#line 3693
  drbd_md_mark_dirty(mdev);
#line 3694
  return;
}
}
#line 3702 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3704
  rv = -5;
#line 3706
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3706
  if (tmp != 0) {
#line 3707
    drbd_md_set_flag(mdev, 8);
#line 3708
    drbd_md_sync(mdev);
#line 3709
    drbd_bm_set_all(mdev);
#line 3711
    rv = drbd_bm_write(mdev);
#line 3713
    if (rv == 0) {
#line 3714
      drbd_md_clear_flag(mdev, 8);
#line 3715
      drbd_md_sync(mdev);
    } else {

    }
#line 3718
    put_ldev(mdev);
  } else {

  }
#line 3721
  return (rv);
}
}
#line 3730 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3732
  rv = -5;
#line 3734
  drbd_resume_al(mdev);
#line 3735
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3735
  if (tmp != 0) {
#line 3736
    drbd_bm_clear_all(mdev);
#line 3737
    rv = drbd_bm_write(mdev);
#line 3738
    put_ldev(mdev);
  } else {

  }
#line 3741
  return (rv);
}
}
#line 3744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;

  {
#line 3746
  __mptr = (struct drbd_work  const  *)w;
#line 3746
  work = (struct bm_io_work *)__mptr;
#line 3749
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3749
  if (tmp != 0) {
#line 3749
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3749);
  } else {

  }
#line 3751
  drbd_bm_lock(mdev, work->why);
#line 3752
  rv = (*(work->io_fn))(mdev);
#line 3753
  drbd_bm_unlock(mdev);
#line 3755
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 3756
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3758
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3759
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3761
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3762
  work->why = 0;
#line 3764
  return (1);
}
}
#line 3767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 3769
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 4U) {
#line 3769
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3769);
  } else {

  }
#line 3774
  val.i = 0U;
#line 3774
  val.ldv_35401.disk = 0U;
#line 3774
  mask.i = 0U;
#line 3774
  mask.ldv_35401.disk = 15U;
#line 3774
  drbd_force_state(mdev, mask, val);
#line 3777
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 3777
  if (tmp == 0) {
#line 3777
    goto ldv_46065;
  } else {

  }
#line 3777
  tmp___0 = get_current();
#line 3777
  __wait.flags = 0U;
#line 3777
  __wait.private = (void *)tmp___0;
#line 3777
  __wait.func = & autoremove_wake_function;
#line 3777
  __wait.task_list.next = & __wait.task_list;
#line 3777
  __wait.task_list.prev = & __wait.task_list;
  ldv_46068: 
#line 3777
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3777
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 3777
  if (tmp___1 == 0) {
#line 3777
    goto ldv_46067;
  } else {

  }
#line 3777
  schedule();
#line 3777
  goto ldv_46068;
  ldv_46067: 
#line 3777
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46065: 
#line 3779
  clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 3780
  return (1);
}
}
#line 3783 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_go_diskless(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 3785
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 4U) {
#line 3785
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3785);
  } else {

  }
#line 3786
  tmp = test_and_set_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 3786
  if (tmp == 0) {
#line 3787
    drbd_queue_work(& mdev->data.work, & mdev->go_diskless);
  } else {

  }
#line 3788
  return;
}
}
#line 3805 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 3810
  tmp = get_current();
#line 3810
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 3810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3810);
  } else {

  }
#line 3812
  tmp___0 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 3812
  if (tmp___0 != 0) {
#line 3812
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3812);
  } else {

  }
#line 3813
  tmp___1 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 3813
  if (tmp___1 != 0) {
#line 3813
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3813);
  } else {

  }
#line 3814
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3814
  if (tmp___2 == 0) {
#line 3814
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3814);
  } else {

  }
#line 3815
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 3816
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 3819
  mdev->bm_io_work.io_fn = io_fn;
#line 3820
  mdev->bm_io_work.done = done;
#line 3821
  mdev->bm_io_work.why = why;
#line 3823
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 3824
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3824
  if (tmp___4 == 0) {
#line 3825
    tmp___3 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3825
    if (tmp___3 != 0) {
#line 3826
      set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
#line 3827
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {
#line 3829
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME avoided double queuing bm_io_work\n");
    }
  } else {

  }
#line 3830
  return;
}
}
#line 3842 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 3846
  tmp = get_current();
#line 3846
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 3846
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3846);
  } else {

  }
#line 3848
  drbd_suspend_io(mdev);
#line 3850
  drbd_bm_lock(mdev, why);
#line 3851
  rv = (*io_fn)(mdev);
#line 3852
  drbd_bm_unlock(mdev);
#line 3854
  drbd_resume_io(mdev);
#line 3856
  return (rv);
}
}
#line 3859 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3861
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 3862
    drbd_md_mark_dirty(mdev);
#line 3863
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 3865
  return;
}
}
#line 3867 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3869
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 3870
    drbd_md_mark_dirty(mdev);
#line 3871
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 3873
  return;
}
}
#line 3874 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 3876
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 3879 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3881
  mdev = (struct drbd_conf *)data;
#line 3883
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 3884
  return;
}
}
#line 3886 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 3888
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 3893
  drbd_md_sync(mdev);
#line 3894
  return (1);
}
}
#line 3914 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 3918
  tmp = rsp->count;
#line 3918
  rsp->count = rsp->count - 1UL;
#line 3918
  if (tmp == 0UL) {
#line 3919
    get_random_bytes((void *)(& refresh), 8);
#line 3920
    rsp->state = rsp->state + (unsigned long )refresh;
#line 3921
    rsp->count = 10000UL;
  } else {

  }
#line 3923
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 3924
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 3924
  return ((unsigned long )tmp___0);
}
}
#line 3928 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 3929
  _faults[0] = (char *)"Meta-data write";
#line 3929
  _faults[1] = (char *)"Meta-data read";
#line 3929
  _faults[2] = (char *)"Resync write";
#line 3929
  _faults[3] = (char *)"Resync read";
#line 3929
  _faults[4] = (char *)"Data write";
#line 3929
  _faults[5] = (char *)"Data read";
#line 3929
  _faults[6] = (char *)"Data read ahead";
#line 3929
  _faults[7] = (char *)"BM allocation";
#line 3929
  _faults[8] = (char *)"EE allocation";
#line 3929
  _faults[9] = (char *)"receive data corruption";
#line 3942
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 3946 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 3948
  rrs.state = 0UL;
#line 3948
  rrs.count = 0UL;
#line 3950
  if (fault_devs == 0) {
#line 3950
    goto _L;
  } else {
#line 3950
    tmp = mdev_to_minor(mdev);
#line 3950
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 3950
      tmp___0 = _drbd_fault_random(& rrs);
#line 3950
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 3950
        tmp___1 = 1;
      } else {
#line 3950
        tmp___1 = 0;
      }
    } else {
#line 3950
      tmp___1 = 0;
    }
  }
#line 3950
  ret = (unsigned int )tmp___1;
#line 3955
  if (ret != 0U) {
#line 3956
    fault_count = fault_count + 1;
#line 3958
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 3958
    if (tmp___3 != 0) {
#line 3959
      tmp___2 = _drbd_fault_str(type);
#line 3959
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 3963
  return (ret);
}
}
#line 3967 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 3972
  buildtag[0] = '\000';
#line 3972
  tmp = 1U;
#line 3972
  while (1) {
#line 3972
    if (tmp >= 38U) {
#line 3972
      break;
    } else {

    }
#line 3972
    buildtag[tmp] = (char)0;
#line 3972
    tmp = tmp + 1U;
  }
#line 3974
  if ((int )((signed char )buildtag[0]) == 0) {
#line 3976
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 3977
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 3980
      buildtag[0] = 98;
    }
  } else {

  }
#line 3983
  return ((char const   *)(& buildtag));
}
}
#line 4031 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_65_p1 ;
  int res_drbd_open_65 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_66_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_73_p1 ;
  void *var_drbd_notify_sys_73_p2 ;
  unsigned long var_md_sync_timer_fn_102_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4280
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4227
  LDV_IN_INTERRUPT = 1;
#line 4236
  ldv_initialize();
#line 4263
  ldv_handler_precall();
#line 4264
  tmp = drbd_init();
#line 4264
  if (tmp != 0) {
#line 4265
    goto ldv_final;
  } else {

  }
#line 4287
  goto ldv_46196;
  ldv_46195: 
#line 4291
  tmp___0 = nondet_int();
#line 4291
  switch (tmp___0) {
  case 0: ;
#line 4296
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4322
    ldv_handler_precall();
#line 4323
    res_drbd_open_65 = drbd_open(var_group1, var_drbd_open_65_p1);
#line 4324
    ldv_check_return_value(res_drbd_open_65);
#line 4325
    if (res_drbd_open_65 != 0) {
#line 4326
      goto ldv_module_exit;
    } else {

    }
#line 4344
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4350
  goto ldv_46190;
  case 1: ;
#line 4354
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4380
    ldv_handler_precall();
#line 4381
    drbd_release(var_group2, var_drbd_release_66_p1);
#line 4399
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4405
  goto ldv_46190;
  case 2: 
#line 4435
  ldv_handler_precall();
#line 4436
  drbd_notify_sys(var_group3, var_drbd_notify_sys_73_p1, var_drbd_notify_sys_73_p2);
#line 4460
  goto ldv_46190;
  case 3: 
#line 4496
  ldv_handler_precall();
#line 4497
  md_sync_timer_fn(var_md_sync_timer_fn_102_p0);
#line 4515
  goto ldv_46190;
  default: ;
#line 4516
  goto ldv_46190;
  }
  ldv_46190: ;
  ldv_46196: 
#line 4287
  tmp___1 = nondet_int();
#line 4287
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4289
    goto ldv_46195;
  } else {

  }

  ldv_module_exit: 
#line 4549
  ldv_handler_precall();
#line 4550
  drbd_cleanup();
  ldv_final: 
#line 4570
  ldv_check_final_state();
#line 4573
  return;
}
}
#line 4577 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_1(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4582
  ldv_module_put(ldv_func_arg1);
#line 4583
  return;
}
}
#line 4585 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
__inline static int ldv_try_module_get_2(struct module *module ) 
{ 
  int tmp ;

  {
#line 4590
  tmp = ldv_try_module_get(module);
#line 4590
  return (tmp);
}
}
#line 4593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_3(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4598
  ldv_module_put(ldv_func_arg1);
#line 4599
  return;
}
}
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[22U]  = 
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT"};
#line 60 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 66
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 78
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 102
  return ((unsigned int )s <= 21U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 107
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 112
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) 
{ 


  {
#line 117
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 214 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 92 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 124
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 174 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 180
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 181
  __len = (size_t )len;
#line 181
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 184
  return;
}
}
#line 228 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 234
  tmp = __bitmap_equal(src1, src2, nbits);
#line 234
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 70 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 74
extern void call_usermodehelper_setfns(struct subprocess_info * , int (*)(struct subprocess_info * ) ,
                                       void (*)(struct subprocess_info * ) , void * ) ;
#line 80
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 87 "include/linux/kmod.h"
__inline static int call_usermodehelper_fns(char *path , char **argv , char **envp ,
                                            enum umh_wait wait , int (*init)(struct subprocess_info * ) ,
                                            void (*cleanup)(struct subprocess_info * ) ,
                                            void *data ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 93
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 95
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 97
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 98
    return (-12);
  } else {

  }
#line 100
  call_usermodehelper_setfns(info, init, cleanup, data);
#line 102
  tmp = call_usermodehelper_exec(info, wait);
#line 102
  return (tmp);
}
}
#line 106 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  int tmp ;

  {
#line 108
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 108
  return (tmp);
}
}
#line 207 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 504 "include/linux/module.h"
__inline static int ldv_try_module_get_2(struct module *module ) ;
#line 510
void ldv_module_put_5(struct module *ldv_func_arg1 ) ;
#line 514
void ldv_module_put_6(struct module *ldv_func_arg1 ) ;
#line 1938 "include/linux/fs.h"
extern struct file *filp_open(char const   * , int  , int  ) ;
#line 2004
extern int bd_claim(struct block_device * , void * ) ;
#line 137 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char * , void (*)(struct cn_msg * , struct netlink_skb_parms * ) ) ;
#line 138
extern void cn_del_callback(struct cb_id * ) ;
#line 139
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 397 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 858 "include/linux/blkdev.h"
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 859
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 863
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 872
extern int blk_stack_limits(struct queue_limits * , struct queue_limits * , sector_t  ) ;
#line 885
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 977 "include/linux/blkdev.h"
__inline static unsigned int queue_max_sectors(struct request_queue *q ) 
{ 


  {
#line 979
  return (q->limits.max_sectors);
}
}
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1501 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1888 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1891
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1895
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1895
  if (tmp___1 != 0UL) {
#line 1895
    __min1 = 34359738368UL;
#line 1895
    tmp___0 = drbd_md_first_sector(bdev);
#line 1895
    __min2 = tmp___0;
#line 1895
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1895
    s = 0UL;
  }
#line 1898
  goto ldv_43944;
  case -2: 
#line 1900
  __min1___0 = 34359738368UL;
#line 1900
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1900
  __min2___0 = tmp___2;
#line 1900
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1903
  __min1___1 = s;
#line 1903
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1903
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1906
  goto ldv_43944;
  default: 
#line 1908
  __min1___2 = 8587575296UL;
#line 1908
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1908
  __min2___2 = tmp___3;
#line 1908
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_43944: ;
#line 1911
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 75 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[81U]  = 
#line 75 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"on_no_data", 0, 4}, 
        {"c_plan_ahead", 0, 4}, 
        {"c_delay_target", 0, 4}, 
        {"c_fill_target", 0, 4}, 
        {"c_max_rate", 0, 4}, 
        {"c_min_rate", 0, 4}};
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 52
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 53
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_44687;
  ldv_44686: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_44684;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_44684: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_44687: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_44686;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  unsigned short *tmp___5 ;
  u16 tmp___6 ;

  {
#line 20
  goto ldv_44748;
  ldv_44747: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_44716;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_44716;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_44716;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_44716;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_44716;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_44716;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44716;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44716;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44716;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_44716;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44716;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_44716;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_44716: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_44748: 
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___6 = get_unaligned_le16((void const   *)tmp___5);
#line 20
  tag = (int )tmp___6;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_44747;
  } else {

  }

#line 20
  return (1);
}
}
#line 67
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 67 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  unsigned short *tmp___16 ;
  u16 tmp___17 ;

  {
#line 38
  goto ldv_44851;
  ldv_44850: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_44786;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_44786;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_44786;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_44786;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_44786;
  case 14: 
#line 38
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___1;
#line 38
  goto ldv_44786;
  case 15: 
#line 38
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___2;
#line 38
  goto ldv_44786;
  case 16: 
#line 38
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___3;
#line 38
  goto ldv_44786;
  case 17: 
#line 38
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___4;
#line 38
  goto ldv_44786;
  case 18: 
#line 38
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___5;
#line 38
  goto ldv_44786;
  case 19: 
#line 38
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___6;
#line 38
  goto ldv_44786;
  case 20: 
#line 38
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___7;
#line 38
  goto ldv_44786;
  case 21: 
#line 38
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___8;
#line 38
  goto ldv_44786;
  case 22: 
#line 38
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___9;
#line 38
  goto ldv_44786;
  case 24: 
#line 38
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___10;
#line 38
  goto ldv_44786;
  case 25: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___11;
#line 38
  goto ldv_44786;
  case 26: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___12;
#line 38
  goto ldv_44786;
  case 39: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___13;
#line 38
  goto ldv_44786;
  case 40: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___14;
#line 38
  goto ldv_44786;
  case 67: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___15;
#line 38
  goto ldv_44786;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44786;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44786;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44786;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44786;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44786;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44786;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_44786;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_44786: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_44851: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___17 = get_unaligned_le16((void const   *)tmp___16);
#line 38
  tag = (int )tmp___17;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_44850;
  } else {

  }

#line 38
  return (1);
}
}
#line 75
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 75 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 71
  goto ldv_44885;
  ldv_44884: 
#line 71
  tmp = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 71
  dlen = (int )tmp___0;
#line 71
  switch (tag & 8191) {
  case 29: 
#line 71
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 71
  goto ldv_44880;
  case 68: 
#line 71
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_44880;
  case 69: 
#line 71
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_44880;
  default: ;
#line 71
  if ((tag & 8192) != 0) {
#line 71
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 71
    return (0);
  } else {

  }
  }
  ldv_44880: 
#line 71
  tags = tags + (unsigned long )dlen;
  ldv_44885: 
#line 71
  tmp___1 = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 71
  tag = (int )tmp___2;
#line 71
  if (tag != 0) {
#line 72
    goto ldv_44884;
  } else {

  }

#line 71
  return (1);
}
}
#line 96
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 96 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  unsigned short *tmp___10 ;
  u16 tmp___11 ;

  {
#line 77
  goto ldv_44941;
  ldv_44940: 
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 77
  dlen = (int )tmp___0;
#line 77
  switch (tag & 8191) {
  case 30: 
#line 77
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->rate = (int )tmp___1;
#line 77
  goto ldv_44899;
  case 31: 
#line 77
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->after = (int )tmp___2;
#line 77
  goto ldv_44899;
  case 32: 
#line 77
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->al_extents = (int )tmp___3;
#line 77
  goto ldv_44899;
  case 52: ;
#line 77
  if (dlen > 64) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->verify_alg_len = dlen;
#line 77
  __min1 = (size_t )dlen;
#line 77
  __min2 = 64UL;
#line 77
  __len = __min1 < __min2 ? __min1 : __min2;
#line 77
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 77
  goto ldv_44899;
  case 51: ;
#line 77
  if (dlen > 32) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->cpu_mask_len = dlen;
#line 77
  __min1___0 = (size_t )dlen;
#line 77
  __min2___0 = 32UL;
#line 77
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 77
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 77
  goto ldv_44899;
  case 64: ;
#line 77
  if (dlen > 64) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->csums_alg_len = dlen;
#line 77
  __min1___1 = (size_t )dlen;
#line 77
  __min2___1 = 64UL;
#line 77
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 77
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 77
  goto ldv_44899;
  case 65: 
#line 77
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 77
  goto ldv_44899;
  case 75: 
#line 77
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->on_no_data = (int )tmp___4;
#line 77
  goto ldv_44899;
  case 76: 
#line 77
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_plan_ahead = (int )tmp___5;
#line 77
  goto ldv_44899;
  case 77: 
#line 77
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_delay_target = (int )tmp___6;
#line 77
  goto ldv_44899;
  case 78: 
#line 77
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_fill_target = (int )tmp___7;
#line 77
  goto ldv_44899;
  case 79: 
#line 77
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_max_rate = (int )tmp___8;
#line 77
  goto ldv_44899;
  case 80: 
#line 77
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_min_rate = (int )tmp___9;
#line 77
  goto ldv_44899;
  default: ;
#line 77
  if ((tag & 8192) != 0) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 77
    return (0);
  } else {

  }
  }
  ldv_44899: 
#line 77
  tags = tags + (unsigned long )dlen;
  ldv_44941: 
#line 77
  tmp___10 = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___11 = get_unaligned_le16((void const   *)tmp___10);
#line 77
  tag = (int )tmp___11;
#line 77
  if (tag != 0) {
#line 78
    goto ldv_44940;
  } else {

  }

#line 77
  return (1);
}
}
#line 140
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 140 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 138
  goto ldv_45240;
  ldv_45239: 
#line 138
  tmp = tags;
#line 138
  tags = tags + 1;
#line 138
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 138
  dlen = (int )tmp___0;
#line 138
  switch (tag & 8191) {
  case 66: 
#line 138
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 138
  goto ldv_45237;
  default: ;
#line 138
  if ((tag & 8192) != 0) {
#line 138
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 138
    return (0);
  } else {

  }
  }
  ldv_45237: 
#line 138
  tags = tags + (unsigned long )dlen;
  ldv_45240: 
#line 138
  tmp___1 = tags;
#line 138
  tags = tags + 1;
#line 138
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 138
  tag = (int )tmp___2;
#line 138
  if (tag != 0) {
#line 139
    goto ldv_45239;
  } else {

  }

#line 138
  return (1);
}
}
#line 144
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 144 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 142
  goto ldv_45257;
  ldv_45256: 
#line 142
  tmp = tags;
#line 142
  tags = tags + 1;
#line 142
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 142
  dlen = (int )tmp___0;
#line 142
  switch (tag & 8191) {
  case 63: 
#line 142
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 142
  goto ldv_45254;
  default: ;
#line 142
  if ((tag & 8192) != 0) {
#line 142
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 142
    return (0);
  } else {

  }
  }
  ldv_45254: 
#line 142
  tags = tags + (unsigned long )dlen;
  ldv_45257: 
#line 142
  tmp___1 = tags;
#line 142
  tags = tags + 1;
#line 142
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 142
  tag = (int )tmp___2;
#line 142
  if (tag != 0) {
#line 143
    goto ldv_45256;
  } else {

  }

#line 142
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_45302;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_45302;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_45302;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_45302;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45302;
  }
  ldv_45302: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_45309;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_45309;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_45309;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_45309;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45309;
  }
  ldv_45309: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_45316;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_45316;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_45316;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_45316;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45316;
  }
  ldv_45316: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_45323;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_45323;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_45323;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_45323;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45323;
  }
  ldv_45323: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_45330;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_45330;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_45330;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_45330;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45330;
  }
  ldv_45330: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_45340;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_45340;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_45340;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_45340;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45340;
  }
  ldv_45340: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_45347;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_45347;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_45347;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_45347;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45347;
  }
  ldv_45347: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_45357;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_45357;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_45357;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_45357;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45357;
  }
  ldv_45357: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_45364;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_45364;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_45364;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_45364;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45364;
  }
  ldv_45364: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_45371;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_45371;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_45371;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_45371;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45371;
  }
  ldv_45371: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_45378;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_45378;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_45378;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_45378;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45378;
  }
  ldv_45378: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_45385;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_45385;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_45385;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_45385;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45385;
  }
  ldv_45385: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_45392;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_45392;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_45392;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_45392;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45392;
  }
  ldv_45392: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_45399;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_45399;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_45399;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_45399;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45399;
  }
  ldv_45399: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_45406;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_45406;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_45406;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_45406;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45406;
  }
  ldv_45406: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_45413;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_45413;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_45413;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_45413;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45413;
  }
  ldv_45413: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_45420;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_45420;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_45420;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_45420;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45420;
  }
  ldv_45420: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_45427;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_45427;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_45427;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_45427;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45427;
  }
  ldv_45427: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_45434;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_45434;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_45434;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_45434;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45434;
  }
  ldv_45434: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_45441;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_45441;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_45441;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_45441;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45441;
  }
  ldv_45441: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_45448;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_45448;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_45448;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_45448;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45448;
  }
  ldv_45448: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_45455;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_45455;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_45455;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_45455;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45455;
  }
  ldv_45455: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_45462;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_45462;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_45462;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_45462;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45462;
  }
  ldv_45462: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_45469;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_45469;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_45469;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_45469;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45469;
  }
  ldv_45469: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_45476;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_45476;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_45476;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_45476;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45476;
  }
  ldv_45476: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_45483;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_45483;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_45483;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_45483;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45483;
  }
  ldv_45483: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_45490;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_45490;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_45490;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_45490;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45490;
  }
  ldv_45490: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_45497;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_45497;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_45497;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_45497;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45497;
  }
  ldv_45497: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_45504;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_45504;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_45504;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_45504;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45504;
  }
  ldv_45504: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 67
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 67 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  unsigned short *tmp___41 ;
  void *__gu_p___57 ;
  unsigned short *tmp___42 ;
  void *__gu_p___58 ;
  unsigned short *tmp___43 ;
  void *__gu_p___59 ;
  unsigned short *tmp___44 ;
  void *__gu_p___60 ;
  unsigned short *tmp___45 ;
  void *__gu_p___61 ;
  unsigned short *tmp___46 ;
  void *__gu_p___62 ;
  unsigned short *tmp___47 ;
  void *__gu_p___63 ;
  unsigned short *tmp___48 ;
  void *__gu_p___64 ;
  unsigned short *tmp___49 ;
  void *__gu_p___65 ;
  unsigned short *tmp___50 ;
  void *__gu_p___66 ;
  unsigned short *tmp___51 ;
  void *__gu_p___67 ;
  unsigned short *tmp___52 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_45529;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_45529;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_45529;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_45529;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45529;
  }
  ldv_45529: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_45536;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_45536;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_45536;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_45536;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45536;
  }
  ldv_45536: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_45546;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_45546;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_45546;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_45546;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45546;
  }
  ldv_45546: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_45553;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_45553;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_45553;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_45553;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45553;
  }
  ldv_45553: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_45563;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_45563;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_45563;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_45563;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45563;
  }
  ldv_45563: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_45570;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_45570;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_45570;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_45570;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45570;
  }
  ldv_45570: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_45580;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_45580;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_45580;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_45580;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45580;
  }
  ldv_45580: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_45587;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_45587;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_45587;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_45587;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45587;
  }
  ldv_45587: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_45597;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_45597;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_45597;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_45597;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45597;
  }
  ldv_45597: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_45604;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_45604;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_45604;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_45604;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45604;
  }
  ldv_45604: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_45614;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_45614;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_45614;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_45614;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45614;
  }
  ldv_45614: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_45621;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_45621;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_45621;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_45621;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45621;
  }
  ldv_45621: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_45628;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_45628;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_45628;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_45628;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45628;
  }
  ldv_45628: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_45635;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_45635;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_45635;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_45635;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45635;
  }
  ldv_45635: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_45642;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_45642;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_45642;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_45642;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45642;
  }
  ldv_45642: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_45649;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_45649;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_45649;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_45649;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45649;
  }
  ldv_45649: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_45656;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_45656;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_45656;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_45656;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45656;
  }
  ldv_45656: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_45663;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_45663;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_45663;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_45663;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45663;
  }
  ldv_45663: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_45670;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_45670;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_45670;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_45670;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45670;
  }
  ldv_45670: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_45677;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_45677;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_45677;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_45677;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45677;
  }
  ldv_45677: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_45684;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_45684;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_45684;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_45684;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45684;
  }
  ldv_45684: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_45691;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_45691;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_45691;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_45691;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45691;
  }
  ldv_45691: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_45698;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_45698;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_45698;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_45698;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45698;
  }
  ldv_45698: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_45705;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_45705;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_45705;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_45705;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45705;
  }
  ldv_45705: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_45712;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_45712;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_45712;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_45712;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45712;
  }
  ldv_45712: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_45719;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_45719;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_45719;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_45719;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45719;
  }
  ldv_45719: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_45726;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_45726;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_45726;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_45726;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45726;
  }
  ldv_45726: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_45733;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_45733;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_45733;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_45733;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45733;
  }
  ldv_45733: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_45740;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_45740;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_45740;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_45740;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45740;
  }
  ldv_45740: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_45747;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_45747;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_45747;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_45747;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45747;
  }
  ldv_45747: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_45754;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_45754;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_45754;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_45754;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45754;
  }
  ldv_45754: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_45761;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_45761;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_45761;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_45761;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45761;
  }
  ldv_45761: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_45768;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_45768;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_45768;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_45768;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45768;
  }
  ldv_45768: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_45775;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_45775;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_45775;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_45775;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45775;
  }
  ldv_45775: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_45782;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_45782;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_45782;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_45782;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45782;
  }
  ldv_45782: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_45789;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_45789;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_45789;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_45789;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45789;
  }
  ldv_45789: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_45796;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_45796;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_45796;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_45796;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45796;
  }
  ldv_45796: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_45803;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_45803;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_45803;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_45803;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45803;
  }
  ldv_45803: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_45810;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_45810;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_45810;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_45810;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45810;
  }
  ldv_45810: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_45817;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_45817;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_45817;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_45817;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45817;
  }
  ldv_45817: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_45824;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_45824;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_45824;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_45824;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45824;
  }
  ldv_45824: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_45831;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_45831;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_45831;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_45831;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45831;
  }
  ldv_45831: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_45838;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_45838;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_45838;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_45838;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45838;
  }
  ldv_45838: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_45845;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_45845;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_45845;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_45845;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45845;
  }
  ldv_45845: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_45852;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_45852;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_45852;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_45852;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45852;
  }
  ldv_45852: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_45859;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_45859;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_45859;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_45859;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45859;
  }
  ldv_45859: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_45866;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_45866;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_45866;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_45866;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45866;
  }
  ldv_45866: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_45873;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_45873;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_45873;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_45873;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45873;
  }
  ldv_45873: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_45880;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_45880;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_45880;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_45880;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45880;
  }
  ldv_45880: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_45887;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_45887;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_45887;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_45887;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45887;
  }
  ldv_45887: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_45894;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_45894;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_45894;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_45894;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45894;
  }
  ldv_45894: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_45901;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_45901;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_45901;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_45901;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45901;
  }
  ldv_45901: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_45908;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_45908;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_45908;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_45908;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45908;
  }
  ldv_45908: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_45915;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_45915;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_45915;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_45915;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45915;
  }
  ldv_45915: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_45922;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_45922;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_45922;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_45922;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45922;
  }
  ldv_45922: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 60U;
#line 38
  goto ldv_45929;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___54);
#line 38
  goto ldv_45929;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___54);
#line 38
  goto ldv_45929;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___54);
#line 38
  goto ldv_45929;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45929;
  }
  ldv_45929: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 1U;
#line 38
  goto ldv_45936;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___55);
#line 38
  goto ldv_45936;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___55);
#line 38
  goto ldv_45936;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___55);
#line 38
  goto ldv_45936;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45936;
  }
  ldv_45936: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___56 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = 27U;
#line 38
  goto ldv_45943;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___56);
#line 38
  goto ldv_45943;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___56);
#line 38
  goto ldv_45943;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___56);
#line 38
  goto ldv_45943;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45943;
  }
  ldv_45943: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 1U;
#line 38
  goto ldv_45950;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___57);
#line 38
  goto ldv_45950;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___57);
#line 38
  goto ldv_45950;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___57);
#line 38
  goto ldv_45950;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45950;
  }
  ldv_45950: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 28U;
#line 38
  goto ldv_45957;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___58);
#line 38
  goto ldv_45957;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___58);
#line 38
  goto ldv_45957;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___58);
#line 38
  goto ldv_45957;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45957;
  }
  ldv_45957: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___59 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = 1U;
#line 38
  goto ldv_45964;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___59);
#line 38
  goto ldv_45964;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___59);
#line 38
  goto ldv_45964;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___59);
#line 38
  goto ldv_45964;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45964;
  }
  ldv_45964: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 41U;
#line 38
  goto ldv_45971;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___60);
#line 38
  goto ldv_45971;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___60);
#line 38
  goto ldv_45971;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___60);
#line 38
  goto ldv_45971;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45971;
  }
  ldv_45971: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 1U;
#line 38
  goto ldv_45978;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___61);
#line 38
  goto ldv_45978;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___61);
#line 38
  goto ldv_45978;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___61);
#line 38
  goto ldv_45978;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45978;
  }
  ldv_45978: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___62 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = 61U;
#line 38
  goto ldv_45985;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___62);
#line 38
  goto ldv_45985;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___62);
#line 38
  goto ldv_45985;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___62);
#line 38
  goto ldv_45985;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45985;
  }
  ldv_45985: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 1U;
#line 38
  goto ldv_45992;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___63);
#line 38
  goto ldv_45992;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___63);
#line 38
  goto ldv_45992;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___63);
#line 38
  goto ldv_45992;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45992;
  }
  ldv_45992: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 62U;
#line 38
  goto ldv_45999;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___64);
#line 38
  goto ldv_45999;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___64);
#line 38
  goto ldv_45999;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___64);
#line 38
  goto ldv_45999;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_45999;
  }
  ldv_45999: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 1U;
#line 38
  goto ldv_46006;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___65);
#line 38
  goto ldv_46006;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___65);
#line 38
  goto ldv_46006;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___65);
#line 38
  goto ldv_46006;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46006;
  }
  ldv_46006: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 70U;
#line 38
  goto ldv_46013;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___66);
#line 38
  goto ldv_46013;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___66);
#line 38
  goto ldv_46013;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___66);
#line 38
  goto ldv_46013;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46013;
  }
  ldv_46013: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 1U;
#line 38
  goto ldv_46020;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___67);
#line 38
  goto ldv_46020;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___67);
#line 38
  goto ldv_46020;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___67);
#line 38
  goto ldv_46020;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46020;
  }
  ldv_46020: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 96
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 96 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;
  void *__gu_p___16 ;
  unsigned short *tmp___13 ;
  void *__gu_p___17 ;
  unsigned short *tmp___14 ;
  void *__gu_p___18 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  void *__gu_p___22 ;
  unsigned short *tmp___17 ;
  void *__gu_p___23 ;
  unsigned short *tmp___18 ;
  void *__gu_p___24 ;
  void *__gu_p___25 ;
  unsigned short *tmp___19 ;
  void *__gu_p___26 ;
  unsigned short *tmp___20 ;
  void *__gu_p___27 ;
  void *__gu_p___28 ;
  unsigned short *tmp___21 ;
  void *__gu_p___29 ;
  unsigned short *tmp___22 ;
  void *__gu_p___30 ;
  void *__gu_p___31 ;
  unsigned short *tmp___23 ;
  void *__gu_p___32 ;
  unsigned short *tmp___24 ;
  void *__gu_p___33 ;

  {
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p = (void *)tmp;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p) = 30U;
#line 77
  goto ldv_46103;
  case 2UL: 
#line 77
  put_unaligned_le16(30, __gu_p);
#line 77
  goto ldv_46103;
  case 4UL: 
#line 77
  put_unaligned_le32(30U, __gu_p);
#line 77
  goto ldv_46103;
  case 8UL: 
#line 77
  put_unaligned_le64(30ULL, __gu_p);
#line 77
  goto ldv_46103;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46103;
  }
  ldv_46103: 
#line 77
  tmp___0 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___0 = (void *)tmp___0;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___0) = 4U;
#line 77
  goto ldv_46110;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___0);
#line 77
  goto ldv_46110;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___0);
#line 77
  goto ldv_46110;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___0);
#line 77
  goto ldv_46110;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46110;
  }
  ldv_46110: 
#line 77
  __gu_p___1 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 77
  goto ldv_46117;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 77
  goto ldv_46117;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 77
  goto ldv_46117;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 77
  goto ldv_46117;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46117;
  }
  ldv_46117: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___1 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___2 = (void *)tmp___1;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___2) = 31U;
#line 77
  goto ldv_46124;
  case 2UL: 
#line 77
  put_unaligned_le16(31, __gu_p___2);
#line 77
  goto ldv_46124;
  case 4UL: 
#line 77
  put_unaligned_le32(31U, __gu_p___2);
#line 77
  goto ldv_46124;
  case 8UL: 
#line 77
  put_unaligned_le64(31ULL, __gu_p___2);
#line 77
  goto ldv_46124;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46124;
  }
  ldv_46124: 
#line 77
  tmp___2 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___3 = (void *)tmp___2;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___3) = 4U;
#line 77
  goto ldv_46131;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___3);
#line 77
  goto ldv_46131;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___3);
#line 77
  goto ldv_46131;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___3);
#line 77
  goto ldv_46131;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46131;
  }
  ldv_46131: 
#line 77
  __gu_p___4 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 77
  goto ldv_46138;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 77
  goto ldv_46138;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 77
  goto ldv_46138;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 77
  goto ldv_46138;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46138;
  }
  ldv_46138: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___3 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___5 = (void *)tmp___3;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___5) = 32U;
#line 77
  goto ldv_46145;
  case 2UL: 
#line 77
  put_unaligned_le16(32, __gu_p___5);
#line 77
  goto ldv_46145;
  case 4UL: 
#line 77
  put_unaligned_le32(32U, __gu_p___5);
#line 77
  goto ldv_46145;
  case 8UL: 
#line 77
  put_unaligned_le64(32ULL, __gu_p___5);
#line 77
  goto ldv_46145;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46145;
  }
  ldv_46145: 
#line 77
  tmp___4 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___6 = (void *)tmp___4;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___6) = 4U;
#line 77
  goto ldv_46152;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___6);
#line 77
  goto ldv_46152;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___6);
#line 77
  goto ldv_46152;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___6);
#line 77
  goto ldv_46152;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46152;
  }
  ldv_46152: 
#line 77
  __gu_p___7 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 77
  goto ldv_46159;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 77
  goto ldv_46159;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_46159;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_46159;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46159;
  }
  ldv_46159: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___5 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___8 = (void *)tmp___5;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___8) = 52U;
#line 77
  goto ldv_46166;
  case 2UL: 
#line 77
  put_unaligned_le16(49204, __gu_p___8);
#line 77
  goto ldv_46166;
  case 4UL: 
#line 77
  put_unaligned_le32(49204U, __gu_p___8);
#line 77
  goto ldv_46166;
  case 8UL: 
#line 77
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 77
  goto ldv_46166;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46166;
  }
  ldv_46166: 
#line 77
  tmp___6 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___9 = (void *)tmp___6;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 77
  goto ldv_46173;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 77
  goto ldv_46173;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 77
  goto ldv_46173;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 77
  goto ldv_46173;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46173;
  }
  ldv_46173: 
#line 77
  __len = (size_t )arg->verify_alg_len;
#line 77
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 77
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 77
  tmp___7 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___10 = (void *)tmp___7;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___10) = 51U;
#line 77
  goto ldv_46183;
  case 2UL: 
#line 77
  put_unaligned_le16(49203, __gu_p___10);
#line 77
  goto ldv_46183;
  case 4UL: 
#line 77
  put_unaligned_le32(49203U, __gu_p___10);
#line 77
  goto ldv_46183;
  case 8UL: 
#line 77
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 77
  goto ldv_46183;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46183;
  }
  ldv_46183: 
#line 77
  tmp___8 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___11 = (void *)tmp___8;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 77
  goto ldv_46190;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 77
  goto ldv_46190;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 77
  goto ldv_46190;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 77
  goto ldv_46190;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46190;
  }
  ldv_46190: 
#line 77
  __len___0 = (size_t )arg->cpu_mask_len;
#line 77
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 77
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 77
  tmp___9 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___12 = (void *)tmp___9;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___12) = 64U;
#line 77
  goto ldv_46200;
  case 2UL: 
#line 77
  put_unaligned_le16(49216, __gu_p___12);
#line 77
  goto ldv_46200;
  case 4UL: 
#line 77
  put_unaligned_le32(49216U, __gu_p___12);
#line 77
  goto ldv_46200;
  case 8UL: 
#line 77
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 77
  goto ldv_46200;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46200;
  }
  ldv_46200: 
#line 77
  tmp___10 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___13 = (void *)tmp___10;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 77
  goto ldv_46207;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 77
  goto ldv_46207;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 77
  goto ldv_46207;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 77
  goto ldv_46207;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46207;
  }
  ldv_46207: 
#line 77
  __len___1 = (size_t )arg->csums_alg_len;
#line 77
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 77
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 77
  tmp___11 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___14 = (void *)tmp___11;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___14) = 65U;
#line 77
  goto ldv_46217;
  case 2UL: 
#line 77
  put_unaligned_le16(32833, __gu_p___14);
#line 77
  goto ldv_46217;
  case 4UL: 
#line 77
  put_unaligned_le32(32833U, __gu_p___14);
#line 77
  goto ldv_46217;
  case 8UL: 
#line 77
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 77
  goto ldv_46217;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46217;
  }
  ldv_46217: 
#line 77
  tmp___12 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___15 = (void *)tmp___12;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___15) = 1U;
#line 77
  goto ldv_46224;
  case 2UL: 
#line 77
  put_unaligned_le16(1, __gu_p___15);
#line 77
  goto ldv_46224;
  case 4UL: 
#line 77
  put_unaligned_le32(1U, __gu_p___15);
#line 77
  goto ldv_46224;
  case 8UL: 
#line 77
  put_unaligned_le64(1ULL, __gu_p___15);
#line 77
  goto ldv_46224;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46224;
  }
  ldv_46224: 
#line 77
  *((char *)tags) = (char )arg->use_rle;
#line 77
  tags = tags + 1U;
#line 77
  tmp___13 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___16 = (void *)tmp___13;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___16) = 75U;
#line 77
  goto ldv_46231;
  case 2UL: 
#line 77
  put_unaligned_le16(75, __gu_p___16);
#line 77
  goto ldv_46231;
  case 4UL: 
#line 77
  put_unaligned_le32(75U, __gu_p___16);
#line 77
  goto ldv_46231;
  case 8UL: 
#line 77
  put_unaligned_le64(75ULL, __gu_p___16);
#line 77
  goto ldv_46231;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46231;
  }
  ldv_46231: 
#line 77
  tmp___14 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___17 = (void *)tmp___14;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___17) = 4U;
#line 77
  goto ldv_46238;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___17);
#line 77
  goto ldv_46238;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___17);
#line 77
  goto ldv_46238;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___17);
#line 77
  goto ldv_46238;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46238;
  }
  ldv_46238: 
#line 77
  __gu_p___18 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___18) = (unsigned char )arg->on_no_data;
#line 77
  goto ldv_46245;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->on_no_data), __gu_p___18);
#line 77
  goto ldv_46245;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->on_no_data, __gu_p___18);
#line 77
  goto ldv_46245;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->on_no_data, __gu_p___18);
#line 77
  goto ldv_46245;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46245;
  }
  ldv_46245: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___15 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___19 = (void *)tmp___15;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___19) = 76U;
#line 77
  goto ldv_46252;
  case 2UL: 
#line 77
  put_unaligned_le16(76, __gu_p___19);
#line 77
  goto ldv_46252;
  case 4UL: 
#line 77
  put_unaligned_le32(76U, __gu_p___19);
#line 77
  goto ldv_46252;
  case 8UL: 
#line 77
  put_unaligned_le64(76ULL, __gu_p___19);
#line 77
  goto ldv_46252;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46252;
  }
  ldv_46252: 
#line 77
  tmp___16 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___20 = (void *)tmp___16;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___20) = 4U;
#line 77
  goto ldv_46259;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___20);
#line 77
  goto ldv_46259;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___20);
#line 77
  goto ldv_46259;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___20);
#line 77
  goto ldv_46259;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46259;
  }
  ldv_46259: 
#line 77
  __gu_p___21 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___21) = (unsigned char )arg->c_plan_ahead;
#line 77
  goto ldv_46266;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_plan_ahead), __gu_p___21);
#line 77
  goto ldv_46266;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_plan_ahead, __gu_p___21);
#line 77
  goto ldv_46266;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_plan_ahead, __gu_p___21);
#line 77
  goto ldv_46266;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46266;
  }
  ldv_46266: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___17 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___22 = (void *)tmp___17;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___22) = 77U;
#line 77
  goto ldv_46273;
  case 2UL: 
#line 77
  put_unaligned_le16(77, __gu_p___22);
#line 77
  goto ldv_46273;
  case 4UL: 
#line 77
  put_unaligned_le32(77U, __gu_p___22);
#line 77
  goto ldv_46273;
  case 8UL: 
#line 77
  put_unaligned_le64(77ULL, __gu_p___22);
#line 77
  goto ldv_46273;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46273;
  }
  ldv_46273: 
#line 77
  tmp___18 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___23 = (void *)tmp___18;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___23) = 4U;
#line 77
  goto ldv_46280;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___23);
#line 77
  goto ldv_46280;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___23);
#line 77
  goto ldv_46280;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___23);
#line 77
  goto ldv_46280;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46280;
  }
  ldv_46280: 
#line 77
  __gu_p___24 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___24) = (unsigned char )arg->c_delay_target;
#line 77
  goto ldv_46287;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_delay_target), __gu_p___24);
#line 77
  goto ldv_46287;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_delay_target, __gu_p___24);
#line 77
  goto ldv_46287;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_delay_target, __gu_p___24);
#line 77
  goto ldv_46287;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46287;
  }
  ldv_46287: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___19 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___25 = (void *)tmp___19;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___25) = 78U;
#line 77
  goto ldv_46294;
  case 2UL: 
#line 77
  put_unaligned_le16(78, __gu_p___25);
#line 77
  goto ldv_46294;
  case 4UL: 
#line 77
  put_unaligned_le32(78U, __gu_p___25);
#line 77
  goto ldv_46294;
  case 8UL: 
#line 77
  put_unaligned_le64(78ULL, __gu_p___25);
#line 77
  goto ldv_46294;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46294;
  }
  ldv_46294: 
#line 77
  tmp___20 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___26 = (void *)tmp___20;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___26) = 4U;
#line 77
  goto ldv_46301;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___26);
#line 77
  goto ldv_46301;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___26);
#line 77
  goto ldv_46301;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___26);
#line 77
  goto ldv_46301;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46301;
  }
  ldv_46301: 
#line 77
  __gu_p___27 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___27) = (unsigned char )arg->c_fill_target;
#line 77
  goto ldv_46308;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_fill_target), __gu_p___27);
#line 77
  goto ldv_46308;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_fill_target, __gu_p___27);
#line 77
  goto ldv_46308;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_fill_target, __gu_p___27);
#line 77
  goto ldv_46308;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46308;
  }
  ldv_46308: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___21 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___28 = (void *)tmp___21;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___28) = 79U;
#line 77
  goto ldv_46315;
  case 2UL: 
#line 77
  put_unaligned_le16(79, __gu_p___28);
#line 77
  goto ldv_46315;
  case 4UL: 
#line 77
  put_unaligned_le32(79U, __gu_p___28);
#line 77
  goto ldv_46315;
  case 8UL: 
#line 77
  put_unaligned_le64(79ULL, __gu_p___28);
#line 77
  goto ldv_46315;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46315;
  }
  ldv_46315: 
#line 77
  tmp___22 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___29 = (void *)tmp___22;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___29) = 4U;
#line 77
  goto ldv_46322;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___29);
#line 77
  goto ldv_46322;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___29);
#line 77
  goto ldv_46322;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___29);
#line 77
  goto ldv_46322;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46322;
  }
  ldv_46322: 
#line 77
  __gu_p___30 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___30) = (unsigned char )arg->c_max_rate;
#line 77
  goto ldv_46329;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_max_rate), __gu_p___30);
#line 77
  goto ldv_46329;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_max_rate, __gu_p___30);
#line 77
  goto ldv_46329;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_max_rate, __gu_p___30);
#line 77
  goto ldv_46329;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46329;
  }
  ldv_46329: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___23 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___31 = (void *)tmp___23;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___31) = 80U;
#line 77
  goto ldv_46336;
  case 2UL: 
#line 77
  put_unaligned_le16(80, __gu_p___31);
#line 77
  goto ldv_46336;
  case 4UL: 
#line 77
  put_unaligned_le32(80U, __gu_p___31);
#line 77
  goto ldv_46336;
  case 8UL: 
#line 77
  put_unaligned_le64(80ULL, __gu_p___31);
#line 77
  goto ldv_46336;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46336;
  }
  ldv_46336: 
#line 77
  tmp___24 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___32 = (void *)tmp___24;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___32) = 4U;
#line 77
  goto ldv_46343;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___32);
#line 77
  goto ldv_46343;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___32);
#line 77
  goto ldv_46343;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___32);
#line 77
  goto ldv_46343;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46343;
  }
  ldv_46343: 
#line 77
  __gu_p___33 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___33) = (unsigned char )arg->c_min_rate;
#line 77
  goto ldv_46350;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_min_rate), __gu_p___33);
#line 77
  goto ldv_46350;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_min_rate, __gu_p___33);
#line 77
  goto ldv_46350;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_min_rate, __gu_p___33);
#line 77
  goto ldv_46350;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46350;
  }
  ldv_46350: 
#line 77
  tags = tags + 4U;
#line 77
  return (tags);
}
}
#line 108
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 108 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 106
  tmp = tags;
#line 106
  tags = tags + 1;
#line 106
  __gu_p = (void *)tmp;
#line 106
  switch (2UL) {
  case 1UL: 
#line 106
  *((u8 *)__gu_p) = 33U;
#line 106
  goto ldv_46438;
  case 2UL: 
#line 106
  put_unaligned_le16(33, __gu_p);
#line 106
  goto ldv_46438;
  case 4UL: 
#line 106
  put_unaligned_le32(33U, __gu_p);
#line 106
  goto ldv_46438;
  case 8UL: 
#line 106
  put_unaligned_le64(33ULL, __gu_p);
#line 106
  goto ldv_46438;
  default: 
#line 106
  __bad_unaligned_access_size();
#line 106
  goto ldv_46438;
  }
  ldv_46438: 
#line 106
  tmp___0 = tags;
#line 106
  tags = tags + 1;
#line 106
  __gu_p___0 = (void *)tmp___0;
#line 106
  switch (2UL) {
  case 1UL: 
#line 106
  *((u8 *)__gu_p___0) = 4U;
#line 106
  goto ldv_46445;
  case 2UL: 
#line 106
  put_unaligned_le16(4, __gu_p___0);
#line 106
  goto ldv_46445;
  case 4UL: 
#line 106
  put_unaligned_le32(4U, __gu_p___0);
#line 106
  goto ldv_46445;
  case 8UL: 
#line 106
  put_unaligned_le64(4ULL, __gu_p___0);
#line 106
  goto ldv_46445;
  default: 
#line 106
  __bad_unaligned_access_size();
#line 106
  goto ldv_46445;
  }
  ldv_46445: 
#line 106
  __gu_p___1 = (void *)tags;
#line 106
  switch (4UL) {
  case 1UL: 
#line 106
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 106
  goto ldv_46452;
  case 2UL: 
#line 106
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 106
  goto ldv_46452;
  case 4UL: 
#line 106
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 106
  goto ldv_46452;
  case 8UL: 
#line 106
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 106
  goto ldv_46452;
  default: 
#line 106
  __bad_unaligned_access_size();
#line 106
  goto ldv_46452;
  }
  ldv_46452: 
#line 106
  tags = tags + 4U;
#line 106
  return (tags);
}
}
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 142
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 146
  envp[0] = (char *)"HOME=/";
#line 146
  envp[1] = (char *)"TERM=linux";
#line 146
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 146
  envp[3] = 0;
#line 146
  envp[4] = 0;
#line 146
  envp[5] = 0;
#line 154
  argv[0] = (char *)(& usermode_helper);
#line 154
  argv[1] = cmd;
#line 154
  argv[2] = (char *)(& mb);
#line 154
  argv[3] = 0;
#line 157
  tmp = mdev_to_minor(mdev);
#line 157
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 159
  tmp___0 = get_net_conf(mdev);
#line 159
  if (tmp___0 != 0) {
#line 160
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 162
    afs = (char *)"ipv6";
#line 163
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 165
    goto ldv_46773;
    case 2: 
#line 167
    afs = (char *)"ipv4";
#line 168
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 170
    goto ldv_46773;
    default: 
#line 172
    afs = (char *)"ssocks";
#line 173
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_46773: 
#line 176
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 177
    envp[3] = (char *)(& af);
#line 178
    envp[4] = (char *)(& ad);
#line 179
    put_net_conf(mdev);
  } else {

  }
#line 184
  drbd_md_sync(mdev);
#line 186
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 188
  drbd_bcast_ev_helper(mdev, cmd);
#line 189
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 190
  if (ret != 0) {
#line 191
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 195
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 199
  if (ret < 0) {
#line 200
    ret = 0;
  } else {

  }
#line 202
  return (ret);
}
}
#line 205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 212
  if (*((unsigned int *)mdev + 503UL) != 49152U) {
#line 212
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            212);
  } else {

  }
#line 214
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 214
  if (tmp != 0) {
#line 215
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 216
    put_ldev(mdev);
  } else {
#line 218
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 219
    nps = (enum drbd_disk_state )mdev->state.ldv_35401.pdsk;
#line 220
    goto out;
  }
#line 223
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 225
  switch ((r >> 8) & 255) {
  case 3: 
#line 227
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 228
  nps = D_INCONSISTENT;
#line 229
  goto ldv_46785;
  case 4: 
#line 231
  ex_to_string = (char *)"peer was fenced";
#line 232
  nps = D_OUTDATED;
#line 233
  goto ldv_46785;
  case 5: ;
#line 235
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 16U) {
#line 237
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 238
    nps = D_OUTDATED;
  } else {
#line 240
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 241
    nps = (enum drbd_disk_state )mdev->state.ldv_35401.pdsk;
  }
#line 243
  goto ldv_46785;
  case 6: 
#line 247
  ex_to_string = (char *)"peer is active";
#line 248
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 249
  nps = D_UNKNOWN;
#line 250
  val.i = 0U;
#line 250
  val.ldv_35401.disk = 5U;
#line 250
  mask.i = 0U;
#line 250
  mask.ldv_35401.disk = 15U;
#line 250
  _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 251
  goto ldv_46785;
  case 7: ;
#line 253
  if ((unsigned int )fp != 2U) {
#line 254
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 255
  ex_to_string = (char *)"peer was stonithed";
#line 256
  nps = D_OUTDATED;
#line 257
  goto ldv_46785;
  default: 
#line 260
  nps = D_UNKNOWN;
#line 261
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 262
  return (nps);
  }
  ldv_46785: 
#line 265
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
  out: ;
#line 269
  if ((unsigned int )*((unsigned char *)mdev + 2014UL) != 0U && (unsigned int )nps > 5U) {
#line 272
    val___0.i = 0U;
#line 272
    val___0.ldv_35401.susp_fen = 0U;
#line 272
    mask___0.i = 0U;
#line 272
    mask___0.ldv_35401.susp_fen = 1U;
#line 272
    _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
  } else {

  }
#line 275
  return (nps);
}
}
#line 278 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int _try_outdate_peer_async(void *data ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_disk_state nps ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 280
  mdev = (struct drbd_conf *)data;
#line 283
  nps = drbd_try_outdate_peer(mdev);
#line 284
  val.i = 0U;
#line 284
  val.ldv_35401.pdsk = (unsigned char )nps;
#line 284
  mask.i = 0U;
#line 284
  mask.ldv_35401.pdsk = 15U;
#line 284
  drbd_request_state(mdev, mask, val);
#line 286
  return (0);
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) 
{ 
  struct task_struct *opa ;
  struct task_struct *__k ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 293
  tmp = mdev_to_minor(mdev);
#line 293
  tmp___0 = kthread_create(& _try_outdate_peer_async, (void *)mdev, "drbd%d_a_helper",
                           tmp);
#line 293
  __k = tmp___0;
#line 293
  tmp___1 = IS_ERR((void const   *)__k);
#line 293
  if (tmp___1 == 0L) {
#line 293
    wake_up_process(__k);
  } else {

  }
#line 293
  opa = __k;
#line 294
  tmp___2 = IS_ERR((void const   *)opa);
#line 294
  if (tmp___2 != 0L) {
#line 295
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "out of mem, failed to invoke fence-peer helper\n");
  } else {

  }
#line 296
  return;
}
}
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) 
{ 
  int max_tries ;
  int r ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 300
  max_tries = 4;
#line 301
  r = 0;
#line 302
  try = 0;
#line 303
  forced = 0;
#line 307
  if ((unsigned int )new_role == 1U) {
#line 308
    request_ping(mdev);
  } else {

  }
#line 310
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 312
  mask.i = 0U;
#line 312
  mask.ldv_35401.role = 3U;
#line 313
  val.i = 0U;
#line 313
  val.ldv_35401.role = (unsigned char )new_role;
#line 315
  goto ldv_46826;
  ldv_46829: 
#line 316
  r = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 320
  if (r == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 321
    val.ldv_35401.pdsk = 0U;
#line 322
    mask.ldv_35401.pdsk = 0U;
#line 323
    goto ldv_46826;
  } else {

  }
#line 326
  if ((r == -2 && force != 0) && ((int )mdev->state.ldv_35401.disk <= 7 && (int )mdev->state.ldv_35401.disk > 3)) {
#line 329
    mask.ldv_35401.disk = 15U;
#line 330
    val.ldv_35401.disk = 8U;
#line 331
    forced = 1;
#line 332
    goto ldv_46826;
  } else {

  }
#line 335
  if ((r == -2 && (unsigned int )*((unsigned char *)mdev + 2013UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 337
    if (*((unsigned int *)mdev + 503UL) != 49152U) {
#line 337
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
              337);
    } else {

    }
#line 338
    nps = drbd_try_outdate_peer(mdev);
#line 340
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 341
      val.ldv_35401.disk = 8U;
#line 342
      mask.ldv_35401.disk = 15U;
    } else {

    }
#line 345
    val.ldv_35401.pdsk = (unsigned char )nps;
#line 346
    mask.ldv_35401.pdsk = 15U;
#line 348
    goto ldv_46826;
  } else {

  }
#line 351
  if (r == 2) {
#line 352
    goto fail;
  } else {

  }
#line 353
  if (r == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 354
    nps = drbd_try_outdate_peer(mdev);
#line 356
    if (force != 0 && (unsigned int )nps > 5U) {
#line 357
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 358
      nps = D_OUTDATED;
    } else {

    }
#line 361
    mask.ldv_35401.pdsk = 15U;
#line 362
    val.ldv_35401.pdsk = (unsigned char )nps;
#line 364
    goto ldv_46826;
  } else {

  }
#line 366
  if (r == -1) {
#line 369
    tmp = get_current();
#line 369
    tmp->state = 1L;
#line 370
    schedule_timeout((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 371
    if (try < max_tries) {
#line 372
      try = max_tries + -1;
    } else {

    }
#line 373
    goto ldv_46826;
  } else {

  }
#line 375
  if (r <= 0) {
#line 376
    r = _drbd_request_state(mdev, mask, val, 6);
#line 378
    if (r <= 0) {
#line 379
      goto fail;
    } else {

    }
  } else {

  }
#line 381
  goto ldv_46828;
  ldv_46826: 
#line 315
  tmp___0 = try;
#line 315
  try = try + 1;
#line 315
  if (tmp___0 < max_tries) {
#line 316
    goto ldv_46829;
  } else {

  }
  ldv_46828: ;
#line 384
  if (r <= 0) {
#line 385
    goto fail;
  } else {

  }
#line 387
  if (forced != 0) {
#line 388
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 391
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 391
  if (tmp___1 == 0) {
#line 391
    goto ldv_46830;
  } else {

  }
#line 391
  tmp___2 = get_current();
#line 391
  __wait.flags = 0U;
#line 391
  __wait.private = (void *)tmp___2;
#line 391
  __wait.func = & autoremove_wake_function;
#line 391
  __wait.task_list.next = & __wait.task_list;
#line 391
  __wait.task_list.prev = & __wait.task_list;
  ldv_46833: 
#line 391
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 391
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 391
  if (tmp___3 == 0) {
#line 391
    goto ldv_46832;
  } else {

  }
#line 391
  schedule();
#line 391
  goto ldv_46833;
  ldv_46832: 
#line 391
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46830: ;
#line 393
  if ((unsigned int )new_role == 2U) {
#line 394
    set_disk_ro(mdev->vdisk, 1);
#line 395
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 395
    if (tmp___4 != 0) {
#line 396
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 397
      put_ldev(mdev);
    } else {

    }
  } else {
#line 400
    tmp___5 = get_net_conf(mdev);
#line 400
    if (tmp___5 != 0) {
#line 401
      (mdev->net_conf)->want_lose = 0U;
#line 402
      put_net_conf(mdev);
    } else {

    }
#line 404
    set_disk_ro(mdev->vdisk, 0);
#line 405
    tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 405
    if (tmp___6 != 0) {
#line 406
      if ((((int )mdev->state.ldv_35401.conn <= 9 || (int )mdev->state.ldv_35401.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 409
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 411
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 412
      put_ldev(mdev);
    } else {

    }
  }
#line 416
  if ((unsigned int )new_role == 2U) {
#line 416
    tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 416
    if (tmp___7 != 0) {
#line 417
      drbd_al_to_on_disk_bm(mdev);
#line 418
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 421
  if ((int )mdev->state.ldv_35401.conn > 8) {
#line 423
    if (forced != 0) {
#line 424
      drbd_send_uuids(mdev);
    } else {

    }
#line 425
    drbd_send_state(mdev);
  } else {

  }
#line 428
  drbd_md_sync(mdev);
#line 430
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 432
  mutex_unlock(& mdev->state_mutex);
#line 433
  return (r);
}
}
#line 436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(int minor , int create ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 440
  if ((unsigned int )minor >= minor_count) {
#line 441
    return (0);
  } else {

  }
#line 443
  mdev = minor_to_mdev((unsigned int )minor);
#line 445
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && create != 0) {
#line 446
    disk = 0;
#line 447
    mdev = drbd_new_device((unsigned int )minor);
#line 449
    spin_lock_irq(& drbd_pp_lock);
#line 450
    if ((unsigned long )*(minor_table + (unsigned long )minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 451
      *(minor_table + (unsigned long )minor) = mdev;
#line 452
      disk = mdev->vdisk;
#line 453
      mdev = 0;
    } else {

    }
#line 455
    spin_unlock_irq(& drbd_pp_lock);
#line 457
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 460
      add_disk(disk);
    } else {
#line 462
      drbd_free_mdev(mdev);
    }
#line 464
    mdev = minor_to_mdev((unsigned int )minor);
  } else {

  }
#line 467
  return (mdev);
}
}
#line 470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;

  {
#line 475
  memset((void *)(& primary_args), 0, 4UL);
#line 476
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 476
  if (tmp == 0) {
#line 477
    reply->ret_code = 126;
#line 478
    return (0);
  } else {

  }
#line 481
  reply->ret_code = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 484
  return (0);
}
}
#line 487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 


  {
#line 490
  reply->ret_code = drbd_set_role(mdev, R_SECONDARY, 0);
#line 492
  return (0);
}
}
#line 497 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 500
  md_size_sect = 0UL;
#line 501
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 504
  bdev->md.md_size_sect = 262144U;
#line 505
  tmp = drbd_md_ss__(mdev, bdev);
#line 505
  bdev->md.md_offset = (u64 )tmp;
#line 506
  bdev->md.al_offset = 8;
#line 507
  bdev->md.bm_offset = 72;
#line 508
  goto ldv_46857;
  case -2: 
#line 511
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 511
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 512
  bdev->md.md_offset = 0ULL;
#line 513
  bdev->md.al_offset = 8;
#line 514
  bdev->md.bm_offset = 72;
#line 515
  goto ldv_46857;
  case -1: ;
  case -3: 
#line 518
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 518
  bdev->md.md_offset = (u64 )tmp___1;
#line 520
  bdev->md.al_offset = -64;
#line 522
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 523
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 524
  md_size_sect = md_size_sect >> 15;
#line 525
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 529
  md_size_sect = md_size_sect + 72UL;
#line 531
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 533
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 534
  goto ldv_46857;
  }
  ldv_46857: ;
#line 537
  return;
}
}
#line 538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 541
  units[0] = 75;
#line 541
  units[1] = 77;
#line 541
  units[2] = 71;
#line 541
  units[3] = 84;
#line 541
  units[4] = 80;
#line 541
  units[5] = 69;
#line 542
  base = 0;
#line 543
  goto ldv_46868;
  ldv_46867: 
#line 545
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 546
  base = base + 1;
  ldv_46868: ;
#line 543
  if (size > 9999ULL) {
#line 544
    goto ldv_46867;
  } else {

  }
#line 548
  sprintf(buf, "%lu %cB", (long )size, (int )units[base]);
#line 550
  return (buf);
}
}
#line 566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 568
  set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 569
  tmp = is_susp(mdev->state);
#line 569
  if (tmp != 0) {
#line 570
    return;
  } else {

  }
#line 571
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 571
  if (tmp___0 == 0) {
#line 571
    goto ldv_46873;
  } else {

  }
#line 571
  tmp___1 = get_current();
#line 571
  __wait.flags = 0U;
#line 571
  __wait.private = (void *)tmp___1;
#line 571
  __wait.func = & autoremove_wake_function;
#line 571
  __wait.task_list.next = & __wait.task_list;
#line 571
  __wait.task_list.prev = & __wait.task_list;
  ldv_46876: 
#line 571
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 571
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 571
  if (tmp___2 == 0) {
#line 571
    goto ldv_46875;
  } else {

  }
#line 571
  schedule();
#line 571
  goto ldv_46876;
  ldv_46875: 
#line 571
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46873: ;
#line 574
  return;
}
}
#line 574 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 576
  clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 577
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 578
  return;
}
}
#line 587 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int tmp___8 ;

  {
#line 595
  rv = 0;
#line 606
  drbd_suspend_io(mdev);
#line 609
  tmp = lc_try_lock(mdev->act_log);
#line 609
  if (tmp != 0) {
#line 609
    goto ldv_46892;
  } else {

  }
#line 609
  tmp___0 = get_current();
#line 609
  __wait.flags = 0U;
#line 609
  __wait.private = (void *)tmp___0;
#line 609
  __wait.func = & autoremove_wake_function;
#line 609
  __wait.task_list.next = & __wait.task_list;
#line 609
  __wait.task_list.prev = & __wait.task_list;
  ldv_46895: 
#line 609
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 609
  tmp___1 = lc_try_lock(mdev->act_log);
#line 609
  if (tmp___1 != 0) {
#line 609
    goto ldv_46894;
  } else {

  }
#line 609
  schedule();
#line 609
  goto ldv_46895;
  ldv_46894: 
#line 609
  finish_wait(& mdev->al_wait, & __wait);
  ldv_46892: 
#line 611
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 612
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 613
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 616
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 618
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 620
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 620
  if (tmp___5 != size) {
#line 620
    goto _L;
  } else {
#line 620
    tmp___6 = drbd_bm_capacity(mdev);
#line 620
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 623
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 624
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 624
      if (tmp___3 != 0L) {
#line 626
        tmp___2 = drbd_bm_capacity(mdev);
#line 626
        size = tmp___2 >> 1;
#line 627
        if (size == 0UL) {
#line 628
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 631
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 635
        rv = dev_size_error;
      } else {

      }
#line 638
      drbd_set_my_capacity(mdev, size);
#line 639
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 640
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 640
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 643
  if ((int )rv == -1) {
#line 644
    goto out;
  } else {

  }
#line 646
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 648
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 648
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 651
  if (la_size_changed != 0 || md_moved != 0) {
#line 652
    drbd_al_shrink(mdev);
#line 653
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 656
    tmp___8 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed");
#line 656
    rv = (enum determine_dev_size )tmp___8;
#line 657
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 660
  if (size > la_size) {
#line 661
    rv = grew;
  } else {

  }
#line 662
  if (size < la_size) {
#line 663
    rv = shrunk;
  } else {

  }
  out: 
#line 665
  lc_unlock(mdev->act_log);
#line 666
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 667
  drbd_resume_io(mdev);
#line 669
  return (rv);
}
}
#line 673 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 675
  p_size = mdev->p_size;
#line 676
  la_size = (sector_t )bdev->md.la_size_sect;
#line 678
  u_size = (sector_t )bdev->dc.disk_size;
#line 679
  size = 0UL;
#line 681
  m_size = drbd_get_max_capacity___1(bdev);
#line 683
  if ((int )mdev->state.ldv_35401.conn <= 9 && assume_peer_has_space != 0) {
#line 684
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 685
    p_size = m_size;
  } else {

  }
#line 688
  if (p_size != 0UL && m_size != 0UL) {
#line 689
    __min1 = p_size;
#line 689
    __min2 = m_size;
#line 689
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 691
  if (la_size != 0UL) {
#line 692
    size = la_size;
#line 693
    if (m_size != 0UL && m_size < size) {
#line 694
      size = m_size;
    } else {

    }
#line 695
    if (p_size != 0UL && p_size < size) {
#line 696
      size = p_size;
    } else {

    }
  } else {
#line 698
    if (m_size != 0UL) {
#line 699
      size = m_size;
    } else {

    }
#line 700
    if (p_size != 0UL) {
#line 701
      size = p_size;
    } else {

    }
  }
#line 705
  if (size == 0UL) {
#line 706
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 708
  if (u_size != 0UL) {
#line 709
    if (u_size > size) {
#line 710
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 713
      size = u_size;
    }
  } else {

  }
#line 716
  return (size);
}
}
#line 727 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 734
  _b = mdev->sync_conf.al_extents <= 6;
#line 734
  if (_b != 0) {
#line 734
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            734);
  } else {

  }
#line 734
  if (_b != 0) {
#line 735
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 737
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 739
    return (0);
  } else {

  }
#line 741
  in_use = 0U;
#line 742
  t = mdev->act_log;
#line 743
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 746
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 747
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 748
    return (-12);
  } else {

  }
#line 750
  spin_lock_irq(& mdev->al_lock);
#line 751
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 752
    i = 0;
#line 752
    goto ldv_46923;
    ldv_46922: 
#line 753
    e = lc_element_by_index(t, (unsigned int )i);
#line 754
    if (e->refcnt != 0U) {
#line 755
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 757
    in_use = e->refcnt + in_use;
#line 752
    i = i + 1;
    ldv_46923: ;
#line 752
    if ((unsigned int )i < t->nr_elements) {
#line 753
      goto ldv_46922;
    } else {

    }

  } else {

  }
#line 760
  if (in_use == 0U) {
#line 761
    mdev->act_log = n;
  } else {

  }
#line 762
  spin_unlock_irq(& mdev->al_lock);
#line 763
  if (in_use != 0U) {
#line 764
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 765
    lc_destroy(n);
#line 766
    return (-16);
  } else
#line 768
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 769
    lc_destroy(t);
  } else {

  }
#line 771
  drbd_md_mark_dirty(mdev);
#line 772
  return (0);
}
}
#line 775 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) 
{ 
  struct request_queue *q ;
  struct request_queue *b ;
  int max_segments ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned short tmp___0 ;
  unsigned int _min2 ;
  unsigned int tmp___1 ;

  {
#line 777
  q = mdev->rq_queue;
#line 778
  b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 779
  max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 781
  tmp = queue_max_sectors(b);
#line 781
  tmp___0 = queue_logical_block_size(b);
#line 781
  _min1 = tmp * (unsigned int )tmp___0;
#line 781
  _min2 = max_seg_s;
#line 781
  max_seg_s = _min1 < _min2 ? _min1 : _min2;
#line 783
  blk_queue_max_hw_sectors(q, max_seg_s >> 9);
#line 784
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 785
  blk_queue_max_segment_size(q, max_seg_s);
#line 786
  blk_queue_logical_block_size(q, 512);
#line 787
  blk_queue_segment_boundary(q, 4095UL);
#line 788
  blk_stack_limits(& q->limits, & b->limits, 0UL);
#line 790
  tmp___1 = queue_max_segment_size(q);
#line 790
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max_segment_size ( = BIO size ) = %u\n",
            tmp___1);
#line 792
  if (q->backing_dev_info.ra_pages != b->backing_dev_info.ra_pages) {
#line 793
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
              q->backing_dev_info.ra_pages, b->backing_dev_info.ra_pages);
#line 796
    q->backing_dev_info.ra_pages = b->backing_dev_info.ra_pages;
  } else {

  }
#line 798
  return;
}
}
#line 807 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 809
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 809
  if (tmp == 0) {
#line 809
    goto ldv_46938;
  } else {

  }
#line 809
  tmp___0 = get_current();
#line 809
  __wait.flags = 0U;
#line 809
  __wait.private = (void *)tmp___0;
#line 809
  __wait.func = & autoremove_wake_function;
#line 809
  __wait.task_list.next = & __wait.task_list;
#line 809
  __wait.task_list.prev = & __wait.task_list;
  ldv_46941: 
#line 809
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 809
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 809
  if (tmp___1 == 0) {
#line 809
    goto ldv_46940;
  } else {

  }
#line 809
  schedule();
#line 809
  goto ldv_46941;
  ldv_46940: 
#line 809
  finish_wait(& mdev->state_wait, & __wait);
  ldv_46938: 
#line 810
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 810
  if (tmp___2 == 0) {
#line 810
    goto ldv_46942;
  } else {

  }
#line 810
  tmp___3 = get_current();
#line 810
  __wait___0.flags = 0U;
#line 810
  __wait___0.private = (void *)tmp___3;
#line 810
  __wait___0.func = & autoremove_wake_function;
#line 810
  __wait___0.task_list.next = & __wait___0.task_list;
#line 810
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_46945: 
#line 810
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 810
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 810
  if (tmp___4 == 0) {
#line 810
    goto ldv_46944;
  } else {

  }
#line 810
  schedule();
#line 810
  goto ldv_46945;
  ldv_46944: 
#line 810
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_46942: 
#line 811
  drbd_thread_start(& mdev->worker);
#line 812
  drbd_flush_workqueue(mdev);
#line 813
  return;
}
}
#line 818 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 820
  spin_lock_irq(& mdev->req_lock);
#line 821
  if (((unsigned int )*((unsigned char *)mdev + 2013UL) == 0U && (unsigned int )*((unsigned short *)mdev + 1006UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2012UL) == 2U) {
#line 824
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 825
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 827
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 828
  spin_unlock_irq(& mdev->req_lock);
#line 829
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 830
  return;
}
}
#line 833 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_suspend_al(struct drbd_conf *mdev ) 
{ 
  int s ;
  int tmp ;
  int tmp___0 ;

  {
#line 835
  s = 0;
#line 837
  tmp = lc_try_lock(mdev->act_log);
#line 837
  if (tmp != 0) {
#line 838
    drbd_al_shrink(mdev);
#line 839
    lc_unlock(mdev->act_log);
  } else {
#line 841
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to lock al in drbd_suspend_al()\n");
#line 842
    return;
  }
#line 845
  spin_lock_irq(& mdev->req_lock);
#line 846
  if ((int )mdev->state.ldv_35401.conn <= 9) {
#line 847
    tmp___0 = test_and_set_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 847
    s = tmp___0 == 0;
  } else {

  }
#line 849
  spin_unlock_irq(& mdev->req_lock);
#line 851
  if (s != 0) {
#line 852
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Suspended AL updates\n");
  } else {

  }
#line 853
  return;
}
}
#line 857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_codes retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct inode *inode ;
  struct inode *inode2 ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  unsigned int max_seg_s ;
  int rv ;
  int cp_discovered ;
  int logical_block_size ;
  void *tmp ;
  int tmp___0 ;
  int prot ;
  int tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  sector_t tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___18 ;
  int tmp___19 ;
  unsigned short tmp___20 ;
  struct page *page ;
  struct page *tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  sector_t tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  unsigned long tmp___35 ;
  unsigned long tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 864
  nbc = 0;
#line 866
  resync_lru = 0;
#line 870
  cp_discovered = 0;
#line 873
  drbd_reconfig_start(mdev);
#line 876
  if ((int )mdev->state.ldv_35401.disk > 0) {
#line 877
    retcode = ERR_DISK_CONFIGURED;
#line 878
    goto fail;
  } else {

  }
#line 882
  tmp = kzalloc___2(408UL, 208U);
#line 882
  nbc = (struct drbd_backing_dev *)tmp;
#line 883
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 884
    retcode = ERR_NOMEM;
#line 885
    goto fail;
  } else {

  }
#line 888
  nbc->dc.disk_size = 0ULL;
#line 889
  nbc->dc.on_io_error = 0;
#line 890
  nbc->dc.fencing = 0;
#line 891
  nbc->dc.max_bio_bvecs = 0;
#line 893
  tmp___0 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 893
  if (tmp___0 == 0) {
#line 894
    retcode = ERR_MANDATORY_TAG;
#line 895
    goto fail;
  } else {

  }
#line 898
  if (nbc->dc.meta_dev_idx < -3) {
#line 899
    retcode = ERR_MD_IDX_INVALID;
#line 900
    goto fail;
  } else {

  }
#line 903
  tmp___1 = get_net_conf(mdev);
#line 903
  if (tmp___1 != 0) {
#line 904
    prot = (mdev->net_conf)->wire_protocol;
#line 905
    put_net_conf(mdev);
#line 906
    if (nbc->dc.fencing == 2 && prot == 1) {
#line 907
      retcode = ERR_STONITH_AND_PROT_A;
#line 908
      goto fail;
    } else {

    }
  } else {

  }
#line 912
  nbc->lo_file = filp_open((char const   *)(& nbc->dc.backing_dev), 2, 0);
#line 913
  tmp___3 = IS_ERR((void const   *)nbc->lo_file);
#line 913
  if (tmp___3 != 0L) {
#line 914
    tmp___2 = PTR_ERR((void const   *)nbc->lo_file);
#line 914
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___2);
#line 916
    nbc->lo_file = 0;
#line 917
    retcode = ERR_OPEN_DISK;
#line 918
    goto fail;
  } else {

  }
#line 921
  inode = ((nbc->lo_file)->f_path.dentry)->d_inode;
#line 923
  if (((int )inode->i_mode & 61440) != 24576) {
#line 924
    retcode = ERR_DISK_NOT_BDEV;
#line 925
    goto fail;
  } else {

  }
#line 928
  nbc->md_file = filp_open((char const   *)(& nbc->dc.meta_dev), 2, 0);
#line 929
  tmp___5 = IS_ERR((void const   *)nbc->md_file);
#line 929
  if (tmp___5 != 0L) {
#line 930
    tmp___4 = PTR_ERR((void const   *)nbc->md_file);
#line 930
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___4);
#line 932
    nbc->md_file = 0;
#line 933
    retcode = ERR_OPEN_MD_DISK;
#line 934
    goto fail;
  } else {

  }
#line 937
  inode2 = ((nbc->md_file)->f_path.dentry)->d_inode;
#line 939
  if (((int )inode2->i_mode & 61440) != 24576) {
#line 940
    retcode = ERR_MD_NOT_BDEV;
#line 941
    goto fail;
  } else {

  }
#line 944
  nbc->backing_bdev = inode->ldv_23010.i_bdev;
#line 945
  tmp___6 = bd_claim(nbc->backing_bdev, (void *)mdev);
#line 945
  if (tmp___6 != 0) {
#line 946
    printk("<3>drbd: bd_claim(%p,%p); failed [%p;%p;%u]\n", nbc->backing_bdev, mdev,
           (nbc->backing_bdev)->bd_holder, ((nbc->backing_bdev)->bd_contains)->bd_holder,
           (nbc->backing_bdev)->bd_holders);
#line 951
    retcode = ERR_BDCLAIM_DISK;
#line 952
    goto fail;
  } else {

  }
#line 955
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 958
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 959
    retcode = ERR_NOMEM;
#line 960
    goto release_bdev_fail;
  } else {

  }
#line 970
  nbc->md_bdev = inode2->ldv_23010.i_bdev;
#line 971
  tmp___7 = bd_claim(nbc->md_bdev, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 971
  if (tmp___7 != 0) {
#line 973
    retcode = ERR_BDCLAIM_MD_DISK;
#line 974
    goto release_bdev_fail;
  } else {

  }
#line 977
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 980
    retcode = ERR_MD_IDX_INVALID;
#line 981
    goto release_bdev2_fail;
  } else {

  }
#line 985
  drbd_md_set_sector_offsets(mdev, nbc);
#line 987
  tmp___9 = drbd_get_max_capacity___1(nbc);
#line 987
  if ((unsigned long long )tmp___9 < nbc->dc.disk_size) {
#line 988
    tmp___8 = drbd_get_max_capacity___1(nbc);
#line 988
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___8, nbc->dc.disk_size);
#line 991
    retcode = ERR_DISK_TO_SMALL;
#line 992
    goto release_bdev2_fail;
  } else {

  }
#line 995
  if (nbc->dc.meta_dev_idx < 0) {
#line 996
    max_possible_sectors = 34359738368UL;
#line 998
    min_md_device_sectors = 2048UL;
  } else {
#line 1000
    max_possible_sectors = 8587575296UL;
#line 1001
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 1004
  tmp___10 = drbd_get_capacity(nbc->md_bdev);
#line 1004
  if (tmp___10 < min_md_device_sectors) {
#line 1005
    retcode = ERR_MD_DISK_TO_SMALL;
#line 1006
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 1009
    goto release_bdev2_fail;
  } else {

  }
#line 1014
  tmp___11 = drbd_get_max_capacity___1(nbc);
#line 1014
  tmp___12 = drbd_get_capacity(mdev->this_bdev);
#line 1014
  if (tmp___11 < tmp___12) {
#line 1016
    retcode = ERR_DISK_TO_SMALL;
#line 1017
    goto release_bdev2_fail;
  } else {

  }
#line 1020
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 1022
  if (nbc->known_size > max_possible_sectors) {
#line 1023
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 1026
    if (nbc->dc.meta_dev_idx >= 0) {
#line 1027
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 1031
  drbd_suspend_io(mdev);
#line 1033
  tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1033
  if (tmp___13 == 0) {
#line 1033
    goto ldv_46976;
  } else {
#line 1033
    tmp___14 = is_susp(mdev->state);
#line 1033
    if (tmp___14 != 0) {
#line 1033
      goto ldv_46976;
    } else {

    }
  }
#line 1033
  tmp___15 = get_current();
#line 1033
  __wait.flags = 0U;
#line 1033
  __wait.private = (void *)tmp___15;
#line 1033
  __wait.func = & autoremove_wake_function;
#line 1033
  __wait.task_list.next = & __wait.task_list;
#line 1033
  __wait.task_list.prev = & __wait.task_list;
  ldv_46979: 
#line 1033
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1033
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1033
  if (tmp___16 == 0) {
#line 1033
    goto ldv_46978;
  } else {
#line 1033
    tmp___17 = is_susp(mdev->state);
#line 1033
    if (tmp___17 != 0) {
#line 1033
      goto ldv_46978;
    } else {

    }
  }
#line 1033
  schedule();
#line 1033
  goto ldv_46979;
  ldv_46978: 
#line 1033
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46976: 
#line 1035
  drbd_flush_workqueue(mdev);
#line 1037
  val.i = 0U;
#line 1037
  val.ldv_35401.disk = 1U;
#line 1037
  mask.i = 0U;
#line 1037
  mask.ldv_35401.disk = 15U;
#line 1037
  tmp___18 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1037
  retcode = (enum drbd_ret_codes )tmp___18;
#line 1038
  drbd_resume_io(mdev);
#line 1039
  if ((unsigned int )retcode == 0U) {
#line 1040
    goto release_bdev2_fail;
  } else {

  }
#line 1042
  tmp___19 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1042
  if (tmp___19 == 0) {
#line 1043
    goto force_diskless;
  } else {

  }
#line 1045
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1048
  tmp___20 = bdev_logical_block_size(nbc->md_bdev);
#line 1048
  logical_block_size = (int )tmp___20;
#line 1049
  if (logical_block_size == 0) {
#line 1050
    logical_block_size = 512;
  } else {

  }
#line 1052
  if (logical_block_size != 512) {
#line 1053
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1054
      tmp___21 = alloc_pages(16U, 0U);
#line 1054
      page = tmp___21;
#line 1055
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1056
        goto force_diskless_dec;
      } else {

      }
#line 1058
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1060
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1062
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1066
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1067
    tmp___22 = drbd_bm_init(mdev);
#line 1067
    if (tmp___22 != 0) {
#line 1068
      retcode = ERR_NOMEM;
#line 1069
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1073
  tmp___23 = drbd_md_read(mdev, nbc);
#line 1073
  retcode = (enum drbd_ret_codes )tmp___23;
#line 1074
  if ((unsigned int )retcode != 101U) {
#line 1075
    goto force_diskless_dec;
  } else {

  }
#line 1077
  if (((int )mdev->state.ldv_35401.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1080
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1082
    retcode = ERR_DATA_NOT_CURRENT;
#line 1083
    goto force_diskless_dec;
  } else {

  }
#line 1087
  tmp___24 = drbd_check_al_size(mdev);
#line 1087
  if (tmp___24 != 0) {
#line 1088
    retcode = ERR_NOMEM;
#line 1089
    goto force_diskless_dec;
  } else {

  }
#line 1093
  tmp___25 = drbd_md_test_flag(nbc, 1);
#line 1093
  if (tmp___25 != 0) {
#line 1093
    tmp___26 = drbd_new_dev_size(mdev, nbc, 0);
#line 1093
    if ((unsigned long long )tmp___26 < nbc->md.la_size_sect) {
#line 1095
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1096
      retcode = ERR_DISK_TO_SMALL;
#line 1097
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1100
  tmp___27 = drbd_al_read_log(mdev, nbc);
#line 1100
  if (tmp___27 == 0) {
#line 1101
    retcode = ERR_IO_MD_DISK;
#line 1102
    goto force_diskless_dec;
  } else {

  }
#line 1107
  if ((unsigned int )*((unsigned char *)nbc + 388UL) != 0U) {
#line 1108
    set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1110
    clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1116
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1116
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1116);
  } else {

  }
#line 1117
  mdev->ldev = nbc;
#line 1118
  mdev->resync = resync_lru;
#line 1119
  nbc = 0;
#line 1120
  resync_lru = 0;
#line 1122
  mdev->write_ordering = WO_bio_barrier;
#line 1123
  drbd_bump_write_ordering(mdev, WO_bio_barrier);
#line 1125
  tmp___28 = drbd_md_test_flag(mdev->ldev, 64);
#line 1125
  if (tmp___28 != 0) {
#line 1126
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1128
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1130
  tmp___29 = drbd_md_test_flag(mdev->ldev, 2);
#line 1130
  if (tmp___29 != 0 && ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U || (unsigned int )*((unsigned char *)mdev + 2014UL) == 0U)) {
#line 1132
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 1133
    cp_discovered = 1;
  } else {

  }
#line 1136
  mdev->send_cnt = 0U;
#line 1137
  mdev->recv_cnt = 0U;
#line 1138
  mdev->read_cnt = 0U;
#line 1139
  mdev->writ_cnt = 0U;
#line 1141
  max_seg_s = 131072U;
#line 1142
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U) {
#line 1147
    if (mdev->agreed_pro_version <= 93) {
#line 1148
      max_seg_s = queue_max_segment_size(mdev->rq_queue);
    } else
#line 1149
    if (mdev->agreed_pro_version == 94) {
#line 1150
      max_seg_s = 32768U;
    } else {

    }
  } else {

  }
#line 1154
  drbd_setup_queue_param(mdev, max_seg_s);
#line 1170
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1171
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U) {
#line 1171
    tmp___30 = drbd_md_test_flag(mdev->ldev, 2);
#line 1171
    if (tmp___30 != 0) {
#line 1171
      tmp___31 = drbd_md_test_flag(mdev->ldev, 4);
#line 1171
      if (tmp___31 == 0) {
#line 1174
        set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1176
  dd = drbd_determin_dev_size(mdev, 0);
#line 1177
  if ((int )dd == -1) {
#line 1178
    retcode = ERR_NOMEM_BITMAP;
#line 1179
    goto force_diskless_dec;
  } else
#line 1180
  if ((int )dd == 2) {
#line 1181
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1183
  tmp___34 = drbd_md_test_flag(mdev->ldev, 8);
#line 1183
  if (tmp___34 != 0) {
#line 1184
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1186
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching");
#line 1186
    if (tmp___32 != 0) {
#line 1187
      retcode = ERR_IO_MD_DISK;
#line 1188
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1191
    tmp___33 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching");
#line 1191
    if (tmp___33 < 0) {
#line 1192
      retcode = ERR_IO_MD_DISK;
#line 1193
      goto force_diskless_dec;
    } else {

    }
  }
#line 1197
  if (cp_discovered != 0) {
#line 1198
    drbd_al_apply_to_bm(mdev);
#line 1199
    drbd_al_to_on_disk_bm(mdev);
  } else {

  }
#line 1202
  tmp___35 = _drbd_bm_total_weight(mdev);
#line 1202
  tmp___36 = drbd_bm_bits(mdev);
#line 1202
  if (tmp___35 == tmp___36) {
#line 1203
    drbd_suspend_al(mdev);
  } else {

  }
#line 1205
  spin_lock_irq(& mdev->req_lock);
#line 1206
  os = mdev->state;
#line 1207
  ns.i = os.i;
#line 1213
  tmp___38 = drbd_md_test_flag(mdev->ldev, 1);
#line 1213
  if (tmp___38 != 0) {
#line 1214
    tmp___37 = drbd_md_test_flag(mdev->ldev, 16);
#line 1214
    if (tmp___37 != 0) {
#line 1215
      ns.ldv_35401.disk = 7U;
    } else {
#line 1217
      ns.ldv_35401.disk = 5U;
    }
  } else {
#line 1219
    ns.ldv_35401.disk = 4U;
  }
#line 1222
  tmp___39 = drbd_md_test_flag(mdev->ldev, 32);
#line 1222
  if (tmp___39 != 0) {
#line 1223
    ns.ldv_35401.pdsk = 5U;
  } else {

  }
#line 1225
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1227
    ns.ldv_35401.disk = 8U;
  } else {

  }
#line 1236
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U) {
#line 1237
    mdev->new_state_tmp.i = ns.i;
#line 1238
    ns.i = os.i;
#line 1239
    ns.ldv_35401.disk = 3U;
#line 1244
    kfree((void const   *)mdev->p_uuid);
#line 1245
    mdev->p_uuid = 0;
  } else {

  }
#line 1248
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1249
  ns = mdev->state;
#line 1250
  spin_unlock_irq(& mdev->req_lock);
#line 1252
  if (rv <= 0) {
#line 1253
    goto force_diskless_dec;
  } else {

  }
#line 1255
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 1256
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1258
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1260
  drbd_md_mark_dirty(mdev);
#line 1261
  drbd_md_sync(mdev);
#line 1263
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1264
  put_ldev(mdev);
#line 1265
  reply->ret_code = (int )retcode;
#line 1266
  drbd_reconfig_done(mdev);
#line 1267
  return (0);
  force_diskless_dec: 
#line 1270
  put_ldev(mdev);
  force_diskless: 
#line 1272
  val___0.i = 0U;
#line 1272
  val___0.ldv_35401.disk = 0U;
#line 1272
  mask___0.i = 0U;
#line 1272
  mask___0.ldv_35401.disk = 15U;
#line 1272
  drbd_force_state(mdev, mask___0, val___0);
#line 1273
  drbd_md_sync(mdev);
  release_bdev2_fail: ;
#line 1275
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1276
    bd_release(nbc->md_bdev);
  } else {

  }
  release_bdev_fail: ;
#line 1278
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1279
    bd_release(nbc->backing_bdev);
  } else {

  }
  fail: ;
#line 1281
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1282
    if ((unsigned long )nbc->lo_file != (unsigned long )((struct file *)0)) {
#line 1283
      fput(nbc->lo_file);
    } else {

    }
#line 1284
    if ((unsigned long )nbc->md_file != (unsigned long )((struct file *)0)) {
#line 1285
      fput(nbc->md_file);
    } else {

    }
#line 1286
    kfree((void const   *)nbc);
  } else {

  }
#line 1288
  lc_destroy(resync_lru);
#line 1290
  reply->ret_code = (int )retcode;
#line 1291
  drbd_reconfig_done(mdev);
#line 1292
  return (0);
}
}
#line 1295 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1298
  val.i = 0U;
#line 1298
  val.ldv_35401.disk = 0U;
#line 1298
  mask.i = 0U;
#line 1298
  mask.ldv_35401.disk = 15U;
#line 1298
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1299
  return (0);
}
}
#line 1302 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_codes retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  enum drbd_fencing_p fp ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  struct crypto_tfm *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;
  union drbd_state __ns ;
  int tmp___16 ;

  {
#line 1307
  new_conf = 0;
#line 1308
  tfm = 0;
#line 1309
  integrity_w_tfm = 0;
#line 1310
  integrity_r_tfm = 0;
#line 1311
  new_tl_hash = 0;
#line 1312
  new_ee_hash = 0;
#line 1315
  int_dig_out = 0;
#line 1316
  int_dig_in = 0;
#line 1317
  int_dig_vv = 0;
#line 1320
  drbd_reconfig_start(mdev);
#line 1322
  if ((int )mdev->state.ldv_35401.conn > 0) {
#line 1323
    retcode = ERR_NET_CONFIGURED;
#line 1324
    goto fail;
  } else {

  }
#line 1328
  tmp = kzalloc___2(532UL, 208U);
#line 1328
  new_conf = (struct net_conf *)tmp;
#line 1329
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1330
    retcode = ERR_NOMEM;
#line 1331
    goto fail;
  } else {

  }
#line 1334
  new_conf->timeout = 60;
#line 1335
  new_conf->try_connect_int = 10;
#line 1336
  new_conf->ping_int = 10;
#line 1337
  new_conf->max_epoch_size = 2048;
#line 1338
  new_conf->max_buffers = 2048;
#line 1339
  new_conf->unplug_watermark = 128;
#line 1340
  new_conf->sndbuf_size = 0;
#line 1341
  new_conf->rcvbuf_size = 0;
#line 1342
  new_conf->ko_count = 0;
#line 1343
  new_conf->after_sb_0p = 0;
#line 1344
  new_conf->after_sb_1p = 0;
#line 1345
  new_conf->after_sb_2p = 0;
#line 1346
  new_conf->want_lose = 0U;
#line 1347
  new_conf->two_primaries = 0U;
#line 1348
  new_conf->wire_protocol = 3;
#line 1349
  new_conf->ping_timeo = 5;
#line 1350
  new_conf->rr_conflict = 0;
#line 1352
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1352
  if (tmp___0 == 0) {
#line 1353
    retcode = ERR_MANDATORY_TAG;
#line 1354
    goto fail;
  } else {

  }
#line 1357
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && new_conf->wire_protocol != 3) {
#line 1359
    retcode = ERR_NOT_PROTO_C;
#line 1360
    goto fail;
  } else {

  }
#line 1363
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1363
  if (tmp___1 != 0) {
#line 1364
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1365
    put_ldev(mdev);
#line 1366
    if (new_conf->wire_protocol == 1 && (unsigned int )fp == 2U) {
#line 1367
      retcode = ERR_STONITH_AND_PROT_A;
#line 1368
      goto fail;
    } else {

    }
  } else {

  }
#line 1372
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 528UL) != 0U) {
#line 1373
    retcode = ERR_DISCARD;
#line 1374
    goto fail;
  } else {

  }
#line 1377
  retcode = NO_ERROR;
#line 1379
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1380
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1381
  i = 0;
#line 1381
  goto ldv_47026;
  ldv_47025: 
#line 1382
  odev = minor_to_mdev((unsigned int )i);
#line 1383
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1384
    goto ldv_47024;
  } else {

  }
#line 1385
  tmp___4 = get_net_conf(odev);
#line 1385
  if (tmp___4 != 0) {
#line 1386
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1387
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1387
      tmp___2 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1387
      if (tmp___2 == 0) {
#line 1389
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1391
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1392
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1392
      tmp___3 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1392
      if (tmp___3 == 0) {
#line 1394
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1396
    put_net_conf(odev);
#line 1397
    if ((unsigned int )retcode != 101U) {
#line 1398
      goto fail;
    } else {

    }
  } else {

  }
  ldv_47024: 
#line 1381
  i = i + 1;
  ldv_47026: ;
#line 1381
  if ((unsigned int )i < minor_count) {
#line 1382
    goto ldv_47025;
  } else {

  }

#line 1402
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1403
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1405
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1406
    tmp___5 = IS_ERR((void const   *)tfm);
#line 1406
    if (tmp___5 != 0L) {
#line 1407
      tfm = 0;
#line 1408
      retcode = ERR_AUTH_ALG;
#line 1409
      goto fail;
    } else {

    }
#line 1412
    tmp___6 = crypto_hash_tfm(tfm);
#line 1412
    tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 1412
    if (tmp___7 == 0) {
#line 1413
      retcode = ERR_AUTH_ALG_ND;
#line 1414
      goto fail;
    } else {

    }
  } else {

  }
#line 1418
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1419
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1420
    tmp___8 = IS_ERR((void const   *)integrity_w_tfm);
#line 1420
    if (tmp___8 != 0L) {
#line 1421
      integrity_w_tfm = 0;
#line 1422
      retcode = ERR_INTEGRITY_ALG;
#line 1423
      goto fail;
    } else {

    }
#line 1426
    tmp___9 = crypto_hash_tfm(integrity_w_tfm);
#line 1426
    tmp___10 = drbd_crypto_is_hash(tmp___9);
#line 1426
    if (tmp___10 == 0) {
#line 1427
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1428
      goto fail;
    } else {

    }
#line 1431
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1432
    tmp___11 = IS_ERR((void const   *)integrity_r_tfm);
#line 1432
    if (tmp___11 != 0L) {
#line 1433
      integrity_r_tfm = 0;
#line 1434
      retcode = ERR_INTEGRITY_ALG;
#line 1435
      goto fail;
    } else {

    }
  } else {

  }
#line 1439
  ns = new_conf->max_epoch_size / 8;
#line 1440
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1441
    tmp___12 = kzalloc___2((unsigned long )ns * 8UL, 208U);
#line 1441
    new_tl_hash = (struct hlist_head *)tmp___12;
#line 1442
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1443
      retcode = ERR_NOMEM;
#line 1444
      goto fail;
    } else {

    }
  } else {

  }
#line 1448
  ns = new_conf->max_buffers / 8;
#line 1449
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1450
    tmp___13 = kzalloc___2((unsigned long )ns * 8UL, 208U);
#line 1450
    new_ee_hash = (struct hlist_head *)tmp___13;
#line 1451
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1452
      retcode = ERR_NOMEM;
#line 1453
      goto fail;
    } else {

    }
  } else {

  }
#line 1457
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1459
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1460
    tmp___14 = crypto_hash_digestsize(integrity_w_tfm);
#line 1460
    i = (int )tmp___14;
#line 1461
    int_dig_out = kmalloc___4((size_t )i, 208U);
#line 1462
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1463
      retcode = ERR_NOMEM;
#line 1464
      goto fail;
    } else {

    }
#line 1466
    int_dig_in = kmalloc___4((size_t )i, 208U);
#line 1467
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1468
      retcode = ERR_NOMEM;
#line 1469
      goto fail;
    } else {

    }
#line 1471
    int_dig_vv = kmalloc___4((size_t )i, 208U);
#line 1472
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1473
      retcode = ERR_NOMEM;
#line 1474
      goto fail;
    } else {

    }
  } else {

  }
#line 1478
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1479
    tmp___15 = drbd_bm_init(mdev);
#line 1479
    if (tmp___15 != 0) {
#line 1480
      retcode = ERR_NOMEM;
#line 1481
      goto fail;
    } else {

    }
  } else {

  }
#line 1485
  drbd_flush_workqueue(mdev);
#line 1486
  spin_lock_irq(& mdev->req_lock);
#line 1487
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1488
    retcode = ERR_NET_CONFIGURED;
#line 1489
    spin_unlock_irq(& mdev->req_lock);
#line 1490
    goto fail;
  } else {

  }
#line 1492
  mdev->net_conf = new_conf;
#line 1494
  mdev->send_cnt = 0U;
#line 1495
  mdev->recv_cnt = 0U;
#line 1497
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1498
    kfree((void const   *)mdev->tl_hash);
#line 1499
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1500
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1503
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1504
    kfree((void const   *)mdev->ee_hash);
#line 1505
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1506
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1509
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1510
  mdev->cram_hmac_tfm = tfm;
#line 1512
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1513
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1515
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1516
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1518
  kfree((void const   *)mdev->int_dig_out);
#line 1519
  kfree((void const   *)mdev->int_dig_in);
#line 1520
  kfree((void const   *)mdev->int_dig_vv);
#line 1521
  mdev->int_dig_out = int_dig_out;
#line 1522
  mdev->int_dig_in = int_dig_in;
#line 1523
  mdev->int_dig_vv = int_dig_vv;
#line 1524
  __ns.i = mdev->state.i;
#line 1524
  __ns.ldv_35401.conn = 2U;
#line 1524
  tmp___16 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1524
  retcode = (enum drbd_ret_codes )tmp___16;
#line 1525
  spin_unlock_irq(& mdev->req_lock);
#line 1527
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1528
  reply->ret_code = (int )retcode;
#line 1529
  drbd_reconfig_done(mdev);
#line 1530
  return (0);
  fail: 
#line 1533
  kfree((void const   *)int_dig_out);
#line 1534
  kfree((void const   *)int_dig_in);
#line 1535
  kfree((void const   *)int_dig_vv);
#line 1536
  crypto_free_hash(tfm);
#line 1537
  crypto_free_hash(integrity_w_tfm);
#line 1538
  crypto_free_hash(integrity_r_tfm);
#line 1539
  kfree((void const   *)new_tl_hash);
#line 1540
  kfree((void const   *)new_ee_hash);
#line 1541
  kfree((void const   *)new_conf);
#line 1543
  reply->ret_code = (int )retcode;
#line 1544
  drbd_reconfig_done(mdev);
#line 1545
  return (0);
}
}
#line 1548 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1553
  val.i = 0U;
#line 1553
  val.ldv_35401.conn = 1U;
#line 1553
  mask.i = 0U;
#line 1553
  mask.ldv_35401.conn = 31U;
#line 1553
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1555
  if (retcode == 2) {
#line 1556
    goto done;
  } else
#line 1557
  if (retcode == -9) {
#line 1558
    goto done;
  } else
#line 1559
  if (retcode == -7) {
#line 1562
    val___0.i = 0U;
#line 1562
    val___0.ldv_35401.conn = 1U;
#line 1562
    val___0.ldv_35401.pdsk = 5U;
#line 1561
    mask___0.i = 0U;
#line 1561
    mask___0.ldv_35401.conn = 31U;
#line 1562
    mask___0.ldv_35401.pdsk = 15U;
#line 1562
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1563
  if (retcode == -10) {
#line 1566
    val___1.i = 0U;
#line 1566
    val___1.ldv_35401.conn = 1U;
#line 1566
    val___1.ldv_35401.disk = 5U;
#line 1565
    mask___1.i = 0U;
#line 1565
    mask___1.ldv_35401.conn = 31U;
#line 1566
    mask___1.ldv_35401.disk = 15U;
#line 1566
    retcode = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1568
    if (retcode == -11 || retcode == -16) {
#line 1569
      val___2.i = 0U;
#line 1569
      val___2.ldv_35401.conn = 1U;
#line 1569
      mask___2.i = 0U;
#line 1569
      mask___2.ldv_35401.conn = 31U;
#line 1569
      drbd_force_state(mdev, mask___2, val___2);
#line 1570
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1574
  if (retcode <= 0) {
#line 1575
    goto fail;
  } else {

  }
#line 1577
  __ret = 0;
#line 1577
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 16U) {
#line 1577
    tmp = get_current();
#line 1577
    __wait.flags = 0U;
#line 1577
    __wait.private = (void *)tmp;
#line 1577
    __wait.func = & autoremove_wake_function;
#line 1577
    __wait.task_list.next = & __wait.task_list;
#line 1577
    __wait.task_list.prev = & __wait.task_list;
    ldv_47058: 
#line 1577
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1577
    if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 16U) {
#line 1577
      goto ldv_47056;
    } else {

    }
#line 1577
    tmp___0 = get_current();
#line 1577
    tmp___1 = signal_pending(tmp___0);
#line 1577
    if (tmp___1 == 0) {
#line 1577
      schedule();
#line 1577
      goto ldv_47057;
    } else {

    }
#line 1577
    __ret = -512;
#line 1577
    goto ldv_47056;
    ldv_47057: ;
#line 1577
    goto ldv_47058;
    ldv_47056: 
#line 1577
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1577
  if (__ret != 0) {
#line 1581
    retcode = 129;
#line 1582
    goto fail;
  } else {

  }
  done: 
#line 1586
  retcode = 101;
  fail: 
#line 1588
  drbd_md_sync(mdev);
#line 1589
  reply->ret_code = retcode;
#line 1590
  return (0);
}
}
#line 1593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1597
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1598
  if ((int )mdev->state.ldv_35401.role != (int )mdev->state.ldv_35401.peer) {
#line 1599
    iass = (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U;
  } else {
#line 1601
    iass = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1603
  if (iass != 0) {
#line 1604
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1606
    val.i = 0U;
#line 1606
    val.ldv_35401.conn = 15U;
#line 1606
    mask.i = 0U;
#line 1606
    mask.ldv_35401.conn = 31U;
#line 1606
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1608
  return;
}
}
#line 1609 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1613
  retcode = 101;
#line 1617
  memset((void *)(& rs), 0, 16UL);
#line 1618
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1618
  if (tmp == 0) {
#line 1619
    retcode = 126;
#line 1620
    goto fail;
  } else {

  }
#line 1623
  if ((int )mdev->state.ldv_35401.conn > 10) {
#line 1624
    retcode = 130;
#line 1625
    goto fail;
  } else {

  }
#line 1628
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 2U && (unsigned int )*((unsigned char *)mdev + 2012UL) == 8U) {
#line 1630
    retcode = 131;
#line 1631
    goto fail;
  } else {

  }
#line 1634
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1634
  if (tmp___0 == 0) {
#line 1635
    retcode = 138;
#line 1636
    goto fail;
  } else {

  }
#line 1639
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1640
    retcode = 153;
#line 1641
    goto fail;
  } else {

  }
#line 1644
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1644
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1645
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1647
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1648
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1649
  dd = drbd_determin_dev_size(mdev, ddsf);
#line 1650
  drbd_md_sync(mdev);
#line 1651
  put_ldev(mdev);
#line 1652
  if ((int )dd == -1) {
#line 1653
    retcode = 140;
#line 1654
    goto fail;
  } else {

  }
#line 1657
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U) {
#line 1658
    if ((int )dd == 2) {
#line 1659
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1661
    drbd_send_uuids(mdev);
#line 1662
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1666
  reply->ret_code = retcode;
#line 1667
  return (0);
}
}
#line 1670 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  int *rs_plan_s ;
  int fifo_size ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  void *tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  bool tmp___15 ;
  int tmp___16 ;

  {
#line 1673
  retcode = 101;
#line 1677
  verify_tfm = 0;
#line 1678
  csums_tfm = 0;
#line 1681
  rs_plan_s = 0;
#line 1684
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1684
  if (tmp) {
#line 1684
    tmp___0 = 0;
  } else {
#line 1684
    tmp___0 = 1;
  }
#line 1684
  if (tmp___0) {
#line 1685
    retcode = 122;
#line 1686
    goto fail;
  } else {

  }
#line 1689
  if ((nlp->flags & 2) != 0) {
#line 1690
    memset((void *)(& sc), 0, 212UL);
#line 1691
    sc.rate = 250;
#line 1692
    sc.after = -1;
#line 1693
    sc.al_extents = 127;
#line 1694
    sc.on_no_data = 0;
#line 1695
    sc.c_plan_ahead = 0;
#line 1696
    sc.c_delay_target = 10;
#line 1697
    sc.c_fill_target = 0;
#line 1698
    sc.c_max_rate = 102400;
#line 1699
    sc.c_min_rate = 4096;
  } else {
#line 1701
    __len = 212UL;
#line 1701
    if (__len > 63UL) {
#line 1701
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1701
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1703
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1703
  if (tmp___1 == 0) {
#line 1704
    retcode = 126;
#line 1705
    goto fail;
  } else {

  }
#line 1709
  rsr = (((unsigned int )*((unsigned short *)mdev + 1006UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1006UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 1006UL) == 336U;
#line 1714
  if (rsr != 0) {
#line 1714
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1714
    if (tmp___2 != 0) {
#line 1715
      retcode = 148;
#line 1716
      goto fail;
    } else {

    }
  } else {

  }
#line 1719
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1720
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1721
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1721
    if (tmp___3 != 0L) {
#line 1722
      csums_tfm = 0;
#line 1723
      retcode = 144;
#line 1724
      goto fail;
    } else {

    }
#line 1727
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1727
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1727
    if (tmp___5 == 0) {
#line 1728
      retcode = 145;
#line 1729
      goto fail;
    } else {

    }
  } else {

  }
#line 1734
  ovr = (unsigned int )*((unsigned short *)mdev + 1006UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 304U;
#line 1736
  if (ovr != 0) {
#line 1737
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1737
    if (tmp___6 != 0) {
#line 1738
      retcode = 149;
#line 1739
      goto fail;
    } else {

    }
  } else {

  }
#line 1743
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1744
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1745
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1745
    if (tmp___7 != 0L) {
#line 1746
      verify_tfm = 0;
#line 1747
      retcode = 146;
#line 1748
      goto fail;
    } else {

    }
#line 1751
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1751
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1751
    if (tmp___9 == 0) {
#line 1752
      retcode = 147;
#line 1753
      goto fail;
    } else {

    }
  } else {

  }
#line 1758
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1759
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1761
    if (err != 0) {
#line 1762
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "__bitmap_parse() failed with %d\n",
               err);
#line 1763
      retcode = 143;
#line 1764
      goto fail;
    } else {

    }
  } else {

  }
#line 1768
  _b = sc.rate <= 0;
#line 1768
  if (_b != 0) {
#line 1768
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1768);
  } else {

  }
#line 1768
  if (_b != 0) {
#line 1768
    sc.rate = 1;
  } else {

  }
#line 1769
  _b___0 = sc.al_extents <= 6;
#line 1769
  if (_b___0 != 0) {
#line 1769
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1769);
  } else {

  }
#line 1769
  if (_b___0 != 0) {
#line 1769
    sc.al_extents = 127;
  } else {

  }
#line 1771
  if (sc.al_extents > 3843) {
#line 1772
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1773
    sc.al_extents = 3843;
  } else {

  }
#line 1780
  if (sc.after >= 0) {
#line 1781
    ensure_mdev(sc.after, 1);
  } else {

  }
#line 1786
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1787
  if (retcode != 101) {
#line 1788
    goto fail;
  } else {

  }
#line 1790
  fifo_size = (sc.c_plan_ahead * 250) / 250;
#line 1791
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 1792
    tmp___10 = kzalloc___2((unsigned long )fifo_size * 4UL, 208U);
#line 1792
    rs_plan_s = (int *)tmp___10;
#line 1793
    if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 1794
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 1795
      retcode = 122;
#line 1796
      goto fail;
    } else {

    }
  } else {

  }
#line 1802
  spin_lock(& mdev->peer_seq_lock);
#line 1803
  mdev->sync_conf = sc;
#line 1805
  if (rsr == 0) {
#line 1806
    crypto_free_hash(mdev->csums_tfm);
#line 1807
    mdev->csums_tfm = csums_tfm;
#line 1808
    csums_tfm = 0;
  } else {

  }
#line 1811
  if (ovr == 0) {
#line 1812
    crypto_free_hash(mdev->verify_tfm);
#line 1813
    mdev->verify_tfm = verify_tfm;
#line 1814
    verify_tfm = 0;
  } else {

  }
#line 1817
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 1818
    kfree((void const   *)mdev->rs_plan_s.values);
#line 1819
    mdev->rs_plan_s.values = rs_plan_s;
#line 1820
    mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 1821
    mdev->rs_planed = 0;
#line 1822
    rs_plan_s = 0;
  } else {

  }
#line 1825
  spin_unlock(& mdev->peer_seq_lock);
#line 1827
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1827
  if (tmp___14 != 0) {
#line 1828
    tmp___11 = lc_try_lock(mdev->act_log);
#line 1828
    if (tmp___11 != 0) {
#line 1828
      goto ldv_47102;
    } else {

    }
#line 1828
    tmp___12 = get_current();
#line 1828
    __wait.flags = 0U;
#line 1828
    __wait.private = (void *)tmp___12;
#line 1828
    __wait.func = & autoremove_wake_function;
#line 1828
    __wait.task_list.next = & __wait.task_list;
#line 1828
    __wait.task_list.prev = & __wait.task_list;
    ldv_47105: 
#line 1828
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1828
    tmp___13 = lc_try_lock(mdev->act_log);
#line 1828
    if (tmp___13 != 0) {
#line 1828
      goto ldv_47104;
    } else {

    }
#line 1828
    schedule();
#line 1828
    goto ldv_47105;
    ldv_47104: 
#line 1828
    finish_wait(& mdev->al_wait, & __wait);
    ldv_47102: 
#line 1829
    drbd_al_shrink(mdev);
#line 1830
    err = drbd_check_al_size(mdev);
#line 1831
    lc_unlock(mdev->act_log);
#line 1832
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1834
    put_ldev(mdev);
#line 1835
    drbd_md_sync(mdev);
#line 1837
    if (err != 0) {
#line 1838
      retcode = 122;
#line 1839
      goto fail;
    } else {

    }
  } else {

  }
#line 1843
  if ((int )mdev->state.ldv_35401.conn > 9) {
#line 1844
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1846
  tmp___15 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1846
  if (tmp___15) {
#line 1846
    tmp___16 = 0;
  } else {
#line 1846
    tmp___16 = 1;
  }
#line 1846
  if (tmp___16) {
#line 1847
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1848
    drbd_calc_cpu_mask(mdev);
#line 1849
    mdev->receiver.reset_cpu_mask = 1;
#line 1850
    mdev->asender.reset_cpu_mask = 1;
#line 1851
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1854
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1856
  kfree((void const   *)rs_plan_s);
#line 1857
  free_cpumask_var(new_cpu_mask);
#line 1858
  crypto_free_hash(csums_tfm);
#line 1859
  crypto_free_hash(verify_tfm);
#line 1860
  reply->ret_code = retcode;
#line 1861
  return (0);
}
}
#line 1864 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1869
  val.i = 0U;
#line 1869
  val.ldv_35401.conn = 12U;
#line 1869
  mask.i = 0U;
#line 1869
  mask.ldv_35401.conn = 31U;
#line 1869
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1871
  if (retcode <= 0 && retcode != -15) {
#line 1872
    val___0.i = 0U;
#line 1872
    val___0.ldv_35401.conn = 12U;
#line 1872
    mask___0.i = 0U;
#line 1872
    mask___0.ldv_35401.conn = 31U;
#line 1872
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1874
  goto ldv_47128;
  ldv_47127: 
#line 1875
  spin_lock_irq(& mdev->req_lock);
#line 1876
  if ((int )mdev->state.ldv_35401.conn <= 9) {
#line 1877
    __ns.i = mdev->state.i;
#line 1877
    __ns.ldv_35401.disk = 4U;
#line 1877
    retcode = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
  } else {

  }
#line 1878
  spin_unlock_irq(& mdev->req_lock);
#line 1880
  if (retcode != -15) {
#line 1881
    goto ldv_47122;
  } else {

  }
#line 1883
  val___1.i = 0U;
#line 1883
  val___1.ldv_35401.conn = 12U;
#line 1883
  mask___1.i = 0U;
#line 1883
  mask___1.ldv_35401.conn = 31U;
#line 1883
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_47128: ;
#line 1874
  if (retcode == -15) {
#line 1875
    goto ldv_47127;
  } else {

  }
  ldv_47122: 
#line 1886
  reply->ret_code = retcode;
#line 1887
  return (0);
}
}
#line 1890 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_bmio_set_susp_al(struct drbd_conf *mdev ) 
{ 
  int rv ;

  {
#line 1894
  rv = drbd_bmio_set_n_write(mdev);
#line 1895
  drbd_suspend_al(mdev);
#line 1896
  return (rv);
}
}
#line 1899 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1904
  val.i = 0U;
#line 1904
  val.ldv_35401.conn = 11U;
#line 1904
  mask.i = 0U;
#line 1904
  mask.ldv_35401.conn = 31U;
#line 1904
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1906
  if (retcode <= 0) {
#line 1907
    if (retcode == -15 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 1910
      val___0.i = 0U;
#line 1910
      val___0.ldv_35401.pdsk = 4U;
#line 1910
      mask___0.i = 0U;
#line 1910
      mask___0.ldv_35401.pdsk = 15U;
#line 1910
      retcode = drbd_request_state(mdev, mask___0, val___0);
#line 1911
      if (retcode > 0) {
#line 1913
        tmp = drbd_bitmap_io(mdev, & drbd_bmio_set_susp_al, (char *)"set_n_write from invalidate_peer");
#line 1913
        if (tmp != 0) {
#line 1915
          retcode = 118;
        } else {

        }
      } else {

      }
    } else {
#line 1918
      val___1.i = 0U;
#line 1918
      val___1.ldv_35401.conn = 11U;
#line 1918
      mask___1.i = 0U;
#line 1918
      mask___1.ldv_35401.conn = 31U;
#line 1918
      retcode = drbd_request_state(mdev, mask___1, val___1);
    }
  } else {

  }
#line 1921
  reply->ret_code = retcode;
#line 1922
  return (0);
}
}
#line 1925 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1928
  retcode = 101;
#line 1930
  val.i = 0U;
#line 1930
  val.ldv_35401.user_isp = 1U;
#line 1930
  mask.i = 0U;
#line 1930
  mask.ldv_35401.user_isp = 1U;
#line 1930
  tmp = drbd_request_state(mdev, mask, val);
#line 1930
  if (tmp == 2) {
#line 1931
    retcode = 134;
  } else {

  }
#line 1933
  reply->ret_code = retcode;
#line 1934
  return (0);
}
}
#line 1937 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1940
  retcode = 101;
#line 1942
  val.i = 0U;
#line 1942
  val.ldv_35401.user_isp = 0U;
#line 1942
  mask.i = 0U;
#line 1942
  mask.ldv_35401.user_isp = 1U;
#line 1942
  tmp = drbd_request_state(mdev, mask, val);
#line 1942
  if (tmp == 2) {
#line 1943
    retcode = 135;
  } else {

  }
#line 1945
  reply->ret_code = retcode;
#line 1946
  return (0);
}
}
#line 1949 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1952
  val.i = 0U;
#line 1952
  val.ldv_35401.susp = 1U;
#line 1952
  mask.i = 0U;
#line 1952
  mask.ldv_35401.susp = 1U;
#line 1952
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1954
  return (0);
}
}
#line 1957 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1960
  tmp = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 1960
  if (tmp != 0) {
#line 1961
    drbd_uuid_new_current(mdev);
#line 1962
    clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1963
    drbd_md_sync(mdev);
  } else {

  }
#line 1965
  drbd_suspend_io(mdev);
#line 1966
  val.i = 0U;
#line 1966
  val.ldv_35401.susp = 0U;
#line 1966
  val.ldv_35401.susp_nod = 0U;
#line 1966
  val.ldv_35401.susp_fen = 0U;
#line 1966
  mask.i = 0U;
#line 1966
  mask.ldv_35401.susp = 1U;
#line 1966
  mask.ldv_35401.susp_nod = 1U;
#line 1966
  mask.ldv_35401.susp_fen = 1U;
#line 1966
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1967
  if (reply->ret_code == 1) {
#line 1968
    if ((int )mdev->state.ldv_35401.conn <= 9) {
#line 1969
      tl_clear(mdev);
    } else {

    }
#line 1970
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 0U || (unsigned int )*((unsigned char *)mdev + 2013UL) == 4U) {
#line 1971
      tl_restart(mdev, fail_frozen_disk_io);
    } else {

    }
  } else {

  }
#line 1973
  drbd_resume_io(mdev);
#line 1975
  return (0);
}
}
#line 1978 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1981
  val.i = 0U;
#line 1981
  val.ldv_35401.disk = 5U;
#line 1981
  mask.i = 0U;
#line 1981
  mask.ldv_35401.disk = 15U;
#line 1981
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1982
  return (0);
}
}
#line 1985 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 1990
  tl = (unsigned short *)(& reply->tag_list);
#line 1992
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1992
  if (tmp != 0) {
#line 1993
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 1994
    put_ldev(mdev);
  } else {

  }
#line 1997
  tmp___0 = get_net_conf(mdev);
#line 1997
  if (tmp___0 != 0) {
#line 1998
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 1999
    put_net_conf(mdev);
  } else {

  }
#line 2001
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 2003
  tmp___1 = tl;
#line 2003
  tl = tl + 1;
#line 2003
  __gu_p = (void *)tmp___1;
#line 2003
  switch (2UL) {
  case 1UL: 
#line 2003
  *((u8 *)__gu_p) = 0U;
#line 2003
  goto ldv_47206;
  case 2UL: 
#line 2003
  put_unaligned_le16(0, __gu_p);
#line 2003
  goto ldv_47206;
  case 4UL: 
#line 2003
  put_unaligned_le32(0U, __gu_p);
#line 2003
  goto ldv_47206;
  case 8UL: 
#line 2003
  put_unaligned_le64(0ULL, __gu_p);
#line 2003
  goto ldv_47206;
  default: 
#line 2003
  __bad_unaligned_access_size();
#line 2003
  goto ldv_47206;
  }
  ldv_47206: ;
#line 2005
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2008 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2011
  tl = (unsigned short *)(& reply->tag_list);
#line 2012
  s = mdev->state;
#line 2016
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 2019
  if ((int )s.ldv_35401.conn > 15 && (int )s.ldv_35401.conn <= 21) {
#line 2020
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2020
    if (tmp != 0) {
#line 2021
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2022
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2023
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 2026
  tmp___0 = tl;
#line 2026
  tl = tl + 1;
#line 2026
  __gu_p = (void *)tmp___0;
#line 2026
  switch (2UL) {
  case 1UL: 
#line 2026
  *((u8 *)__gu_p) = 0U;
#line 2026
  goto ldv_47222;
  case 2UL: 
#line 2026
  put_unaligned_le16(0, __gu_p);
#line 2026
  goto ldv_47222;
  case 4UL: 
#line 2026
  put_unaligned_le32(0U, __gu_p);
#line 2026
  goto ldv_47222;
  case 8UL: 
#line 2026
  put_unaligned_le64(0ULL, __gu_p);
#line 2026
  goto ldv_47222;
  default: 
#line 2026
  __bad_unaligned_access_size();
#line 2026
  goto ldv_47222;
  }
  ldv_47222: ;
#line 2028
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2031 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2036
  tl = (unsigned short *)(& reply->tag_list);
#line 2038
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2038
  if (tmp != 0) {
#line 2039
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 2040
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 2041
    put_ldev(mdev);
  } else {

  }
#line 2043
  tmp___0 = tl;
#line 2043
  tl = tl + 1;
#line 2043
  __gu_p = (void *)tmp___0;
#line 2043
  switch (2UL) {
  case 1UL: 
#line 2043
  *((u8 *)__gu_p) = 0U;
#line 2043
  goto ldv_47235;
  case 2UL: 
#line 2043
  put_unaligned_le16(0, __gu_p);
#line 2043
  goto ldv_47235;
  case 4UL: 
#line 2043
  put_unaligned_le32(0U, __gu_p);
#line 2043
  goto ldv_47235;
  case 8UL: 
#line 2043
  put_unaligned_le64(0ULL, __gu_p);
#line 2043
  goto ldv_47235;
  default: 
#line 2043
  __bad_unaligned_access_size();
#line 2043
  goto ldv_47235;
  }
  ldv_47235: ;
#line 2045
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2054 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2060
  tl = (unsigned short *)(& reply->tag_list);
#line 2062
  if (*((unsigned int *)mdev + 503UL) != 40960U) {
#line 2062
    tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2062
    rv = tmp != 0;
  } else {
#line 2062
    rv = 2;
  }
#line 2065
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 2066
  tmp___0 = tl;
#line 2066
  tl = tl + 1;
#line 2066
  __gu_p = (void *)tmp___0;
#line 2066
  switch (2UL) {
  case 1UL: 
#line 2066
  *((u8 *)__gu_p) = 0U;
#line 2066
  goto ldv_47249;
  case 2UL: 
#line 2066
  put_unaligned_le16(0, __gu_p);
#line 2066
  goto ldv_47249;
  case 4UL: 
#line 2066
  put_unaligned_le32(0U, __gu_p);
#line 2066
  goto ldv_47249;
  case 8UL: 
#line 2066
  put_unaligned_le64(0ULL, __gu_p);
#line 2066
  goto ldv_47249;
  default: 
#line 2066
  __bad_unaligned_access_size();
#line 2066
  goto ldv_47249;
  }
  ldv_47249: ;
#line 2068
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2071 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2075
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 2078
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2078
  if (tmp == 0) {
#line 2079
    reply->ret_code = 126;
#line 2080
    return (0);
  } else {

  }
#line 2083
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 2084
  val.i = 0U;
#line 2084
  val.ldv_35401.conn = 18U;
#line 2084
  mask.i = 0U;
#line 2084
  mask.ldv_35401.conn = 31U;
#line 2084
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2085
  return (0);
}
}
#line 2089 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 2092
  retcode = 101;
#line 2093
  skip_initial_sync = 0;
#line 2098
  memset((void *)(& args), 0, 4UL);
#line 2099
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2099
  if (tmp == 0) {
#line 2100
    reply->ret_code = 126;
#line 2101
    return (0);
  } else {

  }
#line 2104
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 2106
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2106
  if (tmp___0 == 0) {
#line 2107
    retcode = 138;
#line 2108
    goto out;
  } else {

  }
#line 2112
  if ((((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2114
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 2115
    skip_initial_sync = 1;
  } else
#line 2116
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 0U) {
#line 2117
    retcode = 151;
#line 2118
    goto out_dec;
  } else {

  }
#line 2121
  drbd_uuid_set(mdev, 1, 0ULL);
#line 2122
  drbd_uuid_new_current(mdev);
#line 2124
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2125
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid");
#line 2126
    if (err != 0) {
#line 2127
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 2128
      retcode = 118;
    } else {

    }
#line 2130
    if (skip_initial_sync != 0) {
#line 2131
      drbd_send_uuids_skip_initial_sync(mdev);
#line 2132
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 2133
      spin_lock_irq(& mdev->req_lock);
#line 2134
      __ns.i = mdev->state.i;
#line 2134
      __ns.ldv_35401.disk = 8U;
#line 2134
      __ns.ldv_35401.pdsk = 8U;
#line 2134
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2136
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 2140
  drbd_md_sync(mdev);
  out_dec: 
#line 2142
  put_ldev(mdev);
  out: 
#line 2144
  mutex_unlock(& mdev->state_mutex);
#line 2146
  reply->ret_code = retcode;
#line 2147
  return (0);
}
}
#line 2157 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2157
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1288}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  void *tmp___0 ;

  {
#line 2190
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2196
  reply_size = 34;
#line 2200
  tmp = ldv_try_module_get_2(& __this_module);
#line 2200
  if (tmp == 0) {
#line 2201
    printk("<3>drbd: try_module_get() failed!\n");
#line 2202
    return;
  } else {

  }
#line 2205
  if ((nsp->eff_cap.cap[0] & 2097152U) == 0U) {
#line 2206
    retcode = 152;
#line 2207
    goto fail;
  } else {

  }
#line 2210
  mdev = ensure_mdev((int )nlp->drbd_minor, nlp->flags & 1);
#line 2212
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2213
    retcode = 127;
#line 2214
    goto fail;
  } else {

  }
#line 2217
  if (nlp->packet_type > 26) {
#line 2218
    retcode = 137;
#line 2219
    goto fail;
  } else {

  }
#line 2222
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2225
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2226
    retcode = 137;
#line 2227
    goto fail;
  } else {

  }
#line 2230
  reply_size = cm->reply_body_size + reply_size;
#line 2233
  tmp___0 = kmalloc___4((size_t )reply_size, 208U);
#line 2233
  cn_reply = (struct cn_msg *)tmp___0;
#line 2234
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2235
    retcode = 122;
#line 2236
    goto fail;
  } else {

  }
#line 2238
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2240
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2242
  reply->minor = nlp->drbd_minor;
#line 2243
  reply->ret_code = 101;
#line 2246
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2248
  cn_reply->id = req->id;
#line 2249
  cn_reply->seq = req->seq;
#line 2250
  cn_reply->ack = req->ack + 1U;
#line 2251
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2252
  cn_reply->flags = 0U;
#line 2254
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2255
  if (rr != 0 && rr != -3) {
#line 2256
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2258
  kfree((void const   *)cn_reply);
#line 2259
  ldv_module_put_5(& __this_module);
#line 2260
  return;
  fail: 
#line 2262
  drbd_nl_send_reply(req, retcode);
#line 2263
  ldv_module_put_6(& __this_module);
#line 2264
  return;
}
}
#line 2266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2269 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2272
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2273
  len = (int )len < (int )l ? len : l;
#line 2274
  tmp = tl;
#line 2274
  tl = tl + 1;
#line 2274
  __gu_p = (void *)tmp;
#line 2274
  switch (2UL) {
  case 1UL: 
#line 2274
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2274
  goto ldv_47308;
  case 2UL: 
#line 2274
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2274
  goto ldv_47308;
  case 4UL: 
#line 2274
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2274
  goto ldv_47308;
  case 8UL: 
#line 2274
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2274
  goto ldv_47308;
  default: 
#line 2274
  __bad_unaligned_access_size();
#line 2274
  goto ldv_47308;
  }
  ldv_47308: 
#line 2275
  tmp___0 = tl;
#line 2275
  tl = tl + 1;
#line 2275
  __gu_p___0 = (void *)tmp___0;
#line 2275
  switch (2UL) {
  case 1UL: 
#line 2275
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2275
  goto ldv_47315;
  case 2UL: 
#line 2275
  put_unaligned_le16((int )len, __gu_p___0);
#line 2275
  goto ldv_47315;
  case 4UL: 
#line 2275
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2275
  goto ldv_47315;
  case 8UL: 
#line 2275
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2275
  goto ldv_47315;
  default: 
#line 2275
  __bad_unaligned_access_size();
#line 2275
  goto ldv_47315;
  }
  ldv_47315: 
#line 2276
  __len = (size_t )len;
#line 2276
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2277
  tl = tl + (unsigned long )len;
#line 2278
  if (nul_terminated != 0) {
#line 2279
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2280
  return (tl);
}
}
#line 2284 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2286
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2286
  return (tmp);
}
}
#line 2290 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2292
  tmp = strlen(str);
#line 2292
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2292
  return (tmp___0);
}
}
#line 2296 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2298
  tmp = tl;
#line 2298
  tl = tl + 1;
#line 2298
  __gu_p = (void *)tmp;
#line 2298
  switch (2UL) {
  case 1UL: 
#line 2298
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2298
  goto ldv_47341;
  case 2UL: 
#line 2298
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2298
  goto ldv_47341;
  case 4UL: 
#line 2298
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2298
  goto ldv_47341;
  case 8UL: 
#line 2298
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2298
  goto ldv_47341;
  default: 
#line 2298
  __bad_unaligned_access_size();
#line 2298
  goto ldv_47341;
  }
  ldv_47341: ;
#line 2299
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2301
  tmp___0 = tl;
#line 2301
  tl = tl + 1;
#line 2301
  __gu_p___0 = (void *)tmp___0;
#line 2301
  switch (2UL) {
  case 1UL: 
#line 2301
  *((u8 *)__gu_p___0) = 4U;
#line 2301
  goto ldv_47349;
  case 2UL: 
#line 2301
  put_unaligned_le16(4, __gu_p___0);
#line 2301
  goto ldv_47349;
  case 4UL: 
#line 2301
  put_unaligned_le32(4U, __gu_p___0);
#line 2301
  goto ldv_47349;
  case 8UL: 
#line 2301
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2301
  goto ldv_47349;
  default: 
#line 2301
  __bad_unaligned_access_size();
#line 2301
  goto ldv_47349;
  }
  ldv_47349: 
#line 2302
  __gu_p___1 = (void *)tl;
#line 2302
  switch (4UL) {
  case 1UL: 
#line 2302
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2302
  goto ldv_47356;
  case 2UL: 
#line 2302
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2302
  goto ldv_47356;
  case 4UL: 
#line 2302
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2302
  goto ldv_47356;
  case 8UL: 
#line 2302
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2302
  goto ldv_47356;
  default: 
#line 2302
  __bad_unaligned_access_size();
#line 2302
  goto ldv_47356;
  }
  ldv_47356: 
#line 2303
  tl = tl + 4U;
#line 2304
  goto ldv_47361;
  case 16384U: 
#line 2306
  tmp___1 = tl;
#line 2306
  tl = tl + 1;
#line 2306
  __gu_p___2 = (void *)tmp___1;
#line 2306
  switch (2UL) {
  case 1UL: 
#line 2306
  *((u8 *)__gu_p___2) = 8U;
#line 2306
  goto ldv_47365;
  case 2UL: 
#line 2306
  put_unaligned_le16(8, __gu_p___2);
#line 2306
  goto ldv_47365;
  case 4UL: 
#line 2306
  put_unaligned_le32(8U, __gu_p___2);
#line 2306
  goto ldv_47365;
  case 8UL: 
#line 2306
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2306
  goto ldv_47365;
  default: 
#line 2306
  __bad_unaligned_access_size();
#line 2306
  goto ldv_47365;
  }
  ldv_47365: 
#line 2307
  __gu_p___3 = (void *)tl;
#line 2307
  switch (8UL) {
  case 1UL: 
#line 2307
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2307
  goto ldv_47372;
  case 2UL: 
#line 2307
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2307
  goto ldv_47372;
  case 4UL: 
#line 2307
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2307
  goto ldv_47372;
  case 8UL: 
#line 2307
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2307
  goto ldv_47372;
  default: 
#line 2307
  __bad_unaligned_access_size();
#line 2307
  goto ldv_47372;
  }
  ldv_47372: 
#line 2308
  tl = tl + 8U;
#line 2309
  goto ldv_47361;
  default: ;
  }
  ldv_47361: ;
#line 2314
  return (tl);
}
}
#line 2317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2323
  cn_reply = (struct cn_msg *)(& buffer);
#line 2324
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2326
  tl = (unsigned short *)(& reply->tag_list);
#line 2330
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2332
  tmp = tl;
#line 2332
  tl = tl + 1;
#line 2332
  __gu_p = (void *)tmp;
#line 2332
  switch (2UL) {
  case 1UL: 
#line 2332
  *((u8 *)__gu_p) = 0U;
#line 2332
  goto ldv_47388;
  case 2UL: 
#line 2332
  put_unaligned_le16(0, __gu_p);
#line 2332
  goto ldv_47388;
  case 4UL: 
#line 2332
  put_unaligned_le32(0U, __gu_p);
#line 2332
  goto ldv_47388;
  case 8UL: 
#line 2332
  put_unaligned_le64(0ULL, __gu_p);
#line 2332
  goto ldv_47388;
  default: 
#line 2332
  __bad_unaligned_access_size();
#line 2332
  goto ldv_47388;
  }
  ldv_47388: 
#line 2334
  cn_reply->id.idx = 8U;
#line 2335
  cn_reply->id.val = 1U;
#line 2337
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2337
  cn_reply->seq = (__u32 )tmp___0;
#line 2338
  cn_reply->ack = 0U;
#line 2339
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2341
  cn_reply->flags = 0U;
#line 2343
  reply->packet_type = 17;
#line 2344
  reply->minor = mdev_to_minor(mdev);
#line 2345
  reply->ret_code = 101;
#line 2347
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2348
  return;
}
}
#line 2350 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2356
  cn_reply = (struct cn_msg *)(& buffer);
#line 2357
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2359
  tl = (unsigned short *)(& reply->tag_list);
#line 2363
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2364
  tmp = tl;
#line 2364
  tl = tl + 1;
#line 2364
  __gu_p = (void *)tmp;
#line 2364
  switch (2UL) {
  case 1UL: 
#line 2364
  *((u8 *)__gu_p) = 0U;
#line 2364
  goto ldv_47403;
  case 2UL: 
#line 2364
  put_unaligned_le16(0, __gu_p);
#line 2364
  goto ldv_47403;
  case 4UL: 
#line 2364
  put_unaligned_le32(0U, __gu_p);
#line 2364
  goto ldv_47403;
  case 8UL: 
#line 2364
  put_unaligned_le64(0ULL, __gu_p);
#line 2364
  goto ldv_47403;
  default: 
#line 2364
  __bad_unaligned_access_size();
#line 2364
  goto ldv_47403;
  }
  ldv_47403: 
#line 2366
  cn_reply->id.idx = 8U;
#line 2367
  cn_reply->id.val = 1U;
#line 2369
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2369
  cn_reply->seq = (__u32 )tmp___0;
#line 2370
  cn_reply->ack = 0U;
#line 2371
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2373
  cn_reply->flags = 0U;
#line 2375
  reply->packet_type = 20;
#line 2376
  reply->minor = mdev_to_minor(mdev);
#line 2377
  reply->ret_code = 101;
#line 2379
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2380
  return;
}
}
#line 2382 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2393
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2394
    return;
  } else {

  }
#line 2395
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2396
    return;
  } else {

  }
#line 2404
  tmp = kmalloc___4(33026UL, 16U);
#line 2404
  cn_reply = (struct cn_msg *)tmp;
#line 2411
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2412
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2414
    return;
  } else {

  }
#line 2417
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2418
  tl = (unsigned short *)(& reply->tag_list);
#line 2420
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2421
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2422
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2423
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2424
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->ldv_42864.block_id));
#line 2426
  tmp___0 = tl;
#line 2426
  tl = tl + 1;
#line 2426
  __gu_p = (void *)tmp___0;
#line 2426
  switch (2UL) {
  case 1UL: 
#line 2426
  *((u8 *)__gu_p) = 50U;
#line 2426
  goto ldv_47423;
  case 2UL: 
#line 2426
  put_unaligned_le16(49202, __gu_p);
#line 2426
  goto ldv_47423;
  case 4UL: 
#line 2426
  put_unaligned_le32(49202U, __gu_p);
#line 2426
  goto ldv_47423;
  case 8UL: 
#line 2426
  put_unaligned_le64(49202ULL, __gu_p);
#line 2426
  goto ldv_47423;
  default: 
#line 2426
  __bad_unaligned_access_size();
#line 2426
  goto ldv_47423;
  }
  ldv_47423: 
#line 2427
  tmp___1 = tl;
#line 2427
  tl = tl + 1;
#line 2427
  __gu_p___0 = (void *)tmp___1;
#line 2427
  switch (2UL) {
  case 1UL: 
#line 2427
  *((u8 *)__gu_p___0) = (unsigned char )e->size;
#line 2427
  goto ldv_47430;
  case 2UL: 
#line 2427
  put_unaligned_le16((int )((unsigned short )e->size), __gu_p___0);
#line 2427
  goto ldv_47430;
  case 4UL: 
#line 2427
  put_unaligned_le32(e->size, __gu_p___0);
#line 2427
  goto ldv_47430;
  case 8UL: 
#line 2427
  put_unaligned_le64((unsigned long long )e->size, __gu_p___0);
#line 2427
  goto ldv_47430;
  default: 
#line 2427
  __bad_unaligned_access_size();
#line 2427
  goto ldv_47430;
  }
  ldv_47430: 
#line 2429
  len = e->size;
#line 2430
  page = e->pages;
#line 2431
  goto ldv_47445;
  ldv_47444: 
#line 2432
  tmp___2 = kmap_atomic(page, KM_USER0);
#line 2432
  d = tmp___2;
#line 2433
  __min1 = len;
#line 2433
  __min2 = 4096U;
#line 2433
  l = __min1 < __min2 ? __min1 : __min2;
#line 2434
  __len = (size_t )l;
#line 2434
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2435
  kunmap_atomic_notypecheck(d, KM_USER0);
#line 2436
  tl = tl + (unsigned long )l;
#line 2437
  len = len - l;
#line 2431
  page = page_chain_next(page);
  ldv_47445: ;
#line 2431
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2431
    tmp___3 = page_chain_next(page);
#line 2431
    __builtin_prefetch((void const   *)tmp___3);
#line 2431
    if (1 != 0) {
#line 2432
      goto ldv_47444;
    } else {
#line 2434
      goto ldv_47446;
    }
  } else {

  }
  ldv_47446: 
#line 2439
  tmp___4 = tl;
#line 2439
  tl = tl + 1;
#line 2439
  __gu_p___1 = (void *)tmp___4;
#line 2439
  switch (2UL) {
  case 1UL: 
#line 2439
  *((u8 *)__gu_p___1) = 0U;
#line 2439
  goto ldv_47449;
  case 2UL: 
#line 2439
  put_unaligned_le16(0, __gu_p___1);
#line 2439
  goto ldv_47449;
  case 4UL: 
#line 2439
  put_unaligned_le32(0U, __gu_p___1);
#line 2439
  goto ldv_47449;
  case 8UL: 
#line 2439
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2439
  goto ldv_47449;
  default: 
#line 2439
  __bad_unaligned_access_size();
#line 2439
  goto ldv_47449;
  }
  ldv_47449: 
#line 2441
  cn_reply->id.idx = 8U;
#line 2442
  cn_reply->id.val = 1U;
#line 2444
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2444
  cn_reply->seq = (__u32 )tmp___5;
#line 2445
  cn_reply->ack = 0U;
#line 2446
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2448
  cn_reply->flags = 0U;
#line 2450
  reply->packet_type = 24;
#line 2451
  reply->minor = mdev_to_minor(mdev);
#line 2452
  reply->ret_code = 101;
#line 2454
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2455
  kfree((void const   *)cn_reply);
#line 2456
  return;
}
}
#line 2458 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2464
  cn_reply = (struct cn_msg *)(& buffer);
#line 2465
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2467
  tl = (unsigned short *)(& reply->tag_list);
#line 2472
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2472
  if (tmp == 0) {
#line 2473
    return;
  } else {

  }
#line 2474
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2475
  put_ldev(mdev);
#line 2477
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2478
  tmp___0 = tl;
#line 2478
  tl = tl + 1;
#line 2478
  __gu_p = (void *)tmp___0;
#line 2478
  switch (2UL) {
  case 1UL: 
#line 2478
  *((u8 *)__gu_p) = 0U;
#line 2478
  goto ldv_47465;
  case 2UL: 
#line 2478
  put_unaligned_le16(0, __gu_p);
#line 2478
  goto ldv_47465;
  case 4UL: 
#line 2478
  put_unaligned_le32(0U, __gu_p);
#line 2478
  goto ldv_47465;
  case 8UL: 
#line 2478
  put_unaligned_le64(0ULL, __gu_p);
#line 2478
  goto ldv_47465;
  default: 
#line 2478
  __bad_unaligned_access_size();
#line 2478
  goto ldv_47465;
  }
  ldv_47465: 
#line 2480
  cn_reply->id.idx = 8U;
#line 2481
  cn_reply->id.val = 1U;
#line 2483
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2483
  cn_reply->seq = (__u32 )tmp___1;
#line 2484
  cn_reply->ack = 0U;
#line 2485
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2487
  cn_reply->flags = 0U;
#line 2489
  reply->packet_type = 23;
#line 2490
  reply->minor = mdev_to_minor(mdev);
#line 2491
  reply->ret_code = 101;
#line 2493
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2494
  return;
}
}
#line 2496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2499
  try = 10;
#line 2501
  cn_id_drbd.val = 1U;
  ldv_47477: 
#line 2503
  cn_id_drbd.idx = cn_idx;
#line 2504
  err = cn_add_callback(& cn_id_drbd, (char *)"cn_drbd", & drbd_connector_callback);
#line 2505
  if (err == 0) {
#line 2506
    goto ldv_47476;
  } else {

  }
#line 2507
  cn_idx = cn_idx + 6977U;
#line 2508
  tmp = try;
#line 2508
  try = try - 1;
#line 2508
  if (tmp != 0) {
#line 2509
    goto ldv_47477;
  } else {

  }
  ldv_47476: ;
#line 2510
  if (err != 0) {
#line 2511
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2512
    return (err);
  } else {

  }
#line 2515
  return (0);
}
}
#line 2518 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2522
  cn_id_drbd.idx = cn_idx;
#line 2523
  cn_id_drbd.val = 1U;
#line 2525
  cn_del_callback(& cn_id_drbd);
#line 2526
  return;
}
}
#line 2528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2531
  cn_reply = (struct cn_msg *)(& buffer);
#line 2532
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2536
  cn_reply->id = req->id;
#line 2538
  cn_reply->seq = req->seq;
#line 2539
  cn_reply->ack = req->ack + 1U;
#line 2540
  cn_reply->len = 12U;
#line 2541
  cn_reply->flags = 0U;
#line 2543
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2544
  reply->ret_code = ret_code;
#line 2546
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2547
  if (rr != 0 && rr != -3) {
#line 2548
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2549
  return;
}
}
#line 2559 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_5(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2564
  ldv_module_put(ldv_func_arg1);
#line 2565
  return;
}
}
#line 2567 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_6(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2572
  ldv_module_put(ldv_func_arg1);
#line 2573
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
