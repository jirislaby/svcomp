/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list;
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list;
#line 11 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 13 "include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 6 "include/asm/types.h"
typedef unsigned short umode_t;
#line 13 "include/asm/types.h"
typedef signed char __s8;
#line 14 "include/asm/types.h"
typedef unsigned char __u8;
#line 16 "include/asm/types.h"
typedef short __s16;
#line 17 "include/asm/types.h"
typedef unsigned short __u16;
#line 19 "include/asm/types.h"
typedef int __s32;
#line 20 "include/asm/types.h"
typedef unsigned int __u32;
#line 28 "include/asm/types.h"
typedef long long __s64;
#line 29 "include/asm/types.h"
typedef unsigned long long __u64;
#line 47 "include/asm/types.h"
typedef signed char s8;
#line 48 "include/asm/types.h"
typedef unsigned char u8;
#line 51 "include/asm/types.h"
typedef unsigned short u16;
#line 54 "include/asm/types.h"
typedef unsigned int u32;
#line 56 "include/asm/types.h"
typedef long long s64;
#line 57 "include/asm/types.h"
typedef unsigned long long u64;
#line 62 "include/asm/types.h"
typedef u64 dma_addr_t;
#line 16 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 19 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 23 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 24 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 28 "include/linux/types.h"
typedef __kernel_timer_t timer_t;
#line 29 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 33 "include/linux/types.h"
typedef _Bool bool;
#line 35 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 36 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 57 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 66 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 71 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 86 "include/linux/types.h"
typedef __kernel_clock_t clock_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 151 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 180 "include/linux/types.h"
typedef __u16 __le16;
#line 192 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 59 "include/asm/alternative.h"
struct module;
#line 10 "include/asm-generic/bug.h"
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
#line 93 "include/linux/kernel.h"
struct completion;
#line 94
struct pt_regs;
#line 176
struct pid;
#line 12 "include/linux/thread_info.h"
struct timespec;
#line 13
struct compat_timespec;
#line 18 "include/linux/thread_info.h"
struct __anonstruct____missing_field_name_6 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_futex_7 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_nanosleep_8 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 18 "include/linux/thread_info.h"
union __anonunion____missing_field_name_5 {
   struct __anonstruct____missing_field_name_6 __annonCompField1 ;
   struct __anonstruct_futex_7 futex ;
   struct __anonstruct_nanosleep_8 nanosleep ;
};
#line 18 "include/linux/thread_info.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_5 __annonCompField2 ;
};
#line 73 "include/asm/page_64.h"
typedef unsigned long pgdval_t;
#line 74 "include/asm/page_64.h"
typedef unsigned long pgprotval_t;
#line 77
struct page;
#line 71 "include/asm/page.h"
struct __anonstruct_pgd_t_10 {
   pgdval_t pgd ;
};
#line 71 "include/asm/page.h"
typedef struct __anonstruct_pgd_t_10 pgd_t;
#line 72 "include/asm/page.h"
struct __anonstruct_pgprot_t_11 {
   pgprotval_t pgprot ;
};
#line 72 "include/asm/page.h"
typedef struct __anonstruct_pgprot_t_11 pgprot_t;
#line 22 "include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 22 "include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 22 "include/asm/desc_defs.h"
union __anonunion____missing_field_name_14 {
   struct __anonstruct____missing_field_name_15 __annonCompField3 ;
   struct __anonstruct____missing_field_name_16 __annonCompField4 ;
};
#line 22 "include/asm/desc_defs.h"
struct desc_struct {
   union __anonunion____missing_field_name_14 __annonCompField5 ;
} __attribute__((__packed__)) ;
#line 88 "include/linux/cpumask.h"
struct __anonstruct_cpumask_t_19 {
   unsigned long bits[((8 + 64) - 1) / 64] ;
};
#line 88 "include/linux/cpumask.h"
typedef struct __anonstruct_cpumask_t_19 cpumask_t;
#line 37 "include/asm/paravirt.h"
struct thread_struct;
#line 40
struct mm_struct;
#line 11 "include/asm/pda.h"
struct task_struct;
#line 11 "include/asm/pda.h"
struct x8664_pda {
   struct task_struct *pcurrent ;
   unsigned long data_offset ;
   unsigned long kernelstack ;
   unsigned long oldrsp ;
   int irqcount ;
   unsigned int cpunumber ;
   char *irqstackptr ;
   unsigned int __softirq_pending ;
   unsigned int __nmi_count ;
   short mmu_state ;
   short isidle ;
   struct mm_struct *active_mm ;
   unsigned int apic_timer_irqs ;
   unsigned int irq0_irqs ;
   unsigned int irq_resched_count ;
   unsigned int irq_call_count ;
   unsigned int irq_tlb_count ;
   unsigned int irq_thermal_count ;
   unsigned int irq_threshold_count ;
   unsigned int irq_spurious_count ;
} __attribute__((__aligned__((1) <<  (7) ))) ;
#line 23 "include/asm/thread_info_64.h"
struct exec_domain;
#line 97 "include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 8 "include/asm/math_emu.h"
struct info {
   long ___orig_eip ;
   long ___ebx ;
   long ___ecx ;
   long ___edx ;
   long ___esi ;
   long ___edi ;
   long ___ebp ;
   long ___eax ;
   long ___ds ;
   long ___es ;
   long ___fs ;
   long ___orig_eax ;
   long ___eip ;
   long ___cs ;
   long ___eflags ;
   long ___esp ;
   long ___ss ;
   long ___vm86_es ;
   long ___vm86_ds ;
   long ___vm86_fs ;
   long ___vm86_gs ;
};
#line 88 "include/linux/personality.h"
struct map_segment;
#line 88 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 291 "include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u32 status ;
};
#line 307 "include/asm/processor.h"
struct __anonstruct____missing_field_name_25 {
   u64 rip ;
   u64 rdp ;
};
#line 307 "include/asm/processor.h"
struct __anonstruct____missing_field_name_26 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 307 "include/asm/processor.h"
union __anonunion____missing_field_name_24 {
   struct __anonstruct____missing_field_name_25 __annonCompField6 ;
   struct __anonstruct____missing_field_name_26 __annonCompField7 ;
};
#line 307 "include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_24 __annonCompField8 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32] ;
   u32 xmm_space[64] ;
   u32 padding[24] ;
} __attribute__((__aligned__(16))) ;
#line 337 "include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct info *info ;
   u32 entry_eip ;
};
#line 357 "include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
};
#line 370
struct kmem_cache;
#line 375 "include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   unsigned long ds_area_msr ;
};
#line 608 "include/asm/processor.h"
struct __anonstruct_mm_segment_t_27 {
   unsigned long seg ;
};
#line 608 "include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_27 mm_segment_t;
#line 26 "include/asm/thread_info_64.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
#line 21 "include/linux/list.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 682
struct hlist_node;
#line 682 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 686 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 8 "include/asm/spinlock_types.h"
struct __anonstruct_raw_spinlock_t_28 {
   unsigned int slock ;
};
#line 8 "include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_spinlock_t_28 raw_spinlock_t;
#line 14 "include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_29 {
   unsigned int lock ;
};
#line 14 "include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_29 raw_rwlock_t;
#line 340 "include/linux/lockdep.h"
struct lock_class_key {

};
#line 20 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_30 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
};
#line 20 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_30 spinlock_t;
#line 36 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_31 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
};
#line 36 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_31 rwlock_t;
#line 25 "include/asm/atomic_64.h"
struct __anonstruct_atomic_t_32 {
   int counter ;
};
#line 25 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic_t_32 atomic_t;
#line 202 "include/asm/atomic_64.h"
struct __anonstruct_atomic64_t_33 {
   long counter ;
};
#line 202 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic64_t_33 atomic64_t;
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 32 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t *wait , unsigned int mode , int sync , void *key ) ;
   struct list_head task_list ;
};
#line 50 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 88 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[(((1 << 6) + 64) - 1) / 64] ;
};
#line 88 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 48 "include/linux/mutex.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
};
#line 67 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
#line 19 "include/linux/rwsem.h"
struct rw_semaphore;
#line 31 "include/linux/rwsem-spinlock.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
};
#line 673 "include/linux/mmzone.h"
struct file;
#line 111 "include/linux/pm.h"
struct device;
#line 113 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 113 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 183 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int should_wakeup : 1 ;
   bool sleeping : 1 ;
   struct list_head entry ;
};
#line 8 "include/linux/gfp.h"
struct vm_area_struct;
#line 13 "include/linux/time.h"
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
#line 46 "include/linux/ktime.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 8 "include/linux/timer.h"
struct tvec_base;
#line 10 "include/linux/timer.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
};
#line 159
struct hrtimer;
#line 160
enum hrtimer_restart;
#line 16 "include/linux/workqueue.h"
struct work_struct;
#line 25 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *work ) ;
};
#line 39 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 20 "include/linux/sysfs.h"
struct kobject;
#line 27 "include/linux/sysfs.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   int (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 76 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 23 "include/linux/kref.h"
struct kref {
   atomic_t refcount ;
};
#line 62 "include/linux/kobject.h"
struct kset;
#line 62
struct kobj_type;
#line 62
struct sysfs_dirent;
#line 62 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct kref kref ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 113 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
#line 120 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(*name)(struct kset *kset , struct kobject *kobj ) ;
   int (*uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
#line 154 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 14 "include/linux/slub_def.h"
enum stat_item {
    ALLOC_FASTPATH = 0,
    ALLOC_SLOWPATH = 1,
    FREE_FASTPATH = 2,
    FREE_SLOWPATH = 3,
    FREE_FROZEN = 4,
    FREE_ADD_PARTIAL = 5,
    FREE_REMOVE_PARTIAL = 6,
    ALLOC_FROM_PARTIAL = 7,
    ALLOC_SLAB = 8,
    ALLOC_REFILL = 9,
    FREE_SLAB = 10,
    CPUSLAB_FLUSH = 11,
    DEACTIVATE_FULL = 12,
    DEACTIVATE_EMPTY = 13,
    DEACTIVATE_TO_HEAD = 14,
    DEACTIVATE_TO_TAIL = 15,
    DEACTIVATE_REMOTE_FREES = 16,
    NR_SLUB_STAT_ITEMS = 17
} ;
#line 34 "include/linux/slub_def.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[NR_SLUB_STAT_ITEMS] ;
};
#line 45 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   struct list_head full ;
};
#line 58 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   int order ;
   struct kmem_cache_node local_node ;
   int objects ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(struct kmem_cache * , void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1 << 6] ;
   struct kmem_cache_cpu *cpu_slab[8] ;
};
#line 51 "include/linux/rcupdate.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head *head ) ;
};
#line 12 "include/linux/dcache.h"
struct nameidata;
#line 13
struct path;
#line 14
struct vfsmount;
#line 34 "include/linux/dcache.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 79
struct dcookie_struct;
#line 83
struct inode;
#line 83 "include/linux/dcache.h"
union __anonunion_d_u_89 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 83
struct dentry_operations;
#line 83
struct super_block;
#line 83 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_89 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36] ;
};
#line 130 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 7 "include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 10 "include/linux/namei.h"
struct open_intent {
   int flags ;
   int create_mode ;
   struct file *file ;
};
#line 16
enum __anonenum_90 {
    MAX_NESTED_LINKS = 8
} ;
#line 18 "include/linux/namei.h"
union __anonunion_intent_91 {
   struct open_intent open ;
};
#line 18 "include/linux/namei.h"
struct nameidata {
   struct path path ;
   struct qstr last ;
   unsigned int flags ;
   int last_type ;
   unsigned int depth ;
   char *saved_names[MAX_NESTED_LINKS + 1] ;
   union __anonunion_intent_91 intent ;
};
#line 62 "include/linux/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 61 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 61 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 14 "include/linux/prio_tree.h"
struct prio_tree_node;
#line 14 "include/linux/prio_tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 20 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 28 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 6 "include/linux/pid.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 50
struct pid_namespace;
#line 50 "include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 57 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   struct hlist_head tasks[PIDTYPE_MAX] ;
   struct rcu_head rcu ;
   int level ;
   struct upid numbers[1] ;
};
#line 69 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 82 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2] ;
};
#line 82 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 16 "include/linux/semaphore.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 295 "include/linux/fs.h"
struct export_operations;
#line 297
struct iovec;
#line 299
struct kiocb;
#line 300
struct pipe_inode_info;
#line 301
struct poll_table_struct;
#line 302
struct kstatfs;
#line 346 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 44 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 45 "include/linux/quota.h"
typedef __u64 qsize_t;
#line 103 "include/linux/quota.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 124 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 50 "include/linux/dqblk_xfs.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8] ;
};
#line 137 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 137 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 143 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 21 "include/linux/dqblk_v1.h"
struct v1_mem_dqinfo {

};
#line 20 "include/linux/dqblk_v2.h"
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
#line 187 "include/linux/quota.h"
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 201
struct quota_format_type;
#line 203 "include/linux/quota.h"
union __anonunion_u_96 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
#line 203 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   union __anonunion_u_96 u ;
};
#line 249 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 271 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *sb , int type ) ;
   int (*read_file_info)(struct super_block *sb , int type ) ;
   int (*write_file_info)(struct super_block *sb , int type ) ;
   int (*free_file_info)(struct super_block *sb , int type ) ;
   int (*read_dqblk)(struct dquot *dquot ) ;
   int (*commit_dqblk)(struct dquot *dquot ) ;
   int (*release_dqblk)(struct dquot *dquot ) ;
};
#line 282 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
#line 298 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 312 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 322 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2] ;
   struct mem_dqinfo info[2] ;
   struct quota_format_ops *ops[2] ;
};
#line 407 "include/linux/fs.h"
struct address_space;
#line 408
struct writeback_control;
#line 443 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *page , struct writeback_control *wbc ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page *page ) ;
   int (*readpages)(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                    unsigned int nr_pages ) ;
   int (*prepare_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*commit_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space *mapping , loff_t pos ,
                      unsigned int len , unsigned int flags , struct page **pagep ,
                      void **fsdata ) ;
   int (*write_end)(struct file * , struct address_space *mapping , loff_t pos , unsigned int len ,
                    unsigned int copied , struct page *page , void *fsdata ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  *iov , loff_t offset ,
                        unsigned long nr_segs ) ;
   struct page *(*get_xip_page)(struct address_space * , sector_t  , int  ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
};
#line 497
struct backing_dev_info;
#line 498 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   rwlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 522
struct hd_struct;
#line 522
struct gendisk;
#line 522 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
#line 592
struct inode_operations;
#line 592
struct file_operations;
#line 592
struct file_lock;
#line 592
struct cdev;
#line 592 "include/linux/fs.h"
union __anonunion____missing_field_name_97 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 592
struct dnotify_struct;
#line 592 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_97 __annonCompField9 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 747 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 758 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 781 "include/linux/fs.h"
union __anonunion_f_u_98 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 781 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_98 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_t f_count ;
   unsigned int f_flags ;
   mode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 894
struct files_struct;
#line 894 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 896 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_insert)(struct file_lock * ) ;
   void (*fl_remove)(struct file_lock * ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 903 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 8 "include/linux/nfs_fs_i.h"
struct nlm_lockowner;
#line 13 "include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 19
struct nfs4_lock_state;
#line 20 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 917 "include/linux/fs.h"
struct fasync_struct;
#line 917 "include/linux/fs.h"
struct __anonstruct_afs_100 {
   struct list_head link ;
   int state ;
};
#line 917 "include/linux/fs.h"
union __anonunion_fl_u_99 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_100 afs ;
};
#line 917 "include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_99 fl_u ;
};
#line 995 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1029
struct file_system_type;
#line 1029
struct super_operations;
#line 1029
struct xattr_handler;
#line 1029
struct mtd_info;
#line 1029 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32] ;
   void *s_fs_info ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1219 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t id ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int datasync ) ;
   int (*aio_fsync)(struct kiocb * , int datasync ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file *filp , unsigned long arg ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1249 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  , struct nameidata * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount *mnt , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode *inode , int mode , loff_t offset , loff_t len ) ;
};
#line 1276
struct seq_file;
#line 1294 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *sb ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*put_inode)(struct inode * ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block *sb , int wait ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct vfsmount * , int  ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
#line 1477 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 1837
struct bio;
#line 6 "include/asm/termbits.h"
typedef unsigned char cc_t;
#line 7 "include/asm/termbits.h"
typedef unsigned int speed_t;
#line 8 "include/asm/termbits.h"
typedef unsigned int tcflag_t;
#line 31 "include/asm/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 7 "include/asm/termios.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 67 "include/asm/uaccess_64.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 13 "include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 127 "include/linux/tty_driver.h"
struct tty_struct;
#line 128
struct tty_driver;
#line 168
struct proc_dir_entry;
#line 168 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   int refcount ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   int (*open)(struct tty_struct *tty , struct file *filp ) ;
   void (*close)(struct tty_struct *tty , struct file *filp ) ;
   int (*write)(struct tty_struct *tty , unsigned char const   *buf , int count ) ;
   void (*put_char)(struct tty_struct *tty , unsigned char ch ) ;
   void (*flush_chars)(struct tty_struct *tty ) ;
   int (*write_room)(struct tty_struct *tty ) ;
   int (*chars_in_buffer)(struct tty_struct *tty ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   long (*compat_ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                        unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct ktermios *old ) ;
   void (*throttle)(struct tty_struct *tty ) ;
   void (*unthrottle)(struct tty_struct *tty ) ;
   void (*stop)(struct tty_struct *tty ) ;
   void (*start)(struct tty_struct *tty ) ;
   void (*hangup)(struct tty_struct *tty ) ;
   void (*break_ctl)(struct tty_struct *tty , int state ) ;
   void (*flush_buffer)(struct tty_struct *tty ) ;
   void (*set_ldisc)(struct tty_struct *tty ) ;
   void (*wait_until_sent)(struct tty_struct *tty , int timeout ) ;
   void (*send_xchar)(struct tty_struct *tty , char ch ) ;
   int (*read_proc)(char *page , char **start , off_t off , int count , int *eof ,
                    void *data ) ;
   int (*write_proc)(struct file *file , char const   *buffer , unsigned long count ,
                     void *data ) ;
   int (*tiocmget)(struct tty_struct *tty , struct file *file ) ;
   int (*tiocmset)(struct tty_struct *tty , struct file *file , unsigned int set ,
                   unsigned int clear ) ;
   int (*poll_init)(struct tty_driver *driver , int line , char *options ) ;
   int (*poll_get_char)(struct tty_driver *driver , int line ) ;
   void (*poll_put_char)(struct tty_driver *driver , int line , char ch ) ;
   struct list_head tty_drivers ;
};
#line 107 "include/linux/tty_ldisc.h"
struct tty_ldisc {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct *tty ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct *tty ) ;
   ssize_t (*read)(struct tty_struct *tty , struct file *file , unsigned char *buf ,
                   size_t nr ) ;
   ssize_t (*write)(struct tty_struct *tty , struct file *file , unsigned char const   *buf ,
                    size_t nr ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   long (*compat_ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                        unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct ktermios *old ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct *tty ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   *cp , char *fp ,
                       int count ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
#line 56 "include/linux/tty.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0] ;
};
#line 68 "include/linux/tty.h"
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 168
struct signal_struct;
#line 180 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct tty_driver *driver ;
   int index ;
   struct tty_ldisc ldisc ;
   struct mutex termios_mutex ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   char name[64] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[256UL / (8UL * sizeof(unsigned long ))] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[4096UL / (8UL * sizeof(unsigned long ))] ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
};
#line 38 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 181 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 181 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 29 "include/linux/moduleparam.h"
struct kernel_param;
#line 36
struct kparam_string;
#line 36
struct kparam_array;
#line 36 "include/linux/moduleparam.h"
union __anonunion____missing_field_name_109 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 36 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   unsigned int perm ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   union __anonunion____missing_field_name_109 __annonCompField10 ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 55 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 18 "include/linux/marker.h"
struct marker;
#line 32 "include/linux/marker.h"
typedef void marker_probe_func(void *probe_private , void *call_private , char const   *fmt ,
                               va_list *args );
#line 35 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 40 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  *mdata , void *call_private , char const   *fmt 
                , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
} __attribute__((__aligned__(8))) ;
#line 10 "include/asm/local.h"
struct __anonstruct_local_t_110 {
   atomic_long_t a ;
};
#line 10 "include/asm/local.h"
typedef struct __anonstruct_local_t_110 local_t;
#line 5 "include/asm/module.h"
struct mod_arch_specific {

};
#line 33 "include/linux/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 47 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t count ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 57 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
};
#line 220 "include/linux/module.h"
struct module_ref {
   local_t count ;
} __attribute__((__aligned__((1) <<  (7) ))) ;
#line 225
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 233 "include/linux/module.h"
struct module_sect_attr {
   struct module_attribute mattr ;
   char *name ;
   unsigned long address ;
};
#line 240 "include/linux/module.h"
struct module_sect_attrs {
   struct attribute_group grp ;
   int nsections ;
   struct module_sect_attr attrs[0] ;
};
#line 247
struct module_param_attrs;
#line 249
struct module_notes_attrs;
#line 249 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[64UL - sizeof(unsigned long )] ;
   struct module_kobject mkobj ;
   struct module_param_attrs *param_attrs ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned int num_syms ;
   unsigned long const   *crcs ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned int num_gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned int num_unused_syms ;
   unsigned long const   *unused_crcs ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned int num_unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned int num_gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_exentries ;
   struct exception_table_entry  const  *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned long init_size ;
   unsigned long core_size ;
   unsigned long init_text_size ;
   unsigned long core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   unsigned int num_bugs ;
   struct module_ref ref[8] ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   Elf64_Sym *symtab ;
   unsigned long num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
};
#line 576
struct device_driver;
#line 21 "include/linux/serial.h"
struct async_icount {
   __u32 cts ;
   __u32 dsr ;
   __u32 rng ;
   __u32 dcd ;
   __u32 tx ;
   __u32 rx ;
   __u32 frame ;
   __u32 parity ;
   __u32 overrun ;
   __u32 brk ;
   __u32 buf_overrun ;
};
#line 34 "include/linux/serial.h"
struct serial_struct {
   int type ;
   int line ;
   unsigned int port ;
   int irq ;
   int flags ;
   int xmit_fifo_size ;
   int custom_divisor ;
   int baud_base ;
   unsigned short close_delay ;
   char io_type ;
   char reserved_char[1] ;
   int hub6 ;
   unsigned short closing_wait ;
   unsigned short closing_wait2 ;
   unsigned char *iomem_base ;
   unsigned short iomem_reg_shift ;
   unsigned int port_high ;
   unsigned long iomap_base ;
};
#line 168 "include/linux/serial.h"
struct serial_icounter_struct {
   int cts ;
   int dsr ;
   int rng ;
   int dcd ;
   int rx ;
   int tx ;
   int frame ;
   int overrun ;
   int parity ;
   int brk ;
   int buf_overrun ;
   int reserved[9] ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 98 "include/linux/mod_devicetable.h"
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   kernel_ulong_t driver_info ;
};
#line 146 "include/linux/usb/ch9.h"
struct usb_ctrlrequest {
   __u8 bRequestType ;
   __u8 bRequest ;
   __le16 wValue ;
   __le16 wIndex ;
   __le16 wLength ;
} __attribute__((__packed__)) ;
#line 211 "include/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
} __attribute__((__packed__)) ;
#line 265 "include/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
} __attribute__((__packed__)) ;
#line 302 "include/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
} __attribute__((__packed__)) ;
#line 320 "include/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
} __attribute__((__packed__)) ;
#line 399 "include/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
} __attribute__((__packed__)) ;
#line 557
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4
} ;
#line 564
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_UNAUTHENTICATED = 3,
    USB_STATE_RECONNECTING = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
#line 100 "include/linux/rbtree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 110 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 13 "include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 13 "include/asm/mmu.h"
struct __anonstruct_mm_context_t_112 {
   void *ldt ;
   rwlock_t ldtlock ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 13 "include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_112 mm_context_t;
#line 24 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 36 "include/linux/mm_types.h"
union __anonunion____missing_field_name_113 {
   atomic_t _mapcount ;
   unsigned int inuse ;
};
#line 36 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_115 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 36 "include/linux/mm_types.h"
union __anonunion____missing_field_name_114 {
   struct __anonstruct____missing_field_name_115 __annonCompField12 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 36 "include/linux/mm_types.h"
union __anonunion____missing_field_name_116 {
   unsigned long index ;
   void *freelist ;
};
#line 36 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion____missing_field_name_113 __annonCompField11 ;
   union __anonunion____missing_field_name_114 __annonCompField13 ;
   union __anonunion____missing_field_name_116 __annonCompField14 ;
   struct list_head lru ;
   unsigned long page_cgroup ;
};
#line 102 "include/linux/mm_types.h"
struct __anonstruct_vm_set_118 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 102 "include/linux/mm_types.h"
union __anonunion_shared_117 {
   struct __anonstruct_vm_set_118 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 102
struct anon_vma;
#line 102
struct vm_operations_struct;
#line 102
struct mempolicy;
#line 102 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_117 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 159
struct kioctx;
#line 159
struct mem_cgroup;
#line 159 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file *filp , unsigned long addr , unsigned long len ,
                                      unsigned long pgoff , unsigned long flags ) ;
   void (*unmap_area)(struct mm_struct *mm , unsigned long addr ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[2 * ((2 + (14 + 2)) + 1)] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   int core_waiters ;
   struct completion *core_startup_done ;
   struct completion core_done ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
   struct mem_cgroup *mem_cgroup ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 23 "include/linux/sem.h"
struct sem_undo;
#line 120 "include/linux/sem.h"
struct sem_undo {
   struct sem_undo *proc_next ;
   struct sem_undo *id_next ;
   int semid ;
   short *semadj ;
};
#line 130 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct sem_undo *proc_list ;
};
#line 136 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 10 "include/asm/signal.h"
struct siginfo;
#line 30 "include/asm/signal.h"
struct __anonstruct_sigset_t_119 {
   unsigned long sig[64 / 64] ;
};
#line 30 "include/asm/signal.h"
typedef struct __anonstruct_sigset_t_119 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 162 "include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 169 "include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 7 "include/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 7 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_121 {
   pid_t _pid ;
   uid_t _uid ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_122 {
   timer_t _tid ;
   int _overrun ;
   char _pad[sizeof(uid_t ) - sizeof(int )] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_123 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_124 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_125 {
   void *_addr ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_126 {
   long _band ;
   int _fd ;
};
#line 40 "include/asm-generic/siginfo.h"
union __anonunion__sifields_120 {
   int _pad[(128UL - 4UL * sizeof(int )) / sizeof(int )] ;
   struct __anonstruct__kill_121 _kill ;
   struct __anonstruct__timer_122 _timer ;
   struct __anonstruct__rt_123 _rt ;
   struct __anonstruct__sigchld_124 _sigchld ;
   struct __anonstruct__sigfault_125 _sigfault ;
   struct __anonstruct__sigpoll_126 _sigpoll ;
};
#line 40 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_120 _sifields ;
};
#line 40 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 14 "include/linux/signal.h"
struct user_struct;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 6 "include/linux/fs_struct.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
   struct path altroot ;
};
#line 84 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_129 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_129 seccomp_t;
#line 80 "include/linux/plist.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 42 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 24 "include/linux/hrtimer.h"
struct hrtimer_clock_base;
#line 25
struct hrtimer_cpu_base;
#line 38
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 53
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE = 1,
    HRTIMER_CB_IRQSAFE_NO_RESTART = 2,
    HRTIMER_CB_IRQSAFE_NO_SOFTIRQ = 3
} ;
#line 112 "include/linux/hrtimer.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t expires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   enum hrtimer_cb_mode cb_mode ;
   struct list_head cb_entry ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
};
#line 153 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t (*get_softirq_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
   int (*reprogram)(struct hrtimer *t , struct hrtimer_clock_base *b , ktime_t n ) ;
};
#line 189 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2] ;
   struct list_head cb_pending ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 12 "include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 17 "include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 96 "include/linux/sched.h"
struct futex_pi_state;
#line 97
struct robust_list_head;
#line 141
struct cfs_rq;
#line 142
struct task_group;
#line 332
struct nsproxy;
#line 57 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 16 "include/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 87 "include/linux/aio.h"
union __anonunion_ki_obj_131 {
   void *user ;
   struct task_struct *tsk ;
};
#line 87 "include/linux/aio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_131 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 167 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8] ;
};
#line 180 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
#line 410 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 417 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 432 "include/linux/sched.h"
union __anonunion____missing_field_name_132 {
   pid_t pgrp  __attribute__((__deprecated__)) ;
   pid_t __pgrp ;
};
#line 432 "include/linux/sched.h"
union __anonunion____missing_field_name_133 {
   pid_t session  __attribute__((__deprecated__)) ;
   pid_t __session ;
};
#line 432
struct taskstats;
#line 432
struct tty_audit_buf;
#line 432 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   struct task_struct *group_exit_task ;
   int notify_count ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   union __anonunion____missing_field_name_132 __annonCompField15 ;
   struct pid *tty_old_pgrp ;
   union __anonunion____missing_field_name_133 __annonCompField16 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16] ;
   struct list_head cpu_timers[3] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 569 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 610
struct reclaim_state;
#line 613 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 634 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
};
#line 675
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 719 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
#line 736
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 754 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   int first_cpu ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   unsigned int lb_count[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_failed[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_balanced[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
};
#line 835
struct io_context;
#line 838 "include/linux/sched.h"
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32] ;
   int nblocks ;
   gid_t *blocks[0] ;
};
#line 875
struct audit_context;
#line 880
struct rq;
#line 883 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq *rq , struct task_struct *p , int wakeup ) ;
   void (*dequeue_task)(struct rq *rq , struct task_struct *p , int sleep ) ;
   void (*yield_task)(struct rq *rq ) ;
   int (*select_task_rq)(struct task_struct *p , int sync ) ;
   void (*check_preempt_curr)(struct rq *rq , struct task_struct *p ) ;
   struct task_struct *(*pick_next_task)(struct rq *rq ) ;
   void (*put_prev_task)(struct rq *rq , struct task_struct *p ) ;
   unsigned long (*load_balance)(struct rq *this_rq , int this_cpu , struct rq *busiest ,
                                 unsigned long max_load_move , struct sched_domain *sd ,
                                 enum cpu_idle_type idle , int *all_pinned , int *this_best_prio ) ;
   int (*move_one_task)(struct rq *this_rq , int this_cpu , struct rq *busiest , struct sched_domain *sd ,
                        enum cpu_idle_type idle ) ;
   void (*pre_schedule)(struct rq *this_rq , struct task_struct *task ) ;
   void (*post_schedule)(struct rq *this_rq ) ;
   void (*task_wake_up)(struct rq *this_rq , struct task_struct *task ) ;
   void (*set_curr_task)(struct rq *rq ) ;
   void (*task_tick)(struct rq *rq , struct task_struct *p , int queued ) ;
   void (*task_new)(struct rq *rq , struct task_struct *p ) ;
   void (*set_cpus_allowed)(struct task_struct *p , cpumask_t const   *newmask ) ;
   void (*join_domain)(struct rq *rq ) ;
   void (*leave_domain)(struct rq *rq ) ;
   void (*switched_from)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*switched_to)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*prio_changed)(struct rq *this_rq , struct task_struct *task , int oldprio ,
                        int running ) ;
   void (*moved_group)(struct task_struct *p ) ;
};
#line 931 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 945 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1002
struct rt_rq;
#line 1002 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned int time_slice ;
   unsigned long timeout ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1018
struct linux_binfmt;
#line 1018
struct css_set;
#line 1018
struct compat_robust_list_head;
#line 1018 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct list_head ptrace_children ;
   struct list_head ptrace_list ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct pid_link pids[PIDTYPE_MAX] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   unsigned int rt_priority ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   unsigned long long it_sched_expires ;
   struct list_head cpu_timers[3] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_bset ;
   unsigned int keep_capabilities : 1 ;
   struct user_struct *user ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   unsigned char jit_keyring ;
   char comm[16] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *priv ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_stimexpd ;
   struct mempolicy *mempolicy ;
   short il_next ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32] ;
};
#line 20 "include/linux/klist.h"
struct klist_node;
#line 21 "include/linux/klist.h"
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
#line 32 "include/linux/klist.h"
struct klist_node {
   struct klist *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
#line 4 "include/asm/device.h"
struct dev_archdata {
   void *acpi_handle ;
   void *iommu ;
};
#line 36 "include/linux/device.h"
struct driver_private;
#line 37
struct class;
#line 38
struct class_device;
#line 39
struct bus_type;
#line 40
struct bus_type_private;
#line 42 "include/linux/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type *bus , char *buf ) ;
   ssize_t (*store)(struct bus_type *bus , char const   *buf , size_t count ) ;
};
#line 55
struct device_attribute;
#line 55
struct driver_attribute;
#line 55 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device *dev , struct device_driver *drv ) ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*suspend_late)(struct device *dev , pm_message_t state ) ;
   int (*resume_early)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group **groups ;
   struct driver_private *p ;
};
#line 150 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *driver , char *buf ) ;
   ssize_t (*store)(struct device_driver *driver , char const   *buf , size_t count ) ;
};
#line 182
struct class_attribute;
#line 182
struct class_device_attribute;
#line 182 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct kset subsys ;
   struct list_head children ;
   struct list_head devices ;
   struct list_head interfaces ;
   struct kset class_dirs ;
   struct semaphore sem ;
   struct class_attribute *class_attrs ;
   struct class_device_attribute *class_dev_attrs ;
   struct device_attribute *dev_attrs ;
   int (*uevent)(struct class_device *dev , struct kobj_uevent_env *env ) ;
   int (*dev_uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*release)(struct class_device *dev ) ;
   void (*class_release)(struct class *class ) ;
   void (*dev_release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
};
#line 217 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *class , char *buf ) ;
   ssize_t (*store)(struct class *class , char const   *buf , size_t count ) ;
};
#line 231 "include/linux/device.h"
struct class_device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class_device * , char *buf ) ;
   ssize_t (*store)(struct class_device * , char const   *buf , size_t count ) ;
};
#line 268 "include/linux/device.h"
struct class_device {
   struct list_head node ;
   struct kobject kobj ;
   struct class *class ;
   dev_t devt ;
   struct device *dev ;
   void *class_data ;
   struct class_device *parent ;
   struct attribute_group **groups ;
   void (*release)(struct class_device *dev ) ;
   int (*uevent)(struct class_device *dev , struct kobj_uevent_env *env ) ;
   char class_id[20] ;
};
#line 343 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
};
#line 353 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *dev , struct device_attribute *attr , char *buf ) ;
   ssize_t (*store)(struct device *dev , struct device_attribute *attr , char const   *buf ,
                    size_t count ) ;
};
#line 413 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 422
struct dma_coherent_mem;
#line 422 "include/linux/device.h"
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20] ;
   struct device_type *type ;
   unsigned int uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct list_head node ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device *dev ) ;
};
#line 24 "include/linux/usb.h"
struct usb_device;
#line 25
struct usb_driver;
#line 44
struct ep_device;
#line 60 "include/linux/usb.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
#line 72 "include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
#line 85
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 143 "include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int is_active : 1 ;
   unsigned int sysfs_files_created : 1 ;
   unsigned int needs_remote_wakeup : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   int pm_usage_cnt ;
};
#line 202 "include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0] ;
};
#line 254 "include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[32 / 2] ;
   struct usb_interface *interface[32] ;
   struct usb_interface_cache *intf_cache[32] ;
   unsigned char *extra ;
   int extralen ;
};
#line 285 "include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[128UL / (8UL * sizeof(unsigned long ))] ;
};
#line 292
struct mon_bus;
#line 292 "include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned int is_b_host : 1 ;
   unsigned int b_hnp_enable : 1 ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct device *dev ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 342
struct usb_tt;
#line 406 "include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16] ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16] ;
   struct usb_host_endpoint *ep_out[16] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned int can_submit : 1 ;
   unsigned int discon_suspended : 1 ;
   unsigned int persist_enabled : 1 ;
   unsigned int have_langid : 1 ;
   unsigned int authorized : 1 ;
   unsigned int wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned int auto_pm : 1 ;
   unsigned int do_remote_wakeup : 1 ;
   unsigned int reset_resume : 1 ;
   unsigned int autosuspend_disabled : 1 ;
   unsigned int autoresume_disabled : 1 ;
   unsigned int skip_sys_resume : 1 ;
};
#line 911 "include/linux/usb.h"
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 930 "include/linux/usb.h"
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
#line 987 "include/linux/usb.h"
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface *intf , struct usb_device_id  const  *id ) ;
   void (*disconnect)(struct usb_interface *intf ) ;
   int (*ioctl)(struct usb_interface *intf , unsigned int code , void *buf ) ;
   int (*suspend)(struct usb_interface *intf , pm_message_t message ) ;
   int (*resume)(struct usb_interface *intf ) ;
   int (*reset_resume)(struct usb_interface *intf ) ;
   int (*pre_reset)(struct usb_interface *intf ) ;
   int (*post_reset)(struct usb_interface *intf ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned int no_dynamic_id : 1 ;
   unsigned int supports_autosuspend : 1 ;
};
#line 1114 "include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 1121
struct urb;
#line 1123 "include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
};
#line 1305 "include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   u8 reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   int transfer_buffer_length ;
   int actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0] ;
};
#line 63 "include/linux/usb/serial.h"
struct usb_serial;
#line 63 "include/linux/usb/serial.h"
struct usb_serial_port {
   struct usb_serial *serial ;
   struct tty_struct *tty ;
   spinlock_t lock ;
   struct mutex mutex ;
   unsigned char number ;
   unsigned char *interrupt_in_buffer ;
   struct urb *interrupt_in_urb ;
   __u8 interrupt_in_endpointAddress ;
   unsigned char *interrupt_out_buffer ;
   int interrupt_out_size ;
   struct urb *interrupt_out_urb ;
   __u8 interrupt_out_endpointAddress ;
   unsigned char *bulk_in_buffer ;
   int bulk_in_size ;
   struct urb *read_urb ;
   __u8 bulk_in_endpointAddress ;
   unsigned char *bulk_out_buffer ;
   int bulk_out_size ;
   struct urb *write_urb ;
   int write_urb_busy ;
   __u8 bulk_out_endpointAddress ;
   wait_queue_head_t write_wait ;
   struct work_struct work ;
   int open_count ;
   char throttled ;
   char throttle_req ;
   char console ;
   struct device dev ;
};
#line 129
struct usb_serial_driver;
#line 129 "include/linux/usb/serial.h"
struct usb_serial {
   struct usb_device *dev ;
   struct usb_serial_driver *type ;
   struct usb_interface *interface ;
   unsigned char disconnected ;
   unsigned char minor ;
   unsigned char num_ports ;
   unsigned char num_port_pointers ;
   char num_interrupt_in ;
   char num_interrupt_out ;
   char num_bulk_in ;
   char num_bulk_out ;
   struct usb_serial_port *port[8] ;
   struct kref kref ;
   struct mutex disc_mutex ;
   void *private ;
};
#line 197 "include/linux/usb/serial.h"
struct usb_serial_driver {
   char const   *description ;
   struct usb_device_id  const  *id_table ;
   char num_ports ;
   struct list_head driver_list ;
   struct device_driver driver ;
   struct usb_driver *usb_driver ;
   struct usb_dynids dynids ;
   int (*probe)(struct usb_serial *serial , struct usb_device_id  const  *id ) ;
   int (*attach)(struct usb_serial *serial ) ;
   int (*calc_num_ports)(struct usb_serial *serial ) ;
   void (*shutdown)(struct usb_serial *serial ) ;
   int (*port_probe)(struct usb_serial_port *port ) ;
   int (*port_remove)(struct usb_serial_port *port ) ;
   int (*suspend)(struct usb_serial *serial , pm_message_t message ) ;
   int (*resume)(struct usb_serial *serial ) ;
   int (*open)(struct usb_serial_port *port , struct file *filp ) ;
   void (*close)(struct usb_serial_port *port , struct file *filp ) ;
   int (*write)(struct usb_serial_port *port , unsigned char const   *buf , int count ) ;
   int (*write_room)(struct usb_serial_port *port ) ;
   int (*ioctl)(struct usb_serial_port *port , struct file *file , unsigned int cmd ,
                unsigned long arg ) ;
   void (*set_termios)(struct usb_serial_port *port , struct ktermios *old ) ;
   void (*break_ctl)(struct usb_serial_port *port , int break_state ) ;
   int (*chars_in_buffer)(struct usb_serial_port *port ) ;
   void (*throttle)(struct usb_serial_port *port ) ;
   void (*unthrottle)(struct usb_serial_port *port ) ;
   int (*tiocmget)(struct usb_serial_port *port , struct file *file ) ;
   int (*tiocmset)(struct usb_serial_port *port , struct file *file , unsigned int set ,
                   unsigned int clear ) ;
   void (*read_int_callback)(struct urb *urb ) ;
   void (*write_int_callback)(struct urb *urb ) ;
   void (*read_bulk_callback)(struct urb *urb ) ;
   void (*write_bulk_callback)(struct urb *urb ) ;
};
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
struct moschip_port {
   int port_num ;
   struct urb *write_urb ;
   struct urb *read_urb ;
   struct urb *int_urb ;
   __u8 shadowLCR ;
   __u8 shadowMCR ;
   char open ;
   char open_ports ;
   char zombie ;
   wait_queue_head_t wait_chase ;
   wait_queue_head_t delta_msr_wait ;
   int delta_msr_cond ;
   struct async_icount icount ;
   struct usb_serial_port *port ;
   __u8 SpRegOffset ;
   __u8 ControlRegOffset ;
   __u8 DcrRegOffset ;
   struct urb *control_urb ;
   struct usb_ctrlrequest *dr ;
   char *ctrl_buf ;
   int MsrLsr ;
   spinlock_t pool_lock ;
   struct urb *write_urb_pool[16] ;
   char busy[16] ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 278 "include/asm/bitops.h"
__inline static int ( __attribute__((__always_inline__)) variable_test_bit)(int nr ,
                                                                            void const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 282
  __asm__  volatile   ("bt %2,%3\n\t"
                       "sbb %0,%0": "=r" (oldbit): "m" (*((int const volatile   *)addr + (nr >> 5))),
                       "Ir" (nr), "m" (*((int volatile   *)addr)));
#line 288
  return (oldbit);
}
}
#line 182 "include/linux/kernel.h"
extern int ( /* format attribute */  printk)(char const   *fmt  , ...) ;
#line 47 "include/asm/string_64.h"
extern void *memset(void *s , int c , size_t n ) ;
#line 50 "include/asm/pda.h"
extern  __attribute__((__noreturn__)) void __bad_pda_field(void) ;
#line 56
extern struct x8664_pda _proxy_pda ;
#line 9 "include/asm/current_64.h"
__inline static struct task_struct *( __attribute__((__always_inline__)) get_current)(void) 
{ 
  struct task_struct *t ;
  struct task_struct *ret__ ;

  {
#line 11
  switch (sizeof(_proxy_pda.pcurrent)) {
  case 2UL: 
#line 11
  __asm__  ("mov"
            "w %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->pcurrent)),
            "m" (_proxy_pda.pcurrent));
#line 11
  break;
  case 4UL: 
#line 11
  __asm__  ("mov"
            "l %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->pcurrent)),
            "m" (_proxy_pda.pcurrent));
#line 11
  break;
  case 8UL: 
#line 11
  __asm__  ("mov"
            "q %%gs:%c1,%0": "=r" (ret__): "i" ((unsigned int )(& ((struct x8664_pda *)0)->pcurrent)),
            "m" (_proxy_pda.pcurrent));
#line 11
  break;
  default: 
#line 11
  __bad_pda_field();
  }
#line 11
  t = ret__;
#line 12
  return (t);
}
}
#line 76 "include/linux/thread_info.h"
__inline static int ( __attribute__((__always_inline__)) test_ti_thread_flag)(struct thread_info *ti ,
                                                                              int flag ) 
{ 
  int tmp___0 ;

  {
#line 78
  tmp___0 = variable_test_bit(flag, (unsigned long *)(& ti->flags));
#line 78
  return (tmp___0);
}
}
#line 93 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t *lock , char const   *name , struct lock_class_key *key ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _spin_lock(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 33
extern unsigned long _spin_lock_irqsave(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 45
extern void _spin_unlock(spinlock_t *lock )  __attribute__((__section__(".spinlock.text"))) ;
#line 54
extern void _spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags )  __attribute__((__section__(".spinlock.text"))) ;
#line 80 "include/linux/wait.h"
extern void init_waitqueue_head(wait_queue_head_t *q ) ;
#line 144
extern void __wake_up(wait_queue_head_t *q , unsigned int mode , int nr , void *key ) ;
#line 434
extern long interruptible_sleep_on_timeout(wait_queue_head_t *q , long timeout ) ;
#line 440
extern void prepare_to_wait(wait_queue_head_t *q , wait_queue_t *wait , int state ) ;
#line 442
extern void finish_wait(wait_queue_head_t *q , wait_queue_t *wait ) ;
#line 443
extern int autoremove_wake_function(wait_queue_t *wait , unsigned int mode , int sync ,
                                    void *key ) ;
#line 95 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 190 "include/linux/slub_def.h"
extern void *__kmalloc(size_t size , gfp_t flags ) ;
#line 197 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc)(size_t size ,
                                                                    gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 212
  tmp___2 = __kmalloc(size, flags);
#line 212
  return (tmp___2);
}
}
#line 269 "include/linux/slab.h"
__inline static void *( __attribute__((__always_inline__)) kzalloc)(size_t size ,
                                                                    gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 271
  tmp = kmalloc(size, flags | 32768U);
#line 271
  return (tmp);
}
}
#line 279 "include/asm/uaccess_64.h"
extern unsigned long ( __attribute__((__warn_unused_result__)) copy_to_user)(void *to ,
                                                                             void const   *from ,
                                                                             unsigned int len ) ;
#line 281
extern unsigned long ( __attribute__((__warn_unused_result__)) copy_from_user)(void *to ,
                                                                               void const   *from ,
                                                                               unsigned int len ) ;
#line 308 "include/linux/tty.h"
extern void tty_flip_buffer_push(struct tty_struct *tty ) ;
#line 309
extern speed_t tty_get_baud_rate(struct tty_struct *tty ) ;
#line 324
extern void tty_wakeup(struct tty_struct *tty ) ;
#line 4 "include/linux/tty_flip.h"
extern int tty_buffer_request_room(struct tty_struct *tty , size_t size ) ;
#line 5
extern int tty_insert_flip_string(struct tty_struct *tty , unsigned char const   *chars ,
                                  size_t size ) ;
#line 156 "include/linux/moduleparam.h"
extern int param_set_bool(char const   *val , struct kernel_param *kp ) ;
#line 157
extern int param_get_bool(char *buffer , struct kernel_param *kp ) ;
#line 65 "include/linux/module.h"
int init_module(void) ;
#line 66
void cleanup_module(void) ;
#line 84
extern struct module __this_module ;
#line 330 "include/linux/sched.h"
extern void schedule(void) ;
#line 1952 "include/linux/sched.h"
__inline static int ( __attribute__((__always_inline__)) test_tsk_thread_flag)(struct task_struct *tsk ,
                                                                               int flag ) 
{ 
  int tmp ;

  {
#line 1954
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 1954
  return (tmp);
}
}
#line 1967 "include/linux/sched.h"
__inline static int ( __attribute__((__always_inline__)) signal_pending)(struct task_struct *p ) 
{ 
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 1969
  tmp = test_tsk_thread_flag(p, 2);
#line 1969
  if (tmp) {
#line 1969
    tmp___0 = 1;
  } else {
#line 1969
    tmp___0 = 0;
  }
#line 1969
  tmp___1 = __builtin_expect(tmp___0, 0);
#line 1969
  return (tmp___1);
}
}
#line 499 "include/linux/device.h"
__inline static void *( __attribute__((__always_inline__)) dev_get_drvdata)(struct device *dev ) 
{ 


  {
#line 501
  return (dev->driver_data);
}
}
#line 504 "include/linux/device.h"
__inline static void ( __attribute__((__always_inline__)) dev_set_drvdata)(struct device *dev ,
                                                                           void *data ) 
{ 


  {
#line 506
  dev->driver_data = data;
#line 507
  return;
}
}
#line 575
extern char const   *dev_driver_string(struct device *dev ) ;
#line 1069 "include/linux/usb.h"
extern int usb_register_driver(struct usb_driver * , struct module * , char const   * ) ;
#line 1071 "include/linux/usb.h"
__inline static int ( __attribute__((__always_inline__)) usb_register)(struct usb_driver *driver ) 
{ 
  int tmp ;

  {
#line 1073
  tmp = usb_register_driver(driver, & __this_module, "mos7840");
#line 1073
  return (tmp);
}
}
#line 1075
extern void usb_deregister(struct usb_driver * ) ;
#line 1356 "include/linux/usb.h"
__inline static void ( __attribute__((__always_inline__)) usb_fill_control_urb)(struct urb *urb ,
                                                                                struct usb_device *dev ,
                                                                                unsigned int pipe ,
                                                                                unsigned char *setup_packet ,
                                                                                void *transfer_buffer ,
                                                                                int buffer_length ,
                                                                                void (*complete_fn)(struct urb * ) ,
                                                                                void *context ) 
{ 


  {
#line 1365
  urb->dev = dev;
#line 1366
  urb->pipe = pipe;
#line 1367
  urb->setup_packet = setup_packet;
#line 1368
  urb->transfer_buffer = transfer_buffer;
#line 1369
  urb->transfer_buffer_length = buffer_length;
#line 1370
  urb->complete = complete_fn;
#line 1371
  urb->context = context;
#line 1372
  return;
}
}
#line 1387 "include/linux/usb.h"
__inline static void ( __attribute__((__always_inline__)) usb_fill_bulk_urb)(struct urb *urb ,
                                                                             struct usb_device *dev ,
                                                                             unsigned int pipe ,
                                                                             void *transfer_buffer ,
                                                                             int buffer_length ,
                                                                             void (*complete_fn)(struct urb * ) ,
                                                                             void *context ) 
{ 


  {
#line 1395
  urb->dev = dev;
#line 1396
  urb->pipe = pipe;
#line 1397
  urb->transfer_buffer = transfer_buffer;
#line 1398
  urb->transfer_buffer_length = buffer_length;
#line 1399
  urb->complete = complete_fn;
#line 1400
  urb->context = context;
#line 1401
  return;
}
}
#line 1421 "include/linux/usb.h"
__inline static void ( __attribute__((__always_inline__)) usb_fill_int_urb)(struct urb *urb ,
                                                                            struct usb_device *dev ,
                                                                            unsigned int pipe ,
                                                                            void *transfer_buffer ,
                                                                            int buffer_length ,
                                                                            void (*complete_fn)(struct urb * ) ,
                                                                            void *context ,
                                                                            int interval ) 
{ 


  {
#line 1430
  urb->dev = dev;
#line 1431
  urb->pipe = pipe;
#line 1432
  urb->transfer_buffer = transfer_buffer;
#line 1433
  urb->transfer_buffer_length = buffer_length;
#line 1434
  urb->complete = complete_fn;
#line 1435
  urb->context = context;
#line 1436
  if ((unsigned int )dev->speed == (unsigned int )USB_SPEED_HIGH) {
#line 1437
    urb->interval = 1 << (interval - 1);
  } else {
#line 1439
    urb->interval = interval;
  }
#line 1440
  urb->start_frame = -1;
#line 1441
  return;
}
}
#line 1444
extern struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) ;
#line 1445
extern void usb_free_urb(struct urb *urb ) ;
#line 1448
extern int usb_submit_urb(struct urb *urb , gfp_t mem_flags ) ;
#line 1450
extern void usb_kill_urb(struct urb *urb ) ;
#line 1507
extern int usb_control_msg(struct usb_device *dev , unsigned int pipe , __u8 request ,
                           __u8 requesttype , __u16 value , __u16 index , void *data ,
                           __u16 size , int timeout ) ;
#line 1525
extern int usb_clear_halt(struct usb_device *dev , int pipe ) ;
#line 1640 "include/linux/usb.h"
__inline static unsigned int ( __attribute__((__always_inline__)) __create_pipe)(struct usb_device *dev ,
                                                                                 unsigned int endpoint ) 
{ 


  {
#line 1643
  return ((unsigned int )(dev->devnum << 8) | (endpoint << 15));
}
}
#line 101 "include/linux/usb/serial.h"
__inline static void *( __attribute__((__always_inline__)) usb_get_serial_port_data)(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 103
  tmp = dev_get_drvdata(& port->dev);
#line 103
  return (tmp);
}
}
#line 106 "include/linux/usb/serial.h"
__inline static void ( __attribute__((__always_inline__)) usb_set_serial_port_data)(struct usb_serial_port *port ,
                                                                                    void *data ) 
{ 


  {
#line 109
  dev_set_drvdata(& port->dev, data);
#line 110
  return;
}
}
#line 244
extern int usb_serial_register(struct usb_serial_driver *driver ) ;
#line 245
extern void usb_serial_deregister(struct usb_serial_driver *driver ) ;
#line 248
extern int usb_serial_probe(struct usb_interface *iface , struct usb_device_id  const  *id ) ;
#line 250
extern void usb_serial_disconnect(struct usb_interface *iface ) ;
#line 169 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static struct usb_device_id moschip_port_id_table[4]  = {      {1 | 2, 38672, 30784, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {1 | 2, 38672, 30752, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {1 | 2, 2134, 44100, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {1 | 2, 2134, 44098, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}};
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static struct usb_device_id moschip_id_table_combined[4]  __attribute__((__section__(".devinit.data")))  = {      {1 | 2,
      38672, 30784, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {1 | 2,
      38672, 30752, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {1 | 2,
      2134, 44100, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {1 | 2,
      2134, 44098, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
#line 185
extern struct usb_device_id  const  __mod_usb_device_table  __attribute__((__unused__,
__alias__("moschip_id_table_combined"))) ;
#line 221 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int debug  ;
#line 229 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_set_reg_sync(struct usb_serial_port *port , __u16 reg , __u16 val ) 
{ 
  struct usb_device *dev ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 232
  dev = (port->serial)->dev;
#line 233
  val = (int )val & 255;
#line 234
  while (1) {
#line 234
    if (debug) {
#line 234
      printk("<7>%s: mos7840_set_reg_sync offset is %x, value %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             reg, val);
    } else {

    }
#line 234
    break;
  }
#line 236
  tmp = __create_pipe(dev, 0);
#line 236
  tmp___0 = usb_control_msg(dev, (unsigned int )(2 << 30) | tmp, 14, 64, val, reg,
                            (void *)0, 0, 250 * 5);
#line 236
  return (tmp___0);
}
}
#line 247 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_reg_sync(struct usb_serial_port *port , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  int ret ;
  unsigned int tmp ;

  {
#line 250
  dev = (port->serial)->dev;
#line 251
  ret = 0;
#line 253
  tmp = __create_pipe(dev, 0);
#line 253
  ret = usb_control_msg(dev, ((unsigned int )(2 << 30) | tmp) | 128U, 13, 192, 0,
                        reg, val, 1, 250 * 5);
#line 256
  while (1) {
#line 256
    if (debug) {
#line 256
      printk("<7>%s: mos7840_get_reg_sync offset is %x, return val %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             reg, *val);
    } else {

    }
#line 256
    break;
  }
#line 257
  *val = (int )*val & 255;
#line 258
  return (ret);
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_set_uart_reg(struct usb_serial_port *port , __u16 reg , __u16 val ) 
{ 
  struct usb_device *dev ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 271
  dev = (port->serial)->dev;
#line 272
  val = (int )val & 255;
#line 274
  if ((int )(port->serial)->num_ports == 4) {
#line 275
    val = (int )val | ((((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1) << 8);
#line 278
    while (1) {
#line 278
      if (debug) {
#line 278
        printk("<7>%s: mos7840_set_uart_reg application number is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               val);
      } else {

      }
#line 278
      break;
    }
  } else
#line 280
  if ((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor) == 0) {
#line 281
    val = (int )val | ((((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1) << 8);
#line 284
    while (1) {
#line 284
      if (debug) {
#line 284
        printk("<7>%s: mos7840_set_uart_reg application number is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               val);
      } else {

      }
#line 284
      break;
    }
  } else {
#line 287
    val = (int )val | ((((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 2) << 8);
#line 290
    while (1) {
#line 290
      if (debug) {
#line 290
        printk("<7>%s: mos7840_set_uart_reg application number is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               val);
      } else {

      }
#line 290
      break;
    }
  }
#line 294
  tmp = __create_pipe(dev, 0);
#line 294
  tmp___0 = usb_control_msg(dev, (unsigned int )(2 << 30) | tmp, 14, 64, val, reg,
                            (void *)0, 0, 250 * 5);
#line 294
  return (tmp___0);
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_uart_reg(struct usb_serial_port *port , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  int ret ;
  __u16 Wval ;
  unsigned int tmp ;

  {
#line 308
  dev = (port->serial)->dev;
#line 309
  ret = 0;
#line 314
  if ((int )(port->serial)->num_ports == 4) {
#line 315
    Wval = (((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1) << 8;
#line 318
    while (1) {
#line 318
      if (debug) {
#line 318
        printk("<7>%s: mos7840_get_uart_reg application number is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               Wval);
      } else {

      }
#line 318
      break;
    }
  } else
#line 320
  if ((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor) == 0) {
#line 321
    Wval = (((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1) << 8;
#line 324
    while (1) {
#line 324
      if (debug) {
#line 324
        printk("<7>%s: mos7840_get_uart_reg application number is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               Wval);
      } else {

      }
#line 324
      break;
    }
  } else {
#line 327
    Wval = (((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 2) << 8;
#line 330
    while (1) {
#line 330
      if (debug) {
#line 330
        printk("<7>%s: mos7840_get_uart_reg application number is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               Wval);
      } else {

      }
#line 330
      break;
    }
  }
#line 334
  tmp = __create_pipe(dev, 0);
#line 334
  ret = usb_control_msg(dev, ((unsigned int )(2 << 30) | tmp) | 128U, 13, 192, Wval,
                        reg, val, 1, 250 * 5);
#line 337
  *val = (int )*val & 255;
#line 338
  return (ret);
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_dump_serial_port(struct moschip_port *mos7840_port ) 
{ 


  {
#line 344
  while (1) {
#line 344
    if (debug) {
#line 344
      printk("<7>%s: ***************************************\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
    } else {

    }
#line 344
    break;
  }
#line 345
  while (1) {
#line 345
    if (debug) {
#line 345
      printk("<7>%s: SpRegOffset is %2x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             mos7840_port->SpRegOffset);
    } else {

    }
#line 345
    break;
  }
#line 346
  while (1) {
#line 346
    if (debug) {
#line 346
      printk("<7>%s: ControlRegOffset is %2x \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             mos7840_port->ControlRegOffset);
    } else {

    }
#line 346
    break;
  }
#line 347
  while (1) {
#line 347
    if (debug) {
#line 347
      printk("<7>%s: DCRRegOffset is %2x \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             mos7840_port->DcrRegOffset);
    } else {

    }
#line 347
    break;
  }
#line 348
  while (1) {
#line 348
    if (debug) {
#line 348
      printk("<7>%s: ***************************************\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
    } else {

    }
#line 348
    break;
  }
#line 350
  return;
}
}
#line 359 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
__inline static void ( __attribute__((__always_inline__)) mos7840_set_port_private)(struct usb_serial_port *port ,
                                                                                    struct moschip_port *data ) 
{ 


  {
#line 362
  usb_set_serial_port_data(port, (void *)data);
#line 363
  return;
}
}
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
__inline static struct moschip_port *( __attribute__((__always_inline__)) mos7840_get_port_private)(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 369
  tmp = usb_get_serial_port_data(port);
#line 369
  return ((struct moschip_port *)tmp);
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_handle_new_msr(struct moschip_port *port , __u8 new_msr ) 
{ 
  struct moschip_port *mos7840_port ;
  struct async_icount *icount ;

  {
#line 376
  mos7840_port = port;
#line 377
  icount = & mos7840_port->icount;
#line 378
  if ((int )new_msr & (((16 | 32) | 64) | 128)) {
#line 381
    icount = & mos7840_port->icount;
#line 384
    if ((int )new_msr & 16) {
#line 385
      icount->cts = icount->cts + (__u32 )1;
#line 386
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 388
    if ((int )new_msr & 32) {
#line 389
      icount->dsr = icount->dsr + (__u32 )1;
#line 390
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 392
    if ((int )new_msr & 128) {
#line 393
      icount->dcd = icount->dcd + (__u32 )1;
#line 394
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 396
    if ((int )new_msr & 64) {
#line 397
      icount->rng = icount->rng + (__u32 )1;
#line 398
      __asm__  volatile   ("": : : "memory");
    } else {

    }
  } else {

  }
#line 401
  return;
}
}
#line 403 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_handle_new_lsr(struct moschip_port *port , __u8 new_lsr ) 
{ 
  struct async_icount *icount ;

  {
#line 407
  while (1) {
#line 407
    if (debug) {
#line 407
      printk("<7>%s: %s - %02x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_handle_new_lsr", new_lsr);
    } else {

    }
#line 407
    break;
  }
#line 409
  if ((int )new_lsr & 16) {
#line 415
    new_lsr = (int )new_lsr & (int )((__u8 )(2 | 16));
  } else {

  }
#line 419
  icount = & port->icount;
#line 420
  if ((int )new_lsr & 16) {
#line 421
    icount->brk = icount->brk + (__u32 )1;
#line 422
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 424
  if ((int )new_lsr & 2) {
#line 425
    icount->overrun = icount->overrun + (__u32 )1;
#line 426
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 428
  if ((int )new_lsr & 4) {
#line 429
    icount->parity = icount->parity + (__u32 )1;
#line 430
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 432
  if ((int )new_lsr & 8) {
#line 433
    icount->frame = icount->frame + (__u32 )1;
#line 434
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 436
  return;
}
}
#line 445 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_control_callback(struct urb *urb ) 
{ 
  unsigned char *data ;
  struct moschip_port *mos7840_port ;
  __u8 regval ;
  int result ;
  int status ;
  char const   *tmp ;

  {
#line 449
  regval = 0;
#line 450
  result = 0;
#line 451
  status = urb->status;
#line 453
  mos7840_port = (struct moschip_port *)urb->context;
#line 455
  switch (status) {
  case 0: 
#line 458
  break;
  case -108: 
  case -2: 
  case -104: 
#line 463
  while (1) {
#line 463
    if (debug) {
#line 463
      printk("<7>%s: %s - urb shutting down with status: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", status);
    } else {

    }
#line 463
    break;
  }
#line 465
  return;
  default: 
#line 467
  while (1) {
#line 467
    if (debug) {
#line 467
      printk("<7>%s: %s - nonzero urb status received: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", status);
    } else {

    }
#line 467
    break;
  }
#line 469
  goto exit;
  }
#line 472
  while (1) {
#line 472
    if (debug) {
#line 472
      printk("<7>%s: %s urb buffer size is %d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", urb->actual_length);
    } else {

    }
#line 472
    break;
  }
#line 473
  while (1) {
#line 473
    if (debug) {
#line 473
      printk("<7>%s: %s mos7840_port->MsrLsr is %d port %d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", mos7840_port->MsrLsr, mos7840_port->port_num);
    } else {

    }
#line 473
    break;
  }
#line 475
  data = urb->transfer_buffer;
#line 476
  regval = *(data + 0);
#line 477
  while (1) {
#line 477
    if (debug) {
#line 477
      printk("<7>%s: %s data is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_control_callback", regval);
    } else {

    }
#line 477
    break;
  }
#line 478
  if (mos7840_port->MsrLsr == 0) {
#line 479
    mos7840_handle_new_msr(mos7840_port, regval);
  } else
#line 480
  if (mos7840_port->MsrLsr == 1) {
#line 481
    mos7840_handle_new_lsr(mos7840_port, regval);
  } else {

  }
  exit: 
#line 484
  _spin_lock(& mos7840_port->pool_lock);
#line 485
  if (! mos7840_port->zombie) {
#line 486
    result = usb_submit_urb(mos7840_port->int_urb, 32U);
  } else {

  }
#line 487
  _spin_unlock(& mos7840_port->pool_lock);
#line 488
  if (result) {
#line 489
    tmp = dev_driver_string(& (urb->dev)->dev);
#line 489
    printk("<3>%s %s: %s - Error %d submitting interrupt urb\n", tmp, (urb->dev)->dev.bus_id,
           "mos7840_control_callback", result);
  } else {

  }
#line 493
  return;
}
}
#line 495 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_reg(struct moschip_port *mcs , __u16 Wval , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  struct usb_ctrlrequest *dr ;
  unsigned char *buffer ;
  int ret ;
  unsigned int tmp ;

  {
#line 498
  dev = ((mcs->port)->serial)->dev;
#line 499
  dr = mcs->dr;
#line 500
  buffer = mcs->ctrl_buf;
#line 503
  dr->bRequestType = 192;
#line 504
  dr->bRequest = 13;
#line 505
  dr->wValue = Wval;
#line 506
  dr->wIndex = reg;
#line 507
  dr->wLength = (__u16 )2;
#line 509
  tmp = __create_pipe(dev, 0);
#line 509
  usb_fill_control_urb(mcs->control_urb, dev, ((unsigned int )(2 << 30) | tmp) | 128U,
                       (unsigned char *)dr, buffer, 2, & mos7840_control_callback,
                       mcs);
#line 512
  (mcs->control_urb)->transfer_buffer_length = 2;
#line 513
  ret = usb_submit_urb(mcs->control_urb, 32U);
#line 514
  return (ret);
}
}
#line 523 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_interrupt_callback(struct urb *urb ) 
{ 
  int result ;
  int length ;
  struct moschip_port *mos7840_port ;
  struct usb_serial *serial ;
  __u16 Data ;
  unsigned char *data ;
  __u8 sp[5] ;
  __u8 st ;
  int i ;
  int rv ;
  __u16 wval ;
  __u16 wreg ;
  int status ;
  char const   *tmp ;

  {
#line 532
  rv = 0;
#line 533
  wreg = 0;
#line 534
  status = urb->status;
#line 536
  while (1) {
#line 536
    if (debug) {
#line 536
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             " : Entering\n");
    } else {

    }
#line 536
    break;
  }
#line 538
  switch (status) {
  case 0: 
#line 541
  break;
  case -108: 
  case -2: 
  case -104: 
#line 546
  while (1) {
#line 546
    if (debug) {
#line 546
      printk("<7>%s: %s - urb shutting down with status: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_interrupt_callback", status);
    } else {

    }
#line 546
    break;
  }
#line 548
  return;
  default: 
#line 550
  while (1) {
#line 550
    if (debug) {
#line 550
      printk("<7>%s: %s - nonzero urb status received: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_interrupt_callback", status);
    } else {

    }
#line 550
    break;
  }
#line 552
  goto exit;
  }
#line 555
  length = urb->actual_length;
#line 556
  data = urb->transfer_buffer;
#line 558
  serial = (struct usb_serial *)urb->context;
#line 567
  if (length && length > 5) {
#line 568
    while (1) {
#line 568
      if (debug) {
#line 568
        printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Wrong data !!!");
      } else {

      }
#line 568
      break;
    }
#line 569
    return;
  } else {

  }
#line 572
  sp[0] = *(data + 0);
#line 573
  sp[1] = *(data + 1);
#line 574
  sp[2] = *(data + 2);
#line 575
  sp[3] = *(data + 3);
#line 576
  st = *(data + 4);
#line 578
  i = 0;
#line 578
  while (1) {
#line 578
    if (i < (int )serial->num_ports) {

    } else {
#line 578
      break;
    }
#line 579
    mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 580
    wval = (((int )((__u16 )(serial->port[i])->number) - (int )((__u16 )serial->minor)) + 1) << 8;
#line 583
    if (mos7840_port->open) {
#line 584
      if ((int )sp[i] & 1) {
#line 585
        while (1) {
#line 585
          if (debug) {
#line 585
            printk("<7>%s: SP%d No Interrupt !!!\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                   i);
          } else {

          }
#line 585
          break;
        }
      } else {
#line 587
        switch ((int )sp[i] & 15) {
        case 6: 
#line 589
        while (1) {
#line 589
          if (debug) {
#line 589
            printk("<7>%s: Serial Port %d: Receiver status error or \n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                   i);
          } else {

          }
#line 589
          break;
        }
#line 590
        while (1) {
#line 590
          if (debug) {
#line 590
            printk("<7>%s: address bit detected in 9-bit mode\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
          } else {

          }
#line 590
          break;
        }
#line 591
        mos7840_port->MsrLsr = 1;
#line 592
        wreg = (__u16 )5;
#line 593
        break;
        case 0: 
#line 595
        while (1) {
#line 595
          if (debug) {
#line 595
            printk("<7>%s: Serial Port %d: Modem status change\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                   i);
          } else {

          }
#line 595
          break;
        }
#line 596
        mos7840_port->MsrLsr = 0;
#line 597
        wreg = (__u16 )6;
#line 598
        break;
        }
#line 600
        _spin_lock(& mos7840_port->pool_lock);
#line 601
        if (! mos7840_port->zombie) {
#line 602
          rv = mos7840_get_reg(mos7840_port, wval, wreg, & Data);
        } else {
#line 604
          _spin_unlock(& mos7840_port->pool_lock);
#line 605
          return;
        }
#line 607
        _spin_unlock(& mos7840_port->pool_lock);
      }
    } else {

    }
#line 578
    i = i + 1;
  }
#line 611
  if (! (rv < 0)) {
#line 612
    return;
  } else {

  }
  exit: 
#line 614
  result = usb_submit_urb(urb, 32U);
#line 615
  if (result) {
#line 616
    tmp = dev_driver_string(& (urb->dev)->dev);
#line 616
    printk("<3>%s %s: %s - Error %d submitting interrupt urb\n", tmp, (urb->dev)->dev.bus_id,
           "mos7840_interrupt_callback", result);
  } else {

  }
#line 620
  return;
}
}
#line 622 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_port_paranoia_check(struct usb_serial_port *port , char const   *function ) 
{ 


  {
#line 625
  if (! port) {
#line 626
    while (1) {
#line 626
      if (debug) {
#line 626
        printk("<7>%s: %s - port == NULL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               function);
      } else {

      }
#line 626
      break;
    }
#line 627
    return (-1);
  } else {

  }
#line 629
  if (! port->serial) {
#line 630
    while (1) {
#line 630
      if (debug) {
#line 630
        printk("<7>%s: %s - port->serial == NULL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               function);
      } else {

      }
#line 630
      break;
    }
#line 631
    return (-1);
  } else {

  }
#line 634
  return (0);
}
}
#line 638 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_serial_paranoia_check(struct usb_serial *serial , char const   *function ) 
{ 


  {
#line 641
  if (! serial) {
#line 642
    while (1) {
#line 642
      if (debug) {
#line 642
        printk("<7>%s: %s - serial == NULL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               function);
      } else {

      }
#line 642
      break;
    }
#line 643
    return (-1);
  } else {

  }
#line 645
  if (! serial->type) {
#line 646
    while (1) {
#line 646
      if (debug) {
#line 646
        printk("<7>%s: %s - serial->type == NULL!\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               function);
      } else {

      }
#line 646
      break;
    }
#line 647
    return (-1);
  } else {

  }
#line 650
  return (0);
}
}
#line 653 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static struct usb_serial *mos7840_get_usb_serial(struct usb_serial_port *port , char const   *function ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 657
  if (! port) {
#line 662
    return ((void *)0);
  } else {
#line 657
    tmp = mos7840_port_paranoia_check(port, function);
#line 657
    if (tmp) {
#line 662
      return ((void *)0);
    } else {
#line 657
      tmp___0 = mos7840_serial_paranoia_check(port->serial, function);
#line 657
      if (tmp___0) {
#line 662
        return ((void *)0);
      } else {

      }
    }
  }
#line 665
  return (port->serial);
}
}
#line 674 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_bulk_in_callback(struct urb *urb ) 
{ 
  int retval ;
  unsigned char *data ;
  struct usb_serial *serial ;
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  struct tty_struct *tty ;
  int status ;
  int tmp ;

  {
#line 682
  status = urb->status;
#line 684
  if (status) {
#line 685
    while (1) {
#line 685
      if (debug) {
#line 685
        printk("<7>%s: nonzero read bulk status received: %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               status);
      } else {

      }
#line 685
      break;
    }
#line 686
    return;
  } else {

  }
#line 689
  mos7840_port = (struct moschip_port *)urb->context;
#line 690
  if (! mos7840_port) {
#line 691
    while (1) {
#line 691
      if (debug) {
#line 691
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "NULL mos7840_port pointer \n");
      } else {

      }
#line 691
      break;
    }
#line 692
    return;
  } else {

  }
#line 695
  port = mos7840_port->port;
#line 696
  tmp = mos7840_port_paranoia_check(port, "mos7840_bulk_in_callback");
#line 696
  if (tmp) {
#line 697
    while (1) {
#line 697
      if (debug) {
#line 697
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed \n");
      } else {

      }
#line 697
      break;
    }
#line 698
    return;
  } else {

  }
#line 701
  serial = mos7840_get_usb_serial(port, "mos7840_bulk_in_callback");
#line 702
  if (! serial) {
#line 703
    while (1) {
#line 703
      if (debug) {
#line 703
        printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Bad serial pointer ");
      } else {

      }
#line 703
      break;
    }
#line 704
    return;
  } else {

  }
#line 707
  while (1) {
#line 707
    if (debug) {
#line 707
      printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "Entering... \n");
    } else {

    }
#line 707
    break;
  }
#line 709
  data = urb->transfer_buffer;
#line 711
  while (1) {
#line 711
    if (debug) {
#line 711
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "Entering ........... \n");
    } else {

    }
#line 711
    break;
  }
#line 713
  if (urb->actual_length) {
#line 714
    tty = (mos7840_port->port)->tty;
#line 715
    if (tty) {
#line 716
      tty_buffer_request_room(tty, urb->actual_length);
#line 717
      tty_insert_flip_string(tty, data, urb->actual_length);
#line 718
      while (1) {
#line 718
        if (debug) {
#line 718
          printk("<7>%s:  %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 data);
        } else {

        }
#line 718
        break;
      }
#line 719
      tty_flip_buffer_push(tty);
    } else {

    }
#line 721
    mos7840_port->icount.rx = mos7840_port->icount.rx + (__u32 )urb->actual_length;
#line 722
    __asm__  volatile   ("": : : "memory");
#line 723
    while (1) {
#line 723
      if (debug) {
#line 723
        printk("<7>%s: mos7840_port->icount.rx is %d:\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               mos7840_port->icount.rx);
      } else {

      }
#line 723
      break;
    }
  } else {

  }
#line 727
  if (! mos7840_port->read_urb) {
#line 728
    while (1) {
#line 728
      if (debug) {
#line 728
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "URB KILLED !!!\n");
      } else {

      }
#line 728
      break;
    }
#line 729
    return;
  } else {

  }
#line 733
  (mos7840_port->read_urb)->dev = serial->dev;
#line 735
  retval = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 737
  if (retval) {
#line 738
    while (1) {
#line 738
      if (debug) {
#line 738
        printk("<7>%s:  usb_submit_urb(read bulk) failed, retval = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               retval);
      } else {

      }
#line 738
      break;
    }
  } else {

  }
#line 741
  return;
}
}
#line 749 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_bulk_out_data_callback(struct urb *urb ) 
{ 
  struct moschip_port *mos7840_port ;
  struct tty_struct *tty ;
  int status ;
  int i ;
  int tmp ;

  {
#line 753
  status = urb->status;
#line 756
  mos7840_port = (struct moschip_port *)urb->context;
#line 757
  _spin_lock(& mos7840_port->pool_lock);
#line 758
  i = 0;
#line 758
  while (1) {
#line 758
    if (i < 16) {

    } else {
#line 758
      break;
    }
#line 759
    if ((unsigned long )urb == (unsigned long )mos7840_port->write_urb_pool[i]) {
#line 760
      mos7840_port->busy[i] = 0;
#line 761
      break;
    } else {

    }
#line 758
    i = i + 1;
  }
#line 764
  _spin_unlock(& mos7840_port->pool_lock);
#line 766
  if (status) {
#line 767
    while (1) {
#line 767
      if (debug) {
#line 767
        printk("<7>%s: nonzero write bulk status received:%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               status);
      } else {

      }
#line 767
      break;
    }
#line 768
    return;
  } else {

  }
#line 771
  tmp = mos7840_port_paranoia_check(mos7840_port->port, "mos7840_bulk_out_data_callback");
#line 771
  if (tmp) {
#line 772
    while (1) {
#line 772
      if (debug) {
#line 772
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed \n");
      } else {

      }
#line 772
      break;
    }
#line 773
    return;
  } else {

  }
#line 776
  while (1) {
#line 776
    if (debug) {
#line 776
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "Entering .........");
    } else {

    }
#line 776
    break;
  }
#line 778
  tty = (mos7840_port->port)->tty;
#line 780
  if (tty && mos7840_port->open) {
#line 781
    tty_wakeup(tty);
  } else {

  }
#line 783
  return;
}
}
#line 808 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_open(struct usb_serial_port *port , struct file *filp ) 
{ 
  int response ;
  int j ;
  struct usb_serial *serial ;
  struct urb *urb ;
  __u16 Data ;
  int status ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *port0 ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 819
  tmp = mos7840_port_paranoia_check(port, "mos7840_open");
#line 819
  if (tmp) {
#line 820
    while (1) {
#line 820
      if (debug) {
#line 820
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed \n");
      } else {

      }
#line 820
      break;
    }
#line 821
    return (-19);
  } else {

  }
#line 824
  serial = port->serial;
#line 826
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_open");
#line 826
  if (tmp___0) {
#line 827
    while (1) {
#line 827
      if (debug) {
#line 827
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Serial Paranoia failed \n");
      } else {

      }
#line 827
      break;
    }
#line 828
    return (-19);
  } else {

  }
#line 831
  mos7840_port = mos7840_get_port_private(port);
#line 832
  port0 = mos7840_get_port_private(serial->port[0]);
#line 834
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0) || (unsigned long )port0 == (unsigned long )((void *)0)) {
#line 835
    return (-19);
  } else {

  }
#line 837
  usb_clear_halt(serial->dev, (port->write_urb)->pipe);
#line 838
  usb_clear_halt(serial->dev, (port->read_urb)->pipe);
#line 839
  port0->open_ports = (char )((int )port0->open_ports + 1);
#line 842
  j = 0;
#line 842
  while (1) {
#line 842
    if (j < 16) {

    } else {
#line 842
      break;
    }
#line 843
    urb = usb_alloc_urb(0, (16U | 64U) | 128U);
#line 844
    mos7840_port->write_urb_pool[j] = urb;
#line 846
    if ((unsigned long )urb == (unsigned long )((void *)0)) {
#line 847
      printk("<3>mos7840: No more urbs???\n");
#line 848
      goto __Cont;
    } else {

    }
#line 851
    urb->transfer_buffer = kmalloc(32, (16U | 64U) | 128U);
#line 852
    if (! urb->transfer_buffer) {
#line 853
      usb_free_urb(urb);
#line 854
      mos7840_port->write_urb_pool[j] = (void *)0;
#line 855
      printk("<3>mos7840: %s-out of memory for urb buffers.\n", "mos7840_open");
#line 856
      goto __Cont;
    } else {

    }
    __Cont: /* CIL Label */ 
#line 842
    j = j + 1;
  }
#line 874
  status = 0;
#line 875
  Data = 0;
#line 876
  status = mos7840_get_reg_sync(port, mos7840_port->SpRegOffset, & Data);
#line 877
  if (status < 0) {
#line 878
    while (1) {
#line 878
      if (debug) {
#line 878
        printk("<7>%s: Reading Spreg failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 878
      break;
    }
#line 879
    return (-1);
  } else {

  }
#line 881
  Data = (int )Data | 128;
#line 882
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 883
  if (status < 0) {
#line 884
    while (1) {
#line 884
      if (debug) {
#line 884
        printk("<7>%s: writing Spreg failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 884
      break;
    }
#line 885
    return (-1);
  } else {

  }
#line 888
  Data = (int )Data & ~ 128;
#line 889
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 890
  if (status < 0) {
#line 891
    while (1) {
#line 891
      if (debug) {
#line 891
        printk("<7>%s: writing Spreg failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 891
      break;
    }
#line 892
    return (-1);
  } else {

  }
#line 896
  status = 0;
#line 897
  Data = 0;
#line 898
  status = mos7840_get_reg_sync(port, mos7840_port->ControlRegOffset, & Data);
#line 900
  if (status < 0) {
#line 901
    while (1) {
#line 901
      if (debug) {
#line 901
        printk("<7>%s: Reading Controlreg failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 901
      break;
    }
#line 902
    return (-1);
  } else {

  }
#line 904
  Data = (int )Data | 8;
#line 905
  Data = (int )Data | 32;
#line 906
  status = mos7840_set_reg_sync(port, mos7840_port->ControlRegOffset, Data);
#line 907
  if (status < 0) {
#line 908
    while (1) {
#line 908
      if (debug) {
#line 908
        printk("<7>%s: writing Controlreg failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 908
      break;
    }
#line 909
    return (-1);
  } else {

  }
#line 917
  Data = 0;
#line 918
  status = mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 919
  if (status < 0) {
#line 920
    while (1) {
#line 920
      if (debug) {
#line 920
        printk("<7>%s: disableing interrupts failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 920
      break;
    }
#line 921
    return (-1);
  } else {

  }
#line 924
  Data = 0;
#line 925
  status = mos7840_set_uart_reg(port, (__u16 )2, Data);
#line 926
  if (status < 0) {
#line 927
    while (1) {
#line 927
      if (debug) {
#line 927
        printk("<7>%s: Writing FIFO_CONTROL_REGISTER  failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 927
      break;
    }
#line 928
    return (-1);
  } else {

  }
#line 931
  Data = 207;
#line 932
  status = mos7840_set_uart_reg(port, (__u16 )2, Data);
#line 933
  if (status < 0) {
#line 934
    while (1) {
#line 934
      if (debug) {
#line 934
        printk("<7>%s: Writing FIFO_CONTROL_REGISTER  failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 934
      break;
    }
#line 935
    return (-1);
  } else {

  }
#line 938
  Data = 3;
#line 939
  status = mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 940
  mos7840_port->shadowLCR = Data;
#line 942
  Data = 11;
#line 943
  status = mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 944
  mos7840_port->shadowMCR = Data;
#line 946
  Data = 0;
#line 947
  status = mos7840_get_uart_reg(port, (__u16 )3, & Data);
#line 948
  mos7840_port->shadowLCR = Data;
#line 950
  Data = (int )Data | (int )((__u16 )128);
#line 951
  status = mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 953
  Data = 12;
#line 954
  status = 0;
#line 955
  status = mos7840_set_uart_reg(port, (__u16 )0, Data);
#line 957
  Data = 0;
#line 958
  status = 0;
#line 959
  status = mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 961
  Data = 0;
#line 962
  status = 0;
#line 963
  status = mos7840_get_uart_reg(port, (__u16 )3, & Data);
#line 965
  Data = (int )Data & ~ ((int )((__u16 )128));
#line 966
  status = 0;
#line 967
  status = mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 968
  mos7840_port->shadowLCR = Data;
#line 971
  Data = 0;
#line 972
  status = 0;
#line 973
  status = mos7840_get_reg_sync(port, mos7840_port->SpRegOffset, & Data);
#line 975
  Data = (int )Data | 12;
#line 976
  status = 0;
#line 977
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 979
  Data = (int )Data & ~ 12;
#line 980
  status = 0;
#line 981
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 983
  Data = 0;
#line 984
  Data = 12;
#line 985
  status = 0;
#line 986
  status = mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 989
  Data = 0;
#line 990
  status = 0;
#line 991
  status = mos7840_get_reg_sync(port, mos7840_port->ControlRegOffset, & Data);
#line 993
  Data = (int )Data & ~ 32;
#line 994
  status = 0;
#line 995
  status = mos7840_set_reg_sync(port, mos7840_port->ControlRegOffset, Data);
#line 999
  Data = 0;
#line 1000
  status = 0;
#line 1001
  status = mos7840_get_reg_sync(port, mos7840_port->ControlRegOffset, & Data);
#line 1003
  Data = (int )Data | 16;
#line 1004
  status = 0;
#line 1005
  status = mos7840_set_reg_sync(port, mos7840_port->ControlRegOffset, Data);
#line 1012
  if (port->tty) {
#line 1013
    (port->tty)->low_latency = 1;
  } else {

  }
#line 1017
  if ((int )port0->open_ports == 1) {
#line 1018
    if ((unsigned long )(serial->port[0])->interrupt_in_buffer == (unsigned long )((void *)0)) {
#line 1022
      tmp___1 = __create_pipe(serial->dev, (serial->port[0])->interrupt_in_endpointAddress);
#line 1022
      usb_fill_int_urb((serial->port[0])->interrupt_in_urb, serial->dev, ((unsigned int )(1 << 30) | tmp___1) | 128U,
                       (serial->port[0])->interrupt_in_buffer, ((serial->port[0])->interrupt_in_urb)->transfer_buffer_length,
                       & mos7840_interrupt_callback, serial, ((serial->port[0])->interrupt_in_urb)->interval);
#line 1038
      response = usb_submit_urb((serial->port[0])->interrupt_in_urb, (16U | 64U) | 128U);
#line 1041
      if (response) {
#line 1042
        printk("<3>mos7840: %s - Error %d submitting interrupt urb\n", "mos7840_open",
               response);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1054
  while (1) {
#line 1054
    if (debug) {
#line 1054
      printk("<7>%s: port number is %d \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             port->number);
    } else {

    }
#line 1054
    break;
  }
#line 1055
  while (1) {
#line 1055
    if (debug) {
#line 1055
      printk("<7>%s: serial number is %d \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             (port->serial)->minor);
    } else {

    }
#line 1055
    break;
  }
#line 1056
  while (1) {
#line 1056
    if (debug) {
#line 1056
      printk("<7>%s: Bulkin endpoint is %d \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             port->bulk_in_endpointAddress);
    } else {

    }
#line 1056
    break;
  }
#line 1057
  while (1) {
#line 1057
    if (debug) {
#line 1057
      printk("<7>%s: BulkOut endpoint is %d \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             port->bulk_out_endpointAddress);
    } else {

    }
#line 1057
    break;
  }
#line 1058
  while (1) {
#line 1058
    if (debug) {
#line 1058
      printk("<7>%s: Interrupt endpoint is %d \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             port->interrupt_in_endpointAddress);
    } else {

    }
#line 1058
    break;
  }
#line 1059
  while (1) {
#line 1059
    if (debug) {
#line 1059
      printk("<7>%s: port\'s number in the device is %d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             mos7840_port->port_num);
    } else {

    }
#line 1059
    break;
  }
#line 1060
  mos7840_port->read_urb = port->read_urb;
#line 1064
  tmp___2 = __create_pipe(serial->dev, port->bulk_in_endpointAddress);
#line 1064
  usb_fill_bulk_urb(mos7840_port->read_urb, serial->dev, ((unsigned int )(3 << 30) | tmp___2) | 128U,
                    port->bulk_in_buffer, (mos7840_port->read_urb)->transfer_buffer_length,
                    & mos7840_bulk_in_callback, mos7840_port);
#line 1072
  while (1) {
#line 1072
    if (debug) {
#line 1072
      printk("<7>%s: mos7840_open: bulkin endpoint is %d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             port->bulk_in_endpointAddress);
    } else {

    }
#line 1072
    break;
  }
#line 1074
  response = usb_submit_urb(mos7840_port->read_urb, (16U | 64U) | 128U);
#line 1075
  if (response) {
#line 1076
    printk("<3>mos7840: %s - Error %d submitting control urb\n", "mos7840_open", response);
  } else {

  }
#line 1081
  init_waitqueue_head(& mos7840_port->wait_chase);
#line 1082
  init_waitqueue_head(& mos7840_port->delta_msr_wait);
#line 1085
  memset(& mos7840_port->icount, 0, sizeof(mos7840_port->icount));
#line 1088
  mos7840_port->shadowMCR = 8;
#line 1090
  mos7840_port->open = 1;
#line 1092
  mos7840_port->icount.tx = 0;
#line 1093
  mos7840_port->icount.rx = 0;
#line 1095
  while (1) {
#line 1095
    if (debug) {
#line 1095
      printk("<7>%s: \n\nusb_serial serial:%p       mos7840_port:%p\n      usb_serial_port port:%p\n\n\n",
             "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             serial, mos7840_port, port);
    } else {

    }
#line 1095
    break;
  }
#line 1097
  return (0);
}
}
#line 1111 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_chars_in_buffer(struct usb_serial_port *port ) 
{ 
  int i ;
  int chars ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;
  int tmp ;

  {
#line 1114
  chars = 0;
#line 1118
  while (1) {
#line 1118
    if (debug) {
#line 1118
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             " mos7840_chars_in_buffer:entering ...........");
    } else {

    }
#line 1118
    break;
  }
#line 1120
  tmp = mos7840_port_paranoia_check(port, "mos7840_chars_in_buffer");
#line 1120
  if (tmp) {
#line 1121
    while (1) {
#line 1121
      if (debug) {
#line 1121
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 1121
      break;
    }
#line 1122
    return (-1);
  } else {

  }
#line 1125
  mos7840_port = mos7840_get_port_private(port);
#line 1126
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1127
    while (1) {
#line 1127
      if (debug) {
#line 1127
        printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "mos7840_break:leaving ...........");
      } else {

      }
#line 1127
      break;
    }
#line 1128
    return (-1);
  } else {

  }
#line 1131
  flags = _spin_lock_irqsave(& mos7840_port->pool_lock);
#line 1132
  i = 0;
#line 1132
  while (1) {
#line 1132
    if (i < 16) {

    } else {
#line 1132
      break;
    }
#line 1133
    if (mos7840_port->busy[i]) {
#line 1134
      chars = chars + 32;
    } else {

    }
#line 1132
    i = i + 1;
  }
#line 1137
  _spin_unlock_irqrestore(& mos7840_port->pool_lock, flags);
#line 1138
  while (1) {
#line 1138
    if (debug) {
#line 1138
      printk("<7>%s: %s - returns %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_chars_in_buffer", chars);
    } else {

    }
#line 1138
    break;
  }
#line 1139
  return (chars);
}
}
#line 1153 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_block_until_tx_empty(struct moschip_port *mos7840_port ) 
{ 
  int timeout ;
  int wait ;
  int count ;

  {
#line 1155
  timeout = 250 / 10;
#line 1156
  wait = 30;
#line 1159
  while (1) {
#line 1161
    count = mos7840_chars_in_buffer(mos7840_port->port);
#line 1164
    if (count <= 0) {
#line 1165
      return;
    } else {

    }
#line 1169
    interruptible_sleep_on_timeout(& mos7840_port->wait_chase, timeout);
#line 1173
    wait = wait - 1;
#line 1174
    if (wait == 0) {
#line 1175
      while (1) {
#line 1175
        if (debug) {
#line 1175
          printk("<7>%s: %s - TIMEOUT\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 "mos7840_block_until_tx_empty");
        } else {

        }
#line 1175
        break;
      }
#line 1176
      return;
    } else {
#line 1179
      wait = 30;
    }
  }
}
}
#line 1189 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_close(struct usb_serial_port *port , struct file *filp ) 
{ 
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *port0 ;
  int j ;
  __u16 Data ;
  int tmp ;

  {
#line 1197
  while (1) {
#line 1197
    if (debug) {
#line 1197
      printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_close:entering...");
    } else {

    }
#line 1197
    break;
  }
#line 1199
  tmp = mos7840_port_paranoia_check(port, "mos7840_close");
#line 1199
  if (tmp) {
#line 1200
    while (1) {
#line 1200
      if (debug) {
#line 1200
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed \n");
      } else {

      }
#line 1200
      break;
    }
#line 1201
    return;
  } else {

  }
#line 1204
  serial = mos7840_get_usb_serial(port, "mos7840_close");
#line 1205
  if (! serial) {
#line 1206
    while (1) {
#line 1206
      if (debug) {
#line 1206
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Serial Paranoia failed \n");
      } else {

      }
#line 1206
      break;
    }
#line 1207
    return;
  } else {

  }
#line 1210
  mos7840_port = mos7840_get_port_private(port);
#line 1211
  port0 = mos7840_get_port_private(serial->port[0]);
#line 1213
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0) || (unsigned long )port0 == (unsigned long )((void *)0)) {
#line 1214
    return;
  } else {

  }
#line 1216
  j = 0;
#line 1216
  while (1) {
#line 1216
    if (j < 16) {

    } else {
#line 1216
      break;
    }
#line 1217
    usb_kill_urb(mos7840_port->write_urb_pool[j]);
#line 1216
    j = j + 1;
  }
#line 1220
  j = 0;
#line 1220
  while (1) {
#line 1220
    if (j < 16) {

    } else {
#line 1220
      break;
    }
#line 1221
    if (mos7840_port->write_urb_pool[j]) {
#line 1222
      if ((mos7840_port->write_urb_pool[j])->transfer_buffer) {
#line 1223
        kfree((mos7840_port->write_urb_pool[j])->transfer_buffer);
      } else {

      }
#line 1226
      usb_free_urb(mos7840_port->write_urb_pool[j]);
    } else {

    }
#line 1220
    j = j + 1;
  }
#line 1230
  if (serial->dev) {
#line 1232
    mos7840_block_until_tx_empty(mos7840_port);
  } else {

  }
#line 1237
  if (serial->dev) {
#line 1239
    if (mos7840_port->write_urb) {
#line 1240
      while (1) {
#line 1240
        if (debug) {
#line 1240
          printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 "Shutdown bulk write\n");
        } else {

        }
#line 1240
        break;
      }
#line 1241
      usb_kill_urb(mos7840_port->write_urb);
    } else {

    }
#line 1244
    if (mos7840_port->read_urb) {
#line 1245
      while (1) {
#line 1245
        if (debug) {
#line 1245
          printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 "Shutdown bulk read\n");
        } else {

        }
#line 1245
        break;
      }
#line 1246
      usb_kill_urb(mos7840_port->read_urb);
    } else {

    }
#line 1248
    if (& mos7840_port->control_urb) {
#line 1249
      while (1) {
#line 1249
        if (debug) {
#line 1249
          printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 "Shutdown control read\n");
        } else {

        }
#line 1249
        break;
      }
    } else {

    }
  } else {

  }
#line 1256
  port0->open_ports = (char )((int )port0->open_ports - 1);
#line 1257
  while (1) {
#line 1257
    if (debug) {
#line 1257
      printk("<7>%s: mos7840_num_open_ports in close%d:in port%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             port0->open_ports, port->number);
    } else {

    }
#line 1257
    break;
  }
#line 1259
  if ((int )port0->open_ports == 0) {
#line 1260
    if ((serial->port[0])->interrupt_in_urb) {
#line 1261
      while (1) {
#line 1261
        if (debug) {
#line 1261
          printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 "Shutdown interrupt_in_urb\n");
        } else {

        }
#line 1261
        break;
      }
#line 1262
      usb_kill_urb((serial->port[0])->interrupt_in_urb);
    } else {

    }
  } else {

  }
#line 1266
  if (mos7840_port->write_urb) {
#line 1269
    if ((unsigned long )(mos7840_port->write_urb)->transfer_buffer != (unsigned long )((void *)0)) {
#line 1270
      kfree((mos7840_port->write_urb)->transfer_buffer);
    } else {

    }
#line 1272
    usb_free_urb(mos7840_port->write_urb);
  } else {

  }
#line 1275
  Data = 0;
#line 1276
  mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 1278
  Data = 0;
#line 1279
  mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 1281
  mos7840_port->open = 0;
#line 1283
  while (1) {
#line 1283
    if (debug) {
#line 1283
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "Leaving ............");
    } else {

    }
#line 1283
    break;
  }
#line 1284
  return;
}
}
#line 1297 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_block_until_chase_response(struct moschip_port *mos7840_port ) 
{ 
  int timeout ;
  int wait ;
  int count ;

  {
#line 1300
  timeout = 1 * 250;
#line 1301
  wait = 10;
#line 1304
  while (1) {
#line 1305
    count = mos7840_chars_in_buffer(mos7840_port->port);
#line 1308
    if (count <= 0) {
#line 1309
      return;
    } else {

    }
#line 1313
    interruptible_sleep_on_timeout(& mos7840_port->wait_chase, timeout);
#line 1316
    wait = wait - 1;
#line 1317
    if (wait == 0) {
#line 1318
      while (1) {
#line 1318
        if (debug) {
#line 1318
          printk("<7>%s: %s - TIMEOUT\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 "mos7840_block_until_chase_response");
        } else {

        }
#line 1318
        break;
      }
#line 1319
      return;
    } else {
#line 1322
      wait = 10;
    }
  }
}
}
#line 1332 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_break(struct usb_serial_port *port , int break_state ) 
{ 
  unsigned char data ;
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  int tmp ;

  {
#line 1338
  while (1) {
#line 1338
    if (debug) {
#line 1338
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "Entering ...........");
    } else {

    }
#line 1338
    break;
  }
#line 1339
  while (1) {
#line 1339
    if (debug) {
#line 1339
      printk("<7>%s: mos7840_break: Start\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
    } else {

    }
#line 1339
    break;
  }
#line 1341
  tmp = mos7840_port_paranoia_check(port, "mos7840_break");
#line 1341
  if (tmp) {
#line 1342
    while (1) {
#line 1342
      if (debug) {
#line 1342
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed \n");
      } else {

      }
#line 1342
      break;
    }
#line 1343
    return;
  } else {

  }
#line 1346
  serial = mos7840_get_usb_serial(port, "mos7840_break");
#line 1347
  if (! serial) {
#line 1348
    while (1) {
#line 1348
      if (debug) {
#line 1348
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Serial Paranoia failed \n");
      } else {

      }
#line 1348
      break;
    }
#line 1349
    return;
  } else {

  }
#line 1352
  mos7840_port = mos7840_get_port_private(port);
#line 1354
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1355
    return;
  } else {

  }
#line 1358
  if (serial->dev) {
#line 1361
    mos7840_block_until_chase_response(mos7840_port);
  } else {

  }
#line 1364
  if (break_state == -1) {
#line 1365
    data = (int )mos7840_port->shadowLCR | 64;
  } else {
#line 1367
    data = (int )mos7840_port->shadowLCR & ~ 64;
  }
#line 1370
  mos7840_port->shadowLCR = data;
#line 1371
  while (1) {
#line 1371
    if (debug) {
#line 1371
      printk("<7>%s: mcs7840_break mos7840_port->shadowLCR is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             mos7840_port->shadowLCR);
    } else {

    }
#line 1371
    break;
  }
#line 1373
  mos7840_set_uart_reg(port, (__u16 )3, mos7840_port->shadowLCR);
#line 1376
  return;
}
}
#line 1387 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_write_room(struct usb_serial_port *port ) 
{ 
  int i ;
  int room ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;
  int tmp ;

  {
#line 1390
  room = 0;
#line 1394
  while (1) {
#line 1394
    if (debug) {
#line 1394
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             " mos7840_write_room:entering ...........");
    } else {

    }
#line 1394
    break;
  }
#line 1396
  tmp = mos7840_port_paranoia_check(port, "mos7840_write_room");
#line 1396
  if (tmp) {
#line 1397
    while (1) {
#line 1397
      if (debug) {
#line 1397
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 1397
      break;
    }
#line 1398
    while (1) {
#line 1398
      if (debug) {
#line 1398
        printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               " mos7840_write_room:leaving ...........");
      } else {

      }
#line 1398
      break;
    }
#line 1399
    return (-1);
  } else {

  }
#line 1402
  mos7840_port = mos7840_get_port_private(port);
#line 1403
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1404
    while (1) {
#line 1404
      if (debug) {
#line 1404
        printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "mos7840_break:leaving ...........");
      } else {

      }
#line 1404
      break;
    }
#line 1405
    return (-1);
  } else {

  }
#line 1408
  flags = _spin_lock_irqsave(& mos7840_port->pool_lock);
#line 1409
  i = 0;
#line 1409
  while (1) {
#line 1409
    if (i < 16) {

    } else {
#line 1409
      break;
    }
#line 1410
    if (! mos7840_port->busy[i]) {
#line 1411
      room = room + 32;
    } else {

    }
#line 1409
    i = i + 1;
  }
#line 1414
  _spin_unlock_irqrestore(& mos7840_port->pool_lock, flags);
#line 1416
  room = room == 0 ? 0 : (room - 32) + 1;
#line 1417
  while (1) {
#line 1417
    if (debug) {
#line 1417
      printk("<7>%s: %s - returns %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_write_room", room);
    } else {

    }
#line 1417
    break;
  }
#line 1418
  return (room);
}
}
#line 1430 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_write(struct usb_serial_port *port , unsigned char const   *data ,
                         int count ) 
{ 
  int status ;
  int i ;
  int bytes_sent ;
  int transfer_size ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;
  struct usb_serial *serial ;
  struct urb *urb ;
  unsigned char const   *current_position ;
  unsigned char *data1 ;
  int tmp ;
  int tmp___0 ;
  int _x ;
  int _y ;
  size_t __len ;
  void *__ret ;
  unsigned int tmp___1 ;

  {
#line 1435
  bytes_sent = 0;
#line 1443
  current_position = data;
#line 1445
  while (1) {
#line 1445
    if (debug) {
#line 1445
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "entering ...........");
    } else {

    }
#line 1445
    break;
  }
#line 1484
  tmp = mos7840_port_paranoia_check(port, "mos7840_write");
#line 1484
  if (tmp) {
#line 1485
    while (1) {
#line 1485
      if (debug) {
#line 1485
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Port Paranoia failed \n");
      } else {

      }
#line 1485
      break;
    }
#line 1486
    return (-1);
  } else {

  }
#line 1489
  serial = port->serial;
#line 1490
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_write");
#line 1490
  if (tmp___0) {
#line 1491
    while (1) {
#line 1491
      if (debug) {
#line 1491
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Serial Paranoia failed \n");
      } else {

      }
#line 1491
      break;
    }
#line 1492
    return (-1);
  } else {

  }
#line 1495
  mos7840_port = mos7840_get_port_private(port);
#line 1496
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1497
    while (1) {
#line 1497
      if (debug) {
#line 1497
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "mos7840_port is NULL\n");
      } else {

      }
#line 1497
      break;
    }
#line 1498
    return (-1);
  } else {

  }
#line 1502
  urb = (void *)0;
#line 1504
  flags = _spin_lock_irqsave(& mos7840_port->pool_lock);
#line 1505
  i = 0;
#line 1505
  while (1) {
#line 1505
    if (i < 16) {

    } else {
#line 1505
      break;
    }
#line 1506
    if (! mos7840_port->busy[i]) {
#line 1507
      mos7840_port->busy[i] = 1;
#line 1508
      urb = mos7840_port->write_urb_pool[i];
#line 1509
      while (1) {
#line 1509
        if (debug) {
#line 1509
          printk("<7>%s: \nURB:%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 i);
        } else {

        }
#line 1509
        break;
      }
#line 1510
      break;
    } else {

    }
#line 1505
    i = i + 1;
  }
#line 1513
  _spin_unlock_irqrestore(& mos7840_port->pool_lock, flags);
#line 1515
  if ((unsigned long )urb == (unsigned long )((void *)0)) {
#line 1516
    while (1) {
#line 1516
      if (debug) {
#line 1516
        printk("<7>%s: %s - no more free urbs\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "mos7840_write");
      } else {

      }
#line 1516
      break;
    }
#line 1517
    goto exit;
  } else {

  }
#line 1520
  if ((unsigned long )urb->transfer_buffer == (unsigned long )((void *)0)) {
#line 1521
    urb->transfer_buffer = kmalloc(32, (16U | 64U) | 128U);
#line 1524
    if ((unsigned long )urb->transfer_buffer == (unsigned long )((void *)0)) {
#line 1525
      printk("<3>mos7840: %s no more kernel memory...\n", "mos7840_write");
#line 1526
      goto exit;
    } else {

    }
  } else {

  }
#line 1529
  _x = count;
#line 1529
  _y = 32;
#line 1529
  transfer_size = _x < _y ? _x : _y;
#line 1531
  __len = transfer_size;
#line 1531
  __ret = __builtin_memcpy(urb->transfer_buffer, current_position, __len);
#line 1534
  tmp___1 = __create_pipe(serial->dev, port->bulk_out_endpointAddress);
#line 1534
  usb_fill_bulk_urb(urb, serial->dev, (unsigned int )(3 << 30) | tmp___1, urb->transfer_buffer,
                    transfer_size, & mos7840_bulk_out_data_callback, mos7840_port);
#line 1542
  data1 = urb->transfer_buffer;
#line 1543
  while (1) {
#line 1543
    if (debug) {
#line 1543
      printk("<7>%s: \nbulkout endpoint is %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             port->bulk_out_endpointAddress);
    } else {

    }
#line 1543
    break;
  }
#line 1546
  status = usb_submit_urb(urb, 32U);
#line 1548
  if (status) {
#line 1549
    mos7840_port->busy[i] = 0;
#line 1550
    printk("<3>mos7840: %s - usb_submit_urb(write bulk) failed with status = %d\n",
           "mos7840_write", status);
#line 1552
    bytes_sent = status;
#line 1553
    goto exit;
  } else {

  }
#line 1555
  bytes_sent = transfer_size;
#line 1556
  mos7840_port->icount.tx = mos7840_port->icount.tx + (__u32 )transfer_size;
#line 1557
  __asm__  volatile   ("": : : "memory");
#line 1558
  while (1) {
#line 1558
    if (debug) {
#line 1558
      printk("<7>%s: mos7840_port->icount.tx is %d:\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             mos7840_port->icount.tx);
    } else {

    }
#line 1558
    break;
  }
  exit: 
#line 1561
  return (bytes_sent);
}
}
#line 1571 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_throttle(struct usb_serial_port *port ) 
{ 
  struct moschip_port *mos7840_port ;
  struct tty_struct *tty ;
  int status ;
  int tmp ;
  unsigned char stop_char ;

  {
#line 1577
  tmp = mos7840_port_paranoia_check(port, "mos7840_throttle");
#line 1577
  if (tmp) {
#line 1578
    while (1) {
#line 1578
      if (debug) {
#line 1578
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 1578
      break;
    }
#line 1579
    return;
  } else {

  }
#line 1582
  while (1) {
#line 1582
    if (debug) {
#line 1582
      printk("<7>%s: - port %d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             port->number);
    } else {

    }
#line 1582
    break;
  }
#line 1584
  mos7840_port = mos7840_get_port_private(port);
#line 1586
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1587
    return;
  } else {

  }
#line 1589
  if (! mos7840_port->open) {
#line 1590
    while (1) {
#line 1590
      if (debug) {
#line 1590
        printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "port not opened");
      } else {

      }
#line 1590
      break;
    }
#line 1591
    return;
  } else {

  }
#line 1594
  while (1) {
#line 1594
    if (debug) {
#line 1594
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "Entering .......... \n");
    } else {

    }
#line 1594
    break;
  }
#line 1596
  tty = port->tty;
#line 1597
  if (! tty) {
#line 1598
    while (1) {
#line 1598
      if (debug) {
#line 1598
        printk("<7>%s: %s - no tty available\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "mos7840_throttle");
      } else {

      }
#line 1598
      break;
    }
#line 1599
    return;
  } else {

  }
#line 1603
  if ((tty->termios)->c_iflag & 4096U) {
#line 1604
    stop_char = (tty->termios)->c_cc[9];
#line 1605
    status = mos7840_write(port, & stop_char, 1);
#line 1606
    if (status <= 0) {
#line 1607
      return;
    } else {

    }
  } else {

  }
#line 1612
  if ((tty->termios)->c_cflag & 2147483648U) {
#line 1613
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR & ~ 2;
#line 1614
    status = 0;
#line 1615
    status = mos7840_set_uart_reg(port, (__u16 )4, mos7840_port->shadowMCR);
#line 1619
    if (status < 0) {
#line 1620
      return;
    } else {

    }
  } else {

  }
#line 1624
  return;
}
}
#line 1632 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_unthrottle(struct usb_serial_port *port ) 
{ 
  struct tty_struct *tty ;
  int status ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *tmp ;
  int tmp___0 ;
  unsigned char start_char ;

  {
#line 1636
  tmp = mos7840_get_port_private(port);
#line 1636
  mos7840_port = tmp;
#line 1638
  tmp___0 = mos7840_port_paranoia_check(port, "mos7840_unthrottle");
#line 1638
  if (tmp___0) {
#line 1639
    while (1) {
#line 1639
      if (debug) {
#line 1639
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 1639
      break;
    }
#line 1640
    return;
  } else {

  }
#line 1643
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1644
    return;
  } else {

  }
#line 1646
  if (! mos7840_port->open) {
#line 1647
    while (1) {
#line 1647
      if (debug) {
#line 1647
        printk("<7>%s: %s - port not opened\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "mos7840_unthrottle");
      } else {

      }
#line 1647
      break;
    }
#line 1648
    return;
  } else {

  }
#line 1651
  while (1) {
#line 1651
    if (debug) {
#line 1651
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "Entering .......... \n");
    } else {

    }
#line 1651
    break;
  }
#line 1653
  tty = port->tty;
#line 1654
  if (! tty) {
#line 1655
    while (1) {
#line 1655
      if (debug) {
#line 1655
        printk("<7>%s: %s - no tty available\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "mos7840_unthrottle");
      } else {

      }
#line 1655
      break;
    }
#line 1656
    return;
  } else {

  }
#line 1660
  if ((tty->termios)->c_iflag & 4096U) {
#line 1661
    start_char = (tty->termios)->c_cc[8];
#line 1662
    status = mos7840_write(port, & start_char, 1);
#line 1663
    if (status <= 0) {
#line 1664
      return;
    } else {

    }
  } else {

  }
#line 1669
  if ((tty->termios)->c_cflag & 2147483648U) {
#line 1670
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR | 2;
#line 1671
    status = 0;
#line 1672
    status = mos7840_set_uart_reg(port, (__u16 )4, mos7840_port->shadowMCR);
#line 1675
    if (status < 0) {
#line 1676
      return;
    } else {

    }
  } else {

  }
#line 1680
  return;
}
}
#line 1683 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_tiocmget(struct usb_serial_port *port , struct file *file ) 
{ 
  struct moschip_port *mos7840_port ;
  unsigned int result ;
  __u16 msr ;
  __u16 mcr ;
  int status ;

  {
#line 1689
  status = 0;
#line 1690
  mos7840_port = mos7840_get_port_private(port);
#line 1692
  while (1) {
#line 1692
    if (debug) {
#line 1692
      printk("<7>%s: %s - port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_tiocmget", port->number);
    } else {

    }
#line 1692
    break;
  }
#line 1694
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1695
    return (-19);
  } else {

  }
#line 1697
  status = mos7840_get_uart_reg(port, (__u16 )6, & msr);
#line 1698
  status = mos7840_get_uart_reg(port, (__u16 )4, & mcr);
#line 1699
  result = (((((((int )mcr & 1 ? 2 : 0) | ((int )mcr & 2 ? 4 : 0)) | ((int )mcr & 16 ? 32768 : 0)) | ((int )msr & 16 ? 32 : 0)) | ((int )msr & 128 ? 64 : 0)) | ((int )msr & 64 ? 128 : 0)) | ((int )msr & 32 ? 256 : 0);
#line 1707
  while (1) {
#line 1707
    if (debug) {
#line 1707
      printk("<7>%s: %s - 0x%04X\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_tiocmget", result);
    } else {

    }
#line 1707
    break;
  }
#line 1709
  return (result);
}
}
#line 1712 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_tiocmset(struct usb_serial_port *port , struct file *file , unsigned int set ,
                            unsigned int clear ) 
{ 
  struct moschip_port *mos7840_port ;
  unsigned int mcr ;
  unsigned int status ;
  int tmp ;

  {
#line 1719
  while (1) {
#line 1719
    if (debug) {
#line 1719
      printk("<7>%s: %s - port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_tiocmset", port->number);
    } else {

    }
#line 1719
    break;
  }
#line 1721
  mos7840_port = mos7840_get_port_private(port);
#line 1723
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1724
    return (-19);
  } else {

  }
#line 1727
  mcr = mos7840_port->shadowMCR;
#line 1728
  if (clear & 4U) {
#line 1729
    mcr = mcr & (unsigned int )(~ 2);
  } else {

  }
#line 1730
  if (clear & 2U) {
#line 1731
    mcr = mcr & (unsigned int )(~ 1);
  } else {

  }
#line 1732
  if (clear & 32768U) {
#line 1733
    mcr = mcr & (unsigned int )(~ 16);
  } else {

  }
#line 1735
  if (set & 4U) {
#line 1736
    mcr = mcr | 2U;
  } else {

  }
#line 1737
  if (set & 2U) {
#line 1738
    mcr = mcr | 1U;
  } else {

  }
#line 1739
  if (set & 32768U) {
#line 1740
    mcr = mcr | 16U;
  } else {

  }
#line 1742
  mos7840_port->shadowMCR = mcr;
#line 1744
  status = 0;
#line 1745
  tmp = mos7840_set_uart_reg(port, (__u16 )4, mcr);
#line 1745
  status = tmp;
#line 1746
  if (status < 0U) {
#line 1747
    while (1) {
#line 1747
      if (debug) {
#line 1747
        printk("<7>%s: setting MODEM_CONTROL_REGISTER Failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 1747
      break;
    }
#line 1748
    return (-1);
  } else {

  }
#line 1751
  return (0);
}
}
#line 1759 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_calc_baud_rate_divisor(int baudRate , int *divisor , __u16 *clk_sel_val ) 
{ 


  {
#line 1763
  while (1) {
#line 1763
    if (debug) {
#line 1763
      printk("<7>%s: %s - %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_calc_baud_rate_divisor", baudRate);
    } else {

    }
#line 1763
    break;
  }
#line 1765
  if (baudRate <= 115200) {
#line 1766
    *divisor = 115200 / baudRate;
#line 1767
    *clk_sel_val = 0;
  } else {

  }
#line 1769
  if (baudRate > 115200 && baudRate <= 230400) {
#line 1770
    *divisor = 230400 / baudRate;
#line 1771
    *clk_sel_val = 16;
  } else
#line 1772
  if (baudRate > 230400 && baudRate <= 403200) {
#line 1773
    *divisor = 403200 / baudRate;
#line 1774
    *clk_sel_val = 32;
  } else
#line 1775
  if (baudRate > 403200 && baudRate <= 460800) {
#line 1776
    *divisor = 460800 / baudRate;
#line 1777
    *clk_sel_val = 48;
  } else
#line 1778
  if (baudRate > 460800 && baudRate <= 806400) {
#line 1779
    *divisor = 806400 / baudRate;
#line 1780
    *clk_sel_val = 64;
  } else
#line 1781
  if (baudRate > 806400 && baudRate <= 921600) {
#line 1782
    *divisor = 921600 / baudRate;
#line 1783
    *clk_sel_val = 80;
  } else
#line 1784
  if (baudRate > 921600 && baudRate <= 1572864) {
#line 1785
    *divisor = 1572864 / baudRate;
#line 1786
    *clk_sel_val = 96;
  } else
#line 1787
  if (baudRate > 1572864 && baudRate <= 3145728) {
#line 1788
    *divisor = 3145728 / baudRate;
#line 1789
    *clk_sel_val = 112;
  } else {

  }
#line 1791
  return (0);
}
}
#line 1832 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_send_cmd_write_baud_rate(struct moschip_port *mos7840_port , int baudRate ) 
{ 
  int divisor ;
  int status ;
  __u16 Data ;
  unsigned char number ;
  __u16 clk_sel_val ;
  struct usb_serial_port *port ;
  int tmp ;
  int tmp___0 ;

  {
#line 1835
  divisor = 0;
#line 1842
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1843
    return (-1);
  } else {

  }
#line 1845
  port = mos7840_port->port;
#line 1846
  tmp = mos7840_port_paranoia_check(port, "mos7840_send_cmd_write_baud_rate");
#line 1846
  if (tmp) {
#line 1847
    while (1) {
#line 1847
      if (debug) {
#line 1847
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 1847
      break;
    }
#line 1848
    return (-1);
  } else {

  }
#line 1851
  tmp___0 = mos7840_serial_paranoia_check(port->serial, "mos7840_send_cmd_write_baud_rate");
#line 1851
  if (tmp___0) {
#line 1852
    while (1) {
#line 1852
      if (debug) {
#line 1852
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Invalid Serial \n");
      } else {

      }
#line 1852
      break;
    }
#line 1853
    return (-1);
  } else {

  }
#line 1856
  while (1) {
#line 1856
    if (debug) {
#line 1856
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "Entering .......... \n");
    } else {

    }
#line 1856
    break;
  }
#line 1858
  number = (int )(mos7840_port->port)->number - (int )((mos7840_port->port)->serial)->minor;
#line 1860
  while (1) {
#line 1860
    if (debug) {
#line 1860
      printk("<7>%s: %s - port = %d, baud = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_send_cmd_write_baud_rate", (mos7840_port->port)->number, baudRate);
    } else {

    }
#line 1860
    break;
  }
#line 1896
  clk_sel_val = 0;
#line 1897
  Data = 0;
#line 1898
  status = 0;
#line 1899
  status = mos7840_calc_baud_rate_divisor(baudRate, & divisor, & clk_sel_val);
#line 1902
  status = mos7840_get_reg_sync(port, mos7840_port->SpRegOffset, & Data);
#line 1905
  if (status < 0) {
#line 1906
    while (1) {
#line 1906
      if (debug) {
#line 1906
        printk("<7>%s: reading spreg failed in set_serial_baud\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 1906
      break;
    }
#line 1907
    return (-1);
  } else {

  }
#line 1909
  Data = ((int )Data & 143) | (int )clk_sel_val;
#line 1910
  status = 0;
#line 1911
  status = mos7840_set_reg_sync(port, mos7840_port->SpRegOffset, Data);
#line 1913
  if (status < 0) {
#line 1914
    while (1) {
#line 1914
      if (debug) {
#line 1914
        printk("<7>%s: Writing spreg failed in set_serial_baud\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 1914
      break;
    }
#line 1915
    return (-1);
  } else {

  }
#line 1919
  if (status) {
#line 1920
    printk("<3>mos7840: %s - bad baud rate\n", "mos7840_send_cmd_write_baud_rate");
#line 1921
    while (1) {
#line 1921
      if (debug) {
#line 1921
        printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "bad baud rate");
      } else {

      }
#line 1921
      break;
    }
#line 1922
    return (status);
  } else {

  }
#line 1925
  Data = (int )mos7840_port->shadowLCR | (int )((__u16 )128);
#line 1926
  mos7840_port->shadowLCR = Data;
#line 1927
  mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 1930
  Data = (unsigned char )(divisor & 255);
#line 1931
  while (1) {
#line 1931
    if (debug) {
#line 1931
      printk("<7>%s: set_serial_baud Value to write DLL is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             Data);
    } else {

    }
#line 1931
    break;
  }
#line 1932
  mos7840_set_uart_reg(port, (__u16 )0, Data);
#line 1934
  Data = (unsigned char )((divisor & 65280) >> 8);
#line 1935
  while (1) {
#line 1935
    if (debug) {
#line 1935
      printk("<7>%s: set_serial_baud Value to write DLM is %x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             Data);
    } else {

    }
#line 1935
    break;
  }
#line 1936
  mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 1939
  Data = (int )mos7840_port->shadowLCR & ~ ((int )((__u16 )128));
#line 1940
  mos7840_port->shadowLCR = Data;
#line 1941
  mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 1945
  return (status);
}
}
#line 1954 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_change_port_settings(struct moschip_port *mos7840_port , struct ktermios *old_termios ) 
{ 
  struct tty_struct *tty ;
  int baud ;
  unsigned int cflag ;
  unsigned int iflag ;
  __u8 lData ;
  __u8 lParity ;
  __u8 lStop ;
  int status ;
  __u16 Data ;
  struct usb_serial_port *port ;
  struct usb_serial *serial ;
  int tmp ;
  int tmp___0 ;
  speed_t tmp___1 ;

  {
#line 1969
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 1970
    return;
  } else {

  }
#line 1972
  port = mos7840_port->port;
#line 1974
  tmp = mos7840_port_paranoia_check(port, "mos7840_change_port_settings");
#line 1974
  if (tmp) {
#line 1975
    while (1) {
#line 1975
      if (debug) {
#line 1975
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 1975
      break;
    }
#line 1976
    return;
  } else {

  }
#line 1979
  tmp___0 = mos7840_serial_paranoia_check(port->serial, "mos7840_change_port_settings");
#line 1979
  if (tmp___0) {
#line 1980
    while (1) {
#line 1980
      if (debug) {
#line 1980
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Invalid Serial \n");
      } else {

      }
#line 1980
      break;
    }
#line 1981
    return;
  } else {

  }
#line 1984
  serial = port->serial;
#line 1986
  while (1) {
#line 1986
    if (debug) {
#line 1986
      printk("<7>%s: %s - port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_change_port_settings", (mos7840_port->port)->number);
    } else {

    }
#line 1986
    break;
  }
#line 1988
  if (! mos7840_port->open) {
#line 1989
    while (1) {
#line 1989
      if (debug) {
#line 1989
        printk("<7>%s: %s - port not opened\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "mos7840_change_port_settings");
      } else {

      }
#line 1989
      break;
    }
#line 1990
    return;
  } else {

  }
#line 1993
  tty = (mos7840_port->port)->tty;
#line 1995
  while (1) {
#line 1995
    if (debug) {
#line 1995
      printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "Entering .......... \n");
    } else {

    }
#line 1995
    break;
  }
#line 1997
  lData = 3;
#line 1998
  lStop = 0;
#line 1999
  lParity = 0;
#line 2001
  cflag = (tty->termios)->c_cflag;
#line 2002
  iflag = (tty->termios)->c_iflag;
#line 2005
  if (cflag & 48U) {
#line 2006
    switch (cflag & 48U) {
    case 0U: 
#line 2008
    lData = 0;
#line 2009
    break;
    case 16U: 
#line 2012
    lData = 1;
#line 2013
    break;
    case 32U: 
#line 2016
    lData = 2;
#line 2017
    break;
    default: 
#line 2020
    lData = 3;
#line 2021
    break;
    }
  } else {

  }
#line 2025
  if (cflag & 256U) {
#line 2026
    if (cflag & 512U) {
#line 2027
      lParity = 8;
#line 2028
      while (1) {
#line 2028
        if (debug) {
#line 2028
          printk("<7>%s: %s - parity = odd\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 "mos7840_change_port_settings");
        } else {

        }
#line 2028
        break;
      }
    } else {
#line 2030
      lParity = 24;
#line 2031
      while (1) {
#line 2031
        if (debug) {
#line 2031
          printk("<7>%s: %s - parity = even\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 "mos7840_change_port_settings");
        } else {

        }
#line 2031
        break;
      }
    }
  } else {
#line 2035
    while (1) {
#line 2035
      if (debug) {
#line 2035
        printk("<7>%s: %s - parity = none\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "mos7840_change_port_settings");
      } else {

      }
#line 2035
      break;
    }
  }
#line 2038
  if (cflag & 1073741824U) {
#line 2039
    lParity = (int )lParity | 32;
  } else {

  }
#line 2043
  if (cflag & 64U) {
#line 2044
    lStop = 4;
#line 2045
    while (1) {
#line 2045
      if (debug) {
#line 2045
        printk("<7>%s: %s - stop bits = 2\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "mos7840_change_port_settings");
      } else {

      }
#line 2045
      break;
    }
  } else {
#line 2047
    lStop = 0;
#line 2048
    while (1) {
#line 2048
      if (debug) {
#line 2048
        printk("<7>%s: %s - stop bits = 1\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "mos7840_change_port_settings");
      } else {

      }
#line 2048
      break;
    }
  }
#line 2052
  mos7840_port->shadowLCR = (int )mos7840_port->shadowLCR & ~ ((3 | 4) | 56);
#line 2054
  mos7840_port->shadowLCR = (int )mos7840_port->shadowLCR | (((int )lData | (int )lParity) | (int )lStop);
#line 2056
  while (1) {
#line 2056
    if (debug) {
#line 2056
      printk("<7>%s: mos7840_change_port_settings mos7840_port->shadowLCR is %x\n\n",
             "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             mos7840_port->shadowLCR);
    } else {

    }
#line 2056
    break;
  }
#line 2059
  Data = 0;
#line 2060
  mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 2062
  Data = 0;
#line 2063
  mos7840_set_uart_reg(port, (__u16 )2, Data);
#line 2065
  Data = 207;
#line 2066
  mos7840_set_uart_reg(port, (__u16 )2, Data);
#line 2069
  Data = mos7840_port->shadowLCR;
#line 2071
  mos7840_set_uart_reg(port, (__u16 )3, Data);
#line 2073
  Data = 11;
#line 2074
  mos7840_port->shadowMCR = Data;
#line 2075
  mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 2076
  Data = 11;
#line 2077
  mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 2081
  mos7840_port->shadowMCR = 8;
#line 2082
  if (cflag & 4111U) {
#line 2083
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR | (1 | 2);
  } else {

  }
#line 2086
  if (cflag & 2147483648U) {
#line 2087
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR | 32;
  } else {
#line 2090
    mos7840_port->shadowMCR = (int )mos7840_port->shadowMCR & ~ 32;
  }
#line 2093
  Data = mos7840_port->shadowMCR;
#line 2094
  mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 2097
  tmp___1 = tty_get_baud_rate(tty);
#line 2097
  baud = tmp___1;
#line 2099
  if (! baud) {
#line 2101
    while (1) {
#line 2101
      if (debug) {
#line 2101
        printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Picked default baud...");
      } else {

      }
#line 2101
      break;
    }
#line 2102
    baud = 9600;
  } else {

  }
#line 2105
  while (1) {
#line 2105
    if (debug) {
#line 2105
      printk("<7>%s: %s - baud rate = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_change_port_settings", baud);
    } else {

    }
#line 2105
    break;
  }
#line 2106
  status = mos7840_send_cmd_write_baud_rate(mos7840_port, baud);
#line 2109
  Data = 12;
#line 2110
  mos7840_set_uart_reg(port, (__u16 )1, Data);
#line 2112
  if ((mos7840_port->read_urb)->status != -115) {
#line 2113
    (mos7840_port->read_urb)->dev = serial->dev;
#line 2115
    status = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 2117
    if (status) {
#line 2118
      while (1) {
#line 2118
        if (debug) {
#line 2118
          printk("<7>%s:  usb_submit_urb(read bulk) failed, status = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2118
        break;
      }
    } else {

    }
  } else {

  }
#line 2122
  __wake_up(& mos7840_port->delta_msr_wait, 1 | 2, 1, (void *)0);
#line 2123
  mos7840_port->delta_msr_cond = 1;
#line 2124
  while (1) {
#line 2124
    if (debug) {
#line 2124
      printk("<7>%s: mos7840_change_port_settings mos7840_port->shadowLCR is End %x\n\n",
             "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             mos7840_port->shadowLCR);
    } else {

    }
#line 2124
    break;
  }
#line 2127
  return;
}
}
#line 2136 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_set_termios(struct usb_serial_port *port , struct ktermios *old_termios ) 
{ 
  int status ;
  unsigned int cflag ;
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  struct tty_struct *tty ;
  int tmp ;
  int tmp___0 ;

  {
#line 2144
  while (1) {
#line 2144
    if (debug) {
#line 2144
      printk("<7>%s: mos7840_set_termios: START\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
    } else {

    }
#line 2144
    break;
  }
#line 2145
  tmp = mos7840_port_paranoia_check(port, "mos7840_set_termios");
#line 2145
  if (tmp) {
#line 2146
    while (1) {
#line 2146
      if (debug) {
#line 2146
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 2146
      break;
    }
#line 2147
    return;
  } else {

  }
#line 2150
  serial = port->serial;
#line 2152
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_set_termios");
#line 2152
  if (tmp___0) {
#line 2153
    while (1) {
#line 2153
      if (debug) {
#line 2153
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Invalid Serial \n");
      } else {

      }
#line 2153
      break;
    }
#line 2154
    return;
  } else {

  }
#line 2157
  mos7840_port = mos7840_get_port_private(port);
#line 2159
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2160
    return;
  } else {

  }
#line 2162
  tty = port->tty;
#line 2164
  if (! mos7840_port->open) {
#line 2165
    while (1) {
#line 2165
      if (debug) {
#line 2165
        printk("<7>%s: %s - port not opened\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "mos7840_set_termios");
      } else {

      }
#line 2165
      break;
    }
#line 2166
    return;
  } else {

  }
#line 2169
  while (1) {
#line 2169
    if (debug) {
#line 2169
      printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "setting termios - ");
    } else {

    }
#line 2169
    break;
  }
#line 2171
  cflag = (tty->termios)->c_cflag;
#line 2173
  while (1) {
#line 2173
    if (debug) {
#line 2173
      printk("<7>%s: %s - clfag %08x iflag %08x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_set_termios", (tty->termios)->c_cflag, (tty->termios)->c_iflag & (unsigned int )((((1 | 2) | 4) | 8) | 16));
    } else {

    }
#line 2173
    break;
  }
#line 2175
  while (1) {
#line 2175
    if (debug) {
#line 2175
      printk("<7>%s: %s - old clfag %08x old iflag %08x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_set_termios", old_termios->c_cflag, old_termios->c_iflag & (unsigned int )((((1 | 2) | 4) | 8) | 16));
    } else {

    }
#line 2175
    break;
  }
#line 2177
  while (1) {
#line 2177
    if (debug) {
#line 2177
      printk("<7>%s: %s - port %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_set_termios", port->number);
    } else {

    }
#line 2177
    break;
  }
#line 2181
  mos7840_change_port_settings(mos7840_port, old_termios);
#line 2183
  if (! mos7840_port->read_urb) {
#line 2184
    while (1) {
#line 2184
      if (debug) {
#line 2184
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "URB KILLED !!!!!\n");
      } else {

      }
#line 2184
      break;
    }
#line 2185
    return;
  } else {

  }
#line 2188
  if ((mos7840_port->read_urb)->status != -115) {
#line 2189
    (mos7840_port->read_urb)->dev = serial->dev;
#line 2190
    status = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 2191
    if (status) {
#line 2192
      while (1) {
#line 2192
        if (debug) {
#line 2192
          printk("<7>%s:  usb_submit_urb(read bulk) failed, status = %d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2192
        break;
      }
    } else {

    }
  } else {

  }
#line 2196
  return;
}
}
#line 2210 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_lsr_info(struct moschip_port *mos7840_port , unsigned int *value ) 
{ 
  int count ;
  unsigned int result ;
  unsigned long tmp ;

  {
#line 2214
  result = 0;
#line 2216
  count = mos7840_chars_in_buffer(mos7840_port->port);
#line 2217
  if (count == 0) {
#line 2218
    while (1) {
#line 2218
      if (debug) {
#line 2218
        printk("<7>%s: %s -- Empty\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "mos7840_get_lsr_info");
      } else {

      }
#line 2218
      break;
    }
#line 2219
    result = 1;
  } else {

  }
#line 2222
  tmp = copy_to_user(value, & result, sizeof(int ));
#line 2222
  if (tmp) {
#line 2223
    return (-14);
  } else {

  }
#line 2224
  return (0);
}
}
#line 2232 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_set_modem_info(struct moschip_port *mos7840_port , unsigned int cmd ,
                                  unsigned int *value ) 
{ 
  unsigned int mcr ;
  unsigned int arg ;
  __u16 Data ;
  int status ;
  struct usb_serial_port *port ;
  int tmp ;
  unsigned long tmp___0 ;

  {
#line 2241
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2242
    return (-1);
  } else {

  }
#line 2244
  port = mos7840_port->port;
#line 2245
  tmp = mos7840_port_paranoia_check(port, "mos7840_set_modem_info");
#line 2245
  if (tmp) {
#line 2246
    while (1) {
#line 2246
      if (debug) {
#line 2246
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 2246
      break;
    }
#line 2247
    return (-1);
  } else {

  }
#line 2250
  mcr = mos7840_port->shadowMCR;
#line 2252
  tmp___0 = copy_from_user(& arg, value, sizeof(int ));
#line 2252
  if (tmp___0) {
#line 2253
    return (-14);
  } else {

  }
#line 2255
  switch (cmd) {
  case 21526U: 
#line 2257
  if (arg & 4U) {
#line 2258
    mcr = mcr | 2U;
  } else {

  }
#line 2259
  if (arg & 2U) {
#line 2260
    mcr = mcr | 2U;
  } else {

  }
#line 2261
  if (arg & 32768U) {
#line 2262
    mcr = mcr | 16U;
  } else {

  }
#line 2263
  break;
  case 21527U: 
#line 2266
  if (arg & 4U) {
#line 2267
    mcr = mcr & (unsigned int )(~ 2);
  } else {

  }
#line 2268
  if (arg & 2U) {
#line 2269
    mcr = mcr & (unsigned int )(~ 2);
  } else {

  }
#line 2270
  if (arg & 32768U) {
#line 2271
    mcr = mcr & (unsigned int )(~ 16);
  } else {

  }
#line 2272
  break;
  case 21528U: 
#line 2277
  mcr = mcr & (unsigned int )(~ ((2 | 1) | 16));
#line 2278
  mcr = mcr | (unsigned int )(arg & 4U ? 2 : 0);
#line 2279
  mcr = mcr | (unsigned int )(arg & 2U ? 1 : 0);
#line 2280
  mcr = mcr | (unsigned int )(arg & 32768U ? 16 : 0);
#line 2281
  break;
  }
#line 2284
  mos7840_port->shadowMCR = mcr;
#line 2286
  Data = mos7840_port->shadowMCR;
#line 2287
  status = 0;
#line 2288
  status = mos7840_set_uart_reg(port, (__u16 )4, Data);
#line 2289
  if (status < 0) {
#line 2290
    while (1) {
#line 2290
      if (debug) {
#line 2290
        printk("<7>%s: setting MODEM_CONTROL_REGISTER Failed\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c");
      } else {

      }
#line 2290
      break;
    }
#line 2291
    return (-1);
  } else {

  }
#line 2294
  return (0);
}
}
#line 2302 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_modem_info(struct moschip_port *mos7840_port , unsigned int *value ) 
{ 
  unsigned int result ;
  __u16 msr ;
  unsigned int mcr ;
  int status ;
  unsigned long tmp ;

  {
#line 2305
  result = 0;
#line 2307
  mcr = mos7840_port->shadowMCR;
#line 2308
  status = 0;
#line 2309
  status = mos7840_get_uart_reg(mos7840_port->port, (__u16 )6, & msr);
#line 2312
  result = (((((mcr & 1U ? 2 : 0) | (mcr & 2U ? 4 : 0)) | ((int )msr & 16 ? 32 : 0)) | ((int )msr & 128 ? 64 : 0)) | ((int )msr & 64 ? 128 : 0)) | ((int )msr & 32 ? 256 : 0);
#line 2319
  while (1) {
#line 2319
    if (debug) {
#line 2319
      printk("<7>%s: %s -- %x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_get_modem_info", result);
    } else {

    }
#line 2319
    break;
  }
#line 2321
  tmp = copy_to_user(value, & result, sizeof(int ));
#line 2321
  if (tmp) {
#line 2322
    return (-14);
  } else {

  }
#line 2323
  return (0);
}
}
#line 2331 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_get_serial_info(struct moschip_port *mos7840_port , struct serial_struct *retinfo ) 
{ 
  struct serial_struct tmp ;
  unsigned long tmp___0 ;

  {
#line 2336
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2337
    return (-1);
  } else {

  }
#line 2339
  if (! retinfo) {
#line 2340
    return (-14);
  } else {

  }
#line 2342
  memset(& tmp, 0, sizeof(tmp));
#line 2344
  tmp.type = 4;
#line 2345
  tmp.line = ((mos7840_port->port)->serial)->minor;
#line 2346
  tmp.port = (mos7840_port->port)->number;
#line 2347
  tmp.irq = 0;
#line 2348
  tmp.flags = 64 | 128;
#line 2349
  tmp.xmit_fifo_size = 16 * 32;
#line 2350
  tmp.baud_base = 9600;
#line 2351
  tmp.close_delay = 5 * 250;
#line 2352
  tmp.closing_wait = 30 * 250;
#line 2354
  tmp___0 = copy_to_user(retinfo, & tmp, sizeof(*retinfo));
#line 2354
  if (tmp___0) {
#line 2355
    return (-14);
  } else {

  }
#line 2356
  return (0);
}
}
#line 2364 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_ioctl(struct usb_serial_port *port , struct file *file , unsigned int cmd ,
                         unsigned long arg ) 
{ 
  void *argp ;
  struct moschip_port *mos7840_port ;
  struct tty_struct *tty ;
  struct async_icount cnow ;
  struct async_icount cprev ;
  struct serial_icounter_struct icount ;
  int mosret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  unsigned long tmp___8 ;

  {
#line 2367
  argp = (void *)arg;
#line 2374
  mosret = 0;
#line 2376
  tmp = mos7840_port_paranoia_check(port, "mos7840_ioctl");
#line 2376
  if (tmp) {
#line 2377
    while (1) {
#line 2377
      if (debug) {
#line 2377
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Invalid port \n");
      } else {

      }
#line 2377
      break;
    }
#line 2378
    return (-1);
  } else {

  }
#line 2381
  mos7840_port = mos7840_get_port_private(port);
#line 2383
  if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2384
    return (-1);
  } else {

  }
#line 2386
  tty = (mos7840_port->port)->tty;
#line 2388
  while (1) {
#line 2388
    if (debug) {
#line 2388
      printk("<7>%s: %s - port %d, cmd = 0x%x\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number, cmd);
    } else {

    }
#line 2388
    break;
  }
#line 2390
  switch (cmd) {
  case 21593U: 
#line 2394
  while (1) {
#line 2394
    if (debug) {
#line 2394
      printk("<7>%s: %s (%d) TIOCSERGETLSR\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2394
    break;
  }
#line 2395
  tmp___0 = mos7840_get_lsr_info(mos7840_port, argp);
#line 2395
  return (tmp___0);
#line 2396
  return (0);
  case 21528U: 
  case 21527U: 
  case 21526U: 
#line 2401
  while (1) {
#line 2401
    if (debug) {
#line 2401
      printk("<7>%s: %s (%d) TIOCMSET/TIOCMBIC/TIOCMSET\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2401
    break;
  }
#line 2403
  mosret = mos7840_set_modem_info(mos7840_port, cmd, argp);
#line 2405
  return (mosret);
  case 21525U: 
#line 2408
  while (1) {
#line 2408
    if (debug) {
#line 2408
      printk("<7>%s: %s (%d) TIOCMGET\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2408
    break;
  }
#line 2409
  tmp___1 = mos7840_get_modem_info(mos7840_port, argp);
#line 2409
  return (tmp___1);
  case 21534U: 
#line 2412
  while (1) {
#line 2412
    if (debug) {
#line 2412
      printk("<7>%s: %s (%d) TIOCGSERIAL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2412
    break;
  }
#line 2413
  tmp___2 = mos7840_get_serial_info(mos7840_port, argp);
#line 2413
  return (tmp___2);
  case 21535U: 
#line 2416
  while (1) {
#line 2416
    if (debug) {
#line 2416
      printk("<7>%s: %s (%d) TIOCSSERIAL\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2416
    break;
  }
#line 2417
  break;
  case 21596U: 
#line 2420
  while (1) {
#line 2420
    if (debug) {
#line 2420
      printk("<7>%s: %s (%d) TIOCMIWAIT\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number);
    } else {

    }
#line 2420
    break;
  }
#line 2421
  cprev = mos7840_port->icount;
#line 2422
  while (1) {
#line 2424
    mos7840_port->delta_msr_cond = 0;
#line 2425
    __ret = 0;
#line 2425
    if (! (mos7840_port->delta_msr_cond == 1)) {
#line 2425
      while (1) {
#line 2425
        tmp___3 = get_current();
#line 2425
        __wait.flags = 0U;
#line 2425
        __wait.private = tmp___3;
#line 2425
        __wait.func = & autoremove_wake_function;
#line 2425
        __wait.task_list.next = & __wait.task_list;
#line 2425
        __wait.task_list.prev = & __wait.task_list;
#line 2425
        while (1) {
#line 2425
          prepare_to_wait(& mos7840_port->delta_msr_wait, & __wait, 1);
#line 2425
          if (mos7840_port->delta_msr_cond == 1) {
#line 2425
            break;
          } else {

          }
#line 2425
          tmp___4 = get_current();
#line 2425
          tmp___5 = signal_pending(tmp___4);
#line 2425
          if (tmp___5) {

          } else {
#line 2425
            schedule();
#line 2425
            goto __Cont;
          }
#line 2425
          __ret = -512;
#line 2425
          break;
          __Cont: /* CIL Label */ ;
        }
#line 2425
        finish_wait(& mos7840_port->delta_msr_wait, & __wait);
#line 2425
        break;
      }
    } else {

    }
#line 2430
    tmp___6 = get_current();
#line 2430
    tmp___7 = signal_pending(tmp___6);
#line 2430
    if (tmp___7) {
#line 2431
      return (-512);
    } else {

    }
#line 2432
    cnow = mos7840_port->icount;
#line 2433
    __asm__  volatile   ("": : : "memory");
#line 2434
    if (((cnow.rng == cprev.rng && cnow.dsr == cprev.dsr) && cnow.dcd == cprev.dcd) && cnow.cts == cprev.cts) {
#line 2436
      return (-5);
    } else {

    }
#line 2437
    if ((((arg & 128UL && cnow.rng != cprev.rng) || (arg & 256UL && cnow.dsr != cprev.dsr)) || (arg & 64UL && cnow.dcd != cprev.dcd)) || (arg & 32UL && cnow.cts != cprev.cts)) {
#line 2441
      return (0);
    } else {

    }
#line 2443
    cprev = cnow;
  }
#line 2446
  break;
  case 21597U: 
#line 2449
  cnow = mos7840_port->icount;
#line 2450
  __asm__  volatile   ("": : : "memory");
#line 2451
  icount.cts = cnow.cts;
#line 2452
  icount.dsr = cnow.dsr;
#line 2453
  icount.rng = cnow.rng;
#line 2454
  icount.dcd = cnow.dcd;
#line 2455
  icount.rx = cnow.rx;
#line 2456
  icount.tx = cnow.tx;
#line 2457
  icount.frame = cnow.frame;
#line 2458
  icount.overrun = cnow.overrun;
#line 2459
  icount.parity = cnow.parity;
#line 2460
  icount.brk = cnow.brk;
#line 2461
  icount.buf_overrun = cnow.buf_overrun;
#line 2463
  while (1) {
#line 2463
    if (debug) {
#line 2463
      printk("<7>%s: %s (%d) TIOCGICOUNT RX=%d, TX=%d\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "mos7840_ioctl", port->number, icount.rx, icount.tx);
    } else {

    }
#line 2463
    break;
  }
#line 2465
  tmp___8 = copy_to_user(argp, & icount, sizeof(icount));
#line 2465
  if (tmp___8) {
#line 2466
    return (-14);
  } else {

  }
#line 2467
  return (0);
  case 21602U: 
#line 2470
  return (0);
  default: 
#line 2472
  break;
  }
#line 2475
  return (-515);
}
}
#line 2478 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_calc_num_ports(struct usb_serial *serial ) 
{ 
  int mos7840_num_ports ;
  unsigned char tmp ;
  unsigned char tmp___0 ;

  {
#line 2480
  mos7840_num_ports = 0;
#line 2482
  while (1) {
#line 2482
    if (debug) {
#line 2482
      printk("<7>%s: numberofendpoints: %d \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             (int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints);
    } else {

    }
#line 2482
    break;
  }
#line 2484
  while (1) {
#line 2484
    if (debug) {
#line 2484
      printk("<7>%s: numberofendpoints: %d \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             (int )((serial->interface)->altsetting)->desc.bNumEndpoints);
    } else {

    }
#line 2484
    break;
  }
#line 2486
  if ((int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints == 5) {
#line 2487
    tmp = 2;
#line 2487
    serial->num_ports = tmp;
#line 2487
    mos7840_num_ports = tmp;
  } else
#line 2488
  if ((int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints == 9) {
#line 2489
    serial->num_bulk_in = 4;
#line 2490
    serial->num_bulk_out = 4;
#line 2491
    tmp___0 = 4;
#line 2491
    serial->num_ports = tmp___0;
#line 2491
    mos7840_num_ports = tmp___0;
  } else {

  }
#line 2494
  return (mos7840_num_ports);
}
}
#line 2537 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static struct lock_class_key __key___1  ;
#line 2501 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int mos7840_startup(struct usb_serial *serial ) 
{ 
  struct moschip_port *mos7840_port ;
  struct usb_device *dev ;
  int i ;
  int status ;
  __u16 Data ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 2508
  while (1) {
#line 2508
    if (debug) {
#line 2508
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             " mos7840_startup :entering..........");
    } else {

    }
#line 2508
    break;
  }
#line 2510
  if (! serial) {
#line 2511
    while (1) {
#line 2511
      if (debug) {
#line 2511
        printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Invalid Handler");
      } else {

      }
#line 2511
      break;
    }
#line 2512
    return (-1);
  } else {

  }
#line 2515
  dev = serial->dev;
#line 2517
  while (1) {
#line 2517
    if (debug) {
#line 2517
      printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "Entering...");
    } else {

    }
#line 2517
    break;
  }
#line 2523
  i = 0;
#line 2523
  while (1) {
#line 2523
    if (i < (int )serial->num_ports) {

    } else {
#line 2523
      break;
    }
#line 2524
    tmp = kzalloc(sizeof(struct moschip_port ), (16U | 64U) | 128U);
#line 2524
    mos7840_port = tmp;
#line 2525
    if ((unsigned long )mos7840_port == (unsigned long )((void *)0)) {
#line 2526
      printk("<3>mos7840: %s - Out of memory\n", "mos7840_startup");
#line 2527
      status = -12;
#line 2528
      i = i - 1;
#line 2529
      goto error;
    } else {

    }
#line 2535
    mos7840_port->port = serial->port[i];
#line 2536
    mos7840_set_port_private(serial->port[i], mos7840_port);
#line 2537
    while (1) {
#line 2537
      __spin_lock_init(& mos7840_port->pool_lock, "&mos7840_port->pool_lock", & __key___1);
#line 2537
      break;
    }
#line 2539
    mos7840_port->port_num = ((int )(serial->port[i])->number - (int )((serial->port[i])->serial)->minor) + 1;
#line 2543
    if (mos7840_port->port_num == 1) {
#line 2544
      mos7840_port->SpRegOffset = 0;
#line 2545
      mos7840_port->ControlRegOffset = 1;
#line 2546
      mos7840_port->DcrRegOffset = 4;
    } else
#line 2547
    if (mos7840_port->port_num == 2 && (int )serial->num_ports == 4) {
#line 2549
      mos7840_port->SpRegOffset = 8;
#line 2550
      mos7840_port->ControlRegOffset = 9;
#line 2551
      mos7840_port->DcrRegOffset = 22;
    } else
#line 2552
    if (mos7840_port->port_num == 2 && (int )serial->num_ports == 2) {
#line 2554
      mos7840_port->SpRegOffset = 10;
#line 2555
      mos7840_port->ControlRegOffset = 11;
#line 2556
      mos7840_port->DcrRegOffset = 25;
    } else
#line 2557
    if (mos7840_port->port_num == 3 && (int )serial->num_ports == 4) {
#line 2559
      mos7840_port->SpRegOffset = 10;
#line 2560
      mos7840_port->ControlRegOffset = 11;
#line 2561
      mos7840_port->DcrRegOffset = 25;
    } else
#line 2562
    if (mos7840_port->port_num == 4 && (int )serial->num_ports == 4) {
#line 2564
      mos7840_port->SpRegOffset = 12;
#line 2565
      mos7840_port->ControlRegOffset = 13;
#line 2566
      mos7840_port->DcrRegOffset = 28;
    } else {

    }
#line 2568
    mos7840_dump_serial_port(mos7840_port);
#line 2570
    mos7840_set_port_private(serial->port[i], mos7840_port);
#line 2574
    status = mos7840_get_reg_sync(serial->port[i], mos7840_port->ControlRegOffset,
                                  & Data);
#line 2577
    if (status < 0) {
#line 2578
      while (1) {
#line 2578
        if (debug) {
#line 2578
          printk("<7>%s: Reading ControlReg failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2578
        break;
      }
#line 2579
      break;
    } else {
#line 2581
      while (1) {
#line 2581
        if (debug) {
#line 2581
          printk("<7>%s: ControlReg Reading success val is %x, status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 Data, status);
        } else {

        }
#line 2581
        break;
      }
    }
#line 2583
    Data = (int )Data | 8;
#line 2584
    Data = (int )Data | 4;
#line 2587
    status = 0;
#line 2588
    status = mos7840_set_reg_sync(serial->port[i], mos7840_port->ControlRegOffset,
                                  Data);
#line 2591
    if (status < 0) {
#line 2592
      while (1) {
#line 2592
        if (debug) {
#line 2592
          printk("<7>%s: Writing ControlReg failed(rx_disable) status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2592
        break;
      }
#line 2593
      break;
    } else {
#line 2595
      while (1) {
#line 2595
        if (debug) {
#line 2595
          printk("<7>%s: ControlReg Writing success(rx_disable) status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2595
        break;
      }
    }
#line 2599
    Data = 1;
#line 2600
    status = 0;
#line 2601
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )((int )mos7840_port->DcrRegOffset + 0),
                                  Data);
#line 2605
    if (status < 0) {
#line 2606
      while (1) {
#line 2606
        if (debug) {
#line 2606
          printk("<7>%s: Writing DCR0 failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2606
        break;
      }
#line 2607
      break;
    } else {
#line 2609
      while (1) {
#line 2609
        if (debug) {
#line 2609
          printk("<7>%s: DCR0 Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2609
        break;
      }
    }
#line 2611
    Data = 5;
#line 2612
    status = 0;
#line 2613
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )((int )mos7840_port->DcrRegOffset + 1),
                                  Data);
#line 2617
    if (status < 0) {
#line 2618
      while (1) {
#line 2618
        if (debug) {
#line 2618
          printk("<7>%s: Writing DCR1 failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2618
        break;
      }
#line 2619
      break;
    } else {
#line 2621
      while (1) {
#line 2621
        if (debug) {
#line 2621
          printk("<7>%s: DCR1 Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2621
        break;
      }
    }
#line 2623
    Data = 36;
#line 2624
    status = 0;
#line 2625
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )((int )mos7840_port->DcrRegOffset + 2),
                                  Data);
#line 2629
    if (status < 0) {
#line 2630
      while (1) {
#line 2630
        if (debug) {
#line 2630
          printk("<7>%s: Writing DCR2 failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2630
        break;
      }
#line 2631
      break;
    } else {
#line 2633
      while (1) {
#line 2633
        if (debug) {
#line 2633
          printk("<7>%s: DCR2 Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2633
        break;
      }
    }
#line 2636
    Data = 0;
#line 2637
    status = 0;
#line 2638
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )3, Data);
#line 2641
    if (status < 0) {
#line 2642
      while (1) {
#line 2642
        if (debug) {
#line 2642
          printk("<7>%s: Writing CLK_START_VALUE_REGISTER failed status-0x%x\n\n",
                 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2642
        break;
      }
#line 2643
      break;
    } else {
#line 2645
      while (1) {
#line 2645
        if (debug) {
#line 2645
          printk("<7>%s: CLK_START_VALUE_REGISTER Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2645
        break;
      }
    }
#line 2647
    Data = 32;
#line 2648
    status = mos7840_set_reg_sync(serial->port[i], (__u16 )2, Data);
#line 2651
    if (status < 0) {
#line 2652
      while (1) {
#line 2652
        if (debug) {
#line 2652
          printk("<7>%s: Writing CLK_MULTI_REGISTER failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2652
        break;
      }
#line 2654
      goto error;
    } else {
#line 2656
      while (1) {
#line 2656
        if (debug) {
#line 2656
          printk("<7>%s: CLK_MULTI_REGISTER Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2656
        break;
      }
    }
#line 2660
    Data = 0;
#line 2661
    status = mos7840_set_uart_reg(serial->port[i], (__u16 )7, Data);
#line 2664
    if (status < 0) {
#line 2665
      while (1) {
#line 2665
        if (debug) {
#line 2665
          printk("<7>%s: Writing SCRATCH_PAD_REGISTER failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2665
        break;
      }
#line 2667
      break;
    } else {
#line 2669
      while (1) {
#line 2669
        if (debug) {
#line 2669
          printk("<7>%s: SCRATCH_PAD_REGISTER Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 status);
        } else {

        }
#line 2669
        break;
      }
    }
#line 2673
    if (mos7840_port->port_num != 1 && (int )serial->num_ports == 2) {
#line 2676
      Data = 255;
#line 2677
      status = 0;
#line 2678
      status = mos7840_set_reg_sync(serial->port[i], (__u16 )(58 + (int )((__u16 )mos7840_port->port_num)),
                                    Data);
#line 2684
      while (1) {
#line 2684
        if (debug) {
#line 2684
          printk("<7>%s: ZLIP offset%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 (__u16 )(58 + (int )((__u16 )mos7840_port->port_num)));
        } else {

        }
#line 2684
        break;
      }
#line 2687
      if (status < 0) {
#line 2688
        while (1) {
#line 2688
          if (debug) {
#line 2688
            printk("<7>%s: Writing ZLP_REG%d failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                   i + 2, status);
          } else {

          }
#line 2688
          break;
        }
#line 2690
        break;
      } else {
#line 2692
        while (1) {
#line 2692
          if (debug) {
#line 2692
            printk("<7>%s: ZLP_REG%d Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                   i + 2, status);
          } else {

          }
#line 2692
          break;
        }
      }
    } else {
#line 2695
      Data = 255;
#line 2696
      status = 0;
#line 2697
      status = mos7840_set_reg_sync(serial->port[i], (__u16 )((58 + (int )((__u16 )mos7840_port->port_num)) - 1),
                                    Data);
#line 2703
      while (1) {
#line 2703
        if (debug) {
#line 2703
          printk("<7>%s: ZLIP offset%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                 (__u16 )((58 + (int )((__u16 )mos7840_port->port_num)) - 1));
        } else {

        }
#line 2703
        break;
      }
#line 2706
      if (status < 0) {
#line 2707
        while (1) {
#line 2707
          if (debug) {
#line 2707
            printk("<7>%s: Writing ZLP_REG%d failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                   i + 1, status);
          } else {

          }
#line 2707
          break;
        }
#line 2709
        break;
      } else {
#line 2711
        while (1) {
#line 2711
          if (debug) {
#line 2711
            printk("<7>%s: ZLP_REG%d Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
                   i + 1, status);
          } else {

          }
#line 2711
          break;
        }
      }
    }
#line 2715
    mos7840_port->control_urb = usb_alloc_urb(0, (16U | 64U) | 128U);
#line 2716
    tmp___0 = kmalloc(16, (16U | 64U) | 128U);
#line 2716
    mos7840_port->ctrl_buf = tmp___0;
#line 2717
    tmp___1 = kmalloc(sizeof(struct usb_ctrlrequest ), (16U | 64U) | 128U);
#line 2717
    mos7840_port->dr = tmp___1;
#line 2718
    if ((! mos7840_port->control_urb || ! mos7840_port->ctrl_buf) || ! mos7840_port->dr) {
#line 2719
      status = -12;
#line 2720
      goto error;
    } else {

    }
#line 2523
    i = i + 1;
  }
#line 2725
  Data = 15;
#line 2726
  status = mos7840_set_reg_sync(serial->port[0], 62, Data);
#line 2727
  if (status < 0) {
#line 2728
    while (1) {
#line 2728
      if (debug) {
#line 2728
        printk("<7>%s: Writing ZLP_REG5 failed status-0x%x\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               status);
      } else {

      }
#line 2728
      break;
    }
#line 2729
    goto error;
  } else {
#line 2731
    while (1) {
#line 2731
      if (debug) {
#line 2731
        printk("<7>%s: ZLP_REG5 Writing success status%d\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               status);
      } else {

      }
#line 2731
      break;
    }
  }
#line 2734
  tmp___2 = __create_pipe(serial->dev, 0);
#line 2734
  usb_control_msg(serial->dev, (unsigned int )(2 << 30) | tmp___2, (__u8 )3, 0, 1,
                  0, (void *)0, 0, 5 * 250);
#line 2736
  return (0);
  error: 
#line 2738
  while (1) {
#line 2738
    if (i >= 0) {

    } else {
#line 2738
      break;
    }
#line 2739
    mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 2741
    kfree(mos7840_port->dr);
#line 2742
    kfree(mos7840_port->ctrl_buf);
#line 2743
    usb_free_urb(mos7840_port->control_urb);
#line 2744
    kfree(mos7840_port);
#line 2745
    serial->port[i] = (void *)0;
#line 2738
    i = i - 1;
  }
#line 2747
  return (status);
}
}
#line 2755 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void mos7840_shutdown(struct usb_serial *serial ) 
{ 
  int i ;
  unsigned long flags ;
  struct moschip_port *mos7840_port ;

  {
#line 2760
  while (1) {
#line 2760
    if (debug) {
#line 2760
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             " shutdown :entering..........");
    } else {

    }
#line 2760
    break;
  }
#line 2762
  if (! serial) {
#line 2763
    while (1) {
#line 2763
      if (debug) {
#line 2763
        printk("<7>%s: %s\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Invalid Handler \n");
      } else {

      }
#line 2763
      break;
    }
#line 2764
    return;
  } else {

  }
#line 2772
  i = 0;
#line 2772
  while (1) {
#line 2772
    if (i < (int )serial->num_ports) {

    } else {
#line 2772
      break;
    }
#line 2773
    mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 2774
    flags = _spin_lock_irqsave(& mos7840_port->pool_lock);
#line 2775
    mos7840_port->zombie = 1;
#line 2776
    _spin_unlock_irqrestore(& mos7840_port->pool_lock, flags);
#line 2777
    usb_kill_urb(mos7840_port->control_urb);
#line 2778
    kfree(mos7840_port->ctrl_buf);
#line 2779
    kfree(mos7840_port->dr);
#line 2780
    kfree(mos7840_port);
#line 2781
    mos7840_set_port_private(serial->port[i], (void *)0);
#line 2772
    i = i + 1;
  }
#line 2784
  while (1) {
#line 2784
    if (debug) {
#line 2784
      printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "Thank u :: ");
    } else {

    }
#line 2784
    break;
  }
#line 2786
  return;
}
}
#line 2788 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static struct usb_driver io_driver  = 
#line 2788
     {"mos7840", & usb_serial_probe, & usb_serial_disconnect, 0, 0, 0, 0, 0, 0, moschip_id_table_combined,
    {{{0U}, 0U, 0U, 0}, {0, 0}}, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0}, 1, 0U};
#line 2796 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static struct usb_serial_driver moschip7840_4port_device  = 
#line 2796
     {"Moschip 7840/7820 USB Serial Driver", moschip_port_id_table, 4, {0, 0}, {"mos7840",
                                                                              0, & __this_module,
                                                                              0, 0,
                                                                              0, 0,
                                                                              0, 0,
                                                                              0, 0},
    & io_driver, {{{0U}, 0U, 0U, 0}, {0, 0}}, 0, & mos7840_startup, & mos7840_calc_num_ports,
    & mos7840_shutdown, 0, 0, 0, 0, & mos7840_open, & mos7840_close, & mos7840_write,
    & mos7840_write_room, & mos7840_ioctl, & mos7840_set_termios, & mos7840_break,
    & mos7840_chars_in_buffer, & mos7840_throttle, & mos7840_unthrottle, & mos7840_tiocmget,
    & mos7840_tiocmset, & mos7840_interrupt_callback, 0, & mos7840_bulk_in_callback,
    0};
#line 2831
static int moschip7840_init(void)  __attribute__((__section__(".init.text"))) ;
#line 2831 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int moschip7840_init(void) 
{ 
  int retval ;

  {
#line 2835
  while (1) {
#line 2835
    if (debug) {
#line 2835
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             " mos7840_init :entering..........");
    } else {

    }
#line 2835
    break;
  }
#line 2838
  retval = usb_serial_register(& moschip7840_4port_device);
#line 2840
  if (retval) {
#line 2841
    goto failed_port_device_register;
  } else {

  }
#line 2843
  while (1) {
#line 2843
    if (debug) {
#line 2843
      printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "Entring...");
    } else {

    }
#line 2843
    break;
  }
#line 2844
  printk("<6>mos7840: Moschip 7840/7820 USB Serial Driver 1.3.1\n");
#line 2847
  retval = usb_register(& io_driver);
#line 2849
  if (retval) {
#line 2850
    goto failed_usb_register;
  } else {

  }
#line 2852
  if (retval == 0) {
#line 2853
    while (1) {
#line 2853
      if (debug) {
#line 2853
        printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
               "Leaving...");
      } else {

      }
#line 2853
      break;
    }
#line 2854
    return (0);
  } else {

  }
  failed_usb_register: 
#line 2858
  usb_serial_deregister(& moschip7840_4port_device);
  failed_port_device_register: 
#line 2862
  return (retval);
}
}
#line 2869
static void moschip7840_exit(void)  __attribute__((__section__(".exit.text"))) ;
#line 2869 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static void moschip7840_exit(void) 
{ 


  {
#line 2872
  while (1) {
#line 2872
    if (debug) {
#line 2872
      printk("<7>%s: %s \n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             " mos7840_exit :entering..........");
    } else {

    }
#line 2872
    break;
  }
#line 2874
  usb_deregister(& io_driver);
#line 2876
  usb_serial_deregister(& moschip7840_4port_device);
#line 2878
  while (1) {
#line 2878
    if (debug) {
#line 2878
      printk("<7>%s: %s\n\n", "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c",
             "Entring...");
    } else {

    }
#line 2878
    break;
  }
#line 2879
  return;
}
}
#line 2881 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
int init_module(void) 
{ 
  int tmp ;

  {
#line 2881
  tmp = moschip7840_init();
#line 2881
  return (tmp);
}
}
#line 2882 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
void cleanup_module(void) 
{ 


  {
#line 2882
  moschip7840_exit();
#line 2882
  return;
}
}
#line 2885 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static char const   __mod_description2885[48]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 2885
  {      'd',      'e',      's',      'c', 
        'r',      'i',      'p',      't', 
        'i',      'o',      'n',      '=', 
        'M',      'o',      's',      'c', 
        'h',      'i',      'p',      ' ', 
        '7',      '8',      '4',      '0', 
        '/',      '7',      '8',      '2', 
        '0',      ' ',      'U',      'S', 
        'B',      ' ',      'S',      'e', 
        'r',      'i',      'a',      'l', 
        ' ',      'D',      'r',      'i', 
        'v',      'e',      'r',      '\000'};
#line 2886 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static char const   __mod_license2886[12]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 2886
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      '\000'};
#line 2888 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static char const   __param_str_debug[6]  = {      'd',      'e',      'b',      'u', 
        'g',      '\000'};
#line 2888 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static struct kernel_param  const  __param_debug  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_debug, ((256 | 32) | 4) | 128, & param_set_bool, & param_get_bool,
    {& debug}};
#line 2888 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static char const   __mod_debugtype2888[20]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 2888
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'd',      'e',      'b', 
        'u',      'g',      ':',      'b', 
        'o',      'o',      'l',      '\000'};
#line 2889 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static char const   __mod_debug2889[32]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 2889
  {      'p',      'a',      'r',      'm', 
        '=',      'd',      'e',      'b', 
        'u',      'g',      ':',      'D', 
        'e',      'b',      'u',      'g', 
        ' ',      'e',      'n',      'a', 
        'b',      'l',      'e',      'd', 
        ' ',      'o',      'r',      ' ', 
        'n',      'o',      't',      '\000'};
#line 2907
void ldv_check_final_state(void) ;
#line 2910
extern void ldv_check_return_value(int res ) ;
#line 2916
extern void ldv_initialize(void) ;
#line 2919
extern void ldv_handler_precall(void) ;
#line 2922
extern int nondet_int(void) ;
#line 2925 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
int LDV_IN_INTERRUPT  ;
#line 3023 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
static int res_mos7840_open_18  ;
#line 2928 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/usb/serial/mos7840.c"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct usb_serial_port *var_group1 ;
  struct file *var_group2 ;
  unsigned char const   *var_mos7840_write_25_p1 ;
  int var_mos7840_write_25_p2 ;
  struct usb_serial *var_group3 ;
  unsigned int var_mos7840_ioctl_38_p2 ;
  unsigned long var_mos7840_ioctl_38_p3 ;
  struct ktermios *var_group4 ;
  int var_mos7840_break_23_p1 ;
  unsigned int var_mos7840_tiocmset_29_p2 ;
  unsigned int var_mos7840_tiocmset_29_p3 ;
  struct urb *var_group5 ;
  int tmp ;
  int ldv_s_moschip7840_4port_device_usb_serial_driver ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4680
  LDV_IN_INTERRUPT = 1;
#line 4689
  ldv_initialize();
#line 4786
  ldv_handler_precall();
#line 4787
  tmp = moschip7840_init();
#line 4787
  if (tmp) {
#line 4788
    goto ldv_final;
  } else {

  }
#line 4789
  ldv_s_moschip7840_4port_device_usb_serial_driver = 0;
#line 4793
  while (1) {
#line 4793
    tmp___1 = nondet_int();
#line 4793
    if (tmp___1 || ! (ldv_s_moschip7840_4port_device_usb_serial_driver == 0)) {

    } else {
#line 4793
      break;
    }
#line 4797
    tmp___0 = nondet_int();
#line 4797
    switch (tmp___0) {
    case 0: 
#line 4802
    if (ldv_s_moschip7840_4port_device_usb_serial_driver == 0) {
#line 4905
      ldv_s_moschip7840_4port_device_usb_serial_driver = ldv_s_moschip7840_4port_device_usb_serial_driver + 1;
    } else {

    }
#line 4911
    break;
    case 1: 
#line 4915
    if (ldv_s_moschip7840_4port_device_usb_serial_driver == 1) {
#line 5001
      ldv_handler_precall();
#line 5002
      res_mos7840_open_18 = mos7840_open(var_group1, var_group2);
#line 5003
      ldv_check_return_value(res_mos7840_open_18);
#line 5004
      if (res_mos7840_open_18) {
#line 5005
        goto ldv_module_exit;
      } else {

      }
#line 5018
      ldv_s_moschip7840_4port_device_usb_serial_driver = ldv_s_moschip7840_4port_device_usb_serial_driver + 1;
    } else {

    }
#line 5024
    break;
    case 2: 
#line 5028
    if (ldv_s_moschip7840_4port_device_usb_serial_driver == 2) {
#line 5114
      ldv_handler_precall();
#line 5115
      mos7840_close(var_group1, var_group2);
#line 5128
      ldv_s_moschip7840_4port_device_usb_serial_driver = 0;
    } else {

    }
#line 5134
    break;
    case 3: 
#line 5224
    ldv_handler_precall();
#line 5225
    mos7840_write(var_group1, var_mos7840_write_25_p1, var_mos7840_write_25_p2);
#line 5242
    break;
    case 4: 
#line 5332
    ldv_handler_precall();
#line 5333
    mos7840_write_room(var_group1);
#line 5352
    break;
    case 5: 
#line 5442
    ldv_handler_precall();
#line 5443
    mos7840_chars_in_buffer(var_group1);
#line 5462
    break;
    case 6: 
#line 5554
    ldv_handler_precall();
#line 5555
    mos7840_throttle(var_group1);
#line 5572
    break;
    case 7: 
#line 5664
    ldv_handler_precall();
#line 5665
    mos7840_unthrottle(var_group1);
#line 5682
    break;
    case 8: 
#line 5780
    ldv_handler_precall();
#line 5781
    mos7840_calc_num_ports(var_group3);
#line 5792
    break;
    case 9: 
#line 5890
    ldv_handler_precall();
#line 5891
    mos7840_ioctl(var_group1, var_group2, var_mos7840_ioctl_38_p2, var_mos7840_ioctl_38_p3);
#line 5902
    break;
    case 10: 
#line 6000
    ldv_handler_precall();
#line 6001
    mos7840_set_termios(var_group1, var_group4);
#line 6012
    break;
    case 11: 
#line 6102
    ldv_handler_precall();
#line 6103
    mos7840_break(var_group1, var_mos7840_break_23_p1);
#line 6122
    break;
    case 12: 
#line 6214
    ldv_handler_precall();
#line 6215
    mos7840_tiocmget(var_group1, var_group2);
#line 6232
    break;
    case 13: 
#line 6324
    ldv_handler_precall();
#line 6325
    mos7840_tiocmset(var_group1, var_group2, var_mos7840_tiocmset_29_p2, var_mos7840_tiocmset_29_p3);
#line 6342
    break;
    case 14: 
#line 6440
    ldv_handler_precall();
#line 6441
    mos7840_startup(var_group3);
#line 6452
    break;
    case 15: 
#line 6550
    ldv_handler_precall();
#line 6551
    mos7840_shutdown(var_group3);
#line 6562
    break;
    case 16: 
#line 6650
    ldv_handler_precall();
#line 6651
    mos7840_bulk_in_callback(var_group5);
#line 6672
    break;
    case 17: 
#line 6760
    ldv_handler_precall();
#line 6761
    mos7840_interrupt_callback(var_group5);
#line 6782
    break;
    default: 
#line 6783
    break;
    }
  }
  ldv_module_exit: 
#line 6886
  ldv_handler_precall();
#line 6887
  moschip7840_exit();
  ldv_final: 
#line 6890
  ldv_check_final_state();
#line 6893
  return;
}
}
#line 135 "include/linux/mutex.h"
void mutex_lock(struct mutex *lock ) ;
#line 136
int ( __attribute__((__warn_unused_result__)) mutex_lock_interruptible)(struct mutex *lock ) ;
#line 137
int ( __attribute__((__warn_unused_result__)) mutex_lock_killable)(struct mutex *lock ) ;
#line 148
int mutex_trylock(struct mutex *lock ) ;
#line 149
void mutex_unlock(struct mutex *lock ) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ( __attribute__((__always_inline__)) ldv_error)(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 15 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int ldv_mutex  =    1;
#line 18 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int ( __attribute__((__warn_unused_result__)) mutex_lock_interruptible)(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 25
  if (ldv_mutex == 1) {

  } else {
#line 25
    ldv_error();
  }
#line 28
  nondetermined = ldv_undef_int();
#line 31
  if (nondetermined) {
#line 34
    ldv_mutex = 2;
#line 36
    return (0);
  } else {
#line 41
    return (-4);
  }
}
}
#line 46 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int ( __attribute__((__warn_unused_result__)) mutex_lock_killable)(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 53
  if (ldv_mutex == 1) {

  } else {
#line 53
    ldv_error();
  }
#line 56
  nondetermined = ldv_undef_int();
#line 59
  if (nondetermined) {
#line 62
    ldv_mutex = 2;
#line 64
    return (0);
  } else {
#line 69
    return (-4);
  }
}
}
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int atomic_dec_and_mutex_lock(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 79
  if (ldv_mutex == 1) {

  } else {
#line 79
    ldv_error();
  }
#line 82
  atomic_value_after_dec = ldv_undef_int();
#line 85
  if (atomic_value_after_dec == 0) {
#line 88
    ldv_mutex = 2;
#line 90
    return (1);
  } else {

  }
#line 94
  return (0);
}
}
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
void mutex_lock(struct mutex *lock ) 
{ 


  {
#line 104
  if (ldv_mutex == 1) {

  } else {
#line 104
    ldv_error();
  }
#line 106
  ldv_mutex = 2;
#line 107
  return;
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int mutex_trylock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 117
  if (ldv_mutex == 1) {

  } else {
#line 117
    ldv_error();
  }
#line 120
  nondetermined = ldv_undef_int();
#line 123
  if (nondetermined) {
#line 126
    ldv_mutex = 2;
#line 128
    return (1);
  } else {
#line 133
    return (0);
  }
}
}
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
void mutex_unlock(struct mutex *lock ) 
{ 


  {
#line 143
  if (ldv_mutex == 2) {

  } else {
#line 143
    ldv_error();
  }
#line 145
  ldv_mutex = 1;
#line 146
  return;
}
}
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 152
  if (ldv_mutex == 1) {

  } else {
#line 152
    ldv_error();
  }
#line 153
  return;
}
}
