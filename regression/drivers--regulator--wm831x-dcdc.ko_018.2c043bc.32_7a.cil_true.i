/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 26 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 29 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 34 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 37 "include/linux/types.h"
typedef _Bool bool;
#line 39 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 40 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 53 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 62 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 67 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 77 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 110 "include/linux/types.h"
typedef __s32 int32_t;
#line 116 "include/linux/types.h"
typedef __u32 uint32_t;
#line 201 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 205 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 210 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 214 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 214 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 219 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 219 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 220 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 225
struct hlist_node;
#line 225 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 229 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 240 "include/linux/types.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 145 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 42 "include/linux/dynamic_debug.h"
struct device;
#line 53 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 71 "include/asm-generic/bug.h"
struct completion;
#line 72
struct pt_regs;
#line 331 "include/linux/kernel.h"
struct pid;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_2017_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_2017_8 ldv_2017 ;
};
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct task_struct;
#line 35
struct lockdep_map;
#line 18 "include/linux/lockdep.h"
struct mm_struct;
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2139_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2154_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2155_11 {
   struct __anonstruct_ldv_2139_12 ldv_2139 ;
   struct __anonstruct_ldv_2154_13 ldv_2154 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2155_11 ldv_2155 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_15 pgd_t;
#line 282
struct page;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 290
struct file;
#line 337
struct thread_struct;
#line 339
struct cpumask;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2787_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2787_18 ldv_2787 ;
};
#line 306 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 636 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 233 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct jump_label_key;
#line 279 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 297 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5172_23 {
   u64 rip ;
   u64 rdp ;
};
#line 297 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5178_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 297 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5179_22 {
   struct __anonstruct_ldv_5172_23 ldv_5172 ;
   struct __anonstruct_ldv_5178_24 ldv_5178 ;
};
#line 297 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5188_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 297 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5179_22 ldv_5179 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5188_25 ldv_5188 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 352 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 357 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 363 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 369 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 377 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   union thread_xstate *state ;
};
#line 423
struct kmem_cache;
#line 424
struct perf_event;
#line 425 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 187 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 552 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_6013_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_6014_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_6013_29 ldv_6013 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_6014_28 ldv_6014 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 233 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
#line 659 "include/linux/mmzone.h"
struct rw_semaphore;
#line 660 "include/linux/mmzone.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 170 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 60 "include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 139 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 312 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 99 "include/linux/debugobjects.h"
struct tvec_base;
#line 100 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 289 "include/linux/timer.h"
struct hrtimer;
#line 290
enum hrtimer_restart;
#line 302
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 429 "include/linux/workqueue.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 272
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 279
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 287
struct wakeup_source;
#line 432 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 437
struct pm_qos_constraints;
#line 437 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
#line 493 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 74 "include/asm-generic/iomap.h"
struct vm_area_struct;
#line 815 "include/linux/rcupdate.h"
struct nsproxy;
#line 37 "include/linux/kmod.h"
struct cred;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 445
struct sock;
#line 446
struct kobject;
#line 447
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 453 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 62 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 98 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 117
struct sysfs_dirent;
#line 182 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 217
struct kernel_param;
#line 218 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string;
#line 49
struct kparam_array;
#line 49 "include/linux/moduleparam.h"
union __anonunion_ldv_13189_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 49 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   u16 flags ;
   union __anonunion_ldv_13189_134 ldv_13189 ;
};
#line 64 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 70 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 429 "include/linux/moduleparam.h"
struct jump_label_key {
   atomic_t enabled ;
};
#line 105 "include/linux/jump_label.h"
struct tracepoint;
#line 106 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct jump_label_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct mod_arch_specific {

};
#line 36 "include/linux/module.h"
struct module_param_attrs;
#line 36 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 45 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 71
struct exception_table_entry;
#line 200
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 206 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 354
struct module_sect_attrs;
#line 354
struct module_notes_attrs;
#line 354
struct ftrace_event_call;
#line 354 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 215 "include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 483 "include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 544
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct pdev_archdata {

};
#line 17
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24
struct iommu_ops;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 51 "include/linux/device.h"
struct device_attribute;
#line 51
struct driver_attribute;
#line 51 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 160 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 225 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 255
struct class_attribute;
#line 255 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 312
struct device_type;
#line 351 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 404 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 431 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 492 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 501
struct dma_coherent_mem;
#line 501 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 613 "include/linux/device.h"
struct wakeup_source {
   char *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long hit_count ;
   unsigned char active : 1 ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 104
struct dentry;
#line 105
struct user_namespace;
#line 554 "include/linux/capability.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 176
struct prio_tree_node;
#line 176 "include/linux/rbtree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 115
struct address_space;
#line 116 "include/linux/prio_tree.h"
union __anonunion_ldv_15033_138 {
   unsigned long index ;
   void *freelist ;
};
#line 116 "include/linux/prio_tree.h"
struct __anonstruct_ldv_15043_142 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 116 "include/linux/prio_tree.h"
union __anonunion_ldv_15044_141 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_15043_142 ldv_15043 ;
};
#line 116 "include/linux/prio_tree.h"
struct __anonstruct_ldv_15046_140 {
   union __anonunion_ldv_15044_141 ldv_15044 ;
   atomic_t _count ;
};
#line 116 "include/linux/prio_tree.h"
union __anonunion_ldv_15047_139 {
   unsigned long counters ;
   struct __anonstruct_ldv_15046_140 ldv_15046 ;
};
#line 116 "include/linux/prio_tree.h"
struct __anonstruct_ldv_15048_137 {
   union __anonunion_ldv_15033_138 ldv_15033 ;
   union __anonunion_ldv_15047_139 ldv_15047 ;
};
#line 116 "include/linux/prio_tree.h"
struct __anonstruct_ldv_15055_144 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 116 "include/linux/prio_tree.h"
union __anonunion_ldv_15056_143 {
   struct list_head lru ;
   struct __anonstruct_ldv_15055_144 ldv_15055 ;
};
#line 116 "include/linux/prio_tree.h"
union __anonunion_ldv_15061_145 {
   unsigned long private ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 116 "include/linux/prio_tree.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_15048_137 ldv_15048 ;
   union __anonunion_ldv_15056_143 ldv_15056 ;
   union __anonunion_ldv_15061_145 ldv_15061 ;
};
#line 193 "include/linux/mm_types.h"
struct __anonstruct_vm_set_147 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 193 "include/linux/mm_types.h"
union __anonunion_shared_146 {
   struct __anonstruct_vm_set_147 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 193
struct anon_vma;
#line 193
struct vm_operations_struct;
#line 193
struct mempolicy;
#line 193 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_146 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 256 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 262 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 275 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 288
struct linux_binfmt;
#line 288
struct mmu_notifier_mm;
#line 288 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 98 "include/linux/sem.h"
struct sem_undo_list;
#line 98 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 107
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_148 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_148 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_150 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_151 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_152 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_153 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_154 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_155 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_149 {
   int _pad[28U] ;
   struct __anonstruct__kill_150 _kill ;
   struct __anonstruct__timer_151 _timer ;
   struct __anonstruct__rt_152 _rt ;
   struct __anonstruct__sigchld_153 _sigchld ;
   struct __anonstruct__sigfault_154 _sigfault ;
   struct __anonstruct__sigpoll_155 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_149 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 14 "include/linux/signal.h"
struct user_struct;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 394
struct pid_namespace;
#line 394 "include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   raw_spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_158 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_158 seccomp_t;
#line 427 "include/linux/rculist.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 85 "include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned long active_bases ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 452 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct key;
#line 34
struct signal_struct;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_16293_159 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_160 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_161 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_16293_159 ldv_16293 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_160 type_data ;
   union __anonunion_payload_161 payload ;
};
#line 310
struct audit_context;
#line 28 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 264
struct llist_node;
#line 65 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 186
struct futex_pi_state;
#line 187
struct robust_list_head;
#line 188
struct bio_list;
#line 189
struct fs_struct;
#line 190
struct perf_event_context;
#line 191
struct blk_plug;
#line 150 "include/linux/sched.h"
struct cfs_rq;
#line 404 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 447 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 455 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 462 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 479 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 515
struct autogroup;
#line 516
struct tty_struct;
#line 516
struct taskstats;
#line 516
struct tty_audit_buf;
#line 516 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore threadgroup_fork_lock ;
   int oom_adj ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 683 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 728
struct backing_dev_info;
#line 729
struct reclaim_state;
#line 730 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 744 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1037
struct io_context;
#line 1059
struct pipe_inode_info;
#line 1061
struct rq;
#line 1062 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1127 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1132 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1167 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1193
struct rt_rq;
#line 1193 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1217
struct mem_cgroup;
#line 1217 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1572
struct files_struct;
#line 1572
struct irqaction;
#line 1572
struct css_set;
#line 1572
struct compat_robust_list_head;
#line 1572 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int mems_allowed_change_disable ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   atomic_t ptrace_bp_refcnt ;
};
#line 28 "include/linux/of.h"
typedef u32 phandle;
#line 30 "include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
};
#line 39
struct proc_dir_entry;
#line 39 "include/linux/of.h"
struct device_node {
   char const   *name ;
   char const   *type ;
   phandle phandle ;
   char *full_name ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct device_node *next ;
   struct device_node *allnext ;
   struct proc_dir_entry *pde ;
   struct kref kref ;
   unsigned long _flags ;
   void *data ;
};
#line 590 "include/linux/i2c.h"
struct mfd_cell;
#line 591 "include/linux/i2c.h"
struct platform_device {
   char const   *name ;
   int id ;
   struct device dev ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id  const  *id_entry ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 163 "include/linux/platform_device.h"
struct platform_driver {
   int (*probe)(struct platform_device * ) ;
   int (*remove)(struct platform_device * ) ;
   void (*shutdown)(struct platform_device * ) ;
   int (*suspend)(struct platform_device * , pm_message_t  ) ;
   int (*resume)(struct platform_device * ) ;
   struct device_driver driver ;
   struct platform_device_id  const  *id_table ;
};
#line 296
struct regulator;
#line 181 "include/linux/regulator/consumer.h"
struct regulator_dev;
#line 182
struct regulator_init_data;
#line 193 "include/linux/regulator/consumer.h"
struct regulator_ops {
   int (*list_voltage)(struct regulator_dev * , unsigned int  ) ;
   int (*set_voltage)(struct regulator_dev * , int  , int  , unsigned int * ) ;
   int (*set_voltage_sel)(struct regulator_dev * , unsigned int  ) ;
   int (*get_voltage)(struct regulator_dev * ) ;
   int (*get_voltage_sel)(struct regulator_dev * ) ;
   int (*set_current_limit)(struct regulator_dev * , int  , int  ) ;
   int (*get_current_limit)(struct regulator_dev * ) ;
   int (*enable)(struct regulator_dev * ) ;
   int (*disable)(struct regulator_dev * ) ;
   int (*is_enabled)(struct regulator_dev * ) ;
   int (*set_mode)(struct regulator_dev * , unsigned int  ) ;
   unsigned int (*get_mode)(struct regulator_dev * ) ;
   int (*enable_time)(struct regulator_dev * ) ;
   int (*set_voltage_time_sel)(struct regulator_dev * , unsigned int  , unsigned int  ) ;
   int (*get_status)(struct regulator_dev * ) ;
   unsigned int (*get_optimum_mode)(struct regulator_dev * , int  , int  , int  ) ;
   int (*set_suspend_voltage)(struct regulator_dev * , int  ) ;
   int (*set_suspend_enable)(struct regulator_dev * ) ;
   int (*set_suspend_disable)(struct regulator_dev * ) ;
   int (*set_suspend_mode)(struct regulator_dev * , unsigned int  ) ;
};
#line 141 "include/linux/regulator/driver.h"
enum regulator_type {
    REGULATOR_VOLTAGE = 0,
    REGULATOR_CURRENT = 1
} ;
#line 146 "include/linux/regulator/driver.h"
struct regulator_desc {
   char const   *name ;
   int id ;
   unsigned int n_voltages ;
   struct regulator_ops *ops ;
   int irq ;
   enum regulator_type type ;
   struct module *owner ;
};
#line 173
struct regulation_constraints;
#line 173 "include/linux/regulator/driver.h"
struct regulator_dev {
   struct regulator_desc *desc ;
   int exclusive ;
   u32 use_count ;
   u32 open_count ;
   struct list_head list ;
   struct list_head consumer_list ;
   struct blocking_notifier_head notifier ;
   struct mutex mutex ;
   struct module *owner ;
   struct device dev ;
   struct regulation_constraints *constraints ;
   struct regulator *supply ;
   struct delayed_work disable_work ;
   int deferred_disables ;
   void *reg_data ;
   struct dentry *debugfs ;
};
#line 228 "include/linux/regulator/driver.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 154 "include/linux/idr.h"
struct cgroupfs_root;
#line 156
struct cgroup;
#line 157
struct css_id;
#line 56 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 194 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 247 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 105 "include/linux/swap.h"
struct reclaim_state {
   unsigned long reclaimed_slab ;
};
#line 176 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 193 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 33 "include/linux/suspend.h"
typedef int suspend_state_t;
#line 425 "include/linux/suspend.h"
struct regulator_state {
   int uV ;
   unsigned int mode ;
   int enabled ;
   int disabled ;
};
#line 61 "include/linux/regulator/machine.h"
struct regulation_constraints {
   char const   *name ;
   int min_uV ;
   int max_uV ;
   int uV_offset ;
   int min_uA ;
   int max_uA ;
   unsigned int valid_modes_mask ;
   unsigned int valid_ops_mask ;
   int input_uV ;
   struct regulator_state state_disk ;
   struct regulator_state state_mem ;
   struct regulator_state state_standby ;
   suspend_state_t initial_state ;
   unsigned int initial_mode ;
   unsigned char always_on : 1 ;
   unsigned char boot_on : 1 ;
   unsigned char apply_uV : 1 ;
};
#line 133 "include/linux/regulator/machine.h"
struct regulator_consumer_supply {
   struct device *dev ;
   char const   *dev_name ;
   char const   *supply ;
};
#line 151 "include/linux/regulator/machine.h"
struct regulator_init_data {
   char const   *supply_regulator ;
   struct regulation_constraints constraints ;
   int num_consumer_supplies ;
   struct regulator_consumer_supply *consumer_supplies ;
   int (*regulator_init)(void * ) ;
   void *driver_data ;
};
#line 123 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   int node ;
   unsigned int stat[24U] ;
};
#line 52 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 63 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 73 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int objsize ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 355 "include/linux/slab.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 41 "include/asm-generic/sections.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 94 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   void *dev_id ;
   void *percpu_dev_id ;
   struct irqaction *next ;
   int irq ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
   unsigned long thread_mask ;
   char const   *name ;
   struct proc_dir_entry *dir ;
};
#line 123 "include/linux/regmap.h"
struct regmap;
#line 156
struct wm831x;
#line 157
enum wm831x_auxadc;
#line 157
enum wm831x_auxadc;
#line 359 "include/linux/mfd/wm831x/core.h"
struct wm831x {
   struct mutex io_lock ;
   struct device *dev ;
   struct regmap *regmap ;
   int irq ;
   struct mutex irq_lock ;
   int irq_base ;
   int irq_masks_cur[5U] ;
   int irq_masks_cache[5U] ;
   bool soft_shutdown ;
   unsigned char has_gpio_ena : 1 ;
   unsigned char has_cs_sts : 1 ;
   unsigned char charger_irq_wake : 1 ;
   int num_gpio ;
   int gpio_update[16U] ;
   bool gpio_level[16U] ;
   struct mutex auxadc_lock ;
   struct list_head auxadc_pending ;
   u16 auxadc_active ;
   int (*auxadc_read)(struct wm831x * , enum wm831x_auxadc  ) ;
   struct mutex key_lock ;
   unsigned char locked : 1 ;
};
#line 1217 "include/linux/mfd/wm831x/regulator.h"
struct wm831x_backlight_pdata {
   int isink ;
   int max_uA ;
};
#line 25 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_backup_pdata {
   int charger_enable ;
   int no_constant_voltage ;
   int vlim ;
   int ilim ;
};
#line 32 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_battery_pdata {
   int enable ;
   int fast_enable ;
   int off_mask ;
   int trickle_ilim ;
   int vsel ;
   int eoc_iterm ;
   int fast_ilim ;
   int timeout ;
};
#line 43 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_buckv_pdata {
   int dvs_gpio ;
   int dvs_control_src ;
   int dvs_init_state ;
   int dvs_state_gpio ;
};
#line 60
enum wm831x_status_src {
    WM831X_STATUS_PRESERVE = 0,
    WM831X_STATUS_OTP = 1,
    WM831X_STATUS_POWER = 2,
    WM831X_STATUS_CHARGER = 3,
    WM831X_STATUS_MANUAL = 4
} ;
#line 68 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_status_pdata {
   enum wm831x_status_src default_src ;
   char const   *name ;
   char const   *default_trigger ;
};
#line 77 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_touch_pdata {
   int fivewire ;
   int isel ;
   int rpu ;
   int pressure ;
   unsigned int data_irq ;
   int data_irqf ;
   unsigned int pd_irq ;
   int pd_irqf ;
};
#line 88
enum wm831x_watchdog_action {
    WM831X_WDOG_NONE = 0,
    WM831X_WDOG_INTERRUPT = 1,
    WM831X_WDOG_RESET = 2,
    WM831X_WDOG_WAKE = 3
} ;
#line 95 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_watchdog_pdata {
   enum wm831x_watchdog_action primary ;
   enum wm831x_watchdog_action secondary ;
   int update_gpio ;
   unsigned char software : 1 ;
};
#line 101 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_pdata {
   int wm831x_num ;
   int (*pre_init)(struct wm831x * ) ;
   int (*post_init)(struct wm831x * ) ;
   bool irq_cmos ;
   bool disable_touch ;
   bool soft_shutdown ;
   int irq_base ;
   int gpio_base ;
   int gpio_defaults[16U] ;
   struct wm831x_backlight_pdata *backlight ;
   struct wm831x_backup_pdata *backup ;
   struct wm831x_battery_pdata *battery ;
   struct wm831x_touch_pdata *touch ;
   struct wm831x_watchdog_pdata *watchdog ;
   struct wm831x_status_pdata *status[2U] ;
   struct regulator_init_data *dcdc[4U] ;
   struct regulator_init_data *epe[2U] ;
   struct regulator_init_data *ldo[11U] ;
   struct regulator_init_data *isink[2U] ;
};
#line 149 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_dcdc {
   char name[6U] ;
   struct regulator_desc desc ;
   int base ;
   struct wm831x *wm831x ;
   struct regulator_dev *regulator ;
   int dvs_gpio ;
   int dvs_gpio_state ;
   int on_vsel ;
   int dvs_vsel ;
};
#line 3448 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
typedef int ldv_func_ret_type___0;
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 101 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 306 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 168 "include/linux/mutex.h"
extern int mutex_trylock(struct mutex * ) ;
#line 171
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) ;
#line 173
extern void mutex_unlock(struct mutex * ) ;
#line 176
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) ;
#line 19
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 20
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 23
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 27
void ldv_mutex_lock_pm_mutex(struct mutex *lock ) ;
#line 31
void ldv_mutex_unlock_pm_mutex(struct mutex *lock ) ;
#line 26 "include/linux/export.h"
extern struct module __this_module ;
#line 719 "include/linux/device.h"
extern void *dev_get_drvdata(struct device  const  * ) ;
#line 720
extern int dev_set_drvdata(struct device * , void * ) ;
#line 809
extern int dev_printk(char const   * , struct device  const  * , char const   *  , ...) ;
#line 819
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 821
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 46 "include/linux/platform_device.h"
extern struct resource *platform_get_resource(struct platform_device * , unsigned int  ,
                                              unsigned int  ) ;
#line 49
extern int platform_get_irq_byname(struct platform_device * , char const   * ) ;
#line 174
extern int platform_driver_register(struct platform_driver * ) ;
#line 175
extern void platform_driver_unregister(struct platform_driver * ) ;
#line 183 "include/linux/platform_device.h"
__inline static void *platform_get_drvdata(struct platform_device  const  *pdev ) 
{ 
  void *tmp ;

  {
#line 185
  tmp = dev_get_drvdata(& pdev->dev);
#line 185
  return (tmp);
}
}
#line 188 "include/linux/platform_device.h"
__inline static void platform_set_drvdata(struct platform_device *pdev , void *data ) 
{ 


  {
#line 190
  dev_set_drvdata(& pdev->dev, data);
#line 191
  return;
}
}
#line 213 "include/linux/regulator/driver.h"
extern struct regulator_dev *regulator_register(struct regulator_desc * , struct device * ,
                                                struct regulator_init_data  const  * ,
                                                void * , struct device_node * ) ;
#line 216
extern void regulator_unregister(struct regulator_dev * ) ;
#line 218
extern int regulator_notifier_call_chain(struct regulator_dev * , unsigned long  ,
                                         void * ) ;
#line 221
extern void *rdev_get_drvdata(struct regulator_dev * ) ;
#line 223
extern int rdev_get_id(struct regulator_dev * ) ;
#line 151 "include/asm-generic/gpio.h"
extern int gpio_request(unsigned int  , char const   * ) ;
#line 152
extern void gpio_free(unsigned int  ) ;
#line 155
extern int gpio_direction_output(unsigned int  , int  ) ;
#line 168
extern void __gpio_set_value(unsigned int  , int  ) ;
#line 31 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/gpio.h"
__inline static void gpio_set_value(unsigned int gpio , int value ) 
{ 


  {
#line 33
  __gpio_set_value(gpio, value);
#line 34
  return;
}
}
#line 161 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 218 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 265 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 280
  tmp___2 = __kmalloc(size, flags);
#line 280
  return (tmp___2);
}
}
#line 338 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 340
  tmp = kmalloc(size, flags | 32768U);
#line 340
  return (tmp);
}
}
#line 129 "include/linux/interrupt.h"
extern int request_threaded_irq(unsigned int  , irqreturn_t (*)(int  , void * ) ,
                                irqreturn_t (*)(int  , void * ) , unsigned long  ,
                                char const   * , void * ) ;
#line 186
extern void free_irq(unsigned int  , void * ) ;
#line 402 "include/linux/mfd/wm831x/core.h"
extern int wm831x_reg_read(struct wm831x * , unsigned short  ) ;
#line 407
extern int wm831x_set_bits(struct wm831x * , unsigned short  , unsigned short  , unsigned short  ) ;
#line 87 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_dcdc_is_enabled(struct regulator_dev *rdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  int mask ;
  int tmp___0 ;
  int reg ;

  {
#line 89
  tmp = rdev_get_drvdata(rdev);
#line 89
  dcdc = (struct wm831x_dcdc *)tmp;
#line 90
  wm831x = dcdc->wm831x;
#line 91
  tmp___0 = rdev_get_id(rdev);
#line 91
  mask = 1 << tmp___0;
#line 94
  reg = wm831x_reg_read(wm831x, 16464);
#line 95
  if (reg < 0) {
#line 96
    return (reg);
  } else {

  }
#line 98
  if ((reg & mask) != 0) {
#line 99
    return (1);
  } else {
#line 101
    return (0);
  }
}
}
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_dcdc_enable(struct regulator_dev *rdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  int mask ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 106
  tmp = rdev_get_drvdata(rdev);
#line 106
  dcdc = (struct wm831x_dcdc *)tmp;
#line 107
  wm831x = dcdc->wm831x;
#line 108
  tmp___0 = rdev_get_id(rdev);
#line 108
  mask = 1 << tmp___0;
#line 110
  tmp___1 = wm831x_set_bits(wm831x, 16464, (int )((unsigned short )mask), (int )((unsigned short )mask));
#line 110
  return (tmp___1);
}
}
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_dcdc_disable(struct regulator_dev *rdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  int mask ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 115
  tmp = rdev_get_drvdata(rdev);
#line 115
  dcdc = (struct wm831x_dcdc *)tmp;
#line 116
  wm831x = dcdc->wm831x;
#line 117
  tmp___0 = rdev_get_id(rdev);
#line 117
  mask = 1 << tmp___0;
#line 119
  tmp___1 = wm831x_set_bits(wm831x, 16464, (int )((unsigned short )mask), 0);
#line 119
  return (tmp___1);
}
}
#line 122 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static unsigned int wm831x_dcdc_get_mode(struct regulator_dev *rdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 reg ;
  int val ;

  {
#line 125
  tmp = rdev_get_drvdata(rdev);
#line 125
  dcdc = (struct wm831x_dcdc *)tmp;
#line 126
  wm831x = dcdc->wm831x;
#line 127
  reg = (unsigned int )((u16 )dcdc->base) + 2U;
#line 130
  val = wm831x_reg_read(wm831x, (int )reg);
#line 131
  if (val < 0) {
#line 132
    return ((unsigned int )val);
  } else {

  }
#line 134
  val = (val & 768) >> 8;
#line 136
  switch (val) {
  case 0: ;
#line 138
  return (1U);
  case 1: ;
#line 140
  return (2U);
  case 3: ;
#line 142
  return (8U);
  case 2: ;
#line 144
  return (4U);
  default: 
#line 146
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"),
                       "i" (146), "i" (12UL));
  ldv_24678: ;
#line 146
  goto ldv_24678;
#line 147
  return (4294967274U);
  }
}
}
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_dcdc_set_mode_int(struct wm831x *wm831x , int reg , unsigned int mode ) 
{ 
  int val ;
  int tmp ;

  {
#line 156
  switch (mode) {
  case 1U: 
#line 158
  val = 0;
#line 159
  goto ldv_24686;
  case 2U: 
#line 161
  val = 1;
#line 162
  goto ldv_24686;
  case 8U: 
#line 164
  val = 3;
#line 165
  goto ldv_24686;
  case 4U: 
#line 167
  val = 2;
#line 168
  goto ldv_24686;
  default: ;
#line 170
  return (-22);
  }
  ldv_24686: 
#line 173
  tmp = wm831x_set_bits(wm831x, (int )((unsigned short )reg), 768, (int )((unsigned short )val) << 8U);
#line 173
  return (tmp);
}
}
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_dcdc_set_mode(struct regulator_dev *rdev , unsigned int mode ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 reg ;
  int tmp___0 ;

  {
#line 179
  tmp = rdev_get_drvdata(rdev);
#line 179
  dcdc = (struct wm831x_dcdc *)tmp;
#line 180
  wm831x = dcdc->wm831x;
#line 181
  reg = (unsigned int )((u16 )dcdc->base) + 2U;
#line 183
  tmp___0 = wm831x_dcdc_set_mode_int(wm831x, (int )reg, mode);
#line 183
  return (tmp___0);
}
}
#line 186 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_dcdc_set_suspend_mode(struct regulator_dev *rdev , unsigned int mode ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 reg ;
  int tmp___0 ;

  {
#line 189
  tmp = rdev_get_drvdata(rdev);
#line 189
  dcdc = (struct wm831x_dcdc *)tmp;
#line 190
  wm831x = dcdc->wm831x;
#line 191
  reg = (unsigned int )((u16 )dcdc->base) + 3U;
#line 193
  tmp___0 = wm831x_dcdc_set_mode_int(wm831x, (int )reg, mode);
#line 193
  return (tmp___0);
}
}
#line 196 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_dcdc_get_status(struct regulator_dev *rdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  int ret ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 198
  tmp = rdev_get_drvdata(rdev);
#line 198
  dcdc = (struct wm831x_dcdc *)tmp;
#line 199
  wm831x = dcdc->wm831x;
#line 203
  ret = wm831x_reg_read(wm831x, 16468);
#line 204
  if (ret < 0) {
#line 205
    return (ret);
  } else {

  }
#line 207
  tmp___1 = rdev_get_id(rdev);
#line 207
  if ((ret >> tmp___1) & 1) {
#line 208
    tmp___0 = rdev_get_id(rdev);
#line 208
    dev_printk("<7>", (struct device  const  *)wm831x->dev, "DCDC%d under voltage\n",
               tmp___0 + 1);
#line 210
    return (2);
  } else {

  }
#line 214
  tmp___6 = rdev_get_id(rdev);
#line 214
  if (tmp___6 <= 1) {
#line 215
    tmp___3 = rdev_get_id(rdev);
#line 215
    if (((4096 << tmp___3) & ret) != 0) {
#line 216
      tmp___2 = rdev_get_id(rdev);
#line 216
      dev_printk("<7>", (struct device  const  *)wm831x->dev, "DCDC%d over voltage\n",
                 tmp___2 + 1);
#line 218
      return (2);
    } else {

    }
#line 221
    tmp___5 = rdev_get_id(rdev);
#line 221
    if (((256 << tmp___5) & ret) != 0) {
#line 222
      tmp___4 = rdev_get_id(rdev);
#line 222
      dev_printk("<7>", (struct device  const  *)wm831x->dev, "DCDC%d over current\n",
                 tmp___4 + 1);
#line 224
      return (2);
    } else {

    }
  } else {

  }
#line 229
  ret = wm831x_reg_read(wm831x, 16466);
#line 230
  if (ret < 0) {
#line 231
    return (ret);
  } else {

  }
#line 232
  tmp___7 = rdev_get_id(rdev);
#line 232
  if (((ret >> tmp___7) & 1) == 0) {
#line 233
    return (0);
  } else {

  }
#line 237
  return (1);
}
}
#line 240 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static irqreturn_t wm831x_dcdc_uv_irq(int irq , void *data ) 
{ 
  struct wm831x_dcdc *dcdc ;

  {
#line 242
  dcdc = (struct wm831x_dcdc *)data;
#line 244
  regulator_notifier_call_chain(dcdc->regulator, 1UL, 0);
#line 248
  return (IRQ_HANDLED);
}
}
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static irqreturn_t wm831x_dcdc_oc_irq(int irq , void *data ) 
{ 
  struct wm831x_dcdc *dcdc ;

  {
#line 253
  dcdc = (struct wm831x_dcdc *)data;
#line 255
  regulator_notifier_call_chain(dcdc->regulator, 2UL, 0);
#line 259
  return (IRQ_HANDLED);
}
}
#line 266 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_list_voltage(struct regulator_dev *rdev , unsigned int selector ) 
{ 


  {
#line 269
  if (selector <= 8U) {
#line 270
    return (600000);
  } else {

  }
#line 271
  if (selector <= 104U) {
#line 272
    return ((int )(selector * 12500U + 500000U));
  } else {

  }
#line 273
  return (-22);
}
}
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_select_min_voltage(struct regulator_dev *rdev , int min_uV ,
                                           int max_uV ) 
{ 
  u16 vsel ;
  int tmp ;

  {
#line 281
  if (min_uV <= 599999) {
#line 282
    vsel = 0U;
  } else
#line 283
  if (min_uV <= 1800000) {
#line 284
    vsel = (unsigned int )((u16 )((min_uV + -600000) / 12500)) + 8U;
  } else {
#line 286
    return (-22);
  }
#line 288
  tmp = wm831x_buckv_list_voltage(rdev, (unsigned int )vsel);
#line 288
  if (tmp > max_uV) {
#line 289
    return (-22);
  } else {

  }
#line 291
  return ((int )vsel);
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_set_dvs(struct regulator_dev *rdev , int state ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;

  {
#line 296
  tmp = rdev_get_drvdata(rdev);
#line 296
  dcdc = (struct wm831x_dcdc *)tmp;
#line 298
  if (dcdc->dvs_gpio_state == state) {
#line 299
    return (0);
  } else {

  }
#line 301
  dcdc->dvs_gpio_state = state;
#line 302
  gpio_set_value((unsigned int )dcdc->dvs_gpio, state);
#line 309
  return (0);
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_set_voltage(struct regulator_dev *rdev , int min_uV , int max_uV ,
                                    unsigned int *selector ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  int on_reg ;
  int dvs_reg ;
  int vsel ;
  int ret ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 315
  tmp = rdev_get_drvdata(rdev);
#line 315
  dcdc = (struct wm831x_dcdc *)tmp;
#line 316
  wm831x = dcdc->wm831x;
#line 317
  on_reg = dcdc->base + 2;
#line 318
  dvs_reg = dcdc->base + 4;
#line 321
  vsel = wm831x_buckv_select_min_voltage(rdev, min_uV, max_uV);
#line 322
  if (vsel < 0) {
#line 323
    return (vsel);
  } else {

  }
#line 325
  *selector = (unsigned int )vsel;
#line 328
  if (dcdc->dvs_gpio != 0 && dcdc->on_vsel == vsel) {
#line 329
    tmp___0 = wm831x_buckv_set_dvs(rdev, 0);
#line 329
    return (tmp___0);
  } else {

  }
#line 331
  if (dcdc->dvs_gpio != 0 && dcdc->dvs_vsel == vsel) {
#line 332
    tmp___1 = wm831x_buckv_set_dvs(rdev, 1);
#line 332
    return (tmp___1);
  } else {

  }
#line 335
  ret = wm831x_set_bits(wm831x, (int )((unsigned short )on_reg), 127, (int )((unsigned short )vsel));
#line 336
  if (ret < 0) {
#line 337
    return (ret);
  } else {

  }
#line 338
  dcdc->on_vsel = vsel;
#line 340
  if (dcdc->dvs_gpio == 0) {
#line 341
    return (ret);
  } else {

  }
#line 344
  ret = wm831x_buckv_set_dvs(rdev, 0);
#line 345
  if (ret < 0) {
#line 346
    return (ret);
  } else {

  }
#line 354
  if (dcdc->dvs_vsel < vsel) {
#line 355
    ret = wm831x_set_bits(wm831x, (int )((unsigned short )dvs_reg), 127, (int )((unsigned short )dcdc->dvs_vsel));
#line 358
    if (ret == 0) {
#line 359
      dcdc->dvs_vsel = vsel;
    } else {
#line 361
      dev_warn((struct device  const  *)wm831x->dev, "Failed to set DCDC DVS VSEL: %d\n",
               ret);
    }
  } else {

  }
#line 365
  return (0);
}
}
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_set_suspend_voltage(struct regulator_dev *rdev , int uV ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 reg ;
  int vsel ;
  int tmp___0 ;

  {
#line 371
  tmp = rdev_get_drvdata(rdev);
#line 371
  dcdc = (struct wm831x_dcdc *)tmp;
#line 372
  wm831x = dcdc->wm831x;
#line 373
  reg = (unsigned int )((u16 )dcdc->base) + 3U;
#line 376
  vsel = wm831x_buckv_select_min_voltage(rdev, uV, uV);
#line 377
  if (vsel < 0) {
#line 378
    return (vsel);
  } else {

  }
#line 380
  tmp___0 = wm831x_set_bits(wm831x, (int )reg, 127, (int )((unsigned short )vsel));
#line 380
  return (tmp___0);
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_get_voltage_sel(struct regulator_dev *rdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;

  {
#line 385
  tmp = rdev_get_drvdata(rdev);
#line 385
  dcdc = (struct wm831x_dcdc *)tmp;
#line 387
  if (dcdc->dvs_gpio != 0 && dcdc->dvs_gpio_state != 0) {
#line 388
    return (dcdc->dvs_vsel);
  } else {
#line 390
    return (dcdc->on_vsel);
  }
}
}
#line 394 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static u16 wm831x_dcdc_ilim[8U]  = 
#line 394
  {      125U,      250U,      375U,      500U, 
        625U,      750U,      875U,      1000U};
#line 398 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_set_current_limit(struct regulator_dev *rdev , int min_uA ,
                                          int max_uA ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 reg ;
  int i ;
  int tmp___0 ;

  {
#line 401
  tmp = rdev_get_drvdata(rdev);
#line 401
  dcdc = (struct wm831x_dcdc *)tmp;
#line 402
  wm831x = dcdc->wm831x;
#line 403
  reg = (unsigned int )((u16 )dcdc->base) + 1U;
#line 406
  i = 0;
#line 406
  goto ldv_24774;
  ldv_24773: ;
#line 407
  if ((int )wm831x_dcdc_ilim[i] >= max_uA) {
#line 408
    goto ldv_24772;
  } else {

  }
#line 406
  i = i + 1;
  ldv_24774: ;
#line 406
  if ((unsigned int )i <= 7U) {
#line 407
    goto ldv_24773;
  } else {

  }
  ldv_24772: ;
#line 410
  if (i == 8) {
#line 411
    return (-22);
  } else {

  }
#line 413
  tmp___0 = wm831x_set_bits(wm831x, (int )reg, 112, (int )((unsigned short )i));
#line 413
  return (tmp___0);
}
}
#line 416 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_get_current_limit(struct regulator_dev *rdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 reg ;
  int val ;

  {
#line 418
  tmp = rdev_get_drvdata(rdev);
#line 418
  dcdc = (struct wm831x_dcdc *)tmp;
#line 419
  wm831x = dcdc->wm831x;
#line 420
  reg = (unsigned int )((u16 )dcdc->base) + 1U;
#line 423
  val = wm831x_reg_read(wm831x, (int )reg);
#line 424
  if (val < 0) {
#line 425
    return (val);
  } else {

  }
#line 427
  return ((int )wm831x_dcdc_ilim[val & 112]);
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct regulator_ops wm831x_buckv_ops  = 
#line 430
     {& wm831x_buckv_list_voltage, & wm831x_buckv_set_voltage, 0, 0, & wm831x_buckv_get_voltage_sel,
    & wm831x_buckv_set_current_limit, & wm831x_buckv_get_current_limit, & wm831x_dcdc_enable,
    & wm831x_dcdc_disable, & wm831x_dcdc_is_enabled, & wm831x_dcdc_set_mode, & wm831x_dcdc_get_mode,
    0, 0, & wm831x_dcdc_get_status, 0, & wm831x_buckv_set_suspend_voltage, 0, 0, & wm831x_dcdc_set_suspend_mode};
#line 451 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static void wm831x_buckv_dvs_init(struct wm831x_dcdc *dcdc , struct wm831x_buckv_pdata *pdata ) 
{ 
  struct wm831x *wm831x ;
  int ret ;
  u16 ctrl ;

  {
#line 454
  wm831x = dcdc->wm831x;
#line 458
  if ((unsigned long )pdata == (unsigned long )((struct wm831x_buckv_pdata *)0) || pdata->dvs_gpio == 0) {
#line 459
    return;
  } else {

  }
#line 461
  ret = gpio_request((unsigned int )pdata->dvs_gpio, "DCDC DVS");
#line 462
  if (ret < 0) {
#line 463
    dev_err((struct device  const  *)wm831x->dev, "Failed to get %s DVS GPIO: %d\n",
            (char *)(& dcdc->name), ret);
#line 465
    return;
  } else {

  }
#line 471
  dcdc->dvs_gpio_state = pdata->dvs_init_state;
#line 473
  ret = gpio_direction_output((unsigned int )pdata->dvs_gpio, dcdc->dvs_gpio_state);
#line 474
  if (ret < 0) {
#line 475
    dev_err((struct device  const  *)wm831x->dev, "Failed to enable %s DVS GPIO: %d\n",
            (char *)(& dcdc->name), ret);
#line 477
    gpio_free((unsigned int )pdata->dvs_gpio);
#line 478
    return;
  } else {

  }
#line 481
  dcdc->dvs_gpio = pdata->dvs_gpio;
#line 483
  switch (pdata->dvs_control_src) {
  case 1: 
#line 485
  ctrl = 4096U;
#line 486
  goto ldv_24793;
  case 2: 
#line 488
  ctrl = 6144U;
#line 489
  goto ldv_24793;
  default: 
#line 491
  dev_err((struct device  const  *)wm831x->dev, "Invalid DVS control source %d for %s\n",
          pdata->dvs_control_src, (char *)(& dcdc->name));
#line 493
  return;
  }
  ldv_24793: ;
#line 499
  if (dcdc->dvs_vsel == 0) {
#line 500
    ret = wm831x_set_bits(wm831x, (int )((unsigned int )((unsigned short )dcdc->base) + 4U),
                          127, (int )((unsigned short )dcdc->on_vsel));
#line 503
    if (ret == 0) {
#line 504
      dcdc->dvs_vsel = dcdc->on_vsel;
    } else {
#line 506
      dev_warn((struct device  const  *)wm831x->dev, "Failed to set DVS_VSEL: %d\n",
               ret);
    }
  } else {

  }
#line 510
  ret = wm831x_set_bits(wm831x, (int )((unsigned int )((unsigned short )dcdc->base) + 4U),
                        6144, (int )ctrl);
#line 512
  if (ret < 0) {
#line 513
    dev_err((struct device  const  *)wm831x->dev, "Failed to set %s DVS source: %d\n",
            (char *)(& dcdc->name), ret);
  } else {

  }
#line 515
  return;
}
}
#line 518 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_probe(struct platform_device *pdev ) 
{ 
  struct wm831x *wm831x ;
  void *tmp ;
  struct wm831x_pdata *pdata ;
  int id ;
  struct wm831x_dcdc *dcdc ;
  struct resource *res ;
  int ret ;
  int irq ;
  void *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 520
  tmp = dev_get_drvdata((struct device  const  *)pdev->dev.parent);
#line 520
  wm831x = (struct wm831x *)tmp;
#line 521
  pdata = (struct wm831x_pdata *)(wm831x->dev)->platform_data;
#line 527
  if ((unsigned long )pdata != (unsigned long )((struct wm831x_pdata *)0) && pdata->wm831x_num != 0) {
#line 528
    id = pdata->wm831x_num * 10 + 1;
  } else {
#line 530
    id = 0;
  }
#line 531
  id = pdev->id - id;
#line 533
  dev_printk("<7>", (struct device  const  *)(& pdev->dev), "Probing DCDC%d\n", id + 1);
#line 535
  if ((unsigned long )pdata == (unsigned long )((struct wm831x_pdata *)0) || (unsigned long )pdata->dcdc[id] == (unsigned long )((struct regulator_init_data *)0)) {
#line 536
    return (-19);
  } else {

  }
#line 538
  tmp___0 = kzalloc(88UL, 208U);
#line 538
  dcdc = (struct wm831x_dcdc *)tmp___0;
#line 539
  if ((unsigned long )dcdc == (unsigned long )((struct wm831x_dcdc *)0)) {
#line 540
    dev_err((struct device  const  *)(& pdev->dev), "Unable to allocate private data\n");
#line 541
    return (-12);
  } else {

  }
#line 544
  dcdc->wm831x = wm831x;
#line 546
  res = platform_get_resource(pdev, 256U, 0U);
#line 547
  if ((unsigned long )res == (unsigned long )((struct resource *)0)) {
#line 548
    dev_err((struct device  const  *)(& pdev->dev), "No I/O resource\n");
#line 549
    ret = -22;
#line 550
    goto err;
  } else {

  }
#line 552
  dcdc->base = (int )res->start;
#line 554
  snprintf((char *)(& dcdc->name), 6UL, "DCDC%d", id + 1);
#line 555
  dcdc->desc.name = (char const   *)(& dcdc->name);
#line 556
  dcdc->desc.id = id;
#line 557
  dcdc->desc.type = REGULATOR_VOLTAGE;
#line 558
  dcdc->desc.n_voltages = 105U;
#line 559
  dcdc->desc.ops = & wm831x_buckv_ops;
#line 560
  dcdc->desc.owner = & __this_module;
#line 562
  ret = wm831x_reg_read(wm831x, (int )((unsigned int )((unsigned short )dcdc->base) + 2U));
#line 563
  if (ret < 0) {
#line 564
    dev_err((struct device  const  *)wm831x->dev, "Failed to read ON VSEL: %d\n",
            ret);
#line 565
    goto err;
  } else {

  }
#line 567
  dcdc->on_vsel = ret & 127;
#line 569
  ret = wm831x_reg_read(wm831x, (int )((unsigned int )((unsigned short )dcdc->base) + 4U));
#line 570
  if (ret < 0) {
#line 571
    dev_err((struct device  const  *)wm831x->dev, "Failed to read DVS VSEL: %d\n",
            ret);
#line 572
    goto err;
  } else {

  }
#line 574
  dcdc->dvs_vsel = ret & 127;
#line 576
  if ((unsigned long )pdata->dcdc[id] != (unsigned long )((struct regulator_init_data *)0)) {
#line 577
    wm831x_buckv_dvs_init(dcdc, (struct wm831x_buckv_pdata *)(pdata->dcdc[id])->driver_data);
  } else {

  }
#line 579
  dcdc->regulator = regulator_register(& dcdc->desc, & pdev->dev, (struct regulator_init_data  const  *)pdata->dcdc[id],
                                       (void *)dcdc, 0);
#line 581
  tmp___2 = IS_ERR((void const   *)dcdc->regulator);
#line 581
  if (tmp___2 != 0L) {
#line 582
    tmp___1 = PTR_ERR((void const   *)dcdc->regulator);
#line 582
    ret = (int )tmp___1;
#line 583
    dev_err((struct device  const  *)wm831x->dev, "Failed to register DCDC%d: %d\n",
            id + 1, ret);
#line 585
    goto err;
  } else {

  }
#line 588
  irq = platform_get_irq_byname(pdev, "UV");
#line 589
  ret = request_threaded_irq((unsigned int )irq, 0, & wm831x_dcdc_uv_irq, 1UL, (char const   *)(& dcdc->name),
                             (void *)dcdc);
#line 591
  if (ret != 0) {
#line 592
    dev_err((struct device  const  *)(& pdev->dev), "Failed to request UV IRQ %d: %d\n",
            irq, ret);
#line 594
    goto err_regulator;
  } else {

  }
#line 597
  irq = platform_get_irq_byname(pdev, "HC");
#line 598
  ret = request_threaded_irq((unsigned int )irq, 0, & wm831x_dcdc_oc_irq, 1UL, (char const   *)(& dcdc->name),
                             (void *)dcdc);
#line 600
  if (ret != 0) {
#line 601
    dev_err((struct device  const  *)(& pdev->dev), "Failed to request HC IRQ %d: %d\n",
            irq, ret);
#line 603
    goto err_uv;
  } else {

  }
#line 606
  platform_set_drvdata(pdev, (void *)dcdc);
#line 608
  return (0);
  err_uv: 
#line 611
  tmp___3 = platform_get_irq_byname(pdev, "UV");
#line 611
  free_irq((unsigned int )tmp___3, (void *)dcdc);
  err_regulator: 
#line 613
  regulator_unregister(dcdc->regulator);
  err: ;
#line 615
  if (dcdc->dvs_gpio != 0) {
#line 616
    gpio_free((unsigned int )dcdc->dvs_gpio);
  } else {

  }
#line 617
  kfree((void const   *)dcdc);
#line 618
  return (ret);
}
}
#line 621 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_remove(struct platform_device *pdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 623
  tmp = platform_get_drvdata((struct platform_device  const  *)pdev);
#line 623
  dcdc = (struct wm831x_dcdc *)tmp;
#line 625
  platform_set_drvdata(pdev, 0);
#line 627
  tmp___0 = platform_get_irq_byname(pdev, "HC");
#line 627
  free_irq((unsigned int )tmp___0, (void *)dcdc);
#line 628
  tmp___1 = platform_get_irq_byname(pdev, "UV");
#line 628
  free_irq((unsigned int )tmp___1, (void *)dcdc);
#line 629
  regulator_unregister(dcdc->regulator);
#line 630
  if (dcdc->dvs_gpio != 0) {
#line 631
    gpio_free((unsigned int )dcdc->dvs_gpio);
  } else {

  }
#line 632
  kfree((void const   *)dcdc);
#line 634
  return (0);
}
}
#line 637 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct platform_driver wm831x_buckv_driver  =    {& wm831x_buckv_probe, & wm831x_buckv_remove, 0, 0, 0, {"wm831x-buckv", 0, & __this_module,
                                                           0, (_Bool)0, 0, 0, 0, 0,
                                                           0, 0, 0, 0, 0}, 0};
#line 650 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckp_list_voltage(struct regulator_dev *rdev , unsigned int selector ) 
{ 


  {
#line 653
  if (selector <= 102U) {
#line 654
    return ((int )(selector * 25000U + 850000U));
  } else {
#line 656
    return (-22);
  }
}
}
#line 659 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckp_set_voltage_int(struct regulator_dev *rdev , int reg , int min_uV ,
                                        int max_uV , int *selector ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 vsel ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 662
  tmp = rdev_get_drvdata(rdev);
#line 662
  dcdc = (struct wm831x_dcdc *)tmp;
#line 663
  wm831x = dcdc->wm831x;
#line 666
  if (min_uV <= 34000000) {
#line 667
    vsel = (u16 )((min_uV + -850000) / 25000);
  } else {
#line 669
    return (-22);
  }
#line 671
  tmp___0 = wm831x_buckp_list_voltage(rdev, (unsigned int )vsel);
#line 671
  if (tmp___0 > max_uV) {
#line 672
    return (-22);
  } else {

  }
#line 674
  *selector = (int )vsel;
#line 676
  tmp___1 = wm831x_set_bits(wm831x, (int )((unsigned short )reg), 127, (int )vsel);
#line 676
  return (tmp___1);
}
}
#line 679 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckp_set_voltage(struct regulator_dev *rdev , int min_uV , int max_uV ,
                                    unsigned int *selector ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  u16 reg ;
  int tmp___0 ;

  {
#line 683
  tmp = rdev_get_drvdata(rdev);
#line 683
  dcdc = (struct wm831x_dcdc *)tmp;
#line 684
  reg = (unsigned int )((u16 )dcdc->base) + 2U;
#line 686
  tmp___0 = wm831x_buckp_set_voltage_int(rdev, (int )reg, min_uV, max_uV, (int *)selector);
#line 686
  return (tmp___0);
}
}
#line 690 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckp_set_suspend_voltage(struct regulator_dev *rdev , int uV ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  u16 reg ;
  unsigned int selector ;
  int tmp___0 ;

  {
#line 693
  tmp = rdev_get_drvdata(rdev);
#line 693
  dcdc = (struct wm831x_dcdc *)tmp;
#line 694
  reg = (unsigned int )((u16 )dcdc->base) + 3U;
#line 697
  tmp___0 = wm831x_buckp_set_voltage_int(rdev, (int )reg, uV, uV, (int *)(& selector));
#line 697
  return (tmp___0);
}
}
#line 700 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckp_get_voltage_sel(struct regulator_dev *rdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 reg ;
  int val ;

  {
#line 702
  tmp = rdev_get_drvdata(rdev);
#line 702
  dcdc = (struct wm831x_dcdc *)tmp;
#line 703
  wm831x = dcdc->wm831x;
#line 704
  reg = (unsigned int )((u16 )dcdc->base) + 2U;
#line 707
  val = wm831x_reg_read(wm831x, (int )reg);
#line 708
  if (val < 0) {
#line 709
    return (val);
  } else {

  }
#line 711
  return (val & 127);
}
}
#line 714 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct regulator_ops wm831x_buckp_ops  = 
#line 714
     {& wm831x_buckp_list_voltage, & wm831x_buckp_set_voltage, 0, 0, & wm831x_buckp_get_voltage_sel,
    0, 0, & wm831x_dcdc_enable, & wm831x_dcdc_disable, & wm831x_dcdc_is_enabled, & wm831x_dcdc_set_mode,
    & wm831x_dcdc_get_mode, 0, 0, & wm831x_dcdc_get_status, 0, & wm831x_buckp_set_suspend_voltage,
    0, 0, & wm831x_dcdc_set_suspend_mode};
#line 729 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckp_probe(struct platform_device *pdev ) 
{ 
  struct wm831x *wm831x ;
  void *tmp ;
  struct wm831x_pdata *pdata ;
  int id ;
  struct wm831x_dcdc *dcdc ;
  struct resource *res ;
  int ret ;
  int irq ;
  void *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 731
  tmp = dev_get_drvdata((struct device  const  *)pdev->dev.parent);
#line 731
  wm831x = (struct wm831x *)tmp;
#line 732
  pdata = (struct wm831x_pdata *)(wm831x->dev)->platform_data;
#line 738
  if ((unsigned long )pdata != (unsigned long )((struct wm831x_pdata *)0) && pdata->wm831x_num != 0) {
#line 739
    id = pdata->wm831x_num * 10 + 1;
  } else {
#line 741
    id = 0;
  }
#line 742
  id = pdev->id - id;
#line 744
  dev_printk("<7>", (struct device  const  *)(& pdev->dev), "Probing DCDC%d\n", id + 1);
#line 746
  if ((unsigned long )pdata == (unsigned long )((struct wm831x_pdata *)0) || (unsigned long )pdata->dcdc[id] == (unsigned long )((struct regulator_init_data *)0)) {
#line 747
    return (-19);
  } else {

  }
#line 749
  tmp___0 = kzalloc(88UL, 208U);
#line 749
  dcdc = (struct wm831x_dcdc *)tmp___0;
#line 750
  if ((unsigned long )dcdc == (unsigned long )((struct wm831x_dcdc *)0)) {
#line 751
    dev_err((struct device  const  *)(& pdev->dev), "Unable to allocate private data\n");
#line 752
    return (-12);
  } else {

  }
#line 755
  dcdc->wm831x = wm831x;
#line 757
  res = platform_get_resource(pdev, 256U, 0U);
#line 758
  if ((unsigned long )res == (unsigned long )((struct resource *)0)) {
#line 759
    dev_err((struct device  const  *)(& pdev->dev), "No I/O resource\n");
#line 760
    ret = -22;
#line 761
    goto err;
  } else {

  }
#line 763
  dcdc->base = (int )res->start;
#line 765
  snprintf((char *)(& dcdc->name), 6UL, "DCDC%d", id + 1);
#line 766
  dcdc->desc.name = (char const   *)(& dcdc->name);
#line 767
  dcdc->desc.id = id;
#line 768
  dcdc->desc.type = REGULATOR_VOLTAGE;
#line 769
  dcdc->desc.n_voltages = 103U;
#line 770
  dcdc->desc.ops = & wm831x_buckp_ops;
#line 771
  dcdc->desc.owner = & __this_module;
#line 773
  dcdc->regulator = regulator_register(& dcdc->desc, & pdev->dev, (struct regulator_init_data  const  *)pdata->dcdc[id],
                                       (void *)dcdc, 0);
#line 775
  tmp___2 = IS_ERR((void const   *)dcdc->regulator);
#line 775
  if (tmp___2 != 0L) {
#line 776
    tmp___1 = PTR_ERR((void const   *)dcdc->regulator);
#line 776
    ret = (int )tmp___1;
#line 777
    dev_err((struct device  const  *)wm831x->dev, "Failed to register DCDC%d: %d\n",
            id + 1, ret);
#line 779
    goto err;
  } else {

  }
#line 782
  irq = platform_get_irq_byname(pdev, "UV");
#line 783
  ret = request_threaded_irq((unsigned int )irq, 0, & wm831x_dcdc_uv_irq, 1UL, (char const   *)(& dcdc->name),
                             (void *)dcdc);
#line 785
  if (ret != 0) {
#line 786
    dev_err((struct device  const  *)(& pdev->dev), "Failed to request UV IRQ %d: %d\n",
            irq, ret);
#line 788
    goto err_regulator;
  } else {

  }
#line 791
  platform_set_drvdata(pdev, (void *)dcdc);
#line 793
  return (0);
  err_regulator: 
#line 796
  regulator_unregister(dcdc->regulator);
  err: 
#line 798
  kfree((void const   *)dcdc);
#line 799
  return (ret);
}
}
#line 802 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckp_remove(struct platform_device *pdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  int tmp___0 ;

  {
#line 804
  tmp = platform_get_drvdata((struct platform_device  const  *)pdev);
#line 804
  dcdc = (struct wm831x_dcdc *)tmp;
#line 806
  platform_set_drvdata(pdev, 0);
#line 808
  tmp___0 = platform_get_irq_byname(pdev, "UV");
#line 808
  free_irq((unsigned int )tmp___0, (void *)dcdc);
#line 809
  regulator_unregister(dcdc->regulator);
#line 810
  kfree((void const   *)dcdc);
#line 812
  return (0);
}
}
#line 815 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct platform_driver wm831x_buckp_driver  =    {& wm831x_buckp_probe, & wm831x_buckp_remove, 0, 0, 0, {"wm831x-buckp", 0, & __this_module,
                                                           0, (_Bool)0, 0, 0, 0, 0,
                                                           0, 0, 0, 0, 0}, 0};
#line 828 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_boostp_get_status(struct regulator_dev *rdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  int ret ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 830
  tmp = rdev_get_drvdata(rdev);
#line 830
  dcdc = (struct wm831x_dcdc *)tmp;
#line 831
  wm831x = dcdc->wm831x;
#line 835
  ret = wm831x_reg_read(wm831x, 16468);
#line 836
  if (ret < 0) {
#line 837
    return (ret);
  } else {

  }
#line 839
  tmp___1 = rdev_get_id(rdev);
#line 839
  if ((ret >> tmp___1) & 1) {
#line 840
    tmp___0 = rdev_get_id(rdev);
#line 840
    dev_printk("<7>", (struct device  const  *)wm831x->dev, "DCDC%d under voltage\n",
               tmp___0 + 1);
#line 842
    return (2);
  } else {

  }
#line 846
  ret = wm831x_reg_read(wm831x, 16466);
#line 847
  if (ret < 0) {
#line 848
    return (ret);
  } else {

  }
#line 849
  tmp___2 = rdev_get_id(rdev);
#line 849
  if ((ret >> tmp___2) & 1) {
#line 850
    return (1);
  } else {
#line 852
    return (0);
  }
}
}
#line 855 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct regulator_ops wm831x_boostp_ops  = 
#line 855
     {0, 0, 0, 0, 0, 0, 0, & wm831x_dcdc_enable, & wm831x_dcdc_disable, & wm831x_dcdc_is_enabled,
    0, 0, 0, 0, & wm831x_boostp_get_status, 0, 0, 0, 0, 0};
#line 863 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_boostp_probe(struct platform_device *pdev ) 
{ 
  struct wm831x *wm831x ;
  void *tmp ;
  struct wm831x_pdata *pdata ;
  int id ;
  struct wm831x_dcdc *dcdc ;
  struct resource *res ;
  int ret ;
  int irq ;
  void *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 865
  tmp = dev_get_drvdata((struct device  const  *)pdev->dev.parent);
#line 865
  wm831x = (struct wm831x *)tmp;
#line 866
  pdata = (struct wm831x_pdata *)(wm831x->dev)->platform_data;
#line 867
  id = pdev->id & 3;
#line 872
  dev_printk("<7>", (struct device  const  *)(& pdev->dev), "Probing DCDC%d\n", id + 1);
#line 874
  if ((unsigned long )pdata == (unsigned long )((struct wm831x_pdata *)0) || (unsigned long )pdata->dcdc[id] == (unsigned long )((struct regulator_init_data *)0)) {
#line 875
    return (-19);
  } else {

  }
#line 877
  tmp___0 = kzalloc(88UL, 208U);
#line 877
  dcdc = (struct wm831x_dcdc *)tmp___0;
#line 878
  if ((unsigned long )dcdc == (unsigned long )((struct wm831x_dcdc *)0)) {
#line 879
    dev_err((struct device  const  *)(& pdev->dev), "Unable to allocate private data\n");
#line 880
    return (-12);
  } else {

  }
#line 883
  dcdc->wm831x = wm831x;
#line 885
  res = platform_get_resource(pdev, 256U, 0U);
#line 886
  if ((unsigned long )res == (unsigned long )((struct resource *)0)) {
#line 887
    dev_err((struct device  const  *)(& pdev->dev), "No I/O resource\n");
#line 888
    ret = -22;
#line 889
    goto err;
  } else {

  }
#line 891
  dcdc->base = (int )res->start;
#line 893
  snprintf((char *)(& dcdc->name), 6UL, "DCDC%d", id + 1);
#line 894
  dcdc->desc.name = (char const   *)(& dcdc->name);
#line 895
  dcdc->desc.id = id;
#line 896
  dcdc->desc.type = REGULATOR_VOLTAGE;
#line 897
  dcdc->desc.ops = & wm831x_boostp_ops;
#line 898
  dcdc->desc.owner = & __this_module;
#line 900
  dcdc->regulator = regulator_register(& dcdc->desc, & pdev->dev, (struct regulator_init_data  const  *)pdata->dcdc[id],
                                       (void *)dcdc, 0);
#line 902
  tmp___2 = IS_ERR((void const   *)dcdc->regulator);
#line 902
  if (tmp___2 != 0L) {
#line 903
    tmp___1 = PTR_ERR((void const   *)dcdc->regulator);
#line 903
    ret = (int )tmp___1;
#line 904
    dev_err((struct device  const  *)wm831x->dev, "Failed to register DCDC%d: %d\n",
            id + 1, ret);
#line 906
    goto err;
  } else {

  }
#line 909
  irq = platform_get_irq_byname(pdev, "UV");
#line 910
  ret = request_threaded_irq((unsigned int )irq, 0, & wm831x_dcdc_uv_irq, 1UL, (char const   *)(& dcdc->name),
                             (void *)dcdc);
#line 913
  if (ret != 0) {
#line 914
    dev_err((struct device  const  *)(& pdev->dev), "Failed to request UV IRQ %d: %d\n",
            irq, ret);
#line 916
    goto err_regulator;
  } else {

  }
#line 919
  platform_set_drvdata(pdev, (void *)dcdc);
#line 921
  return (0);
  err_regulator: 
#line 924
  regulator_unregister(dcdc->regulator);
  err: 
#line 926
  kfree((void const   *)dcdc);
#line 927
  return (ret);
}
}
#line 930 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_boostp_remove(struct platform_device *pdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  int tmp___0 ;

  {
#line 932
  tmp = platform_get_drvdata((struct platform_device  const  *)pdev);
#line 932
  dcdc = (struct wm831x_dcdc *)tmp;
#line 934
  platform_set_drvdata(pdev, 0);
#line 936
  tmp___0 = platform_get_irq_byname(pdev, "UV");
#line 936
  free_irq((unsigned int )tmp___0, (void *)dcdc);
#line 937
  regulator_unregister(dcdc->regulator);
#line 938
  kfree((void const   *)dcdc);
#line 940
  return (0);
}
}
#line 943 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct platform_driver wm831x_boostp_driver  =    {& wm831x_boostp_probe, & wm831x_boostp_remove, 0, 0, 0, {"wm831x-boostp", 0, & __this_module,
                                                             0, (_Bool)0, 0, 0, 0,
                                                             0, 0, 0, 0, 0, 0}, 0};
#line 961 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct regulator_ops wm831x_epe_ops  = 
#line 961
     {0, 0, 0, 0, 0, 0, 0, & wm831x_dcdc_enable, & wm831x_dcdc_disable, & wm831x_dcdc_is_enabled,
    0, 0, 0, 0, & wm831x_dcdc_get_status, 0, 0, 0, 0, 0};
#line 968 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_epe_probe(struct platform_device *pdev ) 
{ 
  struct wm831x *wm831x ;
  void *tmp ;
  struct wm831x_pdata *pdata ;
  int id ;
  struct wm831x_dcdc *dcdc ;
  int ret ;
  void *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 970
  tmp = dev_get_drvdata((struct device  const  *)pdev->dev.parent);
#line 970
  wm831x = (struct wm831x *)tmp;
#line 971
  pdata = (struct wm831x_pdata *)(wm831x->dev)->platform_data;
#line 972
  id = pdev->id & 1;
#line 976
  dev_printk("<7>", (struct device  const  *)(& pdev->dev), "Probing EPE%d\n", id + 1);
#line 978
  if ((unsigned long )pdata == (unsigned long )((struct wm831x_pdata *)0) || (unsigned long )pdata->epe[id] == (unsigned long )((struct regulator_init_data *)0)) {
#line 979
    return (-19);
  } else {

  }
#line 981
  tmp___0 = kzalloc(88UL, 208U);
#line 981
  dcdc = (struct wm831x_dcdc *)tmp___0;
#line 982
  if ((unsigned long )dcdc == (unsigned long )((struct wm831x_dcdc *)0)) {
#line 983
    dev_err((struct device  const  *)(& pdev->dev), "Unable to allocate private data\n");
#line 984
    return (-12);
  } else {

  }
#line 987
  dcdc->wm831x = wm831x;
#line 992
  snprintf((char *)(& dcdc->name), 6UL, "EPE%d", id + 1);
#line 993
  dcdc->desc.name = (char const   *)(& dcdc->name);
#line 994
  dcdc->desc.id = id + 6;
#line 995
  dcdc->desc.ops = & wm831x_epe_ops;
#line 996
  dcdc->desc.type = REGULATOR_VOLTAGE;
#line 997
  dcdc->desc.owner = & __this_module;
#line 999
  dcdc->regulator = regulator_register(& dcdc->desc, & pdev->dev, (struct regulator_init_data  const  *)pdata->epe[id],
                                       (void *)dcdc, 0);
#line 1001
  tmp___2 = IS_ERR((void const   *)dcdc->regulator);
#line 1001
  if (tmp___2 != 0L) {
#line 1002
    tmp___1 = PTR_ERR((void const   *)dcdc->regulator);
#line 1002
    ret = (int )tmp___1;
#line 1003
    dev_err((struct device  const  *)wm831x->dev, "Failed to register EPE%d: %d\n",
            id + 1, ret);
#line 1005
    goto err;
  } else {

  }
#line 1008
  platform_set_drvdata(pdev, (void *)dcdc);
#line 1010
  return (0);
  err: 
#line 1013
  kfree((void const   *)dcdc);
#line 1014
  return (ret);
}
}
#line 1017 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_epe_remove(struct platform_device *pdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;

  {
#line 1019
  tmp = platform_get_drvdata((struct platform_device  const  *)pdev);
#line 1019
  dcdc = (struct wm831x_dcdc *)tmp;
#line 1021
  platform_set_drvdata(pdev, 0);
#line 1023
  regulator_unregister(dcdc->regulator);
#line 1024
  kfree((void const   *)dcdc);
#line 1026
  return (0);
}
}
#line 1029 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct platform_driver wm831x_epe_driver  =    {& wm831x_epe_probe, & wm831x_epe_remove, 0, 0, 0, {"wm831x-epe", 0, & __this_module,
                                                       0, (_Bool)0, 0, 0, 0, 0, 0,
                                                       0, 0, 0, 0}, 0};
#line 1038 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_dcdc_init(void) 
{ 
  int ret ;

  {
#line 1041
  ret = platform_driver_register(& wm831x_buckv_driver);
#line 1042
  if (ret != 0) {
#line 1043
    printk("<3>Failed to register WM831x BUCKV driver: %d\n", ret);
  } else {

  }
#line 1045
  ret = platform_driver_register(& wm831x_buckp_driver);
#line 1046
  if (ret != 0) {
#line 1047
    printk("<3>Failed to register WM831x BUCKP driver: %d\n", ret);
  } else {

  }
#line 1049
  ret = platform_driver_register(& wm831x_boostp_driver);
#line 1050
  if (ret != 0) {
#line 1051
    printk("<3>Failed to register WM831x BOOST driver: %d\n", ret);
  } else {

  }
#line 1053
  ret = platform_driver_register(& wm831x_epe_driver);
#line 1054
  if (ret != 0) {
#line 1055
    printk("<3>Failed to register WM831x EPE driver: %d\n", ret);
  } else {

  }
#line 1057
  return (0);
}
}
#line 1061 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static void wm831x_dcdc_exit(void) 
{ 


  {
#line 1063
  platform_driver_unregister(& wm831x_epe_driver);
#line 1064
  platform_driver_unregister(& wm831x_boostp_driver);
#line 1065
  platform_driver_unregister(& wm831x_buckp_driver);
#line 1066
  platform_driver_unregister(& wm831x_buckv_driver);
#line 1067
  return;
}
}
#line 1094
void ldv_check_final_state(void) ;
#line 1097
extern void ldv_check_return_value(int  ) ;
#line 1100
extern void ldv_check_return_value_probe(int  ) ;
#line 1103
void ldv_initialize(void) ;
#line 1106
extern void ldv_handler_precall(void) ;
#line 1109
extern int nondet_int(void) ;
#line 1112 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 1115 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
void main(void) 
{ 
  struct regulator_dev *var_group1 ;
  int var_wm831x_buckv_set_voltage_13_p1 ;
  int var_wm831x_buckv_set_voltage_13_p2 ;
  unsigned int *var_wm831x_buckv_set_voltage_13_p3 ;
  unsigned int var_wm831x_buckv_list_voltage_10_p1 ;
  int var_wm831x_buckv_set_suspend_voltage_14_p1 ;
  int var_wm831x_buckv_set_current_limit_16_p1 ;
  int var_wm831x_buckv_set_current_limit_16_p2 ;
  unsigned int var_wm831x_dcdc_set_mode_5_p1 ;
  unsigned int var_wm831x_dcdc_set_suspend_mode_6_p1 ;
  struct platform_device *var_group2 ;
  int res_wm831x_buckv_probe_19 ;
  int var_wm831x_buckp_set_voltage_23_p1 ;
  int var_wm831x_buckp_set_voltage_23_p2 ;
  unsigned int *var_wm831x_buckp_set_voltage_23_p3 ;
  unsigned int var_wm831x_buckp_list_voltage_21_p1 ;
  int var_wm831x_buckp_set_suspend_voltage_24_p1 ;
  int res_wm831x_buckp_probe_26 ;
  int res_wm831x_boostp_probe_29 ;
  int res_wm831x_epe_probe_31 ;
  int var_wm831x_dcdc_oc_irq_9_p0 ;
  void *var_wm831x_dcdc_oc_irq_9_p1 ;
  int var_wm831x_dcdc_uv_irq_8_p0 ;
  void *var_wm831x_dcdc_uv_irq_8_p1 ;
  int ldv_s_wm831x_buckv_driver_platform_driver ;
  int ldv_s_wm831x_buckp_driver_platform_driver ;
  int ldv_s_wm831x_boostp_driver_platform_driver ;
  int ldv_s_wm831x_epe_driver_platform_driver ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1979
  ldv_s_wm831x_buckv_driver_platform_driver = 0;
#line 1983
  ldv_s_wm831x_buckp_driver_platform_driver = 0;
#line 1987
  ldv_s_wm831x_boostp_driver_platform_driver = 0;
#line 1991
  ldv_s_wm831x_epe_driver_platform_driver = 0;
#line 1945
  LDV_IN_INTERRUPT = 1;
#line 1954
  ldv_initialize();
#line 1974
  ldv_handler_precall();
#line 1975
  tmp = wm831x_dcdc_init();
#line 1975
  if (tmp != 0) {
#line 1976
    goto ldv_final;
  } else {

  }
#line 1996
  goto ldv_25025;
  ldv_25024: 
#line 2003
  tmp___0 = nondet_int();
#line 2003
  switch (tmp___0) {
  case 0: 
#line 2026
  ldv_handler_precall();
#line 2027
  wm831x_buckv_set_voltage(var_group1, var_wm831x_buckv_set_voltage_13_p1, var_wm831x_buckv_set_voltage_13_p2,
                           var_wm831x_buckv_set_voltage_13_p3);
#line 2037
  goto ldv_24980;
  case 1: 
#line 2059
  ldv_handler_precall();
#line 2060
  wm831x_buckv_get_voltage_sel(var_group1);
#line 2070
  goto ldv_24980;
  case 2: 
#line 2092
  ldv_handler_precall();
#line 2093
  wm831x_buckv_list_voltage(var_group1, var_wm831x_buckv_list_voltage_10_p1);
#line 2103
  goto ldv_24980;
  case 3: 
#line 2125
  ldv_handler_precall();
#line 2126
  wm831x_buckv_set_suspend_voltage(var_group1, var_wm831x_buckv_set_suspend_voltage_14_p1);
#line 2136
  goto ldv_24980;
  case 4: 
#line 2158
  ldv_handler_precall();
#line 2159
  wm831x_buckv_set_current_limit(var_group1, var_wm831x_buckv_set_current_limit_16_p1,
                                 var_wm831x_buckv_set_current_limit_16_p2);
#line 2169
  goto ldv_24980;
  case 5: 
#line 2191
  ldv_handler_precall();
#line 2192
  wm831x_buckv_get_current_limit(var_group1);
#line 2202
  goto ldv_24980;
  case 6: 
#line 2224
  ldv_handler_precall();
#line 2225
  wm831x_dcdc_is_enabled(var_group1);
#line 2235
  goto ldv_24980;
  case 7: 
#line 2257
  ldv_handler_precall();
#line 2258
  wm831x_dcdc_enable(var_group1);
#line 2268
  goto ldv_24980;
  case 8: 
#line 2290
  ldv_handler_precall();
#line 2291
  wm831x_dcdc_disable(var_group1);
#line 2301
  goto ldv_24980;
  case 9: 
#line 2323
  ldv_handler_precall();
#line 2324
  wm831x_dcdc_get_status(var_group1);
#line 2334
  goto ldv_24980;
  case 10: 
#line 2356
  ldv_handler_precall();
#line 2357
  wm831x_dcdc_get_mode(var_group1);
#line 2367
  goto ldv_24980;
  case 11: 
#line 2389
  ldv_handler_precall();
#line 2390
  wm831x_dcdc_set_mode(var_group1, var_wm831x_dcdc_set_mode_5_p1);
#line 2400
  goto ldv_24980;
  case 12: 
#line 2422
  ldv_handler_precall();
#line 2423
  wm831x_dcdc_set_suspend_mode(var_group1, var_wm831x_dcdc_set_suspend_mode_6_p1);
#line 2433
  goto ldv_24980;
  case 13: ;
#line 2437
  if (ldv_s_wm831x_buckv_driver_platform_driver == 0) {
#line 2455
    res_wm831x_buckv_probe_19 = wm831x_buckv_probe(var_group2);
#line 2456
    ldv_check_return_value(res_wm831x_buckv_probe_19);
#line 2457
    ldv_check_return_value_probe(res_wm831x_buckv_probe_19);
#line 2458
    if (res_wm831x_buckv_probe_19 != 0) {
#line 2459
      goto ldv_module_exit;
    } else {

    }
#line 2463
    ldv_s_wm831x_buckv_driver_platform_driver = ldv_s_wm831x_buckv_driver_platform_driver + 1;
  } else {

  }
#line 2469
  goto ldv_24980;
  case 14: ;
#line 2473
  if (ldv_s_wm831x_buckv_driver_platform_driver == 1) {
#line 2491
    ldv_handler_precall();
#line 2492
    wm831x_buckv_remove(var_group2);
#line 2496
    ldv_s_wm831x_buckv_driver_platform_driver = 0;
  } else {

  }
#line 2502
  goto ldv_24980;
  case 15: 
#line 2524
  ldv_handler_precall();
#line 2525
  wm831x_buckp_set_voltage(var_group1, var_wm831x_buckp_set_voltage_23_p1, var_wm831x_buckp_set_voltage_23_p2,
                           var_wm831x_buckp_set_voltage_23_p3);
#line 2535
  goto ldv_24980;
  case 16: 
#line 2557
  ldv_handler_precall();
#line 2558
  wm831x_buckp_get_voltage_sel(var_group1);
#line 2568
  goto ldv_24980;
  case 17: 
#line 2590
  ldv_handler_precall();
#line 2591
  wm831x_buckp_list_voltage(var_group1, var_wm831x_buckp_list_voltage_21_p1);
#line 2601
  goto ldv_24980;
  case 18: 
#line 2623
  ldv_handler_precall();
#line 2624
  wm831x_buckp_set_suspend_voltage(var_group1, var_wm831x_buckp_set_suspend_voltage_24_p1);
#line 2634
  goto ldv_24980;
  case 19: 
#line 2656
  ldv_handler_precall();
#line 2657
  wm831x_dcdc_is_enabled(var_group1);
#line 2667
  goto ldv_24980;
  case 20: 
#line 2689
  ldv_handler_precall();
#line 2690
  wm831x_dcdc_enable(var_group1);
#line 2700
  goto ldv_24980;
  case 21: 
#line 2722
  ldv_handler_precall();
#line 2723
  wm831x_dcdc_disable(var_group1);
#line 2733
  goto ldv_24980;
  case 22: 
#line 2755
  ldv_handler_precall();
#line 2756
  wm831x_dcdc_get_status(var_group1);
#line 2766
  goto ldv_24980;
  case 23: 
#line 2788
  ldv_handler_precall();
#line 2789
  wm831x_dcdc_get_mode(var_group1);
#line 2799
  goto ldv_24980;
  case 24: 
#line 2821
  ldv_handler_precall();
#line 2822
  wm831x_dcdc_set_mode(var_group1, var_wm831x_dcdc_set_mode_5_p1);
#line 2832
  goto ldv_24980;
  case 25: 
#line 2854
  ldv_handler_precall();
#line 2855
  wm831x_dcdc_set_suspend_mode(var_group1, var_wm831x_dcdc_set_suspend_mode_6_p1);
#line 2865
  goto ldv_24980;
  case 26: ;
#line 2869
  if (ldv_s_wm831x_buckp_driver_platform_driver == 0) {
#line 2887
    res_wm831x_buckp_probe_26 = wm831x_buckp_probe(var_group2);
#line 2888
    ldv_check_return_value(res_wm831x_buckp_probe_26);
#line 2889
    ldv_check_return_value_probe(res_wm831x_buckp_probe_26);
#line 2890
    if (res_wm831x_buckp_probe_26 != 0) {
#line 2891
      goto ldv_module_exit;
    } else {

    }
#line 2895
    ldv_s_wm831x_buckp_driver_platform_driver = ldv_s_wm831x_buckp_driver_platform_driver + 1;
  } else {

  }
#line 2901
  goto ldv_24980;
  case 27: ;
#line 2905
  if (ldv_s_wm831x_buckp_driver_platform_driver == 1) {
#line 2923
    ldv_handler_precall();
#line 2924
    wm831x_buckp_remove(var_group2);
#line 2928
    ldv_s_wm831x_buckp_driver_platform_driver = 0;
  } else {

  }
#line 2934
  goto ldv_24980;
  case 28: 
#line 2956
  ldv_handler_precall();
#line 2957
  wm831x_boostp_get_status(var_group1);
#line 2967
  goto ldv_24980;
  case 29: 
#line 2989
  ldv_handler_precall();
#line 2990
  wm831x_dcdc_is_enabled(var_group1);
#line 3000
  goto ldv_24980;
  case 30: 
#line 3022
  ldv_handler_precall();
#line 3023
  wm831x_dcdc_enable(var_group1);
#line 3033
  goto ldv_24980;
  case 31: 
#line 3055
  ldv_handler_precall();
#line 3056
  wm831x_dcdc_disable(var_group1);
#line 3066
  goto ldv_24980;
  case 32: ;
#line 3070
  if (ldv_s_wm831x_boostp_driver_platform_driver == 0) {
#line 3088
    res_wm831x_boostp_probe_29 = wm831x_boostp_probe(var_group2);
#line 3089
    ldv_check_return_value(res_wm831x_boostp_probe_29);
#line 3090
    ldv_check_return_value_probe(res_wm831x_boostp_probe_29);
#line 3091
    if (res_wm831x_boostp_probe_29 != 0) {
#line 3092
      goto ldv_module_exit;
    } else {

    }
#line 3096
    ldv_s_wm831x_boostp_driver_platform_driver = ldv_s_wm831x_boostp_driver_platform_driver + 1;
  } else {

  }
#line 3102
  goto ldv_24980;
  case 33: ;
#line 3106
  if (ldv_s_wm831x_boostp_driver_platform_driver == 1) {
#line 3124
    ldv_handler_precall();
#line 3125
    wm831x_boostp_remove(var_group2);
#line 3129
    ldv_s_wm831x_boostp_driver_platform_driver = 0;
  } else {

  }
#line 3135
  goto ldv_24980;
  case 34: 
#line 3157
  ldv_handler_precall();
#line 3158
  wm831x_dcdc_is_enabled(var_group1);
#line 3168
  goto ldv_24980;
  case 35: 
#line 3190
  ldv_handler_precall();
#line 3191
  wm831x_dcdc_enable(var_group1);
#line 3201
  goto ldv_24980;
  case 36: 
#line 3223
  ldv_handler_precall();
#line 3224
  wm831x_dcdc_disable(var_group1);
#line 3234
  goto ldv_24980;
  case 37: 
#line 3256
  ldv_handler_precall();
#line 3257
  wm831x_dcdc_get_status(var_group1);
#line 3267
  goto ldv_24980;
  case 38: ;
#line 3271
  if (ldv_s_wm831x_epe_driver_platform_driver == 0) {
#line 3290
    res_wm831x_epe_probe_31 = wm831x_epe_probe(var_group2);
#line 3291
    ldv_check_return_value(res_wm831x_epe_probe_31);
#line 3292
    ldv_check_return_value_probe(res_wm831x_epe_probe_31);
#line 3293
    if (res_wm831x_epe_probe_31 != 0) {
#line 3294
      goto ldv_module_exit;
    } else {

    }
#line 3295
    ldv_s_wm831x_epe_driver_platform_driver = ldv_s_wm831x_epe_driver_platform_driver + 1;
  } else {

  }
#line 3301
  goto ldv_24980;
  case 39: ;
#line 3305
  if (ldv_s_wm831x_epe_driver_platform_driver == 1) {
#line 3324
    ldv_handler_precall();
#line 3325
    wm831x_epe_remove(var_group2);
#line 3326
    ldv_s_wm831x_epe_driver_platform_driver = 0;
  } else {

  }
#line 3332
  goto ldv_24980;
  case 40: 
#line 3336
  LDV_IN_INTERRUPT = 2;
#line 3354
  ldv_handler_precall();
#line 3355
  wm831x_dcdc_oc_irq(var_wm831x_dcdc_oc_irq_9_p0, var_wm831x_dcdc_oc_irq_9_p1);
#line 3359
  LDV_IN_INTERRUPT = 1;
#line 3365
  goto ldv_24980;
  case 41: 
#line 3369
  LDV_IN_INTERRUPT = 2;
#line 3387
  ldv_handler_precall();
#line 3388
  wm831x_dcdc_uv_irq(var_wm831x_dcdc_uv_irq_8_p0, var_wm831x_dcdc_uv_irq_8_p1);
#line 3392
  LDV_IN_INTERRUPT = 1;
#line 3398
  goto ldv_24980;
  default: ;
#line 3399
  goto ldv_24980;
  }
  ldv_24980: ;
  ldv_25025: 
#line 1996
  tmp___1 = nondet_int();
#line 1996
  if ((((tmp___1 != 0 || ldv_s_wm831x_buckv_driver_platform_driver != 0) || ldv_s_wm831x_buckp_driver_platform_driver != 0) || ldv_s_wm831x_boostp_driver_platform_driver != 0) || ldv_s_wm831x_epe_driver_platform_driver != 0) {
#line 2001
    goto ldv_25024;
  } else {

  }

  ldv_module_exit: 
#line 3425
  ldv_handler_precall();
#line 3426
  wm831x_dcdc_exit();
  ldv_final: 
#line 3429
  ldv_check_final_state();
#line 3432
  return;
}
}
#line 3436 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3441
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 3443
  mutex_lock(ldv_func_arg1);
#line 3444
  return;
}
}
#line 3446 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 3451
  tmp = mutex_trylock(ldv_func_arg1);
#line 3451
  ldv_func_res = tmp;
#line 3453
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 3453
  return (tmp___0);
#line 3455
  return (ldv_func_res);
}
}
#line 3458 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3463
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 3465
  mutex_unlock(ldv_func_arg1);
#line 3466
  return;
}
}
#line 3468 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3473
  ldv_mutex_lock_pm_mutex(ldv_func_arg1);
#line 3475
  mutex_lock(ldv_func_arg1);
#line 3476
  return;
}
}
#line 3478 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3483
  ldv_mutex_unlock_pm_mutex(ldv_func_arg1);
#line 3485
  mutex_unlock(ldv_func_arg1);
#line 3486
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_mutex_of_device = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_mutex_of_device = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_mutex_of_device = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_mutex_of_device = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_mutex_of_device = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_mutex_of_device == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_mutex_of_device = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_pm_mutex  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_pm_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_pm_mutex == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_pm_mutex = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_pm_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_pm_mutex == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_pm_mutex = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_pm_mutex(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_pm_mutex == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_pm_mutex = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_pm_mutex(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_pm_mutex == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_pm_mutex = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_pm_mutex(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_pm_mutex == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_pm_mutex = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_pm_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_pm_mutex == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_pm_mutex(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_pm_mutex == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_pm_mutex = 1;
#line 310
  return;
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 317
  ldv_mutex_mutex_of_device = 1;
#line 319
  ldv_mutex_pm_mutex = 1;
#line 320
  return;
}
}
#line 323 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 326
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 326
    ldv_error();
  }
#line 328
  if (ldv_mutex_pm_mutex == 1) {

  } else {
#line 328
    ldv_error();
  }
#line 329
  return;
}
}
