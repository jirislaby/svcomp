/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 45 "include/asm-generic/int-ll64.h"
typedef short s16;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "include/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "include/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 31 "include/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 52 "include/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 53 "include/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 75 "include/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 76 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 91 "include/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 92 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 93 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 94 "include/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 95 "include/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 27 "include/linux/types.h"
typedef unsigned short umode_t;
#line 30 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 35 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 38 "include/linux/types.h"
typedef _Bool bool;
#line 40 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 41 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 54 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 63 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 68 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 78 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 111 "include/linux/types.h"
typedef __s32 int32_t;
#line 117 "include/linux/types.h"
typedef __u32 uint32_t;
#line 202 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 206 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 211 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 217 "include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 221 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 221 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 226 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 226 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 227 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 232
struct hlist_node;
#line 232 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 236 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 247 "include/linux/types.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 146 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 318 "include/linux/printk.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned char flags ;
};
#line 48 "include/linux/dynamic_debug.h"
struct device;
#line 60
struct completion;
#line 61
struct pt_regs;
#line 350 "include/linux/kernel.h"
struct pid;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_2009_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_2009_8 ldv_2009 ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct task_struct;
#line 35
struct lockdep_map;
#line 18 "include/linux/lockdep.h"
struct mm_struct;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2133_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2148_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2149_11 {
   struct __anonstruct_ldv_2133_12 ldv_2133 ;
   struct __anonstruct_ldv_2148_13 ldv_2148 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2149_11 ldv_2149 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_15 pgd_t;
#line 282
struct page;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 290
struct file;
#line 337
struct thread_struct;
#line 339
struct cpumask;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2777_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2777_18 ldv_2777 ;
};
#line 306 "include/linux/bitmap.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 89 "include/linux/bug.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 14 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 637 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 234 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 287 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5151_23 {
   u64 rip ;
   u64 rdp ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5157_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5158_22 {
   struct __anonstruct_ldv_5151_23 ldv_5151 ;
   struct __anonstruct_ldv_5157_24 ldv_5157 ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5167_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5158_22 ldv_5158 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5167_25 ldv_5167 ;
};
#line 339 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 360 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 365 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 377 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 385 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 433
struct kmem_cache;
#line 434
struct perf_event;
#line 435 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 574 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5988_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5989_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5988_29 ldv_5988 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5989_28 ldv_5989 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 133 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 254 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 83 "include/linux/highuid.h"
struct user_namespace;
#line 46 "include/linux/uidgid.h"
typedef uid_t kuid_t;
#line 47 "include/linux/uidgid.h"
typedef gid_t kgid_t;
#line 48 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 53 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
#line 703 "include/linux/mmzone.h"
struct rw_semaphore;
#line 704 "include/linux/mmzone.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 128 "include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 189 "include/linux/rcupdate.h"
struct notifier_block;
#line 312 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 341
struct tvec_base;
#line 342 "include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 289 "include/linux/timer.h"
struct hrtimer;
#line 290
enum hrtimer_restart;
#line 302
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 269 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 60 "include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 139 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 289
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 296
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 304
struct wakeup_source;
#line 494 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 499
struct dev_pm_qos_request;
#line 499
struct pm_qos_constraints;
#line 499 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct dev_pm_qos_request *pq_req ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
#line 556 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 18 "include/asm-generic/pci_iomap.h"
struct vm_area_struct;
#line 835 "include/linux/sysctl.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 176
struct nsproxy;
#line 37 "include/linux/kmod.h"
struct cred;
#line 18 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 19 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 23 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 24 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 193 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 201 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 445
struct sock;
#line 446
struct kobject;
#line 447
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 453 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 63 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 110 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 129
struct sysfs_dirent;
#line 194 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 215
struct kernel_param;
#line 216 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string;
#line 49
struct kparam_array;
#line 49 "include/linux/moduleparam.h"
union __anonunion_ldv_13607_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 49 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_13607_134 ldv_13607 ;
};
#line 61 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 67 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 459 "include/linux/moduleparam.h"
struct static_key {
   atomic_t enabled ;
};
#line 225 "include/linux/jump_label.h"
struct tracepoint;
#line 226 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct mod_arch_specific {

};
#line 34 "include/linux/module.h"
struct module_param_attrs;
#line 34 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 43 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 69
struct exception_table_entry;
#line 198
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 204 "include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 219
struct module_sect_attrs;
#line 219
struct module_notes_attrs;
#line 219
struct ftrace_event_call;
#line 219 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 217 "include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 494 "include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 586
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 42 "include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "include/linux/ratelimit.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct pdev_archdata {

};
#line 17
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24
struct iommu_ops;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 52 "include/linux/device.h"
struct device_attribute;
#line 52
struct driver_attribute;
#line 52 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 126
struct device_type;
#line 183 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 246 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 300
struct class_attribute;
#line 300 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 395 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 448 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 475 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 563 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 573
struct dma_coherent_mem;
#line 573 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 691 "include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 105
struct dentry;
#line 559
struct prio_tree_node;
#line 559 "include/linux/capability.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_trap_nr ;
   unsigned long saved_scratch_register ;
};
#line 58 "include/linux/uprobes.h"
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_BP_HIT = 1,
    UTASK_SSTEP = 2,
    UTASK_SSTEP_ACK = 3,
    UTASK_SSTEP_TRAPPED = 4
} ;
#line 66
struct uprobe;
#line 66 "include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
#line 80 "include/linux/uprobes.h"
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
#line 99 "include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
   atomic_t count ;
};
#line 121
struct address_space;
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_15365_138 {
   unsigned long index ;
   void *freelist ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_15375_142 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_15376_141 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_15375_142 ldv_15375 ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_15378_140 {
   union __anonunion_ldv_15376_141 ldv_15376 ;
   atomic_t _count ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_15379_139 {
   unsigned long counters ;
   struct __anonstruct_ldv_15378_140 ldv_15378 ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_15380_137 {
   union __anonunion_ldv_15365_138 ldv_15365 ;
   union __anonunion_ldv_15379_139 ldv_15379 ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_15387_144 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_15388_143 {
   struct list_head lru ;
   struct __anonstruct_ldv_15387_144 ldv_15387 ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_15393_145 {
   unsigned long private ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 122 "include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_15380_137 ldv_15380 ;
   union __anonunion_ldv_15388_143 ldv_15388 ;
   union __anonunion_ldv_15393_145 ldv_15393 ;
   unsigned long debug_flags ;
};
#line 193 "include/linux/mm_types.h"
struct __anonstruct_vm_set_147 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 193 "include/linux/mm_types.h"
union __anonunion_shared_146 {
   struct __anonstruct_vm_set_147 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 193
struct anon_vma;
#line 193
struct vm_operations_struct;
#line 193
struct mempolicy;
#line 193 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_146 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 256 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 262 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 275 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 288
struct linux_binfmt;
#line 288
struct mmu_notifier_mm;
#line 288 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   struct uprobes_state uprobes_state ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 98 "include/linux/sem.h"
struct sem_undo_list;
#line 98 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 107
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_148 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_148 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_150 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_151 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_152 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_153 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_154 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_155 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigsys_156 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_149 {
   int _pad[28U] ;
   struct __anonstruct__kill_150 _kill ;
   struct __anonstruct__timer_151 _timer ;
   struct __anonstruct__rt_152 _rt ;
   struct __anonstruct__sigchld_153 _sigchld ;
   struct __anonstruct__sigfault_154 _sigfault ;
   struct __anonstruct__sigpoll_155 _sigpoll ;
   struct __anonstruct__sigsys_156 _sigsys ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_149 _sifields ;
};
#line 109 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 14 "include/linux/signal.h"
struct user_struct;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 396
struct pid_namespace;
#line 396 "include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 46 "include/linux/seccomp.h"
struct seccomp_filter;
#line 47 "include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 457 "include/linux/rculist.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 85 "include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned long active_bases ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 452 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct key;
#line 34
struct signal_struct;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 115 "include/linux/key.h"
union __anonunion_ldv_16646_159 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_16655_160 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_161 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_162 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_16646_159 ldv_16646 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_16655_160 ldv_16655 ;
   time_t last_used_at ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_161 type_data ;
   union __anonunion_payload_162 payload ;
};
#line 322
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 92 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 362
struct llist_node;
#line 64 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 185
struct futex_pi_state;
#line 186
struct robust_list_head;
#line 187
struct bio_list;
#line 188
struct fs_struct;
#line 189
struct perf_event_context;
#line 190
struct blk_plug;
#line 150 "include/linux/sched.h"
struct cfs_rq;
#line 407 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 450 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 458 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 465 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 482 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 518
struct autogroup;
#line 519
struct tty_struct;
#line 519
struct taskstats;
#line 519
struct tty_audit_buf;
#line 519 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   int oom_adj ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 700 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 744
struct backing_dev_info;
#line 745
struct reclaim_state;
#line 746 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 760 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1022
struct io_context;
#line 1050
struct pipe_inode_info;
#line 1052
struct rq;
#line 1053 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1118 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1123 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1158 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1184
struct rt_rq;
#line 1184 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1208
struct mem_cgroup;
#line 1208 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1571
struct files_struct;
#line 1571
struct css_set;
#line 1571
struct compat_robust_list_head;
#line 1571 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   unsigned char irq_thread : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
   int uprobe_srcu_id ;
};
#line 28 "include/linux/of.h"
typedef u32 phandle;
#line 30 "include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
};
#line 39
struct proc_dir_entry;
#line 39 "include/linux/of.h"
struct device_node {
   char const   *name ;
   char const   *type ;
   phandle phandle ;
   char *full_name ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct device_node *next ;
   struct device_node *allnext ;
   struct proc_dir_entry *pde ;
   struct kref kref ;
   unsigned long _flags ;
   void *data ;
};
#line 602 "include/linux/i2c.h"
struct mfd_cell;
#line 603 "include/linux/i2c.h"
struct platform_device {
   char const   *name ;
   int id ;
   struct device dev ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id  const  *id_entry ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 163 "include/linux/platform_device.h"
struct platform_driver {
   int (*probe)(struct platform_device * ) ;
   int (*remove)(struct platform_device * ) ;
   void (*shutdown)(struct platform_device * ) ;
   int (*suspend)(struct platform_device * , pm_message_t  ) ;
   int (*resume)(struct platform_device * ) ;
   struct device_driver driver ;
   struct platform_device_id  const  *id_table ;
};
#line 272
struct regulator;
#line 189 "include/linux/regulator/consumer.h"
struct regmap;
#line 190
struct regulator_dev;
#line 191
struct regulator_init_data;
#line 202 "include/linux/regulator/consumer.h"
struct regulator_ops {
   int (*list_voltage)(struct regulator_dev * , unsigned int  ) ;
   int (*set_voltage)(struct regulator_dev * , int  , int  , unsigned int * ) ;
   int (*map_voltage)(struct regulator_dev * , int  , int  ) ;
   int (*set_voltage_sel)(struct regulator_dev * , unsigned int  ) ;
   int (*get_voltage)(struct regulator_dev * ) ;
   int (*get_voltage_sel)(struct regulator_dev * ) ;
   int (*set_current_limit)(struct regulator_dev * , int  , int  ) ;
   int (*get_current_limit)(struct regulator_dev * ) ;
   int (*enable)(struct regulator_dev * ) ;
   int (*disable)(struct regulator_dev * ) ;
   int (*is_enabled)(struct regulator_dev * ) ;
   int (*set_mode)(struct regulator_dev * , unsigned int  ) ;
   unsigned int (*get_mode)(struct regulator_dev * ) ;
   int (*enable_time)(struct regulator_dev * ) ;
   int (*set_voltage_time_sel)(struct regulator_dev * , unsigned int  , unsigned int  ) ;
   int (*get_status)(struct regulator_dev * ) ;
   unsigned int (*get_optimum_mode)(struct regulator_dev * , int  , int  , int  ) ;
   int (*set_suspend_voltage)(struct regulator_dev * , int  ) ;
   int (*set_suspend_enable)(struct regulator_dev * ) ;
   int (*set_suspend_disable)(struct regulator_dev * ) ;
   int (*set_suspend_mode)(struct regulator_dev * , unsigned int  ) ;
};
#line 144 "include/linux/regulator/driver.h"
enum regulator_type {
    REGULATOR_VOLTAGE = 0,
    REGULATOR_CURRENT = 1
} ;
#line 149 "include/linux/regulator/driver.h"
struct regulator_desc {
   char const   *name ;
   char const   *supply_name ;
   int id ;
   unsigned int n_voltages ;
   struct regulator_ops *ops ;
   int irq ;
   enum regulator_type type ;
   struct module *owner ;
   unsigned int min_uV ;
   unsigned int uV_step ;
   unsigned int vsel_reg ;
   unsigned int vsel_mask ;
   unsigned int enable_reg ;
   unsigned int enable_mask ;
};
#line 197 "include/linux/regulator/driver.h"
struct regulator_config {
   struct device *dev ;
   struct regulator_init_data  const  *init_data ;
   void *driver_data ;
   struct device_node *of_node ;
   struct regmap *regmap ;
};
#line 219
struct regulation_constraints;
#line 219 "include/linux/regulator/driver.h"
struct regulator_dev {
   struct regulator_desc  const  *desc ;
   int exclusive ;
   u32 use_count ;
   u32 open_count ;
   struct list_head list ;
   struct list_head consumer_list ;
   struct blocking_notifier_head notifier ;
   struct mutex mutex ;
   struct module *owner ;
   struct device dev ;
   struct regulation_constraints *constraints ;
   struct regulator *supply ;
   struct regmap *regmap ;
   struct delayed_work disable_work ;
   int deferred_disables ;
   void *reg_data ;
   struct dentry *debugfs ;
};
#line 285 "include/linux/regulator/driver.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 154 "include/linux/idr.h"
struct cgroupfs_root;
#line 156
struct cgroup;
#line 157
struct css_id;
#line 57 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
   struct work_struct dput_work ;
};
#line 150 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head files ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head allcg_node ;
   struct list_head cft_q_node ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 220 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 108 "include/linux/swap.h"
struct reclaim_state {
   unsigned long reclaimed_slab ;
};
#line 178 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 195 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 34 "include/linux/suspend.h"
typedef int suspend_state_t;
#line 455 "include/linux/suspend.h"
struct regulator_state {
   int uV ;
   unsigned int mode ;
   int enabled ;
   int disabled ;
};
#line 61 "include/linux/regulator/machine.h"
struct regulation_constraints {
   char const   *name ;
   int min_uV ;
   int max_uV ;
   int uV_offset ;
   int min_uA ;
   int max_uA ;
   unsigned int valid_modes_mask ;
   unsigned int valid_ops_mask ;
   int input_uV ;
   struct regulator_state state_disk ;
   struct regulator_state state_mem ;
   struct regulator_state state_standby ;
   suspend_state_t initial_state ;
   unsigned int initial_mode ;
   unsigned char always_on : 1 ;
   unsigned char boot_on : 1 ;
   unsigned char apply_uV : 1 ;
};
#line 133 "include/linux/regulator/machine.h"
struct regulator_consumer_supply {
   char const   *dev_name ;
   char const   *supply ;
};
#line 147 "include/linux/regulator/machine.h"
struct regulator_init_data {
   char const   *supply_regulator ;
   struct regulation_constraints constraints ;
   int num_consumer_supplies ;
   struct regulator_consumer_supply *consumer_supplies ;
   int (*regulator_init)(void * ) ;
   void *driver_data ;
};
#line 88 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   int node ;
   unsigned int stat[26U] ;
};
#line 55 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 76 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int objsize ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 366 "include/linux/slab.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 67 "include/linux/irq.h"
struct irq_domain;
#line 41 "include/asm-generic/sections.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 58 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 58 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 377 "include/linux/radix-tree.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain * , struct device_node * ) ;
   int (*map)(struct irq_domain * , unsigned int  , irq_hw_number_t  ) ;
   void (*unmap)(struct irq_domain * , unsigned int  ) ;
   int (*xlate)(struct irq_domain * , struct device_node * , u32 const   * , unsigned int  ,
                unsigned long * , unsigned int * ) ;
};
#line 66 "include/linux/irqdomain.h"
struct __anonstruct_legacy_170 {
   unsigned int size ;
   unsigned int first_irq ;
   irq_hw_number_t first_hwirq ;
};
#line 66 "include/linux/irqdomain.h"
struct __anonstruct_linear_171 {
   unsigned int size ;
   unsigned int *revmap ;
};
#line 66 "include/linux/irqdomain.h"
struct __anonstruct_nomap_172 {
   unsigned int max_irq ;
};
#line 66 "include/linux/irqdomain.h"
union __anonunion_revmap_data_169 {
   struct __anonstruct_legacy_170 legacy ;
   struct __anonstruct_linear_171 linear ;
   struct __anonstruct_nomap_172 nomap ;
   struct radix_tree_root tree ;
};
#line 66 "include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   unsigned int revmap_type ;
   union __anonunion_revmap_data_169 revmap_data ;
   struct irq_domain_ops  const  *ops ;
   void *host_data ;
   irq_hw_number_t inval_irq ;
   struct device_node *of_node ;
};
#line 261 "include/linux/regmap.h"
struct wm831x;
#line 262
enum wm831x_auxadc;
#line 262
enum wm831x_auxadc;
#line 361 "include/linux/mfd/wm831x/core.h"
struct wm831x {
   struct mutex io_lock ;
   struct device *dev ;
   struct regmap *regmap ;
   int irq ;
   struct mutex irq_lock ;
   struct irq_domain *irq_domain ;
   int irq_masks_cur[5U] ;
   int irq_masks_cache[5U] ;
   bool soft_shutdown ;
   unsigned char has_gpio_ena : 1 ;
   unsigned char has_cs_sts : 1 ;
   unsigned char charger_irq_wake : 1 ;
   int num_gpio ;
   int gpio_update[16U] ;
   bool gpio_level_high[16U] ;
   bool gpio_level_low[16U] ;
   struct mutex auxadc_lock ;
   struct list_head auxadc_pending ;
   u16 auxadc_active ;
   int (*auxadc_read)(struct wm831x * , enum wm831x_auxadc  ) ;
   struct mutex key_lock ;
   unsigned char locked : 1 ;
};
#line 1217 "include/linux/mfd/wm831x/regulator.h"
struct wm831x_backlight_pdata {
   int isink ;
   int max_uA ;
};
#line 25 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_backup_pdata {
   int charger_enable ;
   int no_constant_voltage ;
   int vlim ;
   int ilim ;
};
#line 32 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_battery_pdata {
   int enable ;
   int fast_enable ;
   int off_mask ;
   int trickle_ilim ;
   int vsel ;
   int eoc_iterm ;
   int fast_ilim ;
   int timeout ;
};
#line 43 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_buckv_pdata {
   int dvs_gpio ;
   int dvs_control_src ;
   int dvs_init_state ;
   int dvs_state_gpio ;
};
#line 60
enum wm831x_status_src {
    WM831X_STATUS_PRESERVE = 0,
    WM831X_STATUS_OTP = 1,
    WM831X_STATUS_POWER = 2,
    WM831X_STATUS_CHARGER = 3,
    WM831X_STATUS_MANUAL = 4
} ;
#line 68 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_status_pdata {
   enum wm831x_status_src default_src ;
   char const   *name ;
   char const   *default_trigger ;
};
#line 77 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_touch_pdata {
   int fivewire ;
   int isel ;
   int rpu ;
   int pressure ;
   unsigned int data_irq ;
   int data_irqf ;
   unsigned int pd_irq ;
   int pd_irqf ;
};
#line 88
enum wm831x_watchdog_action {
    WM831X_WDOG_NONE = 0,
    WM831X_WDOG_INTERRUPT = 1,
    WM831X_WDOG_RESET = 2,
    WM831X_WDOG_WAKE = 3
} ;
#line 95 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_watchdog_pdata {
   enum wm831x_watchdog_action primary ;
   enum wm831x_watchdog_action secondary ;
   int update_gpio ;
   unsigned char software : 1 ;
};
#line 101 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_pdata {
   int wm831x_num ;
   int (*pre_init)(struct wm831x * ) ;
   int (*post_init)(struct wm831x * ) ;
   bool irq_cmos ;
   bool disable_touch ;
   bool soft_shutdown ;
   int irq_base ;
   int gpio_base ;
   int gpio_defaults[16U] ;
   struct wm831x_backlight_pdata *backlight ;
   struct wm831x_backup_pdata *backup ;
   struct wm831x_battery_pdata *battery ;
   struct wm831x_touch_pdata *touch ;
   struct wm831x_watchdog_pdata *watchdog ;
   struct wm831x_status_pdata *status[2U] ;
   struct regulator_init_data *dcdc[4U] ;
   struct regulator_init_data *epe[2U] ;
   struct regulator_init_data *ldo[11U] ;
   struct regulator_init_data *isink[2U] ;
};
#line 149 "include/linux/mfd/wm831x/pdata.h"
struct wm831x_dcdc {
   char name[9U] ;
   char supply_name[9U] ;
   struct regulator_desc desc ;
   int base ;
   struct wm831x *wm831x ;
   struct regulator_dev *regulator ;
   int dvs_gpio ;
   int dvs_gpio_state ;
   int on_vsel ;
   int dvs_vsel ;
};
#line 2776 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
typedef int ldv_func_ret_type___0;
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 112 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 53 "include/linux/dynamic_debug.h"
extern int __dynamic_dev_dbg(struct _ddebug * , struct device  const  * , char const   * 
                             , ...) ;
#line 325 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 168 "include/linux/mutex.h"
extern int mutex_trylock(struct mutex * ) ;
#line 171
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) ;
#line 173
extern void mutex_unlock(struct mutex * ) ;
#line 176
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) ;
#line 23
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
#line 27
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
#line 31
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 32
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 35
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 39
void ldv_mutex_lock_pm_mutex(struct mutex *lock ) ;
#line 43
void ldv_mutex_unlock_pm_mutex(struct mutex *lock ) ;
#line 26 "include/linux/export.h"
extern struct module __this_module ;
#line 559 "include/linux/device.h"
extern void *devm_kzalloc(struct device * , size_t  , gfp_t  ) ;
#line 802
extern void *dev_get_drvdata(struct device  const  * ) ;
#line 803
extern int dev_set_drvdata(struct device * , void * ) ;
#line 902
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 904
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 46 "include/linux/platform_device.h"
extern struct resource *platform_get_resource(struct platform_device * , unsigned int  ,
                                              unsigned int  ) ;
#line 49
extern int platform_get_irq_byname(struct platform_device * , char const   * ) ;
#line 174
extern int platform_driver_register(struct platform_driver * ) ;
#line 175
extern void platform_driver_unregister(struct platform_driver * ) ;
#line 183 "include/linux/platform_device.h"
__inline static void *platform_get_drvdata(struct platform_device  const  *pdev ) 
{ 
  void *tmp ;

  {
#line 185
  tmp = dev_get_drvdata(& pdev->dev);
#line 185
  return (tmp);
}
}
#line 188 "include/linux/platform_device.h"
__inline static void platform_set_drvdata(struct platform_device *pdev , void *data ) 
{ 


  {
#line 190
  dev_set_drvdata(& pdev->dev, data);
#line 191
  return;
}
}
#line 259 "include/linux/regulator/driver.h"
extern struct regulator_dev *regulator_register(struct regulator_desc  const  * ,
                                                struct regulator_config  const  * ) ;
#line 261
extern void regulator_unregister(struct regulator_dev * ) ;
#line 263
extern int regulator_notifier_call_chain(struct regulator_dev * , unsigned long  ,
                                         void * ) ;
#line 266
extern void *rdev_get_drvdata(struct regulator_dev * ) ;
#line 268
extern int rdev_get_id(struct regulator_dev * ) ;
#line 278
extern int regulator_get_voltage_sel_regmap(struct regulator_dev * ) ;
#line 280
extern int regulator_is_enabled_regmap(struct regulator_dev * ) ;
#line 281
extern int regulator_enable_regmap(struct regulator_dev * ) ;
#line 282
extern int regulator_disable_regmap(struct regulator_dev * ) ;
#line 154 "include/asm-generic/gpio.h"
extern void gpio_free(unsigned int  ) ;
#line 170
extern void __gpio_set_value(unsigned int  , int  ) ;
#line 176
extern int gpio_request_one(unsigned int  , unsigned long  , char const   * ) ;
#line 55 "include/linux/gpio.h"
__inline static void gpio_set_value(unsigned int gpio , int value ) 
{ 


  {
#line 57
  __gpio_set_value(gpio, value);
#line 58
  return;
}
}
#line 127 "include/linux/interrupt.h"
extern int request_threaded_irq(unsigned int  , irqreturn_t (*)(int  , void * ) ,
                                irqreturn_t (*)(int  , void * ) , unsigned long  ,
                                char const   * , void * ) ;
#line 184
extern void free_irq(unsigned int  , void * ) ;
#line 147 "include/linux/irqdomain.h"
extern unsigned int irq_create_mapping(struct irq_domain * , irq_hw_number_t  ) ;
#line 405 "include/linux/mfd/wm831x/core.h"
extern int wm831x_reg_read(struct wm831x * , unsigned short  ) ;
#line 410
extern int wm831x_set_bits(struct wm831x * , unsigned short  , unsigned short  , unsigned short  ) ;
#line 423 "include/linux/mfd/wm831x/core.h"
__inline static int wm831x_irq(struct wm831x *wm831x , int irq ) 
{ 
  unsigned int tmp ;

  {
#line 425
  tmp = irq_create_mapping(wm831x->irq_domain, (irq_hw_number_t )irq);
#line 425
  return ((int )tmp);
}
}
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static unsigned int wm831x_dcdc_get_mode(struct regulator_dev *rdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 reg ;
  int val ;

  {
#line 99
  tmp = rdev_get_drvdata(rdev);
#line 99
  dcdc = (struct wm831x_dcdc *)tmp;
#line 100
  wm831x = dcdc->wm831x;
#line 101
  reg = (unsigned int )((u16 )dcdc->base) + 2U;
#line 104
  val = wm831x_reg_read(wm831x, (int )reg);
#line 105
  if (val < 0) {
#line 106
    return ((unsigned int )val);
  } else {

  }
#line 108
  val = (val & 768) >> 8;
#line 110
  switch (val) {
  case 0: ;
#line 112
  return (1U);
  case 1: ;
#line 114
  return (2U);
  case 3: ;
#line 116
  return (8U);
  case 2: ;
#line 118
  return (4U);
  default: 
#line 120
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"),
                       "i" (120), "i" (12UL));
  ldv_25303: ;
#line 120
  goto ldv_25303;
#line 121
  return (4294967274U);
  }
}
}
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_dcdc_set_mode_int(struct wm831x *wm831x , int reg , unsigned int mode ) 
{ 
  int val ;
  int tmp ;

  {
#line 130
  switch (mode) {
  case 1U: 
#line 132
  val = 0;
#line 133
  goto ldv_25311;
  case 2U: 
#line 135
  val = 1;
#line 136
  goto ldv_25311;
  case 8U: 
#line 138
  val = 3;
#line 139
  goto ldv_25311;
  case 4U: 
#line 141
  val = 2;
#line 142
  goto ldv_25311;
  default: ;
#line 144
  return (-22);
  }
  ldv_25311: 
#line 147
  tmp = wm831x_set_bits(wm831x, (int )((unsigned short )reg), 768, (int )((unsigned short )val) << 8U);
#line 147
  return (tmp);
}
}
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_dcdc_set_mode(struct regulator_dev *rdev , unsigned int mode ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 reg ;
  int tmp___0 ;

  {
#line 153
  tmp = rdev_get_drvdata(rdev);
#line 153
  dcdc = (struct wm831x_dcdc *)tmp;
#line 154
  wm831x = dcdc->wm831x;
#line 155
  reg = (unsigned int )((u16 )dcdc->base) + 2U;
#line 157
  tmp___0 = wm831x_dcdc_set_mode_int(wm831x, (int )reg, mode);
#line 157
  return (tmp___0);
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_dcdc_set_suspend_mode(struct regulator_dev *rdev , unsigned int mode ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 reg ;
  int tmp___0 ;

  {
#line 163
  tmp = rdev_get_drvdata(rdev);
#line 163
  dcdc = (struct wm831x_dcdc *)tmp;
#line 164
  wm831x = dcdc->wm831x;
#line 165
  reg = (unsigned int )((u16 )dcdc->base) + 3U;
#line 167
  tmp___0 = wm831x_dcdc_set_mode_int(wm831x, (int )reg, mode);
#line 167
  return (tmp___0);
}
}
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_dcdc_get_status(struct regulator_dev *rdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  int ret ;
  struct _ddebug descriptor ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  struct _ddebug descriptor___0 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  struct _ddebug descriptor___1 ;
  int tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;

  {
#line 172
  tmp = rdev_get_drvdata(rdev);
#line 172
  dcdc = (struct wm831x_dcdc *)tmp;
#line 173
  wm831x = dcdc->wm831x;
#line 177
  ret = wm831x_reg_read(wm831x, 16468);
#line 178
  if (ret < 0) {
#line 179
    return (ret);
  } else {

  }
#line 181
  tmp___2 = rdev_get_id(rdev);
#line 181
  if ((ret >> tmp___2) & 1) {
#line 182
    descriptor.modname = "wm831x_dcdc";
#line 182
    descriptor.function = "wm831x_dcdc_get_status";
#line 182
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared";
#line 182
    descriptor.format = "DCDC%d under voltage\n";
#line 182
    descriptor.lineno = 183U;
#line 182
    descriptor.flags = 1U;
#line 182
    tmp___1 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 182
    if (tmp___1 != 0L) {
#line 182
      tmp___0 = rdev_get_id(rdev);
#line 182
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)wm831x->dev, "DCDC%d under voltage\n",
                        tmp___0 + 1);
    } else {

    }
#line 184
    return (2);
  } else {

  }
#line 188
  tmp___9 = rdev_get_id(rdev);
#line 188
  if (tmp___9 <= 1) {
#line 189
    tmp___5 = rdev_get_id(rdev);
#line 189
    if (((4096 << tmp___5) & ret) != 0) {
#line 190
      descriptor___0.modname = "wm831x_dcdc";
#line 190
      descriptor___0.function = "wm831x_dcdc_get_status";
#line 190
      descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared";
#line 190
      descriptor___0.format = "DCDC%d over voltage\n";
#line 190
      descriptor___0.lineno = 191U;
#line 190
      descriptor___0.flags = 1U;
#line 190
      tmp___4 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 190
      if (tmp___4 != 0L) {
#line 190
        tmp___3 = rdev_get_id(rdev);
#line 190
        __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)wm831x->dev,
                          "DCDC%d over voltage\n", tmp___3 + 1);
      } else {

      }
#line 192
      return (2);
    } else {

    }
#line 195
    tmp___8 = rdev_get_id(rdev);
#line 195
    if (((256 << tmp___8) & ret) != 0) {
#line 196
      descriptor___1.modname = "wm831x_dcdc";
#line 196
      descriptor___1.function = "wm831x_dcdc_get_status";
#line 196
      descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared";
#line 196
      descriptor___1.format = "DCDC%d over current\n";
#line 196
      descriptor___1.lineno = 197U;
#line 196
      descriptor___1.flags = 1U;
#line 196
      tmp___7 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 196
      if (tmp___7 != 0L) {
#line 196
        tmp___6 = rdev_get_id(rdev);
#line 196
        __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)wm831x->dev,
                          "DCDC%d over current\n", tmp___6 + 1);
      } else {

      }
#line 198
      return (2);
    } else {

    }
  } else {

  }
#line 203
  ret = wm831x_reg_read(wm831x, 16466);
#line 204
  if (ret < 0) {
#line 205
    return (ret);
  } else {

  }
#line 206
  tmp___10 = rdev_get_id(rdev);
#line 206
  if (((ret >> tmp___10) & 1) == 0) {
#line 207
    return (0);
  } else {

  }
#line 211
  return (1);
}
}
#line 214 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static irqreturn_t wm831x_dcdc_uv_irq(int irq , void *data ) 
{ 
  struct wm831x_dcdc *dcdc ;

  {
#line 216
  dcdc = (struct wm831x_dcdc *)data;
#line 218
  regulator_notifier_call_chain(dcdc->regulator, 1UL, 0);
#line 222
  return (IRQ_HANDLED);
}
}
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static irqreturn_t wm831x_dcdc_oc_irq(int irq , void *data ) 
{ 
  struct wm831x_dcdc *dcdc ;

  {
#line 227
  dcdc = (struct wm831x_dcdc *)data;
#line 229
  regulator_notifier_call_chain(dcdc->regulator, 2UL, 0);
#line 233
  return (IRQ_HANDLED);
}
}
#line 240 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_list_voltage(struct regulator_dev *rdev , unsigned int selector ) 
{ 


  {
#line 243
  if (selector <= 8U) {
#line 244
    return (600000);
  } else {

  }
#line 245
  if (selector <= 104U) {
#line 246
    return ((int )(selector * 12500U + 500000U));
  } else {

  }
#line 247
  return (-22);
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_select_min_voltage(struct regulator_dev *rdev , int min_uV ,
                                           int max_uV ) 
{ 
  u16 vsel ;
  int tmp ;

  {
#line 255
  if (min_uV <= 599999) {
#line 256
    vsel = 0U;
  } else
#line 257
  if (min_uV <= 1800000) {
#line 258
    vsel = (unsigned int )((u16 )((min_uV + -600000) / 12500)) + 8U;
  } else {
#line 260
    return (-22);
  }
#line 262
  tmp = wm831x_buckv_list_voltage(rdev, (unsigned int )vsel);
#line 262
  if (tmp > max_uV) {
#line 263
    return (-22);
  } else {

  }
#line 265
  return ((int )vsel);
}
}
#line 268 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_set_dvs(struct regulator_dev *rdev , int state ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;

  {
#line 270
  tmp = rdev_get_drvdata(rdev);
#line 270
  dcdc = (struct wm831x_dcdc *)tmp;
#line 272
  if (dcdc->dvs_gpio_state == state) {
#line 273
    return (0);
  } else {

  }
#line 275
  dcdc->dvs_gpio_state = state;
#line 276
  gpio_set_value((unsigned int )dcdc->dvs_gpio, state);
#line 283
  return (0);
}
}
#line 286 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_set_voltage(struct regulator_dev *rdev , int min_uV , int max_uV ,
                                    unsigned int *selector ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  int on_reg ;
  int dvs_reg ;
  int vsel ;
  int ret ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 289
  tmp = rdev_get_drvdata(rdev);
#line 289
  dcdc = (struct wm831x_dcdc *)tmp;
#line 290
  wm831x = dcdc->wm831x;
#line 291
  on_reg = dcdc->base + 2;
#line 292
  dvs_reg = dcdc->base + 4;
#line 295
  vsel = wm831x_buckv_select_min_voltage(rdev, min_uV, max_uV);
#line 296
  if (vsel < 0) {
#line 297
    return (vsel);
  } else {

  }
#line 299
  *selector = (unsigned int )vsel;
#line 302
  if (dcdc->dvs_gpio != 0 && dcdc->on_vsel == vsel) {
#line 303
    tmp___0 = wm831x_buckv_set_dvs(rdev, 0);
#line 303
    return (tmp___0);
  } else {

  }
#line 305
  if (dcdc->dvs_gpio != 0 && dcdc->dvs_vsel == vsel) {
#line 306
    tmp___1 = wm831x_buckv_set_dvs(rdev, 1);
#line 306
    return (tmp___1);
  } else {

  }
#line 309
  ret = wm831x_set_bits(wm831x, (int )((unsigned short )on_reg), 127, (int )((unsigned short )vsel));
#line 310
  if (ret < 0) {
#line 311
    return (ret);
  } else {

  }
#line 312
  dcdc->on_vsel = vsel;
#line 314
  if (dcdc->dvs_gpio == 0) {
#line 315
    return (ret);
  } else {

  }
#line 318
  ret = wm831x_buckv_set_dvs(rdev, 0);
#line 319
  if (ret < 0) {
#line 320
    return (ret);
  } else {

  }
#line 328
  if (dcdc->dvs_vsel < vsel) {
#line 329
    ret = wm831x_set_bits(wm831x, (int )((unsigned short )dvs_reg), 127, (int )((unsigned short )dcdc->dvs_vsel));
#line 332
    if (ret == 0) {
#line 333
      dcdc->dvs_vsel = vsel;
    } else {
#line 335
      dev_warn((struct device  const  *)wm831x->dev, "Failed to set DCDC DVS VSEL: %d\n",
               ret);
    }
  } else {

  }
#line 339
  return (0);
}
}
#line 342 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_set_suspend_voltage(struct regulator_dev *rdev , int uV ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 reg ;
  int vsel ;
  int tmp___0 ;

  {
#line 345
  tmp = rdev_get_drvdata(rdev);
#line 345
  dcdc = (struct wm831x_dcdc *)tmp;
#line 346
  wm831x = dcdc->wm831x;
#line 347
  reg = (unsigned int )((u16 )dcdc->base) + 3U;
#line 350
  vsel = wm831x_buckv_select_min_voltage(rdev, uV, uV);
#line 351
  if (vsel < 0) {
#line 352
    return (vsel);
  } else {

  }
#line 354
  tmp___0 = wm831x_set_bits(wm831x, (int )reg, 127, (int )((unsigned short )vsel));
#line 354
  return (tmp___0);
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_get_voltage_sel(struct regulator_dev *rdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;

  {
#line 359
  tmp = rdev_get_drvdata(rdev);
#line 359
  dcdc = (struct wm831x_dcdc *)tmp;
#line 361
  if (dcdc->dvs_gpio != 0 && dcdc->dvs_gpio_state != 0) {
#line 362
    return (dcdc->dvs_vsel);
  } else {
#line 364
    return (dcdc->on_vsel);
  }
}
}
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static u16 wm831x_dcdc_ilim[8U]  = 
#line 368
  {      125U,      250U,      375U,      500U, 
        625U,      750U,      875U,      1000U};
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_set_current_limit(struct regulator_dev *rdev , int min_uA ,
                                          int max_uA ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 reg ;
  int i ;
  int tmp___0 ;

  {
#line 375
  tmp = rdev_get_drvdata(rdev);
#line 375
  dcdc = (struct wm831x_dcdc *)tmp;
#line 376
  wm831x = dcdc->wm831x;
#line 377
  reg = (unsigned int )((u16 )dcdc->base) + 1U;
#line 380
  i = 0;
#line 380
  goto ldv_25403;
  ldv_25402: ;
#line 381
  if ((int )wm831x_dcdc_ilim[i] >= min_uA && (int )wm831x_dcdc_ilim[i] <= max_uA) {
#line 383
    goto ldv_25401;
  } else {

  }
#line 380
  i = i + 1;
  ldv_25403: ;
#line 380
  if ((unsigned int )i <= 7U) {
#line 381
    goto ldv_25402;
  } else {

  }
  ldv_25401: ;
#line 385
  if (i == 8) {
#line 386
    return (-22);
  } else {

  }
#line 388
  tmp___0 = wm831x_set_bits(wm831x, (int )reg, 112, (int )((unsigned short )i) << 4U);
#line 388
  return (tmp___0);
}
}
#line 392 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_get_current_limit(struct regulator_dev *rdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 reg ;
  int val ;

  {
#line 394
  tmp = rdev_get_drvdata(rdev);
#line 394
  dcdc = (struct wm831x_dcdc *)tmp;
#line 395
  wm831x = dcdc->wm831x;
#line 396
  reg = (unsigned int )((u16 )dcdc->base) + 1U;
#line 399
  val = wm831x_reg_read(wm831x, (int )reg);
#line 400
  if (val < 0) {
#line 401
    return (val);
  } else {

  }
#line 403
  val = (val & 112) >> 4;
#line 404
  return ((int )wm831x_dcdc_ilim[val]);
}
}
#line 407 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct regulator_ops wm831x_buckv_ops  = 
#line 407
     {& wm831x_buckv_list_voltage, & wm831x_buckv_set_voltage, 0, 0, 0, & wm831x_buckv_get_voltage_sel,
    & wm831x_buckv_set_current_limit, & wm831x_buckv_get_current_limit, & regulator_enable_regmap,
    & regulator_disable_regmap, & regulator_is_enabled_regmap, & wm831x_dcdc_set_mode,
    & wm831x_dcdc_get_mode, 0, 0, & wm831x_dcdc_get_status, 0, & wm831x_buckv_set_suspend_voltage,
    0, 0, & wm831x_dcdc_set_suspend_mode};
#line 428 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static void wm831x_buckv_dvs_init(struct wm831x_dcdc *dcdc , struct wm831x_buckv_pdata *pdata ) 
{ 
  struct wm831x *wm831x ;
  int ret ;
  u16 ctrl ;

  {
#line 431
  wm831x = dcdc->wm831x;
#line 435
  if ((unsigned long )pdata == (unsigned long )((struct wm831x_buckv_pdata *)0) || pdata->dvs_gpio == 0) {
#line 436
    return;
  } else {

  }
#line 441
  dcdc->dvs_gpio_state = pdata->dvs_init_state;
#line 443
  ret = gpio_request_one((unsigned int )pdata->dvs_gpio, dcdc->dvs_gpio_state != 0 ? 2UL : 0UL,
                         "DCDC DVS");
#line 446
  if (ret < 0) {
#line 447
    dev_err((struct device  const  *)wm831x->dev, "Failed to get %s DVS GPIO: %d\n",
            (char *)(& dcdc->name), ret);
#line 449
    return;
  } else {

  }
#line 452
  dcdc->dvs_gpio = pdata->dvs_gpio;
#line 454
  switch (pdata->dvs_control_src) {
  case 1: 
#line 456
  ctrl = 4096U;
#line 457
  goto ldv_25422;
  case 2: 
#line 459
  ctrl = 6144U;
#line 460
  goto ldv_25422;
  default: 
#line 462
  dev_err((struct device  const  *)wm831x->dev, "Invalid DVS control source %d for %s\n",
          pdata->dvs_control_src, (char *)(& dcdc->name));
#line 464
  return;
  }
  ldv_25422: ;
#line 470
  if (dcdc->dvs_vsel == 0) {
#line 471
    ret = wm831x_set_bits(wm831x, (int )((unsigned int )((unsigned short )dcdc->base) + 4U),
                          127, (int )((unsigned short )dcdc->on_vsel));
#line 474
    if (ret == 0) {
#line 475
      dcdc->dvs_vsel = dcdc->on_vsel;
    } else {
#line 477
      dev_warn((struct device  const  *)wm831x->dev, "Failed to set DVS_VSEL: %d\n",
               ret);
    }
  } else {

  }
#line 481
  ret = wm831x_set_bits(wm831x, (int )((unsigned int )((unsigned short )dcdc->base) + 4U),
                        6144, (int )ctrl);
#line 483
  if (ret < 0) {
#line 484
    dev_err((struct device  const  *)wm831x->dev, "Failed to set %s DVS source: %d\n",
            (char *)(& dcdc->name), ret);
  } else {

  }
#line 486
  return;
}
}
#line 489 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_probe(struct platform_device *pdev ) 
{ 
  struct wm831x *wm831x ;
  void *tmp ;
  struct wm831x_pdata *pdata ;
  struct regulator_config config ;
  int id ;
  struct wm831x_dcdc *dcdc ;
  struct resource *res ;
  int ret ;
  int irq ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  void *tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 491
  tmp = dev_get_drvdata((struct device  const  *)pdev->dev.parent);
#line 491
  wm831x = (struct wm831x *)tmp;
#line 492
  pdata = (struct wm831x_pdata *)(wm831x->dev)->platform_data;
#line 493
  config.dev = 0;
#line 493
  config.init_data = 0;
#line 493
  config.driver_data = 0;
#line 493
  config.of_node = 0;
#line 493
  config.regmap = 0;
#line 499
  if ((unsigned long )pdata != (unsigned long )((struct wm831x_pdata *)0) && pdata->wm831x_num != 0) {
#line 500
    id = pdata->wm831x_num * 10 + 1;
  } else {
#line 502
    id = 0;
  }
#line 503
  id = pdev->id - id;
#line 505
  descriptor.modname = "wm831x_dcdc";
#line 505
  descriptor.function = "wm831x_buckv_probe";
#line 505
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared";
#line 505
  descriptor.format = "Probing DCDC%d\n";
#line 505
  descriptor.lineno = 505U;
#line 505
  descriptor.flags = 1U;
#line 505
  tmp___0 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 505
  if (tmp___0 != 0L) {
#line 505
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& pdev->dev), "Probing DCDC%d\n",
                      id + 1);
  } else {

  }
#line 507
  tmp___1 = devm_kzalloc(& pdev->dev, 136UL, 208U);
#line 507
  dcdc = (struct wm831x_dcdc *)tmp___1;
#line 509
  if ((unsigned long )dcdc == (unsigned long )((struct wm831x_dcdc *)0)) {
#line 510
    dev_err((struct device  const  *)(& pdev->dev), "Unable to allocate private data\n");
#line 511
    return (-12);
  } else {

  }
#line 514
  dcdc->wm831x = wm831x;
#line 516
  res = platform_get_resource(pdev, 256U, 0U);
#line 517
  if ((unsigned long )res == (unsigned long )((struct resource *)0)) {
#line 518
    dev_err((struct device  const  *)(& pdev->dev), "No I/O resource\n");
#line 519
    ret = -22;
#line 520
    goto err;
  } else {

  }
#line 522
  dcdc->base = (int )res->start;
#line 524
  snprintf((char *)(& dcdc->name), 9UL, "DCDC%d", id + 1);
#line 525
  dcdc->desc.name = (char const   *)(& dcdc->name);
#line 527
  snprintf((char *)(& dcdc->supply_name), 9UL, "DC%dVDD", id + 1);
#line 529
  dcdc->desc.supply_name = (char const   *)(& dcdc->supply_name);
#line 531
  dcdc->desc.id = id;
#line 532
  dcdc->desc.type = REGULATOR_VOLTAGE;
#line 533
  dcdc->desc.n_voltages = 105U;
#line 534
  dcdc->desc.ops = & wm831x_buckv_ops;
#line 535
  dcdc->desc.owner = & __this_module;
#line 536
  dcdc->desc.enable_reg = 16464U;
#line 537
  dcdc->desc.enable_mask = (unsigned int )(1 << id);
#line 539
  ret = wm831x_reg_read(wm831x, (int )((unsigned int )((unsigned short )dcdc->base) + 2U));
#line 540
  if (ret < 0) {
#line 541
    dev_err((struct device  const  *)wm831x->dev, "Failed to read ON VSEL: %d\n",
            ret);
#line 542
    goto err;
  } else {

  }
#line 544
  dcdc->on_vsel = ret & 127;
#line 546
  ret = wm831x_reg_read(wm831x, (int )((unsigned int )((unsigned short )dcdc->base) + 4U));
#line 547
  if (ret < 0) {
#line 548
    dev_err((struct device  const  *)wm831x->dev, "Failed to read DVS VSEL: %d\n",
            ret);
#line 549
    goto err;
  } else {

  }
#line 551
  dcdc->dvs_vsel = ret & 127;
#line 553
  if ((unsigned long )pdata != (unsigned long )((struct wm831x_pdata *)0) && (unsigned long )pdata->dcdc[id] != (unsigned long )((struct regulator_init_data *)0)) {
#line 554
    wm831x_buckv_dvs_init(dcdc, (struct wm831x_buckv_pdata *)(pdata->dcdc[id])->driver_data);
  } else {

  }
#line 556
  config.dev = pdev->dev.parent;
#line 557
  if ((unsigned long )pdata != (unsigned long )((struct wm831x_pdata *)0)) {
#line 558
    config.init_data = (struct regulator_init_data  const  *)pdata->dcdc[id];
  } else {

  }
#line 559
  config.driver_data = (void *)dcdc;
#line 560
  config.regmap = wm831x->regmap;
#line 562
  dcdc->regulator = regulator_register((struct regulator_desc  const  *)(& dcdc->desc),
                                       (struct regulator_config  const  *)(& config));
#line 563
  tmp___3 = IS_ERR((void const   *)dcdc->regulator);
#line 563
  if (tmp___3 != 0L) {
#line 564
    tmp___2 = PTR_ERR((void const   *)dcdc->regulator);
#line 564
    ret = (int )tmp___2;
#line 565
    dev_err((struct device  const  *)wm831x->dev, "Failed to register DCDC%d: %d\n",
            id + 1, ret);
#line 567
    goto err;
  } else {

  }
#line 570
  tmp___4 = platform_get_irq_byname(pdev, "UV");
#line 570
  irq = wm831x_irq(wm831x, tmp___4);
#line 571
  ret = request_threaded_irq((unsigned int )irq, 0, & wm831x_dcdc_uv_irq, 1UL, (char const   *)(& dcdc->name),
                             (void *)dcdc);
#line 573
  if (ret != 0) {
#line 574
    dev_err((struct device  const  *)(& pdev->dev), "Failed to request UV IRQ %d: %d\n",
            irq, ret);
#line 576
    goto err_regulator;
  } else {

  }
#line 579
  tmp___5 = platform_get_irq_byname(pdev, "HC");
#line 579
  irq = wm831x_irq(wm831x, tmp___5);
#line 580
  ret = request_threaded_irq((unsigned int )irq, 0, & wm831x_dcdc_oc_irq, 1UL, (char const   *)(& dcdc->name),
                             (void *)dcdc);
#line 582
  if (ret != 0) {
#line 583
    dev_err((struct device  const  *)(& pdev->dev), "Failed to request HC IRQ %d: %d\n",
            irq, ret);
#line 585
    goto err_uv;
  } else {

  }
#line 588
  platform_set_drvdata(pdev, (void *)dcdc);
#line 590
  return (0);
  err_uv: 
#line 593
  tmp___6 = platform_get_irq_byname(pdev, "UV");
#line 593
  tmp___7 = wm831x_irq(wm831x, tmp___6);
#line 593
  free_irq((unsigned int )tmp___7, (void *)dcdc);
  err_regulator: 
#line 596
  regulator_unregister(dcdc->regulator);
  err: ;
#line 598
  if (dcdc->dvs_gpio != 0) {
#line 599
    gpio_free((unsigned int )dcdc->dvs_gpio);
  } else {

  }
#line 600
  return (ret);
}
}
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckv_remove(struct platform_device *pdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 605
  tmp = platform_get_drvdata((struct platform_device  const  *)pdev);
#line 605
  dcdc = (struct wm831x_dcdc *)tmp;
#line 606
  wm831x = dcdc->wm831x;
#line 608
  platform_set_drvdata(pdev, 0);
#line 610
  tmp___0 = platform_get_irq_byname(pdev, "HC");
#line 610
  tmp___1 = wm831x_irq(wm831x, tmp___0);
#line 610
  free_irq((unsigned int )tmp___1, (void *)dcdc);
#line 612
  tmp___2 = platform_get_irq_byname(pdev, "UV");
#line 612
  tmp___3 = wm831x_irq(wm831x, tmp___2);
#line 612
  free_irq((unsigned int )tmp___3, (void *)dcdc);
#line 614
  regulator_unregister(dcdc->regulator);
#line 615
  if (dcdc->dvs_gpio != 0) {
#line 616
    gpio_free((unsigned int )dcdc->dvs_gpio);
  } else {

  }
#line 618
  return (0);
}
}
#line 621 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct platform_driver wm831x_buckv_driver  =    {& wm831x_buckv_probe, & wm831x_buckv_remove, 0, 0, 0, {"wm831x-buckv", 0, & __this_module,
                                                           0, (_Bool)0, 0, 0, 0, 0,
                                                           0, 0, 0, 0, 0}, 0};
#line 634 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckp_list_voltage(struct regulator_dev *rdev , unsigned int selector ) 
{ 


  {
#line 637
  if (selector <= 102U) {
#line 638
    return ((int )(selector * 25000U + 850000U));
  } else {
#line 640
    return (-22);
  }
}
}
#line 643 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckp_set_voltage_int(struct regulator_dev *rdev , int reg , int min_uV ,
                                        int max_uV , int *selector ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  u16 vsel ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 646
  tmp = rdev_get_drvdata(rdev);
#line 646
  dcdc = (struct wm831x_dcdc *)tmp;
#line 647
  wm831x = dcdc->wm831x;
#line 650
  if (min_uV <= 34000000) {
#line 651
    vsel = (u16 )((min_uV + -850000) / 25000);
  } else {
#line 653
    return (-22);
  }
#line 655
  tmp___0 = wm831x_buckp_list_voltage(rdev, (unsigned int )vsel);
#line 655
  if (tmp___0 > max_uV) {
#line 656
    return (-22);
  } else {

  }
#line 658
  *selector = (int )vsel;
#line 660
  tmp___1 = wm831x_set_bits(wm831x, (int )((unsigned short )reg), 127, (int )vsel);
#line 660
  return (tmp___1);
}
}
#line 663 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckp_set_voltage(struct regulator_dev *rdev , int min_uV , int max_uV ,
                                    unsigned int *selector ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  u16 reg ;
  int tmp___0 ;

  {
#line 667
  tmp = rdev_get_drvdata(rdev);
#line 667
  dcdc = (struct wm831x_dcdc *)tmp;
#line 668
  reg = (unsigned int )((u16 )dcdc->base) + 2U;
#line 670
  tmp___0 = wm831x_buckp_set_voltage_int(rdev, (int )reg, min_uV, max_uV, (int *)selector);
#line 670
  return (tmp___0);
}
}
#line 674 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckp_set_suspend_voltage(struct regulator_dev *rdev , int uV ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  u16 reg ;
  unsigned int selector ;
  int tmp___0 ;

  {
#line 677
  tmp = rdev_get_drvdata(rdev);
#line 677
  dcdc = (struct wm831x_dcdc *)tmp;
#line 678
  reg = (unsigned int )((u16 )dcdc->base) + 3U;
#line 681
  tmp___0 = wm831x_buckp_set_voltage_int(rdev, (int )reg, uV, uV, (int *)(& selector));
#line 681
  return (tmp___0);
}
}
#line 684 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct regulator_ops wm831x_buckp_ops  = 
#line 684
     {& wm831x_buckp_list_voltage, & wm831x_buckp_set_voltage, 0, 0, 0, & regulator_get_voltage_sel_regmap,
    0, 0, & regulator_enable_regmap, & regulator_disable_regmap, & regulator_is_enabled_regmap,
    & wm831x_dcdc_set_mode, & wm831x_dcdc_get_mode, 0, 0, & wm831x_dcdc_get_status,
    0, & wm831x_buckp_set_suspend_voltage, 0, 0, & wm831x_dcdc_set_suspend_mode};
#line 699 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckp_probe(struct platform_device *pdev ) 
{ 
  struct wm831x *wm831x ;
  void *tmp ;
  struct wm831x_pdata *pdata ;
  struct regulator_config config ;
  int id ;
  struct wm831x_dcdc *dcdc ;
  struct resource *res ;
  int ret ;
  int irq ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  void *tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;

  {
#line 701
  tmp = dev_get_drvdata((struct device  const  *)pdev->dev.parent);
#line 701
  wm831x = (struct wm831x *)tmp;
#line 702
  pdata = (struct wm831x_pdata *)(wm831x->dev)->platform_data;
#line 703
  config.dev = 0;
#line 703
  config.init_data = 0;
#line 703
  config.driver_data = 0;
#line 703
  config.of_node = 0;
#line 703
  config.regmap = 0;
#line 709
  if ((unsigned long )pdata != (unsigned long )((struct wm831x_pdata *)0) && pdata->wm831x_num != 0) {
#line 710
    id = pdata->wm831x_num * 10 + 1;
  } else {
#line 712
    id = 0;
  }
#line 713
  id = pdev->id - id;
#line 715
  descriptor.modname = "wm831x_dcdc";
#line 715
  descriptor.function = "wm831x_buckp_probe";
#line 715
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared";
#line 715
  descriptor.format = "Probing DCDC%d\n";
#line 715
  descriptor.lineno = 715U;
#line 715
  descriptor.flags = 1U;
#line 715
  tmp___0 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 715
  if (tmp___0 != 0L) {
#line 715
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& pdev->dev), "Probing DCDC%d\n",
                      id + 1);
  } else {

  }
#line 717
  tmp___1 = devm_kzalloc(& pdev->dev, 136UL, 208U);
#line 717
  dcdc = (struct wm831x_dcdc *)tmp___1;
#line 719
  if ((unsigned long )dcdc == (unsigned long )((struct wm831x_dcdc *)0)) {
#line 720
    dev_err((struct device  const  *)(& pdev->dev), "Unable to allocate private data\n");
#line 721
    return (-12);
  } else {

  }
#line 724
  dcdc->wm831x = wm831x;
#line 726
  res = platform_get_resource(pdev, 256U, 0U);
#line 727
  if ((unsigned long )res == (unsigned long )((struct resource *)0)) {
#line 728
    dev_err((struct device  const  *)(& pdev->dev), "No I/O resource\n");
#line 729
    ret = -22;
#line 730
    goto err;
  } else {

  }
#line 732
  dcdc->base = (int )res->start;
#line 734
  snprintf((char *)(& dcdc->name), 9UL, "DCDC%d", id + 1);
#line 735
  dcdc->desc.name = (char const   *)(& dcdc->name);
#line 737
  snprintf((char *)(& dcdc->supply_name), 9UL, "DC%dVDD", id + 1);
#line 739
  dcdc->desc.supply_name = (char const   *)(& dcdc->supply_name);
#line 741
  dcdc->desc.id = id;
#line 742
  dcdc->desc.type = REGULATOR_VOLTAGE;
#line 743
  dcdc->desc.n_voltages = 103U;
#line 744
  dcdc->desc.ops = & wm831x_buckp_ops;
#line 745
  dcdc->desc.owner = & __this_module;
#line 746
  dcdc->desc.vsel_reg = (unsigned int )(dcdc->base + 2);
#line 747
  dcdc->desc.vsel_mask = 127U;
#line 748
  dcdc->desc.enable_reg = 16464U;
#line 749
  dcdc->desc.enable_mask = (unsigned int )(1 << id);
#line 751
  config.dev = pdev->dev.parent;
#line 752
  if ((unsigned long )pdata != (unsigned long )((struct wm831x_pdata *)0)) {
#line 753
    config.init_data = (struct regulator_init_data  const  *)pdata->dcdc[id];
  } else {

  }
#line 754
  config.driver_data = (void *)dcdc;
#line 755
  config.regmap = wm831x->regmap;
#line 757
  dcdc->regulator = regulator_register((struct regulator_desc  const  *)(& dcdc->desc),
                                       (struct regulator_config  const  *)(& config));
#line 758
  tmp___3 = IS_ERR((void const   *)dcdc->regulator);
#line 758
  if (tmp___3 != 0L) {
#line 759
    tmp___2 = PTR_ERR((void const   *)dcdc->regulator);
#line 759
    ret = (int )tmp___2;
#line 760
    dev_err((struct device  const  *)wm831x->dev, "Failed to register DCDC%d: %d\n",
            id + 1, ret);
#line 762
    goto err;
  } else {

  }
#line 765
  tmp___4 = platform_get_irq_byname(pdev, "UV");
#line 765
  irq = wm831x_irq(wm831x, tmp___4);
#line 766
  ret = request_threaded_irq((unsigned int )irq, 0, & wm831x_dcdc_uv_irq, 1UL, (char const   *)(& dcdc->name),
                             (void *)dcdc);
#line 768
  if (ret != 0) {
#line 769
    dev_err((struct device  const  *)(& pdev->dev), "Failed to request UV IRQ %d: %d\n",
            irq, ret);
#line 771
    goto err_regulator;
  } else {

  }
#line 774
  platform_set_drvdata(pdev, (void *)dcdc);
#line 776
  return (0);
  err_regulator: 
#line 779
  regulator_unregister(dcdc->regulator);
  err: ;
#line 781
  return (ret);
}
}
#line 784 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_buckp_remove(struct platform_device *pdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 786
  tmp = platform_get_drvdata((struct platform_device  const  *)pdev);
#line 786
  dcdc = (struct wm831x_dcdc *)tmp;
#line 788
  platform_set_drvdata(pdev, 0);
#line 790
  tmp___0 = platform_get_irq_byname(pdev, "UV");
#line 790
  tmp___1 = wm831x_irq(dcdc->wm831x, tmp___0);
#line 790
  free_irq((unsigned int )tmp___1, (void *)dcdc);
#line 792
  regulator_unregister(dcdc->regulator);
#line 794
  return (0);
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct platform_driver wm831x_buckp_driver  =    {& wm831x_buckp_probe, & wm831x_buckp_remove, 0, 0, 0, {"wm831x-buckp", 0, & __this_module,
                                                           0, (_Bool)0, 0, 0, 0, 0,
                                                           0, 0, 0, 0, 0}, 0};
#line 810 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_boostp_get_status(struct regulator_dev *rdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  struct wm831x *wm831x ;
  int ret ;
  struct _ddebug descriptor ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 812
  tmp = rdev_get_drvdata(rdev);
#line 812
  dcdc = (struct wm831x_dcdc *)tmp;
#line 813
  wm831x = dcdc->wm831x;
#line 817
  ret = wm831x_reg_read(wm831x, 16468);
#line 818
  if (ret < 0) {
#line 819
    return (ret);
  } else {

  }
#line 821
  tmp___2 = rdev_get_id(rdev);
#line 821
  if ((ret >> tmp___2) & 1) {
#line 822
    descriptor.modname = "wm831x_dcdc";
#line 822
    descriptor.function = "wm831x_boostp_get_status";
#line 822
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared";
#line 822
    descriptor.format = "DCDC%d under voltage\n";
#line 822
    descriptor.lineno = 823U;
#line 822
    descriptor.flags = 1U;
#line 822
    tmp___1 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 822
    if (tmp___1 != 0L) {
#line 822
      tmp___0 = rdev_get_id(rdev);
#line 822
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)wm831x->dev, "DCDC%d under voltage\n",
                        tmp___0 + 1);
    } else {

    }
#line 824
    return (2);
  } else {

  }
#line 828
  ret = wm831x_reg_read(wm831x, 16466);
#line 829
  if (ret < 0) {
#line 830
    return (ret);
  } else {

  }
#line 831
  tmp___3 = rdev_get_id(rdev);
#line 831
  if ((ret >> tmp___3) & 1) {
#line 832
    return (1);
  } else {
#line 834
    return (0);
  }
}
}
#line 837 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct regulator_ops wm831x_boostp_ops  = 
#line 837
     {0, 0, 0, 0, 0, 0, 0, 0, & regulator_enable_regmap, & regulator_disable_regmap,
    & regulator_is_enabled_regmap, 0, 0, 0, 0, & wm831x_boostp_get_status, 0, 0, 0,
    0, 0};
#line 845 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_boostp_probe(struct platform_device *pdev ) 
{ 
  struct wm831x *wm831x ;
  void *tmp ;
  struct wm831x_pdata *pdata ;
  struct regulator_config config ;
  int id ;
  struct wm831x_dcdc *dcdc ;
  struct resource *res ;
  int ret ;
  int irq ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  void *tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;

  {
#line 847
  tmp = dev_get_drvdata((struct device  const  *)pdev->dev.parent);
#line 847
  wm831x = (struct wm831x *)tmp;
#line 848
  pdata = (struct wm831x_pdata *)(wm831x->dev)->platform_data;
#line 849
  config.dev = 0;
#line 849
  config.init_data = 0;
#line 849
  config.driver_data = 0;
#line 849
  config.of_node = 0;
#line 849
  config.regmap = 0;
#line 850
  id = pdev->id & 3;
#line 855
  descriptor.modname = "wm831x_dcdc";
#line 855
  descriptor.function = "wm831x_boostp_probe";
#line 855
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared";
#line 855
  descriptor.format = "Probing DCDC%d\n";
#line 855
  descriptor.lineno = 855U;
#line 855
  descriptor.flags = 1U;
#line 855
  tmp___0 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 855
  if (tmp___0 != 0L) {
#line 855
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& pdev->dev), "Probing DCDC%d\n",
                      id + 1);
  } else {

  }
#line 857
  if ((unsigned long )pdata == (unsigned long )((struct wm831x_pdata *)0) || (unsigned long )pdata->dcdc[id] == (unsigned long )((struct regulator_init_data *)0)) {
#line 858
    return (-19);
  } else {

  }
#line 860
  tmp___1 = devm_kzalloc(& pdev->dev, 136UL, 208U);
#line 860
  dcdc = (struct wm831x_dcdc *)tmp___1;
#line 861
  if ((unsigned long )dcdc == (unsigned long )((struct wm831x_dcdc *)0)) {
#line 862
    dev_err((struct device  const  *)(& pdev->dev), "Unable to allocate private data\n");
#line 863
    return (-12);
  } else {

  }
#line 866
  dcdc->wm831x = wm831x;
#line 868
  res = platform_get_resource(pdev, 256U, 0U);
#line 869
  if ((unsigned long )res == (unsigned long )((struct resource *)0)) {
#line 870
    dev_err((struct device  const  *)(& pdev->dev), "No I/O resource\n");
#line 871
    ret = -22;
#line 872
    goto err;
  } else {

  }
#line 874
  dcdc->base = (int )res->start;
#line 876
  snprintf((char *)(& dcdc->name), 9UL, "DCDC%d", id + 1);
#line 877
  dcdc->desc.name = (char const   *)(& dcdc->name);
#line 878
  dcdc->desc.id = id;
#line 879
  dcdc->desc.type = REGULATOR_VOLTAGE;
#line 880
  dcdc->desc.ops = & wm831x_boostp_ops;
#line 881
  dcdc->desc.owner = & __this_module;
#line 882
  dcdc->desc.enable_reg = 16464U;
#line 883
  dcdc->desc.enable_mask = (unsigned int )(1 << id);
#line 885
  config.dev = pdev->dev.parent;
#line 886
  if ((unsigned long )pdata != (unsigned long )((struct wm831x_pdata *)0)) {
#line 887
    config.init_data = (struct regulator_init_data  const  *)pdata->dcdc[id];
  } else {

  }
#line 888
  config.driver_data = (void *)dcdc;
#line 889
  config.regmap = wm831x->regmap;
#line 891
  dcdc->regulator = regulator_register((struct regulator_desc  const  *)(& dcdc->desc),
                                       (struct regulator_config  const  *)(& config));
#line 892
  tmp___3 = IS_ERR((void const   *)dcdc->regulator);
#line 892
  if (tmp___3 != 0L) {
#line 893
    tmp___2 = PTR_ERR((void const   *)dcdc->regulator);
#line 893
    ret = (int )tmp___2;
#line 894
    dev_err((struct device  const  *)wm831x->dev, "Failed to register DCDC%d: %d\n",
            id + 1, ret);
#line 896
    goto err;
  } else {

  }
#line 899
  tmp___4 = platform_get_irq_byname(pdev, "UV");
#line 899
  irq = wm831x_irq(wm831x, tmp___4);
#line 900
  ret = request_threaded_irq((unsigned int )irq, 0, & wm831x_dcdc_uv_irq, 1UL, (char const   *)(& dcdc->name),
                             (void *)dcdc);
#line 903
  if (ret != 0) {
#line 904
    dev_err((struct device  const  *)(& pdev->dev), "Failed to request UV IRQ %d: %d\n",
            irq, ret);
#line 906
    goto err_regulator;
  } else {

  }
#line 909
  platform_set_drvdata(pdev, (void *)dcdc);
#line 911
  return (0);
  err_regulator: 
#line 914
  regulator_unregister(dcdc->regulator);
  err: ;
#line 916
  return (ret);
}
}
#line 919 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_boostp_remove(struct platform_device *pdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 921
  tmp = platform_get_drvdata((struct platform_device  const  *)pdev);
#line 921
  dcdc = (struct wm831x_dcdc *)tmp;
#line 923
  platform_set_drvdata(pdev, 0);
#line 925
  tmp___0 = platform_get_irq_byname(pdev, "UV");
#line 925
  tmp___1 = wm831x_irq(dcdc->wm831x, tmp___0);
#line 925
  free_irq((unsigned int )tmp___1, (void *)dcdc);
#line 927
  regulator_unregister(dcdc->regulator);
#line 929
  return (0);
}
}
#line 932 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct platform_driver wm831x_boostp_driver  =    {& wm831x_boostp_probe, & wm831x_boostp_remove, 0, 0, 0, {"wm831x-boostp", 0, & __this_module,
                                                             0, (_Bool)0, 0, 0, 0,
                                                             0, 0, 0, 0, 0, 0}, 0};
#line 950 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct regulator_ops wm831x_epe_ops  = 
#line 950
     {0, 0, 0, 0, 0, 0, 0, 0, & regulator_enable_regmap, & regulator_disable_regmap,
    & regulator_is_enabled_regmap, 0, 0, 0, 0, & wm831x_dcdc_get_status, 0, 0, 0,
    0, 0};
#line 957 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_epe_probe(struct platform_device *pdev ) 
{ 
  struct wm831x *wm831x ;
  void *tmp ;
  struct wm831x_pdata *pdata ;
  struct regulator_config config ;
  int id ;
  struct wm831x_dcdc *dcdc ;
  int ret ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  void *tmp___1 ;
  long tmp___2 ;
  long tmp___3 ;

  {
#line 959
  tmp = dev_get_drvdata((struct device  const  *)pdev->dev.parent);
#line 959
  wm831x = (struct wm831x *)tmp;
#line 960
  pdata = (struct wm831x_pdata *)(wm831x->dev)->platform_data;
#line 961
  config.dev = 0;
#line 961
  config.init_data = 0;
#line 961
  config.driver_data = 0;
#line 961
  config.of_node = 0;
#line 961
  config.regmap = 0;
#line 962
  id = pdev->id & 1;
#line 966
  descriptor.modname = "wm831x_dcdc";
#line 966
  descriptor.function = "wm831x_epe_probe";
#line 966
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared";
#line 966
  descriptor.format = "Probing EPE%d\n";
#line 966
  descriptor.lineno = 966U;
#line 966
  descriptor.flags = 1U;
#line 966
  tmp___0 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 966
  if (tmp___0 != 0L) {
#line 966
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& pdev->dev), "Probing EPE%d\n",
                      id + 1);
  } else {

  }
#line 968
  tmp___1 = devm_kzalloc(& pdev->dev, 136UL, 208U);
#line 968
  dcdc = (struct wm831x_dcdc *)tmp___1;
#line 969
  if ((unsigned long )dcdc == (unsigned long )((struct wm831x_dcdc *)0)) {
#line 970
    dev_err((struct device  const  *)(& pdev->dev), "Unable to allocate private data\n");
#line 971
    return (-12);
  } else {

  }
#line 974
  dcdc->wm831x = wm831x;
#line 979
  snprintf((char *)(& dcdc->name), 9UL, "EPE%d", id + 1);
#line 980
  dcdc->desc.name = (char const   *)(& dcdc->name);
#line 981
  dcdc->desc.id = id + 6;
#line 982
  dcdc->desc.ops = & wm831x_epe_ops;
#line 983
  dcdc->desc.type = REGULATOR_VOLTAGE;
#line 984
  dcdc->desc.owner = & __this_module;
#line 985
  dcdc->desc.enable_reg = 16464U;
#line 986
  dcdc->desc.enable_mask = (unsigned int )(1 << dcdc->desc.id);
#line 988
  config.dev = pdev->dev.parent;
#line 989
  if ((unsigned long )pdata != (unsigned long )((struct wm831x_pdata *)0)) {
#line 990
    config.init_data = (struct regulator_init_data  const  *)pdata->epe[id];
  } else {

  }
#line 991
  config.driver_data = (void *)dcdc;
#line 992
  config.regmap = wm831x->regmap;
#line 994
  dcdc->regulator = regulator_register((struct regulator_desc  const  *)(& dcdc->desc),
                                       (struct regulator_config  const  *)(& config));
#line 995
  tmp___3 = IS_ERR((void const   *)dcdc->regulator);
#line 995
  if (tmp___3 != 0L) {
#line 996
    tmp___2 = PTR_ERR((void const   *)dcdc->regulator);
#line 996
    ret = (int )tmp___2;
#line 997
    dev_err((struct device  const  *)wm831x->dev, "Failed to register EPE%d: %d\n",
            id + 1, ret);
#line 999
    goto err;
  } else {

  }
#line 1002
  platform_set_drvdata(pdev, (void *)dcdc);
#line 1004
  return (0);
  err: ;
#line 1007
  return (ret);
}
}
#line 1010 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_epe_remove(struct platform_device *pdev ) 
{ 
  struct wm831x_dcdc *dcdc ;
  void *tmp ;

  {
#line 1012
  tmp = platform_get_drvdata((struct platform_device  const  *)pdev);
#line 1012
  dcdc = (struct wm831x_dcdc *)tmp;
#line 1014
  platform_set_drvdata(pdev, 0);
#line 1015
  regulator_unregister(dcdc->regulator);
#line 1017
  return (0);
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static struct platform_driver wm831x_epe_driver  =    {& wm831x_epe_probe, & wm831x_epe_remove, 0, 0, 0, {"wm831x-epe", 0, & __this_module,
                                                       0, (_Bool)0, 0, 0, 0, 0, 0,
                                                       0, 0, 0, 0}, 0};
#line 1029 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static int wm831x_dcdc_init(void) 
{ 
  int ret ;

  {
#line 1032
  ret = platform_driver_register(& wm831x_buckv_driver);
#line 1033
  if (ret != 0) {
#line 1034
    printk("<3>Failed to register WM831x BUCKV driver: %d\n", ret);
  } else {

  }
#line 1036
  ret = platform_driver_register(& wm831x_buckp_driver);
#line 1037
  if (ret != 0) {
#line 1038
    printk("<3>Failed to register WM831x BUCKP driver: %d\n", ret);
  } else {

  }
#line 1040
  ret = platform_driver_register(& wm831x_boostp_driver);
#line 1041
  if (ret != 0) {
#line 1042
    printk("<3>Failed to register WM831x BOOST driver: %d\n", ret);
  } else {

  }
#line 1044
  ret = platform_driver_register(& wm831x_epe_driver);
#line 1045
  if (ret != 0) {
#line 1046
    printk("<3>Failed to register WM831x EPE driver: %d\n", ret);
  } else {

  }
#line 1048
  return (0);
}
}
#line 1052 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
static void wm831x_dcdc_exit(void) 
{ 


  {
#line 1054
  platform_driver_unregister(& wm831x_epe_driver);
#line 1055
  platform_driver_unregister(& wm831x_boostp_driver);
#line 1056
  platform_driver_unregister(& wm831x_buckp_driver);
#line 1057
  platform_driver_unregister(& wm831x_buckv_driver);
#line 1058
  return;
}
}
#line 1085
void ldv_check_final_state(void) ;
#line 1088
extern void ldv_check_return_value(int  ) ;
#line 1091
extern void ldv_check_return_value_probe(int  ) ;
#line 1094
void ldv_initialize(void) ;
#line 1097
extern void ldv_handler_precall(void) ;
#line 1100
extern int nondet_int(void) ;
#line 1103 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 1106 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
void main(void) 
{ 
  struct regulator_dev *var_group1 ;
  int var_wm831x_buckv_set_voltage_10_p1 ;
  int var_wm831x_buckv_set_voltage_10_p2 ;
  unsigned int *var_wm831x_buckv_set_voltage_10_p3 ;
  unsigned int var_wm831x_buckv_list_voltage_7_p1 ;
  int var_wm831x_buckv_set_suspend_voltage_11_p1 ;
  int var_wm831x_buckv_set_current_limit_13_p1 ;
  int var_wm831x_buckv_set_current_limit_13_p2 ;
  unsigned int var_wm831x_dcdc_set_mode_2_p1 ;
  unsigned int var_wm831x_dcdc_set_suspend_mode_3_p1 ;
  struct platform_device *var_group2 ;
  int res_wm831x_buckv_probe_16 ;
  int var_wm831x_buckp_set_voltage_20_p1 ;
  int var_wm831x_buckp_set_voltage_20_p2 ;
  unsigned int *var_wm831x_buckp_set_voltage_20_p3 ;
  unsigned int var_wm831x_buckp_list_voltage_18_p1 ;
  int var_wm831x_buckp_set_suspend_voltage_21_p1 ;
  int res_wm831x_buckp_probe_22 ;
  int res_wm831x_boostp_probe_25 ;
  int res_wm831x_epe_probe_27 ;
  int var_wm831x_dcdc_oc_irq_6_p0 ;
  void *var_wm831x_dcdc_oc_irq_6_p1 ;
  int var_wm831x_dcdc_uv_irq_5_p0 ;
  void *var_wm831x_dcdc_uv_irq_5_p1 ;
  int ldv_s_wm831x_buckv_driver_platform_driver ;
  int ldv_s_wm831x_buckp_driver_platform_driver ;
  int ldv_s_wm831x_boostp_driver_platform_driver ;
  int ldv_s_wm831x_epe_driver_platform_driver ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1736
  ldv_s_wm831x_buckv_driver_platform_driver = 0;
#line 1740
  ldv_s_wm831x_buckp_driver_platform_driver = 0;
#line 1744
  ldv_s_wm831x_boostp_driver_platform_driver = 0;
#line 1748
  ldv_s_wm831x_epe_driver_platform_driver = 0;
#line 1702
  LDV_IN_INTERRUPT = 1;
#line 1711
  ldv_initialize();
#line 1731
  ldv_handler_precall();
#line 1732
  tmp = wm831x_dcdc_init();
#line 1732
  if (tmp != 0) {
#line 1733
    goto ldv_final;
  } else {

  }
#line 1753
  goto ldv_25649;
  ldv_25648: 
#line 1760
  tmp___0 = nondet_int();
#line 1760
  switch (tmp___0) {
  case 0: 
#line 1783
  ldv_handler_precall();
#line 1784
  wm831x_buckv_set_voltage(var_group1, var_wm831x_buckv_set_voltage_10_p1, var_wm831x_buckv_set_voltage_10_p2,
                           var_wm831x_buckv_set_voltage_10_p3);
#line 1794
  goto ldv_25617;
  case 1: 
#line 1816
  ldv_handler_precall();
#line 1817
  wm831x_buckv_get_voltage_sel(var_group1);
#line 1827
  goto ldv_25617;
  case 2: 
#line 1849
  ldv_handler_precall();
#line 1850
  wm831x_buckv_list_voltage(var_group1, var_wm831x_buckv_list_voltage_7_p1);
#line 1860
  goto ldv_25617;
  case 3: 
#line 1882
  ldv_handler_precall();
#line 1883
  wm831x_buckv_set_suspend_voltage(var_group1, var_wm831x_buckv_set_suspend_voltage_11_p1);
#line 1893
  goto ldv_25617;
  case 4: 
#line 1915
  ldv_handler_precall();
#line 1916
  wm831x_buckv_set_current_limit(var_group1, var_wm831x_buckv_set_current_limit_13_p1,
                                 var_wm831x_buckv_set_current_limit_13_p2);
#line 1926
  goto ldv_25617;
  case 5: 
#line 1948
  ldv_handler_precall();
#line 1949
  wm831x_buckv_get_current_limit(var_group1);
#line 1959
  goto ldv_25617;
  case 6: 
#line 1981
  ldv_handler_precall();
#line 1982
  wm831x_dcdc_get_status(var_group1);
#line 1992
  goto ldv_25617;
  case 7: 
#line 2014
  ldv_handler_precall();
#line 2015
  wm831x_dcdc_get_mode(var_group1);
#line 2025
  goto ldv_25617;
  case 8: 
#line 2047
  ldv_handler_precall();
#line 2048
  wm831x_dcdc_set_mode(var_group1, var_wm831x_dcdc_set_mode_2_p1);
#line 2058
  goto ldv_25617;
  case 9: 
#line 2080
  ldv_handler_precall();
#line 2081
  wm831x_dcdc_set_suspend_mode(var_group1, var_wm831x_dcdc_set_suspend_mode_3_p1);
#line 2091
  goto ldv_25617;
  case 10: ;
#line 2095
  if (ldv_s_wm831x_buckv_driver_platform_driver == 0) {
#line 2113
    res_wm831x_buckv_probe_16 = wm831x_buckv_probe(var_group2);
#line 2114
    ldv_check_return_value(res_wm831x_buckv_probe_16);
#line 2115
    ldv_check_return_value_probe(res_wm831x_buckv_probe_16);
#line 2116
    if (res_wm831x_buckv_probe_16 != 0) {
#line 2117
      goto ldv_module_exit;
    } else {

    }
#line 2121
    ldv_s_wm831x_buckv_driver_platform_driver = ldv_s_wm831x_buckv_driver_platform_driver + 1;
  } else {

  }
#line 2127
  goto ldv_25617;
  case 11: ;
#line 2131
  if (ldv_s_wm831x_buckv_driver_platform_driver == 1) {
#line 2149
    ldv_handler_precall();
#line 2150
    wm831x_buckv_remove(var_group2);
#line 2154
    ldv_s_wm831x_buckv_driver_platform_driver = 0;
  } else {

  }
#line 2160
  goto ldv_25617;
  case 12: 
#line 2182
  ldv_handler_precall();
#line 2183
  wm831x_buckp_set_voltage(var_group1, var_wm831x_buckp_set_voltage_20_p1, var_wm831x_buckp_set_voltage_20_p2,
                           var_wm831x_buckp_set_voltage_20_p3);
#line 2193
  goto ldv_25617;
  case 13: 
#line 2215
  ldv_handler_precall();
#line 2216
  wm831x_buckp_list_voltage(var_group1, var_wm831x_buckp_list_voltage_18_p1);
#line 2226
  goto ldv_25617;
  case 14: 
#line 2248
  ldv_handler_precall();
#line 2249
  wm831x_buckp_set_suspend_voltage(var_group1, var_wm831x_buckp_set_suspend_voltage_21_p1);
#line 2259
  goto ldv_25617;
  case 15: 
#line 2281
  ldv_handler_precall();
#line 2282
  wm831x_dcdc_get_status(var_group1);
#line 2292
  goto ldv_25617;
  case 16: 
#line 2314
  ldv_handler_precall();
#line 2315
  wm831x_dcdc_get_mode(var_group1);
#line 2325
  goto ldv_25617;
  case 17: 
#line 2347
  ldv_handler_precall();
#line 2348
  wm831x_dcdc_set_mode(var_group1, var_wm831x_dcdc_set_mode_2_p1);
#line 2358
  goto ldv_25617;
  case 18: 
#line 2380
  ldv_handler_precall();
#line 2381
  wm831x_dcdc_set_suspend_mode(var_group1, var_wm831x_dcdc_set_suspend_mode_3_p1);
#line 2391
  goto ldv_25617;
  case 19: ;
#line 2395
  if (ldv_s_wm831x_buckp_driver_platform_driver == 0) {
#line 2413
    res_wm831x_buckp_probe_22 = wm831x_buckp_probe(var_group2);
#line 2414
    ldv_check_return_value(res_wm831x_buckp_probe_22);
#line 2415
    ldv_check_return_value_probe(res_wm831x_buckp_probe_22);
#line 2416
    if (res_wm831x_buckp_probe_22 != 0) {
#line 2417
      goto ldv_module_exit;
    } else {

    }
#line 2421
    ldv_s_wm831x_buckp_driver_platform_driver = ldv_s_wm831x_buckp_driver_platform_driver + 1;
  } else {

  }
#line 2427
  goto ldv_25617;
  case 20: ;
#line 2431
  if (ldv_s_wm831x_buckp_driver_platform_driver == 1) {
#line 2449
    ldv_handler_precall();
#line 2450
    wm831x_buckp_remove(var_group2);
#line 2454
    ldv_s_wm831x_buckp_driver_platform_driver = 0;
  } else {

  }
#line 2460
  goto ldv_25617;
  case 21: 
#line 2482
  ldv_handler_precall();
#line 2483
  wm831x_boostp_get_status(var_group1);
#line 2493
  goto ldv_25617;
  case 22: ;
#line 2497
  if (ldv_s_wm831x_boostp_driver_platform_driver == 0) {
#line 2515
    res_wm831x_boostp_probe_25 = wm831x_boostp_probe(var_group2);
#line 2516
    ldv_check_return_value(res_wm831x_boostp_probe_25);
#line 2517
    ldv_check_return_value_probe(res_wm831x_boostp_probe_25);
#line 2518
    if (res_wm831x_boostp_probe_25 != 0) {
#line 2519
      goto ldv_module_exit;
    } else {

    }
#line 2523
    ldv_s_wm831x_boostp_driver_platform_driver = ldv_s_wm831x_boostp_driver_platform_driver + 1;
  } else {

  }
#line 2529
  goto ldv_25617;
  case 23: ;
#line 2533
  if (ldv_s_wm831x_boostp_driver_platform_driver == 1) {
#line 2551
    ldv_handler_precall();
#line 2552
    wm831x_boostp_remove(var_group2);
#line 2556
    ldv_s_wm831x_boostp_driver_platform_driver = 0;
  } else {

  }
#line 2562
  goto ldv_25617;
  case 24: 
#line 2584
  ldv_handler_precall();
#line 2585
  wm831x_dcdc_get_status(var_group1);
#line 2595
  goto ldv_25617;
  case 25: ;
#line 2599
  if (ldv_s_wm831x_epe_driver_platform_driver == 0) {
#line 2618
    res_wm831x_epe_probe_27 = wm831x_epe_probe(var_group2);
#line 2619
    ldv_check_return_value(res_wm831x_epe_probe_27);
#line 2620
    ldv_check_return_value_probe(res_wm831x_epe_probe_27);
#line 2621
    if (res_wm831x_epe_probe_27 != 0) {
#line 2622
      goto ldv_module_exit;
    } else {

    }
#line 2623
    ldv_s_wm831x_epe_driver_platform_driver = ldv_s_wm831x_epe_driver_platform_driver + 1;
  } else {

  }
#line 2629
  goto ldv_25617;
  case 26: ;
#line 2633
  if (ldv_s_wm831x_epe_driver_platform_driver == 1) {
#line 2652
    ldv_handler_precall();
#line 2653
    wm831x_epe_remove(var_group2);
#line 2654
    ldv_s_wm831x_epe_driver_platform_driver = 0;
  } else {

  }
#line 2660
  goto ldv_25617;
  case 27: 
#line 2664
  LDV_IN_INTERRUPT = 2;
#line 2682
  ldv_handler_precall();
#line 2683
  wm831x_dcdc_oc_irq(var_wm831x_dcdc_oc_irq_6_p0, var_wm831x_dcdc_oc_irq_6_p1);
#line 2687
  LDV_IN_INTERRUPT = 1;
#line 2693
  goto ldv_25617;
  case 28: 
#line 2697
  LDV_IN_INTERRUPT = 2;
#line 2715
  ldv_handler_precall();
#line 2716
  wm831x_dcdc_uv_irq(var_wm831x_dcdc_uv_irq_5_p0, var_wm831x_dcdc_uv_irq_5_p1);
#line 2720
  LDV_IN_INTERRUPT = 1;
#line 2726
  goto ldv_25617;
  default: ;
#line 2727
  goto ldv_25617;
  }
  ldv_25617: ;
  ldv_25649: 
#line 1753
  tmp___1 = nondet_int();
#line 1753
  if ((((tmp___1 != 0 || ldv_s_wm831x_buckv_driver_platform_driver != 0) || ldv_s_wm831x_buckp_driver_platform_driver != 0) || ldv_s_wm831x_boostp_driver_platform_driver != 0) || ldv_s_wm831x_epe_driver_platform_driver != 0) {
#line 1758
    goto ldv_25648;
  } else {

  }

  ldv_module_exit: 
#line 2753
  ldv_handler_precall();
#line 2754
  wm831x_dcdc_exit();
  ldv_final: 
#line 2757
  ldv_check_final_state();
#line 2760
  return;
}
}
#line 2764 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2769
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 2771
  mutex_lock(ldv_func_arg1);
#line 2772
  return;
}
}
#line 2774 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
int ldv_mutex_trylock_2(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___0 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2779
  tmp = mutex_trylock(ldv_func_arg1);
#line 2779
  ldv_func_res = tmp;
#line 2781
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 2781
  return (tmp___0);
#line 2783
  return (ldv_func_res);
}
}
#line 2786 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
void ldv_mutex_unlock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2791
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 2793
  mutex_unlock(ldv_func_arg1);
#line 2794
  return;
}
}
#line 2796 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
void ldv_mutex_lock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2801
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 2803
  mutex_lock(ldv_func_arg1);
#line 2804
  return;
}
}
#line 2806 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2811
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 2813
  mutex_unlock(ldv_func_arg1);
#line 2814
  return;
}
}
#line 2816 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2821
  ldv_mutex_lock_pm_mutex(ldv_func_arg1);
#line 2823
  mutex_lock(ldv_func_arg1);
#line 2824
  return;
}
}
#line 2826 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/regulator/wm831x-dcdc.c.prepared"
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2831
  ldv_mutex_unlock_pm_mutex(ldv_func_arg1);
#line 2833
  mutex_unlock(ldv_func_arg1);
#line 2834
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void)  __attribute__((__no_instrument_function__)) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_cred_guard_mutex_of_signal_struct  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_cred_guard_mutex_of_signal_struct(atomic_t *cnt ,
                                                                    struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_mutex_of_device = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_mutex_of_device = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_mutex_of_device = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_mutex_of_device = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_mutex_of_device = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_mutex_of_device == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_mutex_of_device = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_pm_mutex  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_pm_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_pm_mutex == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_pm_mutex = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_pm_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_pm_mutex == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_pm_mutex = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_pm_mutex(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_pm_mutex == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_pm_mutex = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_pm_mutex(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_pm_mutex == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_pm_mutex = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_pm_mutex(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_pm_mutex == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_pm_mutex = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_pm_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_pm_mutex == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_pm_mutex(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_pm_mutex == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_pm_mutex = 1;
#line 462
  return;
}
}
#line 466 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 469
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
#line 471
  ldv_mutex_mutex_of_device = 1;
#line 473
  ldv_mutex_pm_mutex = 1;
#line 474
  return;
}
}
#line 477 "/work/ldvuser/novikov/work/current--X--drivers/regulator/wm831x-dcdc.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 480
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 480
    ldv_error();
  }
#line 482
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 482
    ldv_error();
  }
#line 484
  if (ldv_mutex_pm_mutex == 1) {

  } else {
#line 484
    ldv_error();
  }
#line 485
  return;
}
}
